
STM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d28  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000180b8  08017ef8  08017ef8  00027ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802ffb0  0802ffb0  0003ffb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802ffb8  0802ffb8  0003ffb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802ffbc  0802ffbc  0003ffbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005f8  20010000  0802ffc0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 000000a0  200105f8  080305b8  000405f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxBUF        00001dc4  20010698  08030658  00040698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxBUF        00001dc4  2001245c  0803241c  0004245c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDescripSection 000000a0  20014220  080341e0  00044220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .dtcmram      00000000  20000000  20000000  000442c0  2**0
                  CONTENTS
 12 .sram2        00000000  2004c000  2004c000  000442c0  2**0
                  CONTENTS
 13 .bss          00035564  200142c0  200142c0  000442c0  2**2
                  ALLOC
 14 ._user_heap_stack 00000400  20049824  20049824  000442c0  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000442c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   0004ce3c  00000000  00000000  000442f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000a81a  00000000  00000000  0009112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00029d5d  00000000  00000000  0009b946  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 000028e8  00000000  00000000  000c56a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003b28  00000000  00000000  000c7f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   000173f5  00000000  00000000  000cbab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0000dbce  00000000  00000000  000e2ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007e  00000000  00000000  000f0a7b  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008cbc  00000000  00000000  000f0afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 25 .stabstr      000000df  00000000  00000000  000f97b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200142c0 	.word	0x200142c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017ee0 	.word	0x08017ee0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200142c4 	.word	0x200142c4
 800020c:	08017ee0 	.word	0x08017ee0

08000210 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000210:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000212:	2b01      	cmp	r3, #1
	IT       LS
 8000214:	bf98      	it	ls
	BXLS     lr
 8000216:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800021c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000228:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800022e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000230:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000232:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000234:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800023e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000244:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000248:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800024c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000250:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800025a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800026c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800026e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000270:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800027a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800027c:	2b01      	cmp	r3, #1
	IT       LS
 800027e:	bf98      	it	ls
	BXLS     lr
 8000280:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000286:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000292:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002b0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002be:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002c2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002c4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002c6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f092 0f00 	teq	r2, #0
 800066a:	bf14      	ite	ne
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	e720      	b.n	80004c4 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_ul2d>:
 8000684:	ea50 0201 	orrs.w	r2, r0, r1
 8000688:	bf08      	it	eq
 800068a:	4770      	bxeq	lr
 800068c:	b530      	push	{r4, r5, lr}
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	e00a      	b.n	80006aa <__aeabi_l2d+0x16>

08000694 <__aeabi_l2d>:
 8000694:	ea50 0201 	orrs.w	r2, r0, r1
 8000698:	bf08      	it	eq
 800069a:	4770      	bxeq	lr
 800069c:	b530      	push	{r4, r5, lr}
 800069e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006a2:	d502      	bpl.n	80006aa <__aeabi_l2d+0x16>
 80006a4:	4240      	negs	r0, r0
 80006a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006b6:	f43f aedc 	beq.w	8000472 <__adddf3+0xe6>
 80006ba:	f04f 0203 	mov.w	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006d2:	f1c2 0320 	rsb	r3, r2, #32
 80006d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 fe03 	lsl.w	lr, r1, r3
 80006e2:	ea40 000e 	orr.w	r0, r0, lr
 80006e6:	fa21 f102 	lsr.w	r1, r1, r2
 80006ea:	4414      	add	r4, r2
 80006ec:	e6c1      	b.n	8000472 <__adddf3+0xe6>
 80006ee:	bf00      	nop

080006f0 <__aeabi_dmul>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006fe:	bf1d      	ittte	ne
 8000700:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000704:	ea94 0f0c 	teqne	r4, ip
 8000708:	ea95 0f0c 	teqne	r5, ip
 800070c:	f000 f8de 	bleq	80008cc <__aeabi_dmul+0x1dc>
 8000710:	442c      	add	r4, r5
 8000712:	ea81 0603 	eor.w	r6, r1, r3
 8000716:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800071a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800071e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000722:	bf18      	it	ne
 8000724:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000730:	d038      	beq.n	80007a4 <__aeabi_dmul+0xb4>
 8000732:	fba0 ce02 	umull	ip, lr, r0, r2
 8000736:	f04f 0500 	mov.w	r5, #0
 800073a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800073e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000742:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000746:	f04f 0600 	mov.w	r6, #0
 800074a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800074e:	f09c 0f00 	teq	ip, #0
 8000752:	bf18      	it	ne
 8000754:	f04e 0e01 	orrne.w	lr, lr, #1
 8000758:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800075c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000760:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000764:	d204      	bcs.n	8000770 <__aeabi_dmul+0x80>
 8000766:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800076a:	416d      	adcs	r5, r5
 800076c:	eb46 0606 	adc.w	r6, r6, r6
 8000770:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000774:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000778:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800077c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000780:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000784:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000788:	bf88      	it	hi
 800078a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800078e:	d81e      	bhi.n	80007ce <__aeabi_dmul+0xde>
 8000790:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000794:	bf08      	it	eq
 8000796:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800079a:	f150 0000 	adcs.w	r0, r0, #0
 800079e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a8:	ea46 0101 	orr.w	r1, r6, r1
 80007ac:	ea40 0002 	orr.w	r0, r0, r2
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b8:	bfc2      	ittt	gt
 80007ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007c2:	bd70      	popgt	{r4, r5, r6, pc}
 80007c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c8:	f04f 0e00 	mov.w	lr, #0
 80007cc:	3c01      	subs	r4, #1
 80007ce:	f300 80ab 	bgt.w	8000928 <__aeabi_dmul+0x238>
 80007d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007d6:	bfde      	ittt	le
 80007d8:	2000      	movle	r0, #0
 80007da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007de:	bd70      	pople	{r4, r5, r6, pc}
 80007e0:	f1c4 0400 	rsb	r4, r4, #0
 80007e4:	3c20      	subs	r4, #32
 80007e6:	da35      	bge.n	8000854 <__aeabi_dmul+0x164>
 80007e8:	340c      	adds	r4, #12
 80007ea:	dc1b      	bgt.n	8000824 <__aeabi_dmul+0x134>
 80007ec:	f104 0414 	add.w	r4, r4, #20
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f305 	lsl.w	r3, r0, r5
 80007f8:	fa20 f004 	lsr.w	r0, r0, r4
 80007fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000810:	fa21 f604 	lsr.w	r6, r1, r4
 8000814:	eb42 0106 	adc.w	r1, r2, r6
 8000818:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800081c:	bf08      	it	eq
 800081e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f1c4 040c 	rsb	r4, r4, #12
 8000828:	f1c4 0520 	rsb	r5, r4, #32
 800082c:	fa00 f304 	lsl.w	r3, r0, r4
 8000830:	fa20 f005 	lsr.w	r0, r0, r5
 8000834:	fa01 f204 	lsl.w	r2, r1, r4
 8000838:	ea40 0002 	orr.w	r0, r0, r2
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000844:	f141 0100 	adc.w	r1, r1, #0
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f1c4 0520 	rsb	r5, r4, #32
 8000858:	fa00 f205 	lsl.w	r2, r0, r5
 800085c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000860:	fa20 f304 	lsr.w	r3, r0, r4
 8000864:	fa01 f205 	lsl.w	r2, r1, r5
 8000868:	ea43 0302 	orr.w	r3, r3, r2
 800086c:	fa21 f004 	lsr.w	r0, r1, r4
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	fa21 f204 	lsr.w	r2, r1, r4
 8000878:	ea20 0002 	bic.w	r0, r0, r2
 800087c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000884:	bf08      	it	eq
 8000886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f094 0f00 	teq	r4, #0
 8000890:	d10f      	bne.n	80008b2 <__aeabi_dmul+0x1c2>
 8000892:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000896:	0040      	lsls	r0, r0, #1
 8000898:	eb41 0101 	adc.w	r1, r1, r1
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	bf08      	it	eq
 80008a2:	3c01      	subeq	r4, #1
 80008a4:	d0f7      	beq.n	8000896 <__aeabi_dmul+0x1a6>
 80008a6:	ea41 0106 	orr.w	r1, r1, r6
 80008aa:	f095 0f00 	teq	r5, #0
 80008ae:	bf18      	it	ne
 80008b0:	4770      	bxne	lr
 80008b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008b6:	0052      	lsls	r2, r2, #1
 80008b8:	eb43 0303 	adc.w	r3, r3, r3
 80008bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c0:	bf08      	it	eq
 80008c2:	3d01      	subeq	r5, #1
 80008c4:	d0f7      	beq.n	80008b6 <__aeabi_dmul+0x1c6>
 80008c6:	ea43 0306 	orr.w	r3, r3, r6
 80008ca:	4770      	bx	lr
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d4:	bf18      	it	ne
 80008d6:	ea95 0f0c 	teqne	r5, ip
 80008da:	d00c      	beq.n	80008f6 <__aeabi_dmul+0x206>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	d1d1      	bne.n	800088c <__aeabi_dmul+0x19c>
 80008e8:	ea81 0103 	eor.w	r1, r1, r3
 80008ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f0:	f04f 0000 	mov.w	r0, #0
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
 80008f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fa:	bf06      	itte	eq
 80008fc:	4610      	moveq	r0, r2
 80008fe:	4619      	moveq	r1, r3
 8000900:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000904:	d019      	beq.n	800093a <__aeabi_dmul+0x24a>
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	d102      	bne.n	8000912 <__aeabi_dmul+0x222>
 800090c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000910:	d113      	bne.n	800093a <__aeabi_dmul+0x24a>
 8000912:	ea95 0f0c 	teq	r5, ip
 8000916:	d105      	bne.n	8000924 <__aeabi_dmul+0x234>
 8000918:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800091c:	bf1c      	itt	ne
 800091e:	4610      	movne	r0, r2
 8000920:	4619      	movne	r1, r3
 8000922:	d10a      	bne.n	800093a <__aeabi_dmul+0x24a>
 8000924:	ea81 0103 	eor.w	r1, r1, r3
 8000928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800092c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000930:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800093e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000942:	bd70      	pop	{r4, r5, r6, pc}

08000944 <__aeabi_ddiv>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800094a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800094e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000952:	bf1d      	ittte	ne
 8000954:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000958:	ea94 0f0c 	teqne	r4, ip
 800095c:	ea95 0f0c 	teqne	r5, ip
 8000960:	f000 f8a7 	bleq	8000ab2 <__aeabi_ddiv+0x16e>
 8000964:	eba4 0405 	sub.w	r4, r4, r5
 8000968:	ea81 0e03 	eor.w	lr, r1, r3
 800096c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000970:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000974:	f000 8088 	beq.w	8000a88 <__aeabi_ddiv+0x144>
 8000978:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800097c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000980:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000984:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000988:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800098c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000990:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000994:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000998:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800099c:	429d      	cmp	r5, r3
 800099e:	bf08      	it	eq
 80009a0:	4296      	cmpeq	r6, r2
 80009a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009aa:	d202      	bcs.n	80009b2 <__aeabi_ddiv+0x6e>
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b2:	1ab6      	subs	r6, r6, r2
 80009b4:	eb65 0503 	sbc.w	r5, r5, r3
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a20:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a24:	d018      	beq.n	8000a58 <__aeabi_ddiv+0x114>
 8000a26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a42:	d1c0      	bne.n	80009c6 <__aeabi_ddiv+0x82>
 8000a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a48:	d10b      	bne.n	8000a62 <__aeabi_ddiv+0x11e>
 8000a4a:	ea41 0100 	orr.w	r1, r1, r0
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a56:	e7b6      	b.n	80009c6 <__aeabi_ddiv+0x82>
 8000a58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a5c:	bf04      	itt	eq
 8000a5e:	4301      	orreq	r1, r0
 8000a60:	2000      	moveq	r0, #0
 8000a62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a66:	bf88      	it	hi
 8000a68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a6c:	f63f aeaf 	bhi.w	80007ce <__aeabi_dmul+0xde>
 8000a70:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a74:	bf04      	itt	eq
 8000a76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a7e:	f150 0000 	adcs.w	r0, r0, #0
 8000a82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
 8000a88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a94:	bfc2      	ittt	gt
 8000a96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa4:	f04f 0e00 	mov.w	lr, #0
 8000aa8:	3c01      	subs	r4, #1
 8000aaa:	e690      	b.n	80007ce <__aeabi_dmul+0xde>
 8000aac:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab0:	e68d      	b.n	80007ce <__aeabi_dmul+0xde>
 8000ab2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ab6:	ea94 0f0c 	teq	r4, ip
 8000aba:	bf08      	it	eq
 8000abc:	ea95 0f0c 	teqeq	r5, ip
 8000ac0:	f43f af3b 	beq.w	800093a <__aeabi_dmul+0x24a>
 8000ac4:	ea94 0f0c 	teq	r4, ip
 8000ac8:	d10a      	bne.n	8000ae0 <__aeabi_ddiv+0x19c>
 8000aca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ace:	f47f af34 	bne.w	800093a <__aeabi_dmul+0x24a>
 8000ad2:	ea95 0f0c 	teq	r5, ip
 8000ad6:	f47f af25 	bne.w	8000924 <__aeabi_dmul+0x234>
 8000ada:	4610      	mov	r0, r2
 8000adc:	4619      	mov	r1, r3
 8000ade:	e72c      	b.n	800093a <__aeabi_dmul+0x24a>
 8000ae0:	ea95 0f0c 	teq	r5, ip
 8000ae4:	d106      	bne.n	8000af4 <__aeabi_ddiv+0x1b0>
 8000ae6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aea:	f43f aefd 	beq.w	80008e8 <__aeabi_dmul+0x1f8>
 8000aee:	4610      	mov	r0, r2
 8000af0:	4619      	mov	r1, r3
 8000af2:	e722      	b.n	800093a <__aeabi_dmul+0x24a>
 8000af4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af8:	bf18      	it	ne
 8000afa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000afe:	f47f aec5 	bne.w	800088c <__aeabi_dmul+0x19c>
 8000b02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b06:	f47f af0d 	bne.w	8000924 <__aeabi_dmul+0x234>
 8000b0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b0e:	f47f aeeb 	bne.w	80008e8 <__aeabi_dmul+0x1f8>
 8000b12:	e712      	b.n	800093a <__aeabi_dmul+0x24a>

08000b14 <__gedf2>:
 8000b14:	f04f 3cff 	mov.w	ip, #4294967295
 8000b18:	e006      	b.n	8000b28 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__ledf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	e002      	b.n	8000b28 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__cmpdf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	bf18      	it	ne
 8000b3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b3e:	d01b      	beq.n	8000b78 <__cmpdf2+0x54>
 8000b40:	b001      	add	sp, #4
 8000b42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b46:	bf0c      	ite	eq
 8000b48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b4c:	ea91 0f03 	teqne	r1, r3
 8000b50:	bf02      	ittt	eq
 8000b52:	ea90 0f02 	teqeq	r0, r2
 8000b56:	2000      	moveq	r0, #0
 8000b58:	4770      	bxeq	lr
 8000b5a:	f110 0f00 	cmn.w	r0, #0
 8000b5e:	ea91 0f03 	teq	r1, r3
 8000b62:	bf58      	it	pl
 8000b64:	4299      	cmppl	r1, r3
 8000b66:	bf08      	it	eq
 8000b68:	4290      	cmpeq	r0, r2
 8000b6a:	bf2c      	ite	cs
 8000b6c:	17d8      	asrcs	r0, r3, #31
 8000b6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b72:	f040 0001 	orr.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b80:	d102      	bne.n	8000b88 <__cmpdf2+0x64>
 8000b82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b86:	d107      	bne.n	8000b98 <__cmpdf2+0x74>
 8000b88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d1d6      	bne.n	8000b40 <__cmpdf2+0x1c>
 8000b92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b96:	d0d3      	beq.n	8000b40 <__cmpdf2+0x1c>
 8000b98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_cdrcmple>:
 8000ba0:	4684      	mov	ip, r0
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	4662      	mov	r2, ip
 8000ba6:	468c      	mov	ip, r1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4663      	mov	r3, ip
 8000bac:	e000      	b.n	8000bb0 <__aeabi_cdcmpeq>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_cdcmpeq>:
 8000bb0:	b501      	push	{r0, lr}
 8000bb2:	f7ff ffb7 	bl	8000b24 <__cmpdf2>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	bf48      	it	mi
 8000bba:	f110 0f00 	cmnmi.w	r0, #0
 8000bbe:	bd01      	pop	{r0, pc}

08000bc0 <__aeabi_dcmpeq>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff fff4 	bl	8000bb0 <__aeabi_cdcmpeq>
 8000bc8:	bf0c      	ite	eq
 8000bca:	2001      	moveq	r0, #1
 8000bcc:	2000      	movne	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmplt>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffea 	bl	8000bb0 <__aeabi_cdcmpeq>
 8000bdc:	bf34      	ite	cc
 8000bde:	2001      	movcc	r0, #1
 8000be0:	2000      	movcs	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmple>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffe0 	bl	8000bb0 <__aeabi_cdcmpeq>
 8000bf0:	bf94      	ite	ls
 8000bf2:	2001      	movls	r0, #1
 8000bf4:	2000      	movhi	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpge>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffce 	bl	8000ba0 <__aeabi_cdrcmple>
 8000c04:	bf94      	ite	ls
 8000c06:	2001      	movls	r0, #1
 8000c08:	2000      	movhi	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmpgt>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffc4 	bl	8000ba0 <__aeabi_cdrcmple>
 8000c18:	bf34      	ite	cc
 8000c1a:	2001      	movcc	r0, #1
 8000c1c:	2000      	movcs	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpun>:
 8000c24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c2c:	d102      	bne.n	8000c34 <__aeabi_dcmpun+0x10>
 8000c2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c32:	d10a      	bne.n	8000c4a <__aeabi_dcmpun+0x26>
 8000c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c3c:	d102      	bne.n	8000c44 <__aeabi_dcmpun+0x20>
 8000c3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c42:	d102      	bne.n	8000c4a <__aeabi_dcmpun+0x26>
 8000c44:	f04f 0000 	mov.w	r0, #0
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0001 	mov.w	r0, #1
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_d2iz>:
 8000c50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c58:	d215      	bcs.n	8000c86 <__aeabi_d2iz+0x36>
 8000c5a:	d511      	bpl.n	8000c80 <__aeabi_d2iz+0x30>
 8000c5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c64:	d912      	bls.n	8000c8c <__aeabi_d2iz+0x3c>
 8000c66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c76:	fa23 f002 	lsr.w	r0, r3, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c8a:	d105      	bne.n	8000c98 <__aeabi_d2iz+0x48>
 8000c8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	bf08      	it	eq
 8000c92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c96:	4770      	bx	lr
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_d2uiz>:
 8000ca0:	004a      	lsls	r2, r1, #1
 8000ca2:	d211      	bcs.n	8000cc8 <__aeabi_d2uiz+0x28>
 8000ca4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca8:	d211      	bcs.n	8000cce <__aeabi_d2uiz+0x2e>
 8000caa:	d50d      	bpl.n	8000cc8 <__aeabi_d2uiz+0x28>
 8000cac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cb4:	d40e      	bmi.n	8000cd4 <__aeabi_d2uiz+0x34>
 8000cb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000cc6:	4770      	bx	lr
 8000cc8:	f04f 0000 	mov.w	r0, #0
 8000ccc:	4770      	bx	lr
 8000cce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cd2:	d102      	bne.n	8000cda <__aeabi_d2uiz+0x3a>
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	4770      	bx	lr
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2f>:
 8000ce0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ce4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ce8:	bf24      	itt	cs
 8000cea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cf2:	d90d      	bls.n	8000d10 <__aeabi_d2f+0x30>
 8000cf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d14:	d121      	bne.n	8000d5a <__aeabi_d2f+0x7a>
 8000d16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d1a:	bfbc      	itt	lt
 8000d1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d20:	4770      	bxlt	lr
 8000d22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d2a:	f1c2 0218 	rsb	r2, r2, #24
 8000d2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000d32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d36:	fa20 f002 	lsr.w	r0, r0, r2
 8000d3a:	bf18      	it	ne
 8000d3c:	f040 0001 	orrne.w	r0, r0, #1
 8000d40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d4c:	ea40 000c 	orr.w	r0, r0, ip
 8000d50:	fa23 f302 	lsr.w	r3, r3, r2
 8000d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d58:	e7cc      	b.n	8000cf4 <__aeabi_d2f+0x14>
 8000d5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d5e:	d107      	bne.n	8000d70 <__aeabi_d2f+0x90>
 8000d60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d64:	bf1e      	ittt	ne
 8000d66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bxne	lr
 8000d70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <__aeabi_uldivmod>:
 8000d80:	b953      	cbnz	r3, 8000d98 <__aeabi_uldivmod+0x18>
 8000d82:	b94a      	cbnz	r2, 8000d98 <__aeabi_uldivmod+0x18>
 8000d84:	2900      	cmp	r1, #0
 8000d86:	bf08      	it	eq
 8000d88:	2800      	cmpeq	r0, #0
 8000d8a:	bf1c      	itt	ne
 8000d8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d90:	f04f 30ff 	movne.w	r0, #4294967295
 8000d94:	f000 b97e 	b.w	8001094 <__aeabi_idiv0>
 8000d98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da0:	f000 f806 	bl	8000db0 <__udivmoddi4>
 8000da4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dac:	b004      	add	sp, #16
 8000dae:	4770      	bx	lr

08000db0 <__udivmoddi4>:
 8000db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db4:	468c      	mov	ip, r1
 8000db6:	460e      	mov	r6, r1
 8000db8:	4604      	mov	r4, r0
 8000dba:	9d08      	ldr	r5, [sp, #32]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d150      	bne.n	8000e62 <__udivmoddi4+0xb2>
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	4617      	mov	r7, r2
 8000dc4:	d96c      	bls.n	8000ea0 <__udivmoddi4+0xf0>
 8000dc6:	fab2 fe82 	clz	lr, r2
 8000dca:	f1be 0f00 	cmp.w	lr, #0
 8000dce:	d00b      	beq.n	8000de8 <__udivmoddi4+0x38>
 8000dd0:	f1ce 0420 	rsb	r4, lr, #32
 8000dd4:	fa20 f404 	lsr.w	r4, r0, r4
 8000dd8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000ddc:	ea44 0c06 	orr.w	ip, r4, r6
 8000de0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000de4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000de8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	fbbc f0f9 	udiv	r0, ip, r9
 8000df2:	fa1f f887 	uxth.w	r8, r7
 8000df6:	fb09 c610 	mls	r6, r9, r0, ip
 8000dfa:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000dfe:	fb00 f308 	mul.w	r3, r0, r8
 8000e02:	42b3      	cmp	r3, r6
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0x6a>
 8000e06:	19f6      	adds	r6, r6, r7
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	f080 8122 	bcs.w	8001054 <__udivmoddi4+0x2a4>
 8000e10:	42b3      	cmp	r3, r6
 8000e12:	f240 811f 	bls.w	8001054 <__udivmoddi4+0x2a4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	443e      	add	r6, r7
 8000e1a:	1af6      	subs	r6, r6, r3
 8000e1c:	b2a2      	uxth	r2, r4
 8000e1e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000e22:	fb09 6613 	mls	r6, r9, r3, r6
 8000e26:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000e2a:	fb03 f808 	mul.w	r8, r3, r8
 8000e2e:	45a0      	cmp	r8, r4
 8000e30:	d909      	bls.n	8000e46 <__udivmoddi4+0x96>
 8000e32:	19e4      	adds	r4, r4, r7
 8000e34:	f103 32ff 	add.w	r2, r3, #4294967295
 8000e38:	f080 810a 	bcs.w	8001050 <__udivmoddi4+0x2a0>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f240 8107 	bls.w	8001050 <__udivmoddi4+0x2a0>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ebc8 0404 	rsb	r4, r8, r4
 8000e4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d062      	beq.n	8000f1a <__udivmoddi4+0x16a>
 8000e54:	fa24 f40e 	lsr.w	r4, r4, lr
 8000e58:	2300      	movs	r3, #0
 8000e5a:	602c      	str	r4, [r5, #0]
 8000e5c:	606b      	str	r3, [r5, #4]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0xc6>
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	d055      	beq.n	8000f16 <__udivmoddi4+0x166>
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000e70:	4608      	mov	r0, r1
 8000e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e76:	fab3 f183 	clz	r1, r3
 8000e7a:	2900      	cmp	r1, #0
 8000e7c:	f040 8090 	bne.w	8000fa0 <__udivmoddi4+0x1f0>
 8000e80:	42b3      	cmp	r3, r6
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0xda>
 8000e84:	4282      	cmp	r2, r0
 8000e86:	f200 80f8 	bhi.w	800107a <__udivmoddi4+0x2ca>
 8000e8a:	1a84      	subs	r4, r0, r2
 8000e8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	46b4      	mov	ip, r6
 8000e94:	2d00      	cmp	r5, #0
 8000e96:	d040      	beq.n	8000f1a <__udivmoddi4+0x16a>
 8000e98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea0:	b912      	cbnz	r2, 8000ea8 <__udivmoddi4+0xf8>
 8000ea2:	2701      	movs	r7, #1
 8000ea4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ea8:	fab7 fe87 	clz	lr, r7
 8000eac:	f1be 0f00 	cmp.w	lr, #0
 8000eb0:	d135      	bne.n	8000f1e <__udivmoddi4+0x16e>
 8000eb2:	1bf3      	subs	r3, r6, r7
 8000eb4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eb8:	fa1f fc87 	uxth.w	ip, r7
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec2:	0c22      	lsrs	r2, r4, #16
 8000ec4:	fb08 3610 	mls	r6, r8, r0, r3
 8000ec8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000ecc:	fb0c f300 	mul.w	r3, ip, r0
 8000ed0:	42b3      	cmp	r3, r6
 8000ed2:	d907      	bls.n	8000ee4 <__udivmoddi4+0x134>
 8000ed4:	19f6      	adds	r6, r6, r7
 8000ed6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eda:	d202      	bcs.n	8000ee2 <__udivmoddi4+0x132>
 8000edc:	42b3      	cmp	r3, r6
 8000ede:	f200 80ce 	bhi.w	800107e <__udivmoddi4+0x2ce>
 8000ee2:	4610      	mov	r0, r2
 8000ee4:	1af6      	subs	r6, r6, r3
 8000ee6:	b2a2      	uxth	r2, r4
 8000ee8:	fbb6 f3f8 	udiv	r3, r6, r8
 8000eec:	fb08 6613 	mls	r6, r8, r3, r6
 8000ef0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000ef4:	fb0c fc03 	mul.w	ip, ip, r3
 8000ef8:	45a4      	cmp	ip, r4
 8000efa:	d907      	bls.n	8000f0c <__udivmoddi4+0x15c>
 8000efc:	19e4      	adds	r4, r4, r7
 8000efe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000f02:	d202      	bcs.n	8000f0a <__udivmoddi4+0x15a>
 8000f04:	45a4      	cmp	ip, r4
 8000f06:	f200 80b5 	bhi.w	8001074 <__udivmoddi4+0x2c4>
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	ebcc 0404 	rsb	r4, ip, r4
 8000f10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f14:	e79c      	b.n	8000e50 <__udivmoddi4+0xa0>
 8000f16:	4629      	mov	r1, r5
 8000f18:	4628      	mov	r0, r5
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f1e:	f1ce 0120 	rsb	r1, lr, #32
 8000f22:	fa06 f30e 	lsl.w	r3, r6, lr
 8000f26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000f2a:	fa20 f901 	lsr.w	r9, r0, r1
 8000f2e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f32:	40ce      	lsrs	r6, r1
 8000f34:	ea49 0903 	orr.w	r9, r9, r3
 8000f38:	fbb6 faf8 	udiv	sl, r6, r8
 8000f3c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000f40:	fb08 661a 	mls	r6, r8, sl, r6
 8000f44:	fa1f fc87 	uxth.w	ip, r7
 8000f48:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000f4c:	fb0a f20c 	mul.w	r2, sl, ip
 8000f50:	429a      	cmp	r2, r3
 8000f52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000f56:	d90a      	bls.n	8000f6e <__udivmoddi4+0x1be>
 8000f58:	19db      	adds	r3, r3, r7
 8000f5a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000f5e:	f080 8087 	bcs.w	8001070 <__udivmoddi4+0x2c0>
 8000f62:	429a      	cmp	r2, r3
 8000f64:	f240 8084 	bls.w	8001070 <__udivmoddi4+0x2c0>
 8000f68:	f1aa 0a02 	sub.w	sl, sl, #2
 8000f6c:	443b      	add	r3, r7
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	fa1f f989 	uxth.w	r9, r9
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000f80:	fb01 f60c 	mul.w	r6, r1, ip
 8000f84:	429e      	cmp	r6, r3
 8000f86:	d907      	bls.n	8000f98 <__udivmoddi4+0x1e8>
 8000f88:	19db      	adds	r3, r3, r7
 8000f8a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000f8e:	d26b      	bcs.n	8001068 <__udivmoddi4+0x2b8>
 8000f90:	429e      	cmp	r6, r3
 8000f92:	d969      	bls.n	8001068 <__udivmoddi4+0x2b8>
 8000f94:	3902      	subs	r1, #2
 8000f96:	443b      	add	r3, r7
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000f9e:	e78e      	b.n	8000ebe <__udivmoddi4+0x10e>
 8000fa0:	f1c1 0e20 	rsb	lr, r1, #32
 8000fa4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000fa8:	408b      	lsls	r3, r1
 8000faa:	4323      	orrs	r3, r4
 8000fac:	fa20 f70e 	lsr.w	r7, r0, lr
 8000fb0:	fa06 f401 	lsl.w	r4, r6, r1
 8000fb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000fb8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000fbc:	433c      	orrs	r4, r7
 8000fbe:	fbb6 f9fc 	udiv	r9, r6, ip
 8000fc2:	0c27      	lsrs	r7, r4, #16
 8000fc4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000fc8:	fa1f f883 	uxth.w	r8, r3
 8000fcc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000fd0:	fb09 f708 	mul.w	r7, r9, r8
 8000fd4:	42b7      	cmp	r7, r6
 8000fd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000fda:	fa00 fa01 	lsl.w	sl, r0, r1
 8000fde:	d908      	bls.n	8000ff2 <__udivmoddi4+0x242>
 8000fe0:	18f6      	adds	r6, r6, r3
 8000fe2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fe6:	d241      	bcs.n	800106c <__udivmoddi4+0x2bc>
 8000fe8:	42b7      	cmp	r7, r6
 8000fea:	d93f      	bls.n	800106c <__udivmoddi4+0x2bc>
 8000fec:	f1a9 0902 	sub.w	r9, r9, #2
 8000ff0:	441e      	add	r6, r3
 8000ff2:	1bf6      	subs	r6, r6, r7
 8000ff4:	b2a0      	uxth	r0, r4
 8000ff6:	fbb6 f4fc 	udiv	r4, r6, ip
 8000ffa:	fb0c 6614 	mls	r6, ip, r4, r6
 8000ffe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8001002:	fb04 f808 	mul.w	r8, r4, r8
 8001006:	45b8      	cmp	r8, r7
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x26a>
 800100a:	18ff      	adds	r7, r7, r3
 800100c:	f104 30ff 	add.w	r0, r4, #4294967295
 8001010:	d228      	bcs.n	8001064 <__udivmoddi4+0x2b4>
 8001012:	45b8      	cmp	r8, r7
 8001014:	d926      	bls.n	8001064 <__udivmoddi4+0x2b4>
 8001016:	3c02      	subs	r4, #2
 8001018:	441f      	add	r7, r3
 800101a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800101e:	ebc8 0707 	rsb	r7, r8, r7
 8001022:	fba0 8902 	umull	r8, r9, r0, r2
 8001026:	454f      	cmp	r7, r9
 8001028:	4644      	mov	r4, r8
 800102a:	464e      	mov	r6, r9
 800102c:	d314      	bcc.n	8001058 <__udivmoddi4+0x2a8>
 800102e:	d029      	beq.n	8001084 <__udivmoddi4+0x2d4>
 8001030:	b365      	cbz	r5, 800108c <__udivmoddi4+0x2dc>
 8001032:	ebba 0304 	subs.w	r3, sl, r4
 8001036:	eb67 0706 	sbc.w	r7, r7, r6
 800103a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800103e:	40cb      	lsrs	r3, r1
 8001040:	40cf      	lsrs	r7, r1
 8001042:	ea4e 0303 	orr.w	r3, lr, r3
 8001046:	e885 0088 	stmia.w	r5, {r3, r7}
 800104a:	2100      	movs	r1, #0
 800104c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001050:	4613      	mov	r3, r2
 8001052:	e6f8      	b.n	8000e46 <__udivmoddi4+0x96>
 8001054:	4610      	mov	r0, r2
 8001056:	e6e0      	b.n	8000e1a <__udivmoddi4+0x6a>
 8001058:	ebb8 0402 	subs.w	r4, r8, r2
 800105c:	eb69 0603 	sbc.w	r6, r9, r3
 8001060:	3801      	subs	r0, #1
 8001062:	e7e5      	b.n	8001030 <__udivmoddi4+0x280>
 8001064:	4604      	mov	r4, r0
 8001066:	e7d8      	b.n	800101a <__udivmoddi4+0x26a>
 8001068:	4611      	mov	r1, r2
 800106a:	e795      	b.n	8000f98 <__udivmoddi4+0x1e8>
 800106c:	4681      	mov	r9, r0
 800106e:	e7c0      	b.n	8000ff2 <__udivmoddi4+0x242>
 8001070:	468a      	mov	sl, r1
 8001072:	e77c      	b.n	8000f6e <__udivmoddi4+0x1be>
 8001074:	3b02      	subs	r3, #2
 8001076:	443c      	add	r4, r7
 8001078:	e748      	b.n	8000f0c <__udivmoddi4+0x15c>
 800107a:	4608      	mov	r0, r1
 800107c:	e70a      	b.n	8000e94 <__udivmoddi4+0xe4>
 800107e:	3802      	subs	r0, #2
 8001080:	443e      	add	r6, r7
 8001082:	e72f      	b.n	8000ee4 <__udivmoddi4+0x134>
 8001084:	45c2      	cmp	sl, r8
 8001086:	d3e7      	bcc.n	8001058 <__udivmoddi4+0x2a8>
 8001088:	463e      	mov	r6, r7
 800108a:	e7d1      	b.n	8001030 <__udivmoddi4+0x280>
 800108c:	4629      	mov	r1, r5
 800108e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001092:	bf00      	nop

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 8001098:	2902      	cmp	r1, #2
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800109a:	b510      	push	{r4, lr}
 800109c:	b2c4      	uxtb	r4, r0
  uint32_t counter = 0; 
  
  switch (Output) 
 800109e:	d02b      	beq.n	80010f8 <wm8994_SetOutputMode+0x60>
 80010a0:	2903      	cmp	r1, #3
 80010a2:	d00f      	beq.n	80010c4 <wm8994_SetOutputMode+0x2c>
 80010a4:	2901      	cmp	r1, #1
 80010a6:	d127      	bne.n	80010f8 <wm8994_SetOutputMode+0x60>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80010a8:	f640 420c 	movw	r2, #3084	; 0xc0c
 80010ac:	2105      	movs	r1, #5
 80010ae:	4620      	mov	r0, r4
 80010b0:	f000 fcd0 	bl	8001a54 <AUDIO_IO_Write>
 80010b4:	2200      	movs	r2, #0
 80010b6:	f240 6101 	movw	r1, #1537	; 0x601
 80010ba:	4620      	mov	r0, r4
 80010bc:	f000 fcca 	bl	8001a54 <AUDIO_IO_Write>
 80010c0:	2200      	movs	r2, #0
 80010c2:	e00c      	b.n	80010de <wm8994_SetOutputMode+0x46>
 80010c4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80010c8:	2105      	movs	r1, #5
 80010ca:	4620      	mov	r0, r4
 80010cc:	f000 fcc2 	bl	8001a54 <AUDIO_IO_Write>
 80010d0:	2201      	movs	r2, #1
 80010d2:	f240 6101 	movw	r1, #1537	; 0x601
 80010d6:	4620      	mov	r0, r4
 80010d8:	f000 fcbc 	bl	8001a54 <AUDIO_IO_Write>
 80010dc:	2201      	movs	r2, #1
 80010de:	f240 6102 	movw	r1, #1538	; 0x602
 80010e2:	4620      	mov	r0, r4
 80010e4:	f000 fcb6 	bl	8001a54 <AUDIO_IO_Write>
 80010e8:	2202      	movs	r2, #2
 80010ea:	f240 6104 	movw	r1, #1540	; 0x604
 80010ee:	4620      	mov	r0, r4
 80010f0:	f000 fcb0 	bl	8001a54 <AUDIO_IO_Write>
 80010f4:	2202      	movs	r2, #2
 80010f6:	e018      	b.n	800112a <wm8994_SetOutputMode+0x92>
 80010f8:	f240 3203 	movw	r2, #771	; 0x303
 80010fc:	2105      	movs	r1, #5
 80010fe:	4620      	mov	r0, r4
 8001100:	f000 fca8 	bl	8001a54 <AUDIO_IO_Write>
 8001104:	2201      	movs	r2, #1
 8001106:	f240 6101 	movw	r1, #1537	; 0x601
 800110a:	4620      	mov	r0, r4
 800110c:	f000 fca2 	bl	8001a54 <AUDIO_IO_Write>
 8001110:	2201      	movs	r2, #1
 8001112:	f240 6102 	movw	r1, #1538	; 0x602
 8001116:	4620      	mov	r0, r4
 8001118:	f000 fc9c 	bl	8001a54 <AUDIO_IO_Write>
 800111c:	2200      	movs	r2, #0
 800111e:	f240 6104 	movw	r1, #1540	; 0x604
 8001122:	4620      	mov	r0, r4
 8001124:	f000 fc96 	bl	8001a54 <AUDIO_IO_Write>
 8001128:	2200      	movs	r2, #0
 800112a:	4620      	mov	r0, r4
 800112c:	f240 6105 	movw	r1, #1541	; 0x605
 8001130:	f000 fc90 	bl	8001a54 <AUDIO_IO_Write>
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
    break;    
  }  
  return counter;
}
 8001134:	2000      	movs	r0, #0
 8001136:	bd10      	pop	{r4, pc}

08001138 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8001138:	b508      	push	{r3, lr}
  uint32_t counter = 0;
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800113a:	f245 6322 	movw	r3, #22050	; 0x5622
 800113e:	b2c0      	uxtb	r0, r0
 8001140:	4299      	cmp	r1, r3
 8001142:	d01f      	beq.n	8001184 <wm8994_SetFrequency+0x4c>
 8001144:	d80b      	bhi.n	800115e <wm8994_SetFrequency+0x26>
 8001146:	f642 3311 	movw	r3, #11025	; 0x2b11
 800114a:	4299      	cmp	r1, r3
 800114c:	d018      	beq.n	8001180 <wm8994_SetFrequency+0x48>
 800114e:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8001152:	d011      	beq.n	8001178 <wm8994_SetFrequency+0x40>
 8001154:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8001158:	d116      	bne.n	8001188 <wm8994_SetFrequency+0x50>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800115a:	2203      	movs	r2, #3
 800115c:	e015      	b.n	800118a <wm8994_SetFrequency+0x52>
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  uint32_t counter = 0;
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800115e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001162:	4299      	cmp	r1, r3
 8001164:	d010      	beq.n	8001188 <wm8994_SetFrequency+0x50>
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <wm8994_SetFrequency+0x60>)
 8001168:	4299      	cmp	r1, r3
 800116a:	d007      	beq.n	800117c <wm8994_SetFrequency+0x44>
 800116c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001170:	4299      	cmp	r1, r3
 8001172:	d109      	bne.n	8001188 <wm8994_SetFrequency+0x50>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001174:	2273      	movs	r2, #115	; 0x73
 8001176:	e008      	b.n	800118a <wm8994_SetFrequency+0x52>
 8001178:	2233      	movs	r2, #51	; 0x33
 800117a:	e006      	b.n	800118a <wm8994_SetFrequency+0x52>
 800117c:	22a3      	movs	r2, #163	; 0xa3
 800117e:	e004      	b.n	800118a <wm8994_SetFrequency+0x52>
 8001180:	2213      	movs	r2, #19
 8001182:	e002      	b.n	800118a <wm8994_SetFrequency+0x52>
 8001184:	2243      	movs	r2, #67	; 0x43
 8001186:	e000      	b.n	800118a <wm8994_SetFrequency+0x52>
 8001188:	2283      	movs	r2, #131	; 0x83
 800118a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800118e:	f000 fc61 	bl	8001a54 <AUDIO_IO_Write>
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
    break; 
  }
  return counter;
}
 8001192:	2000      	movs	r0, #0
 8001194:	bd08      	pop	{r3, pc}
 8001196:	bf00      	nop
 8001198:	00017700 	.word	0x00017700

0800119c <wm8994_Reset>:
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800119c:	2200      	movs	r2, #0
 800119e:	b2c0      	uxtb	r0, r0
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80011a0:	b508      	push	{r3, lr}
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80011a2:	4611      	mov	r1, r2
 80011a4:	f000 fc56 	bl	8001a54 <AUDIO_IO_Write>
{
  uint32_t counter = 0;
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
  outputEnabled = 0;
 80011a8:	2000      	movs	r0, #0
 80011aa:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <wm8994_Reset+0x18>)
 80011ac:	6018      	str	r0, [r3, #0]
  inputEnabled=0;
 80011ae:	4b02      	ldr	r3, [pc, #8]	; (80011b8 <wm8994_Reset+0x1c>)
 80011b0:	6018      	str	r0, [r3, #0]

  return counter;
}
 80011b2:	bd08      	pop	{r3, pc}
 80011b4:	200142e0 	.word	0x200142e0
 80011b8:	200142dc 	.word	0x200142dc

080011bc <wm8994_DeInit>:
  * @retval  None
  */
void wm8994_DeInit(void)
{
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80011bc:	f000 bc48 	b.w	8001a50 <AUDIO_IO_DeInit>

080011c0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80011c0:	b510      	push	{r4, lr}
 80011c2:	4604      	mov	r4, r0
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80011c4:	f000 fc76 	bl	8001ab4 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80011c8:	2100      	movs	r1, #0
 80011ca:	b2e0      	uxtb	r0, r4
 80011cc:	f000 fc54 	bl	8001a78 <AUDIO_IO_Read>
}
 80011d0:	bd10      	pop	{r4, pc}
	...

080011d4 <wm8994_SetMute>:
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
  uint32_t counter = 0;
  
  if (outputEnabled != 0)
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <wm8994_SetMute+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80011d8:	b510      	push	{r4, lr}
  uint32_t counter = 0;
  
  if (outputEnabled != 0)
 80011da:	b1c3      	cbz	r3, 800120e <wm8994_SetMute+0x3a>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80011dc:	2901      	cmp	r1, #1
 80011de:	b2c4      	uxtb	r4, r0
 80011e0:	d109      	bne.n	80011f6 <wm8994_SetMute+0x22>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80011ea:	4620      	mov	r0, r4
 80011ec:	f000 fc32 	bl	8001a54 <AUDIO_IO_Write>
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	e006      	b.n	8001204 <wm8994_SetMute+0x30>
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80011fc:	4620      	mov	r0, r4
 80011fe:	f000 fc29 	bl	8001a54 <AUDIO_IO_Write>
 8001202:	2200      	movs	r2, #0
 8001204:	f240 4122 	movw	r1, #1058	; 0x422
 8001208:	4620      	mov	r0, r4
 800120a:	f000 fc23 	bl	8001a54 <AUDIO_IO_Write>
      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
    }
  }
  return counter;
}
 800120e:	2000      	movs	r0, #0
 8001210:	bd10      	pop	{r4, pc}
 8001212:	bf00      	nop
 8001214:	200142e0 	.word	0x200142e0

08001218 <wm8994_Play>:
{
  uint32_t counter = 0;
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001218:	2100      	movs	r1, #0
 800121a:	f7ff bfdb 	b.w	80011d4 <wm8994_SetMute>

0800121e <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 800121e:	b538      	push	{r3, r4, r5, lr}
  uint32_t counter = 0;
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001220:	2101      	movs	r1, #1
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8001222:	4605      	mov	r5, r0
  uint32_t counter = 0;
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001224:	f7ff ffd6 	bl	80011d4 <wm8994_SetMute>
 8001228:	4604      	mov	r4, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800122a:	2201      	movs	r2, #1
 800122c:	b2e8      	uxtb	r0, r5
 800122e:	2102      	movs	r1, #2
 8001230:	f000 fc10 	bl	8001a54 <AUDIO_IO_Write>
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 
  return counter;
}
 8001234:	4620      	mov	r0, r4
 8001236:	bd38      	pop	{r3, r4, r5, pc}

08001238 <wm8994_Resume>:
{
  uint32_t counter = 0;
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001238:	2100      	movs	r1, #0
 800123a:	f7ff bfcb 	b.w	80011d4 <wm8994_SetMute>
	...

08001240 <wm8994_SetVolume>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
  uint32_t counter = 0;
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001240:	2964      	cmp	r1, #100	; 0x64
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t counter = 0;
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001246:	bf98      	it	ls
 8001248:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
 800124c:	f04f 0764 	mov.w	r7, #100	; 0x64
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001250:	4605      	mov	r5, r0
 8001252:	460c      	mov	r4, r1
  uint32_t counter = 0;
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001254:	bf98      	it	ls
 8001256:	fb93 f7f7 	sdivls	r7, r3, r7

  /* Output volume */
  if (outputEnabled != 0)
 800125a:	4b39      	ldr	r3, [pc, #228]	; (8001340 <wm8994_SetVolume+0x100>)
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
  uint32_t counter = 0;
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800125c:	bf98      	it	ls
 800125e:	b2ff      	uxtbls	r7, r7

  /* Output volume */
  if (outputEnabled != 0)
 8001260:	681e      	ldr	r6, [r3, #0]
 8001262:	2e00      	cmp	r6, #0
 8001264:	d03f      	beq.n	80012e6 <wm8994_SetVolume+0xa6>
  {
    if(convertedvol > 0x3E)
 8001266:	2f3e      	cmp	r7, #62	; 0x3e
 8001268:	d91b      	bls.n	80012a2 <wm8994_SetVolume+0x62>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800126a:	b2ef      	uxtb	r7, r5
  if (outputEnabled != 0)
  {
    if(convertedvol > 0x3E)
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800126c:	2100      	movs	r1, #0
 800126e:	f7ff ffb1 	bl	80011d4 <wm8994_SetMute>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001272:	f240 127f 	movw	r2, #383	; 0x17f
 8001276:	211c      	movs	r1, #28
  if (outputEnabled != 0)
  {
    if(convertedvol > 0x3E)
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001278:	4606      	mov	r6, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800127a:	4638      	mov	r0, r7
 800127c:	f000 fbea 	bl	8001a54 <AUDIO_IO_Write>
 8001280:	f240 127f 	movw	r2, #383	; 0x17f
 8001284:	211d      	movs	r1, #29
 8001286:	4638      	mov	r0, r7
 8001288:	f000 fbe4 	bl	8001a54 <AUDIO_IO_Write>
 800128c:	f240 127f 	movw	r2, #383	; 0x17f
 8001290:	2126      	movs	r1, #38	; 0x26
 8001292:	4638      	mov	r0, r7
 8001294:	f000 fbde 	bl	8001a54 <AUDIO_IO_Write>
 8001298:	f240 127f 	movw	r2, #383	; 0x17f
 800129c:	2127      	movs	r1, #39	; 0x27
 800129e:	4638      	mov	r0, r7
 80012a0:	e01f      	b.n	80012e2 <wm8994_SetVolume+0xa2>
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
    }
    else if (Volume == 0)
 80012a2:	b921      	cbnz	r1, 80012ae <wm8994_SetVolume+0x6e>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80012a4:	2101      	movs	r1, #1
 80012a6:	f7ff ff95 	bl	80011d4 <wm8994_SetMute>
 80012aa:	4606      	mov	r6, r0
 80012ac:	e01b      	b.n	80012e6 <wm8994_SetVolume+0xa6>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80012ae:	fa5f f885 	uxtb.w	r8, r5
 80012b2:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80012b6:	2100      	movs	r1, #0
 80012b8:	f7ff ff8c 	bl	80011d4 <wm8994_SetMute>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80012bc:	463a      	mov	r2, r7
 80012be:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80012c0:	4606      	mov	r6, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80012c2:	4640      	mov	r0, r8
 80012c4:	f000 fbc6 	bl	8001a54 <AUDIO_IO_Write>
 80012c8:	463a      	mov	r2, r7
 80012ca:	211d      	movs	r1, #29
 80012cc:	4640      	mov	r0, r8
 80012ce:	f000 fbc1 	bl	8001a54 <AUDIO_IO_Write>
 80012d2:	463a      	mov	r2, r7
 80012d4:	2126      	movs	r1, #38	; 0x26
 80012d6:	4640      	mov	r0, r8
 80012d8:	f000 fbbc 	bl	8001a54 <AUDIO_IO_Write>
 80012dc:	463a      	mov	r2, r7
 80012de:	2127      	movs	r1, #39	; 0x27
 80012e0:	4640      	mov	r0, r8
 80012e2:	f000 fbb7 	bl	8001a54 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <wm8994_SetVolume+0x104>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b32b      	cbz	r3, 8001338 <wm8994_SetVolume+0xf8>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80012ec:	2c63      	cmp	r4, #99	; 0x63

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80012ee:	b2ed      	uxtb	r5, r5
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80012f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  }

  /* Input volume */
  if (inputEnabled != 0)
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80012f4:	bf9a      	itte	ls
 80012f6:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 80012fa:	2364      	movls	r3, #100	; 0x64
 80012fc:	24ef      	movhi	r4, #239	; 0xef
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80012fe:	4628      	mov	r0, r5
  }

  /* Input volume */
  if (inputEnabled != 0)
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001300:	bf9e      	ittt	ls
 8001302:	0124      	lslls	r4, r4, #4
 8001304:	fb94 f4f3 	sdivls	r4, r4, r3
 8001308:	b2e4      	uxtbls	r4, r4

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800130a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800130e:	4622      	mov	r2, r4
 8001310:	f000 fba0 	bl	8001a54 <AUDIO_IO_Write>
 8001314:	4622      	mov	r2, r4
 8001316:	f240 4101 	movw	r1, #1025	; 0x401
 800131a:	4628      	mov	r0, r5
 800131c:	f000 fb9a 	bl	8001a54 <AUDIO_IO_Write>
 8001320:	4622      	mov	r2, r4
 8001322:	f240 4104 	movw	r1, #1028	; 0x404
 8001326:	4628      	mov	r0, r5
 8001328:	f000 fb94 	bl	8001a54 <AUDIO_IO_Write>
 800132c:	4622      	mov	r2, r4
 800132e:	f240 4105 	movw	r1, #1029	; 0x405
 8001332:	4628      	mov	r0, r5
 8001334:	f000 fb8e 	bl	8001a54 <AUDIO_IO_Write>

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
  }
  return counter;
}
 8001338:	4630      	mov	r0, r6
 800133a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800133e:	bf00      	nop
 8001340:	200142e0 	.word	0x200142e0
 8001344:	200142dc 	.word	0x200142dc

08001348 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800134c:	4681      	mov	r9, r0
 800134e:	461f      	mov	r7, r3
  uint32_t counter = 0;
  uint16_t output_device = OutputInputDevice & 0xFF;
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001350:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001354:	4692      	mov	sl, r2
  uint16_t power_mgnt_reg_1 = 0;
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001356:	fa5f f489 	uxtb.w	r4, r9
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
  uint32_t counter = 0;
  uint16_t output_device = OutputInputDevice & 0xFF;
 800135a:	b2ce      	uxtb	r6, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
  uint16_t power_mgnt_reg_1 = 0;
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800135c:	f000 fbaa 	bl	8001ab4 <AUDIO_IO_Init>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001360:	2203      	movs	r2, #3
 8001362:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001366:	4620      	mov	r0, r4
 8001368:	f000 fb74 	bl	8001a54 <AUDIO_IO_Write>
 800136c:	2200      	movs	r2, #0
 800136e:	f640 0117 	movw	r1, #2071	; 0x817
 8001372:	4620      	mov	r0, r4
 8001374:	f000 fb6e 	bl	8001a54 <AUDIO_IO_Write>
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800137e:	4620      	mov	r0, r4
 8001380:	f000 fb68 	bl	8001a54 <AUDIO_IO_Write>
 8001384:	226c      	movs	r2, #108	; 0x6c
 8001386:	2139      	movs	r1, #57	; 0x39
 8001388:	4620      	mov	r0, r4
 800138a:	f000 fb63 	bl	8001a54 <AUDIO_IO_Write>
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800138e:	b10d      	cbz	r5, 8001394 <wm8994_Init+0x4c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001390:	2213      	movs	r2, #19
 8001392:	e000      	b.n	8001396 <wm8994_Init+0x4e>
 8001394:	2203      	movs	r2, #3
 8001396:	2101      	movs	r1, #1
 8001398:	4620      	mov	r0, r4
 800139a:	f000 fb5b 	bl	8001a54 <AUDIO_IO_Write>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800139e:	2032      	movs	r0, #50	; 0x32
 80013a0:	f000 fb80 	bl	8001aa4 <AUDIO_IO_Delay>
 80013a4:	f8df b28c 	ldr.w	fp, [pc, #652]	; 8001634 <wm8994_Init+0x2ec>
 80013a8:	4ba0      	ldr	r3, [pc, #640]	; (800162c <wm8994_Init+0x2e4>)

  /* Path Configurations for output */
  if (output_device > 0)
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d06f      	beq.n	800148e <wm8994_Init+0x146>
  {
    outputEnabled = 1;
 80013ae:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 80013b2:	2e02      	cmp	r6, #2
  AUDIO_IO_Delay(50);

  /* Path Configurations for output */
  if (output_device > 0)
  {
    outputEnabled = 1;
 80013b4:	f8c3 8000 	str.w	r8, [r3]
    switch (output_device)
 80013b8:	d04f      	beq.n	800145a <wm8994_Init+0x112>
 80013ba:	2e03      	cmp	r6, #3
 80013bc:	d00f      	beq.n	80013de <wm8994_Init+0x96>
 80013be:	4546      	cmp	r6, r8
 80013c0:	d14b      	bne.n	800145a <wm8994_Init+0x112>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80013c2:	f640 420c 	movw	r2, #3084	; 0xc0c
 80013c6:	2105      	movs	r1, #5
 80013c8:	4620      	mov	r0, r4
 80013ca:	f000 fb43 	bl	8001a54 <AUDIO_IO_Write>
 80013ce:	2200      	movs	r2, #0
 80013d0:	f240 6101 	movw	r1, #1537	; 0x601
 80013d4:	4620      	mov	r0, r4
 80013d6:	f000 fb3d 	bl	8001a54 <AUDIO_IO_Write>
 80013da:	2200      	movs	r2, #0
 80013dc:	e02b      	b.n	8001436 <wm8994_Init+0xee>
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
      break;

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80013de:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80013e2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80013e6:	f04f 0105 	mov.w	r1, #5
 80013ea:	4620      	mov	r0, r4
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
      break;

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80013ec:	d11a      	bne.n	8001424 <wm8994_Init+0xdc>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80013ee:	f000 fb31 	bl	8001a54 <AUDIO_IO_Write>
 80013f2:	4632      	mov	r2, r6
 80013f4:	4620      	mov	r0, r4
 80013f6:	f240 6101 	movw	r1, #1537	; 0x601
 80013fa:	f000 fb2b 	bl	8001a54 <AUDIO_IO_Write>
 80013fe:	4632      	mov	r2, r6
 8001400:	4620      	mov	r0, r4
 8001402:	f240 6102 	movw	r1, #1538	; 0x602
 8001406:	f000 fb25 	bl	8001a54 <AUDIO_IO_Write>
 800140a:	4632      	mov	r2, r6
 800140c:	4620      	mov	r0, r4
 800140e:	f240 6104 	movw	r1, #1540	; 0x604
 8001412:	f000 fb1f 	bl	8001a54 <AUDIO_IO_Write>
 8001416:	4632      	mov	r2, r6
 8001418:	f240 6105 	movw	r1, #1541	; 0x605
 800141c:	4620      	mov	r0, r4
 800141e:	f000 fb19 	bl	8001a54 <AUDIO_IO_Write>
 8001422:	e038      	b.n	8001496 <wm8994_Init+0x14e>
 8001424:	f000 fb16 	bl	8001a54 <AUDIO_IO_Write>
 8001428:	4642      	mov	r2, r8
 800142a:	f240 6101 	movw	r1, #1537	; 0x601
 800142e:	4620      	mov	r0, r4
 8001430:	f000 fb10 	bl	8001a54 <AUDIO_IO_Write>
 8001434:	4642      	mov	r2, r8
 8001436:	f240 6102 	movw	r1, #1538	; 0x602
 800143a:	4620      	mov	r0, r4
 800143c:	f000 fb0a 	bl	8001a54 <AUDIO_IO_Write>
 8001440:	2202      	movs	r2, #2
 8001442:	f240 6104 	movw	r1, #1540	; 0x604
 8001446:	4620      	mov	r0, r4
 8001448:	f000 fb04 	bl	8001a54 <AUDIO_IO_Write>
 800144c:	2202      	movs	r2, #2
 800144e:	f240 6105 	movw	r1, #1541	; 0x605
 8001452:	4620      	mov	r0, r4
 8001454:	f000 fafe 	bl	8001a54 <AUDIO_IO_Write>
 8001458:	e01a      	b.n	8001490 <wm8994_Init+0x148>
 800145a:	f240 3203 	movw	r2, #771	; 0x303
 800145e:	2105      	movs	r1, #5
 8001460:	4620      	mov	r0, r4
 8001462:	f000 faf7 	bl	8001a54 <AUDIO_IO_Write>
 8001466:	4642      	mov	r2, r8
 8001468:	f240 6101 	movw	r1, #1537	; 0x601
 800146c:	4620      	mov	r0, r4
 800146e:	f000 faf1 	bl	8001a54 <AUDIO_IO_Write>
 8001472:	4642      	mov	r2, r8
 8001474:	f240 6102 	movw	r1, #1538	; 0x602
 8001478:	4620      	mov	r0, r4
 800147a:	f000 faeb 	bl	8001a54 <AUDIO_IO_Write>
 800147e:	2200      	movs	r2, #0
 8001480:	f240 6104 	movw	r1, #1540	; 0x604
 8001484:	4620      	mov	r0, r4
 8001486:	f000 fae5 	bl	8001a54 <AUDIO_IO_Write>
 800148a:	2200      	movs	r2, #0
 800148c:	e7df      	b.n	800144e <wm8994_Init+0x106>
      break;
    }
  }
  else
  {
    outputEnabled = 0;
 800148e:	601e      	str	r6, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001490:	2d00      	cmp	r5, #0
 8001492:	f000 8099 	beq.w	80015c8 <wm8994_Init+0x280>
  {
    inputEnabled = 1;
 8001496:	2301      	movs	r3, #1
    switch (input_device)
 8001498:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  }

  /* Path Configurations for input */
  if (input_device > 0)
  {
    inputEnabled = 1;
 800149c:	f8cb 3000 	str.w	r3, [fp]
    switch (input_device)
 80014a0:	d03c      	beq.n	800151c <wm8994_Init+0x1d4>
 80014a2:	d806      	bhi.n	80014b2 <wm8994_Init+0x16a>
 80014a4:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80014a8:	f040 8091 	bne.w	80015ce <wm8994_Init+0x286>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80014ac:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80014b0:	e065      	b.n	800157e <wm8994_Init+0x236>

  /* Path Configurations for input */
  if (input_device > 0)
  {
    inputEnabled = 1;
    switch (input_device)
 80014b2:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80014b6:	d051      	beq.n	800155c <wm8994_Init+0x214>
 80014b8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80014bc:	f040 8087 	bne.w	80015ce <wm8994_Init+0x286>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80014c0:	f640 723c 	movw	r2, #3900	; 0xf3c
 80014c4:	2104      	movs	r1, #4
 80014c6:	4620      	mov	r0, r4
 80014c8:	f000 fac4 	bl	8001a54 <AUDIO_IO_Write>
 80014cc:	22db      	movs	r2, #219	; 0xdb
 80014ce:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80014d2:	4620      	mov	r0, r4
 80014d4:	f000 fabe 	bl	8001a54 <AUDIO_IO_Write>
 80014d8:	22db      	movs	r2, #219	; 0xdb
 80014da:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80014de:	4620      	mov	r0, r4
 80014e0:	f000 fab8 	bl	8001a54 <AUDIO_IO_Write>
 80014e4:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80014e8:	2102      	movs	r1, #2
 80014ea:	4620      	mov	r0, r4
 80014ec:	f000 fab2 	bl	8001a54 <AUDIO_IO_Write>
 80014f0:	2202      	movs	r2, #2
 80014f2:	f240 6106 	movw	r1, #1542	; 0x606
 80014f6:	4620      	mov	r0, r4
 80014f8:	f000 faac 	bl	8001a54 <AUDIO_IO_Write>
 80014fc:	2202      	movs	r2, #2
 80014fe:	f240 6107 	movw	r1, #1543	; 0x607
 8001502:	4620      	mov	r0, r4
 8001504:	f000 faa6 	bl	8001a54 <AUDIO_IO_Write>
 8001508:	2202      	movs	r2, #2
 800150a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800150e:	4620      	mov	r0, r4
 8001510:	f000 faa0 	bl	8001a54 <AUDIO_IO_Write>
 8001514:	2202      	movs	r2, #2
 8001516:	f240 6109 	movw	r1, #1545	; 0x609
 800151a:	e049      	b.n	80015b0 <wm8994_Init+0x268>
 800151c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8001520:	2104      	movs	r1, #4
 8001522:	4620      	mov	r0, r4
 8001524:	f000 fa96 	bl	8001a54 <AUDIO_IO_Write>
 8001528:	22db      	movs	r2, #219	; 0xdb
 800152a:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fa90 	bl	8001a54 <AUDIO_IO_Write>
 8001534:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8001538:	2102      	movs	r1, #2
 800153a:	4620      	mov	r0, r4
 800153c:	f000 fa8a 	bl	8001a54 <AUDIO_IO_Write>
 8001540:	2202      	movs	r2, #2
 8001542:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001546:	4620      	mov	r0, r4
 8001548:	f000 fa84 	bl	8001a54 <AUDIO_IO_Write>
 800154c:	2202      	movs	r2, #2
 800154e:	f240 6109 	movw	r1, #1545	; 0x609
 8001552:	4620      	mov	r0, r4
 8001554:	f000 fa7e 	bl	8001a54 <AUDIO_IO_Write>
 8001558:	220e      	movs	r2, #14
 800155a:	e02d      	b.n	80015b8 <wm8994_Init+0x270>
 800155c:	2211      	movs	r2, #17
 800155e:	2128      	movs	r1, #40	; 0x28
 8001560:	4620      	mov	r0, r4
 8001562:	f000 fa77 	bl	8001a54 <AUDIO_IO_Write>
 8001566:	2235      	movs	r2, #53	; 0x35
 8001568:	2129      	movs	r1, #41	; 0x29
 800156a:	4620      	mov	r0, r4
 800156c:	f000 fa72 	bl	8001a54 <AUDIO_IO_Write>
 8001570:	2235      	movs	r2, #53	; 0x35
 8001572:	212a      	movs	r1, #42	; 0x2a
 8001574:	4620      	mov	r0, r4
 8001576:	f000 fa6d 	bl	8001a54 <AUDIO_IO_Write>
 800157a:	f240 3203 	movw	r2, #771	; 0x303
 800157e:	2104      	movs	r1, #4
 8001580:	4620      	mov	r0, r4
 8001582:	f000 fa67 	bl	8001a54 <AUDIO_IO_Write>
 8001586:	22db      	movs	r2, #219	; 0xdb
 8001588:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800158c:	4620      	mov	r0, r4
 800158e:	f000 fa61 	bl	8001a54 <AUDIO_IO_Write>
 8001592:	f246 3250 	movw	r2, #25424	; 0x6350
 8001596:	2102      	movs	r1, #2
 8001598:	4620      	mov	r0, r4
 800159a:	f000 fa5b 	bl	8001a54 <AUDIO_IO_Write>
 800159e:	2202      	movs	r2, #2
 80015a0:	f240 6106 	movw	r1, #1542	; 0x606
 80015a4:	4620      	mov	r0, r4
 80015a6:	f000 fa55 	bl	8001a54 <AUDIO_IO_Write>
 80015aa:	2202      	movs	r2, #2
 80015ac:	f240 6107 	movw	r1, #1543	; 0x607
 80015b0:	4620      	mov	r0, r4
 80015b2:	f000 fa4f 	bl	8001a54 <AUDIO_IO_Write>
 80015b6:	220d      	movs	r2, #13
 80015b8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80015bc:	4620      	mov	r0, r4
 80015be:	f000 fa49 	bl	8001a54 <AUDIO_IO_Write>

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80015c2:	f04f 0800 	mov.w	r8, #0
      break;
 80015c6:	e004      	b.n	80015d2 <wm8994_Init+0x28a>
      break;
    }
  }
  else
  {
    inputEnabled = 0;
 80015c8:	f8cb 5000 	str.w	r5, [fp]
 80015cc:	e7f9      	b.n	80015c2 <wm8994_Init+0x27a>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
      break;    
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 80015ce:	f04f 0801 	mov.w	r8, #1
  {
    inputEnabled = 0;
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80015d2:	f245 6322 	movw	r3, #22050	; 0x5622
 80015d6:	429f      	cmp	r7, r3
 80015d8:	d023      	beq.n	8001622 <wm8994_Init+0x2da>
 80015da:	d80b      	bhi.n	80015f4 <wm8994_Init+0x2ac>
 80015dc:	f642 3311 	movw	r3, #11025	; 0x2b11
 80015e0:	429f      	cmp	r7, r3
 80015e2:	d01c      	beq.n	800161e <wm8994_Init+0x2d6>
 80015e4:	f5b7 5f7a 	cmp.w	r7, #16000	; 0x3e80
 80015e8:	d017      	beq.n	800161a <wm8994_Init+0x2d2>
 80015ea:	f5b7 5ffa 	cmp.w	r7, #8000	; 0x1f40
 80015ee:	d123      	bne.n	8001638 <wm8994_Init+0x2f0>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80015f0:	2203      	movs	r2, #3
 80015f2:	e022      	b.n	800163a <wm8994_Init+0x2f2>
  {
    inputEnabled = 0;
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80015f4:	f64a 4344 	movw	r3, #44100	; 0xac44
 80015f8:	429f      	cmp	r7, r3
 80015fa:	d014      	beq.n	8001626 <wm8994_Init+0x2de>
 80015fc:	d804      	bhi.n	8001608 <wm8994_Init+0x2c0>
 80015fe:	f5b7 4ffa 	cmp.w	r7, #32000	; 0x7d00
 8001602:	d119      	bne.n	8001638 <wm8994_Init+0x2f0>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001604:	2263      	movs	r2, #99	; 0x63
 8001606:	e018      	b.n	800163a <wm8994_Init+0x2f2>
  {
    inputEnabled = 0;
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8001608:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800160c:	429f      	cmp	r7, r3
 800160e:	d013      	beq.n	8001638 <wm8994_Init+0x2f0>
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <wm8994_Init+0x2e8>)
 8001612:	429f      	cmp	r7, r3
 8001614:	d110      	bne.n	8001638 <wm8994_Init+0x2f0>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001616:	22a3      	movs	r2, #163	; 0xa3
 8001618:	e00f      	b.n	800163a <wm8994_Init+0x2f2>
 800161a:	2233      	movs	r2, #51	; 0x33
 800161c:	e00d      	b.n	800163a <wm8994_Init+0x2f2>
 800161e:	2213      	movs	r2, #19
 8001620:	e00b      	b.n	800163a <wm8994_Init+0x2f2>
 8001622:	2243      	movs	r2, #67	; 0x43
 8001624:	e009      	b.n	800163a <wm8994_Init+0x2f2>
 8001626:	2273      	movs	r2, #115	; 0x73
 8001628:	e007      	b.n	800163a <wm8994_Init+0x2f2>
 800162a:	bf00      	nop
 800162c:	200142e0 	.word	0x200142e0
 8001630:	00017700 	.word	0x00017700
 8001634:	200142dc 	.word	0x200142dc
 8001638:	2283      	movs	r2, #131	; 0x83
 800163a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800163e:	4620      	mov	r0, r4
 8001640:	f000 fa08 	bl	8001a54 <AUDIO_IO_Write>
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
    break; 
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001644:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001648:	f44f 7140 	mov.w	r1, #768	; 0x300
 800164c:	4620      	mov	r0, r4
 800164e:	bf0c      	ite	eq
 8001650:	f244 0218 	movweq	r2, #16408	; 0x4018
 8001654:	f244 0210 	movwne	r2, #16400	; 0x4010
 8001658:	f000 f9fc 	bl	8001a54 <AUDIO_IO_Write>
 800165c:	2200      	movs	r2, #0
 800165e:	f240 3102 	movw	r1, #770	; 0x302
 8001662:	4620      	mov	r0, r4
 8001664:	f000 f9f6 	bl	8001a54 <AUDIO_IO_Write>
 8001668:	220a      	movs	r2, #10
 800166a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800166e:	4620      	mov	r0, r4
 8001670:	f000 f9f0 	bl	8001a54 <AUDIO_IO_Write>
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167a:	4620      	mov	r0, r4
 800167c:	f000 f9ea 	bl	8001a54 <AUDIO_IO_Write>
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);

  if (output_device > 0)  /* Audio output selected */
 8001680:	2e00      	cmp	r6, #0
 8001682:	f000 8083 	beq.w	800178c <wm8994_Init+0x444>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001686:	f44f 7240 	mov.w	r2, #768	; 0x300
 800168a:	2103      	movs	r1, #3
 800168c:	4620      	mov	r0, r4
 800168e:	f000 f9e1 	bl	8001a54 <AUDIO_IO_Write>
 8001692:	2200      	movs	r2, #0
 8001694:	2122      	movs	r1, #34	; 0x22
 8001696:	4620      	mov	r0, r4
 8001698:	f000 f9dc 	bl	8001a54 <AUDIO_IO_Write>
 800169c:	2200      	movs	r2, #0
 800169e:	2123      	movs	r1, #35	; 0x23
 80016a0:	4620      	mov	r0, r4
 80016a2:	f000 f9d7 	bl	8001a54 <AUDIO_IO_Write>
 80016a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016aa:	2136      	movs	r1, #54	; 0x36
 80016ac:	4620      	mov	r0, r4
 80016ae:	f000 f9d1 	bl	8001a54 <AUDIO_IO_Write>
 80016b2:	f243 0203 	movw	r2, #12291	; 0x3003
 80016b6:	2101      	movs	r1, #1
 80016b8:	4620      	mov	r0, r4
 80016ba:	f000 f9cb 	bl	8001a54 <AUDIO_IO_Write>
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80016be:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80016c2:	f04f 0151 	mov.w	r1, #81	; 0x51
 80016c6:	4620      	mov	r0, r4
 80016c8:	bf0c      	ite	eq
 80016ca:	f240 2205 	movweq	r2, #517	; 0x205
 80016ce:	2205      	movne	r2, #5
 80016d0:	f000 f9c0 	bl	8001a54 <AUDIO_IO_Write>
 80016d4:	f243 3203 	movw	r2, #13059	; 0x3303
 80016d8:	2101      	movs	r1, #1
 80016da:	4620      	mov	r0, r4
 80016dc:	f000 f9ba 	bl	8001a54 <AUDIO_IO_Write>
 80016e0:	2222      	movs	r2, #34	; 0x22
 80016e2:	2160      	movs	r1, #96	; 0x60
 80016e4:	4620      	mov	r0, r4
 80016e6:	f000 f9b5 	bl	8001a54 <AUDIO_IO_Write>
 80016ea:	f649 7225 	movw	r2, #40741	; 0x9f25
 80016ee:	214c      	movs	r1, #76	; 0x4c
 80016f0:	4620      	mov	r0, r4
 80016f2:	f000 f9af 	bl	8001a54 <AUDIO_IO_Write>

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80016f6:	200f      	movs	r0, #15
 80016f8:	f000 f9d4 	bl	8001aa4 <AUDIO_IO_Delay>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80016fc:	2201      	movs	r2, #1
 80016fe:	212d      	movs	r1, #45	; 0x2d
 8001700:	4620      	mov	r0, r4
 8001702:	f000 f9a7 	bl	8001a54 <AUDIO_IO_Write>
 8001706:	2201      	movs	r2, #1
 8001708:	212e      	movs	r1, #46	; 0x2e
 800170a:	4620      	mov	r0, r4
 800170c:	f000 f9a2 	bl	8001a54 <AUDIO_IO_Write>
 8001710:	f44f 724c 	mov.w	r2, #816	; 0x330
 8001714:	2103      	movs	r1, #3
 8001716:	4620      	mov	r0, r4
 8001718:	f000 f99c 	bl	8001a54 <AUDIO_IO_Write>
 800171c:	2233      	movs	r2, #51	; 0x33
 800171e:	2154      	movs	r1, #84	; 0x54
 8001720:	4620      	mov	r0, r4
 8001722:	f000 f997 	bl	8001a54 <AUDIO_IO_Write>

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);

    /* Add Delay */
    AUDIO_IO_Delay(250);
 8001726:	20fa      	movs	r0, #250	; 0xfa
 8001728:	f000 f9bc 	bl	8001aa4 <AUDIO_IO_Delay>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800172c:	22ee      	movs	r2, #238	; 0xee
 800172e:	2160      	movs	r1, #96	; 0x60
 8001730:	4620      	mov	r0, r4
 8001732:	f000 f98f 	bl	8001a54 <AUDIO_IO_Write>
 8001736:	22c0      	movs	r2, #192	; 0xc0
 8001738:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800173c:	4620      	mov	r0, r4
 800173e:	f000 f989 	bl	8001a54 <AUDIO_IO_Write>
 8001742:	22c0      	movs	r2, #192	; 0xc0
 8001744:	f240 6111 	movw	r1, #1553	; 0x611
 8001748:	4620      	mov	r0, r4
 800174a:	f000 f983 	bl	8001a54 <AUDIO_IO_Write>
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001754:	4620      	mov	r0, r4
 8001756:	f000 f97d 	bl	8001a54 <AUDIO_IO_Write>
 800175a:	22c0      	movs	r2, #192	; 0xc0
 800175c:	f240 6112 	movw	r1, #1554	; 0x612
 8001760:	4620      	mov	r0, r4
 8001762:	f000 f977 	bl	8001a54 <AUDIO_IO_Write>
 8001766:	22c0      	movs	r2, #192	; 0xc0
 8001768:	f240 6113 	movw	r1, #1555	; 0x613
 800176c:	4620      	mov	r0, r4
 800176e:	f000 f971 	bl	8001a54 <AUDIO_IO_Write>
 8001772:	2200      	movs	r2, #0
 8001774:	f240 4122 	movw	r1, #1058	; 0x422
 8001778:	4620      	mov	r0, r4
 800177a:	f000 f96b 	bl	8001a54 <AUDIO_IO_Write>

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800177e:	4651      	mov	r1, sl
 8001780:	4648      	mov	r0, r9
 8001782:	f7ff fd5d 	bl	8001240 <wm8994_SetVolume>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001786:	f243 3203 	movw	r2, #13059	; 0x3303
 800178a:	e000      	b.n	800178e <wm8994_Init+0x446>
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
  uint32_t counter = 0;
  uint16_t output_device = OutputInputDevice & 0xFF;
  uint16_t input_device = OutputInputDevice & 0xFF00;
  uint16_t power_mgnt_reg_1 = 0;
 800178c:	4632      	mov	r2, r6
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
  }

  if (input_device > 0) /* Audio input selected */
 800178e:	2d00      	cmp	r5, #0
 8001790:	d04a      	beq.n	8001828 <wm8994_Init+0x4e0>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001792:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001796:	d002      	beq.n	800179e <wm8994_Init+0x456>
 8001798:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800179c:	d10e      	bne.n	80017bc <wm8994_Init+0x474>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800179e:	f042 0213 	orr.w	r2, r2, #19
 80017a2:	2101      	movs	r1, #1
 80017a4:	4620      	mov	r0, r4
 80017a6:	f000 f955 	bl	8001a54 <AUDIO_IO_Write>
 80017aa:	2202      	movs	r2, #2
 80017ac:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80017b0:	4620      	mov	r0, r4
 80017b2:	f000 f94f 	bl	8001a54 <AUDIO_IO_Write>
 80017b6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80017ba:	e017      	b.n	80017ec <wm8994_Init+0x4a4>
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80017bc:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80017c0:	d117      	bne.n	80017f2 <wm8994_Init+0x4aa>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80017c2:	f042 0213 	orr.w	r2, r2, #19
 80017c6:	2101      	movs	r1, #1
 80017c8:	4620      	mov	r0, r4
 80017ca:	f000 f943 	bl	8001a54 <AUDIO_IO_Write>
 80017ce:	2202      	movs	r2, #2
 80017d0:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80017d4:	4620      	mov	r0, r4
 80017d6:	f000 f93d 	bl	8001a54 <AUDIO_IO_Write>
 80017da:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80017de:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80017e2:	4620      	mov	r0, r4
 80017e4:	f000 f936 	bl	8001a54 <AUDIO_IO_Write>
 80017e8:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80017ec:	f240 4111 	movw	r1, #1041	; 0x411
 80017f0:	e013      	b.n	800181a <wm8994_Init+0x4d2>
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80017f2:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80017f6:	d002      	beq.n	80017fe <wm8994_Init+0x4b6>
 80017f8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80017fc:	d110      	bne.n	8001820 <wm8994_Init+0x4d8>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80017fe:	220b      	movs	r2, #11
 8001800:	2118      	movs	r1, #24
 8001802:	4620      	mov	r0, r4
 8001804:	f000 f926 	bl	8001a54 <AUDIO_IO_Write>
 8001808:	220b      	movs	r2, #11
 800180a:	211a      	movs	r1, #26
 800180c:	4620      	mov	r0, r4
 800180e:	f000 f921 	bl	8001a54 <AUDIO_IO_Write>
 8001812:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001816:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800181a:	4620      	mov	r0, r4
 800181c:	f000 f91a 	bl	8001a54 <AUDIO_IO_Write>

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001820:	4651      	mov	r1, sl
 8001822:	4648      	mov	r0, r9
 8001824:	f7ff fd0c 	bl	8001240 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
}
 8001828:	4640      	mov	r0, r8
 800182a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800182e:	bf00      	nop

08001830 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t counter = 0;

  if (outputEnabled != 0)
 8001832:	4e19      	ldr	r6, [pc, #100]	; (8001898 <wm8994_Stop+0x68>)
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001834:	4604      	mov	r4, r0
 8001836:	460f      	mov	r7, r1
  uint32_t counter = 0;

  if (outputEnabled != 0)
 8001838:	6835      	ldr	r5, [r6, #0]
 800183a:	b355      	cbz	r5, 8001892 <wm8994_Stop+0x62>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800183c:	2101      	movs	r1, #1
 800183e:	f7ff fcc9 	bl	80011d4 <wm8994_SetMute>

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001842:	2f02      	cmp	r7, #2
  uint32_t counter = 0;

  if (outputEnabled != 0)
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001844:	4605      	mov	r5, r0

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001846:	d024      	beq.n	8001892 <wm8994_Stop+0x62>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001848:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800184a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800184e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001852:	4620      	mov	r0, r4
 8001854:	f000 f8fe 	bl	8001a54 <AUDIO_IO_Write>
 8001858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185c:	f240 4122 	movw	r1, #1058	; 0x422
 8001860:	4620      	mov	r0, r4
 8001862:	f000 f8f7 	bl	8001a54 <AUDIO_IO_Write>
 8001866:	2200      	movs	r2, #0
 8001868:	212d      	movs	r1, #45	; 0x2d
 800186a:	4620      	mov	r0, r4
 800186c:	f000 f8f2 	bl	8001a54 <AUDIO_IO_Write>
 8001870:	2200      	movs	r2, #0
 8001872:	212e      	movs	r1, #46	; 0x2e
 8001874:	4620      	mov	r0, r4
 8001876:	f000 f8ed 	bl	8001a54 <AUDIO_IO_Write>
 800187a:	2200      	movs	r2, #0
 800187c:	2105      	movs	r1, #5
 800187e:	4620      	mov	r0, r4
 8001880:	f000 f8e8 	bl	8001a54 <AUDIO_IO_Write>
 8001884:	2200      	movs	r2, #0
 8001886:	4620      	mov	r0, r4
 8001888:	4611      	mov	r1, r2
 800188a:	f000 f8e3 	bl	8001a54 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);

      outputEnabled = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	6033      	str	r3, [r6, #0]
    }
  }
  return counter;
}
 8001892:	4628      	mov	r0, r5
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001896:	bf00      	nop
 8001898:	200142e0 	.word	0x200142e0

0800189c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800189c:	b570      	push	{r4, r5, r6, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80018a2:	f003 fad3 	bl	8004e4c <HAL_I2C_GetState>
 80018a6:	2800      	cmp	r0, #0
 80018a8:	f040 8092 	bne.w	80019d0 <I2Cx_Init+0x134>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80018ac:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 80018ae:	2600      	movs	r6, #0
 80018b0:	4c49      	ldr	r4, [pc, #292]	; (80019d8 <I2Cx_Init+0x13c>)
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80018b2:	429d      	cmp	r5, r3
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 80018b4:	60ae      	str	r6, [r5, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80018b6:	612e      	str	r6, [r5, #16]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80018b8:	bf0c      	ite	eq
 80018ba:	4a48      	ldreq	r2, [pc, #288]	; (80019dc <I2Cx_Init+0x140>)
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80018bc:	4a48      	ldrne	r2, [pc, #288]	; (80019e0 <I2Cx_Init+0x144>)
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80018be:	429d      	cmp	r5, r3
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 80018c0:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80018c2:	602a      	str	r2, [r5, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80018c4:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <I2Cx_Init+0x148>)
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80018c6:	61ee      	str	r6, [r5, #28]
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80018c8:	606a      	str	r2, [r5, #4]
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80018ca:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80018ce:	622e      	str	r6, [r5, #32]
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80018d0:	60ea      	str	r2, [r5, #12]
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80018d4:	d13b      	bne.n	800194e <I2Cx_Init+0xb2>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018da:	a905      	add	r1, sp, #20
 80018dc:	4842      	ldr	r0, [pc, #264]	; (80019e8 <I2Cx_Init+0x14c>)
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018de:	6323      	str	r3, [r4, #48]	; 0x30
 80018e0:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
 80018e2:	9607      	str	r6, [sp, #28]
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	9b01      	ldr	r3, [sp, #4]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018f0:	2312      	movs	r3, #18
 80018f2:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80018f4:	2302      	movs	r3, #2
 80018f6:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80018f8:	2304      	movs	r3, #4
 80018fa:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018fc:	f002 fdfe 	bl	80044fc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001900:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001904:	a905      	add	r1, sp, #20
 8001906:	4838      	ldr	r0, [pc, #224]	; (80019e8 <I2Cx_Init+0x14c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001908:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800190a:	f002 fdf7 	bl	80044fc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800190e:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001910:	4632      	mov	r2, r6
 8001912:	210f      	movs	r1, #15
 8001914:	2048      	movs	r0, #72	; 0x48
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001916:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800191a:	6423      	str	r3, [r4, #64]	; 0x40
 800191c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800191e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	9b02      	ldr	r3, [sp, #8]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001926:	6a23      	ldr	r3, [r4, #32]
 8001928:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800192c:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800192e:	6a23      	ldr	r3, [r4, #32]
 8001930:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001934:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001936:	f001 fe69 	bl	800360c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800193a:	2048      	movs	r0, #72	; 0x48
 800193c:	f001 fe9e 	bl	800367c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001940:	2049      	movs	r0, #73	; 0x49
 8001942:	4632      	mov	r2, r6
 8001944:	210f      	movs	r1, #15
 8001946:	f001 fe61 	bl	800360c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800194a:	2049      	movs	r0, #73	; 0x49
 800194c:	e03b      	b.n	80019c6 <I2Cx_Init+0x12a>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800194e:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001952:	a905      	add	r1, sp, #20
 8001954:	4825      	ldr	r0, [pc, #148]	; (80019ec <I2Cx_Init+0x150>)
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001956:	6323      	str	r3, [r4, #48]	; 0x30
 8001958:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
 800195a:	9607      	str	r6, [sp, #28]
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	9303      	str	r3, [sp, #12]
 8001962:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001968:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800196a:	2312      	movs	r3, #18
 800196c:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800196e:	2302      	movs	r3, #2
 8001970:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001972:	2304      	movs	r3, #4
 8001974:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001976:	f002 fdc1 	bl	80044fc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800197a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800197e:	a905      	add	r1, sp, #20
 8001980:	481a      	ldr	r0, [pc, #104]	; (80019ec <I2Cx_Init+0x150>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001982:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001984:	f002 fdba 	bl	80044fc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001988:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800198a:	4632      	mov	r2, r6
 800198c:	210f      	movs	r1, #15
 800198e:	201f      	movs	r0, #31
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001994:	6423      	str	r3, [r4, #64]	; 0x40
 8001996:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	9304      	str	r3, [sp, #16]
 800199e:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80019a0:	6a23      	ldr	r3, [r4, #32]
 80019a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019a6:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80019a8:	6a23      	ldr	r3, [r4, #32]
 80019aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019ae:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80019b0:	f001 fe2c 	bl	800360c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80019b4:	201f      	movs	r0, #31
 80019b6:	f001 fe61 	bl	800367c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80019ba:	2020      	movs	r0, #32
 80019bc:	4632      	mov	r2, r6
 80019be:	210f      	movs	r1, #15
 80019c0:	f001 fe24 	bl	800360c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80019c4:	2020      	movs	r0, #32
 80019c6:	f001 fe59 	bl	800367c <HAL_NVIC_EnableIRQ>
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80019ca:	4628      	mov	r0, r5
 80019cc:	f003 f865 	bl	8004a9a <HAL_I2C_Init>
  }
}
 80019d0:	b00a      	add	sp, #40	; 0x28
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
 80019d4:	200142e4 	.word	0x200142e4
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40005c00 	.word	0x40005c00
 80019e0:	40005400 	.word	0x40005400
 80019e4:	40912732 	.word	0x40912732
 80019e8:	40021c00 	.word	0x40021c00
 80019ec:	40020400 	.word	0x40020400

080019f0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80019f0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019f2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80019f6:	b085      	sub	sp, #20
 80019f8:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019fa:	9402      	str	r4, [sp, #8]
 80019fc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8001a00:	9401      	str	r4, [sp, #4]
 8001a02:	9c08      	ldr	r4, [sp, #32]
 8001a04:	9400      	str	r4, [sp, #0]
 8001a06:	f003 f965 	bl	8004cd4 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	b128      	cbz	r0, 8001a1a <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f003 f891 	bl	8004b36 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001a14:	4628      	mov	r0, r5
 8001a16:	f7ff ff41 	bl	800189c <I2Cx_Init>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
  }
  return status;    
}
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	b005      	add	sp, #20
 8001a1e:	bd30      	pop	{r4, r5, pc}

08001a20 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001a20:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a22:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001a26:	b085      	sub	sp, #20
 8001a28:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a2a:	9402      	str	r4, [sp, #8]
 8001a2c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8001a30:	9401      	str	r4, [sp, #4]
 8001a32:	9c08      	ldr	r4, [sp, #32]
 8001a34:	9400      	str	r4, [sp, #0]
 8001a36:	f003 f897 	bl	8004b68 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	b128      	cbz	r0, 8001a4a <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f003 f879 	bl	8004b36 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001a44:	4628      	mov	r0, r5
 8001a46:	f7ff ff29 	bl	800189c <I2Cx_Init>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
  }
  return status;
}
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	b005      	add	sp, #20
 8001a4e:	bd30      	pop	{r4, r5, pc}

08001a50 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8001a50:	4770      	bx	lr
	...

08001a54 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001a56:	ba52      	rev16	r2, r2
 8001a58:	ac04      	add	r4, sp, #16
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001a5a:	2302      	movs	r3, #2
{
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001a5c:	f824 2d02 	strh.w	r2, [r4, #-2]!
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001a60:	460a      	mov	r2, r1
 8001a62:	4601      	mov	r1, r0
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	9400      	str	r4, [sp, #0]
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <AUDIO_IO_Write+0x20>)
 8001a6a:	f7ff ffd9 	bl	8001a20 <I2Cx_WriteMultiple>
}
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	bf00      	nop
 8001a74:	200142e4 	.word	0x200142e4

08001a78 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	aa04      	add	r2, sp, #16
 8001a7e:	f822 3d02 	strh.w	r3, [r2, #-2]!
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001a82:	2302      	movs	r3, #2
 8001a84:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001a88:	460a      	mov	r2, r1
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <AUDIO_IO_Read+0x28>)
 8001a8e:	f7ff ffaf 	bl	80019f0 <I2Cx_ReadMultiple>
 8001a92:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001a96:	ba40      	rev16	r0, r0
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
  
  read_value = tmp;
  
  return read_value;
}
 8001a98:	b280      	uxth	r0, r0
 8001a9a:	b005      	add	sp, #20
 8001a9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001aa0:	200142e4 	.word	0x200142e4

08001aa4 <AUDIO_IO_Delay>:
 8001aa4:	f001 bd92 	b.w	80035cc <HAL_Delay>

08001aa8 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 8001aa8:	4801      	ldr	r0, [pc, #4]	; (8001ab0 <TS_IO_Init+0x8>)
 8001aaa:	f7ff bef7 	b.w	800189c <I2Cx_Init>
 8001aae:	bf00      	nop
 8001ab0:	200142e4 	.word	0x200142e4

08001ab4 <AUDIO_IO_Init>:
 8001ab4:	f7ff bff8 	b.w	8001aa8 <TS_IO_Init>

08001ab8 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SAIx_In_DeInit+0x14>)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001abc:	681a      	ldr	r2, [r3, #0]
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001abe:	6003      	str	r3, [r0, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001ac0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ac4:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8001ac6:	f004 bbaf 	b.w	8006228 <HAL_SAI_DeInit>
 8001aca:	bf00      	nop
 8001acc:	40015c24 	.word	0x40015c24
 8001ad0:	20014390 	.word	0x20014390

08001ad4 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8001ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001ad8:	4b34      	ldr	r3, [pc, #208]	; (8001bac <SAIx_In_Init+0xd8>)
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8001ada:	b085      	sub	sp, #20
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001adc:	4d34      	ldr	r5, [pc, #208]	; (8001bb0 <SAIx_In_Init+0xdc>)
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001ade:	2600      	movs	r6, #0
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8001ae0:	9100      	str	r1, [sp, #0]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001ae2:	2701      	movs	r7, #1
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001ae4:	6819      	ldr	r1, [r3, #0]
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001ae6:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001aea:	602b      	str	r3, [r5, #0]
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001aec:	f04f 0b20 	mov.w	fp, #32
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001af0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001af4:	f44f 2980 	mov.w	r9, #262144	; 0x40000
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001af8:	f04f 0804 	mov.w	r8, #4

  HAL_SAI_Init(&haudio_out_sai);

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001afc:	4c2d      	ldr	r4, [pc, #180]	; (8001bb4 <SAIx_In_Init+0xe0>)
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001afe:	6019      	str	r1, [r3, #0]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001b04:	2180      	movs	r1, #128	; 0x80

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8001b06:	6068      	str	r0, [r5, #4]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001b08:	612b      	str	r3, [r5, #16]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8001b0a:	2340      	movs	r3, #64	; 0x40
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_out_sai.SlotInit.SlotNumber = 4;
  haudio_out_sai.SlotInit.SlotActive = SlotActive;

  HAL_SAI_Init(&haudio_out_sai);
 8001b0c:	4628      	mov	r0, r5
  __HAL_SAI_DISABLE(&haudio_out_sai);

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001b0e:	61ea      	str	r2, [r5, #28]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8001b10:	642b      	str	r3, [r5, #64]	; 0x40
 8001b12:	9301      	str	r3, [sp, #4]
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_out_sai.SlotInit.SlotNumber = 4;
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001b14:	9b00      	ldr	r3, [sp, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001b16:	9203      	str	r2, [sp, #12]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001b18:	6369      	str	r1, [r5, #52]	; 0x34
 8001b1a:	9102      	str	r1, [sp, #8]
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_out_sai.SlotInit.SlotNumber = 4;
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001b1c:	662b      	str	r3, [r5, #96]	; 0x60
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001b1e:	616e      	str	r6, [r5, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b20:	632e      	str	r6, [r5, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b22:	63ae      	str	r6, [r5, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001b24:	63ef      	str	r7, [r5, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001b26:	60ae      	str	r6, [r5, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001b28:	61af      	str	r7, [r5, #24]
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001b2a:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001b2e:	f8c5 a048 	str.w	sl, [r5, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b32:	64ee      	str	r6, [r5, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001b34:	f8c5 9050 	str.w	r9, [r5, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001b38:	656e      	str	r6, [r5, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b3a:	65ae      	str	r6, [r5, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001b3c:	f8c5 805c 	str.w	r8, [r5, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;

  HAL_SAI_Init(&haudio_out_sai);
 8001b40:	f004 faa0 	bl	8006084 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001b44:	481c      	ldr	r0, [pc, #112]	; (8001bb8 <SAIx_In_Init+0xe4>)
  __HAL_SAI_DISABLE(&haudio_in_sai);
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001b46:	9a03      	ldr	r2, [sp, #12]
  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001b48:	f8d0 e000 	ldr.w	lr, [r0]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8001b4c:	9b01      	ldr	r3, [sp, #4]
  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001b4e:	f42e 3e80 	bic.w	lr, lr, #65536	; 0x10000

  HAL_SAI_Init(&haudio_out_sai);

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001b52:	6020      	str	r0, [r4, #0]
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8001b54:	9902      	ldr	r1, [sp, #8]
  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001b56:	f8c0 e000 	str.w	lr, [r0]
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_in_sai.SlotInit.SlotNumber = 4;
  haudio_in_sai.SlotInit.SlotActive = SlotActive;

  HAL_SAI_Init(&haudio_in_sai);
 8001b5a:	4620      	mov	r0, r4
  __HAL_SAI_DISABLE(&haudio_in_sai);
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001b5c:	61e2      	str	r2, [r4, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b5e:	2203      	movs	r2, #3
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8001b60:	6423      	str	r3, [r4, #64]	; 0x40
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_in_sai.SlotInit.SlotNumber = 4;
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001b62:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b64:	6062      	str	r2, [r4, #4]
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_in_sai.SlotInit.SlotNumber = 4;
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001b66:	6623      	str	r3, [r4, #96]	; 0x60
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001b68:	6166      	str	r6, [r4, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b6a:	6326      	str	r6, [r4, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8001b6c:	6361      	str	r1, [r4, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b6e:	63a6      	str	r6, [r4, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001b70:	63e7      	str	r7, [r4, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8001b72:	60a7      	str	r7, [r4, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8001b74:	6126      	str	r6, [r4, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001b76:	61a7      	str	r7, [r4, #24]
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001b78:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001b7c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b80:	64e6      	str	r6, [r4, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001b82:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8001b86:	6566      	str	r6, [r4, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b88:	65a6      	str	r6, [r4, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8001b8a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;

  HAL_SAI_Init(&haudio_in_sai);
 8001b8e:	f004 fa79 	bl	8006084 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001b92:	682a      	ldr	r2, [r5, #0]
 8001b94:	6813      	ldr	r3, [r2, #0]
 8001b96:	ea43 030a 	orr.w	r3, r3, sl
 8001b9a:	6013      	str	r3, [r2, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8001b9c:	6822      	ldr	r2, [r4, #0]
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	ea43 030a 	orr.w	r3, r3, sl
 8001ba4:	6013      	str	r3, [r2, #0]
}
 8001ba6:	b005      	add	sp, #20
 8001ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bac:	40015c04 	.word	0x40015c04
 8001bb0:	20014474 	.word	0x20014474
 8001bb4:	20014390 	.word	0x20014390
 8001bb8:	40015c24 	.word	0x40015c24

08001bbc <BSP_AUDIO_OUT_Error_CallBack>:
 8001bbc:	4770      	bx	lr
	...

08001bc0 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001bc4:	4c4c      	ldr	r4, [pc, #304]	; (8001cf8 <BSP_AUDIO_OUT_MspInit+0x138>)
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001bc6:	b08a      	sub	sp, #40	; 0x28
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001bc8:	f04f 0802 	mov.w	r8, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001bcc:	2500      	movs	r5, #0
{ 
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001bce:	6c63      	ldr	r3, [r4, #68]	; 0x44
  AUDIO_OUT_SAIx_FS_ENABLE();
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001bd0:	2603      	movs	r6, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001bd2:	270a      	movs	r7, #10
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001bd4:	4681      	mov	r9, r0
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001bd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001bda:	a905      	add	r1, sp, #20
 8001bdc:	4847      	ldr	r0, [pc, #284]	; (8001cfc <BSP_AUDIO_OUT_MspInit+0x13c>)
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001bde:	f04f 0a40 	mov.w	sl, #64	; 0x40
{ 
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001be2:	6463      	str	r3, [r4, #68]	; 0x44
 8001be4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001bee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6323      	str	r3, [r4, #48]	; 0x30
 8001bf6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001c00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6323      	str	r3, [r4, #48]	; 0x30
 8001c08:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6323      	str	r3, [r4, #48]	; 0x30
 8001c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c1c:	f8cd 8018 	str.w	r8, [sp, #24]
  AUDIO_OUT_SAIx_CLK_ENABLE();
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c24:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c26:	9608      	str	r6, [sp, #32]
  AUDIO_OUT_SAIx_CLK_ENABLE();
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001c28:	9303      	str	r3, [sp, #12]
 8001c2a:	9b03      	ldr	r3, [sp, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8001c2c:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001c2e:	9709      	str	r7, [sp, #36]	; 0x24
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8001c30:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001c32:	f002 fc63 	bl	80044fc <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001c36:	2320      	movs	r3, #32
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001c38:	a905      	add	r1, sp, #20
 8001c3a:	4830      	ldr	r0, [pc, #192]	; (8001cfc <BSP_AUDIO_OUT_MspInit+0x13c>)
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001c3c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c3e:	f8cd 8018 	str.w	r8, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c42:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c44:	9608      	str	r6, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8001c46:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001c48:	f002 fc58 	bl	80044fc <HAL_GPIO_Init>
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001c4c:	a905      	add	r1, sp, #20
 8001c4e:	482b      	ldr	r0, [pc, #172]	; (8001cfc <BSP_AUDIO_OUT_MspInit+0x13c>)
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001c50:	f8cd a014 	str.w	sl, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c54:	f8cd 8018 	str.w	r8, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c58:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c5a:	9608      	str	r6, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001c5c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001c5e:	f002 fc4d 	bl	80044fc <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001c62:	2310      	movs	r3, #16
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001c64:	a905      	add	r1, sp, #20
 8001c66:	4825      	ldr	r0, [pc, #148]	; (8001cfc <BSP_AUDIO_OUT_MspInit+0x13c>)
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001c68:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c6a:	f8cd 8018 	str.w	r8, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c6e:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c70:	9608      	str	r6, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001c72:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001c74:	f002 fc42 	bl	80044fc <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001c7a:	f8d9 2000 	ldr.w	r2, [r9]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001c7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c82:	6323      	str	r3, [r4, #48]	; 0x30
 8001c84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8a:	9304      	str	r3, [sp, #16]
 8001c8c:	9b04      	ldr	r3, [sp, #16]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <BSP_AUDIO_OUT_MspInit+0x140>)
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d126      	bne.n	8001ce2 <BSP_AUDIO_OUT_MspInit+0x122>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001c94:	4c1b      	ldr	r4, [pc, #108]	; (8001d04 <BSP_AUDIO_OUT_MspInit+0x144>)
 8001c96:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001c9a:	6063      	str	r3, [r4, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001ca0:	f8c9 406c 	str.w	r4, [r9, #108]	; 0x6c
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001ca4:	4620      	mov	r0, r4
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001ca6:	6123      	str	r3, [r4, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001ca8:	f44f 6300 	mov.w	r3, #2048	; 0x800
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001cac:	f8c4 a008 	str.w	sl, [r4, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001cb0:	6163      	str	r3, [r4, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if(hsai->Instance == AUDIO_OUT_SAIx)
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001cb6:	60e5      	str	r5, [r4, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001cb8:	61a3      	str	r3, [r4, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001cba:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001cbe:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001cc0:	61e3      	str	r3, [r4, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001cc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001cc6:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001cc8:	6223      	str	r3, [r4, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001cca:	2304      	movs	r3, #4
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001ccc:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001cce:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <BSP_AUDIO_OUT_MspInit+0x148>)
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001cd2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001cd6:	6023      	str	r3, [r4, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001cd8:	f001 fd8a 	bl	80037f0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f001 fd11 	bl	8003704 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	210e      	movs	r1, #14
 8001ce6:	203c      	movs	r0, #60	; 0x3c
 8001ce8:	f001 fc90 	bl	800360c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001cec:	203c      	movs	r0, #60	; 0x3c
 8001cee:	f001 fcc5 	bl	800367c <HAL_NVIC_EnableIRQ>
}
 8001cf2:	b00a      	add	sp, #40	; 0x28
 8001cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	40015c04 	.word	0x40015c04
 8001d04:	20014330 	.word	0x20014330
 8001d08:	40026470 	.word	0x40026470

08001d0c <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8001d0c:	b510      	push	{r4, lr}
 8001d0e:	b0a2      	sub	sp, #136	; 0x88
 8001d10:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001d12:	a801      	add	r0, sp, #4
 8001d14:	f004 f82a 	bl	8005d6c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001d18:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001d1c:	429c      	cmp	r4, r3
 8001d1e:	d007      	beq.n	8001d30 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001d20:	f245 6322 	movw	r3, #22050	; 0x5622
 8001d24:	429c      	cmp	r4, r3
 8001d26:	d003      	beq.n	8001d30 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001d28:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001d2c:	429c      	cmp	r4, r3
 8001d2e:	d10c      	bne.n	8001d4a <BSP_AUDIO_OUT_ClockConfig+0x3e>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001d30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d34:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d3a:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001d3c:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001d40:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001d46:	2313      	movs	r3, #19
 8001d48:	e00b      	b.n	8001d62 <BSP_AUDIO_OUT_ClockConfig+0x56>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001d4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d4e:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d54:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8001d56:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001d5a:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001d60:	2301      	movs	r3, #1
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001d62:	a801      	add	r0, sp, #4
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001d64:	930a      	str	r3, [sp, #40]	; 0x28
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001d66:	f003 fc5b 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001d6a:	b022      	add	sp, #136	; 0x88
 8001d6c:	bd10      	pop	{r4, pc}
	...

08001d70 <BSP_AUDIO_IN_Record>:
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001d70:	b28a      	uxth	r2, r1
 8001d72:	4601      	mov	r1, r0
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <BSP_AUDIO_IN_Record+0x10>)
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8001d76:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001d78:	f004 fab0 	bl	80062dc <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	bd08      	pop	{r3, pc}
 8001d80:	20014390 	.word	0x20014390

08001d84 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8001d84:	b538      	push	{r3, r4, r5, lr}
 8001d86:	4605      	mov	r5, r0
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8001d88:	480a      	ldr	r0, [pc, #40]	; (8001db4 <BSP_AUDIO_IN_Stop+0x30>)
 8001d8a:	f004 fa7d 	bl	8006288 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <BSP_AUDIO_IN_Stop+0x34>)
 8001d90:	4629      	mov	r1, r5
 8001d92:	2034      	movs	r0, #52	; 0x34
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4798      	blx	r3
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	b928      	cbnz	r0, 8001daa <BSP_AUDIO_IN_Stop+0x26>
  {
    return AUDIO_ERROR;
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8001d9e:	2d01      	cmp	r5, #1
 8001da0:	d105      	bne.n	8001dae <BSP_AUDIO_IN_Stop+0x2a>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8001da2:	4628      	mov	r0, r5
 8001da4:	f001 fc12 	bl	80035cc <HAL_Delay>
 8001da8:	e001      	b.n	8001dae <BSP_AUDIO_IN_Stop+0x2a>
  HAL_SAI_DMAStop(&haudio_in_sai);
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
  {
    return AUDIO_ERROR;
 8001daa:	2001      	movs	r0, #1
 8001dac:	bd38      	pop	{r3, r4, r5, pc}
    {
      /* Wait at least 100us */
      HAL_Delay(1);
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8001dae:	4620      	mov	r0, r4
  }
}
 8001db0:	bd38      	pop	{r3, r4, r5, pc}
 8001db2:	bf00      	nop
 8001db4:	20014390 	.word	0x20014390
 8001db8:	20043008 	.word	0x20043008

08001dbc <BSP_AUDIO_IN_Pause>:
/**
  * @brief  Pauses the audio file stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Pause(void)
{    
 8001dbc:	b508      	push	{r3, lr}
  /* Call the Media layer pause function */
  HAL_SAI_DMAPause(&haudio_in_sai);
 8001dbe:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <BSP_AUDIO_IN_Pause+0xc>)
 8001dc0:	f004 fa52 	bl	8006268 <HAL_SAI_DMAPause>
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
}
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	bd08      	pop	{r3, pc}
 8001dc8:	20014390 	.word	0x20014390

08001dcc <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001dcc:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001dce:	f00e fa97 	bl	8010300 <BSP_AUDIO_IN_TransferComplete_CallBack>
 8001dd2:	bd08      	pop	{r3, pc}

08001dd4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001dd6:	b508      	push	{r3, lr}
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001dd8:	f7ff fffc 	bl	8001dd4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
 8001ddc:	bd08      	pop	{r3, pc}

08001dde <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8001dde:	4770      	bx	lr

08001de0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001de0:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001de2:	480a      	ldr	r0, [pc, #40]	; (8001e0c <HAL_SAI_ErrorCallback+0x2c>)
 8001de4:	f004 fb0f 	bl	8006406 <HAL_SAI_GetState>
 8001de8:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001dea:	4809      	ldr	r0, [pc, #36]	; (8001e10 <HAL_SAI_ErrorCallback+0x30>)

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001dec:	f005 05ef 	and.w	r5, r5, #239	; 0xef
{
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001df0:	f004 fb09 	bl	8006406 <HAL_SAI_GetState>
 8001df4:	4604      	mov	r4, r0

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001df6:	2d02      	cmp	r5, #2
 8001df8:	d101      	bne.n	8001dfe <HAL_SAI_ErrorCallback+0x1e>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001dfa:	f7ff fedf 	bl	8001bbc <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001dfe:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001e02:	2c02      	cmp	r4, #2
 8001e04:	d101      	bne.n	8001e0a <HAL_SAI_ErrorCallback+0x2a>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8001e06:	f7ff ffea 	bl	8001dde <BSP_AUDIO_IN_Error_CallBack>
 8001e0a:	bd38      	pop	{r3, r4, r5, pc}
 8001e0c:	20014474 	.word	0x20014474
 8001e10:	20014390 	.word	0x20014390

08001e14 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8001e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001e18:	4c3b      	ldr	r4, [pc, #236]	; (8001f08 <BSP_AUDIO_IN_MspInit+0xf4>)
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8001e1a:	b08a      	sub	sp, #40	; 0x28
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e1e:	2500      	movs	r5, #0
{
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001e20:	6c63      	ldr	r3, [r4, #68]	; 0x44
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8001e22:	f44f 6880 	mov.w	r8, #1024	; 0x400
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8001e26:	4606      	mov	r6, r0
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001e28:	a905      	add	r1, sp, #20
{
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001e2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001e2e:	4837      	ldr	r0, [pc, #220]	; (8001f0c <BSP_AUDIO_IN_MspInit+0xf8>)
{
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001e30:	6463      	str	r3, [r4, #68]	; 0x44
 8001e32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8001e3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e42:	6323      	str	r3, [r4, #48]	; 0x30
 8001e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8001e46:	f8cd 8014 	str.w	r8, [sp, #20]

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e4e:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e50:	9507      	str	r5, [sp, #28]

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	9b02      	ldr	r3, [sp, #8]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001e56:	230a      	movs	r3, #10
  AUDIO_IN_SAIx_SD_ENABLE();
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001e58:	9708      	str	r7, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001e5a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001e5c:	f002 fb4e 	bl	80044fc <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001e62:	a905      	add	r1, sp, #20
 8001e64:	482a      	ldr	r0, [pc, #168]	; (8001f10 <BSP_AUDIO_IN_MspInit+0xfc>)
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001e6e:	9506      	str	r5, [sp, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e74:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001e76:	9708      	str	r7, [sp, #32]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001e78:	9303      	str	r3, [sp, #12]
 8001e7a:	9b03      	ldr	r3, [sp, #12]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8001e7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e80:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001e82:	f002 fb3b 	bl	80044fc <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001e86:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001e88:	6832      	ldr	r2, [r6, #0]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8001e90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e96:	9304      	str	r3, [sp, #16]
 8001e98:	9b04      	ldr	r3, [sp, #16]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <BSP_AUDIO_IN_MspInit+0x100>)
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d120      	bne.n	8001ee2 <BSP_AUDIO_IN_MspInit+0xce>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001ea0:	4c1d      	ldr	r4, [pc, #116]	; (8001f18 <BSP_AUDIO_IN_MspInit+0x104>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001ea2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ea6:	6163      	str	r3, [r4, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001eac:	6734      	str	r4, [r6, #112]	; 0x70
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001eae:	4620      	mov	r0, r4
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001eb0:	61a3      	str	r3, [r4, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8001eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
    
  if(hsai->Instance == AUDIO_IN_SAIx)
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001eb6:	6065      	str	r5, [r4, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8001eb8:	61e3      	str	r3, [r4, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    
  if(hsai->Instance == AUDIO_IN_SAIx)
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001ebe:	60a5      	str	r5, [r4, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001ec0:	6223      	str	r3, [r4, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ec2:	2303      	movs	r3, #3
  if(hsai->Instance == AUDIO_IN_SAIx)
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001ec4:	60e5      	str	r5, [r4, #12]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ec6:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <BSP_AUDIO_IN_MspInit+0x108>)
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001eca:	f8c4 8010 	str.w	r8, [r4, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001ece:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001ed0:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001ed2:	6325      	str	r5, [r4, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001ed4:	6023      	str	r3, [r4, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001ed6:	63a6      	str	r6, [r4, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001ed8:	f001 fc8a 	bl	80037f0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8001edc:	4620      	mov	r0, r4
 8001ede:	f001 fc11 	bl	8003704 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	2046      	movs	r0, #70	; 0x46
 8001ee8:	f001 fb90 	bl	800360c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8001eec:	2046      	movs	r0, #70	; 0x46
 8001eee:	f001 fbc5 	bl	800367c <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	2028      	movs	r0, #40	; 0x28
 8001ef8:	f001 fb88 	bl	800360c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8001efc:	2028      	movs	r0, #40	; 0x28
 8001efe:	f001 fbbd 	bl	800367c <HAL_NVIC_EnableIRQ>
}
 8001f02:	b00a      	add	sp, #40	; 0x28
 8001f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40021c00 	.word	0x40021c00
 8001f14:	40015c24 	.word	0x40015c24
 8001f18:	20014414 	.word	0x20014414
 8001f1c:	400264b8 	.word	0x400264b8

08001f20 <BSP_AUDIO_IN_Init>:
{
  uint8_t ret = AUDIO_ERROR;
  uint32_t deviceid = 0x00;
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001f20:	f420 7380 	bic.w	r3, r0, #256	; 0x100
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @param  Volume: Initial volume level (in range 0(Mute)..80(+0dB)..100(+17.625dB))
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint16_t InputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	4688      	mov	r8, r1
 8001f30:	4616      	mov	r6, r2
  uint8_t ret = AUDIO_ERROR;
  uint32_t deviceid = 0x00;
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001f32:	d002      	beq.n	8001f3a <BSP_AUDIO_IN_Init+0x1a>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8001f34:	2001      	movs	r0, #1
 8001f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    /* Disable SAI */
    SAIx_In_DeInit();

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001f3a:	4c1b      	ldr	r4, [pc, #108]	; (8001fa8 <BSP_AUDIO_IN_Init+0x88>)
    ret = AUDIO_ERROR;
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8001f3c:	f7ff fdbc 	bl	8001ab8 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001f40:	2200      	movs	r2, #0
 8001f42:	4631      	mov	r1, r6
 8001f44:	4620      	mov	r0, r4
 8001f46:	f7ff fee1 	bl	8001d0c <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001f4a:	4b18      	ldr	r3, [pc, #96]	; (8001fac <BSP_AUDIO_IN_Init+0x8c>)
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001f4c:	4620      	mov	r0, r4
    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001f4e:	6023      	str	r3, [r4, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001f50:	f004 fa59 	bl	8006406 <HAL_SAI_GetState>
 8001f54:	4607      	mov	r7, r0
 8001f56:	b938      	cbnz	r0, 8001f68 <BSP_AUDIO_IN_Init+0x48>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8001f58:	4601      	mov	r1, r0
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff fe30 	bl	8001bc0 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8001f60:	4639      	mov	r1, r7
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff ff56 	bl	8001e14 <BSP_AUDIO_IN_MspInit>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8001f68:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001f6c:	4c10      	ldr	r4, [pc, #64]	; (8001fb0 <BSP_AUDIO_IN_Init+0x90>)
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8001f6e:	4632      	mov	r2, r6
 8001f70:	f04f 0001 	mov.w	r0, #1
 8001f74:	bf0c      	ite	eq
 8001f76:	210a      	moveq	r1, #10
 8001f78:	2105      	movne	r1, #5
 8001f7a:	f7ff fdab 	bl	8001ad4 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001f7e:	68a3      	ldr	r3, [r4, #8]
 8001f80:	2034      	movs	r0, #52	; 0x34
 8001f82:	4798      	blx	r3

    if((deviceid) == WM8994_ID)
 8001f84:	f648 1394 	movw	r3, #35220	; 0x8994
 8001f88:	4298      	cmp	r0, r3
 8001f8a:	d1d3      	bne.n	8001f34 <BSP_AUDIO_IN_Init+0x14>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001f8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f8e:	2034      	movs	r0, #52	; 0x34
 8001f90:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <BSP_AUDIO_IN_Init+0x94>)
    }

    if(ret == AUDIO_OK)
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, Volume, AudioFreq);
 8001f94:	4642      	mov	r2, r8
 8001f96:	4629      	mov	r1, r5
    if((deviceid) == WM8994_ID)
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8001f98:	601c      	str	r4, [r3, #0]
    }

    if(ret == AUDIO_OK)
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, Volume, AudioFreq);
 8001f9a:	2034      	movs	r0, #52	; 0x34
 8001f9c:	6824      	ldr	r4, [r4, #0]
 8001f9e:	4633      	mov	r3, r6
 8001fa0:	47a0      	blx	r4
 8001fa2:	2000      	movs	r0, #0
    }
  }
  return ret;
}
 8001fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fa8:	20014390 	.word	0x20014390
 8001fac:	40015c24 	.word	0x40015c24
 8001fb0:	20010000 	.word	0x20010000
 8001fb4:	20043008 	.word	0x20043008

08001fb8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001fb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001fbc:	4616      	mov	r6, r2
 8001fbe:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001fc0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fc4:	4b17      	ldr	r3, [pc, #92]	; (8002024 <LL_FillBuffer+0x6c>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001fc6:	460d      	mov	r5, r1
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fc8:	f04f 0e34 	mov.w	lr, #52	; 0x34
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001fcc:	605a      	str	r2, [r3, #4]
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001fce:	4680      	mov	r8, r0
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fd0:	4a15      	ldr	r2, [pc, #84]	; (8002028 <LL_FillBuffer+0x70>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001fd2:	9808      	ldr	r0, [sp, #32]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fd4:	6811      	ldr	r1, [r2, #0]
 8001fd6:	4a15      	ldr	r2, [pc, #84]	; (800202c <LL_FillBuffer+0x74>)
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001fd8:	60d8      	str	r0, [r3, #12]
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fda:	fb0e 2201 	mla	r2, lr, r1, r2
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001fde:	4811      	ldr	r0, [pc, #68]	; (8002024 <LL_FillBuffer+0x6c>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001fe0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fe2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fe4:	2a02      	cmp	r2, #2
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001fe6:	bf18      	it	ne
 8001fe8:	2200      	movne	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <LL_FillBuffer+0x78>)
 8001fee:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001ff0:	f001 fdb4 	bl	8003b5c <HAL_DMA2D_Init>
 8001ff4:	b998      	cbnz	r0, 800201e <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001ff6:	4641      	mov	r1, r8
 8001ff8:	480a      	ldr	r0, [pc, #40]	; (8002024 <LL_FillBuffer+0x6c>)
 8001ffa:	f001 fe7b 	bl	8003cf4 <HAL_DMA2D_ConfigLayer>
 8001ffe:	b970      	cbnz	r0, 800201e <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002000:	9700      	str	r7, [sp, #0]
 8002002:	4633      	mov	r3, r6
 8002004:	462a      	mov	r2, r5
 8002006:	4621      	mov	r1, r4
 8002008:	4806      	ldr	r0, [pc, #24]	; (8002024 <LL_FillBuffer+0x6c>)
 800200a:	f001 fdd3 	bl	8003bb4 <HAL_DMA2D_Start>
 800200e:	b930      	cbnz	r0, 800201e <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002010:	210a      	movs	r1, #10
 8002012:	4804      	ldr	r0, [pc, #16]	; (8002024 <LL_FillBuffer+0x6c>)
      }
    }
  } 
}
 8002014:	b002      	add	sp, #8
 8002016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800201a:	f001 bde5 	b.w	8003be8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800201e:	b002      	add	sp, #8
 8002020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002024:	20014598 	.word	0x20014598
 8002028:	2001457c 	.word	0x2001457c
 800202c:	2004300c 	.word	0x2004300c
 8002030:	4002b000 	.word	0x4002b000

08002034 <BSP_LCD_LayerDefaultInit>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002034:	4a19      	ldr	r2, [pc, #100]	; (800209c <BSP_LCD_LayerDefaultInit+0x68>)
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002036:	2300      	movs	r3, #0
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002038:	b530      	push	{r4, r5, lr}
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800203a:	6812      	ldr	r2, [r2, #0]
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800203c:	4604      	mov	r4, r0
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800203e:	2534      	movs	r5, #52	; 0x34
 8002040:	4817      	ldr	r0, [pc, #92]	; (80020a0 <BSP_LCD_LayerDefaultInit+0x6c>)
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002042:	b08f      	sub	sp, #60	; 0x3c
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002044:	fb05 0202 	mla	r2, r5, r2, r0
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002048:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
 800204a:	9303      	str	r3, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800204c:	9305      	str	r3, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
  layer_cfg.Alpha = 255;
  layer_cfg.Alpha0 = 0;
 800204e:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8002050:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8002054:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 8002058:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800205c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002060:	6e15      	ldr	r5, [r2, #96]	; 0x60
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  layer_cfg.FBStartAdress = FB_Address;
 8002062:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8002064:	21ff      	movs	r1, #255	; 0xff
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002066:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.Alpha = 255;
  layer_cfg.Alpha0 = 0;
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002068:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800206a:	2307      	movs	r3, #7

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800206c:	9204      	str	r2, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  layer_cfg.FBStartAdress = FB_Address;
  layer_cfg.Alpha = 255;
 800206e:	9106      	str	r1, [sp, #24]
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002070:	a901      	add	r1, sp, #4
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002072:	920c      	str	r2, [sp, #48]	; 0x30
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002074:	4622      	mov	r2, r4
  layer_cfg.Alpha0 = 0;
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002076:	9309      	str	r3, [sp, #36]	; 0x24
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002078:	9502      	str	r5, [sp, #8]
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800207a:	950b      	str	r5, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800207c:	f002 ffe6 	bl	800504c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002080:	200c      	movs	r0, #12
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <BSP_LCD_LayerDefaultInit+0x70>)
 8002084:	f04f 31ff 	mov.w	r1, #4294967295
 8002088:	4360      	muls	r0, r4
 800208a:	181a      	adds	r2, r3, r0
 800208c:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 800208e:	4906      	ldr	r1, [pc, #24]	; (80020a8 <BSP_LCD_LayerDefaultInit+0x74>)
 8002090:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002092:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002096:	501a      	str	r2, [r3, r0]
}
 8002098:	b00f      	add	sp, #60	; 0x3c
 800209a:	bd30      	pop	{r4, r5, pc}
 800209c:	2001457c 	.word	0x2001457c
 80020a0:	2004300c 	.word	0x2004300c
 80020a4:	20014580 	.word	0x20014580
 80020a8:	20010038 	.word	0x20010038

080020ac <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 80020ac:	4b01      	ldr	r3, [pc, #4]	; (80020b4 <BSP_LCD_SelectLayer+0x8>)
 80020ae:	6018      	str	r0, [r3, #0]
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	2001457c 	.word	0x2001457c

080020b8 <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <BSP_LCD_SetTextColor+0x10>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	230c      	movs	r3, #12
 80020be:	4353      	muls	r3, r2
 80020c0:	4a02      	ldr	r2, [pc, #8]	; (80020cc <BSP_LCD_SetTextColor+0x14>)
 80020c2:	50d0      	str	r0, [r2, r3]
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	2001457c 	.word	0x2001457c
 80020cc:	20014580 	.word	0x20014580

080020d0 <BSP_LCD_SetFont>:
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <BSP_LCD_SetFont+0x10>)
 80020d2:	210c      	movs	r1, #12
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <BSP_LCD_SetFont+0x14>)
 80020d8:	fb01 3302 	mla	r3, r1, r2, r3
 80020dc:	6098      	str	r0, [r3, #8]
 80020de:	4770      	bx	lr
 80020e0:	2001457c 	.word	0x2001457c
 80020e4:	20014580 	.word	0x20014580

080020e8 <BSP_LCD_Clear>:
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <BSP_LCD_Clear+0x24>)
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80020ea:	b513      	push	{r0, r1, r4, lr}
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80020ec:	681c      	ldr	r4, [r3, #0]
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80020ee:	2334      	movs	r3, #52	; 0x34
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <BSP_LCD_Clear+0x28>)
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80020f2:	9001      	str	r0, [sp, #4]
 80020f4:	4620      	mov	r0, r4
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80020f6:	fb03 1104 	mla	r1, r3, r4, r1
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80020fa:	2300      	movs	r3, #0
 80020fc:	315c      	adds	r1, #92	; 0x5c
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	c90e      	ldmia	r1, {r1, r2, r3}
 8002102:	f7ff ff59 	bl	8001fb8 <LL_FillBuffer>
}
 8002106:	b002      	add	sp, #8
 8002108:	bd10      	pop	{r4, pc}
 800210a:	bf00      	nop
 800210c:	2001457c 	.word	0x2001457c
 8002110:	2004300c 	.word	0x2004300c

08002114 <BSP_LCD_DrawPixel>:
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <BSP_LCD_DrawPixel+0x2c>)
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002116:	b530      	push	{r4, r5, lr}
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002118:	681c      	ldr	r4, [r3, #0]
 800211a:	2534      	movs	r5, #52	; 0x34
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <BSP_LCD_DrawPixel+0x30>)
 800211e:	fb05 3304 	mla	r3, r5, r4, r3
 8002122:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002124:	2c02      	cmp	r4, #2
 8002126:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800212a:	fb04 0101 	mla	r1, r4, r1, r0
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800212e:	d103      	bne.n	8002138 <BSP_LCD_DrawPixel+0x24>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002130:	b292      	uxth	r2, r2
 8002132:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8002136:	bd30      	pop	{r4, r5, pc}
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002138:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800213c:	bd30      	pop	{r4, r5, pc}
 800213e:	bf00      	nop
 8002140:	2001457c 	.word	0x2001457c
 8002144:	2004300c 	.word	0x2004300c

08002148 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800214c:	4b32      	ldr	r3, [pc, #200]	; (8002218 <BSP_LCD_DisplayChar+0xd0>)
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800214e:	b085      	sub	sp, #20
 8002150:	3a20      	subs	r2, #32
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 8002152:	f04f 0800 	mov.w	r8, #0
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002156:	f8d3 a000 	ldr.w	sl, [r3]
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800215a:	9001      	str	r0, [sp, #4]
 800215c:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800215e:	210c      	movs	r1, #12
 8002160:	482e      	ldr	r0, [pc, #184]	; (800221c <BSP_LCD_DisplayChar+0xd4>)
 8002162:	fb01 010a 	mla	r1, r1, sl, r0
 8002166:	6888      	ldr	r0, [r1, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002168:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 800216c:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8002170:	f109 0507 	add.w	r5, r9, #7
 8002174:	fb0b f202 	mul.w	r2, fp, r2
 8002178:	10ed      	asrs	r5, r5, #3
 800217a:	fb05 f402 	mul.w	r4, r5, r2
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 800217e:	ebc9 01c5 	rsb	r1, r9, r5, lsl #3
 8002182:	1ca2      	adds	r2, r4, #2
 8002184:	6804      	ldr	r4, [r0, #0]
 8002186:	4414      	add	r4, r2
      break;
    } 
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002188:	f109 32ff 	add.w	r2, r9, #4294967295
 800218c:	fa52 f381 	uxtab	r3, r2, r1
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	9b02      	ldr	r3, [sp, #8]
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 8002194:	45d8      	cmp	r8, fp
 8002196:	eb03 0208 	add.w	r2, r3, r8
 800219a:	b293      	uxth	r3, r2
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	d238      	bcs.n	8002212 <BSP_LCD_DisplayChar+0xca>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
    
    switch(((width + 7)/8))
 80021a0:	2d01      	cmp	r5, #1
 80021a2:	d008      	beq.n	80021b6 <BSP_LCD_DisplayChar+0x6e>
 80021a4:	2d02      	cmp	r5, #2
 80021a6:	d109      	bne.n	80021bc <BSP_LCD_DisplayChar+0x74>
    case 1:
      line =  pchar[0];      
      break;
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80021a8:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 80021ac:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80021b0:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80021b4:	e00b      	b.n	80021ce <BSP_LCD_DisplayChar+0x86>
    
    switch(((width + 7)/8))
    {
      
    case 1:
      line =  pchar[0];      
 80021b6:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 80021ba:	e008      	b.n	80021ce <BSP_LCD_DisplayChar+0x86>
      line =  (pchar[0]<< 8) | pchar[1];      
      break;
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80021bc:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80021c0:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 80021c4:	0236      	lsls	r6, r6, #8
 80021c6:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
 80021ca:	7826      	ldrb	r6, [r4, #0]
 80021cc:	4316      	orrs	r6, r2
      break;
    } 
    
    for (j = 0; j < width; j++)
 80021ce:	2700      	movs	r7, #0
 80021d0:	45b9      	cmp	r9, r7
 80021d2:	d91a      	bls.n	800220a <BSP_LCD_DisplayChar+0xc2>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80021d4:	9b03      	ldr	r3, [sp, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	1bd9      	subs	r1, r3, r7
 80021da:	408a      	lsls	r2, r1
 80021dc:	4232      	tst	r2, r6
 80021de:	f04f 020c 	mov.w	r2, #12
 80021e2:	d006      	beq.n	80021f2 <BSP_LCD_DisplayChar+0xaa>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80021e4:	9b01      	ldr	r3, [sp, #4]
 80021e6:	fb02 f20a 	mul.w	r2, r2, sl
 80021ea:	19d8      	adds	r0, r3, r7
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <BSP_LCD_DisplayChar+0xd4>)
 80021ee:	589a      	ldr	r2, [r3, r2]
 80021f0:	e005      	b.n	80021fe <BSP_LCD_DisplayChar+0xb6>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <BSP_LCD_DisplayChar+0xd4>)
 80021f4:	fb02 320a 	mla	r2, r2, sl, r3
 80021f8:	9b01      	ldr	r3, [sp, #4]
 80021fa:	6852      	ldr	r2, [r2, #4]
 80021fc:	19d8      	adds	r0, r3, r7
 80021fe:	9900      	ldr	r1, [sp, #0]
 8002200:	b280      	uxth	r0, r0
 8002202:	f7ff ff87 	bl	8002114 <BSP_LCD_DrawPixel>
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
      break;
    } 
    
    for (j = 0; j < width; j++)
 8002206:	3701      	adds	r7, #1
 8002208:	e7e2      	b.n	80021d0 <BSP_LCD_DisplayChar+0x88>
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 800220a:	f108 0801 	add.w	r8, r8, #1
 800220e:	442c      	add	r4, r5
 8002210:	e7bf      	b.n	8002192 <BSP_LCD_DisplayChar+0x4a>
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
}
 8002212:	b005      	add	sp, #20
 8002214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002218:	2001457c 	.word	0x2001457c
 800221c:	20014580 	.word	0x20014580

08002220 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002224:	4604      	mov	r4, r0
 8002226:	460e      	mov	r6, r1
 8002228:	4615      	mov	r5, r2
 800222a:	ebc5 0c02 	rsb	ip, r5, r2
  uint16_t ref_column = 1, i = 0;
  uint32_t size = 0, xsize = 0; 
  uint8_t  *ptr = Text;
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800222e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002232:	2900      	cmp	r1, #0
 8002234:	d1f9      	bne.n	800222a <BSP_LCD_DisplayStringAt+0xa>
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002236:	4a22      	ldr	r2, [pc, #136]	; (80022c0 <BSP_LCD_DisplayStringAt+0xa0>)
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
  
  switch (Mode)
 8002238:	2b01      	cmp	r3, #1
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800223a:	4922      	ldr	r1, [pc, #136]	; (80022c4 <BSP_LCD_DisplayStringAt+0xa4>)
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800223c:	f8d2 e000 	ldr.w	lr, [r2]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002240:	f04f 020c 	mov.w	r2, #12
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002244:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80022c8 <BSP_LCD_DisplayStringAt+0xa8>
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002248:	fb02 110e 	mla	r1, r2, lr, r1
 800224c:	688f      	ldr	r7, [r1, #8]
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800224e:	f04f 0134 	mov.w	r1, #52	; 0x34
 8002252:	fb01 810e 	mla	r1, r1, lr, r8
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002256:	88b8      	ldrh	r0, [r7, #4]
 8002258:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800225a:	fbb1 f2f0 	udiv	r2, r1, r0
  
  switch (Mode)
 800225e:	d007      	beq.n	8002270 <BSP_LCD_DisplayStringAt+0x50>
 8002260:	2b02      	cmp	r3, #2
 8002262:	d10b      	bne.n	800227c <BSP_LCD_DisplayStringAt+0x5c>
      ref_column = Xpos;
      break;
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002264:	ebcc 0202 	rsb	r2, ip, r2
 8002268:	fb12 f000 	smulbb	r0, r2, r0
 800226c:	1b00      	subs	r0, r0, r4
 800226e:	e004      	b.n	800227a <BSP_LCD_DisplayStringAt+0x5a>
  
  switch (Mode)
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002270:	ebcc 0202 	rsb	r2, ip, r2
 8002274:	4350      	muls	r0, r2
 8002276:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      ref_column = Xpos;
      break;
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800227a:	b284      	uxth	r4, r0
      break;
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800227c:	b223      	sxth	r3, r4
  {
    ref_column = 1;
 800227e:	46a9      	mov	r9, r5
 8002280:	2b00      	cmp	r3, #0
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002282:	f04f 0334 	mov.w	r3, #52	; 0x34
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
  {
    ref_column = 1;
 8002286:	bfd8      	it	le
 8002288:	2401      	movle	r4, #1
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800228a:	fb03 880e 	mla	r8, r3, lr, r8
 800228e:	ebc5 0309 	rsb	r3, r5, r9
  {
    ref_column = 1;
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002292:	88b8      	ldrh	r0, [r7, #4]
 8002294:	f8d8 1060 	ldr.w	r1, [r8, #96]	; 0x60
 8002298:	b29b      	uxth	r3, r3
 800229a:	f819 2b01 	ldrb.w	r2, [r9], #1
 800229e:	fb00 1313 	mls	r3, r0, r3, r1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4283      	cmp	r3, r0
 80022a6:	d308      	bcc.n	80022ba <BSP_LCD_DisplayStringAt+0x9a>
 80022a8:	b13a      	cbz	r2, 80022ba <BSP_LCD_DisplayStringAt+0x9a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80022aa:	4620      	mov	r0, r4
 80022ac:	4631      	mov	r1, r6
 80022ae:	f7ff ff4b 	bl	8002148 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80022b2:	88b8      	ldrh	r0, [r7, #4]
 80022b4:	4420      	add	r0, r4
 80022b6:	b284      	uxth	r4, r0
 80022b8:	e7e9      	b.n	800228e <BSP_LCD_DisplayStringAt+0x6e>
 80022ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022be:	bf00      	nop
 80022c0:	2001457c 	.word	0x2001457c
 80022c4:	20014580 	.word	0x20014580
 80022c8:	2004300c 	.word	0x2004300c

080022cc <BSP_LCD_DisplayStringAtLine>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp[ActiveLayer].pFont;
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <BSP_LCD_DisplayStringAtLine+0x28>)
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80022ce:	b410      	push	{r4}
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp[ActiveLayer].pFont;
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	240c      	movs	r4, #12
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <BSP_LCD_DisplayStringAtLine+0x2c>)
 80022d6:	fb04 3302 	mla	r3, r4, r2, r3
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80022da:	460a      	mov	r2, r1
}
 80022dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	88db      	ldrh	r3, [r3, #6]
 80022e4:	fb13 f000 	smulbb	r0, r3, r0
 80022e8:	2303      	movs	r3, #3
 80022ea:	b281      	uxth	r1, r0
 80022ec:	2000      	movs	r0, #0
 80022ee:	f7ff bf97 	b.w	8002220 <BSP_LCD_DisplayStringAt>
 80022f2:	bf00      	nop
 80022f4:	2001457c 	.word	0x2001457c
 80022f8:	20014580 	.word	0x20014580

080022fc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80022fc:	b508      	push	{r3, lr}
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002300:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002304:	4808      	ldr	r0, [pc, #32]	; (8002328 <BSP_LCD_DisplayOn+0x2c>)
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	6993      	ldr	r3, [r2, #24]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002310:	2201      	movs	r2, #1
 8002312:	f002 fa85 	bl	8004820 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002316:	2201      	movs	r2, #1
 8002318:	2108      	movs	r1, #8
 800231a:	4804      	ldr	r0, [pc, #16]	; (800232c <BSP_LCD_DisplayOn+0x30>)
}
 800231c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002320:	f002 ba7e 	b.w	8004820 <HAL_GPIO_WritePin>
 8002324:	2004300c 	.word	0x2004300c
 8002328:	40022000 	.word	0x40022000
 800232c:	40022800 	.word	0x40022800

08002330 <BSP_LCD_MspInit>:
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002330:	4b4b      	ldr	r3, [pc, #300]	; (8002460 <BSP_LCD_MspInit+0x130>)
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002332:	484c      	ldr	r0, [pc, #304]	; (8002464 <BSP_LCD_MspInit+0x134>)
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002336:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800233a:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800233e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LCD_BL_CTRL_GPIO_CLK_ENABLE();

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002342:	2402      	movs	r4, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002344:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002346:	a909      	add	r1, sp, #36	; 0x24
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002348:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800234c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002350:	4e45      	ldr	r6, [pc, #276]	; (8002468 <BSP_LCD_MspInit+0x138>)
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002352:	9200      	str	r2, [sp, #0]
 8002354:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002358:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
 800235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002360:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002364:	9201      	str	r2, [sp, #4]
 8002366:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800236a:	f042 0210 	orr.w	r2, r2, #16
 800236e:	631a      	str	r2, [r3, #48]	; 0x30
 8002370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002372:	f002 0210 	and.w	r2, r2, #16
 8002376:	9202      	str	r2, [sp, #8]
 8002378:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800237a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002388:	9203      	str	r2, [sp, #12]
 800238a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800238c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
 8002394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002396:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800239a:	9204      	str	r2, [sp, #16]
 800239c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800239e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a4:	631a      	str	r2, [r3, #48]	; 0x30
 80023a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a8:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80023ac:	9205      	str	r2, [sp, #20]
 80023ae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
 80023b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ba:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80023be:	9206      	str	r2, [sp, #24]
 80023c0:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 80023c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c8:	631a      	str	r2, [r3, #48]	; 0x30
 80023ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023cc:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80023d0:	9207      	str	r2, [sp, #28]
 80023d2:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80023d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023da:	631a      	str	r2, [r3, #48]	; 0x30
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023de:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80023e4:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80023e6:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80023e8:	9308      	str	r3, [sp, #32]
 80023ea:	9b08      	ldr	r3, [sp, #32]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80023ec:	2310      	movs	r3, #16
 80023ee:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023f4:	f002 f882 	bl	80044fc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80023f8:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023fa:	a909      	add	r1, sp, #36	; 0x24
 80023fc:	481b      	ldr	r0, [pc, #108]	; (800246c <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023fe:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002400:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002402:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002404:	f002 f87a 	bl	80044fc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002408:	f44f 4366 	mov.w	r3, #58880	; 0xe600
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800240c:	a909      	add	r1, sp, #36	; 0x24
 800240e:	4630      	mov	r0, r6
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002410:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002412:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002414:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002416:	f002 f871 	bl	80044fc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800241a:	f64e 73ff 	movw	r3, #61439	; 0xefff
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800241e:	a909      	add	r1, sp, #36	; 0x24
 8002420:	4813      	ldr	r0, [pc, #76]	; (8002470 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002422:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002424:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002426:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002428:	f002 f868 	bl	80044fc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800242c:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800242e:	23f7      	movs	r3, #247	; 0xf7
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002430:	4c10      	ldr	r4, [pc, #64]	; (8002474 <BSP_LCD_MspInit+0x144>)
 8002432:	a909      	add	r1, sp, #36	; 0x24

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002434:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002436:	2501      	movs	r5, #1
  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002438:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800243a:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800243c:	f002 f85e 	bl	80044fc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002440:	a909      	add	r1, sp, #36	; 0x24
 8002442:	4630      	mov	r0, r6
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002444:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002446:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002448:	f002 f858 	bl	80044fc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800244c:	2308      	movs	r3, #8
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800244e:	a909      	add	r1, sp, #36	; 0x24
 8002450:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002452:	950a      	str	r5, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002454:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002456:	f002 f851 	bl	80044fc <HAL_GPIO_Init>
}
 800245a:	b00f      	add	sp, #60	; 0x3c
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40021000 	.word	0x40021000
 8002468:	40022000 	.word	0x40022000
 800246c:	40021800 	.word	0x40021800
 8002470:	40022400 	.word	0x40022400
 8002474:	40022800 	.word	0x40022800

08002478 <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <BSP_LCD_ClockConfig+0x18>)
 800247a:	2308      	movs	r3, #8
 800247c:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800247e:	23c0      	movs	r3, #192	; 0xc0
 8002480:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002482:	2305      	movs	r3, #5
 8002484:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248a:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800248c:	f003 b8c8 	b.w	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8002490:	200144f8 	.word	0x200144f8

08002494 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002494:	b510      	push	{r4, lr}
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002496:	2328      	movs	r3, #40	; 0x28
 8002498:	4c26      	ldr	r4, [pc, #152]	; (8002534 <BSP_LCD_Init+0xa0>)
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800249a:	2100      	movs	r1, #0
{    
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800249c:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800249e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80024a0:	4620      	mov	r0, r4
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80024a2:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80024a4:	2335      	movs	r3, #53	; 0x35
 80024a6:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80024a8:	230b      	movs	r3, #11
 80024aa:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80024ac:	f240 131b 	movw	r3, #283	; 0x11b
 80024b0:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80024b2:	f240 2315 	movw	r3, #533	; 0x215
 80024b6:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80024b8:	f240 131d 	movw	r3, #285	; 0x11d
 80024bc:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80024be:	f240 2335 	movw	r3, #565	; 0x235
 80024c2:	62e3      	str	r3, [r4, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80024c4:	f7ff ffd8 	bl	8002478 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80024c8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hLtdcHandler.Instance = LTDC;

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80024cc:	4620      	mov	r0, r4
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80024ce:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80024d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80024d4:	6663      	str	r3, [r4, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80024dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80024e0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024e4:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80024e6:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80024e8:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024ea:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <BSP_LCD_Init+0xa4>)
 80024ee:	6023      	str	r3, [r4, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80024f0:	f002 fdd5 	bl	800509e <HAL_LTDC_GetState>
 80024f4:	4601      	mov	r1, r0
 80024f6:	b910      	cbnz	r0, 80024fe <BSP_LCD_Init+0x6a>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff ff19 	bl	8002330 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80024fe:	480d      	ldr	r0, [pc, #52]	; (8002534 <BSP_LCD_Init+0xa0>)
 8002500:	f002 fd30 	bl	8004f64 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002504:	2201      	movs	r2, #1
 8002506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800250a:	480c      	ldr	r0, [pc, #48]	; (800253c <BSP_LCD_Init+0xa8>)
 800250c:	f002 f988 	bl	8004820 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002510:	2201      	movs	r2, #1
 8002512:	2108      	movs	r1, #8
 8002514:	480a      	ldr	r0, [pc, #40]	; (8002540 <BSP_LCD_Init+0xac>)
 8002516:	f002 f983 	bl	8004820 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800251a:	f000 f923 	bl	8002764 <BSP_SDRAM_Init>
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <BSP_LCD_Init+0xb0>)
 8002520:	210c      	movs	r1, #12
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
  
  return LCD_OK;
}
 8002522:	2000      	movs	r0, #0
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <BSP_LCD_Init+0xb4>)
 8002528:	fb01 3302 	mla	r3, r1, r2, r3
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <BSP_LCD_Init+0xb8>)
 800252e:	609a      	str	r2, [r3, #8]
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
  
  return LCD_OK;
}
 8002530:	bd10      	pop	{r4, pc}
 8002532:	bf00      	nop
 8002534:	2004300c 	.word	0x2004300c
 8002538:	40016800 	.word	0x40016800
 800253c:	40022000 	.word	0x40022000
 8002540:	40022800 	.word	0x40022800
 8002544:	2001457c 	.word	0x2001457c
 8002548:	20014580 	.word	0x20014580
 800254c:	20010038 	.word	0x20010038

08002550 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002554:	4c22      	ldr	r4, [pc, #136]	; (80025e0 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002556:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002558:	4d22      	ldr	r5, [pc, #136]	; (80025e4 <BSP_SDRAM_Initialization_sequence+0x94>)
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 800255a:	f04f 0800 	mov.w	r8, #0
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800255e:	2710      	movs	r7, #16
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002560:	4621      	mov	r1, r4
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002562:	4681      	mov	r9, r0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002568:	4628      	mov	r0, r5
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 800256a:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 800256e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8002570:	f8c4 800c 	str.w	r8, [r4, #12]
{
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002574:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002578:	f003 ff68 	bl	800644c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800257c:	4630      	mov	r0, r6
 800257e:	f001 f825 	bl	80035cc <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002582:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002584:	4621      	mov	r1, r4
 8002586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800258a:	4628      	mov	r0, r5
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 800258c:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800258e:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002592:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002596:	f003 ff59 	bl	800644c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800259a:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800259c:	4621      	mov	r1, r4
 800259e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a2:	4628      	mov	r0, r5
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80025a4:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80025a8:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 80025ac:	2308      	movs	r3, #8
 80025ae:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80025b0:	f003 ff4c 	bl	800644c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80025b4:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80025b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025bc:	4621      	mov	r1, r4
 80025be:	4628      	mov	r0, r5

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80025c0:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80025c2:	2304      	movs	r3, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 80025c4:	60a6      	str	r6, [r4, #8]
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80025c6:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
 80025ca:	9b01      	ldr	r3, [sp, #4]
 80025cc:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80025ce:	f003 ff3d 	bl	800644c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80025d2:	4649      	mov	r1, r9
 80025d4:	4628      	mov	r0, r5
 80025d6:	f003 ff50 	bl	800647a <HAL_SDRAM_ProgramRefreshRate>
}
 80025da:	b003      	add	sp, #12
 80025dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025e0:	200145d8 	.word	0x200145d8
 80025e4:	200430b4 	.word	0x200430b4

080025e8 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025e8:	4b55      	ldr	r3, [pc, #340]	; (8002740 <BSP_SDRAM_MspInit+0x158>)
 80025ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ec:	f042 0201 	orr.w	r2, r2, #1
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80025f0:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80025f4:	b08e      	sub	sp, #56	; 0x38
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80025f8:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80025fa:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80025fc:	4851      	ldr	r0, [pc, #324]	; (8002744 <BSP_SDRAM_MspInit+0x15c>)
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025fe:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002602:	2500      	movs	r5, #0
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800260e:	631a      	str	r2, [r3, #48]	; 0x30
 8002610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002612:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002616:	9202      	str	r2, [sp, #8]
 8002618:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261c:	f042 0204 	orr.w	r2, r2, #4
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
 8002622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002624:	f002 0204 	and.w	r2, r2, #4
 8002628:	9203      	str	r2, [sp, #12]
 800262a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800262c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
 8002634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002636:	f002 0208 	and.w	r2, r2, #8
 800263a:	9204      	str	r2, [sp, #16]
 800263c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	f042 0210 	orr.w	r2, r2, #16
 8002644:	631a      	str	r2, [r3, #48]	; 0x30
 8002646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002648:	f002 0210 	and.w	r2, r2, #16
 800264c:	9205      	str	r2, [sp, #20]
 800264e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002652:	f042 0220 	orr.w	r2, r2, #32
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
 8002658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265a:	f002 0220 	and.w	r2, r2, #32
 800265e:	9206      	str	r2, [sp, #24]
 8002660:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
 800266a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002670:	9207      	str	r2, [sp, #28]
 8002672:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800267c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002680:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	9308      	str	r3, [sp, #32]
 8002688:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800268e:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002690:	230c      	movs	r3, #12
 8002692:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002694:	2308      	movs	r3, #8
 8002696:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800269a:	4621      	mov	r1, r4
 800269c:	f001 ff2e 	bl	80044fc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80026a0:	f24c 7303 	movw	r3, #50947	; 0xc703
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80026a4:	4621      	mov	r1, r4
 80026a6:	4828      	ldr	r0, [pc, #160]	; (8002748 <BSP_SDRAM_MspInit+0x160>)
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80026a8:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80026aa:	f001 ff27 	bl	80044fc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80026ae:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80026b2:	4621      	mov	r1, r4
 80026b4:	4825      	ldr	r0, [pc, #148]	; (800274c <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80026b6:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80026b8:	f001 ff20 	bl	80044fc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80026bc:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80026c0:	4621      	mov	r1, r4
 80026c2:	4823      	ldr	r0, [pc, #140]	; (8002750 <BSP_SDRAM_MspInit+0x168>)
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80026c4:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80026c6:	f001 ff19 	bl	80044fc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80026ca:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80026ce:	4621      	mov	r1, r4
 80026d0:	4820      	ldr	r0, [pc, #128]	; (8002754 <BSP_SDRAM_MspInit+0x16c>)
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80026d2:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80026d4:	f001 ff12 	bl	80044fc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80026d8:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80026da:	4621      	mov	r1, r4
 80026dc:	481e      	ldr	r0, [pc, #120]	; (8002758 <BSP_SDRAM_MspInit+0x170>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80026de:	4c1f      	ldr	r4, [pc, #124]	; (800275c <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80026e0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80026e2:	f001 ff0b 	bl	80044fc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80026e6:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80026e8:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80026ea:	4620      	mov	r0, r4
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80026ec:	6334      	str	r4, [r6, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80026ee:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80026f0:	f44f 7300 	mov.w	r3, #512	; 0x200
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80026f4:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80026f6:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80026f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
 80026fc:	61e5      	str	r5, [r4, #28]
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80026fe:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002704:	6265      	str	r5, [r4, #36]	; 0x24
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002706:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800270c:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800270e:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002714:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002716:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002718:	2303      	movs	r3, #3
 800271a:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <BSP_SDRAM_MspInit+0x178>)
 800271e:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002720:	f001 f866 	bl	80037f0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002724:	4620      	mov	r0, r4
 8002726:	f000 ffed 	bl	8003704 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800272a:	462a      	mov	r2, r5
 800272c:	210f      	movs	r1, #15
 800272e:	2038      	movs	r0, #56	; 0x38
 8002730:	f000 ff6c 	bl	800360c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002734:	2038      	movs	r0, #56	; 0x38
 8002736:	f000 ffa1 	bl	800367c <HAL_NVIC_EnableIRQ>
}
 800273a:	b00e      	add	sp, #56	; 0x38
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40020800 	.word	0x40020800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40021000 	.word	0x40021000
 8002750:	40021400 	.word	0x40021400
 8002754:	40021800 	.word	0x40021800
 8002758:	40021c00 	.word	0x40021c00
 800275c:	20014604 	.word	0x20014604
 8002760:	40026410 	.word	0x40026410

08002764 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002764:	b538      	push	{r3, r4, r5, lr}
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002766:	4c1a      	ldr	r4, [pc, #104]	; (80027d0 <BSP_SDRAM_Init+0x6c>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
 8002768:	2107      	movs	r1, #7
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <BSP_SDRAM_Init+0x70>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 800276c:	2204      	movs	r2, #4
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800276e:	4d1a      	ldr	r5, [pc, #104]	; (80027d8 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002770:	4620      	mov	r0, r4
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002772:	6023      	str	r3, [r4, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002774:	2302      	movs	r3, #2
  Timing.ExitSelfRefreshDelay = 7;
 8002776:	6069      	str	r1, [r5, #4]
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002778:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
 800277a:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 800277c:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 800277e:	61ab      	str	r3, [r5, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002780:	2310      	movs	r3, #16
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
 8002782:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002784:	2100      	movs	r1, #0
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002786:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002788:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800278a:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800278c:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800278e:	f44f 7380 	mov.w	r3, #256	; 0x100
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002792:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002794:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002796:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800279a:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800279c:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800279e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027a2:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80027a4:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80027a6:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 80027a8:	60aa      	str	r2, [r5, #8]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80027aa:	f7ff ff1d 	bl	80025e8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f003 fe2b 	bl	800640c <HAL_SDRAM_Init>
 80027b6:	4c09      	ldr	r4, [pc, #36]	; (80027dc <BSP_SDRAM_Init+0x78>)
 80027b8:	b110      	cbz	r0, 80027c0 <BSP_SDRAM_Init+0x5c>
  {
    sdramstatus = SDRAM_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	7023      	strb	r3, [r4, #0]
 80027be:	e000      	b.n	80027c2 <BSP_SDRAM_Init+0x5e>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80027c0:	7020      	strb	r0, [r4, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80027c2:	f240 6003 	movw	r0, #1539	; 0x603
 80027c6:	f7ff fec3 	bl	8002550 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
}
 80027ca:	7820      	ldrb	r0, [r4, #0]
 80027cc:	bd38      	pop	{r3, r4, r5, pc}
 80027ce:	bf00      	nop
 80027d0:	200430b4 	.word	0x200430b4
 80027d4:	a0000140 	.word	0xa0000140
 80027d8:	200145e8 	.word	0x200145e8
 80027dc:	20010040 	.word	0x20010040

080027e0 <arm_sqrt_f32>:
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in >= 0.0f)
 80027e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 80027e4:	b510      	push	{r4, lr}
    if(in >= 0.0f)
 80027e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 80027ea:	4604      	mov	r4, r0
    if(in >= 0.0f)
 80027ec:	db05      	blt.n	80027fa <arm_sqrt_f32+0x1a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80027ee:	f014 fbe5 	bl	8016fbc <sqrtf>
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80027f2:	2000      	movs	r0, #0
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80027f4:	ed84 0a00 	vstr	s0, [r4]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80027f8:	bd10      	pop	{r4, pc}
    }
    else
    {
      *pOut = 0.0f;
 80027fa:	2300      	movs	r3, #0
 80027fc:	6003      	str	r3, [r0, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80027fe:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }
 8002802:	bd10      	pop	{r4, pc}

08002804 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8002804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8002808:	ea4f 0992 	mov.w	r9, r2, lsr #2

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 800280c:	4606      	mov	r6, r0
 800280e:	460d      	mov	r5, r1
 8002810:	4617      	mov	r7, r2
 8002812:	4604      	mov	r4, r0

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8002814:	46ca      	mov	sl, r9

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8002816:	4688      	mov	r8, r1
 8002818:	3420      	adds	r4, #32
 800281a:	f1ba 0f00 	cmp.w	sl, #0
 800281e:	d034      	beq.n	800288a <arm_cmplx_mag_f32+0x86>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
 8002820:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002824:	4640      	mov	r0, r8
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8002826:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800282a:	f108 0b0c 	add.w	fp, r8, #12
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800282e:	ee20 0a00 	vmul.f32	s0, s0, s0
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);


    /* Decrement the loop counter */
    blkCnt--;
 8002832:	f10a 3aff 	add.w	sl, sl, #4294967295

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002836:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800283a:	f7ff ffd1 	bl	80027e0 <arm_sqrt_f32>

    realIn = *pSrc++;
    imagIn = *pSrc++;
 800283e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    realIn = *pSrc++;
 8002842:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002846:	f108 0004 	add.w	r0, r8, #4
 800284a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800284e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002852:	f7ff ffc5 	bl	80027e0 <arm_sqrt_f32>

    realIn = *pSrc++;
    imagIn = *pSrc++;
 8002856:	ed14 0a03 	vldr	s0, [r4, #-12]

    realIn = *pSrc++;
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    realIn = *pSrc++;
 800285a:	ed54 7a04 	vldr	s15, [r4, #-16]
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800285e:	f108 0008 	add.w	r0, r8, #8
 8002862:	ee20 0a00 	vmul.f32	s0, s0, s0

    realIn = *pSrc++;
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002866:	f108 0810 	add.w	r8, r8, #16
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    realIn = *pSrc++;
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800286a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800286e:	f7ff ffb7 	bl	80027e0 <arm_sqrt_f32>

    realIn = *pSrc++;
    imagIn = *pSrc++;
 8002872:	ed14 0a01 	vldr	s0, [r4, #-4]

    realIn = *pSrc++;
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    realIn = *pSrc++;
 8002876:	ed54 7a02 	vldr	s15, [r4, #-8]
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800287a:	4658      	mov	r0, fp
 800287c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002880:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002884:	f7ff ffac 	bl	80027e0 <arm_sqrt_f32>
 8002888:	e7c6      	b.n	8002818 <arm_cmplx_mag_f32+0x14>
 800288a:	eb05 1009 	add.w	r0, r5, r9, lsl #4
 800288e:	f007 0703 	and.w	r7, r7, #3
 8002892:	eb06 1449 	add.w	r4, r6, r9, lsl #5
 8002896:	eb00 0787 	add.w	r7, r0, r7, lsl #2

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;

  while(blkCnt > 0u)
 800289a:	42b8      	cmp	r0, r7
 800289c:	f104 0408 	add.w	r4, r4, #8
 80028a0:	d00c      	beq.n	80028bc <arm_cmplx_mag_f32+0xb8>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
 80028a2:	ed14 0a01 	vldr	s0, [r4, #-4]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80028a6:	1d05      	adds	r5, r0, #4
  blkCnt = numSamples % 0x4u;

  while(blkCnt > 0u)
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80028a8:	ed54 7a02 	vldr	s15, [r4, #-8]
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80028ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 80028b0:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80028b4:	f7ff ff94 	bl	80027e0 <arm_sqrt_f32>
 80028b8:	4628      	mov	r0, r5
 80028ba:	e7ee      	b.n	800289a <arm_cmplx_mag_f32+0x96>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80028bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080028c0 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80028c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c4:	4681      	mov	r9, r0
 80028c6:	4608      	mov	r0, r1
    uint32_t    L  = S->fftLen;
 80028c8:	f8b9 7000 	ldrh.w	r7, [r9]
 80028cc:	4606      	mov	r6, r0
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80028ce:	f8d9 2004 	ldr.w	r2, [r9, #4]

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
    uint32_t    L  = S->fftLen;
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 80028d2:	eb01 0887 	add.w	r8, r1, r7, lsl #2

    pCol1 = p1;
    pCol2 = p2;

    //    Define new length
    L >>= 1;
 80028d6:	0879      	lsrs	r1, r7, #1
void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
    uint32_t    L  = S->fftLen;
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80028d8:	4696      	mov	lr, r2
 80028da:	08ff      	lsrs	r7, r7, #3
 80028dc:	4644      	mov	r4, r8
    pCol2 = p2;

    //    Define new length
    L >>= 1;
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80028de:	008b      	lsls	r3, r1, #2
 80028e0:	eb02 1707 	add.w	r7, r2, r7, lsl #4
 80028e4:	18c5      	adds	r5, r0, r3
 80028e6:	4443      	add	r3, r8
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80028e8:	ed2d 8b02 	vpush	{d8}
    //    Initialize mid pointers
    pMid1 = p1 + L;
    pMid2 = p2 + L;

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 80028ec:	45be      	cmp	lr, r7
 80028ee:	f106 0610 	add.w	r6, r6, #16
 80028f2:	f105 0510 	add.w	r5, r5, #16
 80028f6:	f103 0310 	add.w	r3, r3, #16
 80028fa:	f104 0410 	add.w	r4, r4, #16
 80028fe:	f000 808b 	beq.w	8002a18 <arm_cfft_radix8by2_f32+0x158>
        t1[0] = p1[0];
        t1[1] = p1[1];
        t1[2] = p1[2];
        t1[3] = p1[3];

        t2[0] = p2[0];
 8002902:	ed14 0a04 	vldr	s0, [r4, #-16]
 8002906:	f10e 0e10 	add.w	lr, lr, #16
    pMid2 = p2 + L;

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
    {
        t1[0] = p1[0];
 800290a:	ed16 6a04 	vldr	s12, [r6, #-16]
        t1[1] = p1[1];
        t1[2] = p1[2];
        t1[3] = p1[3];

        t2[0] = p2[0];
        t2[1] = p2[1];
 800290e:	ed54 0a03 	vldr	s1, [r4, #-12]
        t4[0] = pMid2[0];
        t4[1] = pMid2[1];
        t4[2] = pMid2[2];
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
 8002912:	ee36 8a00 	vadd.f32	s16, s12, s0

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
    {
        t1[0] = p1[0];
        t1[1] = p1[1];
 8002916:	ed16 4a03 	vldr	s8, [r6, #-12]
        t3[0] = pMid1[0];
        t3[1] = pMid1[1];
        t3[2] = pMid1[2];
        t3[3] = pMid1[3];

        t4[0] = pMid2[0];
 800291a:	ed53 6a04 	vldr	s13, [r3, #-16]
        *p1++ = t1[0] + t2[0];
        *p1++ = t1[1] + t2[1];
        *p1++ = t1[2] + t2[2];
        *p1++ = t1[3] + t2[3];    // col 1

        t2[0] = t1[0] - t2[0];
 800291e:	ee36 6a40 	vsub.f32	s12, s12, s0
        t3[1] = pMid1[1];
        t3[2] = pMid1[2];
        t3[3] = pMid1[3];

        t4[0] = pMid2[0];
        t4[1] = pMid2[1];
 8002922:	ed53 4a03 	vldr	s9, [r3, #-12]
        t1[2] = p1[2];
        t1[3] = p1[3];

        t2[0] = p2[0];
        t2[1] = p2[1];
        t2[2] = p2[2];
 8002926:	ed14 7a02 	vldr	s14, [r4, #-8]
        t2[3] = p2[3];
 800292a:	ed14 5a01 	vldr	s10, [r4, #-4]

        t3[0] = pMid1[0];
        t3[1] = pMid1[1];
 800292e:	ed55 2a03 	vldr	s5, [r5, #-12]
        t3[2] = pMid1[2];
 8002932:	ed15 3a02 	vldr	s6, [r5, #-8]
        t3[3] = pMid1[3];
 8002936:	ed55 3a01 	vldr	s7, [r5, #-4]

        t4[0] = pMid2[0];
        t4[1] = pMid2[1];
        t4[2] = pMid2[2];
 800293a:	ed53 7a02 	vldr	s15, [r3, #-8]
        t4[3] = pMid2[3];
 800293e:	ed53 5a01 	vldr	s11, [r3, #-4]
        t2[0] = p2[0];
        t2[1] = p2[1];
        t2[2] = p2[2];
        t2[3] = p2[3];

        t3[0] = pMid1[0];
 8002942:	ed15 2a04 	vldr	s4, [r5, #-16]
        t4[0] = pMid2[0];
        t4[1] = pMid2[1];
        t4[2] = pMid2[2];
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
 8002946:	ed06 8a04 	vstr	s16, [r6, #-16]
        *p1++ = t1[1] + t2[1];
 800294a:	ee34 8a20 	vadd.f32	s16, s8, s1
    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
    {
        t1[0] = p1[0];
        t1[1] = p1[1];
        t1[2] = p1[2];
 800294e:	ed16 1a02 	vldr	s2, [r6, #-8]
        *p1++ = t1[1] + t2[1];
        *p1++ = t1[2] + t2[2];
        *p1++ = t1[3] + t2[3];    // col 1

        t2[0] = t1[0] - t2[0];
        t2[1] = t1[1] - t2[1];
 8002952:	ee34 4a60 	vsub.f32	s8, s8, s1
    for ( l = L >> 2; l > 0; l-- ) 
    {
        t1[0] = p1[0];
        t1[1] = p1[1];
        t1[2] = p1[2];
        t1[3] = p1[3];
 8002956:	ed56 1a01 	vldr	s3, [r6, #-4]
        t4[1] = pMid2[1];
        t4[2] = pMid2[2];
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
        *p1++ = t1[1] + t2[1];
 800295a:	ed06 8a03 	vstr	s16, [r6, #-12]
        *p1++ = t1[2] + t2[2];
 800295e:	ee31 8a07 	vadd.f32	s16, s2, s14
        *p1++ = t1[3] + t2[3];    // col 1

        t2[0] = t1[0] - t2[0];
        t2[1] = t1[1] - t2[1];
        t2[2] = t1[2] - t2[2];
 8002962:	ee31 7a47 	vsub.f32	s14, s2, s14
        t4[2] = pMid2[2];
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
        *p1++ = t1[1] + t2[1];
        *p1++ = t1[2] + t2[2];
 8002966:	ed06 8a02 	vstr	s16, [r6, #-8]
        *p1++ = t1[3] + t2[3];    // col 1
 800296a:	ee31 8a85 	vadd.f32	s16, s3, s10

        t2[0] = t1[0] - t2[0];
        t2[1] = t1[1] - t2[1];
        t2[2] = t1[2] - t2[2];
        t2[3] = t1[3] - t2[3];    // for col 2
 800296e:	ee31 5ac5 	vsub.f32	s10, s3, s10

        *pMid1++ = t3[0] + t4[0];
 8002972:	ee72 1a26 	vadd.f32	s3, s4, s13
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
        *p1++ = t1[1] + t2[1];
        *p1++ = t1[2] + t2[2];
        *p1++ = t1[3] + t2[3];    // col 1
 8002976:	ed06 8a01 	vstr	s16, [r6, #-4]
        *pMid1++ = t3[0] + t4[0];
        *pMid1++ = t3[1] + t4[1];
        *pMid1++ = t3[2] + t4[2];
        *pMid1++ = t3[3] + t4[3]; // col 1

        t4[0] = t4[0] - t3[0];
 800297a:	ee76 6ac2 	vsub.f32	s13, s13, s4
        t2[0] = t1[0] - t2[0];
        t2[1] = t1[1] - t2[1];
        t2[2] = t1[2] - t2[2];
        t2[3] = t1[3] - t2[3];    // for col 2

        *pMid1++ = t3[0] + t4[0];
 800297e:	ed45 1a04 	vstr	s3, [r5, #-16]
        *pMid1++ = t3[1] + t4[1];
 8002982:	ee72 1aa4 	vadd.f32	s3, s5, s9
        *pMid1++ = t3[2] + t4[2];
        *pMid1++ = t3[3] + t4[3]; // col 1

        t4[0] = t4[0] - t3[0];
        t4[1] = t4[1] - t3[1];
 8002986:	ee74 4ae2 	vsub.f32	s9, s9, s5
        t2[1] = t1[1] - t2[1];
        t2[2] = t1[2] - t2[2];
        t2[3] = t1[3] - t2[3];    // for col 2

        *pMid1++ = t3[0] + t4[0];
        *pMid1++ = t3[1] + t4[1];
 800298a:	ed45 1a03 	vstr	s3, [r5, #-12]
        *pMid1++ = t3[2] + t4[2];
 800298e:	ee73 1a27 	vadd.f32	s3, s6, s15
        *pMid1++ = t3[3] + t4[3]; // col 1

        t4[0] = t4[0] - t3[0];
        t4[1] = t4[1] - t3[1];
        t4[2] = t4[2] - t3[2];
 8002992:	ee77 7ac3 	vsub.f32	s15, s15, s6
        t2[2] = t1[2] - t2[2];
        t2[3] = t1[3] - t2[3];    // for col 2

        *pMid1++ = t3[0] + t4[0];
        *pMid1++ = t3[1] + t4[1];
        *pMid1++ = t3[2] + t4[2];
 8002996:	ed45 1a02 	vstr	s3, [r5, #-8]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800299a:	ee73 1aa5 	vadd.f32	s3, s7, s11

        t4[0] = t4[0] - t3[0];
        t4[1] = t4[1] - t3[1];
        t4[2] = t4[2] - t3[2];
        t4[3] = t4[3] - t3[3];    // for col 2
 800299e:	ee75 5ae3 	vsub.f32	s11, s11, s7
        t2[3] = t1[3] - t2[3];    // for col 2

        *pMid1++ = t3[0] + t4[0];
        *pMid1++ = t3[1] + t4[1];
        *pMid1++ = t3[2] + t4[2];
        *pMid1++ = t3[3] + t4[3]; // col 1
 80029a2:	ed45 1a01 	vstr	s3, [r5, #-4]
        t4[1] = t4[1] - t3[1];
        t4[2] = t4[2] - t3[2];
        t4[3] = t4[3] - t3[3];    // for col 2

        twR = *tw++;
        twI = *tw++;
 80029a6:	ed5e 3a03 	vldr	s7, [lr, #-12]
        t4[0] = t4[0] - t3[0];
        t4[1] = t4[1] - t3[1];
        t4[2] = t4[2] - t3[2];
        t4[3] = t4[3] - t3[3];    // for col 2

        twR = *tw++;
 80029aa:	ed1e 3a04 	vldr	s6, [lr, #-16]
        m1 = t2[1] * twI;
        m2 = t2[1] * twR;
        m3 = t2[0] * twI;
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80029ae:	ee64 2a23 	vmul.f32	s5, s8, s7
 80029b2:	eee6 2a03 	vfma.f32	s5, s12, s6
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80029b6:	ee23 6ac6 	vnmul.f32	s12, s7, s12
 80029ba:	eea4 6a03 	vfma.f32	s12, s8, s6
        m1 = t2[1] * twI;
        m2 = t2[1] * twR;
        m3 = t2[0] * twI;
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80029be:	ed44 2a04 	vstr	s5, [r4, #-16]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80029c2:	ed04 6a03 	vstr	s12, [r4, #-12]
        m0 = t4[0] * twI;
        m1 = t4[1] * twR;
        m2 = t4[1] * twI;
        m3 = t4[0] * twR;
        
        *pMid2++ = m0 - m1;
 80029c6:	ee23 6a64 	vnmul.f32	s12, s6, s9
 80029ca:	eea6 6aa3 	vfma.f32	s12, s13, s7
        *pMid2++ = m2 + m3;
 80029ce:	ee66 6a83 	vmul.f32	s13, s13, s6
 80029d2:	eee4 6aa3 	vfma.f32	s13, s9, s7
        m0 = t4[0] * twI;
        m1 = t4[1] * twR;
        m2 = t4[1] * twI;
        m3 = t4[0] * twR;
        
        *pMid2++ = m0 - m1;
 80029d6:	ed03 6a04 	vstr	s12, [r3, #-16]
        *pMid2++ = m2 + m3;
 80029da:	ed43 6a03 	vstr	s13, [r3, #-12]

        twR = *tw++;
 80029de:	ed1e 6a02 	vldr	s12, [lr, #-8]
        twI = *tw++;
 80029e2:	ed5e 6a01 	vldr	s13, [lr, #-4]
        m0 = t2[2] * twR;
        m1 = t2[3] * twI;
        m2 = t2[3] * twR;
        m3 = t2[2] * twI;
        
        *p2++ = m0 + m1;
 80029e6:	ee65 4a26 	vmul.f32	s9, s10, s13
 80029ea:	eee7 4a06 	vfma.f32	s9, s14, s12
        *p2++ = m2 - m3;
 80029ee:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 80029f2:	eea5 7a06 	vfma.f32	s14, s10, s12
        m0 = t2[2] * twR;
        m1 = t2[3] * twI;
        m2 = t2[3] * twR;
        m3 = t2[2] * twI;
        
        *p2++ = m0 + m1;
 80029f6:	ed44 4a02 	vstr	s9, [r4, #-8]
        *p2++ = m2 - m3;
 80029fa:	ed04 7a01 	vstr	s14, [r4, #-4]
        m0 = t4[2] * twI;
        m1 = t4[3] * twR;
        m2 = t4[3] * twI;
        m3 = t4[2] * twR;
        
        *pMid2++ = m0 - m1;
 80029fe:	ee26 7a65 	vnmul.f32	s14, s12, s11
 8002a02:	eea7 7aa6 	vfma.f32	s14, s15, s13
        *pMid2++ = m2 + m3;
 8002a06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a0a:	eee5 7aa6 	vfma.f32	s15, s11, s13
        m0 = t4[2] * twI;
        m1 = t4[3] * twR;
        m2 = t4[3] * twI;
        m3 = t4[2] * twR;
        
        *pMid2++ = m0 - m1;
 8002a0e:	ed03 7a02 	vstr	s14, [r3, #-8]
        *pMid2++ = m2 + m3;
 8002a12:	ed43 7a01 	vstr	s15, [r3, #-4]
 8002a16:	e769      	b.n	80028ec <arm_cfft_radix8by2_f32+0x2c>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8002a18:	b28c      	uxth	r4, r1
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	f000 fa9d 	bl	8002f5c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8002a22:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002a26:	4621      	mov	r1, r4
 8002a28:	4640      	mov	r0, r8
 8002a2a:	2302      	movs	r3, #2
}
 8002a2c:	ecbd 8b02 	vpop	{d8}
 8002a30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8002a34:	f000 ba92 	b.w	8002f5c <arm_radix8_butterfly_f32>

08002a38 <arm_cfft_radix8by4_f32>:
}

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
    uint32_t    L  = S->fftLen >> 1;
 8002a38:	8802      	ldrh	r2, [r0, #0]
 8002a3a:	0852      	lsrs	r2, r2, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8002a3c:	0093      	lsls	r3, r2, #2
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;

    L >>= 1;
 8002a3e:	0852      	lsrs	r2, r2, #1
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
}

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	ed2d 8b04 	vpush	{d8-d9}
 8002a48:	b08f      	sub	sp, #60	; 0x3c
    uint32_t    L  = S->fftLen >> 1;
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8002a4a:	18cc      	adds	r4, r1, r3
    pEnd1 = p2 - 1;     // points to imaginary values by default
    pEnd2 = p3 - 1;
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8002a4c:	f8d0 b004 	ldr.w	fp, [r0, #4]
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
}

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8002a50:	9101      	str	r1, [sp, #4]
    uint32_t    L  = S->fftLen >> 1;
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
    float32_t * p3 = p2 + L;
 8002a52:	18e6      	adds	r6, r4, r3
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;

    L >>= 1;
 8002a54:	9208      	str	r2, [sp, #32]
 8002a56:	f1a4 0804 	sub.w	r8, r4, #4
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8002a5a:	9a01      	ldr	r2, [sp, #4]
    uint32_t    L  = S->fftLen >> 1;
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
    float32_t * p3 = p2 + L;
    float32_t * p4 = p3 + L;
 8002a5c:	18f5      	adds	r5, r6, r3
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8002a5e:	ed96 7a00 	vldr	s14, [r6]
 8002a62:	f1a6 0e04 	sub.w	lr, r6, #4
 8002a66:	edd2 7a00 	vldr	s15, [r2]
 8002a6a:	1f2f      	subs	r7, r5, #4
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 8002a6c:	edd6 5a01 	vldr	s11, [r6, #4]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8002a70:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002a74:	edd4 4a00 	vldr	s9, [r4]
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
    p1sp3_0 = p1[0] - p3[0];
 8002a78:	ee37 7ac7 	vsub.f32	s14, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 8002a7c:	edd2 7a01 	vldr	s15, [r2, #4]
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002a80:	ed95 5a00 	vldr	s10, [r5]
 8002a84:	443b      	add	r3, r7
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 8002a86:	ee77 6aa5 	vadd.f32	s13, s15, s11
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002a8a:	edd4 3a01 	vldr	s7, [r4, #4]

    // TOP
    p1ap3_0 = p1[0] + p3[0];
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];
 8002a8e:	ee77 7ae5 	vsub.f32	s15, s15, s11

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002a92:	ed95 4a01 	vldr	s8, [r5, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002a96:	ee76 5a24 	vadd.f32	s11, s12, s9
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
}

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8002a9a:	9003      	str	r0, [sp, #12]
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002a9c:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002aa0:	ee75 5a85 	vadd.f32	s11, s11, s10
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002aa4:	ee36 6a45 	vsub.f32	s12, s12, s10
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002aa8:	ee15 1a90 	vmov	r1, s11
 8002aac:	f842 1b08 	str.w	r1, [r2], #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002ab0:	edd4 5a01 	vldr	s11, [r4, #4]
 8002ab4:	ed95 3a01 	vldr	s6, [r5, #4]
 8002ab8:	ee76 5aa5 	vadd.f32	s11, s13, s11
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002abc:	9204      	str	r2, [sp, #16]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002abe:	9a01      	ldr	r2, [sp, #4]

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
 8002ac0:	ee76 6ae3 	vsub.f32	s13, s13, s7
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002ac4:	ee75 5a83 	vadd.f32	s11, s11, s6

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
 8002ac8:	ee76 6ac4 	vsub.f32	s13, s13, s8
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002acc:	edc2 5a01 	vstr	s11, [r2, #4]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002ad0:	ee77 5a23 	vadd.f32	s11, s14, s7
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002ad4:	ee37 7a63 	vsub.f32	s14, s14, s7
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002ad8:	4622      	mov	r2, r4
 8002ada:	ee75 5ac4 	vsub.f32	s11, s11, s8
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002ade:	ee37 7a04 	vadd.f32	s14, s14, s8
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002ae2:	ee15 1a90 	vmov	r1, s11
    *p2++ = t2[1];
 8002ae6:	ee77 5ae4 	vsub.f32	s11, s15, s9
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];
 8002aea:	ee77 7aa4 	vadd.f32	s15, s15, s9
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002aee:	f842 1b08 	str.w	r1, [r2], #8
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002af2:	ee16 1a10 	vmov	r1, s12
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
 8002af6:	ee75 5a85 	vadd.f32	s11, s11, s10
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002afa:	9209      	str	r2, [sp, #36]	; 0x24
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002afc:	4632      	mov	r2, r6
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];
 8002afe:	ee77 7ac5 	vsub.f32	s15, s15, s10
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
 8002b02:	edc4 5a01 	vstr	s11, [r4, #4]
    *p3++ = t3[0];
 8002b06:	f842 1b08 	str.w	r1, [r2], #8
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002b0a:	ee17 1a10 	vmov	r1, s14
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002b0e:	920a      	str	r2, [sp, #40]	; 0x28
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002b10:	462a      	mov	r2, r5

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
 8002b12:	edc6 6a01 	vstr	s13, [r6, #4]
    *p4++ = t4[0];
 8002b16:	f842 1b08 	str.w	r1, [r2], #8
 8002b1a:	920b      	str	r2, [sp, #44]	; 0x2c
    *p4++ = t4[1];

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;
 8002b1c:	f10b 0218 	add.w	r2, fp, #24
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];
 8002b20:	edc5 7a01 	vstr	s15, [r5, #4]

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;
 8002b24:	920c      	str	r2, [sp, #48]	; 0x30

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002b26:	9a08      	ldr	r2, [sp, #32]
 8002b28:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002b2c:	3a02      	subs	r2, #2
 8002b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b30:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8002b34:	0852      	lsrs	r2, r2, #1
 8002b36:	9205      	str	r2, [sp, #20]
 8002b38:	9805      	ldr	r0, [sp, #20]
 8002b3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b3c:	9007      	str	r0, [sp, #28]
    *p4++ = t4[0];
    *p4++ = t4[1];

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;
 8002b3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002b40:	9006      	str	r0, [sp, #24]

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002b42:	2000      	movs	r0, #0
 8002b44:	9002      	str	r0, [sp, #8]
 8002b46:	9802      	ldr	r0, [sp, #8]
 8002b48:	f109 0908 	add.w	r9, r9, #8
 8002b4c:	f1a8 0808 	sub.w	r8, r8, #8
 8002b50:	f1ae 0e08 	sub.w	lr, lr, #8
 8002b54:	3008      	adds	r0, #8
 8002b56:	3f08      	subs	r7, #8
 8002b58:	3b08      	subs	r3, #8
 8002b5a:	3108      	adds	r1, #8
 8002b5c:	9002      	str	r0, [sp, #8]
 8002b5e:	f10c 0c08 	add.w	ip, ip, #8
 8002b62:	9807      	ldr	r0, [sp, #28]
 8002b64:	3208      	adds	r2, #8
 8002b66:	2800      	cmp	r0, #0
 8002b68:	f000 80e4 	beq.w	8002d34 <arm_cfft_radix8by4_f32+0x2fc>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8002b6c:	ed59 7a02 	vldr	s15, [r9, #-8]
 8002b70:	ed5c 6a02 	vldr	s13, [ip, #-8]
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002b74:	ed51 3a02 	vldr	s7, [r1, #-8]
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8002b78:	ee77 4aa6 	vadd.f32	s9, s15, s13
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
 8002b7c:	ed19 7a01 	vldr	s14, [r9, #-4]

    for (l = (L - 2) >> 1; l > 0; l-- ) 
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
 8002b80:	ee77 6ae6 	vsub.f32	s13, s15, s13
        p1ap3_1 = p1[1] + p3[1];
 8002b84:	ed5c 7a01 	vldr	s15, [ip, #-4]
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002b88:	ed12 4a02 	vldr	s8, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
 8002b8c:	ee37 5a27 	vadd.f32	s10, s14, s15
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002b90:	ed12 3a01 	vldr	s6, [r2, #-4]
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
 8002b94:	ee37 7a67 	vsub.f32	s14, s14, s15
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002b98:	ed51 7a01 	vldr	s15, [r1, #-4]
        t2[1] = p1sp3_1 - p2[0] + p4[0];
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002b9c:	ee34 6ae3 	vsub.f32	s12, s9, s7
 8002ba0:	9802      	ldr	r0, [sp, #8]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002ba2:	ee74 4aa3 	vadd.f32	s9, s9, s7
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002ba6:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8002baa:	eb0b 0a00 	add.w	sl, fp, r0
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002bae:	ee77 1a63 	vsub.f32	s3, s14, s7
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002bb2:	ee75 2a67 	vsub.f32	s5, s10, s15
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002bb6:	ee37 7a23 	vadd.f32	s14, s14, s7
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002bba:	ee74 4a84 	vadd.f32	s9, s9, s8
        t2[1] = p1sp3_1 - p2[0] + p4[0];
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
        t3[1] = p1ap3_1 - p2[1] - p4[1];
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002bbe:	ee76 6ae7 	vsub.f32	s13, s13, s15
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002bc2:	ee75 5ac3 	vsub.f32	s11, s11, s6
        t3[1] = p1ap3_1 - p2[1] - p4[1];
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002bc6:	ed49 4a02 	vstr	s9, [r9, #-8]
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002bca:	ee72 2ac3 	vsub.f32	s5, s5, s6
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002bce:	ee76 7a83 	vadd.f32	s15, s13, s6
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002bd2:	ee37 3a44 	vsub.f32	s6, s14, s8
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002bd6:	ed11 7a01 	vldr	s14, [r1, #-4]
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002bda:	ee71 1a84 	vadd.f32	s3, s3, s8
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002bde:	ee35 5a07 	vadd.f32	s10, s10, s14
 8002be2:	ed12 7a01 	vldr	s14, [r2, #-4]
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002be6:	ee36 6a44 	vsub.f32	s12, s12, s8
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002bea:	ee35 5a07 	vadd.f32	s10, s10, s14
 8002bee:	ed09 5a01 	vstr	s10, [r9, #-4]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8002bf2:	ed97 4a02 	vldr	s8, [r7, #8]
 8002bf6:	edd8 6a02 	vldr	s13, [r8, #8]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002bfa:	ed98 7a01 	vldr	s14, [r8, #4]
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8002bfe:	ee76 4a84 	vadd.f32	s9, s13, s8
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002c02:	ed97 2a01 	vldr	s4, [r7, #4]
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002c06:	ed9e 8a02 	vldr	s16, [lr, #8]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8002c0a:	ee36 4ac4 	vsub.f32	s8, s13, s8
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002c0e:	ee37 5a02 	vadd.f32	s10, s14, s4
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002c12:	edd3 0a02 	vldr	s1, [r3, #8]
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8002c16:	ee37 2a42 	vsub.f32	s4, s14, s4
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002c1a:	edd3 3a01 	vldr	s7, [r3, #4]
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8002c1e:	ee34 7ac8 	vsub.f32	s14, s9, s16
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002c22:	edde 8a01 	vldr	s17, [lr, #4]
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8002c26:	ee74 4a88 	vadd.f32	s9, s9, s16
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002c2a:	ee35 1a68 	vsub.f32	s2, s10, s17
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002c2e:	ee74 6a68 	vsub.f32	s13, s8, s17
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8002c32:	ee74 4aa0 	vadd.f32	s9, s9, s1
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002c36:	ee31 1a63 	vsub.f32	s2, s2, s7
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002c3a:	ee76 6aa3 	vadd.f32	s13, s13, s7
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8002c3e:	edc8 4a02 	vstr	s9, [r8, #8]
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002c42:	ee73 3ae8 	vsub.f32	s7, s7, s17
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002c46:	edde 4a01 	vldr	s9, [lr, #4]
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002c4a:	ee38 9a60 	vsub.f32	s18, s16, s1
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8002c4e:	ee37 7a60 	vsub.f32	s14, s14, s1
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002c52:	ee35 5a24 	vadd.f32	s10, s10, s9
 8002c56:	edd3 4a01 	vldr	s9, [r3, #4]
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002c5a:	ee33 4ac4 	vsub.f32	s8, s7, s8
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002c5e:	ee32 0a09 	vadd.f32	s0, s4, s18
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002c62:	ee35 5a24 	vadd.f32	s10, s10, s9
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8002c66:	ee39 2a42 	vsub.f32	s4, s18, s4
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002c6a:	ed88 5a01 	vstr	s10, [r8, #4]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
        twI = *tw2++;
 8002c6e:	ed9a 5a01 	vldr	s10, [sl, #4]
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8002c72:	edda 4a00 	vldr	s9, [sl]
 8002c76:	ea4f 0a40 	mov.w	sl, r0, lsl #1
        m0 = t2[0] * twR;
        m1 = t2[1] * twI;
        m2 = t2[1] * twR;
        m3 = t2[0] * twI;
        
        *p2++ = m0 + m1;
 8002c7a:	ee61 3a85 	vmul.f32	s7, s3, s10
 8002c7e:	eb0b 000a 	add.w	r0, fp, sl
 8002c82:	eee5 3aa4 	vfma.f32	s7, s11, s9
 8002c86:	900d      	str	r0, [sp, #52]	; 0x34
        *p2++ = m2 - m3;
 8002c88:	ee65 5a65 	vnmul.f32	s11, s10, s11
 8002c8c:	eee1 5aa4 	vfma.f32	s11, s3, s9
        m0 = t2[0] * twR;
        m1 = t2[1] * twI;
        m2 = t2[1] * twR;
        m3 = t2[0] * twI;
        
        *p2++ = m0 + m1;
 8002c90:	ed41 3a02 	vstr	s7, [r1, #-8]
        *p2++ = m2 - m3;
 8002c94:	ed41 5a01 	vstr	s11, [r1, #-4]
        m0 = t2[3] * twI;
        m1 = t2[2] * twR;
        m2 = t2[2] * twI;
        m3 = t2[3] * twR;
        
        *pEnd2-- = m0 - m1;
 8002c98:	ee64 5ac0 	vnmul.f32	s11, s9, s0
 8002c9c:	eee6 5a85 	vfma.f32	s11, s13, s10
        *pEnd2-- = m2 + m3;
 8002ca0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8002ca4:	eee0 6a05 	vfma.f32	s13, s0, s10
        m0 = t2[3] * twI;
        m1 = t2[2] * twR;
        m2 = t2[2] * twI;
        m3 = t2[3] * twR;
        
        *pEnd2-- = m0 - m1;
 8002ca8:	edce 5a02 	vstr	s11, [lr, #8]
        *pEnd2-- = m2 + m3;
 8002cac:	edce 6a01 	vstr	s13, [lr, #4]

        // COL 3
        twR = tw3[0];
 8002cb0:	edd0 5a00 	vldr	s11, [r0]
        twI = tw3[1];
 8002cb4:	edd0 6a01 	vldr	s13, [r0, #4]
        
        *pEnd3-- = m0 - m1;
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
 8002cb8:	9802      	ldr	r0, [sp, #8]
        m0 = t3[0] * twR;
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
 8002cba:	ee22 5aa6 	vmul.f32	s10, s5, s13
        
        *pEnd3-- = m0 - m1;
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
 8002cbe:	4482      	add	sl, r0
        twI = tw4[1];
 8002cc0:	9806      	ldr	r0, [sp, #24]
        m0 = t3[0] * twR;
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
 8002cc2:	eea6 5a25 	vfma.f32	s10, s12, s11
        
        *pEnd3-- = m0 - m1;
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
 8002cc6:	44da      	add	sl, fp
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
        *p3++ = m2 - m3;
 8002cc8:	ee26 6ac6 	vnmul.f32	s12, s13, s12
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
        twI = tw4[1];
        tw4 += twMod4;
 8002ccc:	3018      	adds	r0, #24
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
        *p3++ = m2 - m3;
 8002cce:	eea2 6aa5 	vfma.f32	s12, s5, s11
        m0 = t3[0] * twR;
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
 8002cd2:	ed0c 5a02 	vstr	s10, [ip, #-8]
        *p3++ = m2 - m3;
 8002cd6:	ed0c 6a01 	vstr	s12, [ip, #-4]
        m0 = -t3[3] * twR;
        m1 = t3[2] * twI;
        m2 = t3[2] * twR;
        m3 = t3[3] * twI;
        
        *pEnd3-- = m0 - m1;
 8002cda:	ee26 6ac1 	vnmul.f32	s12, s13, s2
        *pEnd3-- = m3 - m2;
 8002cde:	ee67 6a26 	vmul.f32	s13, s14, s13
        m0 = -t3[3] * twR;
        m1 = t3[2] * twI;
        m2 = t3[2] * twR;
        m3 = t3[3] * twI;
        
        *pEnd3-- = m0 - m1;
 8002ce2:	eea7 6a65 	vfms.f32	s12, s14, s11
        *pEnd3-- = m3 - m2;
 8002ce6:	eee1 6a65 	vfms.f32	s13, s2, s11
        m0 = -t3[3] * twR;
        m1 = t3[2] * twI;
        m2 = t3[2] * twR;
        m3 = t3[3] * twI;
        
        *pEnd3-- = m0 - m1;
 8002cea:	ed87 6a02 	vstr	s12, [r7, #8]
        *pEnd3-- = m3 - m2;
 8002cee:	edc7 6a01 	vstr	s13, [r7, #4]
        
        // COL 4
        twR = tw4[0];
        twI = tw4[1];
 8002cf2:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
        
        *pEnd3-- = m0 - m1;
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
 8002cf6:	ed9a 6a00 	vldr	s12, [sl]
        m0 = t4[0] * twR;
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
 8002cfa:	ee23 7a26 	vmul.f32	s14, s6, s13
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
        twI = tw4[1];
        tw4 += twMod4;
 8002cfe:	9006      	str	r0, [sp, #24]

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002d00:	9807      	ldr	r0, [sp, #28]
        m0 = t4[0] * twR;
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
 8002d02:	eea7 7a86 	vfma.f32	s14, s15, s12

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002d06:	3801      	subs	r0, #1
 8002d08:	9007      	str	r0, [sp, #28]
        m0 = t4[0] * twR;
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
 8002d0a:	ed02 7a02 	vstr	s14, [r2, #-8]
        *p4++ = m2 - m3;
 8002d0e:	ee26 7ae7 	vnmul.f32	s14, s13, s15
        m0 = t4[3] * twI;
        m1 = t4[2] * twR;
        m2 = t4[2] * twI;
        m3 = t4[3] * twR;
        
        *pEnd4-- = m0 - m1;
 8002d12:	ee66 7a42 	vnmul.f32	s15, s12, s4
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
        *p4++ = m2 - m3;
 8002d16:	eea3 7a06 	vfma.f32	s14, s6, s12
        m0 = t4[3] * twI;
        m1 = t4[2] * twR;
        m2 = t4[2] * twI;
        m3 = t4[3] * twR;
        
        *pEnd4-- = m0 - m1;
 8002d1a:	eee4 7a26 	vfma.f32	s15, s8, s13
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
        *p4++ = m2 - m3;
 8002d1e:	ed02 7a01 	vstr	s14, [r2, #-4]
        m0 = t4[3] * twI;
        m1 = t4[2] * twR;
        m2 = t4[2] * twI;
        m3 = t4[3] * twR;
        
        *pEnd4-- = m0 - m1;
 8002d22:	edc3 7a02 	vstr	s15, [r3, #8]
        *pEnd4-- = m2 + m3;
 8002d26:	ee64 7a06 	vmul.f32	s15, s8, s12
 8002d2a:	eee2 7a26 	vfma.f32	s15, s4, s13
 8002d2e:	edc3 7a01 	vstr	s15, [r3, #4]
 8002d32:	e708      	b.n	8002b46 <arm_cfft_radix8by4_f32+0x10e>
 8002d34:	9905      	ldr	r1, [sp, #20]
 8002d36:	9805      	ldr	r0, [sp, #20]
 8002d38:	eb0b 1701 	add.w	r7, fp, r1, lsl #4
 8002d3c:	9b05      	ldr	r3, [sp, #20]
 8002d3e:	4684      	mov	ip, r0
 8002d40:	2118      	movs	r1, #24
 8002d42:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	9a04      	ldr	r2, [sp, #16]
 8002d48:	fb01 010c 	mla	r1, r1, ip, r0
 8002d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d4e:	441a      	add	r2, r3
 8002d50:	f103 0e08 	add.w	lr, r3, #8
 8002d54:	4418      	add	r0, r3
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002d56:	edd2 7a00 	vldr	s15, [r2]
 8002d5a:	44de      	add	lr, fp
 8002d5c:	4684      	mov	ip, r0
 8002d5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d60:	4418      	add	r0, r3
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002d62:	eddc 2a00 	vldr	s5, [ip]
 8002d66:	4680      	mov	r8, r0
 8002d68:	980b      	ldr	r0, [sp, #44]	; 0x2c
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002d6a:	edd8 6a00 	vldr	s13, [r8]
 8002d6e:	4418      	add	r0, r3
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 8002d70:	ed98 7a01 	vldr	s14, [r8, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002d74:	2304      	movs	r3, #4
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002d76:	ee37 5aa6 	vadd.f32	s10, s15, s13
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002d7a:	ed90 2a01 	vldr	s4, [r0, #4]

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
    p1sp3_0 = p1[0] - p3[0];
 8002d7e:	ee77 6ae6 	vsub.f32	s13, s15, s13
    p1ap3_1 = p1[1] + p3[1];
 8002d82:	edd2 7a01 	vldr	s15, [r2, #4]
 8002d86:	ee77 5a87 	vadd.f32	s11, s15, s14
    p1sp3_1 = p1[1] - p3[1];
 8002d8a:	ee77 7ac7 	vsub.f32	s15, s15, s14

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002d8e:	ed9c 7a01 	vldr	s14, [ip, #4]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002d92:	ee35 4a62 	vsub.f32	s8, s10, s5
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002d96:	ee36 6a87 	vadd.f32	s12, s13, s14
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002d9a:	ee35 5a22 	vadd.f32	s10, s10, s5
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002d9e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002da2:	ee36 3a42 	vsub.f32	s6, s12, s4
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002da6:	ed90 6a00 	vldr	s12, [r0]
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002daa:	ee75 4ac7 	vsub.f32	s9, s11, s14
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002dae:	ee35 5a06 	vadd.f32	s10, s10, s12
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002db2:	ee36 7a82 	vadd.f32	s14, s13, s4
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002db6:	ee77 3ae2 	vsub.f32	s7, s15, s5
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002dba:	ed82 5a00 	vstr	s10, [r2]
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002dbe:	ee77 7aa2 	vadd.f32	s15, s15, s5
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002dc2:	eddc 6a01 	vldr	s13, [ip, #4]

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002dc6:	ee34 4a46 	vsub.f32	s8, s8, s12
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002dca:	ee73 3a86 	vadd.f32	s7, s7, s12
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002dce:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002dd2:	edd0 6a01 	vldr	s13, [r0, #4]
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002dd6:	ee77 7ac6 	vsub.f32	s15, s15, s12
    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002dda:	ee74 4ac2 	vsub.f32	s9, s9, s4
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002dde:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002de2:	edc2 5a01 	vstr	s11, [r2, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002de6:	465a      	mov	r2, fp
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // COL 2
    twR = tw2[0];
    twI = tw2[1];
 8002de8:	ed9e 6a01 	vldr	s12, [lr, #4]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // COL 2
    twR = tw2[0];
 8002dec:	edde 5a00 	vldr	s11, [lr]
    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 8002df0:	ee63 6a86 	vmul.f32	s13, s7, s12
    *p2++ = m2 - m3;
 8002df4:	ee26 6a43 	vnmul.f32	s12, s12, s6
    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 8002df8:	eee3 6a25 	vfma.f32	s13, s6, s11
    *p2++ = m2 - m3;
 8002dfc:	eea3 6aa5 	vfma.f32	s12, s7, s11
    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 8002e00:	edcc 6a00 	vstr	s13, [ip]
    *p2++ = m2 - m3;
 8002e04:	ed8c 6a01 	vstr	s12, [ip, #4]
    // COL 3
    twR = tw3[0];
    twI = tw3[1];
 8002e08:	edd7 6a05 	vldr	s13, [r7, #20]
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
    *p2++ = m2 - m3;
    // COL 3
    twR = tw3[0];
 8002e0c:	edd7 5a04 	vldr	s11, [r7, #16]
    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 8002e10:	ee24 6aa6 	vmul.f32	s12, s9, s13
    *p3++ = m2 - m3;
 8002e14:	ee66 6ac4 	vnmul.f32	s13, s13, s8
    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 8002e18:	eea4 6a25 	vfma.f32	s12, s8, s11
    *p3++ = m2 - m3;
 8002e1c:	eee4 6aa5 	vfma.f32	s13, s9, s11
    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 8002e20:	ed88 6a00 	vstr	s12, [r8]
    *p3++ = m2 - m3;
 8002e24:	edc8 6a01 	vstr	s13, [r8, #4]
    // COL 4
    twR = tw4[0];
    twI = tw4[1];
 8002e28:	edd1 6a01 	vldr	s13, [r1, #4]
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
    *p3++ = m2 - m3;
    // COL 4
    twR = tw4[0];
 8002e2c:	edd1 5a00 	vldr	s11, [r1]
    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;

    *p4++ = m0 + m1;
 8002e30:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002e34:	eea7 6a25 	vfma.f32	s12, s14, s11
    *p4++ = m2 - m3;
 8002e38:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8002e3c:	eea7 7aa5 	vfma.f32	s14, s15, s11
    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;

    *p4++ = m0 + m1;
 8002e40:	ed80 6a00 	vstr	s12, [r0]
    *p4++ = m2 - m3;
 8002e44:	ed80 7a01 	vstr	s14, [r0, #4]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002e48:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8002e4c:	9801      	ldr	r0, [sp, #4]
 8002e4e:	4639      	mov	r1, r7
 8002e50:	f000 f884 	bl	8002f5c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8002e54:	9a03      	ldr	r2, [sp, #12]
 8002e56:	4639      	mov	r1, r7
 8002e58:	4620      	mov	r0, r4
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	6852      	ldr	r2, [r2, #4]
 8002e5e:	f000 f87d 	bl	8002f5c <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8002e62:	9a03      	ldr	r2, [sp, #12]
 8002e64:	4639      	mov	r1, r7
 8002e66:	4630      	mov	r0, r6
 8002e68:	2304      	movs	r3, #4
 8002e6a:	6852      	ldr	r2, [r2, #4]
 8002e6c:	f000 f876 	bl	8002f5c <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8002e70:	9a03      	ldr	r2, [sp, #12]
 8002e72:	2304      	movs	r3, #4
 8002e74:	4639      	mov	r1, r7
 8002e76:	6852      	ldr	r2, [r2, #4]
 8002e78:	4628      	mov	r0, r5
}
 8002e7a:	b00f      	add	sp, #60	; 0x3c
 8002e7c:	ecbd 8b04 	vpop	{d8-d9}
 8002e80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8002e84:	f000 b86a 	b.w	8002f5c <arm_radix8_butterfly_f32>

08002e88 <arm_cfft_f32>:
    uint8_t bitReverseFlag)
{
    uint32_t  L = S->fftLen, l;
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8002e88:	2a01      	cmp	r2, #1
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8002e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8e:	4606      	mov	r6, r0
 8002e90:	460d      	mov	r5, r1
 8002e92:	4617      	mov	r7, r2
 8002e94:	4698      	mov	r8, r3
    uint32_t  L = S->fftLen, l;
 8002e96:	8804      	ldrh	r4, [r0, #0]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8002e98:	d01b      	beq.n	8002ed2 <arm_cfft_f32+0x4a>
            *pSrc = -*pSrc;
            pSrc += 2;
        }
    }

    switch (L) 
 8002e9a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8002e9e:	d02b      	beq.n	8002ef8 <arm_cfft_f32+0x70>
 8002ea0:	d809      	bhi.n	8002eb6 <arm_cfft_f32+0x2e>
 8002ea2:	2c20      	cmp	r4, #32
 8002ea4:	d028      	beq.n	8002ef8 <arm_cfft_f32+0x70>
 8002ea6:	d801      	bhi.n	8002eac <arm_cfft_f32+0x24>
 8002ea8:	2c10      	cmp	r4, #16
 8002eaa:	e002      	b.n	8002eb2 <arm_cfft_f32+0x2a>
 8002eac:	2c40      	cmp	r4, #64	; 0x40
 8002eae:	d028      	beq.n	8002f02 <arm_cfft_f32+0x7a>
 8002eb0:	2c80      	cmp	r4, #128	; 0x80
 8002eb2:	d01c      	beq.n	8002eee <arm_cfft_f32+0x66>
 8002eb4:	e02b      	b.n	8002f0e <arm_cfft_f32+0x86>
 8002eb6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002eba:	d018      	beq.n	8002eee <arm_cfft_f32+0x66>
 8002ebc:	d802      	bhi.n	8002ec4 <arm_cfft_f32+0x3c>
 8002ebe:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8002ec2:	e004      	b.n	8002ece <arm_cfft_f32+0x46>
 8002ec4:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8002ec8:	d016      	beq.n	8002ef8 <arm_cfft_f32+0x70>
 8002eca:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002ece:	d018      	beq.n	8002f02 <arm_cfft_f32+0x7a>
 8002ed0:	e01d      	b.n	8002f0e <arm_cfft_f32+0x86>
 8002ed2:	1d0b      	adds	r3, r1, #4

    if(ifftFlag == 1u)
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
        for(l=0; l<L; l++) 
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	42a2      	cmp	r2, r4
 8002ed8:	f103 0308 	add.w	r3, r3, #8
 8002edc:	d2dd      	bcs.n	8002e9a <arm_cfft_f32+0x12>
        {
            *pSrc = -*pSrc;
 8002ede:	ed53 7a02 	vldr	s15, [r3, #-8]

    if(ifftFlag == 1u)
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
        for(l=0; l<L; l++) 
 8002ee2:	3201      	adds	r2, #1
        {
            *pSrc = -*pSrc;
 8002ee4:	eef1 7a67 	vneg.f32	s15, s15
 8002ee8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002eec:	e7f3      	b.n	8002ed6 <arm_cfft_f32+0x4e>
    switch (L) 
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002eee:	4629      	mov	r1, r5
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f7ff fce5 	bl	80028c0 <arm_cfft_radix8by2_f32>
        break;
 8002ef6:	e00a      	b.n	8002f0e <arm_cfft_f32+0x86>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002ef8:	4629      	mov	r1, r5
 8002efa:	4630      	mov	r0, r6
 8002efc:	f7ff fd9c 	bl	8002a38 <arm_cfft_radix8by4_f32>
        break;
 8002f00:	e005      	b.n	8002f0e <arm_cfft_f32+0x86>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8002f02:	2301      	movs	r3, #1
 8002f04:	6872      	ldr	r2, [r6, #4]
 8002f06:	4621      	mov	r1, r4
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f000 f827 	bl	8002f5c <arm_radix8_butterfly_f32>
        break;
    }  

    if( bitReverseFlag )
 8002f0e:	f1b8 0f00 	cmp.w	r8, #0
 8002f12:	d004      	beq.n	8002f1e <arm_cfft_f32+0x96>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8002f14:	68b2      	ldr	r2, [r6, #8]
 8002f16:	4628      	mov	r0, r5
 8002f18:	89b1      	ldrh	r1, [r6, #12]
 8002f1a:	f7fd f979 	bl	8000210 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8002f1e:	2f01      	cmp	r7, #1
 8002f20:	d11a      	bne.n	8002f58 <arm_cfft_f32+0xd0>
    {
        invL = 1.0f/(float32_t)L;
 8002f22:	ee07 4a90 	vmov	s15, r4
 8002f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8002f2a:	2300      	movs	r3, #0
    if( bitReverseFlag )
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);

    if(ifftFlag == 1u)
    {
        invL = 1.0f/(float32_t)L;
 8002f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8002f34:	42a3      	cmp	r3, r4
 8002f36:	f105 0508 	add.w	r5, r5, #8
 8002f3a:	d20d      	bcs.n	8002f58 <arm_cfft_f32+0xd0>
        {
            *pSrc++ *=   invL ;
 8002f3c:	ed55 7a02 	vldr	s15, [r5, #-8]
    if(ifftFlag == 1u)
    {
        invL = 1.0f/(float32_t)L;
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8002f40:	3301      	adds	r3, #1
        {
            *pSrc++ *=   invL ;
 8002f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f46:	ed45 7a02 	vstr	s15, [r5, #-8]
            *pSrc  = -(*pSrc) * invL;
 8002f4a:	ed55 7a01 	vldr	s15, [r5, #-4]
 8002f4e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8002f52:	ed45 7a01 	vstr	s15, [r5, #-4]
 8002f56:	e7ed      	b.n	8002f34 <arm_cfft_f32+0xac>
 8002f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f5c <arm_radix8_butterfly_f32>:
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8002f5c:	eddf 5ace 	vldr	s11, [pc, #824]	; 8003298 <arm_radix8_butterfly_f32+0x33c>
 8002f60:	eeb0 5a65 	vmov.f32	s10, s11
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8002f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f68:	ed2d 8b10 	vpush	{d8-d15}
 8002f6c:	b09d      	sub	sp, #116	; 0x74
 8002f6e:	910d      	str	r1, [sp, #52]	; 0x34
 8002f70:	9202      	str	r2, [sp, #8]
 8002f72:	9301      	str	r3, [sp, #4]
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 8002f74:	9103      	str	r1, [sp, #12]
   
   do 
   {
      n1 = n2;
      n2 = n2 >> 3;
 8002f76:	9b03      	ldr	r3, [sp, #12]
 8002f78:	f100 0804 	add.w	r8, r0, #4
      i1 = 0;
 8002f7c:	f04f 0b00 	mov.w	fp, #0
   n2 = fftLen;
   
   do 
   {
      n1 = n2;
      n2 = n2 >> 3;
 8002f80:	08da      	lsrs	r2, r3, #3
 8002f82:	00d9      	lsls	r1, r3, #3
 8002f84:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8002f88:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8002f8c:	1954      	adds	r4, r2, r5
 8002f8e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8002f92:	eb00 0c09 	add.w	ip, r0, r9
 8002f96:	0113      	lsls	r3, r2, #4
 8002f98:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 8002f9c:	4414      	add	r4, r2
 8002f9e:	eb0c 0a09 	add.w	sl, ip, r9
 8002fa2:	3504      	adds	r5, #4
 8002fa4:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8002fa8:	4414      	add	r4, r2
 8002faa:	f10e 0e04 	add.w	lr, lr, #4
 8002fae:	930c      	str	r3, [sp, #48]	; 0x30
 8002fb0:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 8002fb4:	4414      	add	r4, r2
 8002fb6:	3704      	adds	r7, #4
 8002fb8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8002fbc:	3604      	adds	r6, #4
 8002fbe:	3404      	adds	r4, #4
         i4 = i3 + n2;
         i5 = i4 + n2;
         i6 = i5 + n2;
         i7 = i6 + n2;
         i8 = i7 + n2;
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002fc0:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8002fc4:	ed18 7a01 	vldr	s14, [r8, #-4]
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002fc8:	eddc 6a00 	vldr	s13, [ip]
         i4 = i3 + n2;
         i5 = i4 + n2;
         i6 = i5 + n2;
         i7 = i6 + n2;
         i8 = i7 + n2;
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002fcc:	ee37 6a27 	vadd.f32	s12, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002fd0:	ed15 2a01 	vldr	s4, [r5, #-4]
         i5 = i4 + n2;
         i6 = i5 + n2;
         i7 = i6 + n2;
         i8 = i7 + n2;
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002fd4:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002fd8:	ed57 7a01 	vldr	s15, [r7, #-4]
 8002fdc:	ee76 4aa7 	vadd.f32	s9, s13, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002fe0:	ee36 3ae7 	vsub.f32	s6, s13, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002fe4:	edda 6a00 	vldr	s13, [sl]
 8002fe8:	ed56 7a01 	vldr	s15, [r6, #-4]
 8002fec:	ee76 3aa7 	vadd.f32	s7, s13, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002ff0:	ee76 7ae7 	vsub.f32	s15, s13, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002ff4:	ed54 6a01 	vldr	s13, [r4, #-4]
 8002ff8:	ee32 4a26 	vadd.f32	s8, s4, s13
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
         t1 = r1 - r3;
 8002ffc:	ee76 8a63 	vsub.f32	s17, s12, s7
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003000:	ee32 2a66 	vsub.f32	s4, s4, s13
         t1 = r1 - r3;
         r1 = r1 + r3;
 8003004:	ee76 6a23 	vadd.f32	s13, s12, s7
         r3 = r2 - r4;
         r2 = r2 + r4;
 8003008:	ee34 6a84 	vadd.f32	s12, s9, s8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
         t1 = r1 - r3;
         r1 = r1 + r3;
         r3 = r2 - r4;
 800300c:	ee34 8ac4 	vsub.f32	s16, s9, s8
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
 8003010:	ee76 4a86 	vadd.f32	s9, s13, s12
         pSrc[2 * i5] = r1 - r2;
 8003014:	ee76 6ac6 	vsub.f32	s13, s13, s12
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
         t1 = r1 - r3;
         r1 = r1 + r3;
         r3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
 8003018:	ed48 4a01 	vstr	s9, [r8, #-4]
         pSrc[2 * i5] = r1 - r2;
 800301c:	ed4e 6a01 	vstr	s13, [lr, #-4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003020:	ed97 4a00 	vldr	s8, [r7]
 8003024:	eddc 3a01 	vldr	s7, [ip, #4]
         r1 = r1 + r3;
         r3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
         pSrc[2 * i5] = r1 - r2;
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003028:	edde 6a00 	vldr	s13, [lr]
 800302c:	edd8 4a00 	vldr	s9, [r8]
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003030:	ee73 1a84 	vadd.f32	s3, s7, s8
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003034:	edda 2a01 	vldr	s5, [sl, #4]
         pSrc[2 * i1] = r1 + r2;   
         pSrc[2 * i5] = r1 - r2;
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003038:	ee73 3ac4 	vsub.f32	s7, s7, s8
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800303c:	ed96 4a00 	vldr	s8, [r6]
         r1 = r1 + r3;
         r3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
         pSrc[2 * i5] = r1 - r2;
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003040:	ee34 6aa6 	vadd.f32	s12, s9, s13
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003044:	ed94 1a00 	vldr	s2, [r4]
         r3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
         pSrc[2 * i5] = r1 - r2;
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003048:	ee74 4ae6 	vsub.f32	s9, s9, s13
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800304c:	ee72 6a84 	vadd.f32	s13, s5, s8
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003050:	ee32 4ac4 	vsub.f32	s8, s5, s8
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003054:	edd5 2a00 	vldr	s5, [r5]
 8003058:	ee32 0a81 	vadd.f32	s0, s5, s2
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800305c:	ee72 2ac1 	vsub.f32	s5, s5, s2
         t2 = r1 - s3;
 8003060:	ee36 1a66 	vsub.f32	s2, s12, s13
         r1 = r1 + s3;
 8003064:	ee76 6a26 	vadd.f32	s13, s12, s13
         s3 = r2 - r4;
         r2 = r2 + r4;
 8003068:	ee31 6a80 	vadd.f32	s12, s3, s0
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
         t2 = r1 - s3;
         r1 = r1 + s3;
         s3 = r2 - r4;
 800306c:	ee71 0ac0 	vsub.f32	s1, s3, s0
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
 8003070:	ee76 1a86 	vadd.f32	s3, s13, s12
         pSrc[2 * i5 + 1] = r1 - r2;
 8003074:	ee76 6ac6 	vsub.f32	s13, s13, s12
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
 8003078:	ee38 6ae0 	vsub.f32	s12, s17, s1
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
         t2 = r1 - s3;
         r1 = r1 + s3;
         s3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
 800307c:	edc8 1a00 	vstr	s3, [r8]
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
 8003080:	ee73 1a42 	vsub.f32	s3, s6, s4
         t2 = r1 - s3;
         r1 = r1 + s3;
         s3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
         pSrc[2 * i5 + 1] = r1 - r2;
 8003084:	edce 6a00 	vstr	s13, [lr]
         pSrc[2 * i3]     = t1 + s3;
 8003088:	ee78 6aa0 	vadd.f32	s13, s17, s1
 800308c:	4488      	add	r8, r1
 800308e:	448e      	add	lr, r1
 8003090:	edca 6a00 	vstr	s13, [sl]
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
 8003094:	ee71 6a48 	vsub.f32	s13, s2, s16
         s3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
 8003098:	ed06 6a01 	vstr	s12, [r6, #-4]
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
 800309c:	ee33 6aa2 	vadd.f32	s12, s7, s5
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
 80030a0:	edca 6a01 	vstr	s13, [sl, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 80030a4:	ee78 6a01 	vadd.f32	s13, s16, s2
 80030a8:	448a      	add	sl, r1
 80030aa:	edc6 6a00 	vstr	s13, [r6]
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
 80030ae:	ee73 6a02 	vadd.f32	s13, s6, s4
         r2 = (s6 - s8) * C81;
 80030b2:	ee33 2ae2 	vsub.f32	s4, s7, s5
 80030b6:	440e      	add	r6, r1
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
 80030b8:	eef0 3a67 	vmov.f32	s7, s15
         r7 = r7 + r6;
         t2 = s5 - r2;
 80030bc:	eef0 2a64 	vmov.f32	s5, s9
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
         r7 = r7 + r6;
 80030c0:	eee6 7aa5 	vfma.f32	s15, s13, s11
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
 80030c4:	eee6 3ae5 	vfms.f32	s7, s13, s11
         r7 = r7 + r6;
         t2 = s5 - r2;
         s5 = s5 + r2;
 80030c8:	eef0 6a64 	vmov.f32	s13, s9
         s8 = s7 - s6;
 80030cc:	eef0 4a44 	vmov.f32	s9, s8
         s7 = s7 + s6;
 80030d0:	eea6 4a25 	vfma.f32	s8, s12, s11
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 80030d4:	eeb0 3a47 	vmov.f32	s6, s14
         r5 = r5 + r1;
 80030d8:	eea1 7aa5 	vfma.f32	s14, s3, s11
         r8 = r7 - r6;
         r7 = r7 + r6;
         t2 = s5 - r2;
         s5 = s5 + r2;
         s8 = s7 - s6;
 80030dc:	eee6 4a65 	vfms.f32	s9, s12, s11
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 80030e0:	eea1 3ae5 	vfms.f32	s6, s3, s11
         r5 = r5 + r1;
         r8 = r7 - r6;
         r7 = r7 + r6;
         t2 = s5 - r2;
         s5 = s5 + r2;
 80030e4:	eee2 6a25 	vfma.f32	s13, s4, s11
         s8 = s7 - s6;
         s7 = s7 + s6;
 80030e8:	eeb0 6a44 	vmov.f32	s12, s8
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
         r7 = r7 + r6;
         t2 = s5 - r2;
 80030ec:	eee2 2a65 	vfms.f32	s5, s4, s11
         s5 = s5 + r2;
         s8 = s7 - s6;
         s7 = s7 + s6;
         pSrc[2 * i2]     = r5 + s7;
 80030f0:	ee37 4a04 	vadd.f32	s8, s14, s8
         pSrc[2 * i8]     = r5 - s7;
 80030f4:	ee37 7a46 	vsub.f32	s14, s14, s12
         r7 = r7 + r6;
         t2 = s5 - r2;
         s5 = s5 + r2;
         s8 = s7 - s6;
         s7 = s7 + s6;
         pSrc[2 * i2]     = r5 + s7;
 80030f8:	ed8c 4a00 	vstr	s8, [ip]
         pSrc[2 * i8]     = r5 - s7;
 80030fc:	ed04 7a01 	vstr	s14, [r4, #-4]
         pSrc[2 * i6]     = t1 + s8;
 8003100:	ee33 7a24 	vadd.f32	s14, s6, s9
         pSrc[2 * i4]     = t1 - s8;
 8003104:	ee33 3a64 	vsub.f32	s6, s6, s9
         s5 = s5 + r2;
         s8 = s7 - s6;
         s7 = s7 + s6;
         pSrc[2 * i2]     = r5 + s7;
         pSrc[2 * i8]     = r5 - s7;
         pSrc[2 * i6]     = t1 + s8;
 8003108:	ed07 7a01 	vstr	s14, [r7, #-4]
         pSrc[2 * i4]     = t1 - s8;
         pSrc[2 * i2 + 1] = s5 - r7;
 800310c:	ee36 7ae7 	vsub.f32	s14, s13, s15
         pSrc[2 * i8 + 1] = s5 + r7;
 8003110:	ee77 7aa6 	vadd.f32	s15, s15, s13
         s8 = s7 - s6;
         s7 = s7 + s6;
         pSrc[2 * i2]     = r5 + s7;
         pSrc[2 * i8]     = r5 - s7;
         pSrc[2 * i6]     = t1 + s8;
         pSrc[2 * i4]     = t1 - s8;
 8003114:	ed05 3a01 	vstr	s6, [r5, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
 8003118:	ed8c 7a01 	vstr	s14, [ip, #4]
 800311c:	448c      	add	ip, r1
         pSrc[2 * i8 + 1] = s5 + r7;
 800311e:	edc4 7a00 	vstr	s15, [r4]
         pSrc[2 * i6 + 1] = t2 - r8;
 8003122:	ee72 7ae3 	vsub.f32	s15, s5, s7
         pSrc[2 * i4 + 1] = t2 + r8;
 8003126:	ee73 3aa2 	vadd.f32	s7, s7, s5
 800312a:	440c      	add	r4, r1
         pSrc[2 * i8]     = r5 - s7;
         pSrc[2 * i6]     = t1 + s8;
         pSrc[2 * i4]     = t1 - s8;
         pSrc[2 * i2 + 1] = s5 - r7;
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
 800312c:	edc7 7a00 	vstr	s15, [r7]
 8003130:	440f      	add	r7, r1
         pSrc[2 * i4 + 1] = t2 + r8;
 8003132:	edc5 3a00 	vstr	s7, [r5]
 8003136:	440d      	add	r5, r1
         
         i1 += n1;
 8003138:	9b03      	ldr	r3, [sp, #12]
 800313a:	449b      	add	fp, r3
      } while(i1 < fftLen);
 800313c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800313e:	455b      	cmp	r3, fp
 8003140:	f63f af3e 	bhi.w	8002fc0 <arm_radix8_butterfly_f32+0x64>
      
      if(n2 < 8)
 8003144:	2a07      	cmp	r2, #7
 8003146:	f240 81d1 	bls.w	80034ec <arm_radix8_butterfly_f32+0x590>
 800314a:	9b01      	ldr	r3, [sp, #4]
 800314c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	930e      	str	r3, [sp, #56]	; 0x38
 8003154:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003156:	9b02      	ldr	r3, [sp, #8]
 8003158:	4423      	add	r3, r4
 800315a:	9305      	str	r3, [sp, #20]
 800315c:	9b01      	ldr	r3, [sp, #4]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	930f      	str	r3, [sp, #60]	; 0x3c
 8003162:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003164:	9b02      	ldr	r3, [sp, #8]
 8003166:	4423      	add	r3, r4
 8003168:	9306      	str	r3, [sp, #24]
 800316a:	9b01      	ldr	r3, [sp, #4]
 800316c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8003170:	00e3      	lsls	r3, r4, #3
 8003172:	00e5      	lsls	r5, r4, #3
 8003174:	9311      	str	r3, [sp, #68]	; 0x44
 8003176:	9b02      	ldr	r3, [sp, #8]
 8003178:	442b      	add	r3, r5
 800317a:	9308      	str	r3, [sp, #32]
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	441c      	add	r4, r3
 8003180:	00e3      	lsls	r3, r4, #3
 8003182:	00e5      	lsls	r5, r4, #3
 8003184:	9314      	str	r3, [sp, #80]	; 0x50
 8003186:	9b02      	ldr	r3, [sp, #8]
 8003188:	442b      	add	r3, r5
 800318a:	9307      	str	r3, [sp, #28]
 800318c:	9b01      	ldr	r3, [sp, #4]
 800318e:	441c      	add	r4, r3
 8003190:	00e3      	lsls	r3, r4, #3
 8003192:	00e5      	lsls	r5, r4, #3
 8003194:	9313      	str	r3, [sp, #76]	; 0x4c
 8003196:	9b02      	ldr	r3, [sp, #8]
 8003198:	442b      	add	r3, r5
 800319a:	930b      	str	r3, [sp, #44]	; 0x2c
 800319c:	9b01      	ldr	r3, [sp, #4]
 800319e:	441c      	add	r4, r3
 80031a0:	00e3      	lsls	r3, r4, #3
 80031a2:	00e5      	lsls	r5, r4, #3
 80031a4:	9312      	str	r3, [sp, #72]	; 0x48
 80031a6:	9b02      	ldr	r3, [sp, #8]
 80031a8:	442b      	add	r3, r5
 80031aa:	930a      	str	r3, [sp, #40]	; 0x28
 80031ac:	9b01      	ldr	r3, [sp, #4]
 80031ae:	441c      	add	r4, r3
 80031b0:	00e3      	lsls	r3, r4, #3
 80031b2:	9310      	str	r3, [sp, #64]	; 0x40
 80031b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80031b6:	9b02      	ldr	r3, [sp, #8]
 80031b8:	4423      	add	r3, r4
 80031ba:	2400      	movs	r4, #0
 80031bc:	9309      	str	r3, [sp, #36]	; 0x24
 80031be:	2328      	movs	r3, #40	; 0x28
 80031c0:	fb03 fe02 	mul.w	lr, r3, r2
 80031c4:	2330      	movs	r3, #48	; 0x30
 80031c6:	fb03 f702 	mul.w	r7, r3, r2
 80031ca:	2318      	movs	r3, #24
 80031cc:	fb03 f602 	mul.w	r6, r3, r2
 80031d0:	2338      	movs	r3, #56	; 0x38
 80031d2:	fb03 f502 	mul.w	r5, r3, r2
 80031d6:	2301      	movs	r3, #1
 80031d8:	9304      	str	r3, [sp, #16]
 80031da:	f10c 030c 	add.w	r3, ip, #12
 80031de:	9315      	str	r3, [sp, #84]	; 0x54
 80031e0:	f109 030c 	add.w	r3, r9, #12
 80031e4:	9316      	str	r3, [sp, #88]	; 0x58
 80031e6:	f10e 030c 	add.w	r3, lr, #12
 80031ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80031ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031ee:	330c      	adds	r3, #12
 80031f0:	9318      	str	r3, [sp, #96]	; 0x60
 80031f2:	f107 030c 	add.w	r3, r7, #12
 80031f6:	9319      	str	r3, [sp, #100]	; 0x64
 80031f8:	f106 030c 	add.w	r3, r6, #12
 80031fc:	931a      	str	r3, [sp, #104]	; 0x68
 80031fe:	f105 030c 	add.w	r3, r5, #12
 8003202:	931b      	str	r3, [sp, #108]	; 0x6c
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;
                  
         co2 = pCoef[2 * ia1];
 8003204:	9b05      	ldr	r3, [sp, #20]
 8003206:	edd3 1a00 	vldr	s3, [r3]
         co3 = pCoef[2 * ia2];
 800320a:	9b06      	ldr	r3, [sp, #24]
 800320c:	ed93 8a00 	vldr	s16, [r3]
         co4 = pCoef[2 * ia3];
 8003210:	9b08      	ldr	r3, [sp, #32]
 8003212:	edd3 4a00 	vldr	s9, [r3]
         co5 = pCoef[2 * ia4];
 8003216:	9b07      	ldr	r3, [sp, #28]
 8003218:	ed93 9a00 	vldr	s18, [r3]
         co6 = pCoef[2 * ia5];
 800321c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800321e:	edd3 3a00 	vldr	s7, [r3]
         co7 = pCoef[2 * ia6];
 8003222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003224:	edd3 0a00 	vldr	s1, [r3]
         co8 = pCoef[2 * ia7];
 8003228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800322a:	edd3 2a00 	vldr	s5, [r3]
         si2 = pCoef[2 * ia1 + 1];
 800322e:	9b05      	ldr	r3, [sp, #20]
 8003230:	ed93 1a01 	vldr	s2, [r3, #4]
         si3 = pCoef[2 * ia2 + 1];
 8003234:	9b06      	ldr	r3, [sp, #24]
 8003236:	edd3 8a01 	vldr	s17, [r3, #4]
         si4 = pCoef[2 * ia3 + 1];
 800323a:	9b08      	ldr	r3, [sp, #32]
 800323c:	ed93 4a01 	vldr	s8, [r3, #4]
         si5 = pCoef[2 * ia4 + 1];
 8003240:	9b07      	ldr	r3, [sp, #28]
 8003242:	edd3 9a01 	vldr	s19, [r3, #4]
         si6 = pCoef[2 * ia5 + 1];
 8003246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003248:	ed93 3a01 	vldr	s6, [r3, #4]
         si7 = pCoef[2 * ia6 + 1];
 800324c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800324e:	ed93 0a01 	vldr	s0, [r3, #4]
         si8 = pCoef[2 * ia7 + 1];         
 8003252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003254:	ed93 2a01 	vldr	s4, [r3, #4]
 8003258:	9b04      	ldr	r3, [sp, #16]
 800325a:	eb00 0ac3 	add.w	sl, r0, r3, lsl #3
 800325e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003260:	eb03 0904 	add.w	r9, r3, r4
 8003264:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003266:	eb03 0804 	add.w	r8, r3, r4
 800326a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800326c:	4481      	add	r9, r0
 800326e:	eb03 0c04 	add.w	ip, r3, r4
 8003272:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003274:	4480      	add	r8, r0
 8003276:	eb03 0e04 	add.w	lr, r3, r4
 800327a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800327c:	4484      	add	ip, r0
 800327e:	191f      	adds	r7, r3, r4
 8003280:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003282:	4486      	add	lr, r0
 8003284:	191e      	adds	r6, r3, r4
 8003286:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003288:	4407      	add	r7, r0
 800328a:	191d      	adds	r5, r3, r4
 800328c:	4406      	add	r6, r0
         
         i1 = j;
 800328e:	9b04      	ldr	r3, [sp, #16]
 8003290:	4405      	add	r5, r0
 8003292:	930c      	str	r3, [sp, #48]	; 0x30
 8003294:	e002      	b.n	800329c <arm_radix8_butterfly_f32+0x340>
 8003296:	bf00      	nop
 8003298:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800329c:	ed59 7a01 	vldr	s15, [r9, #-4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80032a0:	ed5c 6a01 	vldr	s13, [ip, #-4]
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80032a4:	ed9a aa00 	vldr	s20, [sl]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80032a8:	ed18 da01 	vldr	s26, [r8, #-4]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80032ac:	ed1e ba01 	vldr	s22, [lr, #-4]
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80032b0:	ee3a 7a27 	vadd.f32	s14, s20, s15
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80032b4:	ee3a aa67 	vsub.f32	s20, s20, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80032b8:	ed16 ea01 	vldr	s28, [r6, #-4]
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80032bc:	ee7d 7a26 	vadd.f32	s15, s26, s13
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80032c0:	ee3d da66 	vsub.f32	s26, s26, s13
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80032c4:	ed57 6a01 	vldr	s13, [r7, #-4]
 80032c8:	ee3b 6a26 	vadd.f32	s12, s22, s13
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80032cc:	ee3b ba66 	vsub.f32	s22, s22, s13
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80032d0:	ed55 6a01 	vldr	s13, [r5, #-4]
 80032d4:	ee7e aa26 	vadd.f32	s21, s28, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
            t1 = r1 - r3;
 80032d8:	ee37 fa46 	vsub.f32	s30, s14, s12
            r1 = r1 + r3;
 80032dc:	ee37 6a06 	vadd.f32	s12, s14, s12
            r3 = r2 - r4;
 80032e0:	ee77 eaea 	vsub.f32	s29, s15, s21
            r2 = r2 + r4;
 80032e4:	ee77 7aaa 	vadd.f32	s15, s15, s21
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80032e8:	ee3e ea66 	vsub.f32	s28, s28, s13
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
 80032ec:	ee36 7a27 	vadd.f32	s14, s12, s15
            r2 = r1 - r2;
 80032f0:	ee76 aa67 	vsub.f32	s21, s12, s15
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80032f4:	ed9a 6a01 	vldr	s12, [sl, #4]
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
 80032f8:	ed8a 7a00 	vstr	s14, [sl]
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80032fc:	edd9 7a00 	vldr	s15, [r9]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003300:	edd8 ca00 	vldr	s25, [r8]
            r1 = r1 + r3;
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003304:	ee36 7a27 	vadd.f32	s14, s12, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003308:	edde 6a00 	vldr	s13, [lr]
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800330c:	ee76 ba67 	vsub.f32	s23, s12, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003310:	eddc 7a00 	vldr	s15, [ip]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003314:	edd6 fa00 	vldr	s31, [r6]
 8003318:	edd5 da00 	vldr	s27, [r5]
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800331c:	ee3c 6aa7 	vadd.f32	s12, s25, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003320:	ee7c cae7 	vsub.f32	s25, s25, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003324:	edd7 7a00 	vldr	s15, [r7]
 8003328:	ee36 caa7 	vadd.f32	s24, s13, s15
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800332c:	ee76 7ae7 	vsub.f32	s15, s13, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003330:	ee7f 6aad 	vadd.f32	s13, s31, s27
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003334:	ee7f daed 	vsub.f32	s27, s31, s27
            t2 = s1 - s3;
 8003338:	ee77 fa4c 	vsub.f32	s31, s14, s24
            s1 = s1 + s3;
 800333c:	ee37 ca0c 	vadd.f32	s24, s14, s24
            s3 = s2 - s4;
 8003340:	ee36 7a66 	vsub.f32	s14, s12, s13
            s2 = s2 + s4;
 8003344:	ee36 6a26 	vadd.f32	s12, s12, s13
            r1 = t1 + s3;
 8003348:	ee7f 6a07 	vadd.f32	s13, s30, s14
            t1 = t1 - s3;
 800334c:	ee3f 7a47 	vsub.f32	s14, s30, s14
            pSrc[2 * i1 + 1] = s1 + s2;
 8003350:	ee3c fa06 	vadd.f32	s30, s24, s12
            s2 = s1 - s2;
 8003354:	ee3c ca46 	vsub.f32	s24, s24, s12
            s1 = s1 + s3;
            s3 = s2 - s4;
            s2 = s2 + s4;
            r1 = t1 + s3;
            t1 = t1 - s3;
            pSrc[2 * i1 + 1] = s1 + s2;
 8003358:	ed8a fa01 	vstr	s30, [sl, #4]
            s2 = s1 - s2;
            s1 = t2 - r3;
 800335c:	ee3f faee 	vsub.f32	s30, s31, s29
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 8003360:	ee29 6a8c 	vmul.f32	s12, s19, s24
 8003364:	448a      	add	sl, r1
            r1 = t1 + s3;
            t1 = t1 - s3;
            pSrc[2 * i1 + 1] = s1 + s2;
            s2 = s1 - s2;
            s1 = t2 - r3;
            t2 = t2 + r3;
 8003366:	ee7e eaaf 	vadd.f32	s29, s29, s31
            p1 = co5 * r2;
            p2 = si5 * s2;
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 800336a:	eea9 6a2a 	vfma.f32	s12, s18, s21
 800336e:	ed09 6a01 	vstr	s12, [r9, #-4]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003372:	ee2a 6ae9 	vnmul.f32	s12, s21, s19
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
 8003376:	ee7d aa4e 	vsub.f32	s21, s26, s28
            p1 = co5 * r2;
            p2 = si5 * s2;
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
            pSrc[2 * i5 + 1] = p3 - p4;
 800337a:	eea9 6a0c 	vfma.f32	s12, s18, s24
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
 800337e:	eeb0 ca4a 	vmov.f32	s24, s20
            r5 = r5 + r1;
 8003382:	eeaa aa85 	vfma.f32	s20, s21, s10
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
 8003386:	eeaa cac5 	vfms.f32	s24, s21, s10
            r5 = r5 + r1;
            r8 = r7 - r6;
 800338a:	eef0 aa4b 	vmov.f32	s21, s22
            p1 = co5 * r2;
            p2 = si5 * s2;
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
            pSrc[2 * i5 + 1] = p3 - p4;
 800338e:	ed89 6a00 	vstr	s12, [r9]
            p1 = co3 * r1;
            p2 = si3 * s1;
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
 8003392:	ee28 6a8f 	vmul.f32	s12, s17, s30
 8003396:	4489      	add	r9, r1
 8003398:	eea8 6a26 	vfma.f32	s12, s16, s13
            pSrc[2 * i3 + 1] = p3 - p4;
 800339c:	ee66 6ae8 	vnmul.f32	s13, s13, s17
 80033a0:	eee8 6a0f 	vfma.f32	s13, s16, s30
            pSrc[2 * i5 + 1] = p3 - p4;
            p1 = co3 * r1;
            p2 = si3 * s1;
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
 80033a4:	ed0e 6a01 	vstr	s12, [lr, #-4]
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
 80033a8:	ee3c 6aed 	vsub.f32	s12, s25, s27
            p1 = co3 * r1;
            p2 = si3 * s1;
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
            pSrc[2 * i3 + 1] = p3 - p4;
 80033ac:	edce 6a00 	vstr	s13, [lr]
            p1 = co7 * t1;
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
 80033b0:	ee60 6a2e 	vmul.f32	s13, s0, s29
 80033b4:	448e      	add	lr, r1
 80033b6:	eee0 6a87 	vfma.f32	s13, s1, s14
            pSrc[2 * i7 + 1] = p3 - p4;
 80033ba:	ee27 7a40 	vnmul.f32	s14, s14, s0
 80033be:	eea0 7aae 	vfma.f32	s14, s1, s29
            pSrc[2 * i3 + 1] = p3 - p4;
            p1 = co7 * t1;
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
 80033c2:	ed47 6a01 	vstr	s13, [r7, #-4]
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
 80033c6:	ee7d 6a0e 	vadd.f32	s13, s26, s28
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
 80033ca:	eea6 ba85 	vfma.f32	s22, s13, s10
            p1 = co7 * t1;
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
 80033ce:	ed87 7a00 	vstr	s14, [r7]
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
 80033d2:	ee3c 7aad 	vadd.f32	s14, s25, s27
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
            t2 = s5 - s1;
 80033d6:	eef0 ca6b 	vmov.f32	s25, s23
 80033da:	440f      	add	r7, r1
            s5 = s5 + s1;
 80033dc:	eee6 ba05 	vfma.f32	s23, s12, s10
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
 80033e0:	eee6 aac5 	vfms.f32	s21, s13, s10
            r7 = r7 + r6;
            t2 = s5 - s1;
 80033e4:	eee6 ca45 	vfms.f32	s25, s12, s10
            s5 = s5 + s1;
 80033e8:	eeb0 6a6b 	vmov.f32	s12, s23
            s8 = s7 - s6;
 80033ec:	eef0 ba67 	vmov.f32	s23, s15
            s7 = s7 + s6;
 80033f0:	eee7 7a05 	vfma.f32	s15, s14, s10
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
            t2 = s5 - s1;
            s5 = s5 + s1;
            s8 = s7 - s6;
 80033f4:	eee7 ba45 	vfms.f32	s23, s14, s10
            s7 = s7 + s6;
            r1 = r5 + s7;
 80033f8:	ee7a 6a27 	vadd.f32	s13, s20, s15
            r5 = r5 - s7;
 80033fc:	ee7a 7a67 	vsub.f32	s15, s20, s15
            r6 = t1 + s8;
 8003400:	ee3c 7a2b 	vadd.f32	s14, s24, s23
            t1 = t1 - s8;
 8003404:	ee3c aa6b 	vsub.f32	s20, s24, s23
            s1 = s5 - r7;
 8003408:	ee36 ca4b 	vsub.f32	s24, s12, s22
            s5 = s5 + r7;
 800340c:	ee3b 6a06 	vadd.f32	s12, s22, s12
            s6 = t2 - r8;
 8003410:	ee3c baea 	vsub.f32	s22, s25, s21
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 8003414:	ee61 ba0c 	vmul.f32	s23, s2, s24
            r6 = t1 + s8;
            t1 = t1 - s8;
            s1 = s5 - r7;
            s5 = s5 + r7;
            s6 = t2 - r8;
            t2 = t2 + r8;
 8003418:	ee7a aaac 	vadd.f32	s21, s21, s25
            p1 = co2 * r1;
            p2 = si2 * s1;
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 800341c:	eee1 baa6 	vfma.f32	s23, s3, s13
            pSrc[2 * i2 + 1] = p3 - p4;
 8003420:	ee66 6ac1 	vnmul.f32	s13, s13, s2
 8003424:	eee1 6a8c 	vfma.f32	s13, s3, s24
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 8003428:	ed48 ba01 	vstr	s23, [r8, #-4]
            pSrc[2 * i2 + 1] = p3 - p4;
 800342c:	edc8 6a00 	vstr	s13, [r8]
            p1 = co8 * r5;
            p2 = si8 * s5;
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 8003430:	ee62 6a06 	vmul.f32	s13, s4, s12
 8003434:	4488      	add	r8, r1
 8003436:	eee2 6aa7 	vfma.f32	s13, s5, s15
 800343a:	ed45 6a01 	vstr	s13, [r5, #-4]
            pSrc[2 * i8 + 1] = p3 - p4;
 800343e:	ee67 6ac2 	vnmul.f32	s13, s15, s4
            p1 = co6 * r6;
            p2 = si6 * s6;
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 8003442:	ee63 7a0b 	vmul.f32	s15, s6, s22
            p1 = co8 * r5;
            p2 = si8 * s5;
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
            pSrc[2 * i8 + 1] = p3 - p4;
 8003446:	eee2 6a86 	vfma.f32	s13, s5, s12
            p1 = co6 * r6;
            p2 = si6 * s6;
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 800344a:	eee3 7a87 	vfma.f32	s15, s7, s14
            pSrc[2 * i6 + 1] = p3 - p4;
 800344e:	ee27 7a43 	vnmul.f32	s14, s14, s6
 8003452:	eea3 7a8b 	vfma.f32	s14, s7, s22
            p1 = co8 * r5;
            p2 = si8 * s5;
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
            pSrc[2 * i8 + 1] = p3 - p4;
 8003456:	edc5 6a00 	vstr	s13, [r5]
 800345a:	440d      	add	r5, r1
            p1 = co6 * r6;
            p2 = si6 * s6;
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 800345c:	ed4c 7a01 	vstr	s15, [ip, #-4]
            pSrc[2 * i6 + 1] = p3 - p4;
            p1 = co4 * t1;
            p2 = si4 * t2;
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 8003460:	ee64 7a2a 	vmul.f32	s15, s8, s21
 8003464:	eee4 7a8a 	vfma.f32	s15, s9, s20
            p1 = co6 * r6;
            p2 = si6 * s6;
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
            pSrc[2 * i6 + 1] = p3 - p4;
 8003468:	ed8c 7a00 	vstr	s14, [ip]
 800346c:	448c      	add	ip, r1
            p1 = co4 * t1;
            p2 = si4 * t2;
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 800346e:	ed46 7a01 	vstr	s15, [r6, #-4]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003472:	ee6a 7a44 	vnmul.f32	s15, s20, s8
 8003476:	eee4 7aaa 	vfma.f32	s15, s9, s21
 800347a:	edc6 7a00 	vstr	s15, [r6]
 800347e:	440e      	add	r6, r1
            
            i1 += n1;
 8003480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003482:	469b      	mov	fp, r3
 8003484:	9b03      	ldr	r3, [sp, #12]
 8003486:	449b      	add	fp, r3
         } while(i1 < fftLen);
 8003488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;
            
            i1 += n1;
 800348a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
         } while(i1 < fftLen);
 800348e:	469b      	mov	fp, r3
 8003490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003492:	459b      	cmp	fp, r3
 8003494:	f63f af02 	bhi.w	800329c <arm_radix8_butterfly_f32+0x340>
         
         j++;
 8003498:	9b04      	ldr	r3, [sp, #16]
 800349a:	3408      	adds	r4, #8
 800349c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800349e:	3301      	adds	r3, #1
 80034a0:	9304      	str	r3, [sp, #16]
 80034a2:	9b05      	ldr	r3, [sp, #20]
 80034a4:	442b      	add	r3, r5
 80034a6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80034a8:	9305      	str	r3, [sp, #20]
 80034aa:	9b06      	ldr	r3, [sp, #24]
 80034ac:	442b      	add	r3, r5
 80034ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80034b0:	9306      	str	r3, [sp, #24]
 80034b2:	9b08      	ldr	r3, [sp, #32]
 80034b4:	442b      	add	r3, r5
 80034b6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80034b8:	9308      	str	r3, [sp, #32]
 80034ba:	9b07      	ldr	r3, [sp, #28]
 80034bc:	442b      	add	r3, r5
 80034be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80034c0:	9307      	str	r3, [sp, #28]
 80034c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034c4:	442b      	add	r3, r5
 80034c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80034c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80034ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034cc:	442b      	add	r3, r5
 80034ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034d0:	930a      	str	r3, [sp, #40]	; 0x28
 80034d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d4:	442b      	add	r3, r5
 80034d6:	9309      	str	r3, [sp, #36]	; 0x24
      } while(j < n2);
 80034d8:	9b04      	ldr	r3, [sp, #16]
 80034da:	429a      	cmp	r2, r3
 80034dc:	f47f ae92 	bne.w	8003204 <arm_radix8_butterfly_f32+0x2a8>
      
      twidCoefModifier <<= 3;
 80034e0:	9b01      	ldr	r3, [sp, #4]
 80034e2:	9203      	str	r2, [sp, #12]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	e544      	b.n	8002f76 <arm_radix8_butterfly_f32+0x1a>
   } while(n2 > 7);   
}
 80034ec:	b01d      	add	sp, #116	; 0x74
 80034ee:	ecbd 8b10 	vpop	{d8-d15}
 80034f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f6:	bf00      	nop

080034f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003530 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034fe:	e003      	b.n	8003508 <LoopCopyDataInit>

08003500 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003502:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003504:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003506:	3104      	adds	r1, #4

08003508 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003508:	480b      	ldr	r0, [pc, #44]	; (8003538 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800350c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800350e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003510:	d3f6      	bcc.n	8003500 <CopyDataInit>
  ldr  r2, =_sbss
 8003512:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003514:	e002      	b.n	800351c <LoopFillZerobss>

08003516 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003516:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003518:	f842 3b04 	str.w	r3, [r2], #4

0800351c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800351e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003520:	d3f9      	bcc.n	8003516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003522:	f000 f813 	bl	800354c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003526:	f00e f827 	bl	8011578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800352a:	f00b fdfd 	bl	800f128 <main>
  bx  lr    
 800352e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003530:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8003534:	0802ffc0 	.word	0x0802ffc0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003538:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 800353c:	200105f8 	.word	0x200105f8
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003540:	200142c0 	.word	0x200142c0
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003544:	20049824 	.word	0x20049824

08003548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003548:	e7fe      	b.n	8003548 <ADC_IRQHandler>
	...

0800354c <SystemInit>:
  * @retval None
  */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); /* set CP10 and CP11 Full Access */
 800354c:	490f      	ldr	r1, [pc, #60]	; (800358c <SystemInit+0x40>)
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800354e:	2000      	movs	r0, #0
  * @retval None
  */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); /* set CP10 and CP11 Full Access */
 8003550:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <SystemInit+0x44>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	f042 0201 	orr.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003566:	6098      	str	r0, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800356e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003572:	601a      	str	r2, [r3, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8003574:	4a07      	ldr	r2, [pc, #28]	; (8003594 <SystemInit+0x48>)
 8003576:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800357e:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8003580:	60d8      	str	r0, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003582:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003586:	608b      	str	r3, [r1, #8]
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00
 8003590:	40023800 	.word	0x40023800
 8003594:	24003010 	.word	0x24003010

08003598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003598:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800359a:	2003      	movs	r0, #3
 800359c:	f000 f824 	bl	80035e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f00b fac1 	bl	800eb28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80035a6:	f00b f8f5 	bl	800e794 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80035aa:	2000      	movs	r0, #0
 80035ac:	bd08      	pop	{r3, pc}
	...

080035b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80035b0:	4a02      	ldr	r2, [pc, #8]	; (80035bc <HAL_IncTick+0xc>)
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	200430e8 	.word	0x200430e8

080035c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80035c0:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <HAL_GetTick+0x8>)
 80035c2:	6818      	ldr	r0, [r3, #0]
}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	200430e8 	.word	0x200430e8

080035cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80035cc:	b513      	push	{r0, r1, r4, lr}
 80035ce:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80035d0:	f7ff fff6 	bl	80035c0 <HAL_GetTick>
 80035d4:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80035d6:	f7ff fff3 	bl	80035c0 <HAL_GetTick>
 80035da:	9b01      	ldr	r3, [sp, #4]
 80035dc:	1b00      	subs	r0, r0, r4
 80035de:	4298      	cmp	r0, r3
 80035e0:	d3f9      	bcc.n	80035d6 <HAL_Delay+0xa>
  {
  }
}
 80035e2:	b002      	add	sp, #8
 80035e4:	bd10      	pop	{r4, pc}
	...

080035e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4a07      	ldr	r2, [pc, #28]	; (8003608 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80035ea:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ec:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80035ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80035f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8003604:	60d3      	str	r3, [r2, #12]
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <HAL_NVIC_SetPriority+0x68>)
 800360e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003610:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003614:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003616:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361c:	2c04      	cmp	r4, #4
 800361e:	bf28      	it	cs
 8003620:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003622:	2d06      	cmp	r5, #6

  return (
 8003624:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003628:	bf8c      	ite	hi
 800362a:	3b03      	subhi	r3, #3
 800362c:	2300      	movls	r3, #0

  return (
 800362e:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003632:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8003634:	f104 34ff 	add.w	r4, r4, #4294967295
 8003638:	ea04 0401 	and.w	r4, r4, r1
 800363c:	fa04 f403 	lsl.w	r4, r4, r3
 8003640:	fa05 f303 	lsl.w	r3, r5, r3
 8003644:	f103 33ff 	add.w	r3, r3, #4294967295
 8003648:	ea02 0203 	and.w	r2, r2, r3
 800364c:	ea42 0204 	orr.w	r2, r2, r4
 8003650:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003654:	da05      	bge.n	8003662 <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003656:	f000 000f 	and.w	r0, r0, #15
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_NVIC_SetPriority+0x6c>)
 800365e:	541a      	strb	r2, [r3, r0]
 8003660:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003662:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800366c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8003670:	bd30      	pop	{r4, r5, pc}
 8003672:	bf00      	nop
 8003674:	e000ed00 	.word	0xe000ed00
 8003678:	e000ed14 	.word	0xe000ed14

0800367c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800367c:	0942      	lsrs	r2, r0, #5
 800367e:	2301      	movs	r3, #1
 8003680:	f000 001f 	and.w	r0, r0, #31
 8003684:	fa03 f000 	lsl.w	r0, r3, r0
 8003688:	4b01      	ldr	r3, [pc, #4]	; (8003690 <HAL_NVIC_EnableIRQ+0x14>)
 800368a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800368e:	4770      	bx	lr
 8003690:	e000e100 	.word	0xe000e100

08003694 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003694:	3801      	subs	r0, #1
 8003696:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800369a:	d20a      	bcs.n	80036b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	21f0      	movs	r1, #240	; 0xf0
 80036a0:	4a06      	ldr	r2, [pc, #24]	; (80036bc <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a2:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a4:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036aa:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000e010 	.word	0xe000e010
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80036c2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	bf0c      	ite	eq
 80036c8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80036cc:	f022 0204 	bicne.w	r2, r2, #4
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	4770      	bx	lr
 80036d4:	e000e010 	.word	0xe000e010

080036d8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d8:	6803      	ldr	r3, [r0, #0]
 80036da:	2118      	movs	r1, #24
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036e2:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036e4:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036e8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ec:	4904      	ldr	r1, [pc, #16]	; (8003700 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80036ee:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f0:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f2:	bf88      	it	hi
 80036f4:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036f6:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036f8:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80036fa:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	0802f338 	.word	0x0802f338

08003704 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003708:	f7ff ff5a 	bl	80035c0 <HAL_GetTick>
 800370c:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800370e:	2c00      	cmp	r4, #0
 8003710:	d064      	beq.n	80037dc <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003712:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003714:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003716:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800371a:	2302      	movs	r3, #2
 800371c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003728:	6821      	ldr	r1, [r4, #0]
 800372a:	680b      	ldr	r3, [r1, #0]
 800372c:	07d8      	lsls	r0, r3, #31
 800372e:	d508      	bpl.n	8003742 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003730:	f7ff ff46 	bl	80035c0 <HAL_GetTick>
 8003734:	1b40      	subs	r0, r0, r5
 8003736:	2805      	cmp	r0, #5
 8003738:	d9f6      	bls.n	8003728 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800373a:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800373c:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800373e:	6563      	str	r3, [r4, #84]	; 0x54
 8003740:	e051      	b.n	80037e6 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003742:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003744:	4a29      	ldr	r2, [pc, #164]	; (80037ec <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003746:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003748:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800374a:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374c:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800374e:	431d      	orrs	r5, r3
 8003750:	68e3      	ldr	r3, [r4, #12]
 8003752:	431d      	orrs	r5, r3
 8003754:	6923      	ldr	r3, [r4, #16]
 8003756:	431d      	orrs	r5, r3
 8003758:	6963      	ldr	r3, [r4, #20]
 800375a:	432b      	orrs	r3, r5
 800375c:	69e5      	ldr	r5, [r4, #28]
 800375e:	4303      	orrs	r3, r0
 8003760:	432b      	orrs	r3, r5
 8003762:	6a25      	ldr	r5, [r4, #32]
 8003764:	432b      	orrs	r3, r5
 8003766:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003768:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800376a:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800376c:	bf01      	itttt	eq
 800376e:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8003770:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8003772:	4335      	orreq	r5, r6
 8003774:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003776:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003778:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800377a:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800377c:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003780:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003784:	d11c      	bne.n	80037c0 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003786:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003788:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800378a:	b920      	cbnz	r0, 8003796 <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 800378c:	2a01      	cmp	r2, #1
 800378e:	d00b      	beq.n	80037a8 <HAL_DMA_Init+0xa4>
 8003790:	d313      	bcc.n	80037ba <HAL_DMA_Init+0xb6>
 8003792:	2a02      	cmp	r2, #2
 8003794:	e010      	b.n	80037b8 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003796:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800379a:	d10a      	bne.n	80037b2 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 800379c:	2a03      	cmp	r2, #3
 800379e:	d80f      	bhi.n	80037c0 <HAL_DMA_Init+0xbc>
 80037a0:	e8df f002 	tbb	[pc, r2]
 80037a4:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037aa:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 80037ae:	d107      	bne.n	80037c0 <HAL_DMA_Init+0xbc>
 80037b0:	e016      	b.n	80037e0 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b2:	2a02      	cmp	r2, #2
 80037b4:	d914      	bls.n	80037e0 <HAL_DMA_Init+0xdc>
 80037b6:	2a03      	cmp	r2, #3
 80037b8:	d102      	bne.n	80037c0 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037bc:	01d2      	lsls	r2, r2, #7
 80037be:	d40f      	bmi.n	80037e0 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037c0:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037c2:	4620      	mov	r0, r4
 80037c4:	f7ff ff88 	bl	80036d8 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80037ca:	233f      	movs	r3, #63	; 0x3f
 80037cc:	4093      	lsls	r3, r2
 80037ce:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d0:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037d2:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d4:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 80037da:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80037dc:	2001      	movs	r0, #1
 80037de:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e0:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037e2:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037e4:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	f010803f 	.word	0xf010803f

080037f0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037f0:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037f2:	4605      	mov	r5, r0
 80037f4:	b1e8      	cbz	r0, 8003832 <HAL_DMA_DeInit+0x42>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037f6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80037fa:	b2e4      	uxtb	r4, r4
 80037fc:	2c02      	cmp	r4, #2
 80037fe:	d01a      	beq.n	8003836 <HAL_DMA_DeInit+0x46>
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003800:	6803      	ldr	r3, [r0, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003802:	2400      	movs	r4, #0
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800380c:	2221      	movs	r2, #33	; 0x21

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800380e:	601c      	str	r4, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003810:	605c      	str	r4, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003812:	609c      	str	r4, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003814:	60dc      	str	r4, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003816:	611c      	str	r4, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003818:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800381a:	f7ff ff5d 	bl	80036d8 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800381e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003820:	233f      	movs	r3, #63	; 0x3f
 8003822:	4093      	lsls	r3, r2
 8003824:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003826:	656c      	str	r4, [r5, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003828:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800382c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
 8003830:	e001      	b.n	8003836 <HAL_DMA_DeInit+0x46>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003832:	2001      	movs	r0, #1
 8003834:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
  {
    /* Return error status */
    return HAL_BUSY;
 8003836:	4620      	mov	r0, r4

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 8003838:	bd38      	pop	{r3, r4, r5, pc}

0800383a <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383a:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800383c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003840:	2c01      	cmp	r4, #1
 8003842:	d037      	beq.n	80038b4 <HAL_DMA_Start_IT+0x7a>
 8003844:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003846:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8003848:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800384a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800384e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003852:	2c01      	cmp	r4, #1
 8003854:	f04f 0402 	mov.w	r4, #2
 8003858:	d128      	bne.n	80038ac <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800385a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800385e:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003860:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003862:	6825      	ldr	r5, [r4, #0]
 8003864:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003868:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800386a:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800386c:	6883      	ldr	r3, [r0, #8]
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d102      	bne.n	8003878 <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003872:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003874:	60e1      	str	r1, [r4, #12]
 8003876:	e001      	b.n	800387c <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003878:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800387a:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800387e:	233f      	movs	r3, #63	; 0x3f
 8003880:	4093      	lsls	r3, r2
 8003882:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	f043 0316 	orr.w	r3, r3, #22
 800388a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800388c:	6963      	ldr	r3, [r4, #20]
 800388e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003892:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003894:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003896:	b11b      	cbz	r3, 80038a0 <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	f043 0308 	orr.w	r3, r3, #8
 800389e:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a0:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6023      	str	r3, [r4, #0]
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038ac:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038b0:	4620      	mov	r0, r4
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038b4:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 80038b6:	bd70      	pop	{r4, r5, r6, pc}

080038b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038bc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 80038be:	f7ff fe7f 	bl	80035c0 <HAL_GetTick>
 80038c2:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d006      	beq.n	80038da <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038cc:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 80038ce:	2001      	movs	r0, #1
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d0:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	2300      	movs	r3, #0
 80038d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 80038d8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	f022 0216 	bic.w	r2, r2, #22
 80038e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038ee:	b90a      	cbnz	r2, 80038f4 <HAL_DMA_Abort+0x3c>
 80038f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80038f2:	b11a      	cbz	r2, 80038fc <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	f022 0208 	bic.w	r2, r2, #8
 80038fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	f022 0201 	bic.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	f010 0001 	ands.w	r0, r0, #1
 800390c:	d00d      	beq.n	800392a <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800390e:	f7ff fe57 	bl	80035c0 <HAL_GetTick>
 8003912:	1b80      	subs	r0, r0, r6
 8003914:	2805      	cmp	r0, #5
 8003916:	d9f5      	bls.n	8003904 <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003918:	2320      	movs	r3, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800391a:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800391c:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800391e:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003920:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003924:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
        
        return HAL_TIMEOUT;
 8003928:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800392c:	233f      	movs	r3, #63	; 0x3f
 800392e:	4093      	lsls	r3, r2
 8003930:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003932:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003934:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003938:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 800393c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003940 <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003940:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003944:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003946:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800394a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 800394c:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800394e:	2308      	movs	r3, #8
 8003950:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8003952:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003954:	4093      	lsls	r3, r2
 8003956:	421e      	tst	r6, r3
 8003958:	d00c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800395a:	6801      	ldr	r1, [r0, #0]
 800395c:	6808      	ldr	r0, [r1, #0]
 800395e:	0740      	lsls	r0, r0, #29
 8003960:	d508      	bpl.n	8003974 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003962:	6808      	ldr	r0, [r1, #0]
 8003964:	f020 0004 	bic.w	r0, r0, #4
 8003968:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800396a:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800396c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003974:	4b4f      	ldr	r3, [pc, #316]	; (8003ab4 <HAL_DMA_IRQHandler+0x174>)
 8003976:	4093      	lsls	r3, r2
 8003978:	421e      	tst	r6, r3
 800397a:	d008      	beq.n	800398e <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800397c:	6821      	ldr	r1, [r4, #0]
 800397e:	6949      	ldr	r1, [r1, #20]
 8003980:	0609      	lsls	r1, r1, #24
 8003982:	d504      	bpl.n	800398e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003984:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003986:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003988:	f043 0302 	orr.w	r3, r3, #2
 800398c:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <HAL_DMA_IRQHandler+0x178>)
 8003990:	4093      	lsls	r3, r2
 8003992:	421e      	tst	r6, r3
 8003994:	d008      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003996:	6821      	ldr	r1, [r4, #0]
 8003998:	6809      	ldr	r1, [r1, #0]
 800399a:	0788      	lsls	r0, r1, #30
 800399c:	d504      	bpl.n	80039a8 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800399e:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039a8:	2310      	movs	r3, #16
 80039aa:	fa03 f202 	lsl.w	r2, r3, r2
 80039ae:	4216      	tst	r6, r2
 80039b0:	d017      	beq.n	80039e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	6819      	ldr	r1, [r3, #0]
 80039b6:	0709      	lsls	r1, r1, #28
 80039b8:	d513      	bpl.n	80039e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ba:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	0350      	lsls	r0, r2, #13
 80039c0:	d504      	bpl.n	80039cc <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	0319      	lsls	r1, r3, #12
 80039c6:	d508      	bpl.n	80039da <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80039ca:	e007      	b.n	80039dc <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	05d2      	lsls	r2, r2, #23
 80039d0:	d403      	bmi.n	80039da <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	f022 0208 	bic.w	r2, r2, #8
 80039d8:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039dc:	b10b      	cbz	r3, 80039e2 <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039de:	4620      	mov	r0, r4
 80039e0:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039e2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80039e4:	2220      	movs	r2, #32
 80039e6:	408a      	lsls	r2, r1
 80039e8:	4216      	tst	r6, r2
 80039ea:	d03b      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ec:	6823      	ldr	r3, [r4, #0]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	06c6      	lsls	r6, r0, #27
 80039f2:	d537      	bpl.n	8003a64 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039f4:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039f6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80039fa:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fc:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039fe:	d119      	bne.n	8003a34 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a00:	f022 0216 	bic.w	r2, r2, #22
 8003a04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a10:	b90a      	cbnz	r2, 8003a16 <HAL_DMA_IRQHandler+0xd6>
 8003a12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003a14:	b11a      	cbz	r2, 8003a1e <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	f022 0208 	bic.w	r2, r2, #8
 8003a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a1e:	233f      	movs	r3, #63	; 0x3f
 8003a20:	408b      	lsls	r3, r1
 8003a22:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a24:	2300      	movs	r3, #0
 8003a26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 8003a30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003a32:	e037      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a34:	0350      	lsls	r0, r2, #13
 8003a36:	d504      	bpl.n	8003a42 <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	0319      	lsls	r1, r3, #12
 8003a3c:	d40e      	bmi.n	8003a5c <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a40:	e00d      	b.n	8003a5e <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003a48:	d108      	bne.n	8003a5c <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a4a:	6819      	ldr	r1, [r3, #0]
 8003a4c:	f021 0110 	bic.w	r1, r1, #16
 8003a50:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a52:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a54:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8003a5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a5e:	b10b      	cbz	r3, 8003a64 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a60:	4620      	mov	r0, r4
 8003a62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a66:	b303      	cbz	r3, 8003aaa <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a6a:	07da      	lsls	r2, r3, #31
 8003a6c:	d519      	bpl.n	8003aa2 <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a6e:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a70:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a72:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a76:	6813      	ldr	r3, [r2, #0]
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003a7e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003a82:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8003a86:	9b01      	ldr	r3, [sp, #4]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	429f      	cmp	r7, r3
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	d302      	bcc.n	8003a96 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a90:	6813      	ldr	r3, [r2, #0]
 8003a92:	07db      	lsls	r3, r3, #31
 8003a94:	d4f7      	bmi.n	8003a86 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a96:	2300      	movs	r3, #0
 8003a98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8003aa2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003aa4:	b10b      	cbz	r3, 8003aaa <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	4798      	blx	r3
    }
  }
}
 8003aaa:	b003      	add	sp, #12
 8003aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20010044 	.word	0x20010044
 8003ab4:	00800001 	.word	0x00800001
 8003ab8:	00800004 	.word	0x00800004

08003abc <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8003abe:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	4d25      	ldr	r5, [pc, #148]	; (8003b58 <DMA2D_SetConfig+0x9c>)
 8003ac2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003ac4:	fa95 f5a5 	rbit	r5, r5
 8003ac8:	f006 4740 	and.w	r7, r6, #3221225472	; 0xc0000000
 8003acc:	fab5 f585 	clz	r5, r5
 8003ad0:	9e05      	ldr	r6, [sp, #20]
 8003ad2:	40ab      	lsls	r3, r5
 8003ad4:	433e      	orrs	r6, r7
 8003ad6:	4333      	orrs	r3, r6
 8003ad8:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003ada:	6843      	ldr	r3, [r0, #4]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003adc:	63e2      	str	r2, [r4, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003ade:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ae2:	d136      	bne.n	8003b52 <DMA2D_SetConfig+0x96>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003ae4:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003ae8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003aec:	f401 427f 	and.w	r2, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003af0:	b2cd      	uxtb	r5, r1
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003af2:	6881      	ldr	r1, [r0, #8]
 8003af4:	b921      	cbnz	r1, 8003b00 <DMA2D_SetConfig+0x44>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003af6:	4333      	orrs	r3, r6
 8003af8:	4313      	orrs	r3, r2
 8003afa:	ea43 0105 	orr.w	r1, r3, r5
 8003afe:	e026      	b.n	8003b4e <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b00:	2901      	cmp	r1, #1
 8003b02:	d103      	bne.n	8003b0c <DMA2D_SetConfig+0x50>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8003b04:	431a      	orrs	r2, r3
 8003b06:	ea42 0105 	orr.w	r1, r2, r5
 8003b0a:	e020      	b.n	8003b4e <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003b0c:	2902      	cmp	r1, #2
 8003b0e:	d107      	bne.n	8003b20 <DMA2D_SetConfig+0x64>
    {
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 10);
      tmp4 = (tmp4 >> 3 );
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8003b10:	0cd8      	lsrs	r0, r3, #19
 8003b12:	0a92      	lsrs	r2, r2, #10
 8003b14:	02c0      	lsls	r0, r0, #11
 8003b16:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 8003b1a:	ea42 01d5 	orr.w	r1, r2, r5, lsr #3
 8003b1e:	e016      	b.n	8003b4e <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003b20:	2903      	cmp	r1, #3
 8003b22:	d10a      	bne.n	8003b3a <DMA2D_SetConfig+0x7e>
    { 
      tmp1 = (tmp1 >> 31);
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 11);
      tmp4 = (tmp4 >> 3 );      
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8003b24:	0cd8      	lsrs	r0, r3, #19
 8003b26:	0ad2      	lsrs	r2, r2, #11
 8003b28:	0280      	lsls	r0, r0, #10
 8003b2a:	0ff3      	lsrs	r3, r6, #31
 8003b2c:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 8003b30:	ea42 01d5 	orr.w	r1, r2, r5, lsr #3
 8003b34:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8003b38:	e009      	b.n	8003b4e <DMA2D_SetConfig+0x92>
    {
      tmp1 = (tmp1 >> 28);
      tmp2 = (tmp2 >> 20);
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8003b3a:	0d18      	lsrs	r0, r3, #20
 8003b3c:	0b12      	lsrs	r2, r2, #12
 8003b3e:	0200      	lsls	r0, r0, #8
 8003b40:	0f33      	lsrs	r3, r6, #28
 8003b42:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8003b46:	ea42 1115 	orr.w	r1, r2, r5, lsr #4
 8003b4a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8003b4e:	63a1      	str	r1, [r4, #56]	; 0x38
 8003b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003b52:	60e1      	str	r1, [r4, #12]
 8003b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	3fff0000 	.word	0x3fff0000

08003b5c <HAL_DMA2D_Init>:
  * @param  hdma2d: pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8003b5c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003b5e:	4604      	mov	r4, r0
 8003b60:	b330      	cbz	r0, 8003bb0 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b6a:	b91b      	cbnz	r3, 8003b74 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b6c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b70:	f00a fe40 	bl	800e7f4 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003b74:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_POSITION_OPFCCR_RBS));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b76:	2000      	movs	r0, #0
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003b78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8003b84:	6862      	ldr	r2, [r4, #4]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8c:	f022 0107 	bic.w	r1, r2, #7
 8003b90:	68a2      	ldr	r2, [r4, #8]
 8003b92:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003b94:	68e1      	ldr	r1, [r4, #12]

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b96:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b9a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8003b9e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003ba6:	2301      	movs	r3, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_POSITION_OPFCCR_RBS));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ba8:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003baa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8003bae:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
  {
     return HAL_ERROR;
 8003bb0:	2001      	movs	r0, #1

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;

  return HAL_OK;
}
 8003bb2:	bd10      	pop	{r4, pc}

08003bb4 <HAL_DMA2D_Start>:
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003bb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bb6:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003bba:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bbc:	2c01      	cmp	r4, #1
 8003bbe:	f04f 0402 	mov.w	r4, #2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_DMA2D_Start+0x2e>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bc4:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bc8:	2601      	movs	r6, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003bca:	9c06      	ldr	r4, [sp, #24]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bcc:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003bd0:	9400      	str	r4, [sp, #0]
 8003bd2:	f7ff ff73 	bl	8003abc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003bd6:	682a      	ldr	r2, [r5, #0]

  return HAL_OK;
 8003bd8:	2000      	movs	r0, #0
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	4333      	orrs	r3, r6
 8003bde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003be0:	e000      	b.n	8003be4 <HAL_DMA2D_Start+0x30>
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003be2:	4620      	mov	r0, r4

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);

  return HAL_OK;
}
 8003be4:	b002      	add	sp, #8
 8003be6:	bd70      	pop	{r4, r5, r6, pc}

08003be8 <HAL_DMA2D_PollForTransfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  
 8003be8:	2300      	movs	r3, #0
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  
 8003bec:	9301      	str	r3, [sp, #4]
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003bee:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8003bf0:	6803      	ldr	r3, [r0, #0]
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003bf2:	460d      	mov	r5, r1
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	07db      	lsls	r3, r3, #31
 8003bf8:	d404      	bmi.n	8003c04 <HAL_DMA2D_PollForTransfer+0x1c>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003bfa:	6823      	ldr	r3, [r4, #0]
 8003bfc:	69da      	ldr	r2, [r3, #28]
 8003bfe:	0696      	lsls	r6, r2, #26
 8003c00:	d527      	bpl.n	8003c52 <HAL_DMA2D_PollForTransfer+0x6a>
 8003c02:	e033      	b.n	8003c6c <HAL_DMA2D_PollForTransfer+0x84>

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003c04:	f7ff fcdc 	bl	80035c0 <HAL_GetTick>
 8003c08:	4606      	mov	r6, r0

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	0792      	lsls	r2, r2, #30
 8003c10:	d4f3      	bmi.n	8003bfa <HAL_DMA2D_PollForTransfer+0x12>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8003c16:	9a01      	ldr	r2, [sp, #4]
 8003c18:	f012 0f21 	tst.w	r2, #33	; 0x21
 8003c1c:	d00f      	beq.n	8003c3e <HAL_DMA2D_PollForTransfer+0x56>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8003c1e:	9a01      	ldr	r2, [sp, #4]
 8003c20:	0695      	lsls	r5, r2, #26
 8003c22:	d503      	bpl.n	8003c2c <HAL_DMA2D_PollForTransfer+0x44>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8003c24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c26:	f042 0202 	orr.w	r2, r2, #2
 8003c2a:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8003c2c:	9a01      	ldr	r2, [sp, #4]
 8003c2e:	07d0      	lsls	r0, r2, #31
 8003c30:	d503      	bpl.n	8003c3a <HAL_DMA2D_PollForTransfer+0x52>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8003c32:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c3a:	2221      	movs	r2, #33	; 0x21
 8003c3c:	e03b      	b.n	8003cb6 <HAL_DMA2D_PollForTransfer+0xce>
        __HAL_UNLOCK(hdma2d);
        
        return HAL_ERROR;
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c3e:	1c69      	adds	r1, r5, #1
 8003c40:	d0e4      	beq.n	8003c0c <HAL_DMA2D_PollForTransfer+0x24>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003c42:	2d00      	cmp	r5, #0
 8003c44:	d041      	beq.n	8003cca <HAL_DMA2D_PollForTransfer+0xe2>
 8003c46:	f7ff fcbb 	bl	80035c0 <HAL_GetTick>
 8003c4a:	1b80      	subs	r0, r0, r6
 8003c4c:	4285      	cmp	r5, r0
 8003c4e:	d2dc      	bcs.n	8003c0a <HAL_DMA2D_PollForTransfer+0x22>
 8003c50:	e03b      	b.n	8003cca <HAL_DMA2D_PollForTransfer+0xe2>
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003c54:	069b      	lsls	r3, r3, #26
 8003c56:	d409      	bmi.n	8003c6c <HAL_DMA2D_PollForTransfer+0x84>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c58:	6823      	ldr	r3, [r4, #0]
 8003c5a:	2212      	movs	r2, #18
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c5c:	2000      	movs	r0, #0
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c5e:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c60:	2301      	movs	r3, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c62:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
  
  return HAL_OK;
 8003c6a:	e040      	b.n	8003cee <HAL_DMA2D_PollForTransfer+0x106>
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7ff fca8 	bl	80035c0 <HAL_GetTick>
 8003c70:	4606      	mov	r6, r0
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003c72:	e03a      	b.n	8003cea <HAL_DMA2D_PollForTransfer+0x102>
        __HAL_UNLOCK(hdma2d);
          
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c74:	1c69      	adds	r1, r5, #1
 8003c76:	d127      	bne.n	8003cc8 <HAL_DMA2D_PollForTransfer+0xe0>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	06d2      	lsls	r2, r2, #27
 8003c7c:	d4ec      	bmi.n	8003c58 <HAL_DMA2D_PollForTransfer+0x70>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8003c82:	9a01      	ldr	r2, [sp, #4]
 8003c84:	f012 0f29 	tst.w	r2, #41	; 0x29
 8003c88:	d0f4      	beq.n	8003c74 <HAL_DMA2D_PollForTransfer+0x8c>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8003c8a:	9a01      	ldr	r2, [sp, #4]
 8003c8c:	0716      	lsls	r6, r2, #28
 8003c8e:	d503      	bpl.n	8003c98 <HAL_DMA2D_PollForTransfer+0xb0>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8003c90:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c92:	f042 0204 	orr.w	r2, r2, #4
 8003c96:	63e2      	str	r2, [r4, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8003c98:	9a01      	ldr	r2, [sp, #4]
 8003c9a:	0695      	lsls	r5, r2, #26
 8003c9c:	d503      	bpl.n	8003ca6 <HAL_DMA2D_PollForTransfer+0xbe>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8003c9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003ca0:	f042 0202 	orr.w	r2, r2, #2
 8003ca4:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8003ca6:	9a01      	ldr	r2, [sp, #4]
 8003ca8:	07d0      	lsls	r0, r2, #31
 8003caa:	d503      	bpl.n	8003cb4 <HAL_DMA2D_PollForTransfer+0xcc>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8003cac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003cb4:	2229      	movs	r2, #41	; 0x29
 8003cb6:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003cb8:	2304      	movs	r3, #4
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
          
        return HAL_ERROR;      
 8003cba:	2001      	movs	r0, #1
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003cbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          
        return HAL_ERROR;      
 8003cc6:	e012      	b.n	8003cee <HAL_DMA2D_PollForTransfer+0x106>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003cc8:	b955      	cbnz	r5, 8003ce0 <HAL_DMA2D_PollForTransfer+0xf8>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003cca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003ccc:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003cce:	f043 0320 	orr.w	r3, r3, #32
 8003cd2:	63e3      	str	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003cd4:	2300      	movs	r3, #0
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003cd6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003cda:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8003cde:	e006      	b.n	8003cee <HAL_DMA2D_PollForTransfer+0x106>
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003ce0:	f7ff fc6e 	bl	80035c0 <HAL_GetTick>
 8003ce4:	1b80      	subs	r0, r0, r6
 8003ce6:	4285      	cmp	r5, r0
 8003ce8:	d3ef      	bcc.n	8003cca <HAL_DMA2D_PollForTransfer+0xe2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	e7c4      	b.n	8003c78 <HAL_DMA2D_PollForTransfer+0x90>
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
  
  return HAL_OK;
}
 8003cee:	b002      	add	sp, #8
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cf4 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cf4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8003cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d00:	d03a      	beq.n	8003d78 <HAL_DMA2D_ConfigLayer+0x84>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8003d02:	010e      	lsls	r6, r1, #4
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d04:	2201      	movs	r2, #1
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003d06:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8003d0a:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8003d0e:	1984      	adds	r4, r0, r6
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d10:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8003d14:	69e7      	ldr	r7, [r4, #28]
 8003d16:	fa93 f3a3 	rbit	r3, r3
 8003d1a:	fab3 f283 	clz	r2, r3
 8003d1e:	6a23      	ldr	r3, [r4, #32]
 8003d20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003d22:	4093      	lsls	r3, r2
 8003d24:	6804      	ldr	r4, [r0, #0]
 8003d26:	ea43 0207 	orr.w	r2, r3, r7
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_POSITION_BGPFCCR_RBS);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d2a:	3f09      	subs	r7, #9
 8003d2c:	2f01      	cmp	r7, #1
 8003d2e:	d804      	bhi.n	8003d3a <HAL_DMA2D_ConfigLayer+0x46>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d30:	f005 437f 	and.w	r3, r5, #4278190080	; 0xff000000
 8003d34:	4313      	orrs	r3, r2
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8003d36:	b951      	cbnz	r1, 8003d4e <HAL_DMA2D_ConfigLayer+0x5a>
 8003d38:	e020      	b.n	8003d7c <HAL_DMA2D_ConfigLayer+0x88>
 8003d3a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003d3e:	fa93 f3a3 	rbit	r3, r3
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	fa05 f303 	lsl.w	r3, r5, r3
 8003d4a:	4313      	orrs	r3, r2
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8003d4c:	b311      	cbz	r1, 8003d94 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d4e:	69e1      	ldr	r1, [r4, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003d50:	4406      	add	r6, r0
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d52:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <HAL_DMA2D_ConfigLayer+0xb0>)
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d54:	2f01      	cmp	r7, #1
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d56:	ea02 0201 	and.w	r2, r2, r1
 8003d5a:	ea43 0302 	orr.w	r3, r3, r2
 8003d5e:	61e3      	str	r3, [r4, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003d60:	69b3      	ldr	r3, [r6, #24]
 8003d62:	6123      	str	r3, [r4, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d64:	d802      	bhi.n	8003d6c <HAL_DMA2D_ConfigLayer+0x78>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003d66:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8003d6a:	6225      	str	r5, [r4, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8003d72:	2300      	movs	r3, #0
 8003d74:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d7e:	4a09      	ldr	r2, [pc, #36]	; (8003da4 <HAL_DMA2D_ConfigLayer+0xb0>)
 8003d80:	400a      	ands	r2, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	6263      	str	r3, [r4, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d86:	6983      	ldr	r3, [r0, #24]
 8003d88:	61a3      	str	r3, [r4, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d90:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d92:	e7eb      	b.n	8003d6c <HAL_DMA2D_ConfigLayer+0x78>
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d96:	4a03      	ldr	r2, [pc, #12]	; (8003da4 <HAL_DMA2D_ConfigLayer+0xb0>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	6263      	str	r3, [r4, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d9e:	6983      	ldr	r3, [r0, #24]
 8003da0:	61a3      	str	r3, [r4, #24]
 8003da2:	e7e3      	b.n	8003d6c <HAL_DMA2D_ConfigLayer+0x78>
 8003da4:	00fcfff0 	.word	0x00fcfff0

08003da8 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8003da8:	2300      	movs	r3, #0
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003daa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003dac:	f241 0418 	movw	r4, #4120	; 0x1018
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8003db0:	9301      	str	r3, [sp, #4]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003db2:	6803      	ldr	r3, [r0, #0]
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003db4:	4605      	mov	r5, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003db6:	2001      	movs	r0, #1
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003db8:	591a      	ldr	r2, [r3, r4]
 8003dba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003dbe:	511a      	str	r2, [r3, r4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003dc0:	591b      	ldr	r3, [r3, r4]
 8003dc2:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dc4:	f7ff fc02 	bl	80035cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	9a01      	ldr	r2, [sp, #4]
 8003dcc:	511a      	str	r2, [r3, r4]
}
 8003dce:	b003      	add	sp, #12
 8003dd0:	bd30      	pop	{r4, r5, pc}
	...

08003dd4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003dd4:	b570      	push	{r4, r5, r6, lr}
 8003dd6:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003dd8:	b129      	cbz	r1, 8003de6 <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003dda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dde:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003de0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de4:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003de6:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003de8:	6821      	ldr	r1, [r4, #0]
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	68e2      	ldr	r2, [r4, #12]
 8003dee:	68a3      	ldr	r3, [r4, #8]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003df0:	680d      	ldr	r5, [r1, #0]
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003df2:	bf08      	it	eq
 8003df4:	f44f 6080 	moveq.w	r0, #1024	; 0x400
 8003df8:	ea42 0203 	orr.w	r2, r2, r3
 8003dfc:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <ETH_MACDMAConfig+0xe4>)
 8003dfe:	bf18      	it	ne
 8003e00:	2000      	movne	r0, #0
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	402b      	ands	r3, r5
 8003e08:	4313      	orrs	r3, r2
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003e0a:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e0c:	2001      	movs	r0, #1
                       macinit.AutomaticPadCRCStrip | 
                       macinit.BackOffLimit | 
                       macinit.DeferralCheck);
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003e0e:	600b      	str	r3, [r1, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003e10:	680d      	ldr	r5, [r1, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e12:	f7ff fbdb 	bl	80035cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003e16:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e18:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e1a:	2001      	movs	r0, #1
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->MACCR = tmpreg; 
 8003e1c:	601d      	str	r5, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e1e:	605a      	str	r2, [r3, #4]
                                        macinit.MulticastFramesFilter |
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003e20:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e22:	f7ff fbd3 	bl	80035cc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003e26:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003e28:	f64f 7241 	movw	r2, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e2c:	2001      	movs	r0, #1
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
   (heth->Instance)->MACFFR = tmpreg;
 8003e2e:	605d      	str	r5, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003e30:	2500      	movs	r5, #0
 8003e32:	609d      	str	r5, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003e34:	60dd      	str	r5, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003e36:	6999      	ldr	r1, [r3, #24]
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003e38:	400a      	ands	r2, r1
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
                        macinit.UnicastPauseFrameDetect | 
                        macinit.ReceiveFlowControl |
                        macinit.TransmitFlowControl); 
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003e3e:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003e40:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e42:	f7ff fbc3 	bl	80035cc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003e46:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e48:	2001      	movs	r0, #1
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
   (heth->Instance)->MACFCR = tmpreg;
 8003e4a:	619e      	str	r6, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003e4c:	61dd      	str	r5, [r3, #28]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003e4e:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e50:	f7ff fbbc 	bl	80035cc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003e54:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e56:	2001      	movs	r0, #1
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <ETH_MACDMAConfig+0xe8>)
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
    (heth->Instance)->MACVLANTR = tmpreg;
 8003e5a:	61d5      	str	r5, [r2, #28]
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
    dmainit.DescriptorSkipLength = 0x0;
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003e5c:	f241 0518 	movw	r5, #4120	; 0x1018
 8003e60:	5951      	ldr	r1, [r2, r5]
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003e62:	400b      	ands	r3, r1
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e64:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8003e68:	f043 0304 	orr.w	r3, r3, #4
                         dmainit.ForwardUndersizedGoodFrames |
                         dmainit.ReceiveThresholdControl |
                         dmainit.SecondFrameOperate);
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003e6c:	5153      	str	r3, [r2, r5]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003e6e:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e70:	f7ff fbac 	bl	80035cc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003e74:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e76:	2001      	movs	r0, #1
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e78:	4a11      	ldr	r2, [pc, #68]	; (8003ec0 <ETH_MACDMAConfig+0xec>)
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
    (heth->Instance)->DMAOMR = tmpreg;
 8003e7a:	515e      	str	r6, [r3, r5]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e80:	601a      	str	r2, [r3, #0]
                                          dmainit.DMAArbitration |
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003e82:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e84:	f7ff fba2 	bl	80035cc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003e88:	6822      	ldr	r2, [r4, #0]
 8003e8a:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8003e8e:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003e90:	69a3      	ldr	r3, [r4, #24]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <ETH_MACDMAConfig+0xd2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003e96:	f241 011c 	movw	r1, #4124	; 0x101c
 8003e9a:	5853      	ldr	r3, [r2, r1]
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ea4:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ea6:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003ea8:	4a06      	ldr	r2, [pc, #24]	; (8003ec4 <ETH_MACDMAConfig+0xf0>)
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003eaa:	8899      	ldrh	r1, [r3, #4]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003eac:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003eae:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <ETH_MACDMAConfig+0xf4>)
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	bf00      	nop
 8003eb8:	ff20810f 	.word	0xff20810f
 8003ebc:	f8de3f23 	.word	0xf8de3f23
 8003ec0:	02c12080 	.word	0x02c12080
 8003ec4:	40028040 	.word	0x40028040
 8003ec8:	40028044 	.word	0x40028044

08003ecc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ece:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8003ed2:	2c01      	cmp	r4, #1
 8003ed4:	f04f 0402 	mov.w	r4, #2
 8003ed8:	d033      	beq.n	8003f42 <HAL_ETH_DMATxDescListInit+0x76>
 8003eda:	2501      	movs	r5, #1
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003edc:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003ee0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8003ee4:	f101 0420 	add.w	r4, r1, #32
{
  uint32_t i = 0;
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ee8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003eec:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003ef0:	2500      	movs	r5, #0
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8003ef2:	f103 3cff 	add.w	ip, r3, #4294967295
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003ef6:	62c1      	str	r1, [r0, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003ef8:	429d      	cmp	r5, r3
 8003efa:	d016      	beq.n	8003f2a <HAL_ETH_DMATxDescListInit+0x5e>
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003efc:	fb0e 2605 	mla	r6, lr, r5, r2
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003f00:	f844 7c20 	str.w	r7, [r4, #-32]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003f04:	f844 6c18 	str.w	r6, [r4, #-24]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003f08:	69c6      	ldr	r6, [r0, #28]
 8003f0a:	b92e      	cbnz	r6, 8003f18 <HAL_ETH_DMATxDescListInit+0x4c>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003f0c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8003f10:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8003f14:	f844 6c20 	str.w	r6, [r4, #-32]
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003f18:	4565      	cmp	r5, ip
 8003f1a:	bf2c      	ite	cs
 8003f1c:	460e      	movcs	r6, r1
 8003f1e:	4626      	movcc	r6, r4
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003f20:	3501      	adds	r5, #1
 8003f22:	3420      	adds	r4, #32
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003f24:	f844 6c34 	str.w	r6, [r4, #-52]
 8003f28:	e7e6      	b.n	8003ef8 <HAL_ETH_DMATxDescListInit+0x2c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003f2a:	6802      	ldr	r2, [r0, #0]
 8003f2c:	f241 0310 	movw	r3, #4112	; 0x1010
 8003f30:	50d1      	str	r1, [r2, r3]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003f3e:	4618      	mov	r0, r3
 8003f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
  uint32_t i = 0;
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f42:	4620      	mov	r0, r4
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_OK;
}
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f46 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t i = 0;
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f4a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8003f4e:	2c01      	cmp	r4, #1
 8003f50:	f04f 0402 	mov.w	r4, #2
 8003f54:	d030      	beq.n	8003fb8 <HAL_ETH_DMARxDescListInit+0x72>
 8003f56:	2501      	movs	r5, #1
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f58:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003f5c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003f60:	f101 0420 	add.w	r4, r1, #32
{
  uint32_t i = 0;
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f64:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003f68:	f244 57f4 	movw	r7, #17908	; 0x45f4
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003f6c:	2500      	movs	r5, #0
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003f6e:	f240 5ef4 	movw	lr, #1524	; 0x5f4
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003f72:	f103 3cff 	add.w	ip, r3, #4294967295
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003f76:	6281      	str	r1, [r0, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003f78:	429d      	cmp	r5, r3
 8003f7a:	d010      	beq.n	8003f9e <HAL_ETH_DMARxDescListInit+0x58>
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003f7c:	fb0e 2805 	mla	r8, lr, r5, r2
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003f80:	f844 6c20 	str.w	r6, [r4, #-32]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003f84:	f844 8c18 	str.w	r8, [r4, #-24]
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003f88:	4565      	cmp	r5, ip
 8003f8a:	bf2c      	ite	cs
 8003f8c:	4688      	movcs	r8, r1
 8003f8e:	46a0      	movcc	r8, r4
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003f90:	f844 7c1c 	str.w	r7, [r4, #-28]
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003f94:	3501      	adds	r5, #1
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003f96:	f844 8c14 	str.w	r8, [r4, #-20]
 8003f9a:	3420      	adds	r4, #32
 8003f9c:	e7ec      	b.n	8003f78 <HAL_ETH_DMARxDescListInit+0x32>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003f9e:	6802      	ldr	r2, [r0, #0]
 8003fa0:	f241 030c 	movw	r3, #4108	; 0x100c
 8003fa4:	50d1      	str	r1, [r2, r3]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003fac:	2300      	movs	r3, #0
 8003fae:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  uint32_t i = 0;
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003fb8:	4620      	mov	r0, r4
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_OK;
}
 8003fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003fc0 <HAL_ETH_TransmitFrame>:
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
  uint32_t bufcount = 0, size = 0, i = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003fc0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f04f 0302 	mov.w	r3, #2
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003fca:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t bufcount = 0, size = 0, i = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003fcc:	d06a      	beq.n	80040a4 <HAL_ETH_TransmitFrame+0xe4>
 8003fce:	2201      	movs	r2, #1
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003fd0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
  uint32_t bufcount = 0, size = 0, i = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003fd4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  if (FrameLength == 0) 
 8003fd8:	b921      	cbnz	r1, 8003fe4 <HAL_ETH_TransmitFrame+0x24>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003fda:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003fde:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
 8003fe2:	e009      	b.n	8003ff8 <HAL_ETH_TransmitFrame+0x38>
    
    return  HAL_ERROR;                                    
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003fe4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003fe6:	681c      	ldr	r4, [r3, #0]
 8003fe8:	2c00      	cmp	r4, #0
 8003fea:	da07      	bge.n	8003ffc <HAL_ETH_TransmitFrame+0x3c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003fec:	2312      	movs	r3, #18
 8003fee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    
    return HAL_ERROR;
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003ffc:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8004000:	42a1      	cmp	r1, r4
 8004002:	d914      	bls.n	800402e <HAL_ETH_TransmitFrame+0x6e>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004004:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004008:	fb04 1412 	mls	r4, r4, r2, r1
 800400c:	b10c      	cbz	r4, 8004012 <HAL_ETH_TransmitFrame+0x52>
    {
      bufcount++;
 800400e:	3201      	adds	r2, #1
 8004010:	e001      	b.n	8004016 <HAL_ETH_TransmitFrame+0x56>
  }
  else 
  {  
    bufcount = 1;
  }
  if (bufcount == 1)
 8004012:	2a01      	cmp	r2, #1
 8004014:	d00b      	beq.n	800402e <HAL_ETH_TransmitFrame+0x6e>
      if (i == (bufcount-1))
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004016:	4c24      	ldr	r4, [pc, #144]	; (80040a8 <HAL_ETH_TransmitFrame+0xe8>)
 8004018:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800401c:	f240 56f4 	movw	r6, #1524	; 0x5f4
      
      if (i == (bufcount-1))
 8004020:	1e57      	subs	r7, r2, #1
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004022:	fb04 1102 	mla	r1, r4, r2, r1
 8004026:	2400      	movs	r4, #0
 8004028:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800402c:	e01c      	b.n	8004068 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = 1;
  }
  if (bufcount == 1)
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800402e:	681a      	ldr	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004030:	f3c1 010c 	ubfx	r1, r1, #0, #13
    bufcount = 1;
  }
  if (bufcount == 1)
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004034:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004038:	6059      	str	r1, [r3, #4]
    bufcount = 1;
  }
  if (bufcount == 1)
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800403a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004042:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	e01a      	b.n	800407e <HAL_ETH_TransmitFrame+0xbe>
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
      
      if (i == (bufcount-1))
 8004048:	42a7      	cmp	r7, r4
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800404a:	605e      	str	r6, [r3, #4]
      
      if (i == (bufcount-1))
 800404c:	d104      	bne.n	8004058 <HAL_ETH_TransmitFrame+0x98>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800404e:	681d      	ldr	r5, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004050:	6059      	str	r1, [r3, #4]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
      
      if (i == (bufcount-1))
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004052:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004056:	601d      	str	r5, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004058:	681d      	ldr	r5, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800405a:	3401      	adds	r4, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800405c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8004060:	4294      	cmp	r4, r2
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004062:	601d      	str	r5, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004064:	68db      	ldr	r3, [r3, #12]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8004066:	d00a      	beq.n	800407e <HAL_ETH_TransmitFrame+0xbe>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004068:	681d      	ldr	r5, [r3, #0]
 800406a:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 800406e:	601d      	str	r5, [r3, #0]
      
      if (i == 0) 
 8004070:	2c00      	cmp	r4, #0
 8004072:	d1e9      	bne.n	8004048 <HAL_ETH_TransmitFrame+0x88>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004074:	681d      	ldr	r5, [r3, #0]
 8004076:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800407a:	601d      	str	r5, [r3, #0]
 800407c:	e7e4      	b.n	8004048 <HAL_ETH_TransmitFrame+0x88>
 800407e:	62c3      	str	r3, [r0, #44]	; 0x2c
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004080:	f241 0214 	movw	r2, #4116	; 0x1014
 8004084:	6803      	ldr	r3, [r0, #0]
 8004086:	5899      	ldr	r1, [r3, r2]
 8004088:	0749      	lsls	r1, r1, #29
 800408a:	d505      	bpl.n	8004098 <HAL_ETH_TransmitFrame+0xd8>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800408c:	2104      	movs	r1, #4
 800408e:	5099      	str	r1, [r3, r2]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004090:	2100      	movs	r1, #0
 8004092:	f241 0204 	movw	r2, #4100	; 0x1004
 8004096:	5099      	str	r1, [r3, r2]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004098:	2301      	movs	r3, #1
 800409a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800409e:	2300      	movs	r3, #0
 80040a0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
  uint32_t bufcount = 0, size = 0, i = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80040a4:	4618      	mov	r0, r3
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_OK;
}
 80040a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a8:	fffffa0c 	.word	0xfffffa0c

080040ac <HAL_ETH_GetReceivedFrame_IT>:
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
  uint32_t descriptorscancounter = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80040ac:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f04f 0302 	mov.w	r3, #2
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80040b6:	b530      	push	{r4, r5, lr}
  uint32_t descriptorscancounter = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80040b8:	d03b      	beq.n	8004132 <HAL_ETH_GetReceivedFrame_IT+0x86>
 80040ba:	2201      	movs	r2, #1
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80040bc:	2406      	movs	r4, #6
  
  /* Process Locked */
  __HAL_LOCK(heth);
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80040be:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
      heth->RxFrameInfos.SegCount = 1;   
 80040c2:	4611      	mov	r1, r2
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
  uint32_t descriptorscancounter = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80040c4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80040c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2a00      	cmp	r2, #0
 80040ce:	db2a      	blt.n	8004126 <HAL_ETH_GetReceivedFrame_IT+0x7a>
 80040d0:	3c01      	subs	r4, #1
 80040d2:	d028      	beq.n	8004126 <HAL_ETH_GetReceivedFrame_IT+0x7a>
    /* Just for security */
    descriptorscancounter++;
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	68dd      	ldr	r5, [r3, #12]
 80040d8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80040dc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80040e0:	d102      	bne.n	80040e8 <HAL_ETH_GetReceivedFrame_IT+0x3c>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80040e2:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80040e4:	6381      	str	r1, [r0, #56]	; 0x38
 80040e6:	e006      	b.n	80040f6 <HAL_ETH_GetReceivedFrame_IT+0x4a>
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	f412 7f40 	tst.w	r2, #768	; 0x300
 80040ee:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80040f0:	d103      	bne.n	80040fa <HAL_ETH_GetReceivedFrame_IT+0x4e>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80040f2:	3201      	adds	r2, #1
 80040f4:	6382      	str	r2, [r0, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80040f6:	6285      	str	r5, [r0, #40]	; 0x28
 80040f8:	e7e6      	b.n	80040c8 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80040fa:	3201      	adds	r2, #1
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80040fc:	6343      	str	r3, [r0, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80040fe:	2a01      	cmp	r2, #1
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004100:	6382      	str	r2, [r0, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004102:	bf08      	it	eq
 8004104:	6303      	streq	r3, [r0, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f3c3 430d 	ubfx	r3, r3, #16, #14
 800410c:	3b04      	subs	r3, #4
 800410e:	63c3      	str	r3, [r0, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004110:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004112:	689b      	ldr	r3, [r3, #8]
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004114:	6285      	str	r5, [r0, #40]	; 0x28
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004116:	6403      	str	r3, [r0, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004118:	2301      	movs	r3, #1
 800411a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800411e:	2300      	movs	r3, #0
 8004120:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8004124:	e005      	b.n	8004132 <HAL_ETH_GetReceivedFrame_IT+0x86>
      return HAL_OK;
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004126:	2301      	movs	r3, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004128:	2200      	movs	r2, #0
      return HAL_OK;
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800412a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800412e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
  uint32_t descriptorscancounter = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004132:	4618      	mov	r0, r3
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_ERROR;
}
 8004134:	bd30      	pop	{r4, r5, pc}

08004136 <HAL_ETH_TxCpltCallback>:
 8004136:	4770      	bx	lr

08004138 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004138:	4770      	bx	lr

0800413a <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800413a:	b570      	push	{r4, r5, r6, lr}
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800413c:	6802      	ldr	r2, [r0, #0]
 800413e:	f241 0614 	movw	r6, #4116	; 0x1014
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004142:	4604      	mov	r4, r0
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004144:	5993      	ldr	r3, [r2, r6]
 8004146:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 800414a:	d00b      	beq.n	8004164 <HAL_ETH_IRQHandler+0x2a>
  {
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800414c:	f00a fa8c 	bl	800e668 <HAL_ETH_RxCpltCallback>
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	2240      	movs	r2, #64	; 0x40
 8004154:	519a      	str	r2, [r3, r6]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004156:	2301      	movs	r3, #1
 8004158:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800415c:	2300      	movs	r3, #0
 800415e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004162:	e00b      	b.n	800417c <HAL_ETH_IRQHandler+0x42>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004164:	5993      	ldr	r3, [r2, r6]
 8004166:	07da      	lsls	r2, r3, #31
 8004168:	d508      	bpl.n	800417c <HAL_ETH_IRQHandler+0x42>
  {
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800416a:	f7ff ffe4 	bl	8004136 <HAL_ETH_TxCpltCallback>
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800416e:	2301      	movs	r3, #1
 8004170:	6822      	ldr	r2, [r4, #0]
 8004172:	5193      	str	r3, [r2, r6]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004174:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004178:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	f241 0514 	movw	r5, #4116	; 0x1014
 8004182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004186:	515a      	str	r2, [r3, r5]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004188:	595b      	ldr	r3, [r3, r5]
 800418a:	041b      	lsls	r3, r3, #16
 800418c:	d50c      	bpl.n	80041a8 <HAL_ETH_IRQHandler+0x6e>
  {
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800418e:	4620      	mov	r0, r4
 8004190:	f7ff ffd2 	bl	8004138 <HAL_ETH_ErrorCallback>

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800419a:	515a      	str	r2, [r3, r5]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800419c:	2301      	movs	r3, #1
 800419e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80041a2:	2300      	movs	r3, #0
 80041a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041a8:	bd70      	pop	{r4, r5, r6, pc}

080041aa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80041aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80041ac:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80041b0:	4605      	mov	r5, r0
 80041b2:	4616      	mov	r6, r2
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80041b4:	2b82      	cmp	r3, #130	; 0x82
 80041b6:	d031      	beq.n	800421c <HAL_ETH_ReadPHYRegister+0x72>
  {
    return HAL_BUSY;
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80041b8:	2382      	movs	r3, #130	; 0x82
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80041ba:	8a2c      	ldrh	r4, [r5, #16]
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
  {
    return HAL_BUSY;
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80041bc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80041c0:	02e4      	lsls	r4, r4, #11
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80041c2:	6800      	ldr	r0, [r0, #0]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80041c4:	b2a4      	uxth	r4, r4
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80041c6:	6903      	ldr	r3, [r0, #16]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80041c8:	f003 021c 	and.w	r2, r3, #28
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80041cc:	ea44 0302 	orr.w	r3, r4, r2
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80041d0:	018c      	lsls	r4, r1, #6
 80041d2:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80041d6:	431c      	orrs	r4, r3
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80041d8:	f044 0401 	orr.w	r4, r4, #1
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80041dc:	6104      	str	r4, [r0, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80041de:	f7ff f9ef 	bl	80035c0 <HAL_GetTick>
 80041e2:	4607      	mov	r7, r0
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041e4:	f014 0001 	ands.w	r0, r4, #1
 80041e8:	d010      	beq.n	800420c <HAL_ETH_ReadPHYRegister+0x62>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80041ea:	f7ff f9e9 	bl	80035c0 <HAL_GetTick>
 80041ee:	1bc0      	subs	r0, r0, r7
 80041f0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80041f4:	d307      	bcc.n	8004206 <HAL_ETH_ReadPHYRegister+0x5c>
    {
      heth->State= HAL_ETH_STATE_READY;
 80041f6:	2301      	movs	r3, #1
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
    
      return HAL_TIMEOUT;
 80041f8:	2003      	movs	r0, #3
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
    {
      heth->State= HAL_ETH_STATE_READY;
 80041fa:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041fe:	2300      	movs	r3, #0
 8004200:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004206:	682b      	ldr	r3, [r5, #0]
 8004208:	691c      	ldr	r4, [r3, #16]
 800420a:	e7eb      	b.n	80041e4 <HAL_ETH_ReadPHYRegister+0x3a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	b29b      	uxth	r3, r3
 8004212:	6033      	str	r3, [r6, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004214:	2301      	movs	r3, #1
 8004216:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 800421a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
  {
    return HAL_BUSY;
 800421c:	2002      	movs	r0, #2
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 800421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004220 <HAL_ETH_WritePHYRegister>:
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004220:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8004224:	2b42      	cmp	r3, #66	; 0x42
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004226:	b570      	push	{r4, r5, r6, lr}
 8004228:	4605      	mov	r5, r0
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800422a:	d02e      	beq.n	800428a <HAL_ETH_WritePHYRegister+0x6a>
  {
    return HAL_BUSY;
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800422c:	2342      	movs	r3, #66	; 0x42
 800422e:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004230:	b292      	uxth	r2, r2
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
  {
    return HAL_BUSY;
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004232:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8004236:	02e4      	lsls	r4, r4, #11
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004238:	6800      	ldr	r0, [r0, #0]
 800423a:	b2a4      	uxth	r4, r4
 800423c:	6903      	ldr	r3, [r0, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800423e:	6142      	str	r2, [r0, #20]
 8004240:	f003 031c 	and.w	r3, r3, #28
 8004244:	f043 0303 	orr.w	r3, r3, #3
 8004248:	4323      	orrs	r3, r4
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800424a:	018c      	lsls	r4, r1, #6
 800424c:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8004250:	431c      	orrs	r4, r3
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004252:	6104      	str	r4, [r0, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004254:	f7ff f9b4 	bl	80035c0 <HAL_GetTick>
 8004258:	4606      	mov	r6, r0
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800425a:	f014 0001 	ands.w	r0, r4, #1
 800425e:	d010      	beq.n	8004282 <HAL_ETH_WritePHYRegister+0x62>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004260:	f7ff f9ae 	bl	80035c0 <HAL_GetTick>
 8004264:	1b80      	subs	r0, r0, r6
 8004266:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800426a:	d307      	bcc.n	800427c <HAL_ETH_WritePHYRegister+0x5c>
    {
      heth->State= HAL_ETH_STATE_READY;
 800426c:	2301      	movs	r3, #1
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
    
      return HAL_TIMEOUT;
 800426e:	2003      	movs	r0, #3
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
    {
      heth->State= HAL_ETH_STATE_READY;
 8004270:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004274:	2300      	movs	r3, #0
 8004276:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800427a:	bd70      	pop	{r4, r5, r6, pc}
    
      return HAL_TIMEOUT;
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	691c      	ldr	r4, [r3, #16]
 8004280:	e7eb      	b.n	800425a <HAL_ETH_WritePHYRegister+0x3a>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004282:	2301      	movs	r3, #1
 8004284:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8004288:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
  {
    return HAL_BUSY;
 800428a:	2002      	movs	r0, #2
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
  
  /* Return function status */
  return HAL_OK; 
}
 800428c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004290 <HAL_ETH_Init>:
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
  uint32_t tempreg = 0, phyreg = 0;
 8004290:	2300      	movs	r3, #0
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t hclk = 60000000;
  uint32_t tickstart = 0;
  uint32_t err = ETH_SUCCESS;
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004294:	4604      	mov	r4, r0
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
  uint32_t tempreg = 0, phyreg = 0;
 8004296:	9300      	str	r3, [sp, #0]
  uint32_t hclk = 60000000;
  uint32_t tickstart = 0;
  uint32_t err = ETH_SUCCESS;
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004298:	2800      	cmp	r0, #0
 800429a:	f000 80d9 	beq.w	8004450 <HAL_ETH_Init+0x1c0>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800429e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80042a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042a6:	b91b      	cbnz	r3, 80042b0 <HAL_ETH_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80042a8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80042ac:	f00a f974 	bl	800e598 <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b0:	4b69      	ldr	r3, [pc, #420]	; (8004458 <HAL_ETH_Init+0x1c8>)
 80042b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	9b01      	ldr	r3, [sp, #4]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80042c4:	4b65      	ldr	r3, [pc, #404]	; (800445c <HAL_ETH_Init+0x1cc>)
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80042cc:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80042ce:	6859      	ldr	r1, [r3, #4]
 80042d0:	6a22      	ldr	r2, [r4, #32]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80042e4:	f7ff f96c 	bl	80035c0 <HAL_GetTick>
 80042e8:	4605      	mov	r5, r0
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	07d0      	lsls	r0, r2, #31
 80042f4:	d50c      	bpl.n	8004310 <HAL_ETH_Init+0x80>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80042f6:	f7ff f963 	bl	80035c0 <HAL_GetTick>
 80042fa:	1b40      	subs	r0, r0, r5
 80042fc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8004300:	d9f3      	bls.n	80042ea <HAL_ETH_Init+0x5a>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004302:	2503      	movs	r5, #3
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004304:	2300      	movs	r3, #0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004306:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800430a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800430e:	e0a0      	b.n	8004452 <HAL_ETH_Init+0x1c2>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004310:	691d      	ldr	r5, [r3, #16]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004312:	f001 f949 	bl	80055a8 <HAL_RCC_GetHCLKFreq>
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004316:	4b52      	ldr	r3, [pc, #328]	; (8004460 <HAL_ETH_Init+0x1d0>)
 8004318:	4a52      	ldr	r2, [pc, #328]	; (8004464 <HAL_ETH_Init+0x1d4>)
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800431a:	f025 051c 	bic.w	r5, r5, #28
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800431e:	4403      	add	r3, r0
 8004320:	4293      	cmp	r3, r2
 8004322:	d802      	bhi.n	800432a <HAL_ETH_Init+0x9a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004324:	f045 0508 	orr.w	r5, r5, #8
 8004328:	e015      	b.n	8004356 <HAL_ETH_Init+0xc6>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800432a:	4b4f      	ldr	r3, [pc, #316]	; (8004468 <HAL_ETH_Init+0x1d8>)
 800432c:	4a4f      	ldr	r2, [pc, #316]	; (800446c <HAL_ETH_Init+0x1dc>)
 800432e:	4403      	add	r3, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d802      	bhi.n	800433a <HAL_ETH_Init+0xaa>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004334:	f045 050c 	orr.w	r5, r5, #12
 8004338:	e00d      	b.n	8004356 <HAL_ETH_Init+0xc6>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800433a:	4b4d      	ldr	r3, [pc, #308]	; (8004470 <HAL_ETH_Init+0x1e0>)
 800433c:	4a4d      	ldr	r2, [pc, #308]	; (8004474 <HAL_ETH_Init+0x1e4>)
 800433e:	4403      	add	r3, r0
 8004340:	4293      	cmp	r3, r2
 8004342:	d908      	bls.n	8004356 <HAL_ETH_Init+0xc6>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004344:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <HAL_ETH_Init+0x1e8>)
 8004346:	4a4d      	ldr	r2, [pc, #308]	; (800447c <HAL_ETH_Init+0x1ec>)
 8004348:	4403      	add	r3, r0
 800434a:	4293      	cmp	r3, r2
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800434c:	bf94      	ite	ls
 800434e:	f045 0504 	orrls.w	r5, r5, #4
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004352:	f045 0510 	orrhi.w	r5, r5, #16
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004356:	6823      	ldr	r3, [r4, #0]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004358:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800435c:	2100      	movs	r1, #0
 800435e:	4620      	mov	r0, r4
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004360:	611d      	str	r5, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004362:	f7ff ff5d 	bl	8004220 <HAL_ETH_WritePHYRegister>
 8004366:	4605      	mov	r5, r0
 8004368:	2800      	cmp	r0, #0
 800436a:	d15d      	bne.n	8004428 <HAL_ETH_Init+0x198>
    /* Return HAL_ERROR */
    return HAL_ERROR;
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800436c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004370:	f7ff f92c 	bl	80035cc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04b      	beq.n	8004412 <HAL_ETH_Init+0x182>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800437a:	f7ff f921 	bl	80035c0 <HAL_GetTick>
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800437e:	f241 3788 	movw	r7, #5000	; 0x1388
  HAL_Delay(PHY_RESET_DELAY);
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004382:	4606      	mov	r6, r0
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004384:	466a      	mov	r2, sp
 8004386:	2101      	movs	r1, #1
 8004388:	4620      	mov	r0, r4
 800438a:	f7ff ff0e 	bl	80041aa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800438e:	f7ff f917 	bl	80035c0 <HAL_GetTick>
 8004392:	1b80      	subs	r0, r0, r6
 8004394:	42b8      	cmp	r0, r7
 8004396:	d819      	bhi.n	80043cc <HAL_ETH_Init+0x13c>
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
    
        return HAL_TIMEOUT;
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004398:	9b00      	ldr	r3, [sp, #0]
 800439a:	0759      	lsls	r1, r3, #29
 800439c:	d5f2      	bpl.n	8004384 <HAL_ETH_Init+0xf4>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800439e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043a2:	2100      	movs	r1, #0
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7ff ff3b 	bl	8004220 <HAL_ETH_WritePHYRegister>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d13c      	bne.n	8004428 <HAL_ETH_Init+0x198>
      /* Return HAL_ERROR */
      return HAL_ERROR;   
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ae:	f7ff f907 	bl	80035c0 <HAL_GetTick>
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80043b2:	f241 3788 	movw	r7, #5000	; 0x1388
      /* Return HAL_ERROR */
      return HAL_ERROR;   
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80043b6:	4606      	mov	r6, r0
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80043b8:	466a      	mov	r2, sp
 80043ba:	2101      	movs	r1, #1
 80043bc:	4620      	mov	r0, r4
 80043be:	f7ff fef4 	bl	80041aa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80043c2:	f7ff f8fd 	bl	80035c0 <HAL_GetTick>
 80043c6:	1b80      	subs	r0, r0, r6
 80043c8:	42b8      	cmp	r0, r7
 80043ca:	d90b      	bls.n	80043e4 <HAL_ETH_Init+0x154>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80043cc:	2101      	movs	r1, #1
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff fd00 	bl	8003dd4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80043d4:	2301      	movs	r3, #1
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
    
        return HAL_TIMEOUT;
 80043d6:	2503      	movs	r5, #3
        err = ETH_ERROR;
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
        
        heth->State= HAL_ETH_STATE_READY;
 80043d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80043dc:	2300      	movs	r3, #0
 80043de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80043e2:	e036      	b.n	8004452 <HAL_ETH_Init+0x1c2>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80043e4:	9b00      	ldr	r3, [sp, #0]
 80043e6:	069a      	lsls	r2, r3, #26
 80043e8:	d5e6      	bpl.n	80043b8 <HAL_ETH_Init+0x128>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80043ea:	466a      	mov	r2, sp
 80043ec:	211f      	movs	r1, #31
 80043ee:	4620      	mov	r0, r4
 80043f0:	f7ff fedb 	bl	80041aa <HAL_ETH_ReadPHYRegister>
 80043f4:	b9c0      	cbnz	r0, 8004428 <HAL_ETH_Init+0x198>
      /* Return HAL_ERROR */
      return HAL_ERROR;   
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80043f6:	9b00      	ldr	r3, [sp, #0]
 80043f8:	f013 0210 	ands.w	r2, r3, #16
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80043fc:	bf18      	it	ne
 80043fe:	f44f 6200 	movne.w	r2, #2048	; 0x800
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004402:	075b      	lsls	r3, r3, #29
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004404:	bf4c      	ite	mi
 8004406:	2300      	movmi	r3, #0
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004408:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800440c:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800440e:	60a3      	str	r3, [r4, #8]
 8004410:	e016      	b.n	8004440 <HAL_ETH_Init+0x1b0>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8004412:	68a3      	ldr	r3, [r4, #8]
 8004414:	4629      	mov	r1, r5
 8004416:	68e2      	ldr	r2, [r4, #12]
 8004418:	4620      	mov	r0, r4
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8004420:	b292      	uxth	r2, r2
 8004422:	f7ff fefd 	bl	8004220 <HAL_ETH_WritePHYRegister>
 8004426:	b138      	cbz	r0, 8004438 <HAL_ETH_Init+0x1a8>
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004428:	2501      	movs	r5, #1
    {
      /* In case of write timeout */
      err = ETH_ERROR;
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800442a:	2101      	movs	r1, #1
 800442c:	4620      	mov	r0, r4
 800442e:	f7ff fcd1 	bl	8003dd4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004432:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004436:	e00c      	b.n	8004452 <HAL_ETH_Init+0x1c2>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004438:	f640 70ff 	movw	r0, #4095	; 0xfff
 800443c:	f7ff f8c6 	bl	80035cc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004440:	2100      	movs	r1, #0
 8004442:	4620      	mov	r0, r4
 8004444:	f7ff fcc6 	bl	8003dd4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004448:	2301      	movs	r3, #1
 800444a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800444e:	e000      	b.n	8004452 <HAL_ETH_Init+0x1c2>
  uint32_t err = ETH_SUCCESS;
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
  {
    return HAL_ERROR;
 8004450:	2501      	movs	r5, #1
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8004452:	4628      	mov	r0, r5
 8004454:	b003      	add	sp, #12
 8004456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004458:	40023800 	.word	0x40023800
 800445c:	40013800 	.word	0x40013800
 8004460:	feced300 	.word	0xfeced300
 8004464:	00e4e1bf 	.word	0x00e4e1bf
 8004468:	fde9f140 	.word	0xfde9f140
 800446c:	017d783f 	.word	0x017d783f
 8004470:	fc6c7900 	.word	0xfc6c7900
 8004474:	026259ff 	.word	0x026259ff
 8004478:	fa0a1f00 	.word	0xfa0a1f00
 800447c:	02faf07f 	.word	0x02faf07f

08004480 <HAL_ETH_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004480:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8004484:	2b01      	cmp	r3, #1
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004488:	4605      	mov	r5, r0
 800448a:	f04f 0002 	mov.w	r0, #2
  /* Process Locked */
  __HAL_LOCK(heth);
 800448e:	d033      	beq.n	80044f8 <HAL_ETH_Start+0x78>
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
 8004490:	2400      	movs	r4, #0
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004492:	682b      	ldr	r3, [r5, #0]
{  
  /* Process Locked */
  __HAL_LOCK(heth);
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004494:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004498:	2601      	movs	r6, #1
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
 800449a:	9401      	str	r4, [sp, #4]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800449c:	681a      	ldr	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800449e:	4630      	mov	r0, r6
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
  /* Process Locked */
  __HAL_LOCK(heth);
 80044a0:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80044a4:	f042 0208 	orr.w	r2, r2, #8
 80044a8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044ae:	f7ff f88d 	bl	80035cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80044b2:	9a01      	ldr	r2, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044b4:	4630      	mov	r0, r6
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->MACCR = tmpreg;
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	601a      	str	r2, [r3, #0]
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
 80044ba:	9400      	str	r4, [sp, #0]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	f042 0204 	orr.w	r2, r2, #4
 80044c2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044c8:	f7ff f880 	bl	80035cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80044cc:	682b      	ldr	r3, [r5, #0]
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80044ce:	4628      	mov	r0, r5
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->MACCR = tmpreg;
 80044d0:	9a00      	ldr	r2, [sp, #0]
 80044d2:	601a      	str	r2, [r3, #0]
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80044d4:	f7ff fc68 	bl	8003da8 <ETH_FlushTransmitFIFO>
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80044d8:	682a      	ldr	r2, [r5, #0]
 80044da:	f241 0318 	movw	r3, #4120	; 0x1018
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_OK;
 80044de:	4620      	mov	r0, r4
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80044e0:	58d1      	ldr	r1, [r2, r3]
 80044e2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80044e6:	50d1      	str	r1, [r2, r3]
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80044e8:	58d1      	ldr	r1, [r2, r3]
 80044ea:	f041 0102 	orr.w	r1, r1, #2
 80044ee:	50d1      	str	r1, [r2, r3]
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80044f0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044f4:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
}
 80044f8:	b002      	add	sp, #8
 80044fa:	bd70      	pop	{r4, r5, r6, pc}

080044fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004500:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004502:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004504:	4e6f      	ldr	r6, [pc, #444]	; (80046c4 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004506:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004508:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800450a:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 80046cc <HAL_GPIO_Init+0x1d0>
 800450e:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004510:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046d0 <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004514:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8004516:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004518:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800451a:	ea32 0404 	bics.w	r4, r2, r4
 800451e:	f040 80c9 	bne.w	80046b4 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004522:	684c      	ldr	r4, [r1, #4]
 8004524:	f024 0910 	bic.w	r9, r4, #16
 8004528:	f1b9 0f02 	cmp.w	r9, #2
 800452c:	d114      	bne.n	8004558 <HAL_GPIO_Init+0x5c>
 800452e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004532:	f003 0b07 	and.w	fp, r3, #7
 8004536:	250f      	movs	r5, #15
 8004538:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800453c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004540:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004544:	fa05 f50b 	lsl.w	r5, r5, fp
 8004548:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800454c:	690f      	ldr	r7, [r1, #16]
 800454e:	fa07 f70b 	lsl.w	r7, r7, fp
 8004552:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8004554:	f8ca 7020 	str.w	r7, [sl, #32]
 8004558:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800455c:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800455e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004560:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004564:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004568:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800456c:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004570:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004572:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004576:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800457a:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 800457e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004580:	d812      	bhi.n	80045a8 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004582:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004584:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8004588:	68cf      	ldr	r7, [r1, #12]
 800458a:	fa07 f70a 	lsl.w	r7, r7, sl
 800458e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004592:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8004596:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004598:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800459c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800459e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80045a2:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 80045a6:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80045a8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80045aa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80045ac:	688f      	ldr	r7, [r1, #8]
 80045ae:	fa07 f70a 	lsl.w	r7, r7, sl
 80045b2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80045b4:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045b6:	00e5      	lsls	r5, r4, #3
 80045b8:	d57c      	bpl.n	80046b4 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ba:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80045be:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045c2:	f003 0a03 	and.w	sl, r3, #3
 80045c6:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ca:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80045ce:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045d2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d6:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 80045da:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80045de:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80045e2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80045e6:	9503      	str	r5, [sp, #12]
 80045e8:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045ea:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80045ee:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045f2:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045f6:	4d34      	ldr	r5, [pc, #208]	; (80046c8 <HAL_GPIO_Init+0x1cc>)
 80045f8:	42a8      	cmp	r0, r5
 80045fa:	d024      	beq.n	8004646 <HAL_GPIO_Init+0x14a>
 80045fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004600:	42a8      	cmp	r0, r5
 8004602:	d022      	beq.n	800464a <HAL_GPIO_Init+0x14e>
 8004604:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004608:	42a8      	cmp	r0, r5
 800460a:	d020      	beq.n	800464e <HAL_GPIO_Init+0x152>
 800460c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004610:	42a8      	cmp	r0, r5
 8004612:	d01e      	beq.n	8004652 <HAL_GPIO_Init+0x156>
 8004614:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004618:	42a8      	cmp	r0, r5
 800461a:	d01c      	beq.n	8004656 <HAL_GPIO_Init+0x15a>
 800461c:	4540      	cmp	r0, r8
 800461e:	d01c      	beq.n	800465a <HAL_GPIO_Init+0x15e>
 8004620:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004624:	42a8      	cmp	r0, r5
 8004626:	d01a      	beq.n	800465e <HAL_GPIO_Init+0x162>
 8004628:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800462c:	42a8      	cmp	r0, r5
 800462e:	d018      	beq.n	8004662 <HAL_GPIO_Init+0x166>
 8004630:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004634:	42a8      	cmp	r0, r5
 8004636:	d016      	beq.n	8004666 <HAL_GPIO_Init+0x16a>
 8004638:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800463c:	42a8      	cmp	r0, r5
 800463e:	bf14      	ite	ne
 8004640:	250a      	movne	r5, #10
 8004642:	2509      	moveq	r5, #9
 8004644:	e010      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 8004646:	2500      	movs	r5, #0
 8004648:	e00e      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 800464a:	2501      	movs	r5, #1
 800464c:	e00c      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 800464e:	2502      	movs	r5, #2
 8004650:	e00a      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 8004652:	2503      	movs	r5, #3
 8004654:	e008      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 8004656:	2504      	movs	r5, #4
 8004658:	e006      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 800465a:	2505      	movs	r5, #5
 800465c:	e004      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 800465e:	2506      	movs	r5, #6
 8004660:	e002      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 8004662:	2507      	movs	r5, #7
 8004664:	e000      	b.n	8004668 <HAL_GPIO_Init+0x16c>
 8004666:	2508      	movs	r5, #8
 8004668:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800466c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004670:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8004674:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8004676:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800467a:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800467c:	bf0c      	ite	eq
 800467e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8004680:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004682:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004686:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 800468a:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800468e:	bf0c      	ite	eq
 8004690:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8004692:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004694:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004698:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800469a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800469c:	bf0c      	ite	eq
 800469e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80046a0:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80046a2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80046a4:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 80046a8:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 80046ac:	bf54      	ite	pl
 80046ae:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80046b0:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 80046b2:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046b4:	3301      	adds	r3, #1
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	f47f af2c 	bne.w	8004514 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80046bc:	b005      	add	sp, #20
 80046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c2:	bf00      	nop
 80046c4:	40013c00 	.word	0x40013c00
 80046c8:	40020000 	.word	0x40020000
 80046cc:	40023800 	.word	0x40023800
 80046d0:	40021400 	.word	0x40021400

080046d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046d8:	2200      	movs	r2, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80046da:	4c4d      	ldr	r4, [pc, #308]	; (8004810 <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80046dc:	f8df a138 	ldr.w	sl, [pc, #312]	; 8004818 <HAL_GPIO_DeInit+0x144>
 80046e0:	f8df b138 	ldr.w	fp, [pc, #312]	; 800481c <HAL_GPIO_DeInit+0x148>
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046e4:	f04f 0901 	mov.w	r9, #1
 80046e8:	fa09 f502 	lsl.w	r5, r9, r2
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;

    if(iocurrent == ioposition)
 80046ec:	ea35 0301 	bics.w	r3, r5, r1
 80046f0:	f040 8087 	bne.w	8004802 <HAL_GPIO_DeInit+0x12e>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046f4:	2303      	movs	r3, #3
 80046f6:	fa02 f609 	lsl.w	r6, r2, r9
 80046fa:	6807      	ldr	r7, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046fc:	f002 0e07 	and.w	lr, r2, #7

    if(iocurrent == ioposition)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004700:	fa03 f606 	lsl.w	r6, r3, r6
 8004704:	fa22 fc03 	lsr.w	ip, r2, r3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004708:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800470c:	43ed      	mvns	r5, r5

    if(iocurrent == ioposition)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800470e:	43f6      	mvns	r6, r6
 8004710:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8004714:	4037      	ands	r7, r6
 8004716:	6007      	str	r7, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004718:	270f      	movs	r7, #15
 800471a:	f8dc 8020 	ldr.w	r8, [ip, #32]
 800471e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8004722:	ea28 0e0e 	bic.w	lr, r8, lr
 8004726:	f8cc e020 	str.w	lr, [ip, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800472a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800472e:	ea06 0e0e 	and.w	lr, r6, lr
 8004732:	f8c0 e008 	str.w	lr, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004736:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800473a:	ea0e 0e05 	and.w	lr, lr, r5
 800473e:	f8c0 e004 	str.w	lr, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004742:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8004746:	ea06 060e 	and.w	r6, r6, lr

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800474a:	ea02 0e03 	and.w	lr, r2, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800474e:	4b31      	ldr	r3, [pc, #196]	; (8004814 <HAL_GPIO_DeInit+0x140>)

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004750:	60c6      	str	r6, [r0, #12]
 8004752:	f022 0603 	bic.w	r6, r2, #3

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004756:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800475a:	4298      	cmp	r0, r3
 800475c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004760:	fa07 f70e 	lsl.w	r7, r7, lr
 8004764:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004768:	f8d6 c008 	ldr.w	ip, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800476c:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004770:	d022      	beq.n	80047b8 <HAL_GPIO_DeInit+0xe4>
 8004772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004776:	4298      	cmp	r0, r3
 8004778:	d020      	beq.n	80047bc <HAL_GPIO_DeInit+0xe8>
 800477a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800477e:	4298      	cmp	r0, r3
 8004780:	d01e      	beq.n	80047c0 <HAL_GPIO_DeInit+0xec>
 8004782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004786:	4298      	cmp	r0, r3
 8004788:	d01c      	beq.n	80047c4 <HAL_GPIO_DeInit+0xf0>
 800478a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800478e:	4298      	cmp	r0, r3
 8004790:	d01a      	beq.n	80047c8 <HAL_GPIO_DeInit+0xf4>
 8004792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004796:	4298      	cmp	r0, r3
 8004798:	d018      	beq.n	80047cc <HAL_GPIO_DeInit+0xf8>
 800479a:	4550      	cmp	r0, sl
 800479c:	d018      	beq.n	80047d0 <HAL_GPIO_DeInit+0xfc>
 800479e:	4558      	cmp	r0, fp
 80047a0:	d018      	beq.n	80047d4 <HAL_GPIO_DeInit+0x100>
 80047a2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80047a6:	4298      	cmp	r0, r3
 80047a8:	d016      	beq.n	80047d8 <HAL_GPIO_DeInit+0x104>
 80047aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047ae:	4298      	cmp	r0, r3
 80047b0:	bf0c      	ite	eq
 80047b2:	2309      	moveq	r3, #9
 80047b4:	230a      	movne	r3, #10
 80047b6:	e010      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047b8:	2300      	movs	r3, #0
 80047ba:	e00e      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047bc:	464b      	mov	r3, r9
 80047be:	e00c      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047c0:	2302      	movs	r3, #2
 80047c2:	e00a      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047c4:	2303      	movs	r3, #3
 80047c6:	e008      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047c8:	2304      	movs	r3, #4
 80047ca:	e006      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047cc:	2305      	movs	r3, #5
 80047ce:	e004      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047d0:	2306      	movs	r3, #6
 80047d2:	e002      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047d4:	2307      	movs	r3, #7
 80047d6:	e000      	b.n	80047da <HAL_GPIO_DeInit+0x106>
 80047d8:	2308      	movs	r3, #8
 80047da:	fa03 f30e 	lsl.w	r3, r3, lr
 80047de:	459c      	cmp	ip, r3
 80047e0:	d10f      	bne.n	8004802 <HAL_GPIO_DeInit+0x12e>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80047e2:	68b3      	ldr	r3, [r6, #8]
 80047e4:	ea23 0707 	bic.w	r7, r3, r7
 80047e8:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	402b      	ands	r3, r5
 80047ee:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	402b      	ands	r3, r5
 80047f4:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80047f6:	68a3      	ldr	r3, [r4, #8]
 80047f8:	402b      	ands	r3, r5
 80047fa:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80047fc:	68e3      	ldr	r3, [r4, #12]
 80047fe:	401d      	ands	r5, r3
 8004800:	60e5      	str	r5, [r4, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004802:	3201      	adds	r2, #1
 8004804:	2a10      	cmp	r2, #16
 8004806:	f47f af6d 	bne.w	80046e4 <HAL_GPIO_DeInit+0x10>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
	  }
    }
  }
}
 800480a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480e:	bf00      	nop
 8004810:	40013c00 	.word	0x40013c00
 8004814:	40020000 	.word	0x40020000
 8004818:	40021800 	.word	0x40021800
 800481c:	40021c00 	.word	0x40021c00

08004820 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004820:	b902      	cbnz	r2, 8004824 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004822:	0409      	lsls	r1, r1, #16
 8004824:	6181      	str	r1, [r0, #24]
 8004826:	4770      	bx	lr

08004828 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004828:	6803      	ldr	r3, [r0, #0]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	0791      	lsls	r1, r2, #30
 800482e:	d501      	bpl.n	8004834 <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00;
 8004830:	2200      	movs	r2, #0
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	07d2      	lsls	r2, r2, #31
 8004838:	d403      	bmi.n	8004842 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800483a:	699a      	ldr	r2, [r3, #24]
 800483c:	f042 0201 	orr.w	r2, r2, #1
 8004840:	619a      	str	r2, [r3, #24]
 8004842:	4770      	bx	lr

08004844 <I2C_TransferConfig>:
  * @param  Request: New state of the I2C START condition generation.
  *   This parameter can be a value of I2C_START_STOP_MODE.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004844:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
  
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8004846:	6805      	ldr	r5, [r0, #0]
 8004848:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800484c:	4c05      	ldr	r4, [pc, #20]	; (8004864 <I2C_TransferConfig+0x20>)
 800484e:	6868      	ldr	r0, [r5, #4]
 8004850:	4004      	ands	r4, r0
 8004852:	9803      	ldr	r0, [sp, #12]
 8004854:	4320      	orrs	r0, r4
 8004856:	4303      	orrs	r3, r0
 8004858:	430b      	orrs	r3, r1
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800485a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800485e:	606a      	str	r2, [r5, #4]
 8004860:	bd30      	pop	{r4, r5, pc}
 8004862:	bf00      	nop
 8004864:	fc009800 	.word	0xfc009800

08004868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486c:	9f06      	ldr	r7, [sp, #24]
 800486e:	4604      	mov	r4, r0
 8004870:	4688      	mov	r8, r1
 8004872:	4616      	mov	r6, r2
 8004874:	461d      	mov	r5, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status)
 8004876:	6822      	ldr	r2, [r4, #0]
 8004878:	6993      	ldr	r3, [r2, #24]
 800487a:	ea38 0303 	bics.w	r3, r8, r3
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	42b3      	cmp	r3, r6
 8004886:	d113      	bne.n	80048b0 <I2C_WaitOnFlagUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004888:	1c6b      	adds	r3, r5, #1
 800488a:	d0f5      	beq.n	8004878 <I2C_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart ) > Timeout))
 800488c:	b955      	cbnz	r5, 80048a4 <I2C_WaitOnFlagUntilTimeout+0x3c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800488e:	2320      	movs	r3, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
 8004890:	2003      	movs	r0, #3
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8004892:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004896:	2300      	movs	r3, #0
 8004898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 80048a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart ) > Timeout))
 80048a4:	f7fe fe8c 	bl	80035c0 <HAL_GetTick>
 80048a8:	1bc0      	subs	r0, r0, r7
 80048aa:	4285      	cmp	r5, r0
 80048ac:	d2e3      	bcs.n	8004876 <I2C_WaitOnFlagUntilTimeout+0xe>
 80048ae:	e7ee      	b.n	800488e <I2C_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80048b0:	2000      	movs	r0, #0
}
 80048b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080048b8 <I2C_IsAcknowledgeFailed>:
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048b8:	6803      	ldr	r3, [r0, #0]
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ba:	b570      	push	{r4, r5, r6, lr}
 80048bc:	4604      	mov	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048be:	6998      	ldr	r0, [r3, #24]
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	460d      	mov	r5, r1
 80048c2:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c4:	f010 0010 	ands.w	r0, r0, #16
 80048c8:	d10b      	bne.n	80048e2 <I2C_IsAcknowledgeFailed+0x2a>
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048cc:	6999      	ldr	r1, [r3, #24]
 80048ce:	068a      	lsls	r2, r1, #26
 80048d0:	d413      	bmi.n	80048fa <I2C_IsAcknowledgeFailed+0x42>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80048d2:	1c69      	adds	r1, r5, #1
 80048d4:	d0fa      	beq.n	80048cc <I2C_IsAcknowledgeFailed+0x14>
      {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 80048d6:	b135      	cbz	r5, 80048e6 <I2C_IsAcknowledgeFailed+0x2e>
 80048d8:	f7fe fe72 	bl	80035c0 <HAL_GetTick>
 80048dc:	1b80      	subs	r0, r0, r6
 80048de:	4285      	cmp	r5, r0
 80048e0:	d301      	bcc.n	80048e6 <I2C_IsAcknowledgeFailed+0x2e>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	e7f2      	b.n	80048cc <I2C_IsAcknowledgeFailed+0x14>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80048e6:	2320      	movs	r3, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
 80048e8:	2003      	movs	r0, #3
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80048ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80048f8:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }
    
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fa:	2210      	movs	r2, #16
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048fc:	2520      	movs	r5, #32
    
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048fe:	4620      	mov	r0, r4
        }
      }
    }
    
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004900:	61da      	str	r2, [r3, #28]
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004902:	61dd      	str	r5, [r3, #28]
    
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004904:	f7ff ff90 	bl	8004828 <I2C_Flush_TXDR>
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004908:	6822      	ldr	r2, [r4, #0]
 800490a:	4b07      	ldr	r3, [pc, #28]	; (8004928 <I2C_IsAcknowledgeFailed+0x70>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    
    return HAL_ERROR;
 800490c:	2001      	movs	r0, #1
    
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800490e:	6851      	ldr	r1, [r2, #4]
 8004910:	400b      	ands	r3, r1
 8004912:	6053      	str	r3, [r2, #4]
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004914:	2304      	movs	r3, #4
 8004916:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004918:	2300      	movs	r3, #0
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 800491a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004922:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
    
    return HAL_ERROR;
  }
  return HAL_OK;
}
 8004926:	bd70      	pop	{r4, r5, r6, pc}
 8004928:	fe00e800 	.word	0xfe00e800

0800492c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4604      	mov	r4, r0
 8004930:	460d      	mov	r5, r1
 8004932:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	079b      	lsls	r3, r3, #30
 800493a:	d41c      	bmi.n	8004976 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800493c:	4632      	mov	r2, r6
 800493e:	4629      	mov	r1, r5
 8004940:	4620      	mov	r0, r4
 8004942:	f7ff ffb9 	bl	80048b8 <I2C_IsAcknowledgeFailed>
 8004946:	b9c0      	cbnz	r0, 800497a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004948:	1c6a      	adds	r2, r5, #1
 800494a:	d0f3      	beq.n	8004934 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 800494c:	b96d      	cbnz	r5, 800496a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800494e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004950:	2003      	movs	r0, #3
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004952:	f043 0320 	orr.w	r3, r3, #32
 8004956:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8004958:	2320      	movs	r3, #32
 800495a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800495e:	2300      	movs	r3, #0
 8004960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004964:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004968:	bd70      	pop	{r4, r5, r6, pc}
    }
    
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 800496a:	f7fe fe29 	bl	80035c0 <HAL_GetTick>
 800496e:	1b80      	subs	r0, r0, r6
 8004970:	4285      	cmp	r5, r0
 8004972:	d2df      	bcs.n	8004934 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8004974:	e7eb      	b.n	800494e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004976:	2000      	movs	r0, #0
 8004978:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 800497a:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800497c:	bd70      	pop	{r4, r5, r6, pc}

0800497e <I2C_RequestMemoryWrite>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800497e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004980:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004986:	4604      	mov	r4, r0
 8004988:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800498a:	9300      	str	r3, [sp, #0]
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800498c:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800498e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004992:	b2fa      	uxtb	r2, r7
 8004994:	f7ff ff56 	bl	8004844 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004998:	4632      	mov	r2, r6
 800499a:	9908      	ldr	r1, [sp, #32]
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff ffc5 	bl	800492c <I2C_WaitOnTXISFlagUntilTimeout>
 80049a2:	b120      	cbz	r0, 80049ae <I2C_RequestMemoryWrite+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d10e      	bne.n	80049c8 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 80049aa:	2001      	movs	r0, #1
 80049ac:	e019      	b.n	80049e2 <I2C_RequestMemoryWrite+0x64>
      return HAL_TIMEOUT;
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049ae:	2f01      	cmp	r7, #1
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	d10b      	bne.n	80049cc <I2C_RequestMemoryWrite+0x4e>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049b4:	b2ed      	uxtb	r5, r5
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049b6:	2200      	movs	r2, #0
 80049b8:	2180      	movs	r1, #128	; 0x80
 80049ba:	4620      	mov	r0, r4
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049bc:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049be:	9b08      	ldr	r3, [sp, #32]
 80049c0:	9600      	str	r6, [sp, #0]
 80049c2:	f7ff ff51 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 80049c6:	b160      	cbz	r0, 80049e2 <I2C_RequestMemoryWrite+0x64>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 80049c8:	2003      	movs	r0, #3
 80049ca:	e00a      	b.n	80049e2 <I2C_RequestMemoryWrite+0x64>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049cc:	0a2a      	lsrs	r2, r5, #8
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049ce:	9908      	ldr	r1, [sp, #32]
 80049d0:	4620      	mov	r0, r4
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049d2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d4:	4632      	mov	r2, r6
 80049d6:	f7ff ffa9 	bl	800492c <I2C_WaitOnTXISFlagUntilTimeout>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d1e2      	bne.n	80049a4 <I2C_RequestMemoryWrite+0x26>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	e7e8      	b.n	80049b4 <I2C_RequestMemoryWrite+0x36>
  {
    return HAL_TIMEOUT;
  }
  
return HAL_OK;
}
 80049e2:	b003      	add	sp, #12
 80049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049e6 <I2C_RequestMemoryRead>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049ee:	4604      	mov	r4, r0
 80049f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049f2:	9300      	str	r3, [sp, #0]
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049f6:	2300      	movs	r3, #0
 80049f8:	b2fa      	uxtb	r2, r7
 80049fa:	f7ff ff23 	bl	8004844 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fe:	4632      	mov	r2, r6
 8004a00:	9908      	ldr	r1, [sp, #32]
 8004a02:	4620      	mov	r0, r4
 8004a04:	f7ff ff92 	bl	800492c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a08:	b120      	cbz	r0, 8004a14 <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d10e      	bne.n	8004a2e <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 8004a10:	2001      	movs	r0, #1
 8004a12:	e019      	b.n	8004a48 <I2C_RequestMemoryRead+0x62>
      return HAL_TIMEOUT;
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a14:	2f01      	cmp	r7, #1
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	d10b      	bne.n	8004a32 <I2C_RequestMemoryRead+0x4c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a1a:	b2ed      	uxtb	r5, r5
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2140      	movs	r1, #64	; 0x40
 8004a20:	4620      	mov	r0, r4
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a22:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	9b08      	ldr	r3, [sp, #32]
 8004a26:	9600      	str	r6, [sp, #0]
 8004a28:	f7ff ff1e 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004a2c:	b160      	cbz	r0, 8004a48 <I2C_RequestMemoryRead+0x62>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8004a2e:	2003      	movs	r0, #3
 8004a30:	e00a      	b.n	8004a48 <I2C_RequestMemoryRead+0x62>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a32:	0a2a      	lsrs	r2, r5, #8
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a34:	9908      	ldr	r1, [sp, #32]
 8004a36:	4620      	mov	r0, r4
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a38:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3a:	4632      	mov	r2, r6
 8004a3c:	f7ff ff76 	bl	800492c <I2C_WaitOnTXISFlagUntilTimeout>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d1e2      	bne.n	8004a0a <I2C_RequestMemoryRead+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	e7e8      	b.n	8004a1a <I2C_RequestMemoryRead+0x34>
  {
    return HAL_TIMEOUT;
  }
  
  return HAL_OK;
}
 8004a48:	b003      	add	sp, #12
 8004a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	4604      	mov	r4, r0
 8004a50:	460d      	mov	r5, r1
 8004a52:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	069b      	lsls	r3, r3, #26
 8004a5a:	d41a      	bmi.n	8004a92 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5c:	4632      	mov	r2, r6
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff ff29 	bl	80048b8 <I2C_IsAcknowledgeFailed>
 8004a66:	b9b0      	cbnz	r0, 8004a96 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 8004a68:	b96d      	cbnz	r5, 8004a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	2003      	movs	r0, #3
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6e:	f043 0320 	orr.w	r3, r3, #32
 8004a72:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8004a74:	2320      	movs	r3, #32
 8004a76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 8004a86:	f7fe fd9b 	bl	80035c0 <HAL_GetTick>
 8004a8a:	1b80      	subs	r0, r0, r6
 8004a8c:	4285      	cmp	r5, r0
 8004a8e:	d2e1      	bcs.n	8004a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8004a90:	e7eb      	b.n	8004a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
      __HAL_UNLOCK(hi2c);
      
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8004a92:	2000      	movs	r0, #0
 8004a94:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 8004a96:	2001      	movs	r0, #1
      
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8004a98:	bd70      	pop	{r4, r5, r6, pc}

08004a9a <HAL_I2C_Init>:
  * @param  hi2c: Pointer to a I2C_HandleTypeDef structure that contains
  *               the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8004a9a:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d047      	beq.n	8004b32 <HAL_I2C_Init+0x98>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8004aa2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004aa6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004aaa:	b91b      	cbnz	r3, 8004ab4 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ab0:	f009 feb4 	bl	800e81c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab4:	2324      	movs	r3, #36	; 0x24
 8004ab6:	68e1      	ldr	r1, [r4, #12]
 8004ab8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ac6:	6862      	ldr	r2, [r4, #4]
 8004ac8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004acc:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ad4:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8004ad6:	68a2      	ldr	r2, [r4, #8]
 8004ad8:	b142      	cbz	r2, 8004aec <HAL_I2C_Init+0x52>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ada:	2901      	cmp	r1, #1
 8004adc:	d103      	bne.n	8004ae6 <HAL_I2C_Init+0x4c>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	e007      	b.n	8004af6 <HAL_I2C_Init+0x5c>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ae6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004aea:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004aec:	2902      	cmp	r1, #2
 8004aee:	d102      	bne.n	8004af6 <HAL_I2C_Init+0x5c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004af4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004af6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af8:	2000      	movs	r0, #0
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004afa:	6921      	ldr	r1, [r4, #16]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004afc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b04:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004b06:	6962      	ldr	r2, [r4, #20]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	69a1      	ldr	r1, [r4, #24]
 8004b0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b10:	69e1      	ldr	r1, [r4, #28]
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004b12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b14:	6a22      	ldr	r2, [r4, #32]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	2320      	movs	r3, #32
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b24:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b2a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  
  return HAL_OK;
 8004b30:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8004b32:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;
  
  return HAL_OK;
}
 8004b34:	bd10      	pop	{r4, pc}

08004b36 <HAL_I2C_DeInit>:
  * @param  hi2c: Pointer to a I2C_HandleTypeDef structure that contains
  *               the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004b36:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004b38:	4604      	mov	r4, r0
 8004b3a:	b198      	cbz	r0, 8004b64 <HAL_I2C_DeInit+0x2e>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b3c:	6802      	ldr	r2, [r0, #0]
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3e:	2324      	movs	r3, #36	; 0x24
 8004b40:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b44:	6813      	ldr	r3, [r2, #0]
 8004b46:	f023 0301 	bic.w	r3, r3, #1
 8004b4a:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004b4c:	f009 fe8e 	bl	800e86c <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b50:	2000      	movs	r0, #0
 8004b52:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b54:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b58:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b5c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 8004b62:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8004b64:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 8004b66:	bd10      	pop	{r4, pc}

08004b68 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	469b      	mov	fp, r3
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b72:	b085      	sub	sp, #20
 8004b74:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b76:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b78:	460f      	mov	r7, r1
 8004b7a:	9203      	str	r2, [sp, #12]
 8004b7c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8004b80:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b84:	f040 809f 	bne.w	8004cc6 <HAL_I2C_Mem_Write+0x15e>
  {
    if((pData == NULL) || (Size == 0))
 8004b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b8a:	b90b      	cbnz	r3, 8004b90 <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	e09b      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x160>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0))
 8004b90:	f1ba 0f00 	cmp.w	sl, #0
 8004b94:	d0fa      	beq.n	8004b8c <HAL_I2C_Mem_Write+0x24>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b96:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	f000 8093 	beq.w	8004cc6 <HAL_I2C_Mem_Write+0x15e>
 8004ba0:	2501      	movs	r5, #1
 8004ba2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ba6:	f7fe fd0b 	bl	80035c0 <HAL_GetTick>
    
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004baa:	2319      	movs	r3, #25
 8004bac:	9000      	str	r0, [sp, #0]
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bae:	4606      	mov	r6, r0
    
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bb0:	462a      	mov	r2, r5
 8004bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7ff fe56 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004bbc:	4680      	mov	r8, r0
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d14e      	bne.n	8004c60 <HAL_I2C_Mem_Write+0xf8>
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bc2:	2321      	movs	r3, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 8004bc4:	6360      	str	r0, [r4, #52]	; 0x34
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bc6:	9601      	str	r6, [sp, #4]
 8004bc8:	4639      	mov	r1, r7
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bce:	2340      	movs	r3, #64	; 0x40
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bd0:	f8cd 9000 	str.w	r9, [sp]
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bda:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bdc:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bde:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be0:	465b      	mov	r3, fp
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 8004be2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be6:	9a03      	ldr	r2, [sp, #12]
 8004be8:	f7ff fec9 	bl	800497e <I2C_RequestMemoryWrite>
 8004bec:	b118      	cbz	r0, 8004bf6 <HAL_I2C_Mem_Write+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bee:	6c63      	ldr	r3, [r4, #68]	; 0x44
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 8004bf4:	e056      	b.n	8004ca4 <HAL_I2C_Mem_Write+0x13c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2bff      	cmp	r3, #255	; 0xff
 8004bfc:	d905      	bls.n	8004c0a <HAL_I2C_Mem_Write+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bfe:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c00:	9000      	str	r0, [sp, #0]
 8004c02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    }
    
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c06:	8522      	strh	r2, [r4, #40]	; 0x28
 8004c08:	e006      	b.n	8004c18 <HAL_I2C_Mem_Write+0xb0>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c10:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c12:	b292      	uxth	r2, r2
 8004c14:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	4639      	mov	r1, r7
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff fe12 	bl	8004844 <I2C_TransferConfig>
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c20:	4632      	mov	r2, r6
 8004c22:	4649      	mov	r1, r9
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7ff fe81 	bl	800492c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d139      	bne.n	8004ca2 <HAL_I2C_Mem_Write+0x13a>
          return HAL_TIMEOUT;
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8004c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c30:	6822      	ldr	r2, [r4, #0]
 8004c32:	1c59      	adds	r1, r3, #1
 8004c34:	6261      	str	r1, [r4, #36]	; 0x24
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
      hi2c->XferSize--;
 8004c3a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8004c3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004c3e:	3a01      	subs	r2, #1
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8004c40:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004c42:	b292      	uxth	r2, r2
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8004c44:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004c46:	8522      	strh	r2, [r4, #40]	; 0x28
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8004c48:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
      
      if((hi2c->XferSize == 0) && (hi2c->XferCount!=0))
 8004c4a:	bb02      	cbnz	r2, 8004c8e <HAL_I2C_Mem_Write+0x126>
 8004c4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	b1eb      	cbz	r3, 8004c8e <HAL_I2C_Mem_Write+0x126>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c52:	9600      	str	r6, [sp, #0]
 8004c54:	464b      	mov	r3, r9
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f7ff fe05 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004c5e:	b108      	cbz	r0, 8004c64 <HAL_I2C_Mem_Write+0xfc>
        {
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 8004c60:	2003      	movs	r0, #3
 8004c62:	e031      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x160>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2bff      	cmp	r3, #255	; 0xff
 8004c6a:	d905      	bls.n	8004c78 <HAL_I2C_Mem_Write+0x110>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c6c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c6e:	9000      	str	r0, [sp, #0]
 8004c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c74:	8522      	strh	r2, [r4, #40]	; 0x28
 8004c76:	e006      	b.n	8004c86 <HAL_I2C_Mem_Write+0x11e>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c7e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c80:	b292      	uxth	r2, r2
 8004c82:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c84:	b2d2      	uxtb	r2, r2
 8004c86:	4639      	mov	r1, r7
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f7ff fddb 	bl	8004844 <I2C_TransferConfig>
        }
      }
      
    }while(hi2c->XferCount > 0);
 8004c8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1c4      	bne.n	8004c20 <HAL_I2C_Mem_Write+0xb8>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c96:	4632      	mov	r2, r6
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f7ff fed6 	bl	8004a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ca0:	b118      	cbz	r0, 8004caa <HAL_I2C_Mem_Write+0x142>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	d1db      	bne.n	8004c60 <HAL_I2C_Mem_Write+0xf8>
 8004ca8:	e770      	b.n	8004b8c <HAL_I2C_Mem_Write+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	2120      	movs	r1, #32
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <HAL_I2C_Mem_Write+0x168>)
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cb0:	61d9      	str	r1, [r3, #28]
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cb2:	685d      	ldr	r5, [r3, #4]
 8004cb4:	402a      	ands	r2, r5
 8004cb6:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cbc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cc0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    
    return HAL_OK;
 8004cc4:	e000      	b.n	8004cc8 <HAL_I2C_Mem_Write+0x160>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2002      	movs	r0, #2
  }
}
 8004cc8:	b005      	add	sp, #20
 8004cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cce:	bf00      	nop
 8004cd0:	fe00e800 	.word	0xfe00e800

08004cd4 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd8:	469b      	mov	fp, r3
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004cda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cde:	b085      	sub	sp, #20
 8004ce0:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004ce2:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce4:	460f      	mov	r7, r1
 8004ce6:	9203      	str	r2, [sp, #12]
 8004ce8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8004cec:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004cf0:	f040 80a5 	bne.w	8004e3e <HAL_I2C_Mem_Read+0x16a>
  {
    if((pData == NULL) || (Size == 0))
 8004cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf6:	b90b      	cbnz	r3, 8004cfc <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	e0a1      	b.n	8004e40 <HAL_I2C_Mem_Read+0x16c>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0))
 8004cfc:	f1ba 0f00 	cmp.w	sl, #0
 8004d00:	d0fa      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	f000 8099 	beq.w	8004e3e <HAL_I2C_Mem_Read+0x16a>
 8004d0c:	2501      	movs	r5, #1
 8004d0e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d12:	f7fe fc55 	bl	80035c0 <HAL_GetTick>
    
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d16:	2319      	movs	r3, #25
 8004d18:	9000      	str	r0, [sp, #0]
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d1a:	4606      	mov	r6, r0
    
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d22:	4620      	mov	r0, r4
 8004d24:	f7ff fda0 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004d28:	4680      	mov	r8, r0
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d177      	bne.n	8004e1e <HAL_I2C_Mem_Read+0x14a>
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d2e:	2322      	movs	r3, #34	; 0x22
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 8004d30:	6360      	str	r0, [r4, #52]	; 0x34
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d32:	9601      	str	r6, [sp, #4]
 8004d34:	4639      	mov	r1, r7
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d3a:	2340      	movs	r3, #64	; 0x40
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d3c:	f8cd 9000 	str.w	r9, [sp]
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d46:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d48:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d4a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d4c:	465b      	mov	r3, fp
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 8004d4e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d52:	9a03      	ldr	r2, [sp, #12]
 8004d54:	f7ff fe47 	bl	80049e6 <I2C_RequestMemoryRead>
 8004d58:	b118      	cbz	r0, 8004d62 <HAL_I2C_Mem_Read+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d5c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 8004d60:	e05a      	b.n	8004e18 <HAL_I2C_Mem_Read+0x144>
      }
    }
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2bff      	cmp	r3, #255	; 0xff
 8004d68:	d907      	bls.n	8004d7a <HAL_I2C_Mem_Read+0xa6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d6a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d6e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d76:	8522      	strh	r2, [r4, #40]	; 0x28
 8004d78:	e008      	b.n	8004d8c <HAL_I2C_Mem_Read+0xb8>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d7c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d80:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d88:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7ff fd58 	bl	8004844 <I2C_TransferConfig>
    }
    
    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d94:	9600      	str	r6, [sp, #0]
 8004d96:	464b      	mov	r3, r9
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7ff fd63 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d13b      	bne.n	8004e1e <HAL_I2C_Mem_Read+0x14a>
      {
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8004da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	6262      	str	r2, [r4, #36]	; 0x24
 8004dac:	6822      	ldr	r2, [r4, #0]
 8004dae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004db0:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8004db2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004db4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8004db6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004db8:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8004dba:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004dbc:	b29b      	uxth	r3, r3
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8004dbe:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004dc0:	8563      	strh	r3, [r4, #42]	; 0x2a
      
      if((hi2c->XferSize == 0) && (hi2c->XferCount != 0))
 8004dc2:	b9f2      	cbnz	r2, 8004e02 <HAL_I2C_Mem_Read+0x12e>
 8004dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	b1db      	cbz	r3, 8004e02 <HAL_I2C_Mem_Read+0x12e>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dca:	9600      	str	r6, [sp, #0]
 8004dcc:	464b      	mov	r3, r9
 8004dce:	2180      	movs	r1, #128	; 0x80
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f7ff fd49 	bl	8004868 <I2C_WaitOnFlagUntilTimeout>
 8004dd6:	bb10      	cbnz	r0, 8004e1e <HAL_I2C_Mem_Read+0x14a>
        {
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2bff      	cmp	r3, #255	; 0xff
 8004dde:	d905      	bls.n	8004dec <HAL_I2C_Mem_Read+0x118>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de0:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004de2:	9000      	str	r0, [sp, #0]
 8004de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de8:	8522      	strh	r2, [r4, #40]	; 0x28
 8004dea:	e006      	b.n	8004dfa <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004df2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004df4:	b292      	uxth	r2, r2
 8004df6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	4639      	mov	r1, r7
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff fd21 	bl	8004844 <I2C_TransferConfig>
        }
      }
    }while(hi2c->XferCount > 0);
 8004e02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1c4      	bne.n	8004d94 <HAL_I2C_Mem_Read+0xc0>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f7ff fe1c 	bl	8004a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e14:	b128      	cbz	r0, 8004e22 <HAL_I2C_Mem_Read+0x14e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	f43f af6d 	beq.w	8004cf8 <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 8004e1e:	2003      	movs	r0, #3
 8004e20:	e00e      	b.n	8004e40 <HAL_I2C_Mem_Read+0x16c>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	2120      	movs	r1, #32
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e26:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <HAL_I2C_Mem_Read+0x174>)
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e28:	61d9      	str	r1, [r3, #28]
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e2a:	685d      	ldr	r5, [r3, #4]
 8004e2c:	402a      	ands	r2, r5
 8004e2e:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8004e30:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e34:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e38:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    
    return HAL_OK;
 8004e3c:	e000      	b.n	8004e40 <HAL_I2C_Mem_Read+0x16c>
  }
  else
  {
    return HAL_BUSY;
 8004e3e:	2002      	movs	r0, #2
  }
}
 8004e40:	b005      	add	sp, #20
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	bf00      	nop
 8004e48:	fe00e800 	.word	0xfe00e800

08004e4c <HAL_I2C_GetState>:
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  /* Return I2C handle state */
  return hi2c->State;
 8004e4c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004e50:	4770      	bx	lr

08004e52 <LTDC_SetConfig>:
  * @param  LayerIdx:  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004e56:	6804      	ldr	r4, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e58:	01d2      	lsls	r2, r2, #7
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004e5a:	684f      	ldr	r7, [r1, #4]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004e5c:	f04f 0800 	mov.w	r8, #0
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e60:	f104 0e84 	add.w	lr, r4, #132	; 0x84
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004e64:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e66:	f8d1 c000 	ldr.w	ip, [r1]
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e6a:	eb02 030e 	add.w	r3, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e6e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e72:	6858      	ldr	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e74:	19ee      	adds	r6, r5, r7
 8004e76:	f10c 0501 	add.w	r5, ip, #1
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e7a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004e7e:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8004e86:	4428      	add	r0, r5

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8004e88:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004e8e:	6058      	str	r0, [r3, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8004e90:	68e0      	ldr	r0, [r4, #12]
 8004e92:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004e96:	1946      	adds	r6, r0, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e98:	6898      	ldr	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004e9a:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e9c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004ea0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004ea2:	1c68      	adds	r0, r5, #1
 8004ea4:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8004ea6:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004ea8:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004eac:	4420      	add	r0, r4
 8004eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004eb2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004eb4:	6098      	str	r0, [r3, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004eb6:	6918      	ldr	r0, [r3, #16]
 8004eb8:	f020 0007 	bic.w	r0, r0, #7
 8004ebc:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ebe:	611e      	str	r6, [r3, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004ec0:	6998      	ldr	r0, [r3, #24]
  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8004ec2:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8004ec6:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004eca:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8004ece:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8004ed2:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
 8004ed6:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 8004eda:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8004ede:	619c      	str	r4, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ee0:	6958      	ldr	r0, [r3, #20]
 8004ee2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004ee6:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ee8:	6948      	ldr	r0, [r1, #20]
 8004eea:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004eec:	69d8      	ldr	r0, [r3, #28]
 8004eee:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004ef2:	f020 0007 	bic.w	r0, r0, #7
 8004ef6:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004ef8:	69cd      	ldr	r5, [r1, #28]
 8004efa:	6a0c      	ldr	r4, [r1, #32]
 8004efc:	432c      	orrs	r4, r5
 8004efe:	61dc      	str	r4, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f00:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f02:	6a48      	ldr	r0, [r1, #36]	; 0x24
  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f04:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f08:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f0a:	b14e      	cbz	r6, 8004f20 <LTDC_SetConfig+0xce>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f0c:	2e01      	cmp	r6, #1
 8004f0e:	d009      	beq.n	8004f24 <LTDC_SetConfig+0xd2>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f10:	1eb0      	subs	r0, r6, #2
 8004f12:	2802      	cmp	r0, #2
 8004f14:	d908      	bls.n	8004f28 <LTDC_SetConfig+0xd6>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f16:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8004f18:	bf0c      	ite	eq
 8004f1a:	2002      	moveq	r0, #2
 8004f1c:	2001      	movne	r0, #1
 8004f1e:	e004      	b.n	8004f2a <LTDC_SetConfig+0xd8>
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
  {
    tmp = 4;
 8004f20:	2004      	movs	r0, #4
 8004f22:	e002      	b.n	8004f2a <LTDC_SetConfig+0xd8>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
  {
    tmp = 3;
 8004f24:	2003      	movs	r0, #3
 8004f26:	e000      	b.n	8004f2a <LTDC_SetConfig+0xd8>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 8004f28:	2002      	movs	r0, #2
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f2a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004f2c:	ebcc 0707 	rsb	r7, ip, r7
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f30:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8004f34:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004f36:	6a8c      	ldr	r4, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f38:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004f3a:	4344      	muls	r4, r0
 8004f3c:	4378      	muls	r0, r7
 8004f3e:	3003      	adds	r0, #3
 8004f40:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8004f44:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004f46:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f48:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8004f4c:	f020 0007 	bic.w	r0, r0, #7
 8004f50:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f52:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f54:	f852 300e 	ldr.w	r3, [r2, lr]
 8004f58:	f043 0301 	orr.w	r3, r3, #1
 8004f5c:	f842 300e 	str.w	r3, [r2, lr]
 8004f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004f64 <HAL_LTDC_Init>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004f64:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8004f66:	4604      	mov	r4, r0
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d06a      	beq.n	8005042 <HAL_LTDC_Init+0xde>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8004f6c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004f70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f74:	b91b      	cbnz	r3, 8004f7e <HAL_LTDC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f76:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f7a:	f009 fc8d 	bl	800e898 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f8c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f8e:	6862      	ldr	r2, [r4, #4]
 8004f90:	6999      	ldr	r1, [r3, #24]
 8004f92:	4311      	orrs	r1, r2
 8004f94:	68a2      	ldr	r2, [r4, #8]
 8004f96:	4311      	orrs	r1, r2
 8004f98:	68e2      	ldr	r2, [r4, #12]
 8004f9a:	4311      	orrs	r1, r2
 8004f9c:	6922      	ldr	r2, [r4, #16]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	619a      	str	r2, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004fa2:	4a29      	ldr	r2, [pc, #164]	; (8005048 <HAL_LTDC_Init+0xe4>)
 8004fa4:	6899      	ldr	r1, [r3, #8]
 8004fa6:	400a      	ands	r2, r1
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004fa8:	6961      	ldr	r1, [r4, #20]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004faa:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004fac:	69a2      	ldr	r2, [r4, #24]
 8004fae:	6898      	ldr	r0, [r3, #8]
 8004fb0:	4302      	orrs	r2, r0
 8004fb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004fb6:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004fb8:	4a23      	ldr	r2, [pc, #140]	; (8005048 <HAL_LTDC_Init+0xe4>)
 8004fba:	68d9      	ldr	r1, [r3, #12]
 8004fbc:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004fbe:	69e1      	ldr	r1, [r4, #28]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004fc0:	60da      	str	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004fc2:	6a22      	ldr	r2, [r4, #32]
 8004fc4:	68d8      	ldr	r0, [r3, #12]
 8004fc6:	4302      	orrs	r2, r0
 8004fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004fcc:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004fce:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <HAL_LTDC_Init+0xe4>)
 8004fd0:	6919      	ldr	r1, [r3, #16]
 8004fd2:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004fd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004fd6:	611a      	str	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004fd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004fda:	6918      	ldr	r0, [r3, #16]
 8004fdc:	4302      	orrs	r2, r0
 8004fde:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004fe2:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fe4:	4a18      	ldr	r2, [pc, #96]	; (8005048 <HAL_LTDC_Init+0xe4>)
 8004fe6:	6959      	ldr	r1, [r3, #20]
 8004fe8:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004fea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fec:	615a      	str	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004fee:	6958      	ldr	r0, [r3, #20]
 8004ff0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ff2:	4302      	orrs	r2, r0
 8004ff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ff8:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ffa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8004ffc:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005000:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8005004:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005008:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800500a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800500c:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 8005010:	4329      	orrs	r1, r5
 8005012:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8005016:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800501a:	2000      	movs	r0, #0

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800501c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 800501e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005020:	f042 0204 	orr.w	r2, r2, #4
 8005024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8005026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005028:	f042 0202 	orr.w	r2, r2, #2
 800502c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800502e:	699a      	ldr	r2, [r3, #24]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005036:	2301      	movs	r3, #1

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8005038:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800503c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
 8005040:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
  {
    return HAL_ERROR;
 8005042:	2001      	movs	r0, #1

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  return HAL_OK;
}
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	bf00      	nop
 8005048:	f000f800 	.word	0xf000f800

0800504c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 800504e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8005052:	4606      	mov	r6, r0
 8005054:	468e      	mov	lr, r1
 8005056:	4694      	mov	ip, r2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005058:	2b01      	cmp	r3, #1
 800505a:	f04f 0002 	mov.w	r0, #2
 800505e:	d01d      	beq.n	800509c <HAL_LTDC_ConfigLayer+0x50>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005060:	2434      	movs	r4, #52	; 0x34
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005062:	2701      	movs	r7, #1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005064:	460d      	mov	r5, r1
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005066:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800506a:	fb04 6402 	mla	r4, r4, r2, r6
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 800506e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005072:	3438      	adds	r4, #56	; 0x38
 8005074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800507a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800507c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800507e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005080:	682b      	ldr	r3, [r5, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005082:	4630      	mov	r0, r6
 8005084:	4662      	mov	r2, ip
 8005086:	4671      	mov	r1, lr
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005088:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800508a:	f7ff fee2 	bl	8004e52 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800508e:	6833      	ldr	r3, [r6, #0]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005090:	2000      	movs	r0, #0

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005092:	625f      	str	r7, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005094:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005098:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0

  return HAL_OK;
}
 800509c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800509e <HAL_LTDC_GetState>:
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
  return hltdc->State;
 800509e:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 80050a2:	4770      	bx	lr

080050a4 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a4:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a8:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050aa:	07d8      	lsls	r0, r3, #31
 80050ac:	d403      	bmi.n	80050b6 <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	0799      	lsls	r1, r3, #30
 80050b2:	d452      	bmi.n	800515a <HAL_RCC_OscConfig+0xb6>
 80050b4:	e0a5      	b.n	8005202 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80050b6:	4b96      	ldr	r3, [pc, #600]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	f002 020c 	and.w	r2, r2, #12
 80050be:	2a04      	cmp	r2, #4
 80050c0:	d007      	beq.n	80050d2 <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	f002 020c 	and.w	r2, r2, #12
 80050c8:	2a08      	cmp	r2, #8
 80050ca:	d10b      	bne.n	80050e4 <HAL_RCC_OscConfig+0x40>
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	025a      	lsls	r2, r3, #9
 80050d0:	d508      	bpl.n	80050e4 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d2:	4b8f      	ldr	r3, [pc, #572]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	039b      	lsls	r3, r3, #14
 80050d8:	d5e9      	bpl.n	80050ae <HAL_RCC_OscConfig+0xa>
 80050da:	6863      	ldr	r3, [r4, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e6      	bne.n	80050ae <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 80050e0:	2001      	movs	r0, #1
 80050e2:	e174      	b.n	80053ce <HAL_RCC_OscConfig+0x32a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050e4:	6863      	ldr	r3, [r4, #4]
 80050e6:	4d8a      	ldr	r5, [pc, #552]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ec:	d013      	beq.n	8005116 <HAL_RCC_OscConfig+0x72>
 80050ee:	b95b      	cbnz	r3, 8005108 <HAL_RCC_OscConfig+0x64>
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fe:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005100:	f7fe fa5e 	bl	80035c0 <HAL_GetTick>
 8005104:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	e024      	b.n	8005152 <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	d106      	bne.n	800511e <HAL_RCC_OscConfig+0x7a>
 8005110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005114:	602b      	str	r3, [r5, #0]
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511c:	e005      	b.n	800512a <HAL_RCC_OscConfig+0x86>
 800511e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800512a:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800512c:	f7fe fa48 	bl	80035c0 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005130:	4d77      	ldr	r5, [pc, #476]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005132:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	039f      	lsls	r7, r3, #14
 8005138:	d4b9      	bmi.n	80050ae <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513a:	f7fe fa41 	bl	80035c0 <HAL_GetTick>
 800513e:	1b80      	subs	r0, r0, r6
 8005140:	2864      	cmp	r0, #100	; 0x64
 8005142:	d9f7      	bls.n	8005134 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8005144:	2003      	movs	r0, #3
 8005146:	e142      	b.n	80053ce <HAL_RCC_OscConfig+0x32a>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005148:	f7fe fa3a 	bl	80035c0 <HAL_GetTick>
 800514c:	1b80      	subs	r0, r0, r6
 800514e:	2864      	cmp	r0, #100	; 0x64
 8005150:	d8f8      	bhi.n	8005144 <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	0398      	lsls	r0, r3, #14
 8005156:	d4f7      	bmi.n	8005148 <HAL_RCC_OscConfig+0xa4>
 8005158:	e7a9      	b.n	80050ae <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800515a:	4b6d      	ldr	r3, [pc, #436]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	f012 0f0c 	tst.w	r2, #12
 8005162:	d007      	beq.n	8005174 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	f002 020c 	and.w	r2, r2, #12
 800516a:	2a08      	cmp	r2, #8
 800516c:	d117      	bne.n	800519e <HAL_RCC_OscConfig+0xfa>
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	0259      	lsls	r1, r3, #9
 8005172:	d414      	bmi.n	800519e <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005174:	4b66      	ldr	r3, [pc, #408]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	0792      	lsls	r2, r2, #30
 800517a:	d502      	bpl.n	8005182 <HAL_RCC_OscConfig+0xde>
 800517c:	68e2      	ldr	r2, [r4, #12]
 800517e:	2a01      	cmp	r2, #1
 8005180:	d1ae      	bne.n	80050e0 <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	21f8      	movs	r1, #248	; 0xf8
 8005186:	fa91 f1a1 	rbit	r1, r1
 800518a:	6920      	ldr	r0, [r4, #16]
 800518c:	fab1 f181 	clz	r1, r1
 8005190:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005194:	fa00 f101 	lsl.w	r1, r0, r1
 8005198:	430a      	orrs	r2, r1
 800519a:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519c:	e031      	b.n	8005202 <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	4d5b      	ldr	r5, [pc, #364]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 80051a2:	b1f3      	cbz	r3, 80051e2 <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ac:	f7fe fa08 	bl	80035c0 <HAL_GetTick>
 80051b0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b2:	682b      	ldr	r3, [r5, #0]
 80051b4:	4856      	ldr	r0, [pc, #344]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 80051b6:	079b      	lsls	r3, r3, #30
 80051b8:	d405      	bmi.n	80051c6 <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ba:	f7fe fa01 	bl	80035c0 <HAL_GetTick>
 80051be:	1b80      	subs	r0, r0, r6
 80051c0:	2802      	cmp	r0, #2
 80051c2:	d9f6      	bls.n	80051b2 <HAL_RCC_OscConfig+0x10e>
 80051c4:	e7be      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051c6:	6803      	ldr	r3, [r0, #0]
 80051c8:	22f8      	movs	r2, #248	; 0xf8
 80051ca:	fa92 f2a2 	rbit	r2, r2
 80051ce:	6921      	ldr	r1, [r4, #16]
 80051d0:	fab2 f282 	clz	r2, r2
 80051d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80051d8:	fa01 f202 	lsl.w	r2, r1, r2
 80051dc:	4313      	orrs	r3, r2
 80051de:	6003      	str	r3, [r0, #0]
 80051e0:	e00f      	b.n	8005202 <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051e2:	682b      	ldr	r3, [r5, #0]
 80051e4:	f023 0301 	bic.w	r3, r3, #1
 80051e8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ea:	f7fe f9e9 	bl	80035c0 <HAL_GetTick>
 80051ee:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	079f      	lsls	r7, r3, #30
 80051f4:	d505      	bpl.n	8005202 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fe f9e3 	bl	80035c0 <HAL_GetTick>
 80051fa:	1b80      	subs	r0, r0, r6
 80051fc:	2802      	cmp	r0, #2
 80051fe:	d9f7      	bls.n	80051f0 <HAL_RCC_OscConfig+0x14c>
 8005200:	e7a0      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	071e      	lsls	r6, r3, #28
 8005206:	d403      	bmi.n	8005210 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	075d      	lsls	r5, r3, #29
 800520c:	d549      	bpl.n	80052a2 <HAL_RCC_OscConfig+0x1fe>
 800520e:	e022      	b.n	8005256 <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005210:	6963      	ldr	r3, [r4, #20]
 8005212:	4d3f      	ldr	r5, [pc, #252]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 8005214:	b17b      	cbz	r3, 8005236 <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005216:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521e:	f7fe f9cf 	bl	80035c0 <HAL_GetTick>
 8005222:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005224:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005226:	0798      	lsls	r0, r3, #30
 8005228:	d4ee      	bmi.n	8005208 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800522a:	f7fe f9c9 	bl	80035c0 <HAL_GetTick>
 800522e:	1b80      	subs	r0, r0, r6
 8005230:	2802      	cmp	r0, #2
 8005232:	d9f7      	bls.n	8005224 <HAL_RCC_OscConfig+0x180>
 8005234:	e786      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005236:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005238:	f023 0301 	bic.w	r3, r3, #1
 800523c:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800523e:	f7fe f9bf 	bl	80035c0 <HAL_GetTick>
 8005242:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005244:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005246:	0799      	lsls	r1, r3, #30
 8005248:	d5de      	bpl.n	8005208 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800524a:	f7fe f9b9 	bl	80035c0 <HAL_GetTick>
 800524e:	1b80      	subs	r0, r0, r6
 8005250:	2802      	cmp	r0, #2
 8005252:	d9f7      	bls.n	8005244 <HAL_RCC_OscConfig+0x1a0>
 8005254:	e776      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005256:	4b2e      	ldr	r3, [pc, #184]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005258:	4d2e      	ldr	r5, [pc, #184]	; (8005314 <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800525a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800525c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005272:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005274:	f7fe f9a4 	bl	80035c0 <HAL_GetTick>
 8005278:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800527a:	682b      	ldr	r3, [r5, #0]
 800527c:	05da      	lsls	r2, r3, #23
 800527e:	d514      	bpl.n	80052aa <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	4d23      	ldr	r5, [pc, #140]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
 8005284:	2b01      	cmp	r3, #1
 8005286:	d116      	bne.n	80052b6 <HAL_RCC_OscConfig+0x212>
 8005288:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005290:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005294:	f7fe f994 	bl	80035c0 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005298:	4e1d      	ldr	r6, [pc, #116]	; (8005310 <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529a:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800529c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800529e:	079b      	lsls	r3, r3, #30
 80052a0:	d526      	bpl.n	80052f0 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052a2:	69a2      	ldr	r2, [r4, #24]
 80052a4:	2a00      	cmp	r2, #0
 80052a6:	d137      	bne.n	8005318 <HAL_RCC_OscConfig+0x274>
 80052a8:	e077      	b.n	800539a <HAL_RCC_OscConfig+0x2f6>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fe f989 	bl	80035c0 <HAL_GetTick>
 80052ae:	1b80      	subs	r0, r0, r6
 80052b0:	2864      	cmp	r0, #100	; 0x64
 80052b2:	d9e2      	bls.n	800527a <HAL_RCC_OscConfig+0x1d6>
 80052b4:	e746      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b6:	b96b      	cbnz	r3, 80052d4 <HAL_RCC_OscConfig+0x230>
 80052b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	672b      	str	r3, [r5, #112]	; 0x70
 80052c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80052c6:	f023 0304 	bic.w	r3, r3, #4
 80052ca:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052cc:	f7fe f978 	bl	80035c0 <HAL_GetTick>
 80052d0:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052d2:	e019      	b.n	8005308 <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d4:	2b05      	cmp	r3, #5
 80052d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80052d8:	d103      	bne.n	80052e2 <HAL_RCC_OscConfig+0x23e>
 80052da:	f043 0304 	orr.w	r3, r3, #4
 80052de:	672b      	str	r3, [r5, #112]	; 0x70
 80052e0:	e7d2      	b.n	8005288 <HAL_RCC_OscConfig+0x1e4>
 80052e2:	f023 0301 	bic.w	r3, r3, #1
 80052e6:	672b      	str	r3, [r5, #112]	; 0x70
 80052e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80052ea:	f023 0304 	bic.w	r3, r3, #4
 80052ee:	e7ce      	b.n	800528e <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f0:	f7fe f966 	bl	80035c0 <HAL_GetTick>
 80052f4:	1bc0      	subs	r0, r0, r7
 80052f6:	42a8      	cmp	r0, r5
 80052f8:	d9d0      	bls.n	800529c <HAL_RCC_OscConfig+0x1f8>
 80052fa:	e723      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fe f960 	bl	80035c0 <HAL_GetTick>
 8005300:	1b80      	subs	r0, r0, r6
 8005302:	42b8      	cmp	r0, r7
 8005304:	f63f af1e 	bhi.w	8005144 <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005308:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800530a:	0798      	lsls	r0, r3, #30
 800530c:	d4f6      	bmi.n	80052fc <HAL_RCC_OscConfig+0x258>
 800530e:	e7c8      	b.n	80052a2 <HAL_RCC_OscConfig+0x1fe>
 8005310:	40023800 	.word	0x40023800
 8005314:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005318:	4d2e      	ldr	r5, [pc, #184]	; (80053d4 <HAL_RCC_OscConfig+0x330>)
 800531a:	68ab      	ldr	r3, [r5, #8]
 800531c:	f003 030c 	and.w	r3, r3, #12
 8005320:	2b08      	cmp	r3, #8
 8005322:	f43f aedd 	beq.w	80050e0 <HAL_RCC_OscConfig+0x3c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005326:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005328:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800532e:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005330:	d141      	bne.n	80053b6 <HAL_RCC_OscConfig+0x312>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fe f945 	bl	80035c0 <HAL_GetTick>
 8005336:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	4e26      	ldr	r6, [pc, #152]	; (80053d4 <HAL_RCC_OscConfig+0x330>)
 800533c:	0199      	lsls	r1, r3, #6
 800533e:	d42e      	bmi.n	800539e <HAL_RCC_OscConfig+0x2fa>
 8005340:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005344:	fa92 f2a2 	rbit	r2, r2
 8005348:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800534c:	fab2 f782 	clz	r7, r2
 8005350:	fa93 f3a3 	rbit	r3, r3
 8005354:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005358:	fab3 f583 	clz	r5, r3
 800535c:	fa92 f2a2 	rbit	r2, r2
 8005360:	69e0      	ldr	r0, [r4, #28]
 8005362:	fab2 f182 	clz	r1, r2
 8005366:	6a23      	ldr	r3, [r4, #32]
 8005368:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800536a:	4303      	orrs	r3, r0
 800536c:	40ba      	lsls	r2, r7
 800536e:	ea43 0002 	orr.w	r0, r3, r2
 8005372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005374:	085a      	lsrs	r2, r3, #1
 8005376:	3a01      	subs	r2, #1
 8005378:	fa02 f305 	lsl.w	r3, r2, r5
 800537c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800537e:	4303      	orrs	r3, r0
 8005380:	408a      	lsls	r2, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	6073      	str	r3, [r6, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005386:	6833      	ldr	r3, [r6, #0]
 8005388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800538c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fe f917 	bl	80035c0 <HAL_GetTick>
 8005392:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005394:	6833      	ldr	r3, [r6, #0]
 8005396:	019a      	lsls	r2, r3, #6
 8005398:	d507      	bpl.n	80053aa <HAL_RCC_OscConfig+0x306>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800539a:	2000      	movs	r0, #0
 800539c:	e017      	b.n	80053ce <HAL_RCC_OscConfig+0x32a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800539e:	f7fe f90f 	bl	80035c0 <HAL_GetTick>
 80053a2:	1bc0      	subs	r0, r0, r7
 80053a4:	2802      	cmp	r0, #2
 80053a6:	d9c7      	bls.n	8005338 <HAL_RCC_OscConfig+0x294>
 80053a8:	e6cc      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fe f909 	bl	80035c0 <HAL_GetTick>
 80053ae:	1b00      	subs	r0, r0, r4
 80053b0:	2802      	cmp	r0, #2
 80053b2:	d9ef      	bls.n	8005394 <HAL_RCC_OscConfig+0x2f0>
 80053b4:	e6c6      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fe f903 	bl	80035c0 <HAL_GetTick>
 80053ba:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	019b      	lsls	r3, r3, #6
 80053c0:	d5eb      	bpl.n	800539a <HAL_RCC_OscConfig+0x2f6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c2:	f7fe f8fd 	bl	80035c0 <HAL_GetTick>
 80053c6:	1b00      	subs	r0, r0, r4
 80053c8:	2802      	cmp	r0, #2
 80053ca:	d9f7      	bls.n	80053bc <HAL_RCC_OscConfig+0x318>
 80053cc:	e6ba      	b.n	8005144 <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80053ce:	b003      	add	sp, #12
 80053d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023800 	.word	0x40023800

080053d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053d8:	491b      	ldr	r1, [pc, #108]	; (8005448 <HAL_RCC_GetSysClockFreq+0x70>)
 80053da:	688b      	ldr	r3, [r1, #8]
 80053dc:	f003 030c 	and.w	r3, r3, #12
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d02c      	beq.n	800543e <HAL_RCC_GetSysClockFreq+0x66>
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d12c      	bne.n	8005442 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053e8:	6848      	ldr	r0, [r1, #4]
 80053ea:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053ee:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80053f8:	684b      	ldr	r3, [r1, #4]
 80053fa:	fa92 f2a2 	rbit	r2, r2
 80053fe:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005402:	fab2 f282 	clz	r2, r2
 8005406:	ea01 0103 	and.w	r1, r1, r3
 800540a:	fa21 f102 	lsr.w	r1, r1, r2
 800540e:	bf14      	ite	ne
 8005410:	4a0e      	ldrne	r2, [pc, #56]	; (800544c <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8005412:	4a0f      	ldreq	r2, [pc, #60]	; (8005450 <HAL_RCC_GetSysClockFreq+0x78>)
 8005414:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8005418:	4a0b      	ldr	r2, [pc, #44]	; (8005448 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 800541a:	fb00 f301 	mul.w	r3, r0, r1
 800541e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8005422:	6852      	ldr	r2, [r2, #4]
 8005424:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8005428:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800542c:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8005430:	fa22 f000 	lsr.w	r0, r2, r0
 8005434:	3001      	adds	r0, #1
 8005436:	0040      	lsls	r0, r0, #1
 8005438:	fbb3 f0f0 	udiv	r0, r3, r0
 800543c:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800543e:	4803      	ldr	r0, [pc, #12]	; (800544c <HAL_RCC_GetSysClockFreq+0x74>)
 8005440:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005442:	4803      	ldr	r0, [pc, #12]	; (8005450 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	017d7840 	.word	0x017d7840
 8005450:	00f42400 	.word	0x00f42400

08005454 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005454:	4a50      	ldr	r2, [pc, #320]	; (8005598 <HAL_RCC_ClockConfig+0x144>)
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800545e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005462:	4604      	mov	r4, r0
 8005464:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005466:	d30a      	bcc.n	800547e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005468:	6821      	ldr	r1, [r4, #0]
 800546a:	0788      	lsls	r0, r1, #30
 800546c:	d514      	bpl.n	8005498 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800546e:	484b      	ldr	r0, [pc, #300]	; (800559c <HAL_RCC_ClockConfig+0x148>)
 8005470:	6883      	ldr	r3, [r0, #8]
 8005472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005476:	68a3      	ldr	r3, [r4, #8]
 8005478:	4313      	orrs	r3, r2
 800547a:	6083      	str	r3, [r0, #8]
 800547c:	e00c      	b.n	8005498 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	f023 030f 	bic.w	r3, r3, #15
 8005484:	430b      	orrs	r3, r1
 8005486:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005488:	6813      	ldr	r3, [r2, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	4299      	cmp	r1, r3
 8005490:	d0ea      	beq.n	8005468 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8005492:	2001      	movs	r0, #1
 8005494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005498:	07c9      	lsls	r1, r1, #31
 800549a:	d406      	bmi.n	80054aa <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800549c:	4a3e      	ldr	r2, [pc, #248]	; (8005598 <HAL_RCC_ClockConfig+0x144>)
 800549e:	6813      	ldr	r3, [r2, #0]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	429d      	cmp	r5, r3
 80054a6:	d342      	bcc.n	800552e <HAL_RCC_ClockConfig+0xda>
 80054a8:	e04b      	b.n	8005542 <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054aa:	6862      	ldr	r2, [r4, #4]
 80054ac:	4b3b      	ldr	r3, [pc, #236]	; (800559c <HAL_RCC_ClockConfig+0x148>)
 80054ae:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b0:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054b2:	d102      	bne.n	80054ba <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b4:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80054b8:	e006      	b.n	80054c8 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054ba:	2a02      	cmp	r2, #2
 80054bc:	d102      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054be:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80054c2:	e001      	b.n	80054c8 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c4:	f011 0f02 	tst.w	r1, #2
 80054c8:	d0e3      	beq.n	8005492 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ca:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054cc:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80054d0:	4f32      	ldr	r7, [pc, #200]	; (800559c <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054d2:	f021 0103 	bic.w	r1, r1, #3
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054da:	f7fe f871 	bl	80035c0 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054de:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e0:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d10c      	bne.n	8005500 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f003 030c 	and.w	r3, r3, #12
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d0d5      	beq.n	800549c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f0:	f7fe f866 	bl	80035c0 <HAL_GetTick>
 80054f4:	1b80      	subs	r0, r0, r6
 80054f6:	4540      	cmp	r0, r8
 80054f8:	d9f5      	bls.n	80054e6 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 80054fa:	2003      	movs	r0, #3
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005500:	2b02      	cmp	r3, #2
 8005502:	d10f      	bne.n	8005524 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b08      	cmp	r3, #8
 800550c:	d0c6      	beq.n	800549c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550e:	f7fe f857 	bl	80035c0 <HAL_GetTick>
 8005512:	1b80      	subs	r0, r0, r6
 8005514:	4540      	cmp	r0, r8
 8005516:	d9f5      	bls.n	8005504 <HAL_RCC_ClockConfig+0xb0>
 8005518:	e7ef      	b.n	80054fa <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551a:	f7fe f851 	bl	80035c0 <HAL_GetTick>
 800551e:	1b80      	subs	r0, r0, r6
 8005520:	4540      	cmp	r0, r8
 8005522:	d8ea      	bhi.n	80054fa <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f013 0f0c 	tst.w	r3, #12
 800552a:	d1f6      	bne.n	800551a <HAL_RCC_ClockConfig+0xc6>
 800552c:	e7b6      	b.n	800549c <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	6813      	ldr	r3, [r2, #0]
 8005530:	f023 030f 	bic.w	r3, r3, #15
 8005534:	432b      	orrs	r3, r5
 8005536:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005538:	6813      	ldr	r3, [r2, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	429d      	cmp	r5, r3
 8005540:	d1a7      	bne.n	8005492 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005542:	6821      	ldr	r1, [r4, #0]
 8005544:	074a      	lsls	r2, r1, #29
 8005546:	d506      	bpl.n	8005556 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005548:	4814      	ldr	r0, [pc, #80]	; (800559c <HAL_RCC_ClockConfig+0x148>)
 800554a:	6883      	ldr	r3, [r0, #8]
 800554c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005550:	68e3      	ldr	r3, [r4, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005556:	070b      	lsls	r3, r1, #28
 8005558:	d507      	bpl.n	800556a <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800555a:	4a10      	ldr	r2, [pc, #64]	; (800559c <HAL_RCC_ClockConfig+0x148>)
 800555c:	6921      	ldr	r1, [r4, #16]
 800555e:	6893      	ldr	r3, [r2, #8]
 8005560:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005564:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005568:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800556a:	f7ff ff35 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
 800556e:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCC_ClockConfig+0x148>)
 8005570:	22f0      	movs	r2, #240	; 0xf0
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	fa92 f2a2 	rbit	r2, r2
 8005578:	fab2 f282 	clz	r2, r2
 800557c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005580:	40d3      	lsrs	r3, r2
 8005582:	4a07      	ldr	r2, [pc, #28]	; (80055a0 <HAL_RCC_ClockConfig+0x14c>)
 8005584:	5cd3      	ldrb	r3, [r2, r3]
 8005586:	40d8      	lsrs	r0, r3
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_RCC_ClockConfig+0x150>)
 800558a:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800558c:	2000      	movs	r0, #0
 800558e:	f009 facb 	bl	800eb28 <HAL_InitTick>
  
  return HAL_OK;
 8005592:	2000      	movs	r0, #0
}
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	40023c00 	.word	0x40023c00
 800559c:	40023800 	.word	0x40023800
 80055a0:	0802f320 	.word	0x0802f320
 80055a4:	20010044 	.word	0x20010044

080055a8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80055a8:	4b01      	ldr	r3, [pc, #4]	; (80055b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	20010044 	.word	0x20010044

080055b4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80055b4:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	fa92 f2a2 	rbit	r2, r2
 80055c0:	fab2 f282 	clz	r2, r2
 80055c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80055c8:	40d3      	lsrs	r3, r2
 80055ca:	4a04      	ldr	r2, [pc, #16]	; (80055dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055cc:	5cd3      	ldrb	r3, [r2, r3]
 80055ce:	4a04      	ldr	r2, [pc, #16]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80055d0:	6810      	ldr	r0, [r2, #0]
} 
 80055d2:	40d8      	lsrs	r0, r3
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800
 80055dc:	0802f330 	.word	0x0802f330
 80055e0:	20010044 	.word	0x20010044

080055e4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055e4:	230f      	movs	r3, #15
 80055e6:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <HAL_RCC_GetClockConfig+0x34>)
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	f002 0203 	and.w	r2, r2, #3
 80055f0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80055f8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8005600:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	08db      	lsrs	r3, r3, #3
 8005606:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800560a:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <HAL_RCC_GetClockConfig+0x38>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 030f 	and.w	r3, r3, #15
 8005614:	600b      	str	r3, [r1, #0]
 8005616:	4770      	bx	lr
 8005618:	40023800 	.word	0x40023800
 800561c:	40023c00 	.word	0x40023c00

08005620 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005620:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005626:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800562a:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800562c:	d00b      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800562e:	4ab6      	ldr	r2, [pc, #728]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005630:	6891      	ldr	r1, [r2, #8]
 8005632:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8005636:	6091      	str	r1, [r2, #8]
 8005638:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800563a:	6891      	ldr	r1, [r2, #8]
 800563c:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 800563e:	fab6 f686 	clz	r6, r6
 8005642:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005644:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005646:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800564a:	d012      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800564c:	49ae      	ldr	r1, [pc, #696]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800564e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005650:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005654:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005658:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 800565c:	bf08      	it	eq
 800565e:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005660:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8005664:	bf16      	itet	ne
 8005666:	fab5 f585 	clzne	r5, r5
 800566a:	2500      	moveq	r5, #0
 800566c:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800566e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005672:	02d8      	lsls	r0, r3, #11
 8005674:	d511      	bpl.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005676:	48a4      	ldr	r0, [pc, #656]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005678:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800567a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800567e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005682:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005686:	ea42 0201 	orr.w	r2, r2, r1
 800568a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800568e:	d003      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8005690:	2900      	cmp	r1, #0
 8005692:	bf08      	it	eq
 8005694:	2501      	moveq	r5, #1
 8005696:	e000      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8005698:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 800569a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800569e:	bf18      	it	ne
 80056a0:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056a2:	0699      	lsls	r1, r3, #26
 80056a4:	d55d      	bpl.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	4b98      	ldr	r3, [pc, #608]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056a8:	4f98      	ldr	r7, [pc, #608]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c2:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c4:	f7fd ff7c 	bl	80035c0 <HAL_GetTick>
 80056c8:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	05da      	lsls	r2, r3, #23
 80056ce:	d407      	bmi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d0:	f7fd ff76 	bl	80035c0 <HAL_GetTick>
 80056d4:	ebc8 0000 	rsb	r0, r8, r0
 80056d8:	2864      	cmp	r0, #100	; 0x64
 80056da:	d9f6      	bls.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 80056dc:	2003      	movs	r0, #3
 80056de:	e340      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056e0:	4f89      	ldr	r7, [pc, #548]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056e4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80056e8:	d10f      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80056ec:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80056f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f4:	4b84      	ldr	r3, [pc, #528]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056f6:	d12b      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80056f8:	6899      	ldr	r1, [r3, #8]
 80056fa:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 80056fe:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 8005702:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8005706:	4301      	orrs	r1, r0
 8005708:	e025      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800570a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800570c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005710:	4293      	cmp	r3, r2
 8005712:	d0ea      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005714:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005716:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005718:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800571c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005720:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005722:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005724:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005728:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800572a:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800572c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800572e:	07db      	lsls	r3, r3, #31
 8005730:	d5db      	bpl.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fd ff45 	bl	80035c0 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573a:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800573e:	0798      	lsls	r0, r3, #30
 8005740:	d4d3      	bmi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fd ff3d 	bl	80035c0 <HAL_GetTick>
 8005746:	ebc8 0000 	rsb	r0, r8, r0
 800574a:	4548      	cmp	r0, r9
 800574c:	d9f6      	bls.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800574e:	e7c5      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005750:	6899      	ldr	r1, [r3, #8]
 8005752:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005756:	6099      	str	r1, [r3, #8]
 8005758:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800575c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800575e:	430a      	orrs	r2, r1
 8005760:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	06d9      	lsls	r1, r3, #27
 8005766:	d50c      	bpl.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005768:	4a67      	ldr	r2, [pc, #412]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800576a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800576e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005772:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8005776:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800577a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800577c:	4301      	orrs	r1, r0
 800577e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005782:	045a      	lsls	r2, r3, #17
 8005784:	d508      	bpl.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005786:	4860      	ldr	r0, [pc, #384]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005788:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800578c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8005790:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005792:	430a      	orrs	r2, r1
 8005794:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005798:	041f      	lsls	r7, r3, #16
 800579a:	d508      	bpl.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800579c:	485a      	ldr	r0, [pc, #360]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800579e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057a2:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 80057a6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80057a8:	430a      	orrs	r2, r1
 80057aa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ae:	03d8      	lsls	r0, r3, #15
 80057b0:	d508      	bpl.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057b2:	4855      	ldr	r0, [pc, #340]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057b8:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 80057bc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80057be:	430a      	orrs	r2, r1
 80057c0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057c4:	0399      	lsls	r1, r3, #14
 80057c6:	d508      	bpl.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057c8:	484f      	ldr	r0, [pc, #316]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057ca:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057ce:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 80057d2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80057d4:	430a      	orrs	r2, r1
 80057d6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057da:	065a      	lsls	r2, r3, #25
 80057dc:	d508      	bpl.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057de:	484a      	ldr	r0, [pc, #296]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057e0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057e4:	f022 0103 	bic.w	r1, r2, #3
 80057e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80057ea:	430a      	orrs	r2, r1
 80057ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057f0:	061f      	lsls	r7, r3, #24
 80057f2:	d508      	bpl.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057f4:	4844      	ldr	r0, [pc, #272]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057f6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057fa:	f022 010c 	bic.w	r1, r2, #12
 80057fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005800:	430a      	orrs	r2, r1
 8005802:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005806:	05d8      	lsls	r0, r3, #23
 8005808:	d508      	bpl.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800580a:	483f      	ldr	r0, [pc, #252]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800580c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005810:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 8005814:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005816:	430a      	orrs	r2, r1
 8005818:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800581c:	0599      	lsls	r1, r3, #22
 800581e:	d508      	bpl.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005820:	4839      	ldr	r0, [pc, #228]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005822:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005826:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 800582a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800582c:	430a      	orrs	r2, r1
 800582e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005832:	055a      	lsls	r2, r3, #21
 8005834:	d508      	bpl.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005836:	4834      	ldr	r0, [pc, #208]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005838:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800583c:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8005840:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005842:	430a      	orrs	r2, r1
 8005844:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005848:	051f      	lsls	r7, r3, #20
 800584a:	d508      	bpl.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800584c:	482e      	ldr	r0, [pc, #184]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800584e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005852:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8005856:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005858:	430a      	orrs	r2, r1
 800585a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800585e:	04d8      	lsls	r0, r3, #19
 8005860:	d508      	bpl.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005862:	4829      	ldr	r0, [pc, #164]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005864:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005868:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800586c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800586e:	430a      	orrs	r2, r1
 8005870:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005874:	0499      	lsls	r1, r3, #18
 8005876:	d508      	bpl.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005878:	4823      	ldr	r0, [pc, #140]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800587a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800587e:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8005882:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005884:	430a      	orrs	r2, r1
 8005886:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800588a:	025a      	lsls	r2, r3, #9
 800588c:	d508      	bpl.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800588e:	481e      	ldr	r0, [pc, #120]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005890:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005894:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8005898:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800589a:	430a      	orrs	r2, r1
 800589c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058a0:	029f      	lsls	r7, r3, #10
 80058a2:	d50c      	bpl.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058a4:	4818      	ldr	r0, [pc, #96]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058a6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80058a8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80058ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058b0:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 80058b4:	bf08      	it	eq
 80058b6:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058b8:	430a      	orrs	r2, r1
 80058ba:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 80058be:	f013 0f08 	tst.w	r3, #8
 80058c2:	bf18      	it	ne
 80058c4:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058c6:	0358      	lsls	r0, r3, #13
 80058c8:	d508      	bpl.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058ca:	480f      	ldr	r0, [pc, #60]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058cc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80058d0:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80058d4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80058d6:	430a      	orrs	r2, r1
 80058d8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80058dc:	0219      	lsls	r1, r3, #8
 80058de:	d509      	bpl.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058e0:	4809      	ldr	r0, [pc, #36]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058e2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80058e6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80058ea:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80058ee:	430a      	orrs	r2, r1
 80058f0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80058f4:	2e01      	cmp	r6, #1
 80058f6:	d00b      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80058f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058fc:	d008      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058fe:	2d01      	cmp	r5, #1
 8005900:	f040 818c 	bne.w	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8005904:	e123      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x52e>
 8005906:	bf00      	nop
 8005908:	40023800 	.word	0x40023800
 800590c:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8005910:	4ec8      	ldr	r6, [pc, #800]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005912:	6833      	ldr	r3, [r6, #0]
 8005914:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005918:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800591a:	f7fd fe51 	bl	80035c0 <HAL_GetTick>
 800591e:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005920:	6833      	ldr	r3, [r6, #0]
 8005922:	f8df e310 	ldr.w	lr, [pc, #784]	; 8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005926:	011a      	lsls	r2, r3, #4
 8005928:	d505      	bpl.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800592a:	f7fd fe49 	bl	80035c0 <HAL_GetTick>
 800592e:	1bc0      	subs	r0, r0, r7
 8005930:	2864      	cmp	r0, #100	; 0x64
 8005932:	d9f5      	bls.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005934:	e6d2      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005936:	6827      	ldr	r7, [r4, #0]
 8005938:	07fb      	lsls	r3, r7, #31
 800593a:	d53c      	bpl.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 800593c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800593e:	bbd3      	cbnz	r3, 80059b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005940:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8005944:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8005948:	fa98 f9a8 	rbit	r9, r8
 800594c:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8005950:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005954:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8005958:	fa96 fca6 	rbit	ip, r6
 800595c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8005960:	fabc fc8c 	clz	ip, ip
 8005964:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005968:	faba fa8a 	clz	sl, sl
 800596c:	fa98 f8a8 	rbit	r8, r8
 8005970:	fab8 f888 	clz	r8, r8
 8005974:	fa96 f6a6 	rbit	r6, r6
 8005978:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800597c:	fab6 f686 	clz	r6, r6
 8005980:	fa93 f3a3 	rbit	r3, r3
 8005984:	fab3 fb83 	clz	fp, r3
 8005988:	6861      	ldr	r1, [r4, #4]
 800598a:	68a3      	ldr	r3, [r4, #8]
 800598c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8005990:	fa01 f10a 	lsl.w	r1, r1, sl
 8005994:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005998:	fa03 f30b 	lsl.w	r3, r3, fp
 800599c:	fa20 f009 	lsr.w	r0, r0, r9
 80059a0:	fa22 f20c 	lsr.w	r2, r2, ip
 80059a4:	430b      	orrs	r3, r1
 80059a6:	fa00 f108 	lsl.w	r1, r0, r8
 80059aa:	4319      	orrs	r1, r3
 80059ac:	fa02 f306 	lsl.w	r3, r2, r6
 80059b0:	430b      	orrs	r3, r1
 80059b2:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059b6:	033e      	lsls	r6, r7, #12
 80059b8:	d503      	bpl.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80059ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059c0:	d005      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80059c2:	02f8      	lsls	r0, r7, #11
 80059c4:	d549      	bpl.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 80059c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059cc:	d145      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80059ce:	f8df e264 	ldr.w	lr, [pc, #612]	; 8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80059d2:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 80059d6:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 80059da:	fa98 f9a8 	rbit	r9, r8
 80059de:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80059e2:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80059e6:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80059ea:	fa96 fca6 	rbit	ip, r6
 80059ee:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 80059f2:	fabc fc8c 	clz	ip, ip
 80059f6:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059fa:	fabb fb8b 	clz	fp, fp
 80059fe:	fa98 f8a8 	rbit	r8, r8
 8005a02:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8005a06:	fab8 f888 	clz	r8, r8
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	fab3 fa83 	clz	sl, r3
 8005a12:	fa96 f6a6 	rbit	r6, r6
 8005a16:	6863      	ldr	r3, [r4, #4]
 8005a18:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8005a1c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8005a20:	fab6 f686 	clz	r6, r6
 8005a24:	fa03 f10b 	lsl.w	r1, r3, fp
 8005a28:	68e3      	ldr	r3, [r4, #12]
 8005a2a:	fa20 f009 	lsr.w	r0, r0, r9
 8005a2e:	fa22 f20c 	lsr.w	r2, r2, ip
 8005a32:	fa03 f30a 	lsl.w	r3, r3, sl
 8005a36:	430b      	orrs	r3, r1
 8005a38:	fa00 f108 	lsl.w	r1, r0, r8
 8005a3c:	4319      	orrs	r1, r3
 8005a3e:	fa02 f306 	lsl.w	r3, r2, r6
 8005a42:	430b      	orrs	r3, r1
 8005a44:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005a48:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8005a4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a4e:	f023 031f 	bic.w	r3, r3, #31
 8005a52:	3a01      	subs	r2, #1
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a5a:	01f9      	lsls	r1, r7, #7
 8005a5c:	d53c      	bpl.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005a5e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005a62:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8005a66:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8005a6a:	fa98 f9a8 	rbit	r9, r8
 8005a6e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8005a72:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005a76:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8005a7a:	fa96 fca6 	rbit	ip, r6
 8005a7e:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8005a82:	fabc fc8c 	clz	ip, ip
 8005a86:	fa9b fbab 	rbit	fp, fp
 8005a8a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a8e:	fabb fb8b 	clz	fp, fp
 8005a92:	fa93 f3a3 	rbit	r3, r3
 8005a96:	fab3 fa83 	clz	sl, r3
 8005a9a:	fa98 f8a8 	rbit	r8, r8
 8005a9e:	fab8 f888 	clz	r8, r8
 8005aa2:	fa96 f6a6 	rbit	r6, r6
 8005aa6:	6863      	ldr	r3, [r4, #4]
 8005aa8:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005aac:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8005ab0:	fab6 f686 	clz	r6, r6
 8005ab4:	fa03 f10b 	lsl.w	r1, r3, fp
 8005ab8:	6923      	ldr	r3, [r4, #16]
 8005aba:	fa20 f009 	lsr.w	r0, r0, r9
 8005abe:	fa22 f20c 	lsr.w	r2, r2, ip
 8005ac2:	fa03 f30a 	lsl.w	r3, r3, sl
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	fa00 f108 	lsl.w	r1, r0, r8
 8005acc:	4319      	orrs	r1, r3
 8005ace:	fa02 f306 	lsl.w	r3, r2, r6
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ad8:	01ba      	lsls	r2, r7, #6
 8005ada:	d526      	bpl.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005adc:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8005ae0:	fa9e feae 	rbit	lr, lr
 8005ae4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ae8:	fabe fe8e 	clz	lr, lr
 8005aec:	fa90 f0a0 	rbit	r0, r0
 8005af0:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005af4:	fab0 f780 	clz	r7, r0
 8005af8:	fa92 f2a2 	rbit	r2, r2
 8005afc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005b00:	fab2 f682 	clz	r6, r2
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	fab3 f183 	clz	r1, r3
 8005b0c:	6920      	ldr	r0, [r4, #16]
 8005b0e:	6863      	ldr	r3, [r4, #4]
 8005b10:	68e2      	ldr	r2, [r4, #12]
 8005b12:	40b8      	lsls	r0, r7
 8005b14:	fa03 f30e 	lsl.w	r3, r3, lr
 8005b18:	40b2      	lsls	r2, r6
 8005b1a:	4303      	orrs	r3, r0
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	68a3      	ldr	r3, [r4, #8]
 8005b20:	408b      	lsls	r3, r1
 8005b22:	4313      	orrs	r3, r2
 8005b24:	4a43      	ldr	r2, [pc, #268]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005b26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b2a:	4e42      	ldr	r6, [pc, #264]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005b2c:	6833      	ldr	r3, [r6, #0]
 8005b2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b32:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b34:	f7fd fd44 	bl	80035c0 <HAL_GetTick>
 8005b38:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b3a:	6833      	ldr	r3, [r6, #0]
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	f53f aede 	bmi.w	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b42:	f7fd fd3d 	bl	80035c0 <HAL_GetTick>
 8005b46:	1bc0      	subs	r0, r0, r7
 8005b48:	2864      	cmp	r0, #100	; 0x64
 8005b4a:	d9f6      	bls.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b4c:	e5c6      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005b4e:	4d39      	ldr	r5, [pc, #228]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b56:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b58:	f7fd fd32 	bl	80035c0 <HAL_GetTick>
 8005b5c:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	009f      	lsls	r7, r3, #2
 8005b62:	d45d      	bmi.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b64:	6825      	ldr	r5, [r4, #0]
 8005b66:	032e      	lsls	r6, r5, #12
 8005b68:	d460      	bmi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b6a:	02e8      	lsls	r0, r5, #11
 8005b6c:	d464      	bmi.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b6e:	02a9      	lsls	r1, r5, #10
 8005b70:	f100 80ad 	bmi.w	8005cce <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b74:	072a      	lsls	r2, r5, #28
 8005b76:	d545      	bpl.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005b78:	4f2e      	ldr	r7, [pc, #184]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005b7a:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8005b7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005b82:	fa95 fca5 	rbit	ip, r5
 8005b86:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8005b8a:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005b8e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005b92:	fa96 f8a6 	rbit	r8, r6
 8005b96:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 8005b9a:	fab8 f888 	clz	r8, r8
 8005b9e:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ba2:	fab9 f989 	clz	r9, r9
 8005ba6:	fa96 f6a6 	rbit	r6, r6
 8005baa:	fab6 f686 	clz	r6, r6
 8005bae:	fa95 f5a5 	rbit	r5, r5
 8005bb2:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8005bb6:	fab5 f585 	clz	r5, r5
 8005bba:	fa9e feae 	rbit	lr, lr
 8005bbe:	6963      	ldr	r3, [r4, #20]
 8005bc0:	fabe fe8e 	clz	lr, lr
 8005bc4:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8005bc8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005bcc:	fa03 f109 	lsl.w	r1, r3, r9
 8005bd0:	69e3      	ldr	r3, [r4, #28]
 8005bd2:	fa20 f008 	lsr.w	r0, r0, r8
 8005bd6:	fa22 f20c 	lsr.w	r2, r2, ip
 8005bda:	fa03 fe0e 	lsl.w	lr, r3, lr
 8005bde:	fa02 f305 	lsl.w	r3, r2, r5
 8005be2:	ea41 0e0e 	orr.w	lr, r1, lr
 8005be6:	fa00 f106 	lsl.w	r1, r0, r6
 8005bea:	ea4e 0101 	orr.w	r1, lr, r1
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c04:	4c0b      	ldr	r4, [pc, #44]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0c:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c0e:	f7fd fcd7 	bl	80035c0 <HAL_GetTick>
 8005c12:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	f140 809c 	bpl.w	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e0a0      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c20:	f7fd fcce 	bl	80035c0 <HAL_GetTick>
 8005c24:	1b80      	subs	r0, r0, r6
 8005c26:	2864      	cmp	r0, #100	; 0x64
 8005c28:	d999      	bls.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8005c2a:	e557      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c2e:	b133      	cbz	r3, 8005c3e <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8005c30:	e79b      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8005c32:	bf00      	nop
 8005c34:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d197      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005c3e:	4f4a      	ldr	r7, [pc, #296]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8005c40:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8005c44:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005c48:	fa9c f9ac 	rbit	r9, ip
 8005c4c:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8005c50:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005c54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005c58:	fa96 fea6 	rbit	lr, r6
 8005c5c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8005c60:	fabe fe8e 	clz	lr, lr
 8005c64:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c68:	faba fa8a 	clz	sl, sl
 8005c6c:	fa9c fcac 	rbit	ip, ip
 8005c70:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8005c74:	fabc fc8c 	clz	ip, ip
 8005c78:	fa98 f8a8 	rbit	r8, r8
 8005c7c:	fab8 f888 	clz	r8, r8
 8005c80:	fa96 f6a6 	rbit	r6, r6
 8005c84:	69a1      	ldr	r1, [r4, #24]
 8005c86:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8005c8a:	6963      	ldr	r3, [r4, #20]
 8005c8c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8005c90:	fa01 f808 	lsl.w	r8, r1, r8
 8005c94:	fa20 f009 	lsr.w	r0, r0, r9
 8005c98:	fa03 f30a 	lsl.w	r3, r3, sl
 8005c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ca0:	fab6 f686 	clz	r6, r6
 8005ca4:	fa00 f10c 	lsl.w	r1, r0, ip
 8005ca8:	ea43 0308 	orr.w	r3, r3, r8
 8005cac:	4319      	orrs	r1, r3
 8005cae:	fa02 f306 	lsl.w	r3, r2, r6
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005cbe:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005cc2:	3a01      	subs	r2, #1
 8005cc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ccc:	e74f      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cce:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cd4:	f47f af4e 	bne.w	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005cd8:	4f23      	ldr	r7, [pc, #140]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8005cda:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8005cde:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005ce2:	fa9c f9ac 	rbit	r9, ip
 8005ce6:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8005cea:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005cee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005cf2:	fa96 fea6 	rbit	lr, r6
 8005cf6:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8005cfa:	fabe fe8e 	clz	lr, lr
 8005cfe:	fa9a faaa 	rbit	sl, sl
 8005d02:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d06:	faba fa8a 	clz	sl, sl
 8005d0a:	fa98 f8a8 	rbit	r8, r8
 8005d0e:	fab8 f888 	clz	r8, r8
 8005d12:	fa9c fcac 	rbit	ip, ip
 8005d16:	fabc fc8c 	clz	ip, ip
 8005d1a:	fa96 f6a6 	rbit	r6, r6
 8005d1e:	6a21      	ldr	r1, [r4, #32]
 8005d20:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005d24:	6963      	ldr	r3, [r4, #20]
 8005d26:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8005d2a:	fa01 f808 	lsl.w	r8, r1, r8
 8005d2e:	fa20 f009 	lsr.w	r0, r0, r9
 8005d32:	fa03 f30a 	lsl.w	r3, r3, sl
 8005d36:	fab6 f686 	clz	r6, r6
 8005d3a:	fa00 f10c 	lsl.w	r1, r0, ip
 8005d3e:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d42:	ea43 0308 	orr.w	r3, r3, r8
 8005d46:	4319      	orrs	r1, r3
 8005d48:	fa02 f306 	lsl.w	r3, r2, r6
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d52:	e70f      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d54:	f7fd fc34 	bl	80035c0 <HAL_GetTick>
 8005d58:	1b40      	subs	r0, r0, r5
 8005d5a:	2864      	cmp	r0, #100	; 0x64
 8005d5c:	f67f af5a 	bls.w	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005d60:	e4bc      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8005d62:	b003      	add	sp, #12
 8005d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d68:	40023800 	.word	0x40023800

08005d6c <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005d6c:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8005d6e:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005d70:	4b76      	ldr	r3, [pc, #472]	; (8005f4c <HAL_RCCEx_GetPeriphCLKConfig+0x1e0>)
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d72:	b5f0      	push	{r4, r5, r6, r7, lr}
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005d74:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005d78:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8005d7c:	fa95 f2a5 	rbit	r2, r5
 8005d80:	fab2 f182 	clz	r1, r2
 8005d84:	462a      	mov	r2, r5
 8005d86:	4022      	ands	r2, r4
 8005d88:	40ca      	lsrs	r2, r1
 8005d8a:	6042      	str	r2, [r0, #4]
 8005d8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005d90:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005d94:	fa92 f4a2 	rbit	r4, r2
 8005d98:	fab4 f484 	clz	r4, r4
 8005d9c:	4011      	ands	r1, r2
 8005d9e:	40e1      	lsrs	r1, r4
 8005da0:	f04f 6470 	mov.w	r4, #251658240	; 0xf000000
 8005da4:	6101      	str	r1, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005da6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005daa:	fa94 f6a4 	rbit	r6, r4
 8005dae:	fab6 f686 	clz	r6, r6
 8005db2:	4021      	ands	r1, r4
 8005db4:	40f1      	lsrs	r1, r6
 8005db6:	60c1      	str	r1, [r0, #12]
 8005db8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005dbc:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 8005dc0:	fa91 f7a1 	rbit	r7, r1
 8005dc4:	fab7 f787 	clz	r7, r7
 8005dc8:	400e      	ands	r6, r1
 8005dca:	40fe      	lsrs	r6, r7
 8005dcc:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8005dce:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8005dd2:	fa95 f5a5 	rbit	r5, r5
 8005dd6:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8005dda:	fab5 f585 	clz	r5, r5
 8005dde:	403e      	ands	r6, r7
 8005de0:	fa26 f505 	lsr.w	r5, r6, r5
 8005de4:	6145      	str	r5, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005de6:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8005dea:	fa92 f6a2 	rbit	r6, r2
 8005dee:	fab6 f686 	clz	r6, r6
 8005df2:	4015      	ands	r5, r2
 8005df4:	40f5      	lsrs	r5, r6
 8005df6:	6205      	str	r5, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8005df8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8005dfc:	fa94 f4a4 	rbit	r4, r4
 8005e00:	f005 6570 	and.w	r5, r5, #251658240	; 0xf000000
 8005e04:	fab4 f484 	clz	r4, r4
 8005e08:	fa25 f404 	lsr.w	r4, r5, r4
 8005e0c:	6184      	str	r4, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8005e0e:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8005e12:	fa91 f1a1 	rbit	r1, r1
 8005e16:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
 8005e1a:	fab1 f181 	clz	r1, r1
 8005e1e:	fa24 f101 	lsr.w	r1, r4, r1
 8005e22:	241f      	movs	r4, #31
 8005e24:	61c1      	str	r1, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8005e26:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005e2a:	fa94 f4a4 	rbit	r4, r4
 8005e2e:	fab4 f484 	clz	r4, r4
 8005e32:	f001 011f 	and.w	r1, r1, #31
 8005e36:	40e1      	lsrs	r1, r4
 8005e38:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 8005e3c:	6241      	str	r1, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8005e3e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005e42:	fa94 f4a4 	rbit	r4, r4
 8005e46:	fab4 f484 	clz	r4, r4
 8005e4a:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 8005e4e:	40e1      	lsrs	r1, r4
 8005e50:	6281      	str	r1, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8005e52:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005e56:	fa92 f2a2 	rbit	r2, r2
 8005e5a:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8005e5e:	fab2 f282 	clz	r2, r2
 8005e62:	fa21 f202 	lsr.w	r2, r1, r2
 8005e66:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005e68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e6c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005e70:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005e72:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e76:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005e7a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005e7c:	689a      	ldr	r2, [r3, #8]
 8005e7e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005e82:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005e84:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e88:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8005e8c:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005e8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e92:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005e96:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005e98:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e9c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005ea0:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005ea2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ea6:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005eaa:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005eac:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005eb0:	f002 0203 	and.w	r2, r2, #3
 8005eb4:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005eb6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005eba:	f002 020c 	and.w	r2, r2, #12
 8005ebe:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8005ec0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ec4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005ec8:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005eca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ece:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005ed2:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005ed4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ed8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005edc:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005ede:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ee2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005ee6:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005ee8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005eec:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8005ef0:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8005ef2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ef6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8005efa:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005efc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f00:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8005f04:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8005f06:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f0a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005f0e:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005f10:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f14:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005f18:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005f1a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f1e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005f22:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005f26:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005f28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f2a:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
 8005f2e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005f32:	430a      	orrs	r2, r1
 8005f34:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3a:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005f3e:	bf18      	it	ne
 8005f40:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005f44:	6383      	str	r3, [r0, #56]	; 0x38
 8005f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f48:	00fffff1 	.word	0x00fffff1
 8005f4c:	40023800 	.word	0x40023800

08005f50 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f50:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005f54:	d10a      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005f56:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
    switch (saiclocksource)
 8005f5c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005f60:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005f64:	d02f      	beq.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8005f66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005f6a:	e00c      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005f6c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8005f70:	d147      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005f72:	4b25      	ldr	r3, [pc, #148]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8005f78:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005f7c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005f80:	d021      	beq.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8005f82:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005f86:	d01c      	beq.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005f88:	2a00      	cmp	r2, #0
 8005f8a:	d13a      	bne.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/ 
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f8c:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f8e:	685b      	ldr	r3, [r3, #4]
    {
    case 0: /* PLLSAI is the clock source for SAI*/ 
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f90:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }   
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f94:	f003 003f 	and.w	r0, r3, #63	; 0x3f
 8005f98:	bf54      	ite	pl
 8005f9a:	4b1c      	ldrpl	r3, [pc, #112]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005f9c:	4b1c      	ldrmi	r3, [pc, #112]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005f9e:	fbb3 f3f0 	udiv	r3, r3, r0
        }   
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005fa2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005fa6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005faa:	f3c0 6003 	ubfx	r0, r0, #24, #4
 8005fae:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005fb2:	434b      	muls	r3, r1
 8005fb4:	fbb3 f3f0 	udiv	r3, r3, r0
        
        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005fb8:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
        frequency = frequency/(tmpreg); 
 8005fbc:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8005fc0:	e01b      	b.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005fc2:	4814      	ldr	r0, [pc, #80]	; (8006014 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8005fc4:	4770      	bx	lr
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {  
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005fc6:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 003f 	and.w	r0, r3, #63	; 0x3f
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {  
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005fce:	0253      	lsls	r3, r2, #9
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        
        /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005fd0:	4a0d      	ldr	r2, [pc, #52]	; (8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fd2:	bf54      	ite	pl
 8005fd4:	4b0d      	ldrpl	r3, [pc, #52]	; (800600c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005fd6:	4b0e      	ldrmi	r3, [pc, #56]	; (8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005fd8:	fbb3 f3f0 	udiv	r3, r3, r0
        }
        
        /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005fdc:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005fe0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8005fe4:	f3c0 6003 	ubfx	r0, r0, #24, #4
 8005fe8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005fec:	434b      	muls	r3, r1
 8005fee:	fbb3 f3f0 	udiv	r3, r3, r0
        
        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005ff2:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
        frequency = frequency/(tmpreg);
 8005ff6:	f000 001f 	and.w	r0, r0, #31
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	fbb3 f0f0 	udiv	r0, r3, r0
        break;
 8006000:	4770      	bx	lr
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
  uint32_t tmpreg = 0;
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006002:	2000      	movs	r0, #0
      }
    }
  }
  
  return frequency;
}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40023800 	.word	0x40023800
 800600c:	00f42400 	.word	0x00f42400
 8006010:	017d7840 	.word	0x017d7840
 8006014:	00bb8000 	.word	0x00bb8000

08006018 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 8006018:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800601a:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
 800601c:	bf14      	ite	ne
 800601e:	2301      	movne	r3, #1
 8006020:	2309      	moveq	r3, #9
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006022:	2a08      	cmp	r2, #8
 8006024:	6842      	ldr	r2, [r0, #4]
 8006026:	d105      	bne.n	8006034 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006028:	f022 0102 	bic.w	r1, r2, #2
 800602c:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 800602e:	bf08      	it	eq
 8006030:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006034:	3a02      	subs	r2, #2
 8006036:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006038:	bf94      	ite	ls
 800603a:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 800603e:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8006042:	4770      	bx	lr

08006044 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <SAI_Disable+0x3c>)
 8006046:	f641 3258 	movw	r2, #7000	; 0x1b58
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800604a:	6801      	ldr	r1, [r0, #0]
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	fbb3 f2f2 	udiv	r2, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006052:	680b      	ldr	r3, [r1, #0]
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006054:	0092      	lsls	r2, r2, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605a:	600b      	str	r3, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800605c:	f112 32ff 	adds.w	r2, r2, #4294967295
 8006060:	d207      	bcs.n	8006072 <SAI_Disable+0x2e>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006062:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 800606e:	2003      	movs	r0, #3
      break;
 8006070:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006072:	680b      	ldr	r3, [r1, #0]
 8006074:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006078:	d1f0      	bne.n	800605c <SAI_Disable+0x18>
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
  HAL_StatusTypeDef status = HAL_OK;
 800607a:	4618      	mov	r0, r3
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);

  return status;
}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20010044 	.word	0x20010044

08006084 <HAL_SAI_Init>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006084:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006086:	4604      	mov	r4, r0
 8006088:	2800      	cmp	r0, #0
 800608a:	f000 80bd 	beq.w	8006208 <HAL_SAI_Init+0x184>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 800608e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8006092:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006096:	b91b      	cbnz	r3, 80060a0 <HAL_SAI_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006098:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800609c:	f008 fcbc 	bl	800ea18 <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 80060a0:	2302      	movs	r3, #2
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80060a2:	4620      	mov	r0, r4
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 80060a4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80060a8:	f7ff ffcc 	bl	8006044 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80060ac:	68e3      	ldr	r3, [r4, #12]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d004      	beq.n	80060bc <HAL_SAI_Init+0x38>
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
  uint32_t tmpregisterGCR = 0;
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	bf0c      	ite	eq
 80060b6:	2320      	moveq	r3, #32
 80060b8:	2300      	movne	r3, #0
 80060ba:	e000      	b.n	80060be <HAL_SAI_Init+0x3a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
      break;
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80060bc:	2310      	movs	r3, #16
      break;
  default:
    break;
  }
  
  switch(hsai->Init.Synchro)
 80060be:	68a2      	ldr	r2, [r4, #8]
 80060c0:	2a02      	cmp	r2, #2
 80060c2:	d009      	beq.n	80060d8 <HAL_SAI_Init+0x54>
 80060c4:	2a03      	cmp	r2, #3
 80060c6:	d005      	beq.n	80060d4 <HAL_SAI_Init+0x50>
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;
 80060c8:	2a01      	cmp	r2, #1
 80060ca:	bf0c      	ite	eq
 80060cc:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 80060d0:	2500      	movne	r5, #0
 80060d2:	e003      	b.n	80060dc <HAL_SAI_Init+0x58>
      }
      break;
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80060d4:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
      }
      break;
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80060d8:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
  default:
    break;      
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	494b      	ldr	r1, [pc, #300]	; (800620c <HAL_SAI_Init+0x188>)
 80060e0:	428a      	cmp	r2, r1
 80060e2:	d002      	beq.n	80060ea <HAL_SAI_Init+0x66>
 80060e4:	484a      	ldr	r0, [pc, #296]	; (8006210 <HAL_SAI_Init+0x18c>)
 80060e6:	4282      	cmp	r2, r0
 80060e8:	d101      	bne.n	80060ee <HAL_SAI_Init+0x6a>
  {
    SAI1->GCR = tmpregisterGCR;
 80060ea:	484a      	ldr	r0, [pc, #296]	; (8006214 <HAL_SAI_Init+0x190>)
 80060ec:	e000      	b.n	80060f0 <HAL_SAI_Init+0x6c>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 80060ee:	484a      	ldr	r0, [pc, #296]	; (8006218 <HAL_SAI_Init+0x194>)
 80060f0:	6003      	str	r3, [r0, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80060f2:	69e3      	ldr	r3, [r4, #28]
 80060f4:	b31b      	cbz	r3, 800613e <HAL_SAI_Init+0xba>
  {
    uint32_t freq = 0;
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80060f6:	428a      	cmp	r2, r1
 80060f8:	d002      	beq.n	8006100 <HAL_SAI_Init+0x7c>
 80060fa:	4b45      	ldr	r3, [pc, #276]	; (8006210 <HAL_SAI_Init+0x18c>)
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d104      	bne.n	800610a <HAL_SAI_Init+0x86>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006100:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006104:	f7ff ff24 	bl	8005f50 <HAL_RCCEx_GetPeriphCLKFreq>
 8006108:	e000      	b.n	800610c <HAL_SAI_Init+0x88>
    SAI2->GCR = tmpregisterGCR;
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
  {
    uint32_t freq = 0;
 800610a:	2000      	movs	r0, #0

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	4a43      	ldr	r2, [pc, #268]	; (800621c <HAL_SAI_Init+0x198>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d002      	beq.n	800611a <HAL_SAI_Init+0x96>
 8006114:	3220      	adds	r2, #32
 8006116:	4293      	cmp	r3, r2
 8006118:	d103      	bne.n	8006122 <HAL_SAI_Init+0x9e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800611a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800611e:	f7ff ff17 	bl	8005f50 <HAL_RCCEx_GetPeriphCLKFreq>
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006122:	220a      	movs	r2, #10
 8006124:	69e3      	ldr	r3, [r4, #28]
 8006126:	4350      	muls	r0, r2
 8006128:	025b      	lsls	r3, r3, #9
 800612a:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 800612e:	fbb0 f3f2 	udiv	r3, r0, r2
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8006132:	fb02 0013 	mls	r0, r2, r3, r0
 8006136:	2809      	cmp	r0, #9
    {
      hsai->Init.Mckdiv+= 1;
 8006138:	bf08      	it	eq
 800613a:	3301      	addeq	r3, #1
 800613c:	6223      	str	r3, [r4, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800613e:	6860      	ldr	r0, [r4, #4]
 8006140:	f030 0302 	bics.w	r3, r0, #2
 8006144:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006146:	d105      	bne.n	8006154 <HAL_SAI_Init+0xd0>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006148:	2b01      	cmp	r3, #1
 800614a:	bf14      	ite	ne
 800614c:	f44f 7100 	movne.w	r1, #512	; 0x200
 8006150:	2100      	moveq	r1, #0
 8006152:	e004      	b.n	800615e <HAL_SAI_Init+0xda>
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2100      	movne	r1, #0
 800615a:	f44f 7100 	moveq.w	r1, #512	; 0x200
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	4e2f      	ldr	r6, [pc, #188]	; (8006220 <HAL_SAI_Init+0x19c>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4016      	ands	r6, r2
 8006166:	601e      	str	r6, [r3, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	4310      	orrs	r0, r2
 800616c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800616e:	4310      	orrs	r0, r2
 8006170:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006172:	4310      	orrs	r0, r2
 8006174:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006176:	4310      	orrs	r0, r2
 8006178:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800617a:	4310      	orrs	r0, r2
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	4310      	orrs	r0, r2
 8006180:	6962      	ldr	r2, [r4, #20]
 8006182:	4302      	orrs	r2, r0
 8006184:	6a20      	ldr	r0, [r4, #32]
 8006186:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800618a:	2000      	movs	r0, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800618c:	4315      	orrs	r5, r2
 800618e:	430d      	orrs	r5, r1
 8006190:	601d      	str	r5, [r3, #0]
                        ckstr_bits | syncen_bits |                               \
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006198:	f022 020f 	bic.w	r2, r2, #15
 800619c:	605a      	str	r2, [r3, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800619e:	69a2      	ldr	r2, [r4, #24]
 80061a0:	6859      	ldr	r1, [r3, #4]
 80061a2:	4311      	orrs	r1, r2
 80061a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80061a6:	4311      	orrs	r1, r2
 80061a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80061ae:	4a1d      	ldr	r2, [pc, #116]	; (8006224 <HAL_SAI_Init+0x1a0>)
 80061b0:	6899      	ldr	r1, [r3, #8]
 80061b2:	400a      	ands	r2, r1
 80061b4:	609a      	str	r2, [r3, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80061b6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80061b8:	6899      	ldr	r1, [r3, #8]
 80061ba:	4311      	orrs	r1, r2
 80061bc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80061be:	4311      	orrs	r1, r2
 80061c0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80061c2:	4311      	orrs	r1, r2
 80061c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80061c6:	3a01      	subs	r2, #1
 80061c8:	4311      	orrs	r1, r2
 80061ca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80061cc:	3a01      	subs	r2, #1
 80061ce:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 80061d2:	609a      	str	r2, [r3, #8]
                          hsai->FrameInit.FSPolarity   |
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80061d4:	f24f 0220 	movw	r2, #61472	; 0xf020
 80061d8:	68d9      	ldr	r1, [r3, #12]
 80061da:	400a      	ands	r2, r1
 80061dc:	60da      	str	r2, [r3, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80061de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80061e0:	68d9      	ldr	r1, [r3, #12]
 80061e2:	4311      	orrs	r1, r2
 80061e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80061e6:	430a      	orrs	r2, r1
 80061e8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80061ea:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80061ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80061f0:	3a01      	subs	r2, #1
 80061f2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 80061f6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80061f8:	2301      	movs	r3, #1
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80061fa:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80061fe:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006202:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
  
  return HAL_OK;
 8006206:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
  {
    return HAL_ERROR;
 8006208:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
  
  return HAL_OK;
}
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	40015804 	.word	0x40015804
 8006210:	40015824 	.word	0x40015824
 8006214:	40015800 	.word	0x40015800
 8006218:	40015c00 	.word	0x40015c00
 800621c:	40015c04 	.word	0x40015c04
 8006220:	ff05c010 	.word	0xff05c010
 8006224:	fff88000 	.word	0xfff88000

08006228 <HAL_SAI_DeInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8006228:	b538      	push	{r3, r4, r5, lr}
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800622a:	4605      	mov	r5, r0
 800622c:	b1d0      	cbz	r0, 8006264 <HAL_SAI_DeInit+0x3c>
  {
    return HAL_ERROR;
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800622e:	2302      	movs	r3, #2

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8006230:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
  if(hsai == NULL)
  {
    return HAL_ERROR;
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006236:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800623a:	6803      	ldr	r3, [r0, #0]
 800623c:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800623e:	619a      	str	r2, [r3, #24]
  
  /* Disable the SAI */
  SAI_Disable(hsai);
 8006240:	f7ff ff00 	bl	8006044 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006244:	682a      	ldr	r2, [r5, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_SAI_MspDeInit(hsai);
 8006246:	4628      	mov	r0, r5
  
  /* Disable the SAI */
  SAI_Disable(hsai);

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006248:	6853      	ldr	r3, [r2, #4]
 800624a:	f043 0308 	orr.w	r3, r3, #8
 800624e:	6053      	str	r3, [r2, #4]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_SAI_MspDeInit(hsai);
 8006250:	f008 fc34 	bl	800eabc <HAL_SAI_MspDeInit>

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006254:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006258:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c

  return HAL_OK;
 800625c:	4620      	mov	r0, r4

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800625e:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
 8006262:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
  /* Check the SAI handle allocation */
  if(hsai == NULL)
  {
    return HAL_ERROR;
 8006264:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8006266:	bd38      	pop	{r3, r4, r5, pc}

08006268 <HAL_SAI_DMAPause>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006268:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d009      	beq.n	8006284 <HAL_SAI_DMAPause+0x1c>

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006270:	6802      	ldr	r2, [r0, #0]
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006278:	6013      	str	r3, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800627a:	2300      	movs	r3, #0
 800627c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c

  return HAL_OK;
 8006280:	4618      	mov	r0, r3
 8006282:	4770      	bx	lr
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006284:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8006286:	4770      	bx	lr

08006288 <HAL_SAI_DMAStop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006288:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800628c:	2b01      	cmp	r3, #1
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800628e:	b510      	push	{r4, lr}
 8006290:	4604      	mov	r4, r0
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006292:	d020      	beq.n	80062d6 <HAL_SAI_DMAStop+0x4e>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006294:	6802      	ldr	r2, [r0, #0]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006296:	2301      	movs	r3, #1
 8006298:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800629c:	6813      	ldr	r3, [r2, #0]

  /* Abort the SAI DMA Streams */
  if(hsai->hdmatx != NULL)
 800629e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
{
  /* Process Locked */
  __HAL_LOCK(hsai);

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80062a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062a4:	6013      	str	r3, [r2, #0]

  /* Abort the SAI DMA Streams */
  if(hsai->hdmatx != NULL)
 80062a6:	b910      	cbnz	r0, 80062ae <HAL_SAI_DMAStop+0x26>
    {
      return HAL_ERROR;
    }
  }

  if(hsai->hdmarx != NULL)
 80062a8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80062aa:	b930      	cbnz	r0, 80062ba <HAL_SAI_DMAStop+0x32>
 80062ac:	e009      	b.n	80062c2 <HAL_SAI_DMAStop+0x3a>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Abort the SAI DMA Streams */
  if(hsai->hdmatx != NULL)
  {
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80062ae:	f7fd fb03 	bl	80038b8 <HAL_DMA_Abort>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d0f8      	beq.n	80062a8 <HAL_SAI_DMAStop+0x20>
    {
      return HAL_ERROR;
 80062b6:	2001      	movs	r0, #1
 80062b8:	bd10      	pop	{r4, pc}
    }
  }

  if(hsai->hdmarx != NULL)
  {
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80062ba:	f7fd fafd 	bl	80038b8 <HAL_DMA_Abort>
 80062be:	2800      	cmp	r0, #0
 80062c0:	d1f9      	bne.n	80062b6 <HAL_SAI_DMAStop+0x2e>
      return HAL_ERROR;
    }
  }
  
  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80062c2:	4620      	mov	r0, r4
 80062c4:	f7ff febe 	bl	8006044 <SAI_Disable>

  hsai->State = HAL_SAI_STATE_READY;
 80062c8:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80062ca:	2000      	movs	r0, #0
  }
  
  /* Disable SAI peripheral */
  SAI_Disable(hsai);

  hsai->State = HAL_SAI_STATE_READY;
 80062cc:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80062d0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c

  return HAL_OK;
 80062d4:	bd10      	pop	{r4, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 80062d6:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 80062d8:	bd10      	pop	{r4, pc}
	...

080062dc <HAL_SAI_Receive_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	4613      	mov	r3, r2
 80062e0:	4604      	mov	r4, r0

  if((pData == NULL) || (Size == 0))
 80062e2:	460a      	mov	r2, r1
 80062e4:	2900      	cmp	r1, #0
 80062e6:	d040      	beq.n	800636a <HAL_SAI_Receive_DMA+0x8e>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d03e      	beq.n	800636a <HAL_SAI_Receive_DMA+0x8e>
  {
    return  HAL_ERROR;
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 80062ec:	f890 607d 	ldrb.w	r6, [r0, #125]	; 0x7d
 80062f0:	b2f6      	uxtb	r6, r6
 80062f2:	2e01      	cmp	r6, #1
 80062f4:	d13b      	bne.n	800636e <HAL_SAI_Receive_DMA+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80062f6:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 80062fa:	2901      	cmp	r1, #1
 80062fc:	d037      	beq.n	800636e <HAL_SAI_Receive_DMA+0x92>

    hsai->pBuffPtr = pData;
    hsai->XferSize = Size;
    hsai->XferCount = Size;
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80062fe:	2700      	movs	r7, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006300:	2122      	movs	r1, #34	; 0x22
  }

  if(hsai->State == HAL_SAI_STATE_READY)
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006302:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c

    hsai->pBuffPtr = pData;
    hsai->XferSize = Size;
    hsai->XferCount = Size;
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006306:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
  if(hsai->State == HAL_SAI_STATE_READY)
  {
    /* Process Locked */
    __HAL_LOCK(hsai);

    hsai->pBuffPtr = pData;
 800630a:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->XferSize = Size;
    hsai->XferCount = Size;
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800630c:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
  {
    /* Process Locked */
    __HAL_LOCK(hsai);

    hsai->pBuffPtr = pData;
    hsai->XferSize = Size;
 8006310:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->XferCount = Size;
 8006314:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
    hsai->State = HAL_SAI_STATE_BUSY_RX;

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8006318:	4916      	ldr	r1, [pc, #88]	; (8006374 <HAL_SAI_Receive_DMA+0x98>)
 800631a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800631c:	6401      	str	r1, [r0, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800631e:	4916      	ldr	r1, [pc, #88]	; (8006378 <HAL_SAI_Receive_DMA+0x9c>)

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8006320:	6507      	str	r7, [r0, #80]	; 0x50

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8006322:	63c1      	str	r1, [r0, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8006324:	4915      	ldr	r1, [pc, #84]	; (800637c <HAL_SAI_Receive_DMA+0xa0>)
 8006326:	64c1      	str	r1, [r0, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8006328:	6821      	ldr	r1, [r4, #0]
 800632a:	311c      	adds	r1, #28
 800632c:	f7fd fa85 	bl	800383a <HAL_DMA_Start_IT>
 8006330:	4605      	mov	r5, r0
 8006332:	b118      	cbz	r0, 800633c <HAL_SAI_Receive_DMA+0x60>
    {
      __HAL_UNLOCK(hsai);
 8006334:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 8006338:	4635      	mov	r5, r6
 800633a:	e019      	b.n	8006370 <HAL_SAI_Receive_DMA+0x94>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800633c:	6826      	ldr	r6, [r4, #0]
 800633e:	6833      	ldr	r3, [r6, #0]
 8006340:	03db      	lsls	r3, r3, #15
 8006342:	d403      	bmi.n	800634c <HAL_SAI_Receive_DMA+0x70>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006344:	6833      	ldr	r3, [r6, #0]
 8006346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800634a:	6033      	str	r3, [r6, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800634c:	2100      	movs	r1, #0
 800634e:	4620      	mov	r0, r4
 8006350:	f7ff fe62 	bl	8006018 <SAI_InterruptFlag>
 8006354:	6933      	ldr	r3, [r6, #16]
 8006356:	4318      	orrs	r0, r3
 8006358:	6130      	str	r0, [r6, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800635a:	6833      	ldr	r3, [r6, #0]
 800635c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006360:	6033      	str	r3, [r6, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006362:	2300      	movs	r3, #0
 8006364:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c

    return HAL_OK;
 8006368:	e002      	b.n	8006370 <HAL_SAI_Receive_DMA+0x94>
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{

  if((pData == NULL) || (Size == 0))
  {
    return  HAL_ERROR;
 800636a:	2501      	movs	r5, #1
 800636c:	e000      	b.n	8006370 <HAL_SAI_Receive_DMA+0x94>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800636e:	2502      	movs	r5, #2
  }
}
 8006370:	4628      	mov	r0, r5
 8006372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006374:	080063b9 	.word	0x080063b9
 8006378:	08006381 	.word	0x08006381
 800637c:	080063c3 	.word	0x080063c3

08006380 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006380:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006382:	6803      	ldr	r3, [r0, #0]
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006384:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006386:	6819      	ldr	r1, [r3, #0]
 8006388:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 800638c:	d110      	bne.n	80063b0 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800638e:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006390:	4620      	mov	r0, r4
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006392:	682b      	ldr	r3, [r5, #0]
 8006394:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006398:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 800639a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800639e:	f7ff fe3b 	bl	8006018 <SAI_InterruptFlag>
 80063a2:	692b      	ldr	r3, [r5, #16]
 80063a4:	ea23 0000 	bic.w	r0, r3, r0
    
    hsai->State = HAL_SAI_STATE_READY;
 80063a8:	2301      	movs	r3, #1
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
    hsai->XferCount = 0;

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80063aa:	6128      	str	r0, [r5, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 80063ac:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7fb fd0b 	bl	8001dcc <HAL_SAI_RxCpltCallback>
 80063b6:	bd38      	pop	{r3, r4, r5, pc}

080063b8 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063b8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 80063ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80063bc:	f7fb fd0b 	bl	8001dd6 <HAL_SAI_RxHalfCpltCallback>
 80063c0:	bd08      	pop	{r3, pc}

080063c2 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063c2:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80063c4:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80063c6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80063ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ce:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80063d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80063d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d003      	beq.n	80063e2 <SAI_DMAError+0x20>
 80063da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d10d      	bne.n	80063fe <SAI_DMAError+0x3c>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80063e2:	6822      	ldr	r2, [r4, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80063e4:	4620      	mov	r0, r4
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063ec:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80063ee:	f7ff fe29 	bl	8006044 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 80063fe:	4620      	mov	r0, r4
 8006400:	f7fb fcee 	bl	8001de0 <HAL_SAI_ErrorCallback>
 8006404:	bd10      	pop	{r4, pc}

08006406 <HAL_SAI_GetState>:
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
  return hsai->State;
 8006406:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 800640a:	4770      	bx	lr

0800640c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006410:	4604      	mov	r4, r0
 8006412:	b1c8      	cbz	r0, 8006448 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006414:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006418:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800641c:	b91b      	cbnz	r3, 8006426 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800641e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006422:	f008 fa91 	bl	800e948 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006426:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006428:	1d21      	adds	r1, r4, #4
 800642a:	6820      	ldr	r0, [r4, #0]
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800642c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006430:	f000 f970 	bl	8006714 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006434:	6862      	ldr	r2, [r4, #4]
 8006436:	4629      	mov	r1, r5
 8006438:	6820      	ldr	r0, [r4, #0]
 800643a:	f000 f9ac 	bl	8006796 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800643e:	2301      	movs	r3, #1
  
  return HAL_OK;
 8006440:	2000      	movs	r0, #0
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006442:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8006446:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
  {
    return HAL_ERROR;
 8006448:	2001      	movs	r0, #1
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
  
  return HAL_OK;
}
 800644a:	bd38      	pop	{r3, r4, r5, pc}

0800644c <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800644c:	b538      	push	{r3, r4, r5, lr}
 800644e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006450:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006454:	460d      	mov	r5, r1
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006456:	b2c0      	uxtb	r0, r0
 8006458:	2802      	cmp	r0, #2
 800645a:	d00d      	beq.n	8006478 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800645c:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800645e:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006460:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006464:	f000 f9e3 	bl	800682e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006468:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800646a:	2000      	movs	r0, #0
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800646c:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800646e:	bf0c      	ite	eq
 8006470:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006472:	2301      	movne	r3, #1
 8006474:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
}
 8006478:	bd38      	pop	{r3, r4, r5, pc}

0800647a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800647a:	b510      	push	{r4, lr}
 800647c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800647e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8006482:	b2c0      	uxtb	r0, r0
 8006484:	2802      	cmp	r0, #2
 8006486:	d009      	beq.n	800649c <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006488:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800648a:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800648c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006490:	f000 f9f3 	bl	800687a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006494:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8006496:	2000      	movs	r0, #0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006498:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
}
 800649c:	bd10      	pop	{r4, pc}

0800649e <HAL_TIM_Base_MspInit>:
 800649e:	4770      	bx	lr

080064a0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a0:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 80064a2:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 80064b4:	4770      	bx	lr

080064b6 <HAL_TIM_OC_DelayElapsedCallback>:
 80064b6:	4770      	bx	lr

080064b8 <HAL_TIM_IC_CaptureCallback>:
 80064b8:	4770      	bx	lr

080064ba <HAL_TIM_PWM_PulseFinishedCallback>:
 80064ba:	4770      	bx	lr

080064bc <HAL_TIM_TriggerCallback>:
 80064bc:	4770      	bx	lr

080064be <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064be:	6803      	ldr	r3, [r0, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c4:	b510      	push	{r4, lr}
 80064c6:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064c8:	d514      	bpl.n	80064f4 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	0792      	lsls	r2, r2, #30
 80064ce:	d511      	bpl.n	80064f4 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d0:	f06f 0202 	mvn.w	r2, #2
 80064d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d6:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80064d8:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064da:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80064dc:	0799      	lsls	r1, r3, #30
 80064de:	d002      	beq.n	80064e6 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80064e0:	f7ff ffea 	bl	80064b8 <HAL_TIM_IC_CaptureCallback>
 80064e4:	e004      	b.n	80064f0 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e6:	f7ff ffe6 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff ffe5 	bl	80064ba <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f0:	2300      	movs	r3, #0
 80064f2:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	0752      	lsls	r2, r2, #29
 80064fa:	d516      	bpl.n	800652a <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	0750      	lsls	r0, r2, #29
 8006500:	d513      	bpl.n	800652a <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006502:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650a:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800650c:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8006510:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006514:	d002      	beq.n	800651c <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	f7ff ffcf 	bl	80064b8 <HAL_TIM_IC_CaptureCallback>
 800651a:	e004      	b.n	8006526 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651c:	f7ff ffcb 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	4620      	mov	r0, r4
 8006522:	f7ff ffca 	bl	80064ba <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	2300      	movs	r3, #0
 8006528:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	0711      	lsls	r1, r2, #28
 8006530:	d515      	bpl.n	800655e <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	0712      	lsls	r2, r2, #28
 8006536:	d512      	bpl.n	800655e <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006538:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800653c:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800653e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006540:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006542:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006544:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006546:	079b      	lsls	r3, r3, #30
 8006548:	d002      	beq.n	8006550 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800654a:	f7ff ffb5 	bl	80064b8 <HAL_TIM_IC_CaptureCallback>
 800654e:	e004      	b.n	800655a <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006550:	f7ff ffb1 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8006554:	4620      	mov	r0, r4
 8006556:	f7ff ffb0 	bl	80064ba <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	2300      	movs	r3, #0
 800655c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	06d0      	lsls	r0, r2, #27
 8006564:	d516      	bpl.n	8006594 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	06d1      	lsls	r1, r2, #27
 800656a:	d513      	bpl.n	8006594 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800656c:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006570:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006574:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006576:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006578:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800657a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800657e:	d002      	beq.n	8006586 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006580:	f7ff ff9a 	bl	80064b8 <HAL_TIM_IC_CaptureCallback>
 8006584:	e004      	b.n	8006590 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	f7ff ff96 	bl	80064b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658a:	4620      	mov	r0, r4
 800658c:	f7ff ff95 	bl	80064ba <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006590:	2300      	movs	r3, #0
 8006592:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	07d2      	lsls	r2, r2, #31
 800659a:	d508      	bpl.n	80065ae <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800659c:	68da      	ldr	r2, [r3, #12]
 800659e:	07d0      	lsls	r0, r2, #31
 80065a0:	d505      	bpl.n	80065ae <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a6:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80065aa:	f009 f953 	bl	800f854 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	0611      	lsls	r1, r2, #24
 80065b4:	d508      	bpl.n	80065c8 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	0612      	lsls	r2, r2, #24
 80065ba:	d505      	bpl.n	80065c8 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80065c0:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80065c4:	f000 f8a5 	bl	8006712 <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065c8:	6823      	ldr	r3, [r4, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	05d0      	lsls	r0, r2, #23
 80065ce:	d508      	bpl.n	80065e2 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	0611      	lsls	r1, r2, #24
 80065d4:	d505      	bpl.n	80065e2 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80065da:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80065de:	f000 f898 	bl	8006712 <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	0652      	lsls	r2, r2, #25
 80065e8:	d508      	bpl.n	80065fc <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	0650      	lsls	r0, r2, #25
 80065ee:	d505      	bpl.n	80065fc <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80065f4:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80065f8:	f7ff ff60 	bl	80064bc <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	0691      	lsls	r1, r2, #26
 8006602:	d50a      	bpl.n	800661a <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	0692      	lsls	r2, r2, #26
 8006608:	d507      	bpl.n	800661a <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800660a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800660e:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006610:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8006612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8006616:	f000 b87b 	b.w	8006710 <HAL_TIMEx_CommutationCallback>
 800661a:	bd10      	pop	{r4, pc}

0800661c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800661c:	4a2e      	ldr	r2, [pc, #184]	; (80066d8 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800661e:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006620:	4290      	cmp	r0, r2
 8006622:	d012      	beq.n	800664a <TIM_Base_SetConfig+0x2e>
 8006624:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006628:	d00f      	beq.n	800664a <TIM_Base_SetConfig+0x2e>
 800662a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800662e:	4290      	cmp	r0, r2
 8006630:	d00b      	beq.n	800664a <TIM_Base_SetConfig+0x2e>
 8006632:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006636:	4290      	cmp	r0, r2
 8006638:	d007      	beq.n	800664a <TIM_Base_SetConfig+0x2e>
 800663a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800663e:	4290      	cmp	r0, r2
 8006640:	d003      	beq.n	800664a <TIM_Base_SetConfig+0x2e>
 8006642:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006646:	4290      	cmp	r0, r2
 8006648:	d118      	bne.n	800667c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800664a:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800664c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006650:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006652:	4a21      	ldr	r2, [pc, #132]	; (80066d8 <TIM_Base_SetConfig+0xbc>)
 8006654:	4290      	cmp	r0, r2
 8006656:	d037      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 8006658:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800665c:	d034      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 800665e:	4a1f      	ldr	r2, [pc, #124]	; (80066dc <TIM_Base_SetConfig+0xc0>)
 8006660:	4290      	cmp	r0, r2
 8006662:	d031      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 8006664:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006668:	4290      	cmp	r0, r2
 800666a:	d02d      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 800666c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006670:	4290      	cmp	r0, r2
 8006672:	d029      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 8006674:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006678:	4290      	cmp	r0, r2
 800667a:	d025      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <TIM_Base_SetConfig+0xc4>)
 800667e:	4290      	cmp	r0, r2
 8006680:	d022      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 8006682:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006686:	4290      	cmp	r0, r2
 8006688:	d01e      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 800668a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800668e:	4290      	cmp	r0, r2
 8006690:	d01a      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 8006692:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006696:	4290      	cmp	r0, r2
 8006698:	d016      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 800669a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800669e:	4290      	cmp	r0, r2
 80066a0:	d012      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
 80066a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066a6:	4290      	cmp	r0, r2
 80066a8:	d00e      	beq.n	80066c8 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80066aa:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066ac:	688b      	ldr	r3, [r1, #8]
 80066ae:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80066b0:	680b      	ldr	r3, [r1, #0]
 80066b2:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80066b4:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <TIM_Base_SetConfig+0xbc>)
 80066b6:	4298      	cmp	r0, r3
 80066b8:	d00b      	beq.n	80066d2 <TIM_Base_SetConfig+0xb6>
 80066ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066be:	4298      	cmp	r0, r3
 80066c0:	d007      	beq.n	80066d2 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c2:	2301      	movs	r3, #1
 80066c4:	6143      	str	r3, [r0, #20]
}
 80066c6:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066cc:	68ca      	ldr	r2, [r1, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	e7eb      	b.n	80066aa <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066d2:	690b      	ldr	r3, [r1, #16]
 80066d4:	6303      	str	r3, [r0, #48]	; 0x30
 80066d6:	e7f4      	b.n	80066c2 <TIM_Base_SetConfig+0xa6>
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40014000 	.word	0x40014000

080066e4 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80066e4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80066e6:	4604      	mov	r4, r0
 80066e8:	b180      	cbz	r0, 800670c <HAL_TIM_Base_Init+0x28>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80066ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80066ee:	b90b      	cbnz	r3, 80066f4 <HAL_TIM_Base_Init+0x10>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f0:	f7ff fed5 	bl	800649e <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80066f4:	2302      	movs	r3, #2
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80066f6:	6820      	ldr	r0, [r4, #0]
 80066f8:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80066fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80066fe:	f7ff ff8d 	bl	800661c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006702:	2301      	movs	r3, #1
  
  return HAL_OK;
 8006704:	2000      	movs	r0, #0
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006706:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 800670a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800670c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800670e:	bd10      	pop	{r4, pc}

08006710 <HAL_TIMEx_CommutationCallback>:
 8006710:	4770      	bx	lr

08006712 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006712:	4770      	bx	lr

08006714 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006714:	680b      	ldr	r3, [r1, #0]
 8006716:	6a0a      	ldr	r2, [r1, #32]
 8006718:	2b01      	cmp	r3, #1
 800671a:	688b      	ldr	r3, [r1, #8]
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8006724:	68cf      	ldr	r7, [r1, #12]
 8006726:	690e      	ldr	r6, [r1, #16]
 8006728:	694d      	ldr	r5, [r1, #20]
 800672a:	698c      	ldr	r4, [r1, #24]
 800672c:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 8006730:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006734:	6801      	ldr	r1, [r0, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006736:	d013      	beq.n	8006760 <FMC_SDRAM_Init+0x4c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006738:	ea4e 0e03 	orr.w	lr, lr, r3
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800673c:	f421 48ff 	bic.w	r8, r1, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006740:	ea4e 0707 	orr.w	r7, lr, r7
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006744:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006748:	433e      	orrs	r6, r7
 800674a:	4335      	orrs	r5, r6
 800674c:	432c      	orrs	r4, r5
 800674e:	ea44 010a 	orr.w	r1, r4, sl
 8006752:	430a      	orrs	r2, r1
 8006754:	ea42 0309 	orr.w	r3, r2, r9
 8006758:	ea43 0308 	orr.w	r3, r3, r8
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800675c:	6003      	str	r3, [r0, #0]
 800675e:	e017      	b.n	8006790 <FMC_SDRAM_Init+0x7c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006760:	ea4e 0e03 	orr.w	lr, lr, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006764:	ea4a 0202 	orr.w	r2, sl, r2
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006768:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800676c:	ea4e 0707 	orr.w	r7, lr, r7
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006770:	ea42 0909 	orr.w	r9, r2, r9
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006774:	6842      	ldr	r2, [r0, #4]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006776:	433e      	orrs	r6, r7
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006778:	ea49 0101 	orr.w	r1, r9, r1
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800677c:	f422 4cff 	bic.w	ip, r2, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006780:	4335      	orrs	r5, r6
                       Init->MemoryDataWidth     |\
                       Init->InternalBankNumber  |\
                       Init->CASLatency          |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006782:	6001      	str	r1, [r0, #0]
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006784:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006788:	432c      	orrs	r4, r5
 800678a:	ea44 040c 	orr.w	r4, r4, ip
                       Init->InternalBankNumber  |\
                       Init->CASLatency          |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800678e:	6044      	str	r4, [r0, #4]
  }
  
  return HAL_OK;
}
 8006790:	2000      	movs	r0, #0
 8006792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006796 <FMC_SDRAM_Timing_Init>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006796:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006798:	2a01      	cmp	r2, #1
 800679a:	f101 0404 	add.w	r4, r1, #4
 800679e:	680e      	ldr	r6, [r1, #0]
 80067a0:	690a      	ldr	r2, [r1, #16]
 80067a2:	f8d1 e014 	ldr.w	lr, [r1, #20]
 80067a6:	698b      	ldr	r3, [r1, #24]
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80067a8:	6887      	ldr	r7, [r0, #8]
 80067aa:	e894 1030 	ldmia.w	r4, {r4, r5, ip}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80067ae:	d019      	beq.n	80067e4 <FMC_SDRAM_Timing_Init+0x4e>
 80067b0:	3e01      	subs	r6, #1
 80067b2:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 80067b6:	3c01      	subs	r4, #1
 80067b8:	3d01      	subs	r5, #1
 80067ba:	4337      	orrs	r7, r6
 80067bc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80067c0:	3a01      	subs	r2, #1
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80067c2:	3b01      	subs	r3, #1
 80067c4:	ea47 1604 	orr.w	r6, r7, r4, lsl #4
 80067c8:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
 80067cc:	ea45 3401 	orr.w	r4, r5, r1, lsl #12
 80067d0:	ea44 4102 	orr.w	r1, r4, r2, lsl #16
 80067d4:	f10e 32ff 	add.w	r2, lr, #4294967295
 80067d8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 80067dc:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80067e0:	6083      	str	r3, [r0, #8]
 80067e2:	e022      	b.n	800682a <FMC_SDRAM_Timing_Init+0x94>
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80067e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80067e8:	f10c 31ff 	add.w	r1, ip, #4294967295
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80067ec:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 80067f0:	3e01      	subs	r6, #1
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80067f2:	ea4f 5c0e 	mov.w	ip, lr, lsl #20
 80067f6:	3c01      	subs	r4, #1
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80067f8:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
 80067fc:	3a01      	subs	r2, #1
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80067fe:	ea4c 3e01 	orr.w	lr, ip, r1, lsl #12
                        (((Timing->RPDelay)-1) << 20)); 
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006802:	68c1      	ldr	r1, [r0, #12]
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006804:	3b01      	subs	r3, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8006806:	ea4e 0c07 	orr.w	ip, lr, r7
 800680a:	f001 4e70 	and.w	lr, r1, #4026531840	; 0xf0000000
 800680e:	ea46 070e 	orr.w	r7, r6, lr
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
                       (((Timing->RCDDelay)-1) << 24));   

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006812:	f8c0 c008 	str.w	ip, [r0, #8]
 8006816:	ea47 1604 	orr.w	r6, r7, r4, lsl #4
 800681a:	1e6c      	subs	r4, r5, #1
 800681c:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
 8006820:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006824:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
                       (((Timing->RCDDelay)-1) << 24));   

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006828:	60c3      	str	r3, [r0, #12]
  }
  
  return HAL_OK;
}
 800682a:	2000      	movs	r0, #0
 800682c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800682e <FMC_SDRAM_SendCommand>:
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 800682e:	2300      	movs	r3, #0
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006830:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006832:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8006834:	9301      	str	r3, [sp, #4]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006836:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006838:	e891 0009 	ldmia.w	r1, {r0, r3}
 800683c:	4303      	orrs	r3, r0
 800683e:	68c8      	ldr	r0, [r1, #12]
 8006840:	ea43 2040 	orr.w	r0, r3, r0, lsl #9
 8006844:	688b      	ldr	r3, [r1, #8]
 8006846:	3b01      	subs	r3, #1
 8006848:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 800684c:	9301      	str	r3, [sp, #4]
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
                    );
    
  Device->SDCMR = tmpr;
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	6123      	str	r3, [r4, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006852:	f7fc feb5 	bl	80035c0 <HAL_GetTick>
 8006856:	4606      	mov	r6, r0

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006858:	69a0      	ldr	r0, [r4, #24]
 800685a:	f010 0020 	ands.w	r0, r0, #32
 800685e:	d00a      	beq.n	8006876 <FMC_SDRAM_SendCommand+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006860:	1c6b      	adds	r3, r5, #1
 8006862:	d0f9      	beq.n	8006858 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8006864:	b90d      	cbnz	r5, 800686a <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8006866:	2003      	movs	r0, #3
 8006868:	e005      	b.n	8006876 <FMC_SDRAM_SendCommand+0x48>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800686a:	f7fc fea9 	bl	80035c0 <HAL_GetTick>
 800686e:	1b80      	subs	r0, r0, r6
 8006870:	4285      	cmp	r5, r0
 8006872:	d2f1      	bcs.n	8006858 <FMC_SDRAM_SendCommand+0x2a>
 8006874:	e7f7      	b.n	8006866 <FMC_SDRAM_SendCommand+0x38>
      }
    }     
  }
  
  return HAL_OK;  
}
 8006876:	b002      	add	sp, #8
 8006878:	bd70      	pop	{r4, r5, r6, pc}

0800687a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800687a:	6943      	ldr	r3, [r0, #20]
 800687c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006880:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8006882:	2000      	movs	r0, #0
 8006884:	4770      	bx	lr

08006886 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006886:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006888:	f001 fa68 	bl	8007d5c <vTaskStartScheduler>
  
  return osOK;
}
 800688c:	2000      	movs	r0, #0
 800688e:	bd08      	pop	{r3, pc}

08006890 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006890:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006892:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006896:	b086      	sub	sp, #24
 8006898:	2500      	movs	r5, #0
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800689a:	8a02      	ldrh	r2, [r0, #16]
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800689c:	2c84      	cmp	r4, #132	; 0x84
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800689e:	460b      	mov	r3, r1
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 80068a0:	bf14      	ite	ne
 80068a2:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80068a4:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068a6:	e890 0042 	ldmia.w	r0, {r1, r6}
 80068aa:	a805      	add	r0, sp, #20
 80068ac:	9503      	str	r5, [sp, #12]
 80068ae:	9502      	str	r5, [sp, #8]
 80068b0:	9001      	str	r0, [sp, #4]
 80068b2:	4630      	mov	r0, r6
 80068b4:	9400      	str	r4, [sp, #0]
 80068b6:	f001 f9c8 	bl	8007c4a <xTaskGenericCreate>
 80068ba:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 80068bc:	bf0c      	ite	eq
 80068be:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 80068c0:	2000      	movne	r0, #0
  }
  
  return handle;
}
 80068c2:	b006      	add	sp, #24
 80068c4:	bd70      	pop	{r4, r5, r6, pc}

080068c6 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80068c6:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80068c8:	f001 f9e2 	bl	8007c90 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 80068cc:	2000      	movs	r0, #0
 80068ce:	bd08      	pop	{r3, pc}

080068d0 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80068d0:	2800      	cmp	r0, #0
 80068d2:	bf08      	it	eq
 80068d4:	2001      	moveq	r0, #1
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80068d6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80068d8:	f001 fb9c 	bl	8008014 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80068dc:	2000      	movs	r0, #0
 80068de:	bd08      	pop	{r3, pc}

080068e0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval  osOK if successful, osErrorOS if failed .
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80068e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80068e2:	2400      	movs	r4, #0
 80068e4:	9403      	str	r4, [sp, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068e6:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 80068ea:	b1ab      	cbz	r3, 8006918 <osSignalSet+0x38>
  {
    if(xTaskNotifyFromISR( thread_id, (uint32_t)signal, eSetBits, &xHigherPriorityTaskWoken ) != pdPASS )
 80068ec:	ab03      	add	r3, sp, #12
 80068ee:	2201      	movs	r2, #1
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4623      	mov	r3, r4
 80068f4:	f001 fea0 	bl	8008638 <xTaskGenericNotifyFromISR>
 80068f8:	2801      	cmp	r0, #1
 80068fa:	d001      	beq.n	8006900 <osSignalSet+0x20>
      return osErrorOS;
 80068fc:	20ff      	movs	r0, #255	; 0xff
 80068fe:	e011      	b.n	8006924 <osSignalSet+0x44>

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	b173      	cbz	r3, 8006922 <osSignalSet+0x42>
 8006904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006908:	4b07      	ldr	r3, [pc, #28]	; (8006928 <osSignalSet+0x48>)
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	f3bf 8f6f 	isb	sy
  else if(xTaskNotify( thread_id, (uint32_t)signal, eSetBits) != pdPASS )
  {
    return osErrorOS;
  }
  
  return osOK;
 8006914:	4620      	mov	r0, r4
 8006916:	e005      	b.n	8006924 <osSignalSet+0x44>
    if(xTaskNotifyFromISR( thread_id, (uint32_t)signal, eSetBits, &xHigherPriorityTaskWoken ) != pdPASS )
      return osErrorOS;

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
  }  
  else if(xTaskNotify( thread_id, (uint32_t)signal, eSetBits) != pdPASS )
 8006918:	2201      	movs	r2, #1
 800691a:	f001 fe21 	bl	8008560 <xTaskGenericNotify>
 800691e:	2801      	cmp	r0, #1
 8006920:	d1ec      	bne.n	80068fc <osSignalSet+0x1c>
  {
    return osErrorOS;
  }
  
  return osOK;
 8006922:	2000      	movs	r0, #0
  (void) thread_id;
  (void) signal;

  return osErrorOS; /* Task Notification not supported */ 	
#endif
}
 8006924:	b004      	add	sp, #16
 8006926:	bd10      	pop	{r4, pc}
 8006928:	e000ed04 	.word	0xe000ed04

0800692c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800692c:	b530      	push	{r4, r5, lr}

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800692e:	2300      	movs	r3, #0
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8006930:	b085      	sub	sp, #20
 8006932:	4604      	mov	r4, r0
 8006934:	4615      	mov	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 800693c:	b108      	cbz	r0, 8006942 <osSignalWait+0x16>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800693e:	2382      	movs	r3, #130	; 0x82
 8006940:	e00f      	b.n	8006962 <osSignalWait+0x36>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8006942:	4613      	mov	r3, r2
 8006944:	aa02      	add	r2, sp, #8
 8006946:	f001 fda5 	bl	8008494 <xTaskNotifyWait>
 800694a:	2801      	cmp	r0, #1
 800694c:	d004      	beq.n	8006958 <osSignalWait+0x2c>
    {
      if(ticks == 0)  ret.status = osOK;
 800694e:	b90d      	cbnz	r5, 8006954 <osSignalWait+0x28>
 8006950:	9501      	str	r5, [sp, #4]
 8006952:	e007      	b.n	8006964 <osSignalWait+0x38>
      else  ret.status = osEventTimeout;
 8006954:	2340      	movs	r3, #64	; 0x40
 8006956:	e004      	b.n	8006962 <osSignalWait+0x36>
    }
    else if(ret.value.signals < 0)
 8006958:	9b02      	ldr	r3, [sp, #8]
 800695a:	2b00      	cmp	r3, #0
    {
      ret.status =  osErrorValue;     
 800695c:	bfb4      	ite	lt
 800695e:	2386      	movlt	r3, #134	; 0x86
    }
    else  ret.status =  osEventSignal;
 8006960:	2308      	movge	r3, #8
 8006962:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8006964:	ab04      	add	r3, sp, #16
 8006966:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800696a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800696e:	4620      	mov	r0, r4
 8006970:	b005      	add	sp, #20
 8006972:	bd30      	pop	{r4, r5, pc}

08006974 <osMutexCreate>:
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
#if ( configUSE_MUTEXES == 1)
  return xSemaphoreCreateMutex(); 
 8006974:	2001      	movs	r0, #1
 8006976:	f000 be19 	b.w	80075ac <xQueueCreateMutex>
	...

0800697c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800697c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800697e:	2400      	movs	r4, #0
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006980:	460a      	mov	r2, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006982:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8006984:	b1e8      	cbz	r0, 80069c2 <osMutexWait+0x46>
 8006986:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800698a:	b19b      	cbz	r3, 80069b4 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800698c:	aa01      	add	r2, sp, #4
 800698e:	4621      	mov	r1, r4
 8006990:	f000 ffae 	bl	80078f0 <xQueueReceiveFromISR>
 8006994:	2801      	cmp	r0, #1
 8006996:	d001      	beq.n	800699c <osMutexWait+0x20>
      return osErrorOS;
 8006998:	20ff      	movs	r0, #255	; 0xff
 800699a:	e013      	b.n	80069c4 <osMutexWait+0x48>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800699c:	9b01      	ldr	r3, [sp, #4]
 800699e:	b173      	cbz	r3, 80069be <osMutexWait+0x42>
 80069a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <osMutexWait+0x4c>)
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80069b0:	4620      	mov	r0, r4
 80069b2:	e007      	b.n	80069c4 <osMutexWait+0x48>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80069b4:	4619      	mov	r1, r3
 80069b6:	f000 fedf 	bl	8007778 <xQueueGenericReceive>
 80069ba:	2801      	cmp	r0, #1
 80069bc:	d1ec      	bne.n	8006998 <osMutexWait+0x1c>
    return osErrorOS;
  }
  
  return osOK;
 80069be:	2000      	movs	r0, #0
 80069c0:	e000      	b.n	80069c4 <osMutexWait+0x48>
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
  
  
  if (mutex_id == NULL) {
    return osErrorParameter;
 80069c2:	2080      	movs	r0, #128	; 0x80
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80069c4:	b002      	add	sp, #8
 80069c6:	bd10      	pop	{r4, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <osSemaphoreCreate>:
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 80069cc:	2901      	cmp	r1, #1
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 80069ce:	4608      	mov	r0, r1
 80069d0:	b510      	push	{r4, lr}
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 80069d2:	d10b      	bne.n	80069ec <osSemaphoreCreate+0x20>
    vSemaphoreCreateBinary(sema);
 80069d4:	2203      	movs	r2, #3
 80069d6:	2100      	movs	r1, #0
 80069d8:	f000 fcf8 	bl	80073cc <xQueueGenericCreate>
 80069dc:	4604      	mov	r4, r0
 80069de:	b138      	cbz	r0, 80069f0 <osSemaphoreCreate+0x24>
 80069e0:	2300      	movs	r3, #0
 80069e2:	461a      	mov	r2, r3
 80069e4:	4619      	mov	r1, r3
 80069e6:	f000 fd27 	bl	8007438 <xQueueGenericSend>
 80069ea:	e001      	b.n	80069f0 <osSemaphoreCreate+0x24>
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
#else
  return NULL;
 80069ec:	2000      	movs	r0, #0
 80069ee:	bd10      	pop	{r4, pc}
 80069f0:	4620      	mov	r0, r4
#endif
}
 80069f2:	bd10      	pop	{r4, pc}

080069f4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80069f4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80069f6:	2400      	movs	r4, #0
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80069f8:	460a      	mov	r2, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80069fa:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80069fc:	b1e8      	cbz	r0, 8006a3a <osSemaphoreWait+0x46>
 80069fe:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8006a02:	b19b      	cbz	r3, 8006a2c <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006a04:	aa01      	add	r2, sp, #4
 8006a06:	4621      	mov	r1, r4
 8006a08:	f000 ff72 	bl	80078f0 <xQueueReceiveFromISR>
 8006a0c:	2801      	cmp	r0, #1
 8006a0e:	d001      	beq.n	8006a14 <osSemaphoreWait+0x20>
      return osErrorOS;
 8006a10:	20ff      	movs	r0, #255	; 0xff
 8006a12:	e013      	b.n	8006a3c <osSemaphoreWait+0x48>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	b173      	cbz	r3, 8006a36 <osSemaphoreWait+0x42>
 8006a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <osSemaphoreWait+0x4c>)
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8006a28:	4620      	mov	r0, r4
 8006a2a:	e007      	b.n	8006a3c <osSemaphoreWait+0x48>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f000 fea3 	bl	8007778 <xQueueGenericReceive>
 8006a32:	2801      	cmp	r0, #1
 8006a34:	d1ec      	bne.n	8006a10 <osSemaphoreWait+0x1c>
    return osErrorOS;
  }
  
  return osOK;
 8006a36:	2000      	movs	r0, #0
 8006a38:	e000      	b.n	8006a3c <osSemaphoreWait+0x48>
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
  
  
  if (semaphore_id == NULL) {
    return osErrorParameter;
 8006a3a:	2080      	movs	r0, #128	; 0x80
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8006a3c:	b002      	add	sp, #8
 8006a3e:	bd10      	pop	{r4, pc}
 8006a40:	e000ed04 	.word	0xe000ed04

08006a44 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006a44:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8006a46:	2400      	movs	r4, #0
 8006a48:	9401      	str	r4, [sp, #4]
 8006a4a:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8006a4e:	b18b      	cbz	r3, 8006a74 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006a50:	a901      	add	r1, sp, #4
 8006a52:	f000 fe38 	bl	80076c6 <xQueueGiveFromISR>
 8006a56:	2801      	cmp	r0, #1
 8006a58:	d112      	bne.n	8006a80 <osSemaphoreRelease+0x3c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a5a:	9b01      	ldr	r3, [sp, #4]
 8006a5c:	b90b      	cbnz	r3, 8006a62 <osSemaphoreRelease+0x1e>
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
  osStatus result = osOK;
 8006a5e:	2000      	movs	r0, #0
 8006a60:	e00f      	b.n	8006a82 <osSemaphoreRelease+0x3e>
  
  if (inHandlerMode()) {
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a66:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <osSemaphoreRelease+0x44>)
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	e7f4      	b.n	8006a5e <osSemaphoreRelease+0x1a>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006a74:	461a      	mov	r2, r3
 8006a76:	4619      	mov	r1, r3
 8006a78:	f000 fcde 	bl	8007438 <xQueueGenericSend>
 8006a7c:	2801      	cmp	r0, #1
 8006a7e:	d0ee      	beq.n	8006a5e <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8006a80:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 8006a82:	b002      	add	sp, #8
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	bf00      	nop
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <osMutexRelease>:
 8006a8c:	f7ff bfda 	b.w	8006a44 <osSemaphoreRelease>

08006a90 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8006a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006a94:	6846      	ldr	r6, [r0, #4]
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8006a96:	4607      	mov	r7, r0
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8006a98:	2014      	movs	r0, #20
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006a9a:	3603      	adds	r6, #3
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8006a9c:	f000 fb04 	bl	80070a8 <pvPortMalloc>
  if (thePool) {
 8006aa0:	4604      	mov	r4, r0
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006aa2:	f026 0603 	bic.w	r6, r6, #3
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
  if (thePool) {
 8006aa6:	b328      	cbz	r0, 8006af4 <osPoolCreate+0x64>
    thePool->pool_sz = pool_def->pool_sz;
 8006aa8:	6838      	ldr	r0, [r7, #0]
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8006aaa:	2500      	movs	r5, #0
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
  if (thePool) {
    thePool->pool_sz = pool_def->pool_sz;
    thePool->item_sz = itemSize;
 8006aac:	60e6      	str	r6, [r4, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
  if (thePool) {
    thePool->pool_sz = pool_def->pool_sz;
 8006aae:	60a0      	str	r0, [r4, #8]
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8006ab0:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8006ab2:	f000 faf9 	bl	80070a8 <pvPortMalloc>
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	6060      	str	r0, [r4, #4]
    if (thePool->markers) {
 8006aba:	b1b8      	cbz	r0, 8006aec <osPoolCreate+0x5c>
      /* Now allocate the pool itself. */
      thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8006abc:	6838      	ldr	r0, [r7, #0]
 8006abe:	4370      	muls	r0, r6
 8006ac0:	f000 faf2 	bl	80070a8 <pvPortMalloc>
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 8006ac8:	b140      	cbz	r0, 8006adc <osPoolCreate+0x4c>
 8006aca:	462b      	mov	r3, r5
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
 8006acc:	4629      	mov	r1, r5
    if (thePool->markers) {
      /* Now allocate the pool itself. */
      thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
      
      if (thePool->pool) {
        for (i = 0; i < pool_def->pool_sz; i++) {
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d20f      	bcs.n	8006af4 <osPoolCreate+0x64>
          thePool->markers[i] = 0;
 8006ad4:	6862      	ldr	r2, [r4, #4]
 8006ad6:	54d1      	strb	r1, [r2, r3]
    if (thePool->markers) {
      /* Now allocate the pool itself. */
      thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
      
      if (thePool->pool) {
        for (i = 0; i < pool_def->pool_sz; i++) {
 8006ad8:	3301      	adds	r3, #1
 8006ada:	e7f8      	b.n	8006ace <osPoolCreate+0x3e>
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 8006adc:	6860      	ldr	r0, [r4, #4]
 8006ade:	f000 fb79 	bl	80071d4 <vPortFree>
        vPortFree(thePool);
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 fb76 	bl	80071d4 <vPortFree>
        thePool = NULL;
 8006ae8:	4634      	mov	r4, r6
 8006aea:	e003      	b.n	8006af4 <osPoolCreate+0x64>
      }
    }
    else {
      vPortFree(thePool);
 8006aec:	4620      	mov	r0, r4
      thePool = NULL;
 8006aee:	4644      	mov	r4, r8
        vPortFree(thePool);
        thePool = NULL;
      }
    }
    else {
      vPortFree(thePool);
 8006af0:	f000 fb70 	bl	80071d4 <vPortFree>
      thePool = NULL;
    }
  }
  
  return thePool;
}
 8006af4:	4620      	mov	r0, r4
 8006af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006afa <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8006afa:	b570      	push	{r4, r5, r6, lr}
 8006afc:	4605      	mov	r5, r0
 8006afe:	f3ef 8405 	mrs	r4, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8006b02:	b164      	cbz	r4, 8006b1e <osPoolAlloc+0x24>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b04:	f3ef 8411 	mrs	r4, BASEPRI
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	b672      	cpsid	i
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	b662      	cpsie	i
 8006b1c:	e001      	b.n	8006b22 <osPoolAlloc+0x28>
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
  }
  else {
    vPortEnterCritical();
 8006b1e:	f000 f97d 	bl	8006e1c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006b22:	68a9      	ldr	r1, [r5, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	428a      	cmp	r2, r1
 8006b28:	d012      	beq.n	8006b50 <osPoolAlloc+0x56>
    index = pool_id->currentIndex + i;
 8006b2a:	692b      	ldr	r3, [r5, #16]
    if (index >= pool_id->pool_sz) {
      index = 0;
    }
    
    if (pool_id->markers[index] == 0) {
 8006b2c:	6868      	ldr	r0, [r5, #4]
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
    index = pool_id->currentIndex + i;
 8006b2e:	4413      	add	r3, r2
    if (index >= pool_id->pool_sz) {
      index = 0;
 8006b30:	4299      	cmp	r1, r3
 8006b32:	bf98      	it	ls
 8006b34:	2300      	movls	r3, #0
    }
    
    if (pool_id->markers[index] == 0) {
 8006b36:	18c6      	adds	r6, r0, r3
 8006b38:	5cc0      	ldrb	r0, [r0, r3]
 8006b3a:	b938      	cbnz	r0, 8006b4c <osPoolAlloc+0x52>
      pool_id->markers[index] = 1;
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	7032      	strb	r2, [r6, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8006b40:	68ea      	ldr	r2, [r5, #12]
 8006b42:	682e      	ldr	r6, [r5, #0]
      pool_id->currentIndex = index;
 8006b44:	612b      	str	r3, [r5, #16]
      index = 0;
    }
    
    if (pool_id->markers[index] == 0) {
      pool_id->markers[index] = 1;
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8006b46:	fb02 6603 	mla	r6, r2, r3, r6
      pool_id->currentIndex = index;
      break;
 8006b4a:	e002      	b.n	8006b52 <osPoolAlloc+0x58>
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006b4c:	3201      	adds	r2, #1
 8006b4e:	e7ea      	b.n	8006b26 <osPoolAlloc+0x2c>
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
  int dummy = 0;
  void *p = NULL;
 8006b50:	2600      	movs	r6, #0
 8006b52:	f3ef 8305 	mrs	r3, IPSR
      pool_id->currentIndex = index;
      break;
    }
  }
  
  if (inHandlerMode()) {
 8006b56:	b113      	cbz	r3, 8006b5e <osPoolAlloc+0x64>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b58:	f384 8811 	msr	BASEPRI, r4
 8006b5c:	e001      	b.n	8006b62 <osPoolAlloc+0x68>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
  }
  else {
    vPortExitCritical();
 8006b5e:	f000 f983 	bl	8006e68 <vPortExitCritical>
  }
  
  return p;
}
 8006b62:	4630      	mov	r0, r6
 8006b64:	bd70      	pop	{r4, r5, r6, pc}

08006b66 <osPoolCAlloc>:
* @param  pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolCAlloc (osPoolId pool_id)
{
 8006b66:	b508      	push	{r3, lr}
  void *p = osPoolAlloc(pool_id);
 8006b68:	f7ff ffc7 	bl	8006afa <osPoolAlloc>
  
  if (p != NULL)
 8006b6c:	b108      	cbz	r0, 8006b72 <osPoolCAlloc+0xc>
  {
    memset(p, 0, sizeof(pool_id->pool_sz));
 8006b6e:	2300      	movs	r3, #0
 8006b70:	6003      	str	r3, [r0, #0]
  }
  
  return p;
}
 8006b72:	bd08      	pop	{r3, pc}

08006b74 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8006b74:	b188      	cbz	r0, 8006b9a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 8006b76:	b181      	cbz	r1, 8006b9a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8006b78:	6803      	ldr	r3, [r0, #0]
 8006b7a:	4299      	cmp	r1, r3
 8006b7c:	d30d      	bcc.n	8006b9a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8006b7e:	1ac9      	subs	r1, r1, r3
  if (index % pool_id->item_sz) {
 8006b80:	68c3      	ldr	r3, [r0, #12]
 8006b82:	fbb1 f2f3 	udiv	r2, r1, r3
 8006b86:	fb03 1112 	mls	r1, r3, r2, r1
 8006b8a:	b931      	cbnz	r1, 8006b9a <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8006b8c:	6883      	ldr	r3, [r0, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d203      	bcs.n	8006b9a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8006b92:	6843      	ldr	r3, [r0, #4]
  
  return osOK;
 8006b94:	4608      	mov	r0, r1
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8006b96:	5499      	strb	r1, [r3, r2]
 8006b98:	4770      	bx	lr
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
    return osErrorParameter;
 8006b9a:	2080      	movs	r0, #128	; 0x80
  }
  
  pool_id->markers[index] = 0;
  
  return osOK;
}
 8006b9c:	4770      	bx	lr

08006b9e <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8006b9e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006ba0:	6803      	ldr	r3, [r0, #0]
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8006ba2:	4605      	mov	r5, r0
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
  
  
  /* Create a mail queue control block */
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006ba4:	6886      	ldr	r6, [r0, #8]
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	6843      	ldr	r3, [r0, #4]
  
  
  /* Create a mail queue control block */
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006bac:	200c      	movs	r0, #12
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006bae:	9403      	str	r4, [sp, #12]
 8006bb0:	9302      	str	r3, [sp, #8]
  
  
  /* Create a mail queue control block */
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006bb2:	f000 fa79 	bl	80070a8 <pvPortMalloc>
 8006bb6:	6030      	str	r0, [r6, #0]
  if (*(queue_def->cb) == NULL) {
 8006bb8:	68ab      	ldr	r3, [r5, #8]
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	b1c0      	cbz	r0, 8006bf0 <osMailCreate+0x52>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8006bbe:	6005      	str	r5, [r0, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	2104      	movs	r1, #4
 8006bc4:	6828      	ldr	r0, [r5, #0]
 8006bc6:	681e      	ldr	r6, [r3, #0]
 8006bc8:	f000 fc00 	bl	80073cc <xQueueGenericCreate>
  if ((*(queue_def->cb))->handle == NULL) {
 8006bcc:	68ab      	ldr	r3, [r5, #8]
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006bce:	6070      	str	r0, [r6, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8006bd0:	681e      	ldr	r6, [r3, #0]
 8006bd2:	6874      	ldr	r4, [r6, #4]
 8006bd4:	b90c      	cbnz	r4, 8006bda <osMailCreate+0x3c>
    vPortFree(*(queue_def->cb));
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	e007      	b.n	8006bea <osMailCreate+0x4c>
    return NULL;
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8006bda:	a801      	add	r0, sp, #4
 8006bdc:	f7ff ff58 	bl	8006a90 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 8006be0:	68ab      	ldr	r3, [r5, #8]
    vPortFree(*(queue_def->cb));
    return NULL;
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8006be2:	60b0      	str	r0, [r6, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8006be4:	6818      	ldr	r0, [r3, #0]
 8006be6:	6884      	ldr	r4, [r0, #8]
 8006be8:	b914      	cbnz	r4, 8006bf0 <osMailCreate+0x52>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8006bea:	f000 faf3 	bl	80071d4 <vPortFree>
    return NULL;
 8006bee:	4620      	mov	r0, r4
  }
  
  return *(queue_def->cb);
}
 8006bf0:	b004      	add	sp, #16
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}

08006bf4 <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8006bf4:	b110      	cbz	r0, 8006bfc <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 8006bf6:	6880      	ldr	r0, [r0, #8]
 8006bf8:	f7ff bf7f 	b.w	8006afa <osPoolAlloc>
  
  return p;
}
 8006bfc:	4770      	bx	lr
	...

08006c00 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8006c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c02:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8006c04:	b318      	cbz	r0, 8006c4e <osMailPut+0x4e>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 8006c06:	2400      	movs	r4, #0
 8006c08:	9403      	str	r4, [sp, #12]
 8006c0a:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8006c0e:	b1ab      	cbz	r3, 8006c3c <osMailPut+0x3c>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8006c10:	4623      	mov	r3, r4
 8006c12:	aa03      	add	r2, sp, #12
 8006c14:	a901      	add	r1, sp, #4
 8006c16:	6840      	ldr	r0, [r0, #4]
 8006c18:	f000 fcf1 	bl	80075fe <xQueueGenericSendFromISR>
 8006c1c:	2801      	cmp	r0, #1
 8006c1e:	d001      	beq.n	8006c24 <osMailPut+0x24>
      return osErrorOS;
 8006c20:	20ff      	movs	r0, #255	; 0xff
 8006c22:	e015      	b.n	8006c50 <osMailPut+0x50>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	b183      	cbz	r3, 8006c4a <osMailPut+0x4a>
 8006c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2c:	4b09      	ldr	r3, [pc, #36]	; (8006c54 <osMailPut+0x54>)
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
      return osErrorOS;
    }
  }
  
  return osOK;
 8006c38:	4620      	mov	r0, r4
 8006c3a:	e009      	b.n	8006c50 <osMailPut+0x50>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	a901      	add	r1, sp, #4
 8006c40:	6840      	ldr	r0, [r0, #4]
 8006c42:	f000 fbf9 	bl	8007438 <xQueueGenericSend>
 8006c46:	2801      	cmp	r0, #1
 8006c48:	d1ea      	bne.n	8006c20 <osMailPut+0x20>
      return osErrorOS;
    }
  }
  
  return osOK;
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e000      	b.n	8006c50 <osMailPut+0x50>
{
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
    return osErrorParameter;
 8006c4e:	2080      	movs	r0, #128	; 0x80
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8006c50:	b004      	add	sp, #16
 8006c52:	bd10      	pop	{r4, pc}
 8006c54:	e000ed04 	.word	0xe000ed04

08006c58 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8006c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	4617      	mov	r7, r2
 8006c60:	4608      	mov	r0, r1
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8006c62:	9103      	str	r1, [sp, #12]
 8006c64:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8006c66:	b909      	cbnz	r1, 8006c6c <osMailGet+0x14>
    event.status = osErrorParameter;
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	e025      	b.n	8006cb8 <osMailGet+0x60>
    return event;
  }
  
  taskWoken = pdFALSE;
 8006c6c:	2600      	movs	r6, #0
 8006c6e:	9600      	str	r6, [sp, #0]
 8006c70:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8006c74:	b1a3      	cbz	r3, 8006ca0 <osMailGet+0x48>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006c76:	466a      	mov	r2, sp
 8006c78:	a902      	add	r1, sp, #8
 8006c7a:	6840      	ldr	r0, [r0, #4]
 8006c7c:	f000 fe38 	bl	80078f0 <xQueueReceiveFromISR>
 8006c80:	2801      	cmp	r0, #1
      /* We have mail */
      event.status = osEventMail;
 8006c82:	bf0a      	itet	eq
 8006c84:	2320      	moveq	r3, #32
    }
    else {
      event.status = osOK;
 8006c86:	9601      	strne	r6, [sp, #4]
  }
  
  if (inHandlerMode()) {
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 8006c88:	9301      	streq	r3, [sp, #4]
    }
    else {
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c8a:	9b00      	ldr	r3, [sp, #0]
 8006c8c:	b1ab      	cbz	r3, 8006cba <osMailGet+0x62>
 8006c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <osMailGet+0x70>)
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	e00c      	b.n	8006cba <osMailGet+0x62>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8006ca0:	a902      	add	r1, sp, #8
 8006ca2:	6840      	ldr	r0, [r0, #4]
 8006ca4:	f000 fd68 	bl	8007778 <xQueueGenericReceive>
 8006ca8:	2801      	cmp	r0, #1
 8006caa:	d101      	bne.n	8006cb0 <osMailGet+0x58>
      /* We have mail */
      event.status = osEventMail;
 8006cac:	2320      	movs	r3, #32
 8006cae:	e003      	b.n	8006cb8 <osMailGet+0x60>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006cb0:	2f00      	cmp	r7, #0
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2300      	moveq	r3, #0
 8006cb6:	2340      	movne	r3, #64	; 0x40
 8006cb8:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 8006cba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	b005      	add	sp, #20
 8006cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 8006ccc:	b110      	cbz	r0, 8006cd4 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 8006cce:	6880      	ldr	r0, [r0, #8]
 8006cd0:	f7ff bf50 	b.w	8006b74 <osPoolFree>
}
 8006cd4:	2080      	movs	r0, #128	; 0x80
 8006cd6:	4770      	bx	lr

08006cd8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006cd8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006cda:	f001 fb25 	bl	8008328 <xTaskGetSchedulerState>
 8006cde:	2801      	cmp	r0, #1
 8006ce0:	d003      	beq.n	8006cea <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8006ce6:	f000 b907 	b.w	8006ef8 <xPortSysTickHandler>
 8006cea:	bd08      	pop	{r3, pc}

08006cec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cec:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cf0:	f04f 32ff 	mov.w	r2, #4294967295
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf4:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cfa:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cfc:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cfe:	6003      	str	r3, [r0, #0]
 8006d00:	4770      	bx	lr

08006d02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	6103      	str	r3, [r0, #16]
 8006d06:	4770      	bx	lr

08006d08 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d08:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d0a:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d0c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d0e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d14:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006d16:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d18:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	6003      	str	r3, [r0, #0]
 8006d1e:	4770      	bx	lr

08006d20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d20:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d22:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d24:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d26:	d101      	bne.n	8006d2c <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d28:	6903      	ldr	r3, [r0, #16]
 8006d2a:	e007      	b.n	8006d3c <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006d2c:	f100 0308 	add.w	r3, r0, #8
 8006d30:	685c      	ldr	r4, [r3, #4]
 8006d32:	6825      	ldr	r5, [r4, #0]
 8006d34:	42aa      	cmp	r2, r5
 8006d36:	d301      	bcc.n	8006d3c <vListInsert+0x1c>
 8006d38:	4623      	mov	r3, r4
 8006d3a:	e7f9      	b.n	8006d30 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d40:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d42:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d44:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006d46:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d48:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	6003      	str	r3, [r0, #0]
 8006d4e:	bd30      	pop	{r4, r5, pc}

08006d50 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d50:	6841      	ldr	r1, [r0, #4]
 8006d52:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d54:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d56:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d58:	6882      	ldr	r2, [r0, #8]
 8006d5a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d5c:	6859      	ldr	r1, [r3, #4]
 8006d5e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d60:	bf08      	it	eq
 8006d62:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006d64:	2200      	movs	r2, #0
 8006d66:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	3801      	subs	r0, #1
 8006d6c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8006d6e:	4770      	bx	lr

08006d70 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d70:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <prvTaskExitError+0x34>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	d00a      	beq.n	8006d8e <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	b672      	cpsid	i
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	b662      	cpsie	i
 8006d8c:	e7fe      	b.n	8006d8c <prvTaskExitError+0x1c>
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	b672      	cpsid	i
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	b662      	cpsie	i
 8006da2:	e7fe      	b.n	8006da2 <prvTaskExitError+0x32>
 8006da4:	20010048 	.word	0x20010048

08006da8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006da8:	4806      	ldr	r0, [pc, #24]	; (8006dc4 <prvPortStartFirstTask+0x1c>)
 8006daa:	6800      	ldr	r0, [r0, #0]
 8006dac:	6800      	ldr	r0, [r0, #0]
 8006dae:	f380 8808 	msr	MSP, r0
 8006db2:	b662      	cpsie	i
 8006db4:	b661      	cpsie	f
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	df00      	svc	0
 8006dc0:	bf00      	nop
 8006dc2:	0000      	.short	0x0000
 8006dc4:	e000ed08 	.word	0xe000ed08

08006dc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006dc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006dd8 <vPortEnableVFP+0x10>
 8006dcc:	6801      	ldr	r1, [r0, #0]
 8006dce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006dd2:	6001      	str	r1, [r0, #0]
 8006dd4:	4770      	bx	lr
 8006dd6:	0000      	.short	0x0000
 8006dd8:	e000ed88 	.word	0xe000ed88

08006ddc <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ddc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006de0:	f840 2c20 	str.w	r2, [r0, #-32]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006de4:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006de8:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <pxPortInitialiseStack+0x1c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8006dea:	3844      	subs	r0, #68	; 0x44

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dec:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006dee:	f06f 0302 	mvn.w	r3, #2
 8006df2:	6203      	str	r3, [r0, #32]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	08006d71 	.word	0x08006d71

08006dfc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <pxCurrentTCBConst2>)
 8006dfe:	6819      	ldr	r1, [r3, #0]
 8006e00:	6808      	ldr	r0, [r1, #0]
 8006e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e06:	f380 8809 	msr	PSP, r0
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f04f 0000 	mov.w	r0, #0
 8006e12:	f380 8811 	msr	BASEPRI, r0
 8006e16:	4770      	bx	lr

08006e18 <pxCurrentTCBConst2>:
 8006e18:	20042d80 	.word	0x20042d80

08006e1c <vPortEnterCritical>:
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	b672      	cpsid	i
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e30:	4a0b      	ldr	r2, [pc, #44]	; (8006e60 <vPortEnterCritical+0x44>)
 8006e32:	6813      	ldr	r3, [r2, #0]
 8006e34:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e36:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e3a:	d10f      	bne.n	8006e5c <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <vPortEnterCritical+0x48>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e44:	d00a      	beq.n	8006e5c <vPortEnterCritical+0x40>
 8006e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4a:	b672      	cpsid	i
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	b662      	cpsie	i
 8006e5a:	e7fe      	b.n	8006e5a <vPortEnterCritical+0x3e>
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20010048 	.word	0x20010048
 8006e64:	e000ed04 	.word	0xe000ed04

08006e68 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006e68:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <vPortExitCritical+0x28>)
 8006e6a:	6813      	ldr	r3, [r2, #0]
 8006e6c:	b953      	cbnz	r3, 8006e84 <vPortExitCritical+0x1c>
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	b672      	cpsid	i
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	b662      	cpsie	i
 8006e82:	e7fe      	b.n	8006e82 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8006e84:	3b01      	subs	r3, #1
 8006e86:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e88:	b90b      	cbnz	r3, 8006e8e <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	4770      	bx	lr
 8006e90:	20010048 	.word	0x20010048

08006e94 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e94:	f3ef 8009 	mrs	r0, PSP
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <pxCurrentTCBConst>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	f01e 0f10 	tst.w	lr, #16
 8006ea4:	bf08      	it	eq
 8006ea6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006eaa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eae:	6010      	str	r0, [r2, #0]
 8006eb0:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006eb4:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006eb8:	b672      	cpsid	i
 8006eba:	f380 8811 	msr	BASEPRI, r0
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	b662      	cpsie	i
 8006ec8:	f001 f920 	bl	800810c <vTaskSwitchContext>
 8006ecc:	f04f 0000 	mov.w	r0, #0
 8006ed0:	f380 8811 	msr	BASEPRI, r0
 8006ed4:	bc08      	pop	{r3}
 8006ed6:	6819      	ldr	r1, [r3, #0]
 8006ed8:	6808      	ldr	r0, [r1, #0]
 8006eda:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ede:	f01e 0f10 	tst.w	lr, #16
 8006ee2:	bf08      	it	eq
 8006ee4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ee8:	f380 8809 	msr	PSP, r0
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <pxCurrentTCBConst>:
 8006ef4:	20042d80 	.word	0x20042d80

08006ef8 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ef8:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006efa:	f3ef 8311 	mrs	r3, BASEPRI
 8006efe:	f04f 0250 	mov.w	r2, #80	; 0x50
 8006f02:	b672      	cpsid	i
 8006f04:	f382 8811 	msr	BASEPRI, r2
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f12:	f000 ff6d 	bl	8007df0 <xTaskIncrementTick>
 8006f16:	b118      	cbz	r0, 8006f20 <xPortSysTickHandler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <xPortSysTickHandler+0x30>)
 8006f1e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f20:	2300      	movs	r3, #0
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	bd08      	pop	{r3, pc}
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <vPortSetupTimerInterrupt+0x1c>)
 8006f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f38:	4a04      	ldr	r2, [pc, #16]	; (8006f4c <vPortSetupTimerInterrupt+0x20>)
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f3e:	2207      	movs	r2, #7
 8006f40:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <vPortSetupTimerInterrupt+0x24>)
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	20010044 	.word	0x20010044
 8006f4c:	e000e014 	.word	0xe000e014
 8006f50:	e000e010 	.word	0xe000e010

08006f54 <xPortStartScheduler>:
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f54:	4b23      	ldr	r3, [pc, #140]	; (8006fe4 <xPortStartScheduler+0x90>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f56:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f58:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f5a:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f5c:	b2d2      	uxtb	r2, r2
 8006f5e:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f60:	22ff      	movs	r2, #255	; 0xff
 8006f62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f64:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f66:	4a20      	ldr	r2, [pc, #128]	; (8006fe8 <xPortStartScheduler+0x94>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f6e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f72:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f76:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f78:	2207      	movs	r2, #7
 8006f7a:	4b1c      	ldr	r3, [pc, #112]	; (8006fec <xPortStartScheduler+0x98>)
 8006f7c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f7e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8006f82:	1e54      	subs	r4, r2, #1
 8006f84:	0600      	lsls	r0, r0, #24
 8006f86:	d508      	bpl.n	8006f9a <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	0052      	lsls	r2, r2, #1
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	f88d 2003 	strb.w	r2, [sp, #3]
 8006f96:	4622      	mov	r2, r4
 8006f98:	e7f1      	b.n	8006f7e <xPortStartScheduler+0x2a>
 8006f9a:	b101      	cbz	r1, 8006f9e <xPortStartScheduler+0x4a>
 8006f9c:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	0212      	lsls	r2, r2, #8
 8006fa2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006fa6:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fa8:	9b01      	ldr	r3, [sp, #4]
 8006faa:	4a0e      	ldr	r2, [pc, #56]	; (8006fe4 <xPortStartScheduler+0x90>)
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <xPortStartScheduler+0x9c>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006fb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006fc0:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fc2:	f7ff ffb3 	bl	8006f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <xPortStartScheduler+0xa0>)
 8006fca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fcc:	f7ff fefc 	bl	8006dc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fd0:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <xPortStartScheduler+0xa4>)
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fd8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fda:	f7ff fee5 	bl	8006da8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8006fde:	f7ff fec7 	bl	8006d70 <prvTaskExitError>
 8006fe2:	bf00      	nop
 8006fe4:	e000e400 	.word	0xe000e400
 8006fe8:	20014664 	.word	0x20014664
 8006fec:	20014668 	.word	0x20014668
 8006ff0:	e000ed20 	.word	0xe000ed20
 8006ff4:	20010048 	.word	0x20010048
 8006ff8:	e000ef34 	.word	0xe000ef34

08006ffc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8006ffc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007000:	2b0f      	cmp	r3, #15
 8007002:	d910      	bls.n	8007026 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007004:	4a12      	ldr	r2, [pc, #72]	; (8007050 <vPortValidateInterruptPriority+0x54>)
 8007006:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007008:	4a12      	ldr	r2, [pc, #72]	; (8007054 <vPortValidateInterruptPriority+0x58>)
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d90a      	bls.n	8007026 <vPortValidateInterruptPriority+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	b672      	cpsid	i
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	b662      	cpsie	i
 8007024:	e7fe      	b.n	8007024 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <vPortValidateInterruptPriority+0x5c>)
 8007028:	4a0c      	ldr	r2, [pc, #48]	; (800705c <vPortValidateInterruptPriority+0x60>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007032:	4293      	cmp	r3, r2
 8007034:	d90a      	bls.n	800704c <vPortValidateInterruptPriority+0x50>
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	b672      	cpsid	i
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	b662      	cpsie	i
 800704a:	e7fe      	b.n	800704a <vPortValidateInterruptPriority+0x4e>
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	e000e3f0 	.word	0xe000e3f0
 8007054:	20014664 	.word	0x20014664
 8007058:	e000ed0c 	.word	0xe000ed0c
 800705c:	20014668 	.word	0x20014668

08007060 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007060:	4b0f      	ldr	r3, [pc, #60]	; (80070a0 <prvInsertBlockIntoFreeList+0x40>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007062:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	4282      	cmp	r2, r0
 8007068:	d201      	bcs.n	800706e <prvInsertBlockIntoFreeList+0xe>
 800706a:	4613      	mov	r3, r2
 800706c:	e7fa      	b.n	8007064 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800706e:	6859      	ldr	r1, [r3, #4]
 8007070:	185c      	adds	r4, r3, r1
 8007072:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007074:	bf01      	itttt	eq
 8007076:	6840      	ldreq	r0, [r0, #4]
 8007078:	1809      	addeq	r1, r1, r0
 800707a:	4618      	moveq	r0, r3
 800707c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800707e:	6841      	ldr	r1, [r0, #4]
 8007080:	1844      	adds	r4, r0, r1
 8007082:	42a2      	cmp	r2, r4
 8007084:	d107      	bne.n	8007096 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007086:	4c07      	ldr	r4, [pc, #28]	; (80070a4 <prvInsertBlockIntoFreeList+0x44>)
 8007088:	6824      	ldr	r4, [r4, #0]
 800708a:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800708c:	bf1f      	itttt	ne
 800708e:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007090:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007092:	1909      	addne	r1, r1, r4
 8007094:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007096:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007098:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800709a:	bf18      	it	ne
 800709c:	6018      	strne	r0, [r3, #0]
 800709e:	bd10      	pop	{r4, pc}
 80070a0:	20014674 	.word	0x20014674
 80070a4:	20014670 	.word	0x20014670

080070a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ac:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80070ae:	f000 fe91 	bl	8007dd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070b2:	4940      	ldr	r1, [pc, #256]	; (80071b4 <pvPortMalloc+0x10c>)
 80070b4:	4d40      	ldr	r5, [pc, #256]	; (80071b8 <pvPortMalloc+0x110>)
 80070b6:	680b      	ldr	r3, [r1, #0]
 80070b8:	b9f3      	cbnz	r3, 80070f8 <pvPortMalloc+0x50>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070ba:	4a40      	ldr	r2, [pc, #256]	; (80071bc <pvPortMalloc+0x114>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 80070bc:	2000      	movs	r0, #0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070be:	0756      	lsls	r6, r2, #29

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070c0:	4e3f      	ldr	r6, [pc, #252]	; (80071c0 <pvPortMalloc+0x118>)
	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070c2:	bf1b      	ittet	ne
 80070c4:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070c6:	4b3f      	ldrne	r3, [pc, #252]	; (80071c4 <pvPortMalloc+0x11c>)
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070c8:	4b3f      	ldreq	r3, [pc, #252]	; (80071c8 <pvPortMalloc+0x120>)
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070ca:	f022 0207 	bicne.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 80070ce:	6070      	str	r0, [r6, #4]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070d0:	bf18      	it	ne
 80070d2:	1a9b      	subne	r3, r3, r2

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80070d4:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80070d6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80070d8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070da:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
	pxEnd->pxNextFreeBlock = NULL;
 80070de:	6018      	str	r0, [r3, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 80070e0:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070e2:	1a98      	subs	r0, r3, r2
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 80070e4:	600b      	str	r3, [r1, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070e6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070e8:	4b38      	ldr	r3, [pc, #224]	; (80071cc <pvPortMalloc+0x124>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070ea:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ec:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ee:	4b38      	ldr	r3, [pc, #224]	; (80071d0 <pvPortMalloc+0x128>)
 80070f0:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070f6:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070f8:	682f      	ldr	r7, [r5, #0]
 80070fa:	4227      	tst	r7, r4
 80070fc:	d147      	bne.n	800718e <pvPortMalloc+0xe6>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070fe:	2c00      	cmp	r4, #0
 8007100:	d046      	beq.n	8007190 <pvPortMalloc+0xe8>
			{
				xWantedSize += xHeapStructSize;
 8007102:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007106:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007108:	bf1c      	itt	ne
 800710a:	f023 0307 	bicne.w	r3, r3, #7
 800710e:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007110:	2b00      	cmp	r3, #0
 8007112:	d03a      	beq.n	800718a <pvPortMalloc+0xe2>
 8007114:	4a2e      	ldr	r2, [pc, #184]	; (80071d0 <pvPortMalloc+0x128>)
 8007116:	6816      	ldr	r6, [r2, #0]
 8007118:	4690      	mov	r8, r2
 800711a:	42b3      	cmp	r3, r6
 800711c:	d837      	bhi.n	800718e <pvPortMalloc+0xe6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800711e:	4a28      	ldr	r2, [pc, #160]	; (80071c0 <pvPortMalloc+0x118>)
 8007120:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007122:	6868      	ldr	r0, [r5, #4]
 8007124:	4283      	cmp	r3, r0
 8007126:	d803      	bhi.n	8007130 <pvPortMalloc+0x88>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007128:	6809      	ldr	r1, [r1, #0]
 800712a:	428d      	cmp	r5, r1
 800712c:	d106      	bne.n	800713c <pvPortMalloc+0x94>
 800712e:	e02e      	b.n	800718e <pvPortMalloc+0xe6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007130:	682c      	ldr	r4, [r5, #0]
 8007132:	2c00      	cmp	r4, #0
 8007134:	d0f8      	beq.n	8007128 <pvPortMalloc+0x80>
 8007136:	462a      	mov	r2, r5
 8007138:	4625      	mov	r5, r4
 800713a:	e7f2      	b.n	8007122 <pvPortMalloc+0x7a>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800713c:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800713e:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007140:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007142:	1ac2      	subs	r2, r0, r3
 8007144:	2a10      	cmp	r2, #16
 8007146:	d911      	bls.n	800716c <pvPortMalloc+0xc4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007148:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800714a:	0741      	lsls	r1, r0, #29
 800714c:	d00a      	beq.n	8007164 <pvPortMalloc+0xbc>
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	b672      	cpsid	i
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	b662      	cpsie	i
 8007162:	e7fe      	b.n	8007162 <pvPortMalloc+0xba>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007164:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007166:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007168:	f7ff ff7a 	bl	8007060 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800716c:	686b      	ldr	r3, [r5, #4]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800716e:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007170:	4916      	ldr	r1, [pc, #88]	; (80071cc <pvPortMalloc+0x124>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007172:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007174:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007176:	6808      	ldr	r0, [r1, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8007178:	2300      	movs	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800717a:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800717e:	4282      	cmp	r2, r0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007180:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007182:	602b      	str	r3, [r5, #0]

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007184:	bf38      	it	cc
 8007186:	600a      	strcc	r2, [r1, #0]
 8007188:	e002      	b.n	8007190 <pvPortMalloc+0xe8>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800718a:	461c      	mov	r4, r3
 800718c:	e000      	b.n	8007190 <pvPortMalloc+0xe8>
 800718e:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007190:	f000 fec8 	bl	8007f24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007194:	0763      	lsls	r3, r4, #29
 8007196:	d00a      	beq.n	80071ae <pvPortMalloc+0x106>
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	b672      	cpsid	i
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	b662      	cpsie	i
 80071ac:	e7fe      	b.n	80071ac <pvPortMalloc+0x104>
	return pvReturn;
}
 80071ae:	4620      	mov	r0, r4
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	20014670 	.word	0x20014670
 80071b8:	20042cac 	.word	0x20042cac
 80071bc:	2001467c 	.word	0x2001467c
 80071c0:	20014674 	.word	0x20014674
 80071c4:	20042cac 	.word	0x20042cac
 80071c8:	0002e630 	.word	0x0002e630
 80071cc:	20042cb0 	.word	0x20042cb0
 80071d0:	2001466c 	.word	0x2001466c

080071d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071d4:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80071d6:	4604      	mov	r4, r0
 80071d8:	2800      	cmp	r0, #0
 80071da:	d032      	beq.n	8007242 <vPortFree+0x6e>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071dc:	4a19      	ldr	r2, [pc, #100]	; (8007244 <vPortFree+0x70>)
 80071de:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	4213      	tst	r3, r2
 80071e6:	d10a      	bne.n	80071fe <vPortFree+0x2a>
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	b672      	cpsid	i
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	b662      	cpsie	i
 80071fc:	e7fe      	b.n	80071fc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071fe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007202:	b151      	cbz	r1, 800721a <vPortFree+0x46>
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	b672      	cpsid	i
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	b662      	cpsie	i
 8007218:	e7fe      	b.n	8007218 <vPortFree+0x44>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800721a:	ea23 0302 	bic.w	r3, r3, r2
 800721e:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8007222:	f000 fdd7 	bl	8007dd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007226:	4a08      	ldr	r2, [pc, #32]	; (8007248 <vPortFree+0x74>)
 8007228:	f854 1c04 	ldr.w	r1, [r4, #-4]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800722c:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007230:	6813      	ldr	r3, [r2, #0]
 8007232:	440b      	add	r3, r1
 8007234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007236:	f7ff ff13 	bl	8007060 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800723a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 800723e:	f000 be71 	b.w	8007f24 <xTaskResumeAll>
 8007242:	bd10      	pop	{r4, pc}
 8007244:	20042cac 	.word	0x20042cac
 8007248:	2001466c 	.word	0x2001466c

0800724c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007250:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007252:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007254:	b932      	cbnz	r2, 8007264 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007256:	6805      	ldr	r5, [r0, #0]
 8007258:	bb45      	cbnz	r5, 80072ac <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800725a:	6840      	ldr	r0, [r0, #4]
 800725c:	f001 f8ba 	bl	80083d4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007260:	6065      	str	r5, [r4, #4]
 8007262:	e024      	b.n	80072ae <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007264:	b96d      	cbnz	r5, 8007282 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007266:	6880      	ldr	r0, [r0, #8]
 8007268:	f00a fbeb 	bl	8011a42 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800726c:	68a2      	ldr	r2, [r4, #8]
 800726e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007270:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007272:	6862      	ldr	r2, [r4, #4]
 8007274:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007276:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007278:	d318      	bcc.n	80072ac <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800727a:	6823      	ldr	r3, [r4, #0]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800727c:	4628      	mov	r0, r5
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800727e:	60a3      	str	r3, [r4, #8]
 8007280:	e015      	b.n	80072ae <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007282:	68c0      	ldr	r0, [r0, #12]
 8007284:	f00a fbdd 	bl	8011a42 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800728a:	68e2      	ldr	r2, [r4, #12]
 800728c:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800728e:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007290:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007292:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007294:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007296:	bf3e      	ittt	cc
 8007298:	6862      	ldrcc	r2, [r4, #4]
 800729a:	189b      	addcc	r3, r3, r2
 800729c:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800729e:	2d02      	cmp	r5, #2
 80072a0:	d104      	bne.n	80072ac <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072a4:	b113      	cbz	r3, 80072ac <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80072a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072a8:	3b01      	subs	r3, #1
 80072aa:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 80072ac:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80072ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072b0:	3301      	adds	r3, #1
 80072b2:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 80072b4:	bd38      	pop	{r3, r4, r5, pc}

080072b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072b6:	4603      	mov	r3, r0
 80072b8:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072bc:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072be:	b162      	cbz	r2, 80072da <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80072c0:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072c2:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80072c4:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072c6:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80072c8:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80072ca:	f85d 4b04 	ldr.w	r4, [sp], #4
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80072ce:	bf24      	itt	cs
 80072d0:	6819      	ldrcs	r1, [r3, #0]
 80072d2:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80072d4:	68d9      	ldr	r1, [r3, #12]
 80072d6:	f00a bbb4 	b.w	8011a42 <memcpy>
	}
}
 80072da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072e4:	f7ff fd9a 	bl	8006e1c <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072e8:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80072ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dd0b      	ble.n	800730a <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072f4:	b14b      	cbz	r3, 800730a <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 ff7e 	bl	80081f8 <xTaskRemoveFromEventList>
 80072fc:	b108      	cbz	r0, 8007302 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80072fe:	f001 f80d 	bl	800831c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8007302:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007304:	3b01      	subs	r3, #1
 8007306:	64a3      	str	r3, [r4, #72]	; 0x48
 8007308:	e7f0      	b.n	80072ec <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800730a:	f04f 33ff 	mov.w	r3, #4294967295
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800730e:	f104 0510 	add.w	r5, r4, #16
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8007312:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8007314:	f7ff fda8 	bl	8006e68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007318:	f7ff fd80 	bl	8006e1c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800731c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800731e:	2b00      	cmp	r3, #0
 8007320:	dd0b      	ble.n	800733a <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	b14b      	cbz	r3, 800733a <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007326:	4628      	mov	r0, r5
 8007328:	f000 ff66 	bl	80081f8 <xTaskRemoveFromEventList>
 800732c:	b108      	cbz	r0, 8007332 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 800732e:	f000 fff5 	bl	800831c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 8007332:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007334:	3b01      	subs	r3, #1
 8007336:	6463      	str	r3, [r4, #68]	; 0x44
 8007338:	e7f0      	b.n	800731c <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800733a:	f04f 33ff 	mov.w	r3, #4294967295
 800733e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8007340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8007344:	f7ff bd90 	b.w	8006e68 <vPortExitCritical>

08007348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800734c:	4604      	mov	r4, r0
 800734e:	b950      	cbnz	r0, 8007366 <xQueueGenericReset+0x1e>
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	b672      	cpsid	i
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	b662      	cpsie	i
 8007364:	e7fe      	b.n	8007364 <xQueueGenericReset+0x1c>

	taskENTER_CRITICAL();
 8007366:	f7ff fd59 	bl	8006e1c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800736a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800736c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	4343      	muls	r3, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007372:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007374:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007376:	1a1b      	subs	r3, r3, r0
 8007378:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800737a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800737c:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800737e:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8007380:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007384:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8007386:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8007388:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 800738a:	b985      	cbnz	r5, 80073ae <xQueueGenericReset+0x66>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	b1b3      	cbz	r3, 80073be <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8007390:	f104 0010 	add.w	r0, r4, #16
 8007394:	f000 ff30 	bl	80081f8 <xTaskRemoveFromEventList>
 8007398:	2801      	cmp	r0, #1
 800739a:	d110      	bne.n	80073be <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800739c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <xQueueGenericReset+0x80>)
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	e007      	b.n	80073be <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073ae:	f104 0010 	add.w	r0, r4, #16
 80073b2:	f7ff fc9b 	bl	8006cec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80073ba:	f7ff fc97 	bl	8006cec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073be:	f7ff fd53 	bl	8006e68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 80073c2:	2001      	movs	r0, #1
 80073c4:	bd38      	pop	{r3, r4, r5, pc}
 80073c6:	bf00      	nop
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	460d      	mov	r5, r1
 80073d0:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073d2:	4606      	mov	r6, r0
 80073d4:	b950      	cbnz	r0, 80073ec <xQueueGenericCreate+0x20>
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	b672      	cpsid	i
 80073dc:	f383 8811 	msr	BASEPRI, r3
 80073e0:	f3bf 8f6f 	isb	sy
 80073e4:	f3bf 8f4f 	dsb	sy
 80073e8:	b662      	cpsie	i
 80073ea:	e7fe      	b.n	80073ea <xQueueGenericCreate+0x1e>

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073ec:	b111      	cbz	r1, 80073f4 <xQueueGenericCreate+0x28>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ee:	4348      	muls	r0, r1
 80073f0:	3001      	adds	r0, #1
 80073f2:	e000      	b.n	80073f6 <xQueueGenericCreate+0x2a>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 80073f4:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80073f6:	3054      	adds	r0, #84	; 0x54
 80073f8:	f7ff fe56 	bl	80070a8 <pvPortMalloc>

	if( pxNewQueue != NULL )
 80073fc:	4604      	mov	r4, r0
 80073fe:	b130      	cbz	r0, 800740e <xQueueGenericCreate+0x42>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 8007400:	b90d      	cbnz	r5, 8007406 <xQueueGenericCreate+0x3a>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007402:	6020      	str	r0, [r4, #0]
 8007404:	e00e      	b.n	8007424 <xQueueGenericCreate+0x58>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007406:	f100 0354 	add.w	r3, r0, #84	; 0x54
 800740a:	6003      	str	r3, [r0, #0]
 800740c:	e00a      	b.n	8007424 <xQueueGenericCreate+0x58>
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	b672      	cpsid	i
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	b662      	cpsie	i
 8007422:	e7fe      	b.n	8007422 <xQueueGenericCreate+0x56>
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 8007424:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007426:	2101      	movs	r1, #1
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
		pxNewQueue->uxItemSize = uxItemSize;
 8007428:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800742a:	4620      	mov	r0, r4
 800742c:	f7ff ff8c 	bl	8007348 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 8007430:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 8007434:	4620      	mov	r0, r4
 8007436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007438 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800743c:	4689      	mov	r9, r1
 800743e:	9201      	str	r2, [sp, #4]
 8007440:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8007442:	4604      	mov	r4, r0
 8007444:	b950      	cbnz	r0, 800745c <xQueueGenericSend+0x24>
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	b672      	cpsid	i
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	b662      	cpsie	i
 800745a:	e7fe      	b.n	800745a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800745c:	b961      	cbnz	r1, 8007478 <xQueueGenericSend+0x40>
 800745e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007460:	b153      	cbz	r3, 8007478 <xQueueGenericSend+0x40>
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	b672      	cpsid	i
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	b662      	cpsie	i
 8007476:	e7fe      	b.n	8007476 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007478:	2f02      	cmp	r7, #2
 800747a:	d10d      	bne.n	8007498 <xQueueGenericSend+0x60>
 800747c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800747e:	2b01      	cmp	r3, #1
 8007480:	d00a      	beq.n	8007498 <xQueueGenericSend+0x60>
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	b672      	cpsid	i
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	b662      	cpsie	i
 8007496:	e7fe      	b.n	8007496 <xQueueGenericSend+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007498:	f000 ff46 	bl	8008328 <xTaskGetSchedulerState>
 800749c:	b910      	cbnz	r0, 80074a4 <xQueueGenericSend+0x6c>
 800749e:	9e01      	ldr	r6, [sp, #4]
 80074a0:	b10e      	cbz	r6, 80074a6 <xQueueGenericSend+0x6e>
 80074a2:	e073      	b.n	800758c <xQueueGenericSend+0x154>
 80074a4:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80074a6:	f04f 0800 	mov.w	r8, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 80074aa:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 80075a8 <xQueueGenericSend+0x170>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ae:	f7ff fcb5 	bl	8006e1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80074b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d301      	bcc.n	80074be <xQueueGenericSend+0x86>
 80074ba:	2f02      	cmp	r7, #2
 80074bc:	d11a      	bne.n	80074f4 <xQueueGenericSend+0xbc>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074be:	463a      	mov	r2, r7
 80074c0:	4649      	mov	r1, r9
 80074c2:	4620      	mov	r0, r4
 80074c4:	f7ff fec2 	bl	800724c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80074ca:	b133      	cbz	r3, 80074da <xQueueGenericSend+0xa2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 80074cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074d0:	f000 fe92 	bl	80081f8 <xTaskRemoveFromEventList>
 80074d4:	2801      	cmp	r0, #1
 80074d6:	d109      	bne.n	80074ec <xQueueGenericSend+0xb4>
 80074d8:	e000      	b.n	80074dc <xQueueGenericSend+0xa4>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074da:	b138      	cbz	r0, 80074ec <xQueueGenericSend+0xb4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e0:	4b31      	ldr	r3, [pc, #196]	; (80075a8 <xQueueGenericSend+0x170>)
 80074e2:	601a      	str	r2, [r3, #0]
 80074e4:	f3bf 8f4f 	dsb	sy
 80074e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074ec:	f7ff fcbc 	bl	8006e68 <vPortExitCritical>
				return pdPASS;
 80074f0:	2001      	movs	r0, #1
 80074f2:	e056      	b.n	80075a2 <xQueueGenericSend+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074f4:	9d01      	ldr	r5, [sp, #4]
 80074f6:	b91d      	cbnz	r5, 8007500 <xQueueGenericSend+0xc8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074f8:	f7ff fcb6 	bl	8006e68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074fc:	4628      	mov	r0, r5
 80074fe:	e050      	b.n	80075a2 <xQueueGenericSend+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007500:	b916      	cbnz	r6, 8007508 <xQueueGenericSend+0xd0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8007502:	a802      	add	r0, sp, #8
 8007504:	f000 febc 	bl	8008280 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007508:	f7ff fcae 	bl	8006e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800750c:	f000 fc62 	bl	8007dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007510:	f7ff fc84 	bl	8006e1c <vPortEnterCritical>
 8007514:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007516:	3301      	adds	r3, #1
 8007518:	d101      	bne.n	800751e <xQueueGenericSend+0xe6>
 800751a:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
 800751e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007520:	3301      	adds	r3, #1
 8007522:	d101      	bne.n	8007528 <xQueueGenericSend+0xf0>
 8007524:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 8007528:	f7ff fc9e 	bl	8006e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800752c:	a901      	add	r1, sp, #4
 800752e:	a802      	add	r0, sp, #8
 8007530:	f000 feb6 	bl	80082a0 <xTaskCheckForTimeOut>
 8007534:	bb18      	cbnz	r0, 800757e <xQueueGenericSend+0x146>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007536:	f7ff fc71 	bl	8006e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800753a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800753c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800753e:	f7ff fc93 	bl	8006e68 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007542:	42ae      	cmp	r6, r5
 8007544:	d115      	bne.n	8007572 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007546:	9901      	ldr	r1, [sp, #4]
 8007548:	f104 0010 	add.w	r0, r4, #16
 800754c:	f000 fe1a 	bl	8008184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007550:	4620      	mov	r0, r4
 8007552:	f7ff fec5 	bl	80072e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007556:	f000 fce5 	bl	8007f24 <xTaskResumeAll>
 800755a:	b108      	cbz	r0, 8007560 <xQueueGenericSend+0x128>
 800755c:	2601      	movs	r6, #1
 800755e:	e7a6      	b.n	80074ae <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
 8007560:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007564:	f8ca 3000 	str.w	r3, [sl]
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	e7f4      	b.n	800755c <xQueueGenericSend+0x124>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007572:	4620      	mov	r0, r4
 8007574:	f7ff feb4 	bl	80072e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007578:	f000 fcd4 	bl	8007f24 <xTaskResumeAll>
 800757c:	e7ee      	b.n	800755c <xQueueGenericSend+0x124>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800757e:	4620      	mov	r0, r4
 8007580:	f7ff feae 	bl	80072e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007584:	f000 fcce 	bl	8007f24 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007588:	2000      	movs	r0, #0
 800758a:	e00a      	b.n	80075a2 <xQueueGenericSend+0x16a>
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	b672      	cpsid	i
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	b662      	cpsie	i
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericSend+0x168>
		}
	}
}
 80075a2:	b004      	add	sp, #16
 80075a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 80075b0:	2054      	movs	r0, #84	; 0x54
 80075b2:	f7ff fd79 	bl	80070a8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80075b6:	4604      	mov	r4, r0
 80075b8:	b1f8      	cbz	r0, 80075fa <xQueueCreateMutex+0x4e>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80075ba:	2301      	movs	r3, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80075bc:	2500      	movs	r5, #0
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 80075be:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80075c2:	3010      	adds	r0, #16

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 80075c4:	62c3      	str	r3, [r0, #44]	; 0x2c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80075c6:	f04f 33ff 	mov.w	r3, #4294967295
			pxNewQueue->u.pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075ca:	6285      	str	r5, [r0, #40]	; 0x28
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80075cc:	f840 5c0c 	str.w	r5, [r0, #-12]
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 80075d0:	6343      	str	r3, [r0, #52]	; 0x34
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80075d2:	f840 5c10 	str.w	r5, [r0, #-16]
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 80075d6:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 80075d8:	f840 5c08 	str.w	r5, [r0, #-8]
			pxNewQueue->u.pcReadFrom = NULL;
 80075dc:	f840 5c04 	str.w	r5, [r0, #-4]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 80075e0:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80075e2:	f7ff fb83 	bl	8006cec <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80075e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80075ea:	f7ff fb7f 	bl	8006cec <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80075ee:	462b      	mov	r3, r5
 80075f0:	462a      	mov	r2, r5
 80075f2:	4629      	mov	r1, r5
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7ff ff1f 	bl	8007438 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
 80075fa:	4620      	mov	r0, r4
 80075fc:	bd70      	pop	{r4, r5, r6, pc}

080075fe <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007602:	460e      	mov	r6, r1
 8007604:	4690      	mov	r8, r2
 8007606:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8007608:	4604      	mov	r4, r0
 800760a:	b950      	cbnz	r0, 8007622 <xQueueGenericSendFromISR+0x24>
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	b672      	cpsid	i
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	b662      	cpsie	i
 8007620:	e7fe      	b.n	8007620 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007622:	b961      	cbnz	r1, 800763e <xQueueGenericSendFromISR+0x40>
 8007624:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007626:	b153      	cbz	r3, 800763e <xQueueGenericSendFromISR+0x40>
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	b672      	cpsid	i
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	b662      	cpsie	i
 800763c:	e7fe      	b.n	800763c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800763e:	2d02      	cmp	r5, #2
 8007640:	d10d      	bne.n	800765e <xQueueGenericSendFromISR+0x60>
 8007642:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d00a      	beq.n	800765e <xQueueGenericSendFromISR+0x60>
 8007648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800764c:	b672      	cpsid	i
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	b662      	cpsie	i
 800765c:	e7fe      	b.n	800765c <xQueueGenericSendFromISR+0x5e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800765e:	f7ff fccd 	bl	8006ffc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007662:	f3ef 8711 	mrs	r7, BASEPRI
 8007666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766a:	b672      	cpsid	i
 800766c:	f383 8811 	msr	BASEPRI, r3
 8007670:	f3bf 8f6f 	isb	sy
 8007674:	f3bf 8f4f 	dsb	sy
 8007678:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800767a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800767c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800767e:	429a      	cmp	r2, r3
 8007680:	d301      	bcc.n	8007686 <xQueueGenericSendFromISR+0x88>
 8007682:	2d02      	cmp	r5, #2
 8007684:	d11a      	bne.n	80076bc <xQueueGenericSendFromISR+0xbe>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007686:	462a      	mov	r2, r5
 8007688:	4631      	mov	r1, r6
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff fdde 	bl	800724c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8007690:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007692:	3301      	adds	r3, #1
 8007694:	d10d      	bne.n	80076b2 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007698:	b173      	cbz	r3, 80076b8 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800769a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800769e:	f000 fdab 	bl	80081f8 <xTaskRemoveFromEventList>
 80076a2:	b148      	cbz	r0, 80076b8 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076a4:	f1b8 0f00 	cmp.w	r8, #0
 80076a8:	d006      	beq.n	80076b8 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076aa:	2001      	movs	r0, #1
 80076ac:	f8c8 0000 	str.w	r0, [r8]
 80076b0:	e005      	b.n	80076be <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80076b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80076b4:	3301      	adds	r3, #1
 80076b6:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 80076b8:	2001      	movs	r0, #1
 80076ba:	e000      	b.n	80076be <xQueueGenericSendFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076bc:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076be:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80076c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076c6:	b570      	push	{r4, r5, r6, lr}
 80076c8:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80076ca:	4604      	mov	r4, r0
 80076cc:	b950      	cbnz	r0, 80076e4 <xQueueGiveFromISR+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	b672      	cpsid	i
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	b662      	cpsie	i
 80076e2:	e7fe      	b.n	80076e2 <xQueueGiveFromISR+0x1c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80076e6:	b153      	cbz	r3, 80076fe <xQueueGiveFromISR+0x38>
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	b672      	cpsid	i
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	b662      	cpsie	i
 80076fc:	e7fe      	b.n	80076fc <xQueueGiveFromISR+0x36>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80076fe:	6803      	ldr	r3, [r0, #0]
 8007700:	b90b      	cbnz	r3, 8007706 <xQueueGiveFromISR+0x40>
 8007702:	6843      	ldr	r3, [r0, #4]
 8007704:	bb4b      	cbnz	r3, 800775a <xQueueGiveFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007706:	f7ff fc79 	bl	8006ffc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800770a:	f3ef 8611 	mrs	r6, BASEPRI
 800770e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007712:	b672      	cpsid	i
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8007722:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007724:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007726:	429a      	cmp	r2, r3
 8007728:	d215      	bcs.n	8007756 <xQueueGiveFromISR+0x90>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
 800772a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800772c:	3301      	adds	r3, #1
 800772e:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8007730:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007732:	3301      	adds	r3, #1
 8007734:	d10a      	bne.n	800774c <xQueueGiveFromISR+0x86>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007738:	b15b      	cbz	r3, 8007752 <xQueueGiveFromISR+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800773a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800773e:	f000 fd5b 	bl	80081f8 <xTaskRemoveFromEventList>
 8007742:	b130      	cbz	r0, 8007752 <xQueueGiveFromISR+0x8c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007744:	b12d      	cbz	r5, 8007752 <xQueueGiveFromISR+0x8c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007746:	2001      	movs	r0, #1
 8007748:	6028      	str	r0, [r5, #0]
 800774a:	e011      	b.n	8007770 <xQueueGiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800774c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800774e:	3301      	adds	r3, #1
 8007750:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 8007752:	2001      	movs	r0, #1
 8007754:	e00c      	b.n	8007770 <xQueueGiveFromISR+0xaa>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007756:	2000      	movs	r0, #0
 8007758:	e00a      	b.n	8007770 <xQueueGiveFromISR+0xaa>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	b672      	cpsid	i
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	b662      	cpsie	i
 800776e:	e7fe      	b.n	800776e <xQueueGiveFromISR+0xa8>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007770:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8007774:	bd70      	pop	{r4, r5, r6, pc}
	...

08007778 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8007778:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800777c:	4688      	mov	r8, r1
 800777e:	9201      	str	r2, [sp, #4]
 8007780:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8007782:	4604      	mov	r4, r0
 8007784:	b950      	cbnz	r0, 800779c <xQueueGenericReceive+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	b672      	cpsid	i
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	b662      	cpsie	i
 800779a:	e7fe      	b.n	800779a <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800779c:	b961      	cbnz	r1, 80077b8 <xQueueGenericReceive+0x40>
 800779e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80077a0:	b153      	cbz	r3, 80077b8 <xQueueGenericReceive+0x40>
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	b672      	cpsid	i
 80077a8:	f383 8811 	msr	BASEPRI, r3
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f3bf 8f4f 	dsb	sy
 80077b4:	b662      	cpsie	i
 80077b6:	e7fe      	b.n	80077b6 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077b8:	f000 fdb6 	bl	8008328 <xTaskGetSchedulerState>
 80077bc:	b910      	cbnz	r0, 80077c4 <xQueueGenericReceive+0x4c>
 80077be:	9e01      	ldr	r6, [sp, #4]
 80077c0:	b10e      	cbz	r6, 80077c6 <xQueueGenericReceive+0x4e>
 80077c2:	e085      	b.n	80078d0 <xQueueGenericReceive+0x158>
 80077c4:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 80077c6:	2700      	movs	r7, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 80077c8:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80078ec <xQueueGenericReceive+0x174>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80077cc:	f7ff fb26 	bl	8006e1c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077d2:	b363      	cbz	r3, 800782e <xQueueGenericReceive+0xb6>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077d4:	4641      	mov	r1, r8
 80077d6:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80077d8:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077da:	f7ff fd6c 	bl	80072b6 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80077de:	f1ba 0f00 	cmp.w	sl, #0
 80077e2:	d110      	bne.n	8007806 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80077e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077e6:	3b01      	subs	r3, #1
 80077e8:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	b913      	cbnz	r3, 80077f4 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80077ee:	f000 fe45 	bl	800847c <pvTaskIncrementMutexHeldCount>
 80077f2:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077f4:	6923      	ldr	r3, [r4, #16]
 80077f6:	b1b3      	cbz	r3, 8007826 <xQueueGenericReceive+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80077f8:	f104 0010 	add.w	r0, r4, #16
 80077fc:	f000 fcfc 	bl	80081f8 <xTaskRemoveFromEventList>
 8007800:	2801      	cmp	r0, #1
 8007802:	d110      	bne.n	8007826 <xQueueGenericReceive+0xae>
 8007804:	e007      	b.n	8007816 <xQueueGenericReceive+0x9e>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007806:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8007808:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800780a:	b163      	cbz	r3, 8007826 <xQueueGenericReceive+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800780c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007810:	f000 fcf2 	bl	80081f8 <xTaskRemoveFromEventList>
 8007814:	b138      	cbz	r0, 8007826 <xQueueGenericReceive+0xae>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8007816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781a:	4b34      	ldr	r3, [pc, #208]	; (80078ec <xQueueGenericReceive+0x174>)
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8007826:	f7ff fb1f 	bl	8006e68 <vPortExitCritical>
				return pdPASS;
 800782a:	2001      	movs	r0, #1
 800782c:	e05b      	b.n	80078e6 <xQueueGenericReceive+0x16e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800782e:	9d01      	ldr	r5, [sp, #4]
 8007830:	b91d      	cbnz	r5, 800783a <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007832:	f7ff fb19 	bl	8006e68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007836:	4628      	mov	r0, r5
 8007838:	e055      	b.n	80078e6 <xQueueGenericReceive+0x16e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800783a:	b916      	cbnz	r6, 8007842 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800783c:	a802      	add	r0, sp, #8
 800783e:	f000 fd1f 	bl	8008280 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007842:	f7ff fb11 	bl	8006e68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007846:	f000 fac5 	bl	8007dd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800784a:	f7ff fae7 	bl	8006e1c <vPortEnterCritical>
 800784e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007850:	3301      	adds	r3, #1
 8007852:	d100      	bne.n	8007856 <xQueueGenericReceive+0xde>
 8007854:	6467      	str	r7, [r4, #68]	; 0x44
 8007856:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007858:	3301      	adds	r3, #1
 800785a:	d100      	bne.n	800785e <xQueueGenericReceive+0xe6>
 800785c:	64a7      	str	r7, [r4, #72]	; 0x48
 800785e:	f7ff fb03 	bl	8006e68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007862:	a901      	add	r1, sp, #4
 8007864:	a802      	add	r0, sp, #8
 8007866:	f000 fd1b 	bl	80082a0 <xTaskCheckForTimeOut>
 800786a:	bb50      	cbnz	r0, 80078c2 <xQueueGenericReceive+0x14a>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800786c:	f7ff fad6 	bl	8006e1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007870:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007872:	f7ff faf9 	bl	8006e68 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007876:	b9f5      	cbnz	r5, 80078b6 <xQueueGenericReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	b933      	cbnz	r3, 800788a <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
 800787c:	f7ff face 	bl	8006e1c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007880:	6860      	ldr	r0, [r4, #4]
 8007882:	f000 fd61 	bl	8008348 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8007886:	f7ff faef 	bl	8006e68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800788a:	9901      	ldr	r1, [sp, #4]
 800788c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007890:	f000 fc78 	bl	8008184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007894:	4620      	mov	r0, r4
 8007896:	f7ff fd23 	bl	80072e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800789a:	f000 fb43 	bl	8007f24 <xTaskResumeAll>
 800789e:	b108      	cbz	r0, 80078a4 <xQueueGenericReceive+0x12c>
 80078a0:	2601      	movs	r6, #1
 80078a2:	e793      	b.n	80077cc <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
 80078a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078a8:	f8c9 3000 	str.w	r3, [r9]
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	e7f4      	b.n	80078a0 <xQueueGenericReceive+0x128>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078b6:	4620      	mov	r0, r4
 80078b8:	f7ff fd12 	bl	80072e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078bc:	f000 fb32 	bl	8007f24 <xTaskResumeAll>
 80078c0:	e7ee      	b.n	80078a0 <xQueueGenericReceive+0x128>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80078c2:	4620      	mov	r0, r4
 80078c4:	f7ff fd0c 	bl	80072e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078c8:	f000 fb2c 	bl	8007f24 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80078cc:	2000      	movs	r0, #0
 80078ce:	e00a      	b.n	80078e6 <xQueueGenericReceive+0x16e>
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	b672      	cpsid	i
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	b662      	cpsie	i
 80078e4:	e7fe      	b.n	80078e4 <xQueueGenericReceive+0x16c>
		}
	}
}
 80078e6:	b004      	add	sp, #16
 80078e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f2:	460e      	mov	r6, r1
 80078f4:	4617      	mov	r7, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80078f6:	4604      	mov	r4, r0
 80078f8:	b950      	cbnz	r0, 8007910 <xQueueReceiveFromISR+0x20>
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	b672      	cpsid	i
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	b662      	cpsie	i
 800790e:	e7fe      	b.n	800790e <xQueueReceiveFromISR+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007910:	b961      	cbnz	r1, 800792c <xQueueReceiveFromISR+0x3c>
 8007912:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007914:	b153      	cbz	r3, 800792c <xQueueReceiveFromISR+0x3c>
 8007916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791a:	b672      	cpsid	i
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	b662      	cpsie	i
 800792a:	e7fe      	b.n	800792a <xQueueReceiveFromISR+0x3a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800792c:	f7ff fb66 	bl	8006ffc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007930:	f3ef 8511 	mrs	r5, BASEPRI
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	b672      	cpsid	i
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	b662      	cpsie	i

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007948:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800794a:	b1c0      	cbz	r0, 800797e <xQueueReceiveFromISR+0x8e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800794c:	4631      	mov	r1, r6
 800794e:	4620      	mov	r0, r4
 8007950:	f7ff fcb1 	bl	80072b6 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8007954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007956:	3b01      	subs	r3, #1
 8007958:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 800795a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800795c:	3301      	adds	r3, #1
 800795e:	d10a      	bne.n	8007976 <xQueueReceiveFromISR+0x86>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007960:	6923      	ldr	r3, [r4, #16]
 8007962:	b15b      	cbz	r3, 800797c <xQueueReceiveFromISR+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007964:	f104 0010 	add.w	r0, r4, #16
 8007968:	f000 fc46 	bl	80081f8 <xTaskRemoveFromEventList>
 800796c:	b130      	cbz	r0, 800797c <xQueueReceiveFromISR+0x8c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800796e:	b12f      	cbz	r7, 800797c <xQueueReceiveFromISR+0x8c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007970:	2001      	movs	r0, #1
 8007972:	6038      	str	r0, [r7, #0]
 8007974:	e003      	b.n	800797e <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8007976:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007978:	3301      	adds	r3, #1
 800797a:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
 800797c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800797e:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8007982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007984 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007984:	b510      	push	{r4, lr}
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007986:	4604      	mov	r4, r0
 8007988:	b950      	cbnz	r0, 80079a0 <uxQueueMessagesWaiting+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798e:	b672      	cpsid	i
 8007990:	f383 8811 	msr	BASEPRI, r3
 8007994:	f3bf 8f6f 	isb	sy
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	b662      	cpsie	i
 800799e:	e7fe      	b.n	800799e <uxQueueMessagesWaiting+0x1a>

	taskENTER_CRITICAL();
 80079a0:	f7ff fa3c 	bl	8006e1c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80079a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	}
	taskEXIT_CRITICAL();
 80079a6:	f7ff fa5f 	bl	8006e68 <vPortExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80079aa:	4620      	mov	r0, r4
 80079ac:	bd10      	pop	{r4, pc}
	...

080079b0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079b0:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80079b2:	4a07      	ldr	r2, [pc, #28]	; (80079d0 <vQueueUnregisterQueue+0x20>)
 80079b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80079b8:	6849      	ldr	r1, [r1, #4]
 80079ba:	4281      	cmp	r1, r0
 80079bc:	d104      	bne.n	80079c8 <vQueueUnregisterQueue+0x18>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80079be:	2100      	movs	r1, #0
 80079c0:	4a03      	ldr	r2, [pc, #12]	; (80079d0 <vQueueUnregisterQueue+0x20>)
 80079c2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				break;
 80079c6:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079c8:	3301      	adds	r3, #1
 80079ca:	2b08      	cmp	r3, #8
 80079cc:	d1f2      	bne.n	80079b4 <vQueueUnregisterQueue+0x4>
 80079ce:	4770      	bx	lr
 80079d0:	200430ec 	.word	0x200430ec

080079d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80079d4:	b510      	push	{r4, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80079d6:	b950      	cbnz	r0, 80079ee <vQueueDelete+0x1a>
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	b672      	cpsid	i
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	b662      	cpsie	i
 80079ec:	e7fe      	b.n	80079ec <vQueueDelete+0x18>

	traceQUEUE_DELETE( pxQueue );
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80079ee:	f7ff ffdf 	bl	80079b0 <vQueueUnregisterQueue>
	}
	#endif
	vPortFree( pxQueue );
}
 80079f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
 80079f6:	f7ff bbed 	b.w	80071d4 <vPortFree>
	...

080079fc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079fc:	4a06      	ldr	r2, [pc, #24]	; (8007a18 <prvResetNextTaskUnblockTime+0x1c>)
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	6819      	ldr	r1, [r3, #0]
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <prvResetNextTaskUnblockTime+0x20>)
 8007a04:	b911      	cbnz	r1, 8007a0c <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a06:	f04f 32ff 	mov.w	r2, #4294967295
 8007a0a:	e003      	b.n	8007a14 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8007a10:	68d2      	ldr	r2, [r2, #12]
 8007a12:	6852      	ldr	r2, [r2, #4]
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	4770      	bx	lr
 8007a18:	20042cb8 	.word	0x20042cb8
 8007a1c:	20042d84 	.word	0x20042d84

08007a20 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8007a20:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <prvAddCurrentTaskToDelayedList+0x3c>)
 8007a22:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8007a24:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8007a26:	6050      	str	r0, [r2, #4]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 8007a28:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 8007a2a:	4a0d      	ldr	r2, [pc, #52]	; (8007a60 <prvAddCurrentTaskToDelayedList+0x40>)
 8007a2c:	6812      	ldr	r2, [r2, #0]
 8007a2e:	4290      	cmp	r0, r2
 8007a30:	d207      	bcs.n	8007a42 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007a32:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <prvAddCurrentTaskToDelayedList+0x44>)
 8007a34:	6810      	ldr	r0, [r2, #0]
 8007a36:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007a3c:	3104      	adds	r1, #4
 8007a3e:	f7ff b96f 	b.w	8006d20 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007a42:	4a09      	ldr	r2, [pc, #36]	; (8007a68 <prvAddCurrentTaskToDelayedList+0x48>)
 8007a44:	6810      	ldr	r0, [r2, #0]
 8007a46:	6819      	ldr	r1, [r3, #0]
 8007a48:	3104      	adds	r1, #4
 8007a4a:	f7ff f969 	bl	8006d20 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8007a4e:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <prvAddCurrentTaskToDelayedList+0x4c>)
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4294      	cmp	r4, r2
 8007a54:	d200      	bcs.n	8007a58 <prvAddCurrentTaskToDelayedList+0x38>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8007a56:	601c      	str	r4, [r3, #0]
 8007a58:	bd10      	pop	{r4, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20042d80 	.word	0x20042d80
 8007a60:	20042d88 	.word	0x20042d88
 8007a64:	20042d8c 	.word	0x20042d8c
 8007a68:	20042cb8 	.word	0x20042cb8
 8007a6c:	20042d84 	.word	0x20042d84

08007a70 <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8007a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	469a      	mov	sl, r3
 8007a76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a78:	4681      	mov	r9, r0
 8007a7a:	460e      	mov	r6, r1
 8007a7c:	4615      	mov	r5, r2
 8007a7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a80:	b93b      	cbnz	r3, 8007a92 <xTaskGenericCreate.part.5+0x22>
 8007a82:	0090      	lsls	r0, r2, #2
 8007a84:	f7ff fb10 	bl	80070a8 <pvPortMalloc>

		if( pxStack != NULL )
 8007a88:	4683      	mov	fp, r0
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	f000 80b2 	beq.w	8007bf4 <xTaskGenericCreate.part.5+0x184>
 8007a90:	e000      	b.n	8007a94 <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a92:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8007a94:	205c      	movs	r0, #92	; 0x5c
 8007a96:	f7ff fb07 	bl	80070a8 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	b188      	cbz	r0, 8007ac2 <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8007a9e:	00ad      	lsls	r5, r5, #2
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8007aa0:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8007aa4:	21a5      	movs	r1, #165	; 0xa5
 8007aa6:	4658      	mov	r0, fp
 8007aa8:	462a      	mov	r2, r5
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007aaa:	3d04      	subs	r5, #4
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8007aac:	f009 ffd4 	bl	8011a58 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007ab0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007ab2:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8007ab6:	441d      	add	r5, r3
 8007ab8:	1e73      	subs	r3, r6, #1
 8007aba:	360f      	adds	r6, #15
 8007abc:	f025 0507 	bic.w	r5, r5, #7
 8007ac0:	e005      	b.n	8007ace <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8007ac2:	4658      	mov	r0, fp
 8007ac4:	f7ff fb86 	bl	80071d4 <vPortFree>
 8007ac8:	e094      	b.n	8007bf4 <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007aca:	429e      	cmp	r6, r3
 8007acc:	d006      	beq.n	8007adc <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8007ace:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007ad2:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007ad6:	7819      	ldrb	r1, [r3, #0]
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	d1f6      	bne.n	8007aca <xTaskGenericCreate.part.5+0x5a>
 8007adc:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ade:	f04f 0800 	mov.w	r8, #0
 8007ae2:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8007ae4:	f104 0604 	add.w	r6, r4, #4
 8007ae8:	bf28      	it	cs
 8007aea:	f04f 0b06 	movcs.w	fp, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007aee:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8007af2:	4630      	mov	r0, r6

	pxTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
 8007af4:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8007af8:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8007afc:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8007b00:	f7ff f8ff 	bl	8006d02 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8007b04:	f104 0018 	add.w	r0, r4, #24
 8007b08:	f7ff f8fb 	bl	8006d02 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0c:	f1cb 0307 	rsb	r3, fp, #7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8007b10:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b14:	4652      	mov	r2, sl
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b16:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b18:	4649      	mov	r1, r9
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8007b1a:	6124      	str	r4, [r4, #16]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b1c:	4628      	mov	r0, r5
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8007b1e:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8007b20:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b24:	f7ff f95a 	bl	8006ddc <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8007b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b2a:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8007b2c:	b103      	cbz	r3, 8007b30 <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b2e:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8007b30:	f7ff f974 	bl	8006e1c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8007b34:	4a31      	ldr	r2, [pc, #196]	; (8007bfc <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 8007b36:	4d32      	ldr	r5, [pc, #200]	; (8007c00 <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8007b38:	6813      	ldr	r3, [r2, #0]
 8007b3a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8007c28 <xTaskGenericCreate.part.5+0x1b8>
 8007b3e:	3301      	adds	r3, #1
 8007b40:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8007b42:	682b      	ldr	r3, [r5, #0]
 8007b44:	bb3b      	cbnz	r3, 8007b96 <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8007b46:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	2a01      	cmp	r2, #1
 8007b4c:	d12b      	bne.n	8007ba6 <xTaskGenericCreate.part.5+0x136>
 8007b4e:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b50:	eb09 0008 	add.w	r0, r9, r8
 8007b54:	f108 0814 	add.w	r8, r8, #20
 8007b58:	f7ff f8c8 	bl	8006cec <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b5c:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8007b60:	d1f6      	bne.n	8007b50 <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b62:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c2c <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 8007b66:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8007c30 <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	f7ff f8be 	bl	8006cec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b70:	4640      	mov	r0, r8
 8007b72:	f7ff f8bb 	bl	8006cec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b76:	4823      	ldr	r0, [pc, #140]	; (8007c04 <xTaskGenericCreate.part.5+0x194>)
 8007b78:	f7ff f8b8 	bl	8006cec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b7c:	4822      	ldr	r0, [pc, #136]	; (8007c08 <xTaskGenericCreate.part.5+0x198>)
 8007b7e:	f7ff f8b5 	bl	8006cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b82:	4822      	ldr	r0, [pc, #136]	; (8007c0c <xTaskGenericCreate.part.5+0x19c>)
 8007b84:	f7ff f8b2 	bl	8006cec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b88:	4b21      	ldr	r3, [pc, #132]	; (8007c10 <xTaskGenericCreate.part.5+0x1a0>)
 8007b8a:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b8e:	4b21      	ldr	r3, [pc, #132]	; (8007c14 <xTaskGenericCreate.part.5+0x1a4>)
 8007b90:	f8c3 8000 	str.w	r8, [r3]
 8007b94:	e007      	b.n	8007ba6 <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <xTaskGenericCreate.part.5+0x1a8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	b923      	cbnz	r3, 8007ba6 <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	429f      	cmp	r7, r3
 8007ba2:	d300      	bcc.n	8007ba6 <xTaskGenericCreate.part.5+0x136>
					{
						pxCurrentTCB = pxNewTCB;
 8007ba4:	602c      	str	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8007ba6:	4a1d      	ldr	r2, [pc, #116]	; (8007c1c <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8007ba8:	491d      	ldr	r1, [pc, #116]	; (8007c20 <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8007baa:	6813      	ldr	r3, [r2, #0]
 8007bac:	3301      	adds	r3, #1
 8007bae:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bb0:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8007bb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007bb4:	2401      	movs	r4, #1
 8007bb6:	680b      	ldr	r3, [r1, #0]
 8007bb8:	fa04 f002 	lsl.w	r0, r4, r2
 8007bbc:	4303      	orrs	r3, r0
 8007bbe:	2014      	movs	r0, #20
 8007bc0:	600b      	str	r3, [r1, #0]
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	fb00 9002 	mla	r0, r0, r2, r9
 8007bc8:	f7ff f89e 	bl	8006d08 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8007bcc:	f7ff f94c 	bl	8006e68 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8007bd0:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <xTaskGenericCreate.part.5+0x1a8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	b15b      	cbz	r3, 8007bee <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8007bd6:	682b      	ldr	r3, [r5, #0]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	429f      	cmp	r7, r3
 8007bdc:	d907      	bls.n	8007bee <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8007bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be2:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <xTaskGenericCreate.part.5+0x1b4>)
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8007bee:	4620      	mov	r0, r4
 8007bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8007bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfc:	20042dd0 	.word	0x20042dd0
 8007c00:	20042d80 	.word	0x20042d80
 8007c04:	20042d90 	.word	0x20042d90
 8007c08:	20042cc4 	.word	0x20042cc4
 8007c0c:	20042cd8 	.word	0x20042cd8
 8007c10:	20042cb8 	.word	0x20042cb8
 8007c14:	20042d8c 	.word	0x20042d8c
 8007c18:	20042cbc 	.word	0x20042cbc
 8007c1c:	20042da4 	.word	0x20042da4
 8007c20:	20042dd4 	.word	0x20042dd4
 8007c24:	e000ed04 	.word	0xe000ed04
 8007c28:	20042cf0 	.word	0x20042cf0
 8007c2c:	20042da8 	.word	0x20042da8
 8007c30:	20042dbc 	.word	0x20042dbc

08007c34 <prvTaskIsTaskSuspended.part.0>:
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	b672      	cpsid	i
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	b662      	cpsie	i
 8007c48:	e7fe      	b.n	8007c48 <prvTaskIsTaskSuspended.part.0+0x14>

08007c4a <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8007c4a:	b470      	push	{r4, r5, r6}
 8007c4c:	ac03      	add	r4, sp, #12
 8007c4e:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8007c50:	b950      	cbnz	r0, 8007c68 <xTaskGenericCreate+0x1e>
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	b672      	cpsid	i
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	b662      	cpsie	i
 8007c66:	e7fe      	b.n	8007c66 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8007c68:	2c06      	cmp	r4, #6
 8007c6a:	d90a      	bls.n	8007c82 <xTaskGenericCreate+0x38>
 8007c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c70:	b672      	cpsid	i
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	b662      	cpsie	i
 8007c80:	e7fe      	b.n	8007c80 <xTaskGenericCreate+0x36>
 8007c82:	9605      	str	r6, [sp, #20]
 8007c84:	9504      	str	r5, [sp, #16]
 8007c86:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8007c88:	bc70      	pop	{r4, r5, r6}
 8007c8a:	f7ff bef1 	b.w	8007a70 <xTaskGenericCreate.part.5>
	...

08007c90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007c90:	b538      	push	{r3, r4, r5, lr}
 8007c92:	4604      	mov	r4, r0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007c94:	f7ff f8c2 	bl	8006e1c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007c98:	b90c      	cbnz	r4, 8007c9e <vTaskDelete+0xe>
 8007c9a:	4b27      	ldr	r3, [pc, #156]	; (8007d38 <vTaskDelete+0xa8>)
 8007c9c:	681c      	ldr	r4, [r3, #0]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007c9e:	1d25      	adds	r5, r4, #4
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	f7ff f855 	bl	8006d50 <uxListRemove>
 8007ca6:	b960      	cbnz	r0, 8007cc2 <vTaskDelete+0x32>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007ca8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007caa:	2214      	movs	r2, #20
 8007cac:	4b23      	ldr	r3, [pc, #140]	; (8007d3c <vTaskDelete+0xac>)
 8007cae:	4342      	muls	r2, r0
 8007cb0:	589b      	ldr	r3, [r3, r2]
 8007cb2:	b933      	cbnz	r3, 8007cc2 <vTaskDelete+0x32>
 8007cb4:	4922      	ldr	r1, [pc, #136]	; (8007d40 <vTaskDelete+0xb0>)
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	680a      	ldr	r2, [r1, #0]
 8007cba:	4083      	lsls	r3, r0
 8007cbc:	ea22 0303 	bic.w	r3, r2, r3
 8007cc0:	600b      	str	r3, [r1, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cc2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007cc4:	b11b      	cbz	r3, 8007cce <vTaskDelete+0x3e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cc6:	f104 0018 	add.w	r0, r4, #24
 8007cca:	f7ff f841 	bl	8006d50 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8007cce:	4629      	mov	r1, r5
 8007cd0:	481c      	ldr	r0, [pc, #112]	; (8007d44 <vTaskDelete+0xb4>)
 8007cd2:	f7ff f819 	bl	8006d08 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8007cd6:	4a1c      	ldr	r2, [pc, #112]	; (8007d48 <vTaskDelete+0xb8>)
 8007cd8:	6813      	ldr	r3, [r2, #0]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8007cde:	4a1b      	ldr	r2, [pc, #108]	; (8007d4c <vTaskDelete+0xbc>)
 8007ce0:	6813      	ldr	r3, [r2, #0]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	6013      	str	r3, [r2, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007ce6:	f7ff f8bf 	bl	8006e68 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007cea:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <vTaskDelete+0xc0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	b313      	cbz	r3, 8007d36 <vTaskDelete+0xa6>
		{
			if( pxTCB == pxCurrentTCB )
 8007cf0:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <vTaskDelete+0xa8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d116      	bne.n	8007d26 <vTaskDelete+0x96>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007cf8:	4b16      	ldr	r3, [pc, #88]	; (8007d54 <vTaskDelete+0xc4>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	b153      	cbz	r3, 8007d14 <vTaskDelete+0x84>
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	b672      	cpsid	i
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	b662      	cpsie	i
 8007d12:	e7fe      	b.n	8007d12 <vTaskDelete+0x82>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 8007d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d18:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <vTaskDelete+0xc8>)
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 8007d26:	f7ff f879 	bl	8006e1c <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8007d2a:	f7ff fe67 	bl	80079fc <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
			}
		}
	}
 8007d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				the task that has just been deleted. */
				taskENTER_CRITICAL();
				{
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
 8007d32:	f7ff b899 	b.w	8006e68 <vPortExitCritical>
 8007d36:	bd38      	pop	{r3, r4, r5, pc}
 8007d38:	20042d80 	.word	0x20042d80
 8007d3c:	20042cf0 	.word	0x20042cf0
 8007d40:	20042dd4 	.word	0x20042dd4
 8007d44:	20042cc4 	.word	0x20042cc4
 8007d48:	20042cc0 	.word	0x20042cc0
 8007d4c:	20042da4 	.word	0x20042da4
 8007d50:	20042cbc 	.word	0x20042cbc
 8007d54:	20042d7c 	.word	0x20042d7c
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d5e:	2400      	movs	r4, #0
 8007d60:	2280      	movs	r2, #128	; 0x80
 8007d62:	4917      	ldr	r1, [pc, #92]	; (8007dc0 <vTaskStartScheduler+0x64>)
 8007d64:	9402      	str	r4, [sp, #8]
 8007d66:	4623      	mov	r3, r4
 8007d68:	9401      	str	r4, [sp, #4]
 8007d6a:	9400      	str	r4, [sp, #0]
 8007d6c:	4815      	ldr	r0, [pc, #84]	; (8007dc4 <vTaskStartScheduler+0x68>)
 8007d6e:	f7ff fe7f 	bl	8007a70 <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d72:	2801      	cmp	r0, #1
 8007d74:	d116      	bne.n	8007da4 <vTaskStartScheduler+0x48>
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	b672      	cpsid	i
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8e:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <vTaskStartScheduler+0x6c>)
 8007d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d92:	4b0e      	ldr	r3, [pc, #56]	; (8007dcc <vTaskStartScheduler+0x70>)
 8007d94:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d96:	4b0e      	ldr	r3, [pc, #56]	; (8007dd0 <vTaskStartScheduler+0x74>)
 8007d98:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8007d9a:	b004      	add	sp, #16
 8007d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007da0:	f7ff b8d8 	b.w	8006f54 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8007da4:	b950      	cbnz	r0, 8007dbc <vTaskStartScheduler+0x60>
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	b672      	cpsid	i
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	b662      	cpsie	i
 8007dba:	e7fe      	b.n	8007dba <vTaskStartScheduler+0x5e>
	}
}
 8007dbc:	b004      	add	sp, #16
 8007dbe:	bd10      	pop	{r4, pc}
 8007dc0:	0802f340 	.word	0x0802f340
 8007dc4:	08008095 	.word	0x08008095
 8007dc8:	20042d84 	.word	0x20042d84
 8007dcc:	20042cbc 	.word	0x20042cbc
 8007dd0:	20042d88 	.word	0x20042d88

08007dd4 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007dd4:	4a02      	ldr	r2, [pc, #8]	; (8007de0 <vTaskSuspendAll+0xc>)
 8007dd6:	6813      	ldr	r3, [r2, #0]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	20042d7c 	.word	0x20042d7c

08007de4 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007de4:	4b01      	ldr	r3, [pc, #4]	; (8007dec <xTaskGetTickCount+0x8>)
 8007de6:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	20042d88 	.word	0x20042d88

08007df0 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007df0:	4b41      	ldr	r3, [pc, #260]	; (8007ef8 <xTaskIncrementTick+0x108>)
 8007df2:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007df4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d13e      	bne.n	8007e7a <xTaskIncrementTick+0x8a>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8007dfc:	4b3f      	ldr	r3, [pc, #252]	; (8007efc <xTaskIncrementTick+0x10c>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	3201      	adds	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007e04:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8007e06:	b9cd      	cbnz	r5, 8007e3c <xTaskIncrementTick+0x4c>
			{
				taskSWITCH_DELAYED_LISTS();
 8007e08:	4b3d      	ldr	r3, [pc, #244]	; (8007f00 <xTaskIncrementTick+0x110>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	6812      	ldr	r2, [r2, #0]
 8007e0e:	b152      	cbz	r2, 8007e26 <xTaskIncrementTick+0x36>
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	b672      	cpsid	i
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	b662      	cpsie	i
 8007e24:	e7fe      	b.n	8007e24 <xTaskIncrementTick+0x34>
 8007e26:	4a37      	ldr	r2, [pc, #220]	; (8007f04 <xTaskIncrementTick+0x114>)
 8007e28:	6819      	ldr	r1, [r3, #0]
 8007e2a:	6810      	ldr	r0, [r2, #0]
 8007e2c:	6018      	str	r0, [r3, #0]
 8007e2e:	6011      	str	r1, [r2, #0]
 8007e30:	4a35      	ldr	r2, [pc, #212]	; (8007f08 <xTaskIncrementTick+0x118>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	3301      	adds	r3, #1
 8007e36:	6013      	str	r3, [r2, #0]
 8007e38:	f7ff fde0 	bl	80079fc <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8007e3c:	4c33      	ldr	r4, [pc, #204]	; (8007f0c <xTaskIncrementTick+0x11c>)
 8007e3e:	f04f 0b00 	mov.w	fp, #0
 8007e42:	4e33      	ldr	r6, [pc, #204]	; (8007f10 <xTaskIncrementTick+0x120>)
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	9401      	str	r4, [sp, #4]
 8007e48:	429d      	cmp	r5, r3
 8007e4a:	4f32      	ldr	r7, [pc, #200]	; (8007f14 <xTaskIncrementTick+0x124>)
 8007e4c:	d30b      	bcc.n	8007e66 <xTaskIncrementTick+0x76>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e4e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007f00 <xTaskIncrementTick+0x110>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8007e52:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8007f20 <xTaskIncrementTick+0x130>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e56:	f8d8 2000 	ldr.w	r2, [r8]
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	b9a2      	cbnz	r2, 8007e88 <xTaskIncrementTick+0x98>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8007e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e62:	9b01      	ldr	r3, [sp, #4]
 8007e64:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e6a:	2214      	movs	r2, #20
 8007e6c:	434a      	muls	r2, r1
 8007e6e:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8007e70:	2a02      	cmp	r2, #2
 8007e72:	bf28      	it	cs
 8007e74:	f04f 0b01 	movcs.w	fp, #1
 8007e78:	e034      	b.n	8007ee4 <xTaskIncrementTick+0xf4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e7a:	4a27      	ldr	r2, [pc, #156]	; (8007f18 <xTaskIncrementTick+0x128>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e7c:	f04f 0b00 	mov.w	fp, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e80:	6813      	ldr	r3, [r2, #0]
 8007e82:	3301      	adds	r3, #1
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	e02d      	b.n	8007ee4 <xTaskIncrementTick+0xf4>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e88:	f8d8 2000 	ldr.w	r2, [r8]
 8007e8c:	68d2      	ldr	r2, [r2, #12]
 8007e8e:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8007e90:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8007e92:	428d      	cmp	r5, r1
 8007e94:	d202      	bcs.n	8007e9c <xTaskIncrementTick+0xac>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	6019      	str	r1, [r3, #0]
							break;
 8007e9a:	e7e4      	b.n	8007e66 <xTaskIncrementTick+0x76>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007e9c:	f104 0a04 	add.w	sl, r4, #4
 8007ea0:	4650      	mov	r0, sl
 8007ea2:	f7fe ff55 	bl	8006d50 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ea6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007ea8:	b119      	cbz	r1, 8007eb2 <xTaskIncrementTick+0xc2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eaa:	f104 0018 	add.w	r0, r4, #24
 8007eae:	f7fe ff4f 	bl	8006d50 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8007eb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f8d9 1000 	ldr.w	r1, [r9]
 8007eba:	fa03 fe00 	lsl.w	lr, r3, r0
 8007ebe:	ea4e 0101 	orr.w	r1, lr, r1
 8007ec2:	f04f 0e14 	mov.w	lr, #20
 8007ec6:	f8c9 1000 	str.w	r1, [r9]
 8007eca:	4651      	mov	r1, sl
 8007ecc:	fb0e 6000 	mla	r0, lr, r0, r6
 8007ed0:	f7fe ff1a 	bl	8006d08 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ed4:	6838      	ldr	r0, [r7, #0]
 8007ed6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007ed8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8007eda:	4291      	cmp	r1, r2
 8007edc:	bf28      	it	cs
 8007ede:	f04f 0b01 	movcs.w	fp, #1
 8007ee2:	e7b8      	b.n	8007e56 <xTaskIncrementTick+0x66>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ee4:	4a0d      	ldr	r2, [pc, #52]	; (8007f1c <xTaskIncrementTick+0x12c>)
 8007ee6:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	bf18      	it	ne
 8007eec:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8007ef0:	4658      	mov	r0, fp
 8007ef2:	b003      	add	sp, #12
 8007ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef8:	20042d7c 	.word	0x20042d7c
 8007efc:	20042d88 	.word	0x20042d88
 8007f00:	20042cb8 	.word	0x20042cb8
 8007f04:	20042d8c 	.word	0x20042d8c
 8007f08:	20042cb4 	.word	0x20042cb4
 8007f0c:	20042d84 	.word	0x20042d84
 8007f10:	20042cf0 	.word	0x20042cf0
 8007f14:	20042d80 	.word	0x20042d80
 8007f18:	20042cec 	.word	0x20042cec
 8007f1c:	20042dd8 	.word	0x20042dd8
 8007f20:	20042dd4 	.word	0x20042dd4

08007f24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f28:	4c31      	ldr	r4, [pc, #196]	; (8007ff0 <xTaskResumeAll+0xcc>)
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	b953      	cbnz	r3, 8007f44 <xTaskResumeAll+0x20>
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	b672      	cpsid	i
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	b662      	cpsie	i
 8007f42:	e7fe      	b.n	8007f42 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f44:	f7fe ff6a 	bl	8006e1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	b10b      	cbz	r3, 8007f56 <xTaskResumeAll+0x32>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8007f52:	2400      	movs	r4, #0
 8007f54:	e047      	b.n	8007fe6 <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f56:	4b27      	ldr	r3, [pc, #156]	; (8007ff4 <xTaskResumeAll+0xd0>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d0f9      	beq.n	8007f52 <xTaskResumeAll+0x2e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f5e:	4d26      	ldr	r5, [pc, #152]	; (8007ff8 <xTaskResumeAll+0xd4>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8007f60:	4e26      	ldr	r6, [pc, #152]	; (8007ffc <xTaskResumeAll+0xd8>)
 8007f62:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008010 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f66:	682b      	ldr	r3, [r5, #0]
 8007f68:	b303      	cbz	r3, 8007fac <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007f6a:	68eb      	ldr	r3, [r5, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8007f6c:	2701      	movs	r7, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007f6e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007f70:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f74:	f104 0018 	add.w	r0, r4, #24
 8007f78:	f7fe feea 	bl	8006d50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007f7c:	4648      	mov	r0, r9
 8007f7e:	f7fe fee7 	bl	8006d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f84:	6833      	ldr	r3, [r6, #0]
 8007f86:	2014      	movs	r0, #20
 8007f88:	fa07 f102 	lsl.w	r1, r7, r2
 8007f8c:	fb00 8002 	mla	r0, r0, r2, r8
 8007f90:	430b      	orrs	r3, r1
 8007f92:	4649      	mov	r1, r9
 8007f94:	6033      	str	r3, [r6, #0]
 8007f96:	f7fe feb7 	bl	8006d08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f9a:	4b19      	ldr	r3, [pc, #100]	; (8008000 <xTaskResumeAll+0xdc>)
 8007f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d3df      	bcc.n	8007f66 <xTaskResumeAll+0x42>
					{
						xYieldPending = pdTRUE;
 8007fa6:	4b17      	ldr	r3, [pc, #92]	; (8008004 <xTaskResumeAll+0xe0>)
 8007fa8:	601f      	str	r7, [r3, #0]
 8007faa:	e7da      	b.n	8007f62 <xTaskResumeAll+0x3e>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8007fac:	4c16      	ldr	r4, [pc, #88]	; (8008008 <xTaskResumeAll+0xe4>)
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	b963      	cbnz	r3, 8007fcc <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8007fb2:	4b14      	ldr	r3, [pc, #80]	; (8008004 <xTaskResumeAll+0xe0>)
 8007fb4:	681c      	ldr	r4, [r3, #0]
 8007fb6:	2c01      	cmp	r4, #1
 8007fb8:	d1cb      	bne.n	8007f52 <xTaskResumeAll+0x2e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fbe:	4b13      	ldr	r3, [pc, #76]	; (800800c <xTaskResumeAll+0xe8>)
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	e00c      	b.n	8007fe6 <xTaskResumeAll+0xc2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8007fcc:	4d0d      	ldr	r5, [pc, #52]	; (8008004 <xTaskResumeAll+0xe0>)
 8007fce:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0ed      	beq.n	8007fb2 <xTaskResumeAll+0x8e>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8007fd6:	f7ff ff0b 	bl	8007df0 <xTaskIncrementTick>
 8007fda:	b100      	cbz	r0, 8007fde <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8007fdc:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	6023      	str	r3, [r4, #0]
 8007fe4:	e7f4      	b.n	8007fd0 <xTaskResumeAll+0xac>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fe6:	f7fe ff3f 	bl	8006e68 <vPortExitCritical>

	return xAlreadyYielded;
}
 8007fea:	4620      	mov	r0, r4
 8007fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ff0:	20042d7c 	.word	0x20042d7c
 8007ff4:	20042dd0 	.word	0x20042dd0
 8007ff8:	20042d90 	.word	0x20042d90
 8007ffc:	20042dd4 	.word	0x20042dd4
 8008000:	20042d80 	.word	0x20042d80
 8008004:	20042dd8 	.word	0x20042dd8
 8008008:	20042cec 	.word	0x20042cec
 800800c:	e000ed04 	.word	0xe000ed04
 8008010:	20042cf0 	.word	0x20042cf0

08008014 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008014:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008016:	b940      	cbnz	r0, 800802a <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8008018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801c:	4b18      	ldr	r3, [pc, #96]	; (8008080 <vTaskDelay+0x6c>)
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800802a:	4b16      	ldr	r3, [pc, #88]	; (8008084 <vTaskDelay+0x70>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	b153      	cbz	r3, 8008046 <vTaskDelay+0x32>
 8008030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008034:	b672      	cpsid	i
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	b662      	cpsie	i
 8008044:	e7fe      	b.n	8008044 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008046:	f7ff fec5 	bl	8007dd4 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800804a:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <vTaskDelay+0x74>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800804c:	4d0f      	ldr	r5, [pc, #60]	; (800808c <vTaskDelay+0x78>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8008052:	6828      	ldr	r0, [r5, #0]
 8008054:	3004      	adds	r0, #4
 8008056:	f7fe fe7b 	bl	8006d50 <uxListRemove>
 800805a:	b940      	cbnz	r0, 800806e <vTaskDelay+0x5a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	490c      	ldr	r1, [pc, #48]	; (8008090 <vTaskDelay+0x7c>)
 8008060:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008062:	2301      	movs	r3, #1
 8008064:	680a      	ldr	r2, [r1, #0]
 8008066:	4083      	lsls	r3, r0
 8008068:	ea22 0303 	bic.w	r3, r2, r3
 800806c:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800806e:	4620      	mov	r0, r4
 8008070:	f7ff fcd6 	bl	8007a20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008074:	f7ff ff56 	bl	8007f24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008078:	2800      	cmp	r0, #0
 800807a:	d0cd      	beq.n	8008018 <vTaskDelay+0x4>
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	bf00      	nop
 8008080:	e000ed04 	.word	0xe000ed04
 8008084:	20042d7c 	.word	0x20042d7c
 8008088:	20042d88 	.word	0x20042d88
 800808c:	20042d80 	.word	0x20042d80
 8008090:	20042dd4 	.word	0x20042dd4

08008094 <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8008094:	4d18      	ldr	r5, [pc, #96]	; (80080f8 <prvIdleTask+0x64>)
 8008096:	462e      	mov	r6, r5
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008098:	b580      	push	{r7, lr}
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800809a:	4f18      	ldr	r7, [pc, #96]	; (80080fc <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b1f3      	cbz	r3, 80080de <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 80080a0:	f7ff fe98 	bl	8007dd4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80080a4:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 80080a6:	f7ff ff3d 	bl	8007f24 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80080aa:	2c00      	cmp	r4, #0
 80080ac:	d0f6      	beq.n	800809c <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80080ae:	f7fe feb5 	bl	8006e1c <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80080b2:	4b12      	ldr	r3, [pc, #72]	; (80080fc <prvIdleTask+0x68>)
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80080b8:	1d20      	adds	r0, r4, #4
 80080ba:	f7fe fe49 	bl	8006d50 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80080be:	4a10      	ldr	r2, [pc, #64]	; (8008100 <prvIdleTask+0x6c>)
 80080c0:	6813      	ldr	r3, [r2, #0]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 80080c6:	6833      	ldr	r3, [r6, #0]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 80080cc:	f7fe fecc 	bl	8006e68 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 80080d0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80080d2:	f7ff f87f 	bl	80071d4 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 80080d6:	4620      	mov	r0, r4
 80080d8:	f7ff f87c 	bl	80071d4 <vPortFree>
 80080dc:	e7de      	b.n	800809c <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <prvIdleTask+0x70>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d9d9      	bls.n	800809a <prvIdleTask+0x6>
			{
				taskYIELD();
 80080e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ea:	4b07      	ldr	r3, [pc, #28]	; (8008108 <prvIdleTask+0x74>)
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	e7d0      	b.n	800809a <prvIdleTask+0x6>
 80080f8:	20042cc0 	.word	0x20042cc0
 80080fc:	20042cc4 	.word	0x20042cc4
 8008100:	20042dd0 	.word	0x20042dd0
 8008104:	20042cf0 	.word	0x20042cf0
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800810c:	4b18      	ldr	r3, [pc, #96]	; (8008170 <vTaskSwitchContext+0x64>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	4b18      	ldr	r3, [pc, #96]	; (8008174 <vTaskSwitchContext+0x68>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008112:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008114:	b10a      	cbz	r2, 800811a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008116:	2201      	movs	r2, #1
 8008118:	e027      	b.n	800816a <vTaskSwitchContext+0x5e>
	}
	else
	{
		xYieldPending = pdFALSE;
 800811a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800811c:	4b16      	ldr	r3, [pc, #88]	; (8008178 <vTaskSwitchContext+0x6c>)
 800811e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8008120:	fab3 f383 	clz	r3, r3
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2214      	movs	r2, #20
 8008128:	4914      	ldr	r1, [pc, #80]	; (800817c <vTaskSwitchContext+0x70>)
 800812a:	f1c3 031f 	rsb	r3, r3, #31
 800812e:	435a      	muls	r2, r3
 8008130:	588c      	ldr	r4, [r1, r2]
 8008132:	1888      	adds	r0, r1, r2
 8008134:	b954      	cbnz	r4, 800814c <vTaskSwitchContext+0x40>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	b672      	cpsid	i
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	b662      	cpsie	i
 800814a:	e7fe      	b.n	800814a <vTaskSwitchContext+0x3e>
 800814c:	6844      	ldr	r4, [r0, #4]
 800814e:	3208      	adds	r2, #8
 8008150:	6864      	ldr	r4, [r4, #4]
 8008152:	440a      	add	r2, r1
 8008154:	4294      	cmp	r4, r2
 8008156:	6044      	str	r4, [r0, #4]
 8008158:	bf04      	itt	eq
 800815a:	6862      	ldreq	r2, [r4, #4]
 800815c:	6042      	streq	r2, [r0, #4]
 800815e:	2214      	movs	r2, #20
 8008160:	fb02 1303 	mla	r3, r2, r3, r1
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	68da      	ldr	r2, [r3, #12]
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <vTaskSwitchContext+0x74>)
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	bd10      	pop	{r4, pc}
 800816e:	bf00      	nop
 8008170:	20042d7c 	.word	0x20042d7c
 8008174:	20042dd8 	.word	0x20042dd8
 8008178:	20042dd4 	.word	0x20042dd4
 800817c:	20042cf0 	.word	0x20042cf0
 8008180:	20042d80 	.word	0x20042d80

08008184 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8008188:	b950      	cbnz	r0, 80081a0 <vTaskPlaceOnEventList+0x1c>
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	b672      	cpsid	i
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	b662      	cpsie	i
 800819e:	e7fe      	b.n	800819e <vTaskPlaceOnEventList+0x1a>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081a0:	4c11      	ldr	r4, [pc, #68]	; (80081e8 <vTaskPlaceOnEventList+0x64>)
 80081a2:	6821      	ldr	r1, [r4, #0]
 80081a4:	3118      	adds	r1, #24
 80081a6:	f7fe fdbb 	bl	8006d20 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80081aa:	6820      	ldr	r0, [r4, #0]
 80081ac:	3004      	adds	r0, #4
 80081ae:	f7fe fdcf 	bl	8006d50 <uxListRemove>
 80081b2:	b940      	cbnz	r0, 80081c6 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	490d      	ldr	r1, [pc, #52]	; (80081ec <vTaskPlaceOnEventList+0x68>)
 80081b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80081ba:	2301      	movs	r3, #1
 80081bc:	680a      	ldr	r2, [r1, #0]
 80081be:	4083      	lsls	r3, r0
 80081c0:	ea22 0303 	bic.w	r3, r2, r3
 80081c4:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80081c6:	1c6b      	adds	r3, r5, #1
 80081c8:	d106      	bne.n	80081d8 <vTaskPlaceOnEventList+0x54>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80081ca:	6821      	ldr	r1, [r4, #0]
 80081cc:	4808      	ldr	r0, [pc, #32]	; (80081f0 <vTaskPlaceOnEventList+0x6c>)
 80081ce:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80081d4:	f7fe bd98 	b.w	8006d08 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 80081d8:	4b06      	ldr	r3, [pc, #24]	; (80081f4 <vTaskPlaceOnEventList+0x70>)
 80081da:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80081dc:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80081e2:	f7ff bc1d 	b.w	8007a20 <prvAddCurrentTaskToDelayedList>
 80081e6:	bf00      	nop
 80081e8:	20042d80 	.word	0x20042d80
 80081ec:	20042dd4 	.word	0x20042dd4
 80081f0:	20042cd8 	.word	0x20042cd8
 80081f4:	20042d88 	.word	0x20042d88

080081f8 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081f8:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081fa:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081fc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80081fe:	b954      	cbnz	r4, 8008216 <xTaskRemoveFromEventList+0x1e>
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	b672      	cpsid	i
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	b662      	cpsie	i
 8008214:	e7fe      	b.n	8008214 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008216:	f104 0518 	add.w	r5, r4, #24
 800821a:	4628      	mov	r0, r5
 800821c:	f7fe fd98 	bl	8006d50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008220:	4b11      	ldr	r3, [pc, #68]	; (8008268 <xTaskRemoveFromEventList+0x70>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	b983      	cbnz	r3, 8008248 <xTaskRemoveFromEventList+0x50>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8008226:	1d26      	adds	r6, r4, #4
 8008228:	4630      	mov	r0, r6
 800822a:	f7fe fd91 	bl	8006d50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800822e:	490f      	ldr	r1, [pc, #60]	; (800826c <xTaskRemoveFromEventList+0x74>)
 8008230:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8008232:	2301      	movs	r3, #1
 8008234:	680a      	ldr	r2, [r1, #0]
 8008236:	2014      	movs	r0, #20
 8008238:	40ab      	lsls	r3, r5
 800823a:	4313      	orrs	r3, r2
 800823c:	600b      	str	r3, [r1, #0]
 800823e:	4631      	mov	r1, r6
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <xTaskRemoveFromEventList+0x78>)
 8008242:	fb00 3005 	mla	r0, r0, r5, r3
 8008246:	e001      	b.n	800824c <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008248:	4629      	mov	r1, r5
 800824a:	480a      	ldr	r0, [pc, #40]	; (8008274 <xTaskRemoveFromEventList+0x7c>)
 800824c:	f7fe fd5c 	bl	8006d08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008250:	4b09      	ldr	r3, [pc, #36]	; (8008278 <xTaskRemoveFromEventList+0x80>)
 8008252:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	429a      	cmp	r2, r3
 800825a:	d903      	bls.n	8008264 <xTaskRemoveFromEventList+0x6c>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800825c:	2001      	movs	r0, #1
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <xTaskRemoveFromEventList+0x84>)
 8008260:	6018      	str	r0, [r3, #0]
 8008262:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		xReturn = pdFALSE;
 8008264:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8008266:	bd70      	pop	{r4, r5, r6, pc}
 8008268:	20042d7c 	.word	0x20042d7c
 800826c:	20042dd4 	.word	0x20042dd4
 8008270:	20042cf0 	.word	0x20042cf0
 8008274:	20042d90 	.word	0x20042d90
 8008278:	20042d80 	.word	0x20042d80
 800827c:	20042dd8 	.word	0x20042dd8

08008280 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008280:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8008282:	b908      	cbnz	r0, 8008288 <vTaskSetTimeOutState+0x8>
 8008284:	f7ff fcd6 	bl	8007c34 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008288:	4b03      	ldr	r3, [pc, #12]	; (8008298 <vTaskSetTimeOutState+0x18>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800828e:	4b03      	ldr	r3, [pc, #12]	; (800829c <vTaskSetTimeOutState+0x1c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6043      	str	r3, [r0, #4]
 8008294:	bd08      	pop	{r3, pc}
 8008296:	bf00      	nop
 8008298:	20042cb4 	.word	0x20042cb4
 800829c:	20042d88 	.word	0x20042d88

080082a0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082a0:	b538      	push	{r3, r4, r5, lr}
 80082a2:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082a4:	4604      	mov	r4, r0
 80082a6:	b950      	cbnz	r0, 80082be <xTaskCheckForTimeOut+0x1e>
 80082a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ac:	b672      	cpsid	i
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	b662      	cpsie	i
 80082bc:	e7fe      	b.n	80082bc <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80082be:	b951      	cbnz	r1, 80082d6 <xTaskCheckForTimeOut+0x36>
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	e7fe      	b.n	80082d4 <xTaskCheckForTimeOut+0x34>

	taskENTER_CRITICAL();
 80082d6:	f7fe fda1 	bl	8006e1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082da:	4b0e      	ldr	r3, [pc, #56]	; (8008314 <xTaskCheckForTimeOut+0x74>)
 80082dc:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 80082de:	682b      	ldr	r3, [r5, #0]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	d010      	beq.n	8008306 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082e4:	4a0c      	ldr	r2, [pc, #48]	; (8008318 <xTaskCheckForTimeOut+0x78>)
 80082e6:	6820      	ldr	r0, [r4, #0]
 80082e8:	6812      	ldr	r2, [r2, #0]
 80082ea:	4290      	cmp	r0, r2
 80082ec:	6862      	ldr	r2, [r4, #4]
 80082ee:	d001      	beq.n	80082f4 <xTaskCheckForTimeOut+0x54>
 80082f0:	4291      	cmp	r1, r2
 80082f2:	d20a      	bcs.n	800830a <xTaskCheckForTimeOut+0x6a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80082f4:	1a88      	subs	r0, r1, r2
 80082f6:	4283      	cmp	r3, r0
 80082f8:	d907      	bls.n	800830a <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80082fa:	1a52      	subs	r2, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
 80082fc:	4620      	mov	r0, r4
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80082fe:	4413      	add	r3, r2
 8008300:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8008302:	f7ff ffbd 	bl	8008280 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8008306:	2400      	movs	r4, #0
 8008308:	e000      	b.n	800830c <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 800830a:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 800830c:	f7fe fdac 	bl	8006e68 <vPortExitCritical>

	return xReturn;
}
 8008310:	4620      	mov	r0, r4
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20042d88 	.word	0x20042d88
 8008318:	20042cb4 	.word	0x20042cb4

0800831c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 800831c:	2201      	movs	r2, #1
 800831e:	4b01      	ldr	r3, [pc, #4]	; (8008324 <vTaskMissedYield+0x8>)
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	4770      	bx	lr
 8008324:	20042dd8 	.word	0x20042dd8

08008328 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <xTaskGetSchedulerState+0x18>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	b133      	cbz	r3, 800833c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <xTaskGetSchedulerState+0x1c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008334:	bf0c      	ite	eq
 8008336:	2002      	moveq	r0, #2
 8008338:	2000      	movne	r0, #0
 800833a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800833c:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 800833e:	4770      	bx	lr
 8008340:	20042cbc 	.word	0x20042cbc
 8008344:	20042d7c 	.word	0x20042d7c

08008348 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800834c:	4604      	mov	r4, r0
 800834e:	2800      	cmp	r0, #0
 8008350:	d038      	beq.n	80083c4 <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008352:	4d1d      	ldr	r5, [pc, #116]	; (80083c8 <vTaskPriorityInherit+0x80>)
 8008354:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008356:	682a      	ldr	r2, [r5, #0]
 8008358:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800835a:	4293      	cmp	r3, r2
 800835c:	d232      	bcs.n	80083c4 <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800835e:	6982      	ldr	r2, [r0, #24]
 8008360:	2a00      	cmp	r2, #0
 8008362:	db04      	blt.n	800836e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008364:	682a      	ldr	r2, [r5, #0]
 8008366:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008368:	f1c2 0207 	rsb	r2, r2, #7
 800836c:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800836e:	4e17      	ldr	r6, [pc, #92]	; (80083cc <vTaskPriorityInherit+0x84>)
 8008370:	2714      	movs	r7, #20
 8008372:	6962      	ldr	r2, [r4, #20]
 8008374:	fb07 6303 	mla	r3, r7, r3, r6
 8008378:	429a      	cmp	r2, r3
 800837a:	d120      	bne.n	80083be <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800837c:	f104 0804 	add.w	r8, r4, #4
 8008380:	4640      	mov	r0, r8
 8008382:	f7fe fce5 	bl	8006d50 <uxListRemove>
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <vTaskPriorityInherit+0x88>)
 8008388:	b948      	cbnz	r0, 800839e <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800838a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800838c:	4347      	muls	r7, r0
 800838e:	59f2      	ldr	r2, [r6, r7]
 8008390:	b92a      	cbnz	r2, 800839e <vTaskPriorityInherit+0x56>
 8008392:	2201      	movs	r2, #1
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	4082      	lsls	r2, r0
 8008398:	ea21 0202 	bic.w	r2, r1, r2
 800839c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800839e:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80083a0:	2001      	movs	r0, #1
 80083a2:	4641      	mov	r1, r8
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80083a6:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80083a8:	4090      	lsls	r0, r2
 80083aa:	681c      	ldr	r4, [r3, #0]
 80083ac:	4320      	orrs	r0, r4
 80083ae:	6018      	str	r0, [r3, #0]
 80083b0:	2014      	movs	r0, #20
 80083b2:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 80083ba:	f7fe bca5 	b.w	8006d08 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083be:	682b      	ldr	r3, [r5, #0]
 80083c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	20042d80 	.word	0x20042d80
 80083cc:	20042cf0 	.word	0x20042cf0
 80083d0:	20042dd4 	.word	0x20042dd4

080083d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 80083d6:	4604      	mov	r4, r0
 80083d8:	b908      	cbnz	r0, 80083de <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 80083da:	2000      	movs	r0, #0
 80083dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80083de:	4b24      	ldr	r3, [pc, #144]	; (8008470 <xTaskPriorityDisinherit+0x9c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4298      	cmp	r0, r3
 80083e4:	d00a      	beq.n	80083fc <xTaskPriorityDisinherit+0x28>
 80083e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ea:	b672      	cpsid	i
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	b662      	cpsie	i
 80083fa:	e7fe      	b.n	80083fa <xTaskPriorityDisinherit+0x26>

			configASSERT( pxTCB->uxMutexesHeld );
 80083fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80083fe:	b953      	cbnz	r3, 8008416 <xTaskPriorityDisinherit+0x42>
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	b672      	cpsid	i
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	b662      	cpsie	i
 8008414:	e7fe      	b.n	8008414 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008416:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8008418:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800841a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800841c:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800841e:	4291      	cmp	r1, r2
 8008420:	d0db      	beq.n	80083da <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1d9      	bne.n	80083da <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8008426:	1d05      	adds	r5, r0, #4
 8008428:	4e12      	ldr	r6, [pc, #72]	; (8008474 <xTaskPriorityDisinherit+0xa0>)
 800842a:	4628      	mov	r0, r5
 800842c:	f7fe fc90 	bl	8006d50 <uxListRemove>
 8008430:	4a11      	ldr	r2, [pc, #68]	; (8008478 <xTaskPriorityDisinherit+0xa4>)
 8008432:	b950      	cbnz	r0, 800844a <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008434:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008436:	2114      	movs	r1, #20
 8008438:	4379      	muls	r1, r7
 800843a:	5873      	ldr	r3, [r6, r1]
 800843c:	b92b      	cbnz	r3, 800844a <xTaskPriorityDisinherit+0x76>
 800843e:	2301      	movs	r3, #1
 8008440:	6810      	ldr	r0, [r2, #0]
 8008442:	40bb      	lsls	r3, r7
 8008444:	ea20 0303 	bic.w	r3, r0, r3
 8008448:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800844a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 800844c:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800844e:	f1c3 0107 	rsb	r1, r3, #7
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008452:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008454:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008456:	2401      	movs	r4, #1
 8008458:	fa04 f103 	lsl.w	r1, r4, r3
 800845c:	4308      	orrs	r0, r1
 800845e:	4629      	mov	r1, r5
 8008460:	6010      	str	r0, [r2, #0]
 8008462:	2014      	movs	r0, #20
 8008464:	fb00 6003 	mla	r0, r0, r3, r6
 8008468:	f7fe fc4e 	bl	8006d08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800846c:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800846e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008470:	20042d80 	.word	0x20042d80
 8008474:	20042cf0 	.word	0x20042cf0
 8008478:	20042dd4 	.word	0x20042dd4

0800847c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800847c:	4b04      	ldr	r3, [pc, #16]	; (8008490 <pvTaskIncrementMutexHeldCount+0x14>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	b11a      	cbz	r2, 800848a <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008482:	6819      	ldr	r1, [r3, #0]
 8008484:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008486:	3201      	adds	r2, #1
 8008488:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800848a:	6818      	ldr	r0, [r3, #0]
	}
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	20042d80 	.word	0x20042d80

08008494 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BaseType_t xReturn;

		taskENTER_CRITICAL();
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 8008498:	4c2c      	ldr	r4, [pc, #176]	; (800854c <xTaskNotifyWait+0xb8>)
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800849a:	461e      	mov	r6, r3
 800849c:	4605      	mov	r5, r0
 800849e:	460f      	mov	r7, r1
 80084a0:	4690      	mov	r8, r2
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80084a2:	f7fe fcbb 	bl	8006e1c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d02b      	beq.n	8008508 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80084b4:	ea23 0005 	bic.w	r0, r3, r5

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80084b8:	2501      	movs	r5, #1
			if( pxCurrentTCB->eNotifyState != eNotified )
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80084ba:	6550      	str	r0, [r2, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	f883 5058 	strb.w	r5, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80084c2:	b30e      	cbz	r6, 8008508 <xTaskNotifyWait+0x74>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	3004      	adds	r0, #4
 80084c8:	f7fe fc42 	bl	8006d50 <uxListRemove>
 80084cc:	b938      	cbnz	r0, 80084de <xTaskNotifyWait+0x4a>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80084ce:	6821      	ldr	r1, [r4, #0]
 80084d0:	4a1f      	ldr	r2, [pc, #124]	; (8008550 <xTaskNotifyWait+0xbc>)
 80084d2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80084d4:	6813      	ldr	r3, [r2, #0]
 80084d6:	408d      	lsls	r5, r1
 80084d8:	ea23 0505 	bic.w	r5, r3, r5
 80084dc:	6015      	str	r5, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 80084de:	1c73      	adds	r3, r6, #1
 80084e0:	d105      	bne.n	80084ee <xTaskNotifyWait+0x5a>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80084e2:	6821      	ldr	r1, [r4, #0]
 80084e4:	481b      	ldr	r0, [pc, #108]	; (8008554 <xTaskNotifyWait+0xc0>)
 80084e6:	3104      	adds	r1, #4
 80084e8:	f7fe fc0e 	bl	8006d08 <vListInsertEnd>
 80084ec:	e004      	b.n	80084f8 <xTaskNotifyWait+0x64>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 80084ee:	4b1a      	ldr	r3, [pc, #104]	; (8008558 <xTaskNotifyWait+0xc4>)
 80084f0:	6818      	ldr	r0, [r3, #0]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 80084f2:	4430      	add	r0, r6
 80084f4:	f7ff fa94 	bl	8007a20 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80084f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084fc:	4b17      	ldr	r3, [pc, #92]	; (800855c <xTaskNotifyWait+0xc8>)
 80084fe:	601a      	str	r2, [r3, #0]
 8008500:	f3bf 8f4f 	dsb	sy
 8008504:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008508:	f7fe fcae 	bl	8006e68 <vPortExitCritical>

		taskENTER_CRITICAL();
 800850c:	f7fe fc86 	bl	8006e1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008510:	f1b8 0f00 	cmp.w	r8, #0
 8008514:	d003      	beq.n	800851e <xTaskNotifyWait+0x8a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851a:	f8c8 3000 	str.w	r3, [r8]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008524:	2b01      	cmp	r3, #1
 8008526:	d007      	beq.n	8008538 <xTaskNotifyWait+0xa4>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008528:	4b08      	ldr	r3, [pc, #32]	; (800854c <xTaskNotifyWait+0xb8>)
				xReturn = pdTRUE;
 800852a:	2501      	movs	r5, #1
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008530:	ea21 0107 	bic.w	r1, r1, r7
 8008534:	6559      	str	r1, [r3, #84]	; 0x54
 8008536:	e000      	b.n	800853a <xTaskNotifyWait+0xa6>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008538:	2500      	movs	r5, #0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8008542:	f7fe fc91 	bl	8006e68 <vPortExitCritical>

		return xReturn;
	}
 8008546:	4628      	mov	r0, r5
 8008548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800854c:	20042d80 	.word	0x20042d80
 8008550:	20042dd4 	.word	0x20042dd4
 8008554:	20042cd8 	.word	0x20042cd8
 8008558:	20042d88 	.word	0x20042d88
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	460f      	mov	r7, r1
 8008564:	4616      	mov	r6, r2
 8008566:	461d      	mov	r5, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 8008568:	4604      	mov	r4, r0
 800856a:	b950      	cbnz	r0, 8008582 <xTaskGenericNotify+0x22>
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	b672      	cpsid	i
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	b662      	cpsie	i
 8008580:	e7fe      	b.n	8008580 <xTaskGenericNotify+0x20>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8008582:	f7fe fc4b 	bl	8006e1c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008586:	b10d      	cbz	r5, 800858c <xTaskGenericNotify+0x2c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008588:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800858a:	602b      	str	r3, [r5, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800858c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58

			pxTCB->eNotifyState = eNotified;
 8008590:	2302      	movs	r3, #2

			switch( eAction )
 8008592:	1e72      	subs	r2, r6, #1
			if( pulPreviousNotificationValue != NULL )
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8008594:	b2ed      	uxtb	r5, r5

			pxTCB->eNotifyState = eNotified;
 8008596:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

			switch( eAction )
 800859a:	2a03      	cmp	r2, #3
 800859c:	d80d      	bhi.n	80085ba <xTaskGenericNotify+0x5a>
 800859e:	e8df f002 	tbb	[pc, r2]
 80085a2:	0502      	.short	0x0502
 80085a4:	090b      	.short	0x090b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80085a6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80085a8:	430f      	orrs	r7, r1
 80085aa:	e005      	b.n	80085b8 <xTaskGenericNotify+0x58>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80085ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80085ae:	3301      	adds	r3, #1
 80085b0:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 80085b2:	e002      	b.n	80085ba <xTaskGenericNotify+0x5a>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80085b4:	2d02      	cmp	r5, #2
 80085b6:	d032      	beq.n	800861e <xTaskGenericNotify+0xbe>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80085b8:	6567      	str	r7, [r4, #84]	; 0x54

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80085ba:	2d01      	cmp	r5, #1
 80085bc:	d001      	beq.n	80085c2 <xTaskGenericNotify+0x62>
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80085be:	2501      	movs	r5, #1
 80085c0:	e02e      	b.n	8008620 <xTaskGenericNotify+0xc0>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80085c2:	1d26      	adds	r6, r4, #4
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7fe fbc3 	bl	8006d50 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80085ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80085cc:	4916      	ldr	r1, [pc, #88]	; (8008628 <xTaskGenericNotify+0xc8>)
 80085ce:	fa05 f002 	lsl.w	r0, r5, r2
 80085d2:	680b      	ldr	r3, [r1, #0]
 80085d4:	4303      	orrs	r3, r0
 80085d6:	2014      	movs	r0, #20
 80085d8:	600b      	str	r3, [r1, #0]
 80085da:	4631      	mov	r1, r6
 80085dc:	4b13      	ldr	r3, [pc, #76]	; (800862c <xTaskGenericNotify+0xcc>)
 80085de:	fb00 3002 	mla	r0, r0, r2, r3
 80085e2:	f7fe fb91 	bl	8006d08 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80085e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085e8:	b153      	cbz	r3, 8008600 <xTaskGenericNotify+0xa0>
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	b672      	cpsid	i
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	b662      	cpsie	i
 80085fe:	e7fe      	b.n	80085fe <xTaskGenericNotify+0x9e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008600:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <xTaskGenericNotify+0xd0>)
 8008602:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	429a      	cmp	r2, r3
 800860a:	d9d8      	bls.n	80085be <xTaskGenericNotify+0x5e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800860c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008610:	4b08      	ldr	r3, [pc, #32]	; (8008634 <xTaskGenericNotify+0xd4>)
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	e000      	b.n	8008620 <xTaskGenericNotify+0xc0>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 800861e:	2500      	movs	r5, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008620:	f7fe fc22 	bl	8006e68 <vPortExitCritical>

		return xReturn;
	}
 8008624:	4628      	mov	r0, r5
 8008626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008628:	20042dd4 	.word	0x20042dd4
 800862c:	20042cf0 	.word	0x20042cf0
 8008630:	20042d80 	.word	0x20042d80
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800863c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008640:	4689      	mov	r9, r1
 8008642:	4616      	mov	r6, r2
 8008644:	461d      	mov	r5, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008646:	4604      	mov	r4, r0
 8008648:	b950      	cbnz	r0, 8008660 <xTaskGenericNotifyFromISR+0x28>
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	b672      	cpsid	i
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	b662      	cpsie	i
 800865e:	e7fe      	b.n	800865e <xTaskGenericNotifyFromISR+0x26>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008660:	f7fe fccc 	bl	8006ffc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008664:	f3ef 8711 	mrs	r7, BASEPRI
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	b672      	cpsid	i
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	b662      	cpsie	i

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
 800867c:	b10d      	cbz	r5, 8008682 <xTaskGenericNotifyFromISR+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800867e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008680:	602b      	str	r3, [r5, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8008682:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
			pxTCB->eNotifyState = eNotified;
 8008686:	2302      	movs	r3, #2

			switch( eAction )
 8008688:	1e72      	subs	r2, r6, #1
			if( pulPreviousNotificationValue != NULL )
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800868a:	b2ed      	uxtb	r5, r5
			pxTCB->eNotifyState = eNotified;
 800868c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

			switch( eAction )
 8008690:	2a03      	cmp	r2, #3
 8008692:	d810      	bhi.n	80086b6 <xTaskGenericNotifyFromISR+0x7e>
 8008694:	e8df f002 	tbb	[pc, r2]
 8008698:	0b0d0702 	.word	0x0b0d0702
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800869c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800869e:	ea41 0109 	orr.w	r1, r1, r9
 80086a2:	6561      	str	r1, [r4, #84]	; 0x54
					break;
 80086a4:	e007      	b.n	80086b6 <xTaskGenericNotifyFromISR+0x7e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80086a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80086a8:	3301      	adds	r3, #1
 80086aa:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 80086ac:	e003      	b.n	80086b6 <xTaskGenericNotifyFromISR+0x7e>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80086ae:	2d02      	cmp	r5, #2
 80086b0:	d037      	beq.n	8008722 <xTaskGenericNotifyFromISR+0xea>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80086b2:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80086b6:	2d01      	cmp	r5, #1
 80086b8:	d001      	beq.n	80086be <xTaskGenericNotifyFromISR+0x86>
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80086ba:	2001      	movs	r0, #1
 80086bc:	e032      	b.n	8008724 <xTaskGenericNotifyFromISR+0xec>
			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80086be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086c0:	b153      	cbz	r3, 80086d8 <xTaskGenericNotifyFromISR+0xa0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	b672      	cpsid	i
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	b662      	cpsie	i
 80086d6:	e7fe      	b.n	80086d6 <xTaskGenericNotifyFromISR+0x9e>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086d8:	4b14      	ldr	r3, [pc, #80]	; (800872c <xTaskGenericNotifyFromISR+0xf4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	b97b      	cbnz	r3, 80086fe <xTaskGenericNotifyFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80086de:	1d26      	adds	r6, r4, #4
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7fe fb35 	bl	8006d50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086e6:	4912      	ldr	r1, [pc, #72]	; (8008730 <xTaskGenericNotifyFromISR+0xf8>)
 80086e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80086ea:	2014      	movs	r0, #20
 80086ec:	680b      	ldr	r3, [r1, #0]
 80086ee:	4095      	lsls	r5, r2
 80086f0:	431d      	orrs	r5, r3
 80086f2:	4b10      	ldr	r3, [pc, #64]	; (8008734 <xTaskGenericNotifyFromISR+0xfc>)
 80086f4:	600d      	str	r5, [r1, #0]
 80086f6:	4631      	mov	r1, r6
 80086f8:	fb00 3002 	mla	r0, r0, r2, r3
 80086fc:	e002      	b.n	8008704 <xTaskGenericNotifyFromISR+0xcc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80086fe:	f104 0118 	add.w	r1, r4, #24
 8008702:	480d      	ldr	r0, [pc, #52]	; (8008738 <xTaskGenericNotifyFromISR+0x100>)
 8008704:	f7fe fb00 	bl	8006d08 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008708:	4b0c      	ldr	r3, [pc, #48]	; (800873c <xTaskGenericNotifyFromISR+0x104>)
 800870a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008710:	429a      	cmp	r2, r3
 8008712:	d9d2      	bls.n	80086ba <xTaskGenericNotifyFromISR+0x82>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008714:	f1b8 0f00 	cmp.w	r8, #0
 8008718:	d0cf      	beq.n	80086ba <xTaskGenericNotifyFromISR+0x82>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800871a:	2001      	movs	r0, #1
 800871c:	f8c8 0000 	str.w	r0, [r8]
 8008720:	e000      	b.n	8008724 <xTaskGenericNotifyFromISR+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 8008722:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008724:	f387 8811 	msr	BASEPRI, r7
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
 8008728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872c:	20042d7c 	.word	0x20042d7c
 8008730:	20042dd4 	.word	0x20042dd4
 8008734:	20042cf0 	.word	0x20042cf0
 8008738:	20042d90 	.word	0x20042d90
 800873c:	20042d80 	.word	0x20042d80

08008740 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008740:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008742:	b160      	cbz	r0, 800875e <netconn_close_shutdown+0x1e>
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 8008744:	2329      	movs	r3, #41	; 0x29
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 8008746:	9001      	str	r0, [sp, #4]
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_close, err);
 8008748:	a806      	add	r0, sp, #24

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.msg.sd.shut = how;
 800874a:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 800874e:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_close, err);
 8008752:	4b05      	ldr	r3, [pc, #20]	; (8008768 <netconn_close_shutdown+0x28>)
 8008754:	f840 3d18 	str.w	r3, [r0, #-24]!
 8008758:	f001 f822 	bl	80097a0 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 800875c:	e001      	b.n	8008762 <netconn_close_shutdown+0x22>
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800875e:	f06f 000e 	mvn.w	r0, #14
#endif /* LWIP_TCP */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_close, err);
  API_MSG_VAR_FREE(msg);

  return err;
}
 8008762:	b007      	add	sp, #28
 8008764:	f85d fb04 	ldr.w	pc, [sp], #4
 8008768:	080095f1 	.word	0x080095f1

0800876c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800876c:	b570      	push	{r4, r5, r6, lr}
  void *buf = NULL;
 800876e:	2300      	movs	r3, #0
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8008770:	b088      	sub	sp, #32
 8008772:	4604      	mov	r4, r0
  err_t err;
#if LWIP_TCP
  API_MSG_VAR_DECLARE(msg);
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008774:	460e      	mov	r6, r1
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  void *buf = NULL;
 8008776:	9301      	str	r3, [sp, #4]
  err_t err;
#if LWIP_TCP
  API_MSG_VAR_DECLARE(msg);
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008778:	b911      	cbnz	r1, 8008780 <netconn_recv_data+0x14>
 800877a:	f06f 000e 	mvn.w	r0, #14
 800877e:	e05b      	b.n	8008838 <netconn_recv_data+0xcc>
  *new_buf = NULL;
 8008780:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008782:	2800      	cmp	r0, #0
 8008784:	d0f9      	beq.n	800877a <netconn_recv_data+0xe>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008786:	4605      	mov	r5, r0
 8008788:	f815 3b10 	ldrb.w	r3, [r5], #16
 800878c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008790:	2b10      	cmp	r3, #16
 8008792:	d10c      	bne.n	80087ae <netconn_recv_data+0x42>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8008794:	4628      	mov	r0, r5
 8008796:	f005 fdbe 	bl	800e316 <sys_mbox_valid>
 800879a:	b940      	cbnz	r0, 80087ae <netconn_recv_data+0x42>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800879c:	f104 0014 	add.w	r0, r4, #20
 80087a0:	f005 fdb9 	bl	800e316 <sys_mbox_valid>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d042      	beq.n	800882e <netconn_recv_data+0xc2>
 80087a8:	f06f 000a 	mvn.w	r0, #10
 80087ac:	e044      	b.n	8008838 <netconn_recv_data+0xcc>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80087ae:	4628      	mov	r0, r5
 80087b0:	f005 fdb1 	bl	800e316 <sys_mbox_valid>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d0f7      	beq.n	80087a8 <netconn_recv_data+0x3c>

  err = conn->last_err;
 80087b8:	f994 0008 	ldrsb.w	r0, [r4, #8]
  if (ERR_IS_FATAL(err)) {
 80087bc:	f110 0f0b 	cmn.w	r0, #11
 80087c0:	db3a      	blt.n	8008838 <netconn_recv_data+0xcc>
       before the fatal error occurred - is that a problem? */
    return err;
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80087c2:	69a2      	ldr	r2, [r4, #24]
 80087c4:	a901      	add	r1, sp, #4
 80087c6:	4628      	mov	r0, r5
 80087c8:	f005 fd70 	bl	800e2ac <sys_arch_mbox_fetch>
 80087cc:	3001      	adds	r0, #1
 80087ce:	d031      	beq.n	8008834 <netconn_recv_data+0xc8>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80087d0:	7823      	ldrb	r3, [r4, #0]
 80087d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	9b01      	ldr	r3, [sp, #4]
 80087da:	d11d      	bne.n	8008818 <netconn_recv_data+0xac>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
 80087dc:	7f22      	ldrb	r2, [r4, #28]
 80087de:	0712      	lsls	r2, r2, #28
 80087e0:	d500      	bpl.n	80087e4 <netconn_recv_data+0x78>
 80087e2:	b95b      	cbnz	r3, 80087fc <netconn_recv_data+0x90>
      /* Let the stack know that we have taken the data. */
      /* TODO: Speedup: Don't block and wait for the answer here
         (to prevent multiple thread-switches). */
      API_MSG_VAR_ALLOC_DONTFAIL(msg);
      API_MSG_VAR_REF(msg).msg.conn = conn;
 80087e4:	9403      	str	r4, [sp, #12]
      if (buf != NULL) {
 80087e6:	b10b      	cbz	r3, 80087ec <netconn_recv_data+0x80>
        API_MSG_VAR_REF(msg).msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
 80087e8:	891b      	ldrh	r3, [r3, #8]
 80087ea:	e000      	b.n	80087ee <netconn_recv_data+0x82>
      } else {
        API_MSG_VAR_REF(msg).msg.msg.r.len = 1;
 80087ec:	2301      	movs	r3, #1
 80087ee:	9305      	str	r3, [sp, #20]
      }
      /* don't care for the return value of lwip_netconn_do_recv */
      TCPIP_APIMSG_NOERR(&API_MSG_VAR_REF(msg), lwip_netconn_do_recv);
 80087f0:	a808      	add	r0, sp, #32
 80087f2:	4b12      	ldr	r3, [pc, #72]	; (800883c <netconn_recv_data+0xd0>)
 80087f4:	f840 3d18 	str.w	r3, [r0, #-24]!
 80087f8:	f000 ffd2 	bl	80097a0 <tcpip_apimsg>
      API_MSG_VAR_FREE(msg);
    }

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 80087fc:	9a01      	ldr	r2, [sp, #4]
 80087fe:	b94a      	cbnz	r2, 8008814 <netconn_recv_data+0xa8>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008800:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008802:	b113      	cbz	r3, 800880a <netconn_recv_data+0x9e>
 8008804:	2101      	movs	r1, #1
 8008806:	4620      	mov	r0, r4
 8008808:	4798      	blx	r3
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800880a:	2101      	movs	r1, #1
 800880c:	4620      	mov	r0, r4
 800880e:	f7ff ff97 	bl	8008740 <netconn_close_shutdown>
 8008812:	e00c      	b.n	800882e <netconn_recv_data+0xc2>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008814:	8912      	ldrh	r2, [r2, #8]
 8008816:	e001      	b.n	800881c <netconn_recv_data+0xb0>
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
    len = netbuf_len((struct netbuf *)buf);
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	891a      	ldrh	r2, [r3, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800881c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800881e:	b113      	cbz	r3, 8008826 <netconn_recv_data+0xba>
 8008820:	2101      	movs	r1, #1
 8008822:	4620      	mov	r0, r4
 8008824:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008826:	9b01      	ldr	r3, [sp, #4]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008828:	2000      	movs	r0, #0
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800882a:	6033      	str	r3, [r6, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800882c:	e004      	b.n	8008838 <netconn_recv_data+0xcc>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800882e:	f06f 000d 	mvn.w	r0, #13
 8008832:	e001      	b.n	8008838 <netconn_recv_data+0xcc>
    return err;
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
    return ERR_TIMEOUT;
 8008834:	f06f 0002 	mvn.w	r0, #2
  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
}
 8008838:	b008      	add	sp, #32
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	0800954d 	.word	0x0800954d

08008840 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	460d      	mov	r5, r1
 8008844:	b086      	sub	sp, #24
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);

  conn = netconn_alloc(t, callback);
 8008846:	4611      	mov	r1, r2
 8008848:	f000 fc36 	bl	80090b8 <netconn_alloc>
  if (conn != NULL) {
 800884c:	4604      	mov	r4, r0
 800884e:	b308      	cbz	r0, 8008894 <netconn_new_with_proto_and_callback+0x54>
    err_t err;
    API_MSG_VAR_ALLOC_DONTFAIL(msg);
    API_MSG_VAR_REF(msg).msg.msg.n.proto = proto;
    API_MSG_VAR_REF(msg).msg.conn = conn;
 8008850:	9001      	str	r0, [sp, #4]
    TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_newconn, err);
 8008852:	a806      	add	r0, sp, #24
 8008854:	4b12      	ldr	r3, [pc, #72]	; (80088a0 <netconn_new_with_proto_and_callback+0x60>)

  conn = netconn_alloc(t, callback);
  if (conn != NULL) {
    err_t err;
    API_MSG_VAR_ALLOC_DONTFAIL(msg);
    API_MSG_VAR_REF(msg).msg.msg.n.proto = proto;
 8008856:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).msg.conn = conn;
    TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_newconn, err);
 800885a:	f840 3d18 	str.w	r3, [r0, #-24]!
 800885e:	f000 ff9f 	bl	80097a0 <tcpip_apimsg>
    API_MSG_VAR_FREE(msg);
    if (err != ERR_OK) {
 8008862:	b1c8      	cbz	r0, 8008898 <netconn_new_with_proto_and_callback+0x58>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008864:	f104 0510 	add.w	r5, r4, #16
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008868:	f104 060c 	add.w	r6, r4, #12
    API_MSG_VAR_REF(msg).msg.conn = conn;
    TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_newconn, err);
    API_MSG_VAR_FREE(msg);
    if (err != ERR_OK) {
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800886c:	4628      	mov	r0, r5
 800886e:	f005 fd52 	bl	800e316 <sys_mbox_valid>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008872:	f104 0014 	add.w	r0, r4, #20
 8008876:	f005 fd4e 	bl	800e316 <sys_mbox_valid>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800887a:	4630      	mov	r0, r6
 800887c:	f005 fd9a 	bl	800e3b4 <sys_sem_valid>
      sys_sem_free(&conn->op_completed);
 8008880:	4630      	mov	r0, r6
 8008882:	f005 fd94 	bl	800e3ae <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008886:	4628      	mov	r0, r5
 8008888:	f005 fce5 	bl	800e256 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800888c:	4621      	mov	r1, r4
 800888e:	2005      	movs	r0, #5
 8008890:	f002 fb4e 	bl	800af30 <memp_free>
      return NULL;
 8008894:	2000      	movs	r0, #0
 8008896:	e000      	b.n	800889a <netconn_new_with_proto_and_callback+0x5a>
 8008898:	4620      	mov	r0, r4
    }
  }
  return conn;
}
 800889a:	b006      	add	sp, #24
 800889c:	bd70      	pop	{r4, r5, r6, pc}
 800889e:	bf00      	nop
 80088a0:	08009039 	.word	0x08009039

080088a4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80088a4:	b530      	push	{r4, r5, lr}
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80088a6:	4605      	mov	r5, r0
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80088a8:	b087      	sub	sp, #28
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80088aa:	b178      	cbz	r0, 80088cc <netconn_delete+0x28>
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 80088ac:	2329      	movs	r3, #41	; 0x29
  if (conn == NULL) {
    return ERR_OK;
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 80088ae:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_delconn, err);
 80088b0:	a806      	add	r0, sp, #24
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 80088b2:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_delconn, err);
 80088b6:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <netconn_delete+0x30>)
 80088b8:	f840 3d18 	str.w	r3, [r0, #-24]!
 80088bc:	f000 ff70 	bl	80097a0 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80088c0:	4604      	mov	r4, r0
 80088c2:	b920      	cbnz	r0, 80088ce <netconn_delete+0x2a>
    return err;
  }

  netconn_free(conn);
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 fc2f 	bl	8009128 <netconn_free>
 80088ca:	e000      	b.n	80088ce <netconn_delete+0x2a>
 80088cc:	e000      	b.n	80088d0 <netconn_delete+0x2c>
 80088ce:	4620      	mov	r0, r4

  return ERR_OK;
}
 80088d0:	b007      	add	sp, #28
 80088d2:	bd30      	pop	{r4, r5, pc}
 80088d4:	0800928b 	.word	0x0800928b

080088d8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80088d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80088da:	b150      	cbz	r0, 80088f2 <netconn_bind+0x1a>
#if LWIP_MPU_COMPATIBLE
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
 80088dc:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_bind, err);
 80088de:	a806      	add	r0, sp, #24
 80088e0:	4b06      	ldr	r3, [pc, #24]	; (80088fc <netconn_bind+0x24>)
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80088e2:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_bind, err);
 80088e4:	f840 3d18 	str.w	r3, [r0, #-24]!
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
 80088e8:	f8ad 2010 	strh.w	r2, [sp, #16]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_bind, err);
 80088ec:	f000 ff58 	bl	80097a0 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 80088f0:	e001      	b.n	80088f6 <netconn_bind+0x1e>
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80088f2:	f06f 000e 	mvn.w	r0, #14
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_bind, err);
  API_MSG_VAR_FREE(msg);

  return err;
}
 80088f6:	b007      	add	sp, #28
 80088f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80088fc:	08009329 	.word	0x08009329

08008900 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008900:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008902:	b150      	cbz	r0, 800891a <netconn_connect+0x1a>
#if LWIP_MPU_COMPATIBLE
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
 8008904:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
 8008906:	a806      	add	r0, sp, #24
 8008908:	4b06      	ldr	r3, [pc, #24]	; (8008924 <netconn_connect+0x24>)
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800890a:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
 800890c:	f840 3d18 	str.w	r3, [r0, #-24]!
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
 8008910:	f8ad 2010 	strh.w	r2, [sp, #16]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
 8008914:	f000 ff44 	bl	80097a0 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 8008918:	e001      	b.n	800891e <netconn_connect+0x1e>
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800891a:	f06f 000e 	mvn.w	r0, #14
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
  API_MSG_VAR_FREE(msg);

  return err;
}
 800891e:	b007      	add	sp, #28
 8008920:	f85d fb04 	ldr.w	pc, [sp], #4
 8008924:	08009385 	.word	0x08009385

08008928 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008928:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800892a:	b138      	cbz	r0, 800893c <netconn_listen_with_backlog+0x14>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 800892c:	9001      	str	r0, [sp, #4]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_listen, err);
 800892e:	a806      	add	r0, sp, #24
 8008930:	4b05      	ldr	r3, [pc, #20]	; (8008948 <netconn_listen_with_backlog+0x20>)
 8008932:	f840 3d18 	str.w	r3, [r0, #-24]!
 8008936:	f000 ff33 	bl	80097a0 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 800893a:	e001      	b.n	8008940 <netconn_listen_with_backlog+0x18>
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800893c:	f06f 000e 	mvn.w	r0, #14
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008940:	b007      	add	sp, #28
 8008942:	f85d fb04 	ldr.w	pc, [sp], #4
 8008946:	bf00      	nop
 8008948:	0800941d 	.word	0x0800941d

0800894c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800894c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800894e:	4604      	mov	r4, r0
  err_t err;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008950:	460d      	mov	r5, r1
 8008952:	b911      	cbnz	r1, 800895a <netconn_accept+0xe>
 8008954:	f06f 000e 	mvn.w	r0, #14
 8008958:	e02d      	b.n	80089b6 <netconn_accept+0x6a>
  *new_conn = NULL;
 800895a:	2600      	movs	r6, #0
 800895c:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800895e:	2800      	cmp	r0, #0
 8008960:	d0f8      	beq.n	8008954 <netconn_accept+0x8>
  LWIP_ERROR("netconn_accept: invalid acceptmbox", sys_mbox_valid(&conn->acceptmbox),   return ERR_ARG;);
 8008962:	f100 0714 	add.w	r7, r0, #20
 8008966:	4638      	mov	r0, r7
 8008968:	f005 fcd5 	bl	800e316 <sys_mbox_valid>
 800896c:	2800      	cmp	r0, #0
 800896e:	d0f1      	beq.n	8008954 <netconn_accept+0x8>

  err = conn->last_err;
 8008970:	f994 0008 	ldrsb.w	r0, [r4, #8]
  if (ERR_IS_FATAL(err)) {
 8008974:	f110 0f0b 	cmn.w	r0, #11
 8008978:	db1d      	blt.n	80089b6 <netconn_accept+0x6a>
       waiting on acceptmbox forever! */
    return err;
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800897a:	69a2      	ldr	r2, [r4, #24]
 800897c:	a901      	add	r1, sp, #4
 800897e:	4638      	mov	r0, r7
 8008980:	f005 fc94 	bl	800e2ac <sys_arch_mbox_fetch>
 8008984:	3001      	adds	r0, #1
 8008986:	d011      	beq.n	80089ac <netconn_accept+0x60>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008988:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800898a:	b11b      	cbz	r3, 8008994 <netconn_accept+0x48>
 800898c:	4632      	mov	r2, r6
 800898e:	2101      	movs	r1, #1
 8008990:	4620      	mov	r0, r4
 8008992:	4798      	blx	r3

  if (newconn == NULL) {
 8008994:	9b01      	ldr	r3, [sp, #4]
 8008996:	b933      	cbnz	r3, 80089a6 <netconn_accept+0x5a>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
 8008998:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800899c:	330b      	adds	r3, #11
 800899e:	db08      	blt.n	80089b2 <netconn_accept+0x66>
 80089a0:	23f4      	movs	r3, #244	; 0xf4
 80089a2:	7223      	strb	r3, [r4, #8]
 80089a4:	e005      	b.n	80089b2 <netconn_accept+0x66>
  /* don't care for the return value of lwip_netconn_do_recv */
  TCPIP_APIMSG_NOERR(&API_MSG_VAR_REF(msg), lwip_netconn_do_recv);
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80089a6:	602b      	str	r3, [r5, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80089a8:	2000      	movs	r0, #0
 80089aa:	e004      	b.n	80089b6 <netconn_accept+0x6a>
    return err;
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
    return ERR_TIMEOUT;
 80089ac:	f06f 0002 	mvn.w	r0, #2
 80089b0:	e001      	b.n	80089b6 <netconn_accept+0x6a>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
    return ERR_ABRT;
 80089b2:	f06f 000b 	mvn.w	r0, #11
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80089b6:	b003      	add	sp, #12
 80089b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089ba <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80089ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089bc:	4604      	mov	r4, r0
#if LWIP_TCP
  struct netbuf *buf = NULL;
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80089be:	460e      	mov	r6, r1
 80089c0:	b911      	cbnz	r1, 80089c8 <netconn_recv+0xe>
 80089c2:	f06f 000e 	mvn.w	r0, #14
 80089c6:	e02f      	b.n	8008a28 <netconn_recv+0x6e>
  *new_buf = NULL;
 80089c8:	2500      	movs	r5, #0
 80089ca:	600d      	str	r5, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d0f8      	beq.n	80089c2 <netconn_recv+0x8>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80089d0:	3010      	adds	r0, #16
 80089d2:	f005 fca0 	bl	800e316 <sys_mbox_valid>
 80089d6:	b328      	cbz	r0, 8008a24 <netconn_recv+0x6a>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80089d8:	7823      	ldrb	r3, [r4, #0]
 80089da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089de:	2b10      	cmp	r3, #16
 80089e0:	d11b      	bne.n	8008a1a <netconn_recv+0x60>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80089e2:	2004      	movs	r0, #4
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80089e4:	9501      	str	r5, [sp, #4]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80089e6:	f002 fa97 	bl	800af18 <memp_malloc>
    if (buf == NULL) {
 80089ea:	4605      	mov	r5, r0
 80089ec:	b190      	cbz	r0, 8008a14 <netconn_recv+0x5a>
      return ERR_MEM;
    }

    err = netconn_recv_data(conn, (void **)&p);
 80089ee:	4620      	mov	r0, r4
 80089f0:	a901      	add	r1, sp, #4
 80089f2:	f7ff febb 	bl	800876c <netconn_recv_data>
    if (err != ERR_OK) {
 80089f6:	4604      	mov	r4, r0
 80089f8:	b120      	cbz	r0, 8008a04 <netconn_recv+0x4a>
      memp_free(MEMP_NETBUF, buf);
 80089fa:	4629      	mov	r1, r5
 80089fc:	2004      	movs	r0, #4
 80089fe:	f002 fa97 	bl	800af30 <memp_free>
 8008a02:	e005      	b.n	8008a10 <netconn_recv+0x56>
      return err;
    }
    LWIP_ASSERT("p != NULL", p != NULL);

    buf->p = p;
 8008a04:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
    buf->port = 0;
 8008a06:	81a8      	strh	r0, [r5, #12]
      memp_free(MEMP_NETBUF, buf);
      return err;
    }
    LWIP_ASSERT("p != NULL", p != NULL);

    buf->p = p;
 8008a08:	602b      	str	r3, [r5, #0]
    buf->ptr = p;
 8008a0a:	606b      	str	r3, [r5, #4]
    buf->port = 0;
    ip_addr_set_zero(&buf->addr);
 8008a0c:	60a8      	str	r0, [r5, #8]
    *new_buf = buf;
 8008a0e:	6035      	str	r5, [r6, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008a10:	4620      	mov	r0, r4
 8008a12:	e009      	b.n	8008a28 <netconn_recv+0x6e>
    struct pbuf *p = NULL;
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
    if (buf == NULL) {
      return ERR_MEM;
 8008a14:	f04f 30ff 	mov.w	r0, #4294967295
 8008a18:	e006      	b.n	8008a28 <netconn_recv+0x6e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f7ff fea5 	bl	800876c <netconn_recv_data>
 8008a22:	e001      	b.n	8008a28 <netconn_recv+0x6e>
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  *new_buf = NULL;
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8008a24:	f06f 000a 	mvn.w	r0, #10
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008a28:	b002      	add	sp, #8
 8008a2a:	bd70      	pop	{r4, r5, r6, pc}

08008a2c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008a2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008a2e:	b140      	cbz	r0, 8008a42 <netconn_send+0x16>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 8008a30:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.b = buf;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_send, err);
 8008a32:	a806      	add	r0, sp, #24
 8008a34:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <netconn_send+0x20>)
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.b = buf;
 8008a36:	9103      	str	r1, [sp, #12]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_send, err);
 8008a38:	f840 3d18 	str.w	r3, [r0, #-24]!
 8008a3c:	f000 feb0 	bl	80097a0 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 8008a40:	e001      	b.n	8008a46 <netconn_send+0x1a>
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008a42:	f06f 000e 	mvn.w	r0, #14
  API_MSG_VAR_REF(msg).msg.msg.b = buf;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_send, err);
  API_MSG_VAR_FREE(msg);

  return err;
}
 8008a46:	b007      	add	sp, #28
 8008a48:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a4c:	080094ed 	.word	0x080094ed

08008a50 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	4616      	mov	r6, r2
 8008a56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008a58:	b340      	cbz	r0, 8008aac <netconn_write_partly+0x5c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008a5a:	7802      	ldrb	r2, [r0, #0]
 8008a5c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008a60:	2a10      	cmp	r2, #16
 8008a62:	d126      	bne.n	8008ab2 <netconn_write_partly+0x62>
  if (size == 0) {
 8008a64:	b90e      	cbnz	r6, 8008a6a <netconn_write_partly+0x1a>
    return ERR_OK;
 8008a66:	2000      	movs	r0, #0
 8008a68:	e025      	b.n	8008ab6 <netconn_write_partly+0x66>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008a6a:	7f02      	ldrb	r2, [r0, #28]
 8008a6c:	0792      	lsls	r2, r2, #30
 8008a6e:	d407      	bmi.n	8008a80 <netconn_write_partly+0x30>
 8008a70:	f003 0204 	and.w	r2, r3, #4
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	bf14      	ite	ne
 8008a78:	2501      	movne	r5, #1
 8008a7a:	2500      	moveq	r5, #0
  if (dontblock && !bytes_written) {
 8008a7c:	d002      	beq.n	8008a84 <netconn_write_partly+0x34>
 8008a7e:	e000      	b.n	8008a82 <netconn_write_partly+0x32>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  if (size == 0) {
    return ERR_OK;
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008a80:	2501      	movs	r5, #1
  if (dontblock && !bytes_written) {
 8008a82:	b1b4      	cbz	r4, 8008ab2 <netconn_write_partly+0x62>
    return ERR_VAL;
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
 8008a84:	9001      	str	r0, [sp, #4]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 8008a86:	a806      	add	r0, sp, #24

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.w.dataptr = dataptr;
  API_MSG_VAR_REF(msg).msg.msg.w.apiflags = apiflags;
 8008a88:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 8008a8c:	4b0b      	ldr	r3, [pc, #44]	; (8008abc <netconn_write_partly+0x6c>)
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.w.dataptr = dataptr;
 8008a8e:	9103      	str	r1, [sp, #12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 8008a90:	f840 3d18 	str.w	r3, [r0, #-24]!
  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.w.dataptr = dataptr;
  API_MSG_VAR_REF(msg).msg.msg.w.apiflags = apiflags;
  API_MSG_VAR_REF(msg).msg.msg.w.len = size;
 8008a94:	9604      	str	r6, [sp, #16]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 8008a96:	f000 fe83 	bl	80097a0 <tcpip_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8008a9a:	b960      	cbnz	r0, 8008ab6 <netconn_write_partly+0x66>
 8008a9c:	2c00      	cmp	r4, #0
 8008a9e:	d0e2      	beq.n	8008a66 <netconn_write_partly+0x16>
    if (dontblock
 8008aa0:	b115      	cbz	r5, 8008aa8 <netconn_write_partly+0x58>
#if LWIP_SO_SNDTIMEO
        || (conn->send_timeout != 0)
#endif /* LWIP_SO_SNDTIMEO */
       ) {
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.msg.w.len;
 8008aa2:	9b04      	ldr	r3, [sp, #16]
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	e006      	b.n	8008ab6 <netconn_write_partly+0x66>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8008aa8:	6026      	str	r6, [r4, #0]
 8008aaa:	e7dc      	b.n	8008a66 <netconn_write_partly+0x16>
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008aac:	f06f 000e 	mvn.w	r0, #14
 8008ab0:	e001      	b.n	8008ab6 <netconn_write_partly+0x66>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008ab2:	f06f 0005 	mvn.w	r0, #5
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
}
 8008ab6:	b006      	add	sp, #24
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	bf00      	nop
 8008abc:	080095a3 	.word	0x080095a3

08008ac0 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008ac0:	2103      	movs	r1, #3
 8008ac2:	f7ff be3d 	b.w	8008740 <netconn_close_shutdown>

08008ac6 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8008ac6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aca:	4617      	mov	r7, r2
 8008acc:	461d      	mov	r5, r3
 8008ace:	f8bd 9020 	ldrh.w	r9, [sp, #32]
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	b128      	cbz	r0, 8008ae2 <recv_udp+0x1c>
 8008ad6:	f100 0810 	add.w	r8, r0, #16
 8008ada:	4640      	mov	r0, r8
 8008adc:	f005 fc1b 	bl	800e316 <sys_mbox_valid>
 8008ae0:	b920      	cbnz	r0, 8008aec <recv_udp+0x26>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008ae2:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8008ae4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008ae8:	f002 badc 	b.w	800b0a4 <pbuf_free>
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008aec:	2004      	movs	r0, #4
 8008aee:	f002 fa13 	bl	800af18 <memp_malloc>
  if (buf == NULL) {
 8008af2:	4604      	mov	r4, r0
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d0f4      	beq.n	8008ae2 <recv_udp+0x1c>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8008af8:	6007      	str	r7, [r0, #0]
    buf->ptr = p;
 8008afa:	6047      	str	r7, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8008afc:	b105      	cbz	r5, 8008b00 <recv_udp+0x3a>
 8008afe:	682d      	ldr	r5, [r5, #0]
 8008b00:	60a5      	str	r5, [r4, #8]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008b02:	4621      	mov	r1, r4
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
    ip_addr_set(&buf->addr, addr);
    buf->port = port;
 8008b04:	f8a4 900c 	strh.w	r9, [r4, #12]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008b08:	4640      	mov	r0, r8
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008b0a:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008b0c:	f005 fbbd 	bl	800e28a <sys_mbox_trypost>
 8008b10:	4601      	mov	r1, r0
 8008b12:	b120      	cbz	r0, 8008b1e <recv_udp+0x58>
    netbuf_delete(buf);
 8008b14:	4620      	mov	r0, r4
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8008b16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
    netbuf_delete(buf);
 8008b1a:	f000 bda5 	b.w	8009668 <netbuf_delete>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008b1e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008b20:	b123      	cbz	r3, 8008b2c <recv_udp+0x66>
 8008b22:	462a      	mov	r2, r5
 8008b24:	4630      	mov	r0, r6
  }
}
 8008b26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008b2a:	4718      	bx	r3
 8008b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008b30 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008b30:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008b32:	6844      	ldr	r4, [r0, #4]
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008b34:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  tcp_arg(pcb, conn);
 8008b36:	4620      	mov	r0, r4
 8008b38:	f002 fd23 	bl	800b582 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4909      	ldr	r1, [pc, #36]	; (8008b64 <setup_tcp+0x34>)
 8008b40:	f002 fd21 	bl	800b586 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008b44:	4620      	mov	r0, r4
 8008b46:	4908      	ldr	r1, [pc, #32]	; (8008b68 <setup_tcp+0x38>)
 8008b48:	f002 fd1f 	bl	800b58a <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	4907      	ldr	r1, [pc, #28]	; (8008b6c <setup_tcp+0x3c>)
 8008b50:	2202      	movs	r2, #2
 8008b52:	f002 fd21 	bl	800b598 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008b56:	4620      	mov	r0, r4
 8008b58:	4905      	ldr	r1, [pc, #20]	; (8008b70 <setup_tcp+0x40>)
}
 8008b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pcb = conn->pcb.tcp;
  tcp_arg(pcb, conn);
  tcp_recv(pcb, recv_tcp);
  tcp_sent(pcb, sent_tcp);
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  tcp_err(pcb, err_tcp);
 8008b5e:	f002 bd16 	b.w	800b58e <tcp_err>
 8008b62:	bf00      	nop
 8008b64:	08008fc7 	.word	0x08008fc7
 8008b68:	08008f7b 	.word	0x08008f7b
 8008b6c:	08008f21 	.word	0x08008f21
 8008b70:	08008bdb 	.word	0x08008bdb

08008b74 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008b74:	b570      	push	{r4, r5, r6, lr}

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8008b76:	4604      	mov	r4, r0
 8008b78:	b350      	cbz	r0, 8008bd0 <lwip_netconn_do_connected+0x5c>
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8008b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8008b7c:	b11e      	cbz	r6, 8008b86 <lwip_netconn_do_connected+0x12>
    conn->current_msg->err = err;
 8008b7e:	7132      	strb	r2, [r6, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008b80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b82:	681e      	ldr	r6, [r3, #0]
 8008b84:	360c      	adds	r6, #12
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8008b86:	7823      	ldrb	r3, [r4, #0]
 8008b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b8c:	2b10      	cmp	r3, #16
 8008b8e:	d103      	bne.n	8008b98 <lwip_netconn_do_connected+0x24>
 8008b90:	b912      	cbnz	r2, 8008b98 <lwip_netconn_do_connected+0x24>
    setup_tcp(conn);
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7ff ffcc 	bl	8008b30 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8008b98:	7f23      	ldrb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  conn->state = NETCONN_NONE;
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008b9a:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8008b9e:	f003 0004 	and.w	r0, r3, #4
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
    setup_tcp(conn);
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  SET_NONBLOCKING_CONNECT(conn, 0);
 8008ba2:	f023 0304 	bic.w	r3, r3, #4
  LWIP_ASSERT("blocking connect state error",
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  conn->state = NETCONN_NONE;
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008ba6:	320b      	adds	r2, #11
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
    setup_tcp(conn);
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  SET_NONBLOCKING_CONNECT(conn, 0);
 8008ba8:	7723      	strb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8008baa:	f04f 0300 	mov.w	r3, #0
 8008bae:	b2c5      	uxtb	r5, r0
 8008bb0:	6263      	str	r3, [r4, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8008bb2:	7063      	strb	r3, [r4, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008bb4:	bfa8      	it	ge
 8008bb6:	7223      	strbge	r3, [r4, #8]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008bb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bba:	b11b      	cbz	r3, 8008bc4 <lwip_netconn_do_connected+0x50>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2102      	movs	r1, #2
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	4798      	blx	r3

  if (was_blocking) {
 8008bc4:	b93d      	cbnz	r5, 8008bd6 <lwip_netconn_do_connected+0x62>
    sys_sem_signal(op_completed_sem);
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f005 fbeb 	bl	800e3a2 <sys_sem_signal>
  }
  return ERR_OK;
 8008bcc:	4628      	mov	r0, r5
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
    return ERR_VAL;
 8008bd0:	f06f 0005 	mvn.w	r0, #5
 8008bd4:	bd70      	pop	{r4, r5, r6, pc}
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);

  if (was_blocking) {
    sys_sem_signal(op_completed_sem);
  }
  return ERR_OK;
 8008bd6:	2000      	movs	r0, #0
}
 8008bd8:	bd70      	pop	{r4, r5, r6, pc}

08008bda <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  conn->pcb.tcp = NULL;
 8008bdc:	2200      	movs	r2, #0
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008bde:	4604      	mov	r4, r0
 8008be0:	460e      	mov	r6, r1
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  conn->pcb.tcp = NULL;
 8008be2:	6042      	str	r2, [r0, #4]

  /* no check since this is always fatal! */
  SYS_ARCH_SET(conn->last_err, err);
 8008be4:	7221      	strb	r1, [r4, #8]
  conn->state = NETCONN_NONE;

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008be6:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* no check since this is always fatal! */
  SYS_ARCH_SET(conn->last_err, err);

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008be8:	7845      	ldrb	r5, [r0, #1]
  conn->state = NETCONN_NONE;
 8008bea:	7042      	strb	r2, [r0, #1]

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008bec:	b10b      	cbz	r3, 8008bf2 <err_tcp+0x18>
 8008bee:	2104      	movs	r1, #4
 8008bf0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bf4:	b11b      	cbz	r3, 8008bfe <err_tcp+0x24>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008bfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008c00:	b11b      	cbz	r3, 8008c0a <err_tcp+0x30>
 8008c02:	2200      	movs	r2, #0
 8008c04:	2102      	movs	r1, #2
 8008c06:	4620      	mov	r0, r4
 8008c08:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008c0a:	f104 0710 	add.w	r7, r4, #16
 8008c0e:	4638      	mov	r0, r7
 8008c10:	f005 fb81 	bl	800e316 <sys_mbox_valid>
 8008c14:	b118      	cbz	r0, 8008c1e <err_tcp+0x44>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8008c16:	2100      	movs	r1, #0
 8008c18:	4638      	mov	r0, r7
 8008c1a:	f005 fb36 	bl	800e28a <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008c1e:	f104 0714 	add.w	r7, r4, #20
 8008c22:	4638      	mov	r0, r7
 8008c24:	f005 fb77 	bl	800e316 <sys_mbox_valid>
 8008c28:	b118      	cbz	r0, 8008c32 <err_tcp+0x58>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	f005 fb2c 	bl	800e28a <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008c32:	2d01      	cmp	r5, #1
 8008c34:	d002      	beq.n	8008c3c <err_tcp+0x62>
 8008c36:	3d03      	subs	r5, #3
 8008c38:	2d01      	cmp	r5, #1
 8008c3a:	d81b      	bhi.n	8008c74 <err_tcp+0x9a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008c3c:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008c3e:	f023 0204 	bic.w	r2, r3, #4

    if (!was_nonblocking_connect) {
 8008c42:	f003 0304 	and.w	r3, r3, #4
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008c46:	7722      	strb	r2, [r4, #28]

    if (!was_nonblocking_connect) {
 8008c48:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8008c4c:	b993      	cbnz	r3, 8008c74 <err_tcp+0x9a>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
      conn->current_msg->err = err;
 8008c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c50:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c54:	681d      	ldr	r5, [r3, #0]
 8008c56:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008c58:	4628      	mov	r0, r5
 8008c5a:	f005 fbab 	bl	800e3b4 <sys_sem_valid>
      conn->current_msg = NULL;
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8008c5e:	f994 3008 	ldrsb.w	r3, [r4, #8]
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
      conn->current_msg->err = err;
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
      conn->current_msg = NULL;
 8008c62:	6267      	str	r7, [r4, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
      sys_sem_signal(op_completed_sem);
 8008c64:	4628      	mov	r0, r5
      conn->current_msg->err = err;
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
      conn->current_msg = NULL;
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8008c66:	330b      	adds	r3, #11
 8008c68:	bfa8      	it	ge
 8008c6a:	7226      	strbge	r6, [r4, #8]
      sys_sem_signal(op_completed_sem);
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  }
}
 8008c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
      conn->current_msg = NULL;
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
      sys_sem_signal(op_completed_sem);
 8008c70:	f005 bb97 	b.w	800e3a2 <sys_sem_signal>
 8008c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c76 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c78:	4604      	mov	r4, r0

  LWIP_ASSERT("conn != NULL", conn != NULL);
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8008c7a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    conn->write_offset < conn->current_msg->msg.w.len);

  dontblock = netconn_is_nonblocking(conn) ||
 8008c7c:	7f23      	ldrb	r3, [r4, #28]
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8008c7e:	6a25      	ldr	r5, [r4, #32]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8008c80:	68c2      	ldr	r2, [r0, #12]
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
    conn->write_offset < conn->current_msg->msg.w.len);

  dontblock = netconn_is_nonblocking(conn) ||
 8008c82:	f013 0f02 	tst.w	r3, #2
 8008c86:	7c03      	ldrb	r3, [r0, #16]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8008c88:	eba2 0205 	sub.w	r2, r2, r5
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8008c8c:	6881      	ldr	r1, [r0, #8]
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
    conn->write_offset < conn->current_msg->msg.w.len);

  dontblock = netconn_is_nonblocking(conn) ||
 8008c8e:	bf0c      	ite	eq
 8008c90:	f3c3 0780 	ubfxeq	r7, r3, #2, #1
 8008c94:	2701      	movne	r7, #1
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8008c96:	6860      	ldr	r0, [r4, #4]
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
    diff = conn->current_msg->msg.w.len - conn->write_offset;
    if (diff > 0xffffUL) { /* max_u16_t */
 8008c98:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8008c9c:	4429      	add	r1, r5
    diff = conn->current_msg->msg.w.len - conn->write_offset;
    if (diff > 0xffffUL) { /* max_u16_t */
      len = 0xffff;
 8008c9e:	bf2c      	ite	cs
 8008ca0:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
 8008ca4:	b292      	uxthcc	r2, r2
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8008ca6:	f8b0 6066 	ldrh.w	r6, [r0, #102]	; 0x66
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
    diff = conn->current_msg->msg.w.len - conn->write_offset;
    if (diff > 0xffffUL) { /* max_u16_t */
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8008caa:	bf28      	it	cs
 8008cac:	f043 0302 	orrcs.w	r3, r3, #2
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
    if (available < len) {
 8008cb0:	42b2      	cmp	r2, r6
 8008cb2:	d905      	bls.n	8008cc0 <lwip_netconn_do_writemore+0x4a>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8008cb4:	b10f      	cbz	r7, 8008cba <lwip_netconn_do_writemore+0x44>
        if (!len) {
 8008cb6:	b176      	cbz	r6, 8008cd6 <lwip_netconn_do_writemore+0x60>
 8008cb8:	e003      	b.n	8008cc2 <lwip_netconn_do_writemore+0x4c>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008cba:	f043 0302 	orr.w	r3, r3, #2
 8008cbe:	e000      	b.n	8008cc2 <lwip_netconn_do_writemore+0x4c>
 8008cc0:	4616      	mov	r6, r2
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	f004 f8ca 	bl	800ce5c <tcp_write>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008cc8:	1c43      	adds	r3, r0, #1
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008cca:	4605      	mov	r5, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d84c      	bhi.n	8008d6c <lwip_netconn_do_writemore+0xf6>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8008cd2:	b18f      	cbz	r7, 8008cf8 <lwip_netconn_do_writemore+0x82>
 8008cd4:	e001      	b.n	8008cda <lwip_netconn_do_writemore+0x64>
    if (available < len) {
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
        if (!len) {
          err = ERR_WOULDBLOCK;
 8008cd6:	f06f 0506 	mvn.w	r5, #6
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8008cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	429e      	cmp	r6, r3
 8008ce0:	d20a      	bcs.n	8008cf8 <lwip_netconn_do_writemore+0x82>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008ce2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ce4:	b11b      	cbz	r3, 8008cee <lwip_netconn_do_writemore+0x78>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	2103      	movs	r1, #3
 8008cea:	4620      	mov	r0, r4
 8008cec:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008cee:	7f23      	ldrb	r3, [r4, #28]
 8008cf0:	f043 0310 	orr.w	r3, r3, #16
 8008cf4:	7723      	strb	r3, [r4, #28]
 8008cf6:	e010      	b.n	8008d1a <lwip_netconn_do_writemore+0xa4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008cf8:	6863      	ldr	r3, [r4, #4]
 8008cfa:	f640 3269 	movw	r2, #2921	; 0xb69
 8008cfe:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
 8008d02:	4291      	cmp	r1, r2
 8008d04:	d903      	bls.n	8008d0e <lwip_netconn_do_writemore+0x98>
 8008d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d905      	bls.n	8008d1a <lwip_netconn_do_writemore+0xa4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d10:	b11b      	cbz	r3, 8008d1a <lwip_netconn_do_writemore+0xa4>
 8008d12:	4632      	mov	r2, r6
 8008d14:	2103      	movs	r1, #3
 8008d16:	4620      	mov	r0, r4
 8008d18:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8008d1a:	b9bd      	cbnz	r5, 8008d4c <lwip_netconn_do_writemore+0xd6>
      err_t out_err;
      conn->write_offset += len;
 8008d1c:	6a23      	ldr	r3, [r4, #32]
 8008d1e:	441e      	add	r6, r3
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8008d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
      }
    }

    if (err == ERR_OK) {
      err_t out_err;
      conn->write_offset += len;
 8008d22:	6226      	str	r6, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	4296      	cmp	r6, r2
 8008d28:	462a      	mov	r2, r5
 8008d2a:	d000      	beq.n	8008d2e <lwip_netconn_do_writemore+0xb8>
 8008d2c:	b11f      	cbz	r7, 8008d36 <lwip_netconn_do_writemore+0xc0>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8008d2e:	60de      	str	r6, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8008d30:	2601      	movs	r6, #1
        conn->write_offset = 0;
 8008d32:	6222      	str	r2, [r4, #32]
 8008d34:	e000      	b.n	8008d38 <lwip_netconn_do_writemore+0xc2>
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008d36:	462e      	mov	r6, r5
        conn->current_msg->msg.w.len = conn->write_offset;
        /* everything was written */
        write_finished = 1;
        conn->write_offset = 0;
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008d38:	6860      	ldr	r0, [r4, #4]
 8008d3a:	f004 fadb 	bl	800d2f4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008d3e:	f110 0f0b 	cmn.w	r0, #11
        conn->current_msg->msg.w.len = conn->write_offset;
        /* everything was written */
        write_finished = 1;
        conn->write_offset = 0;
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008d42:	4602      	mov	r2, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008d44:	db0e      	blt.n	8008d64 <lwip_netconn_do_writemore+0xee>
 8008d46:	3004      	adds	r0, #4
 8008d48:	d125      	bne.n	8008d96 <lwip_netconn_do_writemore+0x120>
 8008d4a:	e00b      	b.n	8008d64 <lwip_netconn_do_writemore+0xee>
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
      }
    } else if ((err == ERR_MEM) && !dontblock) {
 8008d4c:	1c6a      	adds	r2, r5, #1
 8008d4e:	d10d      	bne.n	8008d6c <lwip_netconn_do_writemore+0xf6>
 8008d50:	b967      	cbnz	r7, 8008d6c <lwip_netconn_do_writemore+0xf6>
      /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
         we do NOT return to the application thread, since ERR_MEM is
         only a temporary error! */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008d52:	6860      	ldr	r0, [r4, #4]
 8008d54:	f004 face 	bl	800d2f4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008d58:	f110 0f0b 	cmn.w	r0, #11
      /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
         we do NOT return to the application thread, since ERR_MEM is
         only a temporary error! */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008d5c:	4602      	mov	r2, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008d5e:	db01      	blt.n	8008d64 <lwip_netconn_do_writemore+0xee>
 8008d60:	1d03      	adds	r3, r0, #4
 8008d62:	d122      	bne.n	8008daa <lwip_netconn_do_writemore+0x134>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8008d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d66:	2100      	movs	r1, #0
 8008d68:	60d9      	str	r1, [r3, #12]
 8008d6a:	e003      	b.n	8008d74 <lwip_netconn_do_writemore+0xfe>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d70:	60da      	str	r2, [r3, #12]
 8008d72:	462a      	mov	r2, r5
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d76:	4615      	mov	r5, r2
 8008d78:	680b      	ldr	r3, [r1, #0]
    conn->current_msg->err = err;
 8008d7a:	710a      	strb	r2, [r1, #4]
    conn->current_msg = NULL;
 8008d7c:	2100      	movs	r1, #0
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d7e:	f103 000c 	add.w	r0, r3, #12
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8008d82:	6261      	str	r1, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008d84:	7061      	strb	r1, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8008d86:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8008d8a:	320b      	adds	r2, #11
 8008d8c:	bfa8      	it	ge
 8008d8e:	7225      	strbge	r5, [r4, #8]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      sys_sem_signal(op_completed_sem);
 8008d90:	f005 fb07 	bl	800e3a2 <sys_sem_signal>
 8008d94:	e009      	b.n	8008daa <lwip_netconn_do_writemore+0x134>
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
    }
  }
  if (write_finished) {
 8008d96:	b146      	cbz	r6, 8008daa <lwip_netconn_do_writemore+0x134>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
    conn->current_msg->err = err;
 8008d9a:	2200      	movs	r2, #0
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d9c:	680b      	ldr	r3, [r1, #0]
    conn->current_msg->err = err;
 8008d9e:	710a      	strb	r2, [r1, #4]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008da0:	f103 000c 	add.w	r0, r3, #12
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8008da4:	6262      	str	r2, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008da6:	7062      	strb	r2, [r4, #1]
 8008da8:	e7ed      	b.n	8008d86 <lwip_netconn_do_writemore+0x110>
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
}
 8008daa:	2000      	movs	r0, #0
 8008dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008db0 <lwip_netconn_do_close_internal>:
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  tpcb = conn->pcb.tcp;
  shut = conn->current_msg->msg.sd.shut;
 8008db0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 * @param conn the TCP netconn to close
 * [@param delay 1 if called from sent/poll (wake up calling thread on end)]
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  tpcb = conn->pcb.tcp;
  shut = conn->current_msg->msg.sd.shut;
 8008db6:	7a1b      	ldrb	r3, [r3, #8]
 * @param conn the TCP netconn to close
 * [@param delay 1 if called from sent/poll (wake up calling thread on end)]
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008db8:	4604      	mov	r4, r0
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  tpcb = conn->pcb.tcp;
 8008dba:	6845      	ldr	r5, [r0, #4]
  shut = conn->current_msg->msg.sd.shut;
  shut_rx = shut & NETCONN_SHUT_RD;
  shut_tx = shut & NETCONN_SHUT_WR;
 8008dbc:	f003 0702 	and.w	r7, r3, #2
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008dc0:	2b03      	cmp	r3, #3
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  tpcb = conn->pcb.tcp;
  shut = conn->current_msg->msg.sd.shut;
  shut_rx = shut & NETCONN_SHUT_RD;
 8008dc2:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8008dc6:	b2ff      	uxtb	r7, r7
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008dc8:	d057      	beq.n	8008e7a <lwip_netconn_do_close_internal+0xca>
    close = 1;
  } else if (shut_rx &&
 8008dca:	f1b9 0f00 	cmp.w	r9, #0
 8008dce:	d005      	beq.n	8008ddc <lwip_netconn_do_close_internal+0x2c>
             ((tpcb->state == FIN_WAIT_1) ||
 8008dd0:	7e2b      	ldrb	r3, [r5, #24]
  shut_tx = shut & NETCONN_SHUT_WR;
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
    close = 1;
  } else if (shut_rx &&
 8008dd2:	1f5a      	subs	r2, r3, #5
 8008dd4:	2a01      	cmp	r2, #1
 8008dd6:	d950      	bls.n	8008e7a <lwip_netconn_do_close_internal+0xca>
             ((tpcb->state == FIN_WAIT_1) ||
              (tpcb->state == FIN_WAIT_2) ||
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d04e      	beq.n	8008e7a <lwip_netconn_do_close_internal+0xca>
              (tpcb->state == CLOSING))) {
    close = 1;
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008ddc:	b13f      	cbz	r7, 8008dee <lwip_netconn_do_close_internal+0x3e>
 8008dde:	7fab      	ldrb	r3, [r5, #30]
 8008de0:	f003 0310 	and.w	r3, r3, #16
 8008de4:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d146      	bne.n	8008e7a <lwip_netconn_do_close_internal+0xca>
 8008dec:	e000      	b.n	8008df0 <lwip_netconn_do_close_internal+0x40>
 8008dee:	46b8      	mov	r8, r7

  /* Set back some callback pointers */
  if (close) {
    tcp_arg(tpcb, NULL);
  }
  if (tpcb->state == LISTEN) {
 8008df0:	7e2b      	ldrb	r3, [r5, #24]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d107      	bne.n	8008e06 <lwip_netconn_do_close_internal+0x56>
    tcp_accept(tpcb, NULL);
 8008df6:	2100      	movs	r1, #0
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f002 fbcb 	bl	800b594 <tcp_accept>
      tcp_poll(tpcb, NULL, 0);
      tcp_err(tpcb, NULL);
    }
  }
  /* Try to close the connection */
  if (close) {
 8008dfe:	f1b8 0f00 	cmp.w	r8, #0
 8008e02:	d11c      	bne.n	8008e3e <lwip_netconn_do_close_internal+0x8e>
 8008e04:	e01f      	b.n	8008e46 <lwip_netconn_do_close_internal+0x96>
  }
  if (tpcb->state == LISTEN) {
    tcp_accept(tpcb, NULL);
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008e06:	f1b9 0f00 	cmp.w	r9, #0
 8008e0a:	d007      	beq.n	8008e1c <lwip_netconn_do_close_internal+0x6c>
      tcp_recv(tpcb, NULL);
 8008e0c:	2100      	movs	r1, #0
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f002 fbb9 	bl	800b586 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008e14:	2100      	movs	r1, #0
 8008e16:	4628      	mov	r0, r5
 8008e18:	f002 fbbc 	bl	800b594 <tcp_accept>
    }
    if (shut_tx) {
 8008e1c:	b11f      	cbz	r7, 8008e26 <lwip_netconn_do_close_internal+0x76>
      tcp_sent(tpcb, NULL);
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4628      	mov	r0, r5
 8008e22:	f002 fbb2 	bl	800b58a <tcp_sent>
    }
    if (close) {
 8008e26:	f1b8 0f00 	cmp.w	r8, #0
 8008e2a:	d00c      	beq.n	8008e46 <lwip_netconn_do_close_internal+0x96>
      tcp_poll(tpcb, NULL, 0);
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4628      	mov	r0, r5
 8008e30:	4611      	mov	r1, r2
 8008e32:	f002 fbb1 	bl	800b598 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008e36:	2100      	movs	r1, #0
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f002 fba8 	bl	800b58e <tcp_err>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f002 fde0 	bl	800ba04 <tcp_close>
 8008e44:	e004      	b.n	8008e50 <lwip_netconn_do_close_internal+0xa0>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008e46:	463a      	mov	r2, r7
 8008e48:	4649      	mov	r1, r9
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	f002 fe72 	bl	800bb34 <tcp_shutdown>
 8008e50:	4606      	mov	r6, r0
  }
  if (err == ERR_OK) {
 8008e52:	b1d8      	cbz	r0, 8008e8c <lwip_netconn_do_close_internal+0xdc>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008e54:	1c42      	adds	r2, r0, #1
 8008e56:	d119      	bne.n	8008e8c <lwip_netconn_do_close_internal+0xdc>
      /* Closing failed because of memory shortage */
      if (netconn_is_nonblocking(conn)) {
 8008e58:	7f23      	ldrb	r3, [r4, #28]
 8008e5a:	079b      	lsls	r3, r3, #30
 8008e5c:	d414      	bmi.n	8008e88 <lwip_netconn_do_close_internal+0xd8>
          close_timeout = conn->linger * 1000U;
        }
#endif
        if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        if (conn->current_msg->msg.sd.polls_left == 0) {
 8008e5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e60:	f893 a009 	ldrb.w	sl, [r3, #9]
 8008e64:	f1ba 0f00 	cmp.w	sl, #0
 8008e68:	d13d      	bne.n	8008ee6 <lwip_netconn_do_close_internal+0x136>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
          close_finished = 1;
          if (close) {
 8008e6a:	f1b8 0f00 	cmp.w	r8, #0
 8008e6e:	d00d      	beq.n	8008e8c <lwip_netconn_do_close_internal+0xdc>
            /* in this case, we want to RST the connection */
            tcp_abort(tpcb);
 8008e70:	4628      	mov	r0, r5
            err = ERR_OK;
 8008e72:	4656      	mov	r6, sl
        if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
          close_finished = 1;
          if (close) {
            /* in this case, we want to RST the connection */
            tcp_abort(tpcb);
 8008e74:	f002 fee4 	bl	800bc40 <tcp_abort>
 8008e78:	e008      	b.n	8008e8c <lwip_netconn_do_close_internal+0xdc>
    close = 0;
  }

  /* Set back some callback pointers */
  if (close) {
    tcp_arg(tpcb, NULL);
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f002 fb80 	bl	800b582 <tcp_arg>
 8008e82:	f04f 0801 	mov.w	r8, #1
 8008e86:	e7b3      	b.n	8008df0 <lwip_netconn_do_close_internal+0x40>
    if (err == ERR_MEM) {
      /* Closing failed because of memory shortage */
      if (netconn_is_nonblocking(conn)) {
        /* Nonblocking close failed */
        close_finished = 1;
        err = ERR_WOULDBLOCK;
 8008e88:	f06f 0606 	mvn.w	r6, #6
      close_finished = 1;
    }
  }
  if (close_finished) {
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e8e:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8008e90:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008e96:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8008e98:	b9ce      	cbnz	r6, 8008ece <lwip_netconn_do_close_internal+0x11e>
      if (close) {
 8008e9a:	f1b8 0f00 	cmp.w	r8, #0
 8008e9e:	d006      	beq.n	8008eae <lwip_netconn_do_close_internal+0xfe>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ea0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    conn->current_msg = NULL;
    conn->state = NETCONN_NONE;
    if (err == ERR_OK) {
      if (close) {
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008ea2:	6066      	str	r6, [r4, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ea4:	b11b      	cbz	r3, 8008eae <lwip_netconn_do_close_internal+0xfe>
 8008ea6:	4632      	mov	r2, r6
 8008ea8:	2104      	movs	r1, #4
 8008eaa:	4620      	mov	r0, r4
 8008eac:	4798      	blx	r3
      }
      if (shut_rx) {
 8008eae:	f1b9 0f00 	cmp.w	r9, #0
 8008eb2:	d005      	beq.n	8008ec0 <lwip_netconn_do_close_internal+0x110>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008eb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008eb6:	b153      	cbz	r3, 8008ece <lwip_netconn_do_close_internal+0x11e>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4620      	mov	r0, r4
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	4798      	blx	r3
      }
      if (shut_tx) {
 8008ec0:	b12f      	cbz	r7, 8008ece <lwip_netconn_do_close_internal+0x11e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008ec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ec4:	b11b      	cbz	r3, 8008ece <lwip_netconn_do_close_internal+0x11e>
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2102      	movs	r1, #2
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8008ece:	f994 3008 	ldrsb.w	r3, [r4, #8]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008ed2:	f105 000c 	add.w	r0, r5, #12
      }
      if (shut_tx) {
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8008ed6:	330b      	adds	r3, #11
 8008ed8:	bfa8      	it	ge
 8008eda:	7226      	strbge	r6, [r4, #8]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008edc:	f005 fa61 	bl	800e3a2 <sys_sem_signal>
    }
    return ERR_OK;
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  if (!close_finished) {
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
    if (shut_tx) {
 8008ee6:	b11f      	cbz	r7, 8008ef0 <lwip_netconn_do_close_internal+0x140>
      tcp_sent(tpcb, sent_tcp);
 8008ee8:	490a      	ldr	r1, [pc, #40]	; (8008f14 <lwip_netconn_do_close_internal+0x164>)
 8008eea:	4628      	mov	r0, r5
 8008eec:	f002 fb4d 	bl	800b58a <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	4908      	ldr	r1, [pc, #32]	; (8008f18 <lwip_netconn_do_close_internal+0x168>)
 8008ef6:	f002 fb4f 	bl	800b598 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008efa:	4628      	mov	r0, r5
 8008efc:	4907      	ldr	r1, [pc, #28]	; (8008f1c <lwip_netconn_do_close_internal+0x16c>)
 8008efe:	f002 fb46 	bl	800b58e <tcp_err>
    tcp_arg(tpcb, conn);
 8008f02:	4628      	mov	r0, r5
 8008f04:	4621      	mov	r1, r4
 8008f06:	f002 fb3c 	bl	800b582 <tcp_arg>
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f12:	bf00      	nop
 8008f14:	08008f7b 	.word	0x08008f7b
 8008f18:	08008f21 	.word	0x08008f21
 8008f1c:	08008bdb 	.word	0x08008bdb

08008f20 <poll_tcp>:
  struct netconn *conn = (struct netconn *)arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn->state == NETCONN_WRITE) {
 8008f20:	7843      	ldrb	r3, [r0, #1]
 8008f22:	2b01      	cmp	r3, #1
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008f24:	b510      	push	{r4, lr}
 8008f26:	4604      	mov	r4, r0
  struct netconn *conn = (struct netconn *)arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn->state == NETCONN_WRITE) {
 8008f28:	d102      	bne.n	8008f30 <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008f2a:	f7ff fea4 	bl	8008c76 <lwip_netconn_do_writemore>
 8008f2e:	e00a      	b.n	8008f46 <poll_tcp+0x26>
  } else if (conn->state == NETCONN_CLOSE) {
 8008f30:	2b04      	cmp	r3, #4
 8008f32:	d108      	bne.n	8008f46 <poll_tcp+0x26>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008f34:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008f36:	b11a      	cbz	r2, 8008f40 <poll_tcp+0x20>
 8008f38:	7a53      	ldrb	r3, [r2, #9]
 8008f3a:	b10b      	cbz	r3, 8008f40 <poll_tcp+0x20>
      conn->current_msg->msg.sd.polls_left--;
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	7253      	strb	r3, [r2, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008f40:	4620      	mov	r0, r4
 8008f42:	f7ff ff35 	bl	8008db0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008f46:	7f23      	ldrb	r3, [r4, #28]
 8008f48:	06da      	lsls	r2, r3, #27
 8008f4a:	d514      	bpl.n	8008f76 <poll_tcp+0x56>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f4c:	6862      	ldr	r2, [r4, #4]
 8008f4e:	b192      	cbz	r2, 8008f76 <poll_tcp+0x56>
 8008f50:	f8b2 0066 	ldrh.w	r0, [r2, #102]	; 0x66
 8008f54:	f640 3169 	movw	r1, #2921	; 0xb69
 8008f58:	4288      	cmp	r0, r1
 8008f5a:	d90c      	bls.n	8008f76 <poll_tcp+0x56>
 8008f5c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8008f60:	2a04      	cmp	r2, #4
 8008f62:	d808      	bhi.n	8008f76 <poll_tcp+0x56>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008f64:	f023 0310 	bic.w	r3, r3, #16
 8008f68:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f6c:	b11b      	cbz	r3, 8008f76 <poll_tcp+0x56>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2102      	movs	r1, #2
 8008f72:	4620      	mov	r0, r4
 8008f74:	4798      	blx	r3
    }
  }

  return ERR_OK;
}
 8008f76:	2000      	movs	r0, #0
 8008f78:	bd10      	pop	{r4, pc}

08008f7a <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008f7a:	b538      	push	{r3, r4, r5, lr}
 8008f7c:	4615      	mov	r5, r2
  struct netconn *conn = (struct netconn *)arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn) {
 8008f7e:	4604      	mov	r4, r0
 8008f80:	b1f8      	cbz	r0, 8008fc2 <sent_tcp+0x48>
    if (conn->state == NETCONN_WRITE) {
 8008f82:	7843      	ldrb	r3, [r0, #1]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d102      	bne.n	8008f8e <sent_tcp+0x14>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008f88:	f7ff fe75 	bl	8008c76 <lwip_netconn_do_writemore>
 8008f8c:	e003      	b.n	8008f96 <sent_tcp+0x1c>
    } else if (conn->state == NETCONN_CLOSE) {
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d101      	bne.n	8008f96 <sent_tcp+0x1c>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008f92:	f7ff ff0d 	bl	8008db0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f96:	6863      	ldr	r3, [r4, #4]
 8008f98:	b19b      	cbz	r3, 8008fc2 <sent_tcp+0x48>
 8008f9a:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
 8008f9e:	f640 3269 	movw	r2, #2921	; 0xb69
 8008fa2:	4291      	cmp	r1, r2
 8008fa4:	d90d      	bls.n	8008fc2 <sent_tcp+0x48>
 8008fa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d809      	bhi.n	8008fc2 <sent_tcp+0x48>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008fae:	7f23      	ldrb	r3, [r4, #28]
 8008fb0:	f023 0310 	bic.w	r3, r3, #16
 8008fb4:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008fb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fb8:	b11b      	cbz	r3, 8008fc2 <sent_tcp+0x48>
 8008fba:	462a      	mov	r2, r5
 8008fbc:	2102      	movs	r1, #2
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	4798      	blx	r3
    }
  }

  return ERR_OK;
}
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	bd38      	pop	{r3, r4, r5, pc}

08008fc6 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fca:	4689      	mov	r9, r1
 8008fcc:	4615      	mov	r5, r2
 8008fce:	461f      	mov	r7, r3
  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8008fd0:	4606      	mov	r6, r0
 8008fd2:	b348      	cbz	r0, 8009028 <recv_tcp+0x62>
    return ERR_VAL;
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8008fd4:	f100 0810 	add.w	r8, r0, #16
 8008fd8:	4640      	mov	r0, r8
 8008fda:	f005 f99c 	bl	800e316 <sys_mbox_valid>
 8008fde:	4604      	mov	r4, r0
 8008fe0:	b950      	cbnz	r0, 8008ff8 <recv_tcp+0x32>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008fe2:	b90d      	cbnz	r5, 8008fe8 <recv_tcp+0x22>
    len = 0;
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008fe4:	2400      	movs	r4, #0
 8008fe6:	e024      	b.n	8009032 <recv_tcp+0x6c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);

  if (!sys_mbox_valid(&conn->recvmbox)) {
    /* recvmbox already deleted */
    if (p != NULL) {
      tcp_recved(pcb, p->tot_len);
 8008fe8:	4648      	mov	r0, r9
 8008fea:	8929      	ldrh	r1, [r5, #8]
 8008fec:	f002 fa8e 	bl	800b50c <tcp_recved>
      pbuf_free(p);
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f002 f857 	bl	800b0a4 <pbuf_free>
 8008ff6:	e01c      	b.n	8009032 <recv_tcp+0x6c>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8008ff8:	b127      	cbz	r7, 8009004 <recv_tcp+0x3e>
    NETCONN_SET_SAFE_ERR(conn, err);
 8008ffa:	f996 3008 	ldrsb.w	r3, [r6, #8]
 8008ffe:	330b      	adds	r3, #11
 8009000:	bfa8      	it	ge
 8009002:	7237      	strbge	r7, [r6, #8]
  }

  if (p != NULL) {
 8009004:	b10d      	cbz	r5, 800900a <recv_tcp+0x44>
    len = p->tot_len;
 8009006:	892f      	ldrh	r7, [r5, #8]
 8009008:	e000      	b.n	800900c <recv_tcp+0x46>
  } else {
    len = 0;
 800900a:	462f      	mov	r7, r5
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800900c:	4629      	mov	r1, r5
 800900e:	4640      	mov	r0, r8
 8009010:	f005 f93b 	bl	800e28a <sys_mbox_trypost>
 8009014:	4604      	mov	r4, r0
 8009016:	b950      	cbnz	r0, 800902e <recv_tcp+0x68>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009018:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0e2      	beq.n	8008fe4 <recv_tcp+0x1e>
 800901e:	4601      	mov	r1, r0
 8009020:	463a      	mov	r2, r7
 8009022:	4630      	mov	r0, r6
 8009024:	4798      	blx	r3
 8009026:	e004      	b.n	8009032 <recv_tcp+0x6c>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;

  if (conn == NULL) {
    return ERR_VAL;
 8009028:	f06f 0405 	mvn.w	r4, #5
 800902c:	e001      	b.n	8009032 <recv_tcp+0x6c>
    len = 0;
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800902e:	f04f 34ff 	mov.w	r4, #4294967295
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }

  return ERR_OK;
}
 8009032:	4620      	mov	r0, r4
 8009034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009038 <lwip_netconn_do_newconn>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(struct api_msg_msg *msg)
{
 8009038:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800903a:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 800903c:	6805      	ldr	r5, [r0, #0]
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(struct api_msg_msg *msg)
{
 800903e:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8009040:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009042:	686b      	ldr	r3, [r5, #4]
 8009044:	bb3b      	cbnz	r3, 8009096 <lwip_netconn_do_newconn+0x5e>
pcb_new(struct api_msg_msg *msg)
{
  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8009046:	782b      	ldrb	r3, [r5, #0]
 8009048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800904c:	2b10      	cmp	r3, #16
 800904e:	d012      	beq.n	8009076 <lwip_netconn_do_newconn+0x3e>
 8009050:	2b20      	cmp	r3, #32
 8009052:	d119      	bne.n	8009088 <lwip_netconn_do_newconn+0x50>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new();
 8009054:	f004 fd8e 	bl	800db74 <udp_new>
 8009058:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 800905a:	6822      	ldr	r2, [r4, #0]
 800905c:	6853      	ldr	r3, [r2, #4]
 800905e:	b1ab      	cbz	r3, 800908c <lwip_netconn_do_newconn+0x54>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009060:	7812      	ldrb	r2, [r2, #0]
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009062:	4914      	ldr	r1, [pc, #80]	; (80090b4 <lwip_netconn_do_newconn+0x7c>)
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009064:	2a22      	cmp	r2, #34	; 0x22
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009066:	bf04      	itt	eq
 8009068:	2201      	moveq	r2, #1
 800906a:	741a      	strbeq	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800906c:	6822      	ldr	r2, [r4, #0]
 800906e:	6850      	ldr	r0, [r2, #4]
 8009070:	f004 fd64 	bl	800db3c <udp_recv>
 8009074:	e00a      	b.n	800908c <lwip_netconn_do_newconn+0x54>
    }
    break;
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new();
 8009076:	f002 feb9 	bl	800bdec <tcp_new>
 800907a:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800907c:	6820      	ldr	r0, [r4, #0]
 800907e:	6843      	ldr	r3, [r0, #4]
 8009080:	b123      	cbz	r3, 800908c <lwip_netconn_do_newconn+0x54>
      setup_tcp(msg->conn);
 8009082:	f7ff fd55 	bl	8008b30 <setup_tcp>
 8009086:	e001      	b.n	800908c <lwip_netconn_do_newconn+0x54>
    }
    break;
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8009088:	23fa      	movs	r3, #250	; 0xfa
 800908a:	e003      	b.n	8009094 <lwip_netconn_do_newconn+0x5c>
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	b90b      	cbnz	r3, 8009096 <lwip_netconn_do_newconn+0x5e>
    msg->err = ERR_MEM;
 8009092:	23ff      	movs	r3, #255	; 0xff
 8009094:	7123      	strb	r3, [r4, #4]
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	b133      	cbz	r3, 80090a8 <lwip_netconn_do_newconn+0x70>
 800909a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800909e:	320b      	adds	r2, #11
 80090a0:	bfa4      	itt	ge
 80090a2:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 80090a6:	721a      	strbge	r2, [r3, #8]
 80090a8:	6820      	ldr	r0, [r4, #0]
}
 80090aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 80090ae:	300c      	adds	r0, #12
 80090b0:	f005 b977 	b.w	800e3a2 <sys_sem_signal>
 80090b4:	08008ac7 	.word	0x08008ac7

080090b8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	4605      	mov	r5, r0
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80090bc:	2005      	movs	r0, #5
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80090be:	460f      	mov	r7, r1
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80090c0:	f001 ff2a 	bl	800af18 <memp_malloc>
 80090c4:	2300      	movs	r3, #0
  if (conn == NULL) {
 80090c6:	4604      	mov	r4, r0
 80090c8:	b360      	cbz	r0, 8009124 <netconn_alloc+0x6c>
    return NULL;
  }

  conn->last_err = ERR_OK;
  conn->type = t;
 80090ca:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 80090cc:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  if (conn == NULL) {
    return NULL;
  }

  conn->last_err = ERR_OK;
 80090d0:	7203      	strb	r3, [r0, #8]
  conn->type = t;
  conn->pcb.tcp = NULL;

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 80090d2:	2d10      	cmp	r5, #16
    return NULL;
  }

  conn->last_err = ERR_OK;
  conn->type = t;
  conn->pcb.tcp = NULL;
 80090d4:	6043      	str	r3, [r0, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 80090d6:	d001      	beq.n	80090dc <netconn_alloc+0x24>
 80090d8:	2d20      	cmp	r5, #32
 80090da:	d11d      	bne.n	8009118 <netconn_alloc+0x60>
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80090dc:	f104 0610 	add.w	r6, r4, #16
 80090e0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80090e4:	4630      	mov	r0, r6
 80090e6:	f005 f8a9 	bl	800e23c <sys_mbox_new>
 80090ea:	4601      	mov	r1, r0
 80090ec:	b9a0      	cbnz	r0, 8009118 <netconn_alloc+0x60>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80090ee:	f104 000c 	add.w	r0, r4, #12
 80090f2:	f005 f918 	bl	800e326 <sys_sem_new>
 80090f6:	4605      	mov	r5, r0
 80090f8:	b118      	cbz	r0, 8009102 <netconn_alloc+0x4a>
    sys_mbox_free(&conn->recvmbox);
 80090fa:	4630      	mov	r0, r6
 80090fc:	f005 f8ab 	bl	800e256 <sys_mbox_free>
    goto free_and_return;
 8009100:	e00a      	b.n	8009118 <netconn_alloc+0x60>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009102:	f104 0014 	add.w	r0, r4, #20
 8009106:	f005 f90b 	bl	800e320 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800910a:	7065      	strb	r5, [r4, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800910c:	62a7      	str	r7, [r4, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800910e:	6265      	str	r5, [r4, #36]	; 0x24
  conn->write_offset = 0;
 8009110:	6225      	str	r5, [r4, #32]
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8009112:	61a5      	str	r5, [r4, #24]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8009114:	7725      	strb	r5, [r4, #28]
 8009116:	e005      	b.n	8009124 <netconn_alloc+0x6c>
  return conn;
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009118:	4621      	mov	r1, r4
 800911a:	2005      	movs	r0, #5
 800911c:	f001 ff08 	bl	800af30 <memp_free>
  return NULL;
 8009120:	2000      	movs	r0, #0
 8009122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  if (conn == NULL) {
    return NULL;
 8009124:	4620      	mov	r0, r4
  conn->flags = 0;
  return conn;
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  return NULL;
}
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009128 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800912c:	3010      	adds	r0, #16
 800912e:	f005 f8f2 	bl	800e316 <sys_mbox_valid>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009132:	f104 050c 	add.w	r5, r4, #12
{
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009136:	f104 0014 	add.w	r0, r4, #20
 800913a:	f005 f8ec 	bl	800e316 <sys_mbox_valid>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800913e:	4628      	mov	r0, r5
 8009140:	f005 f935 	bl	800e3ae <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009144:	4628      	mov	r0, r5
 8009146:	f005 f93a 	bl	800e3be <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800914a:	4621      	mov	r1, r4
 800914c:	2005      	movs	r0, #5
}
 800914e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  sys_sem_set_invalid(&conn->op_completed);
#endif

  memp_free(MEMP_NETCONN, conn);
 8009152:	f001 beed 	b.w	800af30 <memp_free>

08009156 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009156:	b573      	push	{r0, r1, r4, r5, r6, lr}
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009158:	f100 0510 	add.w	r5, r0, #16
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800915c:	4604      	mov	r4, r0
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800915e:	4628      	mov	r0, r5
 8009160:	f005 f8d9 	bl	800e316 <sys_mbox_valid>
 8009164:	b300      	cbz	r0, 80091a8 <netconn_drain+0x52>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009166:	a901      	add	r1, sp, #4
 8009168:	4628      	mov	r0, r5
 800916a:	f005 f8c4 	bl	800e2f6 <sys_arch_mbox_tryfetch>
 800916e:	3001      	adds	r0, #1
 8009170:	d014      	beq.n	800919c <netconn_drain+0x46>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009172:	7823      	ldrb	r3, [r4, #0]
 8009174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009178:	2b10      	cmp	r3, #16
 800917a:	d10b      	bne.n	8009194 <netconn_drain+0x3e>
        if (mem != NULL) {
 800917c:	9e01      	ldr	r6, [sp, #4]
 800917e:	2e00      	cmp	r6, #0
 8009180:	d0f1      	beq.n	8009166 <netconn_drain+0x10>
          p = (struct pbuf*)mem;
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8009182:	6860      	ldr	r0, [r4, #4]
 8009184:	b110      	cbz	r0, 800918c <netconn_drain+0x36>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8009186:	8931      	ldrh	r1, [r6, #8]
 8009188:	f002 f9c0 	bl	800b50c <tcp_recved>
          }
          pbuf_free(p);
 800918c:	4630      	mov	r0, r6
 800918e:	f001 ff89 	bl	800b0a4 <pbuf_free>
 8009192:	e7e8      	b.n	8009166 <netconn_drain+0x10>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8009194:	9801      	ldr	r0, [sp, #4]
 8009196:	f000 fa67 	bl	8009668 <netbuf_delete>
 800919a:	e7e4      	b.n	8009166 <netconn_drain+0x10>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800919c:	4628      	mov	r0, r5
 800919e:	f005 f85a 	bl	800e256 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80091a2:	4628      	mov	r0, r5
 80091a4:	f005 f8bc 	bl	800e320 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80091a8:	3414      	adds	r4, #20
 80091aa:	4620      	mov	r0, r4
 80091ac:	f005 f8b3 	bl	800e316 <sys_mbox_valid>
 80091b0:	b1c8      	cbz	r0, 80091e6 <netconn_drain+0x90>
      }
      /* drain recvmbox */
      netconn_drain(newconn);
      if (newconn->pcb.tcp != NULL) {
        tcp_abort(newconn->pcb.tcp);
        newconn->pcb.tcp = NULL;
 80091b2:	2600      	movs	r6, #0
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80091b4:	a901      	add	r1, sp, #4
 80091b6:	4620      	mov	r0, r4
 80091b8:	f005 f89d 	bl	800e2f6 <sys_arch_mbox_tryfetch>
 80091bc:	3001      	adds	r0, #1
 80091be:	d00c      	beq.n	80091da <netconn_drain+0x84>
      struct netconn *newconn = (struct netconn *)mem;
 80091c0:	9d01      	ldr	r5, [sp, #4]
      /* pcb might be set to NULL already by err_tcp() */
      if (conn->pcb.tcp != NULL) {
        tcp_accepted(conn->pcb.tcp);
      }
      /* drain recvmbox */
      netconn_drain(newconn);
 80091c2:	4628      	mov	r0, r5
 80091c4:	f7ff ffc7 	bl	8009156 <netconn_drain>
      if (newconn->pcb.tcp != NULL) {
 80091c8:	6868      	ldr	r0, [r5, #4]
 80091ca:	b110      	cbz	r0, 80091d2 <netconn_drain+0x7c>
        tcp_abort(newconn->pcb.tcp);
 80091cc:	f002 fd38 	bl	800bc40 <tcp_abort>
        newconn->pcb.tcp = NULL;
 80091d0:	606e      	str	r6, [r5, #4]
      }
      netconn_free(newconn);
 80091d2:	4628      	mov	r0, r5
 80091d4:	f7ff ffa8 	bl	8009128 <netconn_free>
 80091d8:	e7ec      	b.n	80091b4 <netconn_drain+0x5e>
    }
    sys_mbox_free(&conn->acceptmbox);
 80091da:	4620      	mov	r0, r4
 80091dc:	f005 f83b 	bl	800e256 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80091e0:	4620      	mov	r0, r4
 80091e2:	f005 f89d 	bl	800e320 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80091e6:	b002      	add	sp, #8
 80091e8:	bd70      	pop	{r4, r5, r6, pc}

080091ea <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80091ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80091ee:	f100 0414 	add.w	r4, r0, #20
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80091f2:	4606      	mov	r6, r0
 80091f4:	4688      	mov	r8, r1
 80091f6:	4617      	mov	r7, r2
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80091f8:	4620      	mov	r0, r4
 80091fa:	f005 f88c 	bl	800e316 <sys_mbox_valid>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d03b      	beq.n	800927a <accept_function+0x90>
    return ERR_VAL;
  }

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009202:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8009204:	7830      	ldrb	r0, [r6, #0]
 8009206:	f7ff ff57 	bl	80090b8 <netconn_alloc>
  if (newconn == NULL) {
 800920a:	4605      	mov	r5, r0
 800920c:	b3c0      	cbz	r0, 8009280 <accept_function+0x96>
    return ERR_MEM;
  }
  newconn->pcb.tcp = newpcb;
 800920e:	f8c0 8004 	str.w	r8, [r0, #4]
  setup_tcp(newconn);
 8009212:	f7ff fc8d 	bl	8008b30 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009216:	4620      	mov	r0, r4
  }
  newconn->pcb.tcp = newpcb;
  setup_tcp(newconn);
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 8009218:	722f      	strb	r7, [r5, #8]

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800921a:	4629      	mov	r1, r5
 800921c:	f005 f835 	bl	800e28a <sys_mbox_trypost>
 8009220:	4604      	mov	r4, r0
 8009222:	b318      	cbz	r0, 800926c <accept_function+0x82>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8009224:	686c      	ldr	r4, [r5, #4]
    tcp_arg(pcb, NULL);
 8009226:	2100      	movs	r1, #0
 8009228:	4620      	mov	r0, r4
 800922a:	f002 f9aa 	bl	800b582 <tcp_arg>
    tcp_recv(pcb, NULL);
 800922e:	4620      	mov	r0, r4
 8009230:	2100      	movs	r1, #0
 8009232:	f002 f9a8 	bl	800b586 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009236:	4620      	mov	r0, r4
 8009238:	2100      	movs	r1, #0
 800923a:	f002 f9a6 	bl	800b58a <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800923e:	2200      	movs	r2, #0
 8009240:	4620      	mov	r0, r4
 8009242:	4611      	mov	r1, r2
 8009244:	f002 f9a8 	bl	800b598 <tcp_poll>
    tcp_err(pcb, NULL);
 8009248:	2100      	movs	r1, #0
 800924a:	4620      	mov	r0, r4
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800924c:	f105 0410 	add.w	r4, r5, #16
    struct tcp_pcb* pcb = newconn->pcb.tcp;
    tcp_arg(pcb, NULL);
    tcp_recv(pcb, NULL);
    tcp_sent(pcb, NULL);
    tcp_poll(pcb, NULL, 0);
    tcp_err(pcb, NULL);
 8009250:	f002 f99d 	bl	800b58e <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009254:	2300      	movs	r3, #0
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009256:	4620      	mov	r0, r4
    tcp_recv(pcb, NULL);
    tcp_sent(pcb, NULL);
    tcp_poll(pcb, NULL, 0);
    tcp_err(pcb, NULL);
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009258:	606b      	str	r3, [r5, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800925a:	f004 fffc 	bl	800e256 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800925e:	4620      	mov	r0, r4
 8009260:	f005 f85e 	bl	800e320 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009264:	4628      	mov	r0, r5
 8009266:	f7ff ff5f 	bl	8009128 <netconn_free>
 800926a:	e009      	b.n	8009280 <accept_function+0x96>
    return ERR_MEM;
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800926c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800926e:	b14b      	cbz	r3, 8009284 <accept_function+0x9a>
 8009270:	4602      	mov	r2, r0
 8009272:	4601      	mov	r1, r0
 8009274:	4630      	mov	r0, r6
 8009276:	4798      	blx	r3
 8009278:	e004      	b.n	8009284 <accept_function+0x9a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800927a:	f06f 0405 	mvn.w	r4, #5
 800927e:	e001      	b.n	8009284 <accept_function+0x9a>

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  if (newconn == NULL) {
    return ERR_MEM;
 8009280:	f04f 34ff 	mov.w	r4, #4294967295
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  }

  return ERR_OK;
}
 8009284:	4620      	mov	r0, r4
 8009286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800928a <lwip_netconn_do_delconn>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(struct api_msg_msg *msg)
{
 800928a:	b538      	push	{r3, r4, r5, lr}
 800928c:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 800928e:	6800      	ldr	r0, [r0, #0]
 8009290:	7843      	ldrb	r3, [r0, #1]
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009292:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8009296:	d007      	beq.n	80092a8 <lwip_netconn_do_delconn+0x1e>
       (state != NETCONN_LISTEN) &&
 8009298:	2b03      	cmp	r3, #3
 800929a:	d102      	bne.n	80092a2 <lwip_netconn_do_delconn+0x18>
       (state != NETCONN_CONNECT)) ||
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800929c:	7f03      	ldrb	r3, [r0, #28]
 800929e:	075b      	lsls	r3, r3, #29
 80092a0:	d402      	bmi.n	80092a8 <lwip_netconn_do_delconn+0x1e>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80092a2:	23fb      	movs	r3, #251	; 0xfb
 80092a4:	7123      	strb	r3, [r4, #4]
 80092a6:	e02a      	b.n	80092fe <lwip_netconn_do_delconn+0x74>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80092a8:	2500      	movs	r5, #0
 80092aa:	7125      	strb	r5, [r4, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80092ac:	f7ff ff53 	bl	8009156 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	6842      	ldr	r2, [r0, #4]
 80092b4:	b1ba      	cbz	r2, 80092e6 <lwip_netconn_do_delconn+0x5c>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80092b6:	7803      	ldrb	r3, [r0, #0]
 80092b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092bc:	2b10      	cmp	r3, #16
 80092be:	d006      	beq.n	80092ce <lwip_netconn_do_delconn+0x44>
 80092c0:	2b20      	cmp	r3, #32
 80092c2:	d10d      	bne.n	80092e0 <lwip_netconn_do_delconn+0x56>
        raw_remove(msg->conn->pcb.raw);
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 80092c4:	61d5      	str	r5, [r2, #28]
        udp_remove(msg->conn->pcb.udp);
 80092c6:	6840      	ldr	r0, [r0, #4]
 80092c8:	f004 fc3c 	bl	800db44 <udp_remove>
        break;
 80092cc:	e008      	b.n	80092e0 <lwip_netconn_do_delconn+0x56>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 80092ce:	2304      	movs	r3, #4
 80092d0:	7043      	strb	r3, [r0, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80092d2:	2303      	movs	r3, #3
 80092d4:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 80092d6:	6244      	str	r4, [r0, #36]	; 0x24
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
    TCPIP_APIMSG_ACK(msg);
  }
}
 80092d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_close_internal(msg->conn);
 80092dc:	f7ff bd68 	b.w	8008db0 <lwip_netconn_do_close_internal>
        return;
#endif /* LWIP_TCP */
      default:
        break;
      }
      msg->conn->pcb.tcp = NULL;
 80092e0:	6823      	ldr	r3, [r4, #0]
 80092e2:	2200      	movs	r2, #0
 80092e4:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80092e6:	6820      	ldr	r0, [r4, #0]
 80092e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80092ea:	b113      	cbz	r3, 80092f2 <lwip_netconn_do_delconn+0x68>
 80092ec:	2200      	movs	r2, #0
 80092ee:	4611      	mov	r1, r2
 80092f0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80092f6:	b113      	cbz	r3, 80092fe <lwip_netconn_do_delconn+0x74>
 80092f8:	2200      	movs	r2, #0
 80092fa:	2102      	movs	r1, #2
 80092fc:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80092fe:	6820      	ldr	r0, [r4, #0]
 8009300:	300c      	adds	r0, #12
 8009302:	f005 f857 	bl	800e3b4 <sys_sem_valid>
 8009306:	b170      	cbz	r0, 8009326 <lwip_netconn_do_delconn+0x9c>
    TCPIP_APIMSG_ACK(msg);
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	b133      	cbz	r3, 800931a <lwip_netconn_do_delconn+0x90>
 800930c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009310:	320b      	adds	r2, #11
 8009312:	bfa4      	itt	ge
 8009314:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 8009318:	721a      	strbge	r2, [r3, #8]
 800931a:	6820      	ldr	r0, [r4, #0]
  }
}
 800931c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
    TCPIP_APIMSG_ACK(msg);
 8009320:	300c      	adds	r0, #12
 8009322:	f005 b83e 	b.w	800e3a2 <sys_sem_signal>
 8009326:	bd38      	pop	{r3, r4, r5, pc}

08009328 <lwip_netconn_do_bind>:
 *            the IP address and port to bind to
 */
void
lwip_netconn_do_bind(struct api_msg_msg *msg)
{
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009328:	6803      	ldr	r3, [r0, #0]
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
lwip_netconn_do_bind(struct api_msg_msg *msg)
{
 800932a:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800932c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
lwip_netconn_do_bind(struct api_msg_msg *msg)
{
 8009330:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009332:	f112 0f0b 	cmn.w	r2, #11
 8009336:	da01      	bge.n	800933c <lwip_netconn_do_bind+0x14>
    msg->err = msg->conn->last_err;
 8009338:	7102      	strb	r2, [r0, #4]
 800933a:	e014      	b.n	8009366 <lwip_netconn_do_bind+0x3e>
  } else {
    msg->err = ERR_VAL;
 800933c:	22fa      	movs	r2, #250	; 0xfa
 800933e:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8009340:	6858      	ldr	r0, [r3, #4]
 8009342:	b180      	cbz	r0, 8009366 <lwip_netconn_do_bind+0x3e>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800934a:	2b10      	cmp	r3, #16
 800934c:	d006      	beq.n	800935c <lwip_netconn_do_bind+0x34>
 800934e:	2b20      	cmp	r3, #32
 8009350:	d109      	bne.n	8009366 <lwip_netconn_do_bind+0x3e>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009352:	89a2      	ldrh	r2, [r4, #12]
 8009354:	68a1      	ldr	r1, [r4, #8]
 8009356:	f004 fae5 	bl	800d924 <udp_bind>
 800935a:	e003      	b.n	8009364 <lwip_netconn_do_bind+0x3c>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800935c:	89a2      	ldrh	r2, [r4, #12]
 800935e:	68a1      	ldr	r1, [r4, #8]
 8009360:	f002 f83e 	bl	800b3e0 <tcp_bind>
 8009364:	7120      	strb	r0, [r4, #4]
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	b133      	cbz	r3, 8009378 <lwip_netconn_do_bind+0x50>
 800936a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800936e:	320b      	adds	r2, #11
 8009370:	bfa4      	itt	ge
 8009372:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 8009376:	721a      	strbge	r2, [r3, #8]
 8009378:	6820      	ldr	r0, [r4, #0]
}
 800937a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800937e:	300c      	adds	r0, #12
 8009380:	f005 b80f 	b.w	800e3a2 <sys_sem_signal>

08009384 <lwip_netconn_do_connect>:
 *            the IP address and port to connect to
 */
void
lwip_netconn_do_connect(struct api_msg_msg *msg)
{
  if (msg->conn->pcb.tcp == NULL) {
 8009384:	6803      	ldr	r3, [r0, #0]
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to connect to
 */
void
lwip_netconn_do_connect(struct api_msg_msg *msg)
{
 8009386:	b510      	push	{r4, lr}
 8009388:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 800938a:	6858      	ldr	r0, [r3, #4]
 800938c:	b908      	cbnz	r0, 8009392 <lwip_netconn_do_connect+0xe>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 800938e:	23f2      	movs	r3, #242	; 0xf2
 8009390:	e032      	b.n	80093f8 <lwip_netconn_do_connect+0x74>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009392:	781a      	ldrb	r2, [r3, #0]
 8009394:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009398:	2a10      	cmp	r2, #16
 800939a:	d007      	beq.n	80093ac <lwip_netconn_do_connect+0x28>
 800939c:	2a20      	cmp	r2, #32
 800939e:	d12a      	bne.n	80093f6 <lwip_netconn_do_connect+0x72>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80093a0:	89a2      	ldrh	r2, [r4, #12]
 80093a2:	68a1      	ldr	r1, [r4, #8]
 80093a4:	f004 fba2 	bl	800daec <udp_connect>
 80093a8:	7120      	strb	r0, [r4, #4]
      break;
 80093aa:	e026      	b.n	80093fa <lwip_netconn_do_connect+0x76>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 80093ac:	785a      	ldrb	r2, [r3, #1]
 80093ae:	2a03      	cmp	r2, #3
 80093b0:	d101      	bne.n	80093b6 <lwip_netconn_do_connect+0x32>
        msg->err = ERR_ALREADY;
 80093b2:	23f7      	movs	r3, #247	; 0xf7
 80093b4:	e020      	b.n	80093f8 <lwip_netconn_do_connect+0x74>
      } else if (msg->conn->state != NETCONN_NONE) {
 80093b6:	b10a      	cbz	r2, 80093bc <lwip_netconn_do_connect+0x38>
        msg->err = ERR_ISCONN;
 80093b8:	23f6      	movs	r3, #246	; 0xf6
 80093ba:	e01d      	b.n	80093f8 <lwip_netconn_do_connect+0x74>
      } else {
        setup_tcp(msg->conn);
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff fbb7 	bl	8008b30 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80093c2:	6820      	ldr	r0, [r4, #0]
 80093c4:	4b14      	ldr	r3, [pc, #80]	; (8009418 <lwip_netconn_do_connect+0x94>)
 80093c6:	89a2      	ldrh	r2, [r4, #12]
 80093c8:	68a1      	ldr	r1, [r4, #8]
 80093ca:	6840      	ldr	r0, [r0, #4]
 80093cc:	f002 fd20 	bl	800be10 <tcp_connect>
 80093d0:	7120      	strb	r0, [r4, #4]
          msg->msg.bc.port, lwip_netconn_do_connected);
        if (msg->err == ERR_OK) {
 80093d2:	b990      	cbnz	r0, 80093fa <lwip_netconn_do_connect+0x76>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80093d4:	6822      	ldr	r2, [r4, #0]
          msg->conn->state = NETCONN_CONNECT;
 80093d6:	2103      	movs	r1, #3
      } else {
        setup_tcp(msg->conn);
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
          msg->msg.bc.port, lwip_netconn_do_connected);
        if (msg->err == ERR_OK) {
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80093d8:	7f13      	ldrb	r3, [r2, #28]
          msg->conn->state = NETCONN_CONNECT;
 80093da:	7051      	strb	r1, [r2, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80093dc:	0799      	lsls	r1, r3, #30
 80093de:	d504      	bpl.n	80093ea <lwip_netconn_do_connect+0x66>
 80093e0:	f043 0304 	orr.w	r3, r3, #4
 80093e4:	7713      	strb	r3, [r2, #28]
          if (non_blocking) {
            msg->err = ERR_INPROGRESS;
 80093e6:	23fb      	movs	r3, #251	; 0xfb
 80093e8:	e006      	b.n	80093f8 <lwip_netconn_do_connect+0x74>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
          msg->msg.bc.port, lwip_netconn_do_connected);
        if (msg->err == ERR_OK) {
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
          msg->conn->state = NETCONN_CONNECT;
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80093ea:	f023 0304 	bic.w	r3, r3, #4
 80093ee:	7713      	strb	r3, [r2, #28]
          if (non_blocking) {
            msg->err = ERR_INPROGRESS;
          } else {
            msg->conn->current_msg = msg;
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	625c      	str	r4, [r3, #36]	; 0x24
            UNLOCK_TCPIP_CORE();
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
            LOCK_TCPIP_CORE();
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
 80093f4:	bd10      	pop	{r4, pc}
        }
      }
      break;
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 80093f6:	23fa      	movs	r3, #250	; 0xfa
 80093f8:	7123      	strb	r3, [r4, #4]
      break;
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	b133      	cbz	r3, 800940c <lwip_netconn_do_connect+0x88>
 80093fe:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009402:	320b      	adds	r2, #11
 8009404:	bfa4      	itt	ge
 8009406:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 800940a:	721a      	strbge	r2, [r3, #8]
 800940c:	6820      	ldr	r0, [r4, #0]
}
 800940e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 8009412:	300c      	adds	r0, #12
 8009414:	f004 bfc5 	b.w	800e3a2 <sys_sem_signal>
 8009418:	08008b75 	.word	0x08008b75

0800941c <lwip_netconn_do_listen>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(struct api_msg_msg *msg)
{
 800941c:	b538      	push	{r3, r4, r5, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800941e:	6803      	ldr	r3, [r0, #0]
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(struct api_msg_msg *msg)
{
 8009420:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009422:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009426:	f112 0f0b 	cmn.w	r2, #11
 800942a:	da01      	bge.n	8009430 <lwip_netconn_do_listen+0x14>
    msg->err = msg->conn->last_err;
 800942c:	7102      	strb	r2, [r0, #4]
 800942e:	e04c      	b.n	80094ca <lwip_netconn_do_listen+0xae>
  } else {
    msg->err = ERR_CONN;
 8009430:	22f5      	movs	r2, #245	; 0xf5
 8009432:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8009434:	6858      	ldr	r0, [r3, #4]
 8009436:	2800      	cmp	r0, #0
 8009438:	d047      	beq.n	80094ca <lwip_netconn_do_listen+0xae>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800943a:	781a      	ldrb	r2, [r3, #0]
 800943c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009440:	2a10      	cmp	r2, #16
 8009442:	d140      	bne.n	80094c6 <lwip_netconn_do_listen+0xaa>
        if (msg->conn->state == NETCONN_NONE) {
 8009444:	785b      	ldrb	r3, [r3, #1]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d13f      	bne.n	80094ca <lwip_netconn_do_listen+0xae>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800944a:	7e03      	ldrb	r3, [r0, #24]
 800944c:	b10b      	cbz	r3, 8009452 <lwip_netconn_do_listen+0x36>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800944e:	23fa      	movs	r3, #250	; 0xfa
 8009450:	e03a      	b.n	80094c8 <lwip_netconn_do_listen+0xac>
#endif /* LWIP_IPV6 */
            {
#if TCP_LISTEN_BACKLOG
              lpcb = tcp_listen_with_backlog(msg->conn->pcb.tcp, msg->msg.lb.backlog);
#else  /* TCP_LISTEN_BACKLOG */
              lpcb = tcp_listen(msg->conn->pcb.tcp);
 8009452:	21ff      	movs	r1, #255	; 0xff
 8009454:	f001 fffe 	bl	800b454 <tcp_listen_with_backlog>
#endif /* TCP_LISTEN_BACKLOG */
            }
            if (lpcb == NULL) {
 8009458:	4605      	mov	r5, r0
 800945a:	b908      	cbnz	r0, 8009460 <lwip_netconn_do_listen+0x44>
              /* in this case, the old pcb is still allocated */
              msg->err = ERR_MEM;
 800945c:	23ff      	movs	r3, #255	; 0xff
 800945e:	e033      	b.n	80094c8 <lwip_netconn_do_listen+0xac>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009460:	6820      	ldr	r0, [r4, #0]
 8009462:	3010      	adds	r0, #16
 8009464:	f004 ff57 	bl	800e316 <sys_mbox_valid>
 8009468:	b138      	cbz	r0, 800947a <lwip_netconn_do_listen+0x5e>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	3010      	adds	r0, #16
 800946e:	f004 fef2 	bl	800e256 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009472:	6820      	ldr	r0, [r4, #0]
 8009474:	3010      	adds	r0, #16
 8009476:	f004 ff53 	bl	800e320 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800947a:	2300      	movs	r3, #0
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800947c:	6820      	ldr	r0, [r4, #0]
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
                sys_mbox_set_invalid(&msg->conn->recvmbox);
              }
              msg->err = ERR_OK;
 800947e:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009480:	3014      	adds	r0, #20
 8009482:	f004 ff48 	bl	800e316 <sys_mbox_valid>
 8009486:	b930      	cbnz	r0, 8009496 <lwip_netconn_do_listen+0x7a>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009488:	6820      	ldr	r0, [r4, #0]
 800948a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800948e:	3014      	adds	r0, #20
 8009490:	f004 fed4 	bl	800e23c <sys_mbox_new>
 8009494:	7120      	strb	r0, [r4, #4]
              }
              if (msg->err == ERR_OK) {
 8009496:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800949a:	b96b      	cbnz	r3, 80094b8 <lwip_netconn_do_listen+0x9c>
                msg->conn->state = NETCONN_LISTEN;
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	2202      	movs	r2, #2
                msg->conn->pcb.tcp = lpcb;
 80094a0:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80094a2:	6821      	ldr	r1, [r4, #0]
              msg->err = ERR_OK;
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
              }
              if (msg->err == ERR_OK) {
                msg->conn->state = NETCONN_LISTEN;
 80094a4:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80094a6:	6848      	ldr	r0, [r1, #4]
 80094a8:	f002 f86b 	bl	800b582 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	490e      	ldr	r1, [pc, #56]	; (80094e8 <lwip_netconn_do_listen+0xcc>)
 80094b0:	6858      	ldr	r0, [r3, #4]
 80094b2:	f002 f86f 	bl	800b594 <tcp_accept>
 80094b6:	e008      	b.n	80094ca <lwip_netconn_do_listen+0xae>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 80094b8:	4628      	mov	r0, r5
 80094ba:	f002 faa3 	bl	800ba04 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
 80094c4:	e001      	b.n	80094ca <lwip_netconn_do_listen+0xae>
              }
            }
          }
        }
      } else {
        msg->err = ERR_ARG;
 80094c6:	23f1      	movs	r3, #241	; 0xf1
 80094c8:	7123      	strb	r3, [r4, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	b133      	cbz	r3, 80094dc <lwip_netconn_do_listen+0xc0>
 80094ce:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80094d2:	320b      	adds	r2, #11
 80094d4:	bfa4      	itt	ge
 80094d6:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 80094da:	721a      	strbge	r2, [r3, #8]
 80094dc:	6820      	ldr	r0, [r4, #0]
}
 80094de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      } else {
        msg->err = ERR_ARG;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80094e2:	300c      	adds	r0, #12
 80094e4:	f004 bf5d 	b.w	800e3a2 <sys_sem_signal>
 80094e8:	080091eb 	.word	0x080091eb

080094ec <lwip_netconn_do_send>:
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(struct api_msg_msg *msg)
{
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80094ec:	6803      	ldr	r3, [r0, #0]
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(struct api_msg_msg *msg)
{
 80094ee:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80094f0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(struct api_msg_msg *msg)
{
 80094f4:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80094f6:	f112 0f0b 	cmn.w	r2, #11
 80094fa:	da01      	bge.n	8009500 <lwip_netconn_do_send+0x14>
    msg->err = msg->conn->last_err;
 80094fc:	7102      	strb	r2, [r0, #4]
 80094fe:	e016      	b.n	800952e <lwip_netconn_do_send+0x42>
  } else {
    msg->err = ERR_CONN;
 8009500:	22f5      	movs	r2, #245	; 0xf5
 8009502:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8009504:	6858      	ldr	r0, [r3, #4]
 8009506:	b190      	cbz	r0, 800952e <lwip_netconn_do_send+0x42>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800950e:	2b20      	cmp	r3, #32
 8009510:	d10d      	bne.n	800952e <lwip_netconn_do_send+0x42>
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        }
#else /* LWIP_CHECKSUM_ON_COPY */
        if (ip_addr_isany_val(msg->msg.b->addr)) {
 8009512:	68a1      	ldr	r1, [r4, #8]
 8009514:	688b      	ldr	r3, [r1, #8]
 8009516:	b91b      	cbnz	r3, 8009520 <lwip_netconn_do_send+0x34>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009518:	6809      	ldr	r1, [r1, #0]
 800951a:	f004 fae1 	bl	800dae0 <udp_send>
 800951e:	e005      	b.n	800952c <lwip_netconn_do_send+0x40>
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8009520:	898b      	ldrh	r3, [r1, #12]
 8009522:	f101 0208 	add.w	r2, r1, #8
 8009526:	6809      	ldr	r1, [r1, #0]
 8009528:	f004 fac1 	bl	800daae <udp_sendto>
 800952c:	7120      	strb	r0, [r4, #4]
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	b133      	cbz	r3, 8009540 <lwip_netconn_do_send+0x54>
 8009532:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009536:	320b      	adds	r2, #11
 8009538:	bfa4      	itt	ge
 800953a:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 800953e:	721a      	strbge	r2, [r3, #8]
 8009540:	6820      	ldr	r0, [r4, #0]
}
 8009542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009546:	300c      	adds	r0, #12
 8009548:	f004 bf2b 	b.w	800e3a2 <sys_sem_signal>

0800954c <lwip_netconn_do_recv>:
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(struct api_msg_msg *msg)
{
  msg->err = ERR_OK;
 800954c:	2300      	movs	r3, #0
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(struct api_msg_msg *msg)
{
 800954e:	b570      	push	{r4, r5, r6, lr}
  msg->err = ERR_OK;
 8009550:	7103      	strb	r3, [r0, #4]
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(struct api_msg_msg *msg)
{
 8009552:	4604      	mov	r4, r0
  msg->err = ERR_OK;
  if (msg->conn->pcb.tcp != NULL) {
 8009554:	6803      	ldr	r3, [r0, #0]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	b94a      	cbnz	r2, 800956e <lwip_netconn_do_recv+0x22>
          remaining -= recved;
        } while (remaining != 0);
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800955a:	6823      	ldr	r3, [r4, #0]
 800955c:	b1db      	cbz	r3, 8009596 <lwip_netconn_do_recv+0x4a>
 800955e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009562:	320b      	adds	r2, #11
 8009564:	bfa4      	itt	ge
 8009566:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 800956a:	721a      	strbge	r2, [r3, #8]
 800956c:	e013      	b.n	8009596 <lwip_netconn_do_recv+0x4a>
void
lwip_netconn_do_recv(struct api_msg_msg *msg)
{
  msg->err = ERR_OK;
  if (msg->conn->pcb.tcp != NULL) {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009574:	2b10      	cmp	r3, #16
 8009576:	d1f0      	bne.n	800955a <lwip_netconn_do_recv+0xe>
      if (msg->conn->pcb.tcp->state == LISTEN) {
        tcp_accepted(msg->conn->pcb.tcp);
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
 8009578:	6885      	ldr	r5, [r0, #8]
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800957a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
          tcp_recved(msg->conn->pcb.tcp, recved);
 800957e:	6823      	ldr	r3, [r4, #0]
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8009580:	bf34      	ite	cc
 8009582:	b2ae      	uxthcc	r6, r5
 8009584:	f64f 76ff 	movwcs	r6, #65535	; 0xffff
          tcp_recved(msg->conn->pcb.tcp, recved);
 8009588:	6858      	ldr	r0, [r3, #4]
 800958a:	4631      	mov	r1, r6
 800958c:	f001 ffbe 	bl	800b50c <tcp_recved>
          remaining -= recved;
        } while (remaining != 0);
 8009590:	1bad      	subs	r5, r5, r6
 8009592:	d1f2      	bne.n	800957a <lwip_netconn_do_recv+0x2e>
 8009594:	e7e1      	b.n	800955a <lwip_netconn_do_recv+0xe>
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009596:	6820      	ldr	r0, [r4, #0]
}
 8009598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          remaining -= recved;
        } while (remaining != 0);
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800959c:	300c      	adds	r0, #12
 800959e:	f004 bf00 	b.w	800e3a2 <sys_sem_signal>

080095a2 <lwip_netconn_do_write>:
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(struct api_msg_msg *msg)
{
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80095a2:	6803      	ldr	r3, [r0, #0]
 80095a4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80095a8:	f112 0f0b 	cmn.w	r2, #11
 80095ac:	db14      	blt.n	80095d8 <lwip_netconn_do_write+0x36>
    msg->err = msg->conn->last_err;
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80095ae:	781a      	ldrb	r2, [r3, #0]
 80095b0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80095b4:	2a10      	cmp	r2, #16
 80095b6:	d10e      	bne.n	80095d6 <lwip_netconn_do_write+0x34>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80095b8:	785a      	ldrb	r2, [r3, #1]
 80095ba:	b10a      	cbz	r2, 80095c0 <lwip_netconn_do_write+0x1e>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 80095bc:	22fb      	movs	r2, #251	; 0xfb
 80095be:	e00b      	b.n	80095d8 <lwip_netconn_do_write+0x36>
      } else if (msg->conn->pcb.tcp != NULL) {
 80095c0:	6859      	ldr	r1, [r3, #4]
 80095c2:	b131      	cbz	r1, 80095d2 <lwip_netconn_do_write+0x30>
        msg->conn->state = NETCONN_WRITE;
 80095c4:	2101      	movs	r1, #1
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
        msg->conn->current_msg = msg;
 80095c6:	6258      	str	r0, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80095c8:	621a      	str	r2, [r3, #32]
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
 80095ca:	4618      	mov	r0, r3
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
        msg->conn->state = NETCONN_WRITE;
 80095cc:	7059      	strb	r1, [r3, #1]
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
 80095ce:	f7ff bb52 	b.w	8008c76 <lwip_netconn_do_writemore>
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
      } else {
        msg->err = ERR_CONN;
 80095d2:	22f5      	movs	r2, #245	; 0xf5
 80095d4:	e000      	b.n	80095d8 <lwip_netconn_do_write+0x36>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 80095d6:	22fa      	movs	r2, #250	; 0xfa
 80095d8:	7102      	strb	r2, [r0, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80095da:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80095de:	320b      	adds	r2, #11
 80095e0:	bfa4      	itt	ge
 80095e2:	f990 2004 	ldrsbge.w	r2, [r0, #4]
 80095e6:	721a      	strbge	r2, [r3, #8]
 80095e8:	6800      	ldr	r0, [r0, #0]
 80095ea:	300c      	adds	r0, #12
 80095ec:	f004 bed9 	b.w	800e3a2 <sys_sem_signal>

080095f0 <lwip_netconn_do_close>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(struct api_msg_msg *msg)
{
 80095f0:	b510      	push	{r4, lr}
 80095f2:	4604      	mov	r4, r0
#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80095f4:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80095f6:	6843      	ldr	r3, [r0, #4]
 80095f8:	b163      	cbz	r3, 8009614 <lwip_netconn_do_close+0x24>
 80095fa:	7803      	ldrb	r3, [r0, #0]
 80095fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009600:	2b10      	cmp	r3, #16
 8009602:	d107      	bne.n	8009614 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009604:	7a22      	ldrb	r2, [r4, #8]
 */
void
lwip_netconn_do_close(struct api_msg_msg *msg)
{
#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009606:	7843      	ldrb	r3, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009608:	2a03      	cmp	r2, #3
 800960a:	d001      	beq.n	8009610 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800960c:	2b02      	cmp	r3, #2
 800960e:	d001      	beq.n	8009614 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009610:	2b03      	cmp	r3, #3
 8009612:	d101      	bne.n	8009618 <lwip_netconn_do_close+0x28>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009614:	23f5      	movs	r3, #245	; 0xf5
 8009616:	e002      	b.n	800961e <lwip_netconn_do_close+0x2e>
    } else if (state == NETCONN_WRITE) {
 8009618:	2b01      	cmp	r3, #1
 800961a:	d10e      	bne.n	800963a <lwip_netconn_do_close+0x4a>
        /* In this case, let the write continue and do not interfere with
           conn->current_msg or conn->state! */
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800961c:	23fb      	movs	r3, #251	; 0xfb
 800961e:	7123      	strb	r3, [r4, #4]
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 8009620:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8009624:	330b      	adds	r3, #11
 8009626:	bfa4      	itt	ge
 8009628:	f994 3004 	ldrsbge.w	r3, [r4, #4]
 800962c:	7203      	strbge	r3, [r0, #8]
 800962e:	6820      	ldr	r0, [r4, #0]
}
 8009630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 8009634:	300c      	adds	r0, #12
 8009636:	f004 beb4 	b.w	800e3a2 <sys_sem_signal>
      }
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
#endif /* LWIP_NETCONN_FULLDUPLEX */
    } else {
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800963a:	07d3      	lsls	r3, r2, #31
 800963c:	d501      	bpl.n	8009642 <lwip_netconn_do_close+0x52>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800963e:	f7ff fd8a 	bl	8009156 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009642:	6820      	ldr	r0, [r4, #0]
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009644:	2304      	movs	r3, #4
      msg->conn->current_msg = msg;
 8009646:	6244      	str	r4, [r0, #36]	; 0x24
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009648:	7043      	strb	r3, [r0, #1]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800964a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
        LOCK_TCPIP_CORE();
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
 800964e:	f7ff bbaf 	b.w	8008db0 <lwip_netconn_do_close_internal>

08009652 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8009652:	b508      	push	{r3, lr}
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009654:	2004      	movs	r0, #4
 8009656:	f001 fc5f 	bl	800af18 <memp_malloc>
  if (buf != NULL) {
 800965a:	b120      	cbz	r0, 8009666 <netbuf_new+0x14>
    buf->p = NULL;
 800965c:	2300      	movs	r3, #0
 800965e:	6003      	str	r3, [r0, #0]
    buf->ptr = NULL;
 8009660:	6043      	str	r3, [r0, #4]
    ip_addr_set_zero(&buf->addr);
 8009662:	6083      	str	r3, [r0, #8]
    buf->port = 0;
 8009664:	8183      	strh	r3, [r0, #12]
#endif /* LWIP_NETBUF_RECVINFO || LWIP_CHECKSUM_ON_COPY */
    return buf;
  } else {
    return NULL;
  }
}
 8009666:	bd08      	pop	{r3, pc}

08009668 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009668:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800966a:	4604      	mov	r4, r0
 800966c:	b160      	cbz	r0, 8009688 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800966e:	6800      	ldr	r0, [r0, #0]
 8009670:	b120      	cbz	r0, 800967c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8009672:	f001 fd17 	bl	800b0a4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	6063      	str	r3, [r4, #4]
 800967a:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800967c:	4621      	mov	r1, r4
 800967e:	2004      	movs	r0, #4
  }
}
 8009680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (buf != NULL) {
    if (buf->p != NULL) {
      pbuf_free(buf->p);
      buf->p = buf->ptr = NULL;
    }
    memp_free(MEMP_NETBUF, buf);
 8009684:	f001 bc54 	b.w	800af30 <memp_free>
 8009688:	bd10      	pop	{r4, pc}

0800968a <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800968a:	b570      	push	{r4, r5, r6, lr}
 800968c:	460e      	mov	r6, r1
 800968e:	4615      	mov	r5, r2
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8009690:	4604      	mov	r4, r0
 8009692:	b1a0      	cbz	r0, 80096be <netbuf_ref+0x34>
  if (buf->p != NULL) {
 8009694:	6800      	ldr	r0, [r0, #0]
 8009696:	b108      	cbz	r0, 800969c <netbuf_ref+0x12>
    pbuf_free(buf->p);
 8009698:	f001 fd04 	bl	800b0a4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800969c:	2100      	movs	r1, #0
 800969e:	2202      	movs	r2, #2
 80096a0:	4608      	mov	r0, r1
 80096a2:	f001 fd1f 	bl	800b0e4 <pbuf_alloc>
 80096a6:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 80096a8:	b918      	cbnz	r0, 80096b2 <netbuf_ref+0x28>
    buf->ptr = NULL;
 80096aa:	6060      	str	r0, [r4, #4]
    return ERR_MEM;
 80096ac:	f04f 30ff 	mov.w	r0, #4294967295
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 80096b2:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 80096b4:	8105      	strh	r5, [r0, #8]
 80096b6:	8145      	strh	r5, [r0, #10]
  buf->ptr = buf->p;
 80096b8:	6060      	str	r0, [r4, #4]
  return ERR_OK;
 80096ba:	2000      	movs	r0, #0
 80096bc:	bd70      	pop	{r4, r5, r6, pc}
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80096be:	f06f 000e 	mvn.w	r0, #14
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
}
 80096c2:	bd70      	pop	{r4, r5, r6, pc}

080096c4 <netbuf_data>:
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80096c4:	b150      	cbz	r0, 80096dc <netbuf_data+0x18>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80096c6:	b149      	cbz	r1, 80096dc <netbuf_data+0x18>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80096c8:	b142      	cbz	r2, 80096dc <netbuf_data+0x18>

  if (buf->ptr == NULL) {
 80096ca:	6843      	ldr	r3, [r0, #4]
 80096cc:	b14b      	cbz	r3, 80096e2 <netbuf_data+0x1e>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 80096d2:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 80096d4:	2000      	movs	r0, #0

  if (buf->ptr == NULL) {
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
 80096d6:	895b      	ldrh	r3, [r3, #10]
 80096d8:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80096da:	4770      	bx	lr
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80096dc:	f06f 000e 	mvn.w	r0, #14
 80096e0:	4770      	bx	lr
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);

  if (buf->ptr == NULL) {
    return ERR_BUF;
 80096e2:	f06f 0001 	mvn.w	r0, #1
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 80096e6:	4770      	bx	lr

080096e8 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80096e8:	4b19      	ldr	r3, [pc, #100]	; (8009750 <tcpip_thread+0x68>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80096ec:	b507      	push	{r0, r1, r2, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80096ee:	b113      	cbz	r3, 80096f6 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 80096f0:	4a18      	ldr	r2, [pc, #96]	; (8009754 <tcpip_thread+0x6c>)
 80096f2:	6810      	ldr	r0, [r2, #0]
 80096f4:	4798      	blx	r3
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
 80096f6:	a901      	add	r1, sp, #4
 80096f8:	4817      	ldr	r0, [pc, #92]	; (8009758 <tcpip_thread+0x70>)
 80096fa:	f001 fa69 	bl	800abd0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
 80096fe:	9b01      	ldr	r3, [sp, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0f8      	beq.n	80096f6 <tcpip_thread+0xe>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
      continue;
    }
    switch (msg->type) {
 8009704:	781a      	ldrb	r2, [r3, #0]
 8009706:	2a03      	cmp	r2, #3
 8009708:	d8f5      	bhi.n	80096f6 <tcpip_thread+0xe>
 800970a:	e8df f002 	tbb	[pc, r2]
 800970e:	0602      	.short	0x0602
 8009710:	1d15      	.short	0x1d15
#if LWIP_NETCONN || LWIP_SOCKET
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
 8009712:	6898      	ldr	r0, [r3, #8]
 8009714:	6803      	ldr	r3, [r0, #0]
 8009716:	3004      	adds	r0, #4
 8009718:	e7ec      	b.n	80096f4 <tcpip_thread+0xc>

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800971a:	68d9      	ldr	r1, [r3, #12]
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 800971c:	6898      	ldr	r0, [r3, #8]

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800971e:	f891 2033 	ldrb.w	r2, [r1, #51]	; 0x33
 8009722:	f012 0f18 	tst.w	r2, #24
 8009726:	d002      	beq.n	800972e <tcpip_thread+0x46>
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 8009728:	f004 fcd4 	bl	800e0d4 <ethernet_input>
 800972c:	e001      	b.n	8009732 <tcpip_thread+0x4a>
      } else
#endif /* LWIP_ETHERNET */
      ip_input(msg->msg.inp.p, msg->msg.inp.netif);
 800972e:	f001 f92b 	bl	800a988 <ip_input>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009732:	9901      	ldr	r1, [sp, #4]
 8009734:	2007      	movs	r0, #7
 8009736:	e004      	b.n	8009742 <tcpip_thread+0x5a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009738:	68d8      	ldr	r0, [r3, #12]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800973e:	9901      	ldr	r1, [sp, #4]
 8009740:	2006      	movs	r0, #6
 8009742:	f001 fbf5 	bl	800af30 <memp_free>
      break;
 8009746:	e7d6      	b.n	80096f6 <tcpip_thread+0xe>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009748:	689a      	ldr	r2, [r3, #8]
 800974a:	68d8      	ldr	r0, [r3, #12]
 800974c:	4790      	blx	r2
      break;
 800974e:	e7d2      	b.n	80096f6 <tcpip_thread+0xe>
 8009750:	20042de4 	.word	0x20042de4
 8009754:	20042de0 	.word	0x20042de0
 8009758:	20042ddc 	.word	0x20042ddc

0800975c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	4606      	mov	r6, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid_val(mbox)) {
 8009760:	480e      	ldr	r0, [pc, #56]	; (800979c <tcpip_input+0x40>)
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009762:	460d      	mov	r5, r1
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid_val(mbox)) {
 8009764:	f004 fdd7 	bl	800e316 <sys_mbox_valid>
 8009768:	b190      	cbz	r0, 8009790 <tcpip_input+0x34>
    return ERR_VAL;
  }
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800976a:	2007      	movs	r0, #7
 800976c:	f001 fbd4 	bl	800af18 <memp_malloc>
  if (msg == NULL) {
 8009770:	4604      	mov	r4, r0
 8009772:	b180      	cbz	r0, 8009796 <tcpip_input+0x3a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8009774:	2301      	movs	r3, #1
  msg->msg.inp.p = p;
 8009776:	6086      	str	r6, [r0, #8]
  msg->msg.inp.netif = inp;
 8009778:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800977a:	4601      	mov	r1, r0
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  if (msg == NULL) {
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800977c:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800977e:	4807      	ldr	r0, [pc, #28]	; (800979c <tcpip_input+0x40>)
 8009780:	f004 fd83 	bl	800e28a <sys_mbox_trypost>
 8009784:	b148      	cbz	r0, 800979a <tcpip_input+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009786:	4621      	mov	r1, r4
 8009788:	2007      	movs	r0, #7
 800978a:	f001 fbd1 	bl	800af30 <memp_free>
 800978e:	e002      	b.n	8009796 <tcpip_input+0x3a>
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid_val(mbox)) {
    return ERR_VAL;
 8009790:	f06f 0005 	mvn.w	r0, #5
 8009794:	bd70      	pop	{r4, r5, r6, pc}
  }
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  if (msg == NULL) {
    return ERR_MEM;
 8009796:	f04f 30ff 	mov.w	r0, #4294967295
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	20042ddc 	.word	0x20042ddc

080097a0 <tcpip_apimsg>:
tcpip_apimsg(struct api_msg *apimsg)
{
  TCPIP_MSG_VAR_DECLARE(msg);
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
 80097a0:	23fa      	movs	r3, #250	; 0xfa
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_apimsg(struct api_msg *apimsg)
{
 80097a2:	b530      	push	{r4, r5, lr}
 80097a4:	4604      	mov	r4, r0
 80097a6:	b085      	sub	sp, #20
  TCPIP_MSG_VAR_DECLARE(msg);
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
 80097a8:	7203      	strb	r3, [r0, #8]
#endif

  if (sys_mbox_valid_val(mbox)) {
 80097aa:	480c      	ldr	r0, [pc, #48]	; (80097dc <tcpip_apimsg+0x3c>)
 80097ac:	f004 fdb3 	bl	800e316 <sys_mbox_valid>
 80097b0:	b178      	cbz	r0, 80097d2 <tcpip_apimsg+0x32>
    TCPIP_MSG_VAR_ALLOC(msg);
    TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 80097b2:	2500      	movs	r5, #0
#if LWIP_NETCONN_SEM_PER_THREAD
    apimsg->msg.op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
    LWIP_ASSERT("netconn semaphore not initialized",
      sys_sem_valid(apimsg->msg.op_completed_sem));
#endif
    sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 80097b4:	4669      	mov	r1, sp
 80097b6:	4809      	ldr	r0, [pc, #36]	; (80097dc <tcpip_apimsg+0x3c>)
  apimsg->msg.err = ERR_VAL;
#endif

  if (sys_mbox_valid_val(mbox)) {
    TCPIP_MSG_VAR_ALLOC(msg);
    TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 80097b8:	f88d 5000 	strb.w	r5, [sp]
    TCPIP_MSG_VAR_REF(msg).msg.apimsg = apimsg;
 80097bc:	9402      	str	r4, [sp, #8]
#if LWIP_NETCONN_SEM_PER_THREAD
    apimsg->msg.op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
    LWIP_ASSERT("netconn semaphore not initialized",
      sys_sem_valid(apimsg->msg.op_completed_sem));
#endif
    sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 80097be:	f004 fd54 	bl	800e26a <sys_mbox_post>
    sys_arch_sem_wait(LWIP_API_MSG_SEM(&apimsg->msg), 0);
 80097c2:	6860      	ldr	r0, [r4, #4]
 80097c4:	4629      	mov	r1, r5
 80097c6:	300c      	adds	r0, #12
 80097c8:	f004 fdcb 	bl	800e362 <sys_arch_sem_wait>
    TCPIP_MSG_VAR_FREE(msg);
    return apimsg->msg.err;
 80097cc:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80097d0:	e001      	b.n	80097d6 <tcpip_apimsg+0x36>
  }
  return ERR_VAL;
 80097d2:	f06f 0005 	mvn.w	r0, #5
}
 80097d6:	b005      	add	sp, #20
 80097d8:	bd30      	pop	{r4, r5, pc}
 80097da:	bf00      	nop
 80097dc:	20042ddc 	.word	0x20042ddc

080097e0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80097e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097e2:	4605      	mov	r5, r0
 80097e4:	460c      	mov	r4, r1
  lwip_init();
 80097e6:	f000 f876 	bl	80098d6 <lwip_init>

  tcpip_init_done = initfunc;
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <tcpip_init+0x30>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80097ec:	2105      	movs	r1, #5
 80097ee:	4809      	ldr	r0, [pc, #36]	; (8009814 <tcpip_init+0x34>)
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  lwip_init();

  tcpip_init_done = initfunc;
 80097f0:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <tcpip_init+0x38>)
 80097f4:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80097f6:	f004 fd21 	bl	800e23c <sys_mbox_new>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80097fa:	2305      	movs	r3, #5
 80097fc:	2200      	movs	r2, #0
 80097fe:	4907      	ldr	r1, [pc, #28]	; (800981c <tcpip_init+0x3c>)
 8009800:	9300      	str	r3, [sp, #0]
 8009802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009806:	4806      	ldr	r0, [pc, #24]	; (8009820 <tcpip_init+0x40>)
 8009808:	f004 fde2 	bl	800e3d0 <sys_thread_new>
}
 800980c:	b003      	add	sp, #12
 800980e:	bd30      	pop	{r4, r5, pc}
 8009810:	20042de4 	.word	0x20042de4
 8009814:	20042ddc 	.word	0x20042ddc
 8009818:	20042de0 	.word	0x20042de0
 800981c:	080096e9 	.word	0x080096e9
 8009820:	0802f345 	.word	0x0802f345

08009824 <lwip_htons>:
 8009824:	ba40      	rev16	r0, r0
 8009826:	b280      	uxth	r0, r0
 8009828:	4770      	bx	lr

0800982a <lwip_ntohs>:
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
 800982a:	ba40      	rev16	r0, r0
}
 800982c:	b280      	uxth	r0, r0
 800982e:	4770      	bx	lr

08009830 <lwip_htonl>:
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
 8009830:	ba00      	rev	r0, r0
 8009832:	4770      	bx	lr

08009834 <lwip_ntohl>:
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  return lwip_htonl(n);
 8009834:	f7ff bffc 	b.w	8009830 <lwip_htonl>

08009838 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009838:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800983a:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800983c:	f010 0401 	ands.w	r4, r0, #1
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8009840:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009844:	d006      	beq.n	8009854 <lwip_standard_chksum+0x1c>
 8009846:	4299      	cmp	r1, r3
 8009848:	dd10      	ble.n	800986c <lwip_standard_chksum+0x34>
    ((u8_t *)&t)[1] = *pb++;
 800984a:	7803      	ldrb	r3, [r0, #0]
    len--;
 800984c:	3901      	subs	r1, #1
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
 800984e:	3001      	adds	r0, #1
 8009850:	f88d 3007 	strb.w	r3, [sp, #7]
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
  u32_t sum = 0;
 8009854:	2300      	movs	r3, #0
    len--;
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8009856:	2901      	cmp	r1, #1
 8009858:	dd04      	ble.n	8009864 <lwip_standard_chksum+0x2c>
    sum += *ps++;
 800985a:	f830 2b02 	ldrh.w	r2, [r0], #2
    len -= 2;
 800985e:	3902      	subs	r1, #2
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
    sum += *ps++;
 8009860:	4413      	add	r3, r2
 8009862:	e7f8      	b.n	8009856 <lwip_standard_chksum+0x1e>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009864:	bf04      	itt	eq
 8009866:	7802      	ldrbeq	r2, [r0, #0]
 8009868:	f88d 2006 	strbeq.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800986c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8009870:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009872:	b298      	uxth	r0, r3
 8009874:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8009878:	b29a      	uxth	r2, r3
 800987a:	eb02 4013 	add.w	r0, r2, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800987e:	b124      	cbz	r4, 800988a <lwip_standard_chksum+0x52>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009880:	0203      	lsls	r3, r0, #8
 8009882:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009886:	b29b      	uxth	r3, r3
 8009888:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800988a:	b280      	uxth	r0, r0
 800988c:	b002      	add	sp, #8
 800988e:	bd10      	pop	{r4, pc}

08009890 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009890:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
 8009892:	2500      	movs	r5, #0
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009894:	4606      	mov	r6, r0
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 8009896:	462c      	mov	r4, r5
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
 8009898:	b1a6      	cbz	r6, 80098c4 <inet_chksum_pbuf+0x34>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800989a:	8971      	ldrh	r1, [r6, #10]
 800989c:	6870      	ldr	r0, [r6, #4]
 800989e:	f7ff ffcb 	bl	8009838 <lwip_standard_chksum>
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80098a2:	8973      	ldrh	r3, [r6, #10]
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
 80098a4:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80098a6:	07db      	lsls	r3, r3, #31

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
 80098a8:	b284      	uxth	r4, r0
 80098aa:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 80098ae:	d507      	bpl.n	80098c0 <inet_chksum_pbuf+0x30>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80098b0:	0223      	lsls	r3, r4, #8
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
      swapped = 1 - swapped;
 80098b2:	f1c5 0501 	rsb	r5, r5, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 80098b6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80098ba:	b29b      	uxth	r3, r3
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
      swapped = 1 - swapped;
 80098bc:	b2ed      	uxtb	r5, r5
      acc = SWAP_BYTES_IN_WORD(acc);
 80098be:	431c      	orrs	r4, r3
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
 80098c0:	6836      	ldr	r6, [r6, #0]
 80098c2:	e7e9      	b.n	8009898 <inet_chksum_pbuf+0x8>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 80098c4:	b125      	cbz	r5, 80098d0 <inet_chksum_pbuf+0x40>
    acc = SWAP_BYTES_IN_WORD(acc);
 80098c6:	0223      	lsls	r3, r4, #8
 80098c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 80098d0:	43e0      	mvns	r0, r4
}
 80098d2:	b280      	uxth	r0, r0
 80098d4:	bd70      	pop	{r4, r5, r6, pc}

080098d6 <lwip_init>:
/**
 * Initialize all modules.
 */
void
lwip_init(void)
{
 80098d6:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80098d8:	f004 fd74 	bl	800e3c4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80098dc:	f001 f9aa 	bl	800ac34 <mem_init>
  memp_init();
 80098e0:	f001 fb06 	bl	800aef0 <memp_init>
  pbuf_init();
  netif_init();
 80098e4:	f001 fb39 	bl	800af5a <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80098e8:	f003 ff7d 	bl	800d7e6 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80098ec:	f001 fd76 	bl	800b3dc <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80098f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80098f4:	f001 b926 	b.w	800ab44 <sys_timeouts_init>

080098f8 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 80098f8:	7b03      	ldrb	r3, [r0, #12]
 80098fa:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 80098fc:	bf1f      	itttt	ne
 80098fe:	2300      	movne	r3, #0
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
    dhcp->state = new_state;
 8009900:	7301      	strbne	r1, [r0, #12]
    dhcp->tries = 0;
 8009902:	7343      	strbne	r3, [r0, #13]
    dhcp->request_timeout = 0;
 8009904:	8343      	strhne	r3, [r0, #26]
 8009906:	4770      	bx	lr

08009908 <dhcp_option>:
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8009908:	8b03      	ldrh	r3, [r0, #24]
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800990a:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800990c:	6944      	ldr	r4, [r0, #20]
 800990e:	1c5d      	adds	r5, r3, #1
 8009910:	4423      	add	r3, r4
 8009912:	8305      	strh	r5, [r0, #24]
 8009914:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8009918:	8b03      	ldrh	r3, [r0, #24]
 800991a:	6941      	ldr	r1, [r0, #20]
 800991c:	1c5c      	adds	r4, r3, #1
 800991e:	440b      	add	r3, r1
 8009920:	8304      	strh	r4, [r0, #24]
 8009922:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8009926:	bd30      	pop	{r4, r5, pc}

08009928 <dhcp_option_short>:
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8009928:	8b03      	ldrh	r3, [r0, #24]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800992a:	6942      	ldr	r2, [r0, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800992c:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800992e:	1c5c      	adds	r4, r3, #1
 8009930:	4413      	add	r3, r2
 8009932:	0a0a      	lsrs	r2, r1, #8
 8009934:	8304      	strh	r4, [r0, #24]
 8009936:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800993a:	8b03      	ldrh	r3, [r0, #24]
 800993c:	6942      	ldr	r2, [r0, #20]
 800993e:	1c5c      	adds	r4, r3, #1
 8009940:	4413      	add	r3, r2
 8009942:	8304      	strh	r4, [r0, #24]
 8009944:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8009948:	bd10      	pop	{r4, pc}

0800994a <dhcp_option_long>:
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800994a:	8b03      	ldrh	r3, [r0, #24]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800994c:	6942      	ldr	r2, [r0, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800994e:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8009950:	1c5c      	adds	r4, r3, #1
 8009952:	4413      	add	r3, r2
 8009954:	0e0a      	lsrs	r2, r1, #24
 8009956:	8304      	strh	r4, [r0, #24]
 8009958:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800995c:	8b03      	ldrh	r3, [r0, #24]
 800995e:	6942      	ldr	r2, [r0, #20]
 8009960:	1c5c      	adds	r4, r3, #1
 8009962:	4413      	add	r3, r2
 8009964:	0c0a      	lsrs	r2, r1, #16
 8009966:	8304      	strh	r4, [r0, #24]
 8009968:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800996c:	8b03      	ldrh	r3, [r0, #24]
 800996e:	6942      	ldr	r2, [r0, #20]
 8009970:	1c5c      	adds	r4, r3, #1
 8009972:	4413      	add	r3, r2
 8009974:	0a0a      	lsrs	r2, r1, #8
 8009976:	8304      	strh	r4, [r0, #24]
 8009978:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800997c:	8b03      	ldrh	r3, [r0, #24]
 800997e:	6942      	ldr	r2, [r0, #20]
 8009980:	1c5c      	adds	r4, r3, #1
 8009982:	4413      	add	r3, r2
 8009984:	8304      	strh	r4, [r0, #24]
 8009986:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 800998a:	bd10      	pop	{r4, pc}

0800998c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009990:	460c      	mov	r4, r1
 8009992:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009994:	4607      	mov	r7, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	f000 8098 	beq.w	8009acc <dhcp_create_msg+0x140>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800999c:	2900      	cmp	r1, #0
 800999e:	f000 8099 	beq.w	8009ad4 <dhcp_create_msg+0x148>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80099a2:	2200      	movs	r2, #0
 80099a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80099a8:	4610      	mov	r0, r2
 80099aa:	f001 fb9b 	bl	800b0e4 <pbuf_alloc>
 80099ae:	6120      	str	r0, [r4, #16]
  if (dhcp->p_out == NULL) {
 80099b0:	2800      	cmp	r0, #0
 80099b2:	f000 8093 	beq.w	8009adc <dhcp_create_msg+0x150>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
 80099b6:	2e03      	cmp	r6, #3
 80099b8:	d007      	beq.n	80099ca <dhcp_create_msg+0x3e>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80099ba:	7b63      	ldrb	r3, [r4, #13]
 80099bc:	4d49      	ldr	r5, [pc, #292]	; (8009ae4 <dhcp_create_msg+0x158>)
 80099be:	b913      	cbnz	r3, 80099c6 <dhcp_create_msg+0x3a>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80099c0:	f008 f854 	bl	8011a6c <rand>
 80099c4:	6028      	str	r0, [r5, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80099c6:	682b      	ldr	r3, [r5, #0]
 80099c8:	6023      	str	r3, [r4, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80099ca:	6923      	ldr	r3, [r4, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
 80099cc:	2500      	movs	r5, #0
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80099ce:	685a      	ldr	r2, [r3, #4]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80099d0:	2301      	movs	r3, #1
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80099d2:	6162      	str	r2, [r4, #20]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 80099d4:	7013      	strb	r3, [r2, #0]
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 80099d6:	6962      	ldr	r2, [r4, #20]
 80099d8:	7053      	strb	r3, [r2, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 80099da:	6963      	ldr	r3, [r4, #20]
 80099dc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80099e0:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 80099e2:	6963      	ldr	r3, [r4, #20]
 80099e4:	70dd      	strb	r5, [r3, #3]
  dhcp->msg_out->xid = htonl(dhcp->xid);
 80099e6:	6820      	ldr	r0, [r4, #0]
 80099e8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80099ec:	f7ff ff20 	bl	8009830 <lwip_htonl>
  dhcp->msg_out->secs = 0;
 80099f0:	6963      	ldr	r3, [r4, #20]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80099f2:	2e04      	cmp	r6, #4
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
  dhcp->msg_out->xid = htonl(dhcp->xid);
 80099f4:	f8c8 0004 	str.w	r0, [r8, #4]
  dhcp->msg_out->secs = 0;
 80099f8:	721d      	strb	r5, [r3, #8]
 80099fa:	725d      	strb	r5, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 80099fc:	729d      	strb	r5, [r3, #10]
 80099fe:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8009a00:	731d      	strb	r5, [r3, #12]
 8009a02:	735d      	strb	r5, [r3, #13]
 8009a04:	739d      	strb	r5, [r3, #14]
 8009a06:	73dd      	strb	r5, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8009a08:	d008      	beq.n	8009a1c <dhcp_create_msg+0x90>
 8009a0a:	1ff2      	subs	r2, r6, #7
 8009a0c:	2a01      	cmp	r2, #1
 8009a0e:	d905      	bls.n	8009a1c <dhcp_create_msg+0x90>
 8009a10:	2e03      	cmp	r6, #3
 8009a12:	d105      	bne.n	8009a20 <dhcp_create_msg+0x94>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8009a14:	7b22      	ldrb	r2, [r4, #12]
 8009a16:	3a04      	subs	r2, #4
 8009a18:	2a01      	cmp	r2, #1
 8009a1a:	d801      	bhi.n	8009a20 <dhcp_create_msg+0x94>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8009a20:	2200      	movs	r2, #0
 8009a22:	741a      	strb	r2, [r3, #16]
 8009a24:	745a      	strb	r2, [r3, #17]
 8009a26:	749a      	strb	r2, [r3, #18]
 8009a28:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8009a2a:	751a      	strb	r2, [r3, #20]
 8009a2c:	755a      	strb	r2, [r3, #21]
 8009a2e:	759a      	strb	r2, [r3, #22]
 8009a30:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 8009a32:	761a      	strb	r2, [r3, #24]
 8009a34:	765a      	strb	r2, [r3, #25]
 8009a36:	769a      	strb	r2, [r3, #26]
 8009a38:	76da      	strb	r2, [r3, #27]
 8009a3a:	b291      	uxth	r1, r2
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8009a3c:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 8009a40:	6963      	ldr	r3, [r4, #20]
 8009a42:	4288      	cmp	r0, r1
 8009a44:	d905      	bls.n	8009a52 <dhcp_create_msg+0xc6>
 8009a46:	2905      	cmp	r1, #5
 8009a48:	d803      	bhi.n	8009a52 <dhcp_create_msg+0xc6>
 8009a4a:	18b9      	adds	r1, r7, r2
 8009a4c:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8009a50:	e000      	b.n	8009a54 <dhcp_create_msg+0xc8>
 8009a52:	2100      	movs	r1, #0
 8009a54:	4413      	add	r3, r2
 8009a56:	3201      	adds	r2, #1
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009a58:	2a10      	cmp	r2, #16
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8009a5a:	7719      	strb	r1, [r3, #28]
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009a5c:	d1ed      	bne.n	8009a3a <dhcp_create_msg+0xae>
 8009a5e:	2300      	movs	r3, #0
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 8009a60:	4619      	mov	r1, r3
 8009a62:	6962      	ldr	r2, [r4, #20]
 8009a64:	441a      	add	r2, r3
 8009a66:	3301      	adds	r3, #1
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8009a68:	2b40      	cmp	r3, #64	; 0x40
    dhcp->msg_out->sname[i] = 0;
 8009a6a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8009a6e:	d1f8      	bne.n	8009a62 <dhcp_create_msg+0xd6>
 8009a70:	2200      	movs	r2, #0
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 8009a72:	4610      	mov	r0, r2
 8009a74:	6963      	ldr	r3, [r4, #20]
 8009a76:	1899      	adds	r1, r3, r2
 8009a78:	3201      	adds	r2, #1
 8009a7a:	2300      	movs	r3, #0
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8009a7c:	2a80      	cmp	r2, #128	; 0x80
    dhcp->msg_out->file[i] = 0;
 8009a7e:	f881 006c 	strb.w	r0, [r1, #108]	; 0x6c
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8009a82:	d1f7      	bne.n	8009a74 <dhcp_create_msg+0xe8>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8009a84:	6962      	ldr	r2, [r4, #20]
 8009a86:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009a8a:	2163      	movs	r1, #99	; 0x63
 8009a8c:	f882 00ed 	strb.w	r0, [r2, #237]	; 0xed
 8009a90:	2053      	movs	r0, #83	; 0x53
 8009a92:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
 8009a96:	f882 00ee 	strb.w	r0, [r2, #238]	; 0xee
 8009a9a:	f882 10ef 	strb.w	r1, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
 8009a9e:	8323      	strh	r3, [r4, #24]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8009aa0:	6962      	ldr	r2, [r4, #20]
 8009aa2:	441a      	add	r2, r3
 8009aa4:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
 8009aa8:	3301      	adds	r3, #1
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8009aaa:	2b44      	cmp	r3, #68	; 0x44
 8009aac:	d1f8      	bne.n	8009aa0 <dhcp_create_msg+0x114>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8009aae:	4620      	mov	r0, r4
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	2135      	movs	r1, #53	; 0x35
 8009ab4:	f7ff ff28 	bl	8009908 <dhcp_option>
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009ab8:	8b23      	ldrh	r3, [r4, #24]
 8009aba:	6962      	ldr	r2, [r4, #20]
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
 8009abc:	2000      	movs	r0, #0
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009abe:	1c59      	adds	r1, r3, #1
 8009ac0:	4413      	add	r3, r2
 8009ac2:	8321      	strh	r1, [r4, #24]
 8009ac4:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009acc:	f06f 000e 	mvn.w	r0, #14
 8009ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8009ad4:	f06f 0005 	mvn.w	r0, #5
 8009ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  if (dhcp->p_out == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
 8009ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae4:	20042de8 	.word	0x20042de8

08009ae8 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8009ae8:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8009aea:	4604      	mov	r4, r0
 8009aec:	b130      	cbz	r0, 8009afc <dhcp_delete_msg+0x14>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
 8009aee:	6900      	ldr	r0, [r0, #16]
 8009af0:	b108      	cbz	r0, 8009af6 <dhcp_delete_msg+0xe>
    pbuf_free(dhcp->p_out);
 8009af2:	f001 fad7 	bl	800b0a4 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	6123      	str	r3, [r4, #16]
  dhcp->msg_out = NULL;
 8009afa:	6163      	str	r3, [r4, #20]
 8009afc:	bd10      	pop	{r4, pc}

08009afe <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8009afe:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif->dhcp;
 8009b00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8009b02:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8009b04:	2108      	movs	r1, #8
 8009b06:	4620      	mov	r0, r4
 8009b08:	f7ff fef6 	bl	80098f8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8009b12:	4628      	mov	r0, r5
 8009b14:	f004 f9ea 	bl	800deec <etharp_query>
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8009b18:	7b63      	ldrb	r3, [r4, #13]
 8009b1a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009b1c:	bf1c      	itt	ne
 8009b1e:	3301      	addne	r3, #1
 8009b20:	7363      	strbne	r3, [r4, #13]
  }
  msecs = 500;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009b22:	2301      	movs	r3, #1
 8009b24:	8363      	strh	r3, [r4, #26]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}

08009b28 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8009b28:	b513      	push	{r0, r1, r4, lr}
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d060      	beq.n	8009bf0 <dhcp_bind+0xc8>
  dhcp = netif->dhcp;
 8009b2e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8009b30:	2c00      	cmp	r4, #0
 8009b32:	d05d      	beq.n	8009bf0 <dhcp_bind+0xc8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8009b34:	2300      	movs	r3, #0
 8009b36:	84a3      	strh	r3, [r4, #36]	; 0x24

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8009b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	d00b      	beq.n	8009b56 <dhcp_bind+0x2e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009b3e:	223c      	movs	r2, #60	; 0x3c
 8009b40:	331e      	adds	r3, #30
 8009b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	bf28      	it	cs
 8009b4e:	4613      	movcs	r3, r2
     if (timeout > 0xffff) {
       timeout = 0xffff;
     }
     dhcp->t0_timeout = (u16_t)timeout;
     if (dhcp->t0_timeout == 0) {
 8009b50:	b903      	cbnz	r3, 8009b54 <dhcp_bind+0x2c>
       dhcp->t0_timeout = 1;
 8009b52:	2301      	movs	r3, #1
 8009b54:	84e3      	strh	r3, [r4, #38]	; 0x26
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8009b56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	d00d      	beq.n	8009b78 <dhcp_bind+0x50>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009b5c:	223c      	movs	r2, #60	; 0x3c
 8009b5e:	331e      	adds	r3, #30
 8009b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	bf28      	it	cs
 8009b6c:	4613      	movcs	r3, r2
    if (timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t1_timeout = (u16_t)timeout;
    if (dhcp->t1_timeout == 0) {
 8009b6e:	b903      	cbnz	r3, 8009b72 <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
 8009b70:	2301      	movs	r3, #1
 8009b72:	83a3      	strh	r3, [r4, #28]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8009b74:	8ba3      	ldrh	r3, [r4, #28]
 8009b76:	8423      	strh	r3, [r4, #32]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8009b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b7a:	1c59      	adds	r1, r3, #1
 8009b7c:	d00d      	beq.n	8009b9a <dhcp_bind+0x72>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009b7e:	223c      	movs	r2, #60	; 0x3c
 8009b80:	331e      	adds	r3, #30
 8009b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	bf28      	it	cs
 8009b8e:	4613      	movcs	r3, r2
    if (timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t2_timeout = (u16_t)timeout;
    if (dhcp->t2_timeout == 0) {
 8009b90:	b903      	cbnz	r3, 8009b94 <dhcp_bind+0x6c>
      dhcp->t2_timeout = 1;
 8009b92:	2301      	movs	r3, #1
 8009b94:	83e3      	strh	r3, [r4, #30]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8009b96:	8be3      	ldrh	r3, [r4, #30]
 8009b98:	8463      	strh	r3, [r4, #34]	; 0x22
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8009b9a:	8be3      	ldrh	r3, [r4, #30]
 8009b9c:	8ba2      	ldrh	r2, [r4, #28]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d302      	bcc.n	8009ba8 <dhcp_bind+0x80>
 8009ba2:	b10b      	cbz	r3, 8009ba8 <dhcp_bind+0x80>
    dhcp->t1_timeout = 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	83a3      	strh	r3, [r4, #28]
  }

  if (dhcp->subnet_mask_given) {
 8009ba8:	7ba3      	ldrb	r3, [r4, #14]
 8009baa:	b10b      	cbz	r3, 8009bb0 <dhcp_bind+0x88>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8009bac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009bae:	e00b      	b.n	8009bc8 <dhcp_bind+0xa0>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8009bb0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if (first_octet <= 127) {
 8009bb4:	061a      	lsls	r2, r3, #24
 8009bb6:	d401      	bmi.n	8009bbc <dhcp_bind+0x94>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8009bb8:	23ff      	movs	r3, #255	; 0xff
 8009bba:	e005      	b.n	8009bc8 <dhcp_bind+0xa0>
    } else if (first_octet >= 192) {
 8009bbc:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8009bbe:	bf8c      	ite	hi
 8009bc0:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8009bc4:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8009bc8:	9300      	str	r3, [sp, #0]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8009bca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bcc:	9301      	str	r3, [sp, #4]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8009bce:	b92b      	cbnz	r3, 8009bdc <dhcp_bind+0xb4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8009bd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009bd2:	9b00      	ldr	r3, [sp, #0]
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009bda:	9301      	str	r3, [sp, #4]
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8009bdc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8009be0:	ab01      	add	r3, sp, #4
 8009be2:	466a      	mov	r2, sp
 8009be4:	f001 f9da 	bl	800af9c <netif_set_addr>
  /* interface is used by routing now that an address is set */

  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8009be8:	210a      	movs	r1, #10
 8009bea:	4620      	mov	r0, r4
 8009bec:	f7ff fe84 	bl	80098f8 <dhcp_set_state>
}
 8009bf0:	b002      	add	sp, #8
 8009bf2:	bd10      	pop	{r4, pc}

08009bf4 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8009bf4:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8009bf6:	b190      	cbz	r0, 8009c1e <dhcp_option_trailer+0x2a>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8009bf8:	8b03      	ldrh	r3, [r0, #24]
 8009bfa:	6942      	ldr	r2, [r0, #20]
 8009bfc:	1c59      	adds	r1, r3, #1
 8009bfe:	4413      	add	r3, r2
 8009c00:	22ff      	movs	r2, #255	; 0xff
 8009c02:	8301      	strh	r1, [r0, #24]
 8009c04:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8009c08:	2200      	movs	r2, #0
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8009c0a:	8b03      	ldrh	r3, [r0, #24]
 8009c0c:	2b43      	cmp	r3, #67	; 0x43
 8009c0e:	d806      	bhi.n	8009c1e <dhcp_option_trailer+0x2a>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8009c10:	6941      	ldr	r1, [r0, #20]
 8009c12:	1c5c      	adds	r4, r3, #1
 8009c14:	440b      	add	r3, r1
 8009c16:	8304      	strh	r4, [r0, #24]
 8009c18:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8009c1c:	e7f5      	b.n	8009c0a <dhcp_option_trailer+0x16>
 8009c1e:	bd10      	pop	{r4, pc}

08009c20 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8009c20:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif->dhcp;
 8009c22:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8009c24:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8009c26:	2103      	movs	r1, #3
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7ff fe65 	bl	80098f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009c2e:	2203      	movs	r2, #3
 8009c30:	4621      	mov	r1, r4
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff feaa 	bl	800998c <dhcp_create_msg>
  if (result == ERR_OK) {
 8009c38:	4605      	mov	r5, r0
 8009c3a:	bb40      	cbnz	r0, 8009c8e <dhcp_reboot+0x6e>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	2139      	movs	r1, #57	; 0x39
 8009c40:	4620      	mov	r0, r4
 8009c42:	f7ff fe61 	bl	8009908 <dhcp_option>
    dhcp_option_short(dhcp, 576);
 8009c46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c4a:	4620      	mov	r0, r4
 8009c4c:	f7ff fe6c 	bl	8009928 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009c50:	2204      	movs	r2, #4
 8009c52:	2132      	movs	r1, #50	; 0x32
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff fe57 	bl	8009908 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009c5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009c5c:	f7ff fdea 	bl	8009834 <lwip_ntohl>
 8009c60:	4601      	mov	r1, r0
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7ff fe71 	bl	800994a <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f7ff ffc3 	bl	8009bf4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009c6e:	8b21      	ldrh	r1, [r4, #24]
 8009c70:	6920      	ldr	r0, [r4, #16]
 8009c72:	31f0      	adds	r1, #240	; 0xf0
 8009c74:	b289      	uxth	r1, r1
 8009c76:	f001 fabb 	bl	800b1f0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8009c7a:	9600      	str	r6, [sp, #0]
 8009c7c:	2343      	movs	r3, #67	; 0x43
 8009c7e:	4a11      	ldr	r2, [pc, #68]	; (8009cc4 <dhcp_reboot+0xa4>)
 8009c80:	6921      	ldr	r1, [r4, #16]
 8009c82:	6860      	ldr	r0, [r4, #4]
 8009c84:	f003 feff 	bl	800da86 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff ff2d 	bl	8009ae8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009c8e:	7b63      	ldrb	r3, [r4, #13]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009c90:	4628      	mov	r0, r5
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009c92:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009c94:	bf1c      	itt	ne
 8009c96:	3301      	addne	r3, #1
 8009c98:	7363      	strbne	r3, [r4, #13]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009c9a:	7b63      	ldrb	r3, [r4, #13]
 8009c9c:	2b09      	cmp	r3, #9
 8009c9e:	bf96      	itet	ls
 8009ca0:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8009ca4:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8009ca8:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009cac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009cb0:	bf9c      	itt	ls
 8009cb2:	00db      	lslls	r3, r3, #3
 8009cb4:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009cb6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009cba:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cbe:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009cc0:	b002      	add	sp, #8
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	0802f350 	.word	0x0802f350

08009cc8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8009cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009cca:	2300      	movs	r3, #0
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
 8009ccc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8009cce:	4606      	mov	r6, r0
  err_t result = ERR_OK;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009cd0:	2106      	movs	r1, #6
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009cd2:	62e3      	str	r3, [r4, #44]	; 0x2c
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f7ff fe0f 	bl	80098f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8009cda:	2201      	movs	r2, #1
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff fe54 	bl	800998c <dhcp_create_msg>
  if (result == ERR_OK) {
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	bb78      	cbnz	r0, 8009d48 <dhcp_discover+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009ce8:	2202      	movs	r2, #2
 8009cea:	2139      	movs	r1, #57	; 0x39
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7ff fe0b 	bl	8009908 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009cf2:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f7ff fe17 	bl	8009928 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	2204      	movs	r2, #4
 8009cfe:	2137      	movs	r1, #55	; 0x37
 8009d00:	f7ff fe02 	bl	8009908 <dhcp_option>
 8009d04:	462b      	mov	r3, r5
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
 8009d06:	481d      	ldr	r0, [pc, #116]	; (8009d7c <dhcp_discover+0xb4>)
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009d08:	8b22      	ldrh	r2, [r4, #24]
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
 8009d0a:	5c19      	ldrb	r1, [r3, r0]
 8009d0c:	3301      	adds	r3, #1
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009d0e:	1c57      	adds	r7, r2, #1

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
 8009d10:	2b04      	cmp	r3, #4
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009d12:	8327      	strh	r7, [r4, #24]
 8009d14:	6967      	ldr	r7, [r4, #20]
 8009d16:	443a      	add	r2, r7
 8009d18:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
 8009d1c:	d1f4      	bne.n	8009d08 <dhcp_discover+0x40>
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
    }
    dhcp_option_trailer(dhcp);
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7ff ff68 	bl	8009bf4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009d24:	8b21      	ldrh	r1, [r4, #24]
 8009d26:	6920      	ldr	r0, [r4, #16]
 8009d28:	31f0      	adds	r1, #240	; 0xf0
 8009d2a:	b289      	uxth	r1, r1
 8009d2c:	f001 fa60 	bl	800b1f0 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP_ADDR_ANY);
 8009d30:	4b13      	ldr	r3, [pc, #76]	; (8009d80 <dhcp_discover+0xb8>)
 8009d32:	9600      	str	r6, [sp, #0]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	2343      	movs	r3, #67	; 0x43
 8009d38:	4a12      	ldr	r2, [pc, #72]	; (8009d84 <dhcp_discover+0xbc>)
 8009d3a:	6921      	ldr	r1, [r4, #16]
 8009d3c:	6860      	ldr	r0, [r4, #4]
 8009d3e:	f003 fe51 	bl	800d9e4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fed0 	bl	8009ae8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009d48:	7b63      	ldrb	r3, [r4, #13]
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009d4a:	4628      	mov	r0, r5
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009d4c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009d4e:	bf1c      	itt	ne
 8009d50:	3301      	addne	r3, #1
 8009d52:	7363      	strbne	r3, [r4, #13]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009d54:	7b62      	ldrb	r2, [r4, #13]
 8009d56:	2a05      	cmp	r2, #5
 8009d58:	bf96      	itet	ls
 8009d5a:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8009d5e:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8009d62:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009d64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009d68:	bf98      	it	ls
 8009d6a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009d6c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009d70:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d74:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009d76:	b003      	add	sp, #12
 8009d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	0802f34c 	.word	0x0802f34c
 8009d80:	0802f354 	.word	0x0802f354
 8009d84:	0802f350 	.word	0x0802f350

08009d88 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8009d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif->dhcp;
 8009d8a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8009d8c:	4606      	mov	r6, r0
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8009d8e:	2101      	movs	r1, #1
 8009d90:	4620      	mov	r0, r4
 8009d92:	f7ff fdb1 	bl	80098f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009d96:	2203      	movs	r2, #3
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	f7ff fdf6 	bl	800998c <dhcp_create_msg>
  if (result == ERR_OK) {
 8009da0:	4605      	mov	r5, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d147      	bne.n	8009e36 <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009da6:	2202      	movs	r2, #2
 8009da8:	2139      	movs	r1, #57	; 0x39
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7ff fdac 	bl	8009908 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009db0:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8009db2:	4620      	mov	r0, r4
 8009db4:	f7ff fdb8 	bl	8009928 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009db8:	2204      	movs	r2, #4
 8009dba:	2132      	movs	r1, #50	; 0x32
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f7ff fda3 	bl	8009908 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009dc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009dc4:	f7ff fd36 	bl	8009834 <lwip_ntohl>
 8009dc8:	4601      	mov	r1, r0
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f7ff fdbd 	bl	800994a <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8009dd0:	2204      	movs	r2, #4
 8009dd2:	2136      	movs	r1, #54	; 0x36
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	f7ff fd97 	bl	8009908 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8009dda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009ddc:	f7ff fd2a 	bl	8009834 <lwip_ntohl>
 8009de0:	4601      	mov	r1, r0
 8009de2:	4620      	mov	r0, r4
 8009de4:	f7ff fdb1 	bl	800994a <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
 8009de8:	4620      	mov	r0, r4
 8009dea:	2204      	movs	r2, #4
 8009dec:	2137      	movs	r1, #55	; 0x37
 8009dee:	f7ff fd8b 	bl	8009908 <dhcp_option>
 8009df2:	462b      	mov	r3, r5
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
 8009df4:	481c      	ldr	r0, [pc, #112]	; (8009e68 <dhcp_select+0xe0>)
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009df6:	8b22      	ldrh	r2, [r4, #24]
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
 8009df8:	5c19      	ldrb	r1, [r3, r0]
 8009dfa:	3301      	adds	r3, #1
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009dfc:	1c57      	adds	r7, r2, #1

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
 8009dfe:	2b04      	cmp	r3, #4
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009e00:	8327      	strh	r7, [r4, #24]
 8009e02:	6967      	ldr	r7, [r4, #20]
 8009e04:	443a      	add	r2, r7
 8009e06:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
 8009e0a:	d1f4      	bne.n	8009df6 <dhcp_select+0x6e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f7ff fef1 	bl	8009bf4 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009e12:	8b21      	ldrh	r1, [r4, #24]
 8009e14:	6920      	ldr	r0, [r4, #16]
 8009e16:	31f0      	adds	r1, #240	; 0xf0
 8009e18:	b289      	uxth	r1, r1
 8009e1a:	f001 f9e9 	bl	800b1f0 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP_ADDR_ANY);
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <dhcp_select+0xe4>)
 8009e20:	9600      	str	r6, [sp, #0]
 8009e22:	9301      	str	r3, [sp, #4]
 8009e24:	2343      	movs	r3, #67	; 0x43
 8009e26:	4a12      	ldr	r2, [pc, #72]	; (8009e70 <dhcp_select+0xe8>)
 8009e28:	6921      	ldr	r1, [r4, #16]
 8009e2a:	6860      	ldr	r0, [r4, #4]
 8009e2c:	f003 fdda 	bl	800d9e4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009e30:	4620      	mov	r0, r4
 8009e32:	f7ff fe59 	bl	8009ae8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009e36:	7b63      	ldrb	r3, [r4, #13]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009e38:	4628      	mov	r0, r5
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009e3a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009e3c:	bf1c      	itt	ne
 8009e3e:	3301      	addne	r3, #1
 8009e40:	7363      	strbne	r3, [r4, #13]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009e42:	7b62      	ldrb	r2, [r4, #13]
 8009e44:	2a05      	cmp	r2, #5
 8009e46:	bf96      	itet	ls
 8009e48:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8009e4c:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8009e50:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009e52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009e56:	bf98      	it	ls
 8009e58:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009e5a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009e5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e62:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009e64:	b003      	add	sp, #12
 8009e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e68:	0802f34c 	.word	0x0802f34c
 8009e6c:	0802f354 	.word	0x0802f354
 8009e70:	0802f350 	.word	0x0802f350

08009e74 <dhcp_recv>:
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009e74:	8953      	ldrh	r3, [r2, #10]
 8009e76:	2b2b      	cmp	r3, #43	; 0x2b
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	4680      	mov	r8, r0
 8009e7e:	b089      	sub	sp, #36	; 0x24
 8009e80:	4693      	mov	fp, r2
  struct netif *netif = (struct netif *)arg;
  struct dhcp *dhcp = netif->dhcp;
 8009e82:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009e86:	f240 80b0 	bls.w	8009fea <dhcp_recv+0x176>
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  struct netif *netif = (struct netif *)arg;
  struct dhcp *dhcp = netif->dhcp;
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8009e8a:	6851      	ldr	r1, [r2, #4]
  if (p->len < DHCP_MIN_REPLY_LEN) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8009e8c:	780b      	ldrb	r3, [r1, #0]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	f040 80ab 	bne.w	8009fea <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8009e94:	4602      	mov	r2, r0
 8009e96:	2300      	movs	r3, #0
 8009e98:	f101 001b 	add.w	r0, r1, #27
 8009e9c:	f812 4f2c 	ldrb.w	r4, [r2, #44]!
 8009ea0:	b2dd      	uxtb	r5, r3
 8009ea2:	42ac      	cmp	r4, r5
 8009ea4:	d909      	bls.n	8009eba <dhcp_recv+0x46>
 8009ea6:	2b06      	cmp	r3, #6
 8009ea8:	d007      	beq.n	8009eba <dhcp_recv+0x46>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8009eaa:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8009eae:	3301      	adds	r3, #1
 8009eb0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009eb4:	42ae      	cmp	r6, r5
 8009eb6:	d0f3      	beq.n	8009ea0 <dhcp_recv+0x2c>
 8009eb8:	e097      	b.n	8009fea <dhcp_recv+0x176>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
 8009eba:	6848      	ldr	r0, [r1, #4]
 8009ebc:	f7ff fcba 	bl	8009834 <lwip_ntohl>
 8009ec0:	f8da 3000 	ldr.w	r3, [sl]
 8009ec4:	4298      	cmp	r0, r3
 8009ec6:	f040 8090 	bne.w	8009fea <dhcp_recv+0x176>
  struct pbuf *q;
  int parse_file_as_options = 0;
  int parse_sname_as_options = 0;

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8009eca:	4aab      	ldr	r2, [pc, #684]	; (800a178 <dhcp_recv+0x304>)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	6053      	str	r3, [r2, #4]
 8009ed2:	8113      	strh	r3, [r2, #8]
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8009ed4:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8009ed8:	2a2b      	cmp	r2, #43	; 0x2b
 8009eda:	f240 8086 	bls.w	8009fea <dhcp_recv+0x176>
    return ERR_BUF;
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8009ede:	f8db 2004 	ldr.w	r2, [fp, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8009ee2:	24f0      	movs	r4, #240	; 0xf0
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8009ee4:	f8bb 9008 	ldrh.w	r9, [fp, #8]
  dhcp_clear_all_options(dhcp);
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
    return ERR_BUF;
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8009ee8:	f8ca 2008 	str.w	r2, [sl, #8]
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  int parse_sname_as_options = 0;
 8009eec:	9301      	str	r3, [sp, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8009eee:	465e      	mov	r6, fp
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while ((q != NULL) && (options_idx >= q->len)) {
 8009ef0:	8973      	ldrh	r3, [r6, #10]
 8009ef2:	42a3      	cmp	r3, r4
 8009ef4:	d84f      	bhi.n	8009f96 <dhcp_recv+0x122>
    options_idx -= q->len;
 8009ef6:	1ae4      	subs	r4, r4, r3
    options_idx_max -= q->len;
 8009ef8:	ebc3 0909 	rsb	r9, r3, r9
    q = q->next;
 8009efc:	6836      	ldr	r6, [r6, #0]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while ((q != NULL) && (options_idx >= q->len)) {
    options_idx -= q->len;
 8009efe:	b2a4      	uxth	r4, r4
    options_idx_max -= q->len;
 8009f00:	fa1f f989 	uxth.w	r9, r9
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while ((q != NULL) && (options_idx >= q->len)) {
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	d1f3      	bne.n	8009ef0 <dhcp_recv+0x7c>
 8009f08:	e06f      	b.n	8009fea <dhcp_recv+0x176>
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 8009f0a:	9b02      	ldr	r3, [sp, #8]
 8009f0c:	5d1a      	ldrb	r2, [r3, r4]
 8009f0e:	2aff      	cmp	r2, #255	; 0xff
 8009f10:	d044      	beq.n	8009f9c <dhcp_recv+0x128>
 8009f12:	454c      	cmp	r4, r9
 8009f14:	d242      	bcs.n	8009f9c <dhcp_recv+0x128>
    u8_t op = options[offset];
    u8_t len;
    u8_t decode_len = 0;
    int decode_idx = -1;
    u16_t val_offset = offset + 2;
 8009f16:	1ca3      	adds	r3, r4, #2
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
 8009f18:	8971      	ldrh	r1, [r6, #10]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
    u8_t op = options[offset];
    u8_t len;
    u8_t decode_len = 0;
    int decode_idx = -1;
    u16_t val_offset = offset + 2;
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	9305      	str	r3, [sp, #20]
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
 8009f1e:	1c63      	adds	r3, r4, #1
 8009f20:	428b      	cmp	r3, r1
 8009f22:	da40      	bge.n	8009fa6 <dhcp_recv+0x132>
      len = options[offset + 1];
 8009f24:	9b02      	ldr	r3, [sp, #8]
 8009f26:	4423      	add	r3, r4
 8009f28:	785b      	ldrb	r3, [r3, #1]
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 8009f2a:	2a33      	cmp	r2, #51	; 0x33
 8009f2c:	f000 80e4 	beq.w	800a0f8 <dhcp_recv+0x284>
 8009f30:	f200 8149 	bhi.w	800a1c6 <dhcp_recv+0x352>
 8009f34:	2a01      	cmp	r2, #1
 8009f36:	f000 8119 	beq.w	800a16c <dhcp_recv+0x2f8>
 8009f3a:	d24d      	bcs.n	8009fd8 <dhcp_recv+0x164>
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
        /* will be increased below */
        offset--;
 8009f3c:	3c01      	subs	r4, #1
    decode_len = len;
    switch(op) {
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8009f3e:	2500      	movs	r5, #0
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
    u8_t op = options[offset];
    u8_t len;
    u8_t decode_len = 0;
    int decode_idx = -1;
 8009f40:	f04f 37ff 	mov.w	r7, #4294967295
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
        /* will be increased below */
        offset--;
 8009f44:	b2a4      	uxth	r4, r4
    decode_len = len;
    switch(op) {
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8009f46:	462b      	mov	r3, r5
 8009f48:	3402      	adds	r4, #2
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
 8009f4a:	fa13 f484 	uxtah	r4, r3, r4
 8009f4e:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 8009f50:	b1ad      	cbz	r5, 8009f7e <dhcp_recv+0x10a>
      u32_t value = 0;
 8009f52:	ab08      	add	r3, sp, #32
 8009f54:	9700      	str	r7, [sp, #0]
 8009f56:	9304      	str	r3, [sp, #16]
 8009f58:	2300      	movs	r3, #0
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	f842 3d04 	str.w	r3, [r2, #-4]!
 8009f60:	4b85      	ldr	r3, [pc, #532]	; (800a178 <dhcp_recv+0x304>)
 8009f62:	9204      	str	r2, [sp, #16]
 8009f64:	18fb      	adds	r3, r7, r3
 8009f66:	9303      	str	r3, [sp, #12]
 8009f68:	9b00      	ldr	r3, [sp, #0]
 8009f6a:	9a05      	ldr	r2, [sp, #20]
 8009f6c:	1bdb      	subs	r3, r3, r7
 8009f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8009f72:	9a03      	ldr	r2, [sp, #12]
 8009f74:	7812      	ldrb	r2, [r2, #0]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	2a00      	cmp	r2, #0
 8009f7a:	f000 80c3 	beq.w	800a104 <dhcp_recv+0x290>
        }
        dhcp_got_option(dhcp, decode_idx);
        dhcp_set_option_value(dhcp, decode_idx, value);
      }
    }
    if (offset >= q->len) {
 8009f7e:	8973      	ldrh	r3, [r6, #10]
 8009f80:	42a3      	cmp	r3, r4
 8009f82:	d8c2      	bhi.n	8009f0a <dhcp_recv+0x96>
      offset -= q->len;
 8009f84:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 8009f86:	ebc3 0909 	rsb	r9, r3, r9
        dhcp_got_option(dhcp, decode_idx);
        dhcp_set_option_value(dhcp, decode_idx, value);
      }
    }
    if (offset >= q->len) {
      offset -= q->len;
 8009f8a:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 8009f8c:	fa1f f989 	uxth.w	r9, r9
      if ((offset < offset_max) && offset_max) {
 8009f90:	454c      	cmp	r4, r9
 8009f92:	d203      	bcs.n	8009f9c <dhcp_recv+0x128>
        q = q->next;
 8009f94:	6836      	ldr	r6, [r6, #0]
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
 8009f96:	6873      	ldr	r3, [r6, #4]
 8009f98:	9302      	str	r3, [sp, #8]
 8009f9a:	e7b6      	b.n	8009f0a <dhcp_recv+0x96>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009f9c:	4a76      	ldr	r2, [pc, #472]	; (800a178 <dhcp_recv+0x304>)
 8009f9e:	7813      	ldrb	r3, [r2, #0]
 8009fa0:	4615      	mov	r5, r2
 8009fa2:	b93b      	cbnz	r3, 8009fb4 <dhcp_recv+0x140>
 8009fa4:	e02a      	b.n	8009ffc <dhcp_recv+0x188>
    u16_t val_offset = offset + 2;
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8009fa6:	6833      	ldr	r3, [r6, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80fb 	beq.w	800a1a4 <dhcp_recv+0x330>
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	e7ba      	b.n	8009f2a <dhcp_recv+0xb6>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009fb4:	4b71      	ldr	r3, [pc, #452]	; (800a17c <dhcp_recv+0x308>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009fb6:	2100      	movs	r1, #0
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009fb8:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009fba:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	f000 8097 	beq.w	800a0f0 <dhcp_recv+0x27c>
      parse_file_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d105      	bne.n	8009fd2 <dhcp_recv+0x15e>
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
 8009fc6:	2300      	movs	r3, #0
    options_idx = DHCP_SNAME_OFS;
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8009fc8:	f04f 096c 	mov.w	r9, #108	; 0x6c
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
    options_idx = DHCP_SNAME_OFS;
 8009fcc:	242c      	movs	r4, #44	; 0x2c
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	e78d      	b.n	8009eee <dhcp_recv+0x7a>
      parse_file_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
      parse_sname_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009fd2:	2b03      	cmp	r3, #3
 8009fd4:	d112      	bne.n	8009ffc <dhcp_recv+0x188>
 8009fd6:	e089      	b.n	800a0ec <dhcp_recv+0x278>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 8009fd8:	2a03      	cmp	r2, #3
 8009fda:	f000 80d3 	beq.w	800a184 <dhcp_recv+0x310>
 8009fde:	2a06      	cmp	r2, #6
 8009fe0:	f040 80ed 	bne.w	800a1be <dhcp_recv+0x34a>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_ROUTER;
        break;
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
 8009fe4:	079a      	lsls	r2, r3, #30
 8009fe6:	f000 80d3 	beq.w	800a190 <dhcp_recv+0x31c>
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
 8009fea:	2300      	movs	r3, #0
  pbuf_free(p);
 8009fec:	4658      	mov	r0, fp
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
 8009fee:	f8ca 3008 	str.w	r3, [sl, #8]
  pbuf_free(p);
 8009ff2:	f001 f857 	bl	800b0a4 <pbuf_free>
}
 8009ff6:	b009      	add	sp, #36	; 0x24
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e1      	bne.n	8009fc6 <dhcp_recv+0x152>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800a002:	786b      	ldrb	r3, [r5, #1]
 800a004:	495c      	ldr	r1, [pc, #368]	; (800a178 <dhcp_recv+0x304>)
 800a006:	2b00      	cmp	r3, #0
 800a008:	d0ef      	beq.n	8009fea <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800a00a:	4b5c      	ldr	r3, [pc, #368]	; (800a17c <dhcp_recv+0x308>)
 800a00c:	791a      	ldrb	r2, [r3, #4]
 800a00e:	461e      	mov	r6, r3
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800a010:	2a05      	cmp	r2, #5
 800a012:	d138      	bne.n	800a086 <dhcp_recv+0x212>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a014:	f89a 300c 	ldrb.w	r3, [sl, #12]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d12d      	bne.n	800a078 <dhcp_recv+0x204>
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a01c:	9b01      	ldr	r3, [sp, #4]
 800a01e:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
 800a022:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a024:	6363      	str	r3, [r4, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800a026:	78cb      	ldrb	r3, [r1, #3]
 800a028:	b10b      	cbz	r3, 800a02e <dhcp_recv+0x1ba>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800a02a:	68f3      	ldr	r3, [r6, #12]
 800a02c:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800a02e:	792b      	ldrb	r3, [r5, #4]
 800a030:	b10b      	cbz	r3, 800a036 <dhcp_recv+0x1c2>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800a032:	6933      	ldr	r3, [r6, #16]
 800a034:	e001      	b.n	800a03a <dhcp_recv+0x1c6>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800a036:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a038:	085b      	lsrs	r3, r3, #1
 800a03a:	63e3      	str	r3, [r4, #60]	; 0x3c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800a03c:	796b      	ldrb	r3, [r5, #5]
 800a03e:	b10b      	cbz	r3, 800a044 <dhcp_recv+0x1d0>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800a040:	6973      	ldr	r3, [r6, #20]
 800a042:	e003      	b.n	800a04c <dhcp_recv+0x1d8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800a044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a046:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a04a:	08db      	lsrs	r3, r3, #3
 800a04c:	6423      	str	r3, [r4, #64]	; 0x40
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	62e3      	str	r3, [r4, #44]	; 0x2c
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800a054:	79ab      	ldrb	r3, [r5, #6]
 800a056:	b123      	cbz	r3, 800a062 <dhcp_recv+0x1ee>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800a058:	69b0      	ldr	r0, [r6, #24]
 800a05a:	f7ff fbe9 	bl	8009830 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 800a05e:	2301      	movs	r3, #1
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800a060:	6320      	str	r0, [r4, #48]	; 0x30
    dhcp->subnet_mask_given = 1;
  } else {
    dhcp->subnet_mask_given = 0;
 800a062:	73a3      	strb	r3, [r4, #14]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800a064:	79eb      	ldrb	r3, [r5, #7]
 800a066:	b11b      	cbz	r3, 800a070 <dhcp_recv+0x1fc>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800a068:	69f0      	ldr	r0, [r6, #28]
 800a06a:	f7ff fbe1 	bl	8009830 <lwip_htonl>
 800a06e:	6360      	str	r0, [r4, #52]	; 0x34
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
      dhcp_handle_ack(netif);
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
 800a070:	4640      	mov	r0, r8
 800a072:	f7ff fd44 	bl	8009afe <dhcp_check>
 800a076:	e7b8      	b.n	8009fea <dhcp_recv+0x176>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800a078:	3b03      	subs	r3, #3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d8b5      	bhi.n	8009fea <dhcp_recv+0x176>
             (dhcp->state == DHCP_STATE_RENEWING)) {
      dhcp_bind(netif);
 800a07e:	4640      	mov	r0, r8
 800a080:	f7ff fd52 	bl	8009b28 <dhcp_bind>
 800a084:	e7b1      	b.n	8009fea <dhcp_recv+0x176>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800a086:	2a06      	cmp	r2, #6
 800a088:	d116      	bne.n	800a0b8 <dhcp_recv+0x244>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800a08a:	f89a 300c 	ldrb.w	r3, [sl, #12]
             (dhcp->state == DHCP_STATE_RENEWING)) {
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800a08e:	1eda      	subs	r2, r3, #3
 800a090:	2a02      	cmp	r2, #2
 800a092:	d901      	bls.n	800a098 <dhcp_recv+0x224>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800a094:	2b01      	cmp	r3, #1
 800a096:	d1a8      	bne.n	8009fea <dhcp_recv+0x176>
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);
 800a098:	4b39      	ldr	r3, [pc, #228]	; (800a180 <dhcp_recv+0x30c>)
 800a09a:	4640      	mov	r0, r8
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
 800a09c:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	f000 ff7a 	bl	800af9c <netif_set_addr>
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	210c      	movs	r1, #12
 800a0ac:	f7ff fc24 	bl	80098f8 <dhcp_set_state>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	f7ff fe09 	bl	8009cc8 <dhcp_discover>
 800a0b6:	e798      	b.n	8009fea <dhcp_recv+0x176>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800a0b8:	2a02      	cmp	r2, #2
 800a0ba:	d196      	bne.n	8009fea <dhcp_recv+0x176>
 800a0bc:	f89a 200c 	ldrb.w	r2, [sl, #12]
 800a0c0:	2a06      	cmp	r2, #6
 800a0c2:	d192      	bne.n	8009fea <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800a0c4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800a0c8:	f8aa 201a 	strh.w	r2, [sl, #26]
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800a0cc:	788a      	ldrb	r2, [r1, #2]
 800a0ce:	2a00      	cmp	r2, #0
 800a0d0:	d08b      	beq.n	8009fea <dhcp_recv+0x176>
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
 800a0d2:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800a0d6:	6898      	ldr	r0, [r3, #8]
 800a0d8:	f7ff fbaa 	bl	8009830 <lwip_htonl>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a0dc:	68a3      	ldr	r3, [r4, #8]
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800a0de:	62a0      	str	r0, [r4, #40]	; 0x28
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800a0e0:	4640      	mov	r0, r8
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	62e3      	str	r3, [r4, #44]	; 0x2c
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800a0e6:	f7ff fe4f 	bl	8009d88 <dhcp_select>
 800a0ea:	e77e      	b.n	8009fea <dhcp_recv+0x176>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
      parse_sname_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
      parse_sname_as_options = 1;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9301      	str	r3, [sp, #4]
  }
  if (parse_file_as_options) {
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800a0f0:	f04f 09ec 	mov.w	r9, #236	; 0xec
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
 800a0f4:	246c      	movs	r4, #108	; 0x6c
 800a0f6:	e6fa      	b.n	8009eee <dhcp_recv+0x7a>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	f47f af76 	bne.w	8009fea <dhcp_recv+0x176>
 800a0fe:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800a100:	2703      	movs	r7, #3
 800a102:	e721      	b.n	8009f48 <dhcp_recv+0xd4>
      u32_t value = 0;
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
        copy_len = LWIP_MIN(decode_len, 4);
 800a104:	2d03      	cmp	r5, #3
        pbuf_copy_partial(q, &value, copy_len, val_offset);
 800a106:	9904      	ldr	r1, [sp, #16]
 800a108:	4630      	mov	r0, r6
      u32_t value = 0;
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
        copy_len = LWIP_MIN(decode_len, 4);
 800a10a:	bf94      	ite	ls
 800a10c:	b2aa      	uxthls	r2, r5
 800a10e:	2204      	movhi	r2, #4
        pbuf_copy_partial(q, &value, copy_len, val_offset);
 800a110:	f001 f905 	bl	800b31e <pbuf_copy_partial>
        if (decode_len > 4) {
 800a114:	2d04      	cmp	r5, #4
 800a116:	d914      	bls.n	800a142 <dhcp_recv+0x2ce>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800a118:	07ab      	lsls	r3, r5, #30
 800a11a:	f47f af66 	bne.w	8009fea <dhcp_recv+0x176>
          dhcp_got_option(dhcp, decode_idx);
 800a11e:	9a03      	ldr	r2, [sp, #12]
 800a120:	2301      	movs	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 800a122:	9807      	ldr	r0, [sp, #28]
          decode_len -= 4;
 800a124:	3d04      	subs	r5, #4
        copy_len = LWIP_MIN(decode_len, 4);
        pbuf_copy_partial(q, &value, copy_len, val_offset);
        if (decode_len > 4) {
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
          dhcp_got_option(dhcp, decode_idx);
 800a126:	f802 3b01 	strb.w	r3, [r2], #1
 800a12a:	9203      	str	r2, [sp, #12]
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 800a12c:	f7ff fb80 	bl	8009830 <lwip_htonl>
 800a130:	9a00      	ldr	r2, [sp, #0]
          decode_len -= 4;
 800a132:	b2ed      	uxtb	r5, r5
        pbuf_copy_partial(q, &value, copy_len, val_offset);
        if (decode_len > 4) {
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
          dhcp_got_option(dhcp, decode_idx);
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 800a134:	4b11      	ldr	r3, [pc, #68]	; (800a17c <dhcp_recv+0x308>)
 800a136:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
          decode_len -= 4;
          val_offset += 4;
          decode_idx++;
 800a13a:	4613      	mov	r3, r2
 800a13c:	3301      	adds	r3, #1
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	e712      	b.n	8009f68 <dhcp_recv+0xf4>
          goto decode_next;
        } else if (decode_len == 4) {
 800a142:	d104      	bne.n	800a14e <dhcp_recv+0x2da>
          value = ntohl(value);
 800a144:	9807      	ldr	r0, [sp, #28]
 800a146:	f7ff fb75 	bl	8009834 <lwip_ntohl>
 800a14a:	9007      	str	r0, [sp, #28]
 800a14c:	e005      	b.n	800a15a <dhcp_recv+0x2e6>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800a14e:	2d01      	cmp	r5, #1
 800a150:	f47f af4b 	bne.w	8009fea <dhcp_recv+0x176>
          value = ((u8_t*)&value)[0];
 800a154:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800a158:	9307      	str	r3, [sp, #28]
        }
        dhcp_got_option(dhcp, decode_idx);
 800a15a:	2301      	movs	r3, #1
 800a15c:	4a06      	ldr	r2, [pc, #24]	; (800a178 <dhcp_recv+0x304>)
 800a15e:	9900      	ldr	r1, [sp, #0]
 800a160:	5453      	strb	r3, [r2, r1]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800a162:	9b07      	ldr	r3, [sp, #28]
 800a164:	4a05      	ldr	r2, [pc, #20]	; (800a17c <dhcp_recv+0x308>)
 800a166:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a16a:	e708      	b.n	8009f7e <dhcp_recv+0x10a>
        decode_len = len = 0;
        /* will be increased below */
        offset--;
        break;
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	f47f af3c 	bne.w	8009fea <dhcp_recv+0x176>
 800a172:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800a174:	2706      	movs	r7, #6
 800a176:	e6e7      	b.n	8009f48 <dhcp_recv+0xd4>
 800a178:	2004312c 	.word	0x2004312c
 800a17c:	20043138 	.word	0x20043138
 800a180:	0802f354 	.word	0x0802f354
        break;
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800a184:	2b03      	cmp	r3, #3
 800a186:	f67f af30 	bls.w	8009fea <dhcp_recv+0x176>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800a18a:	2707      	movs	r7, #7
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
        break;
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800a18c:	2504      	movs	r5, #4
 800a18e:	e6db      	b.n	8009f48 <dhcp_recv+0xd4>
        break;
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800a190:	2b08      	cmp	r3, #8
 800a192:	461d      	mov	r5, r3
 800a194:	bf28      	it	cs
 800a196:	2508      	movcs	r5, #8
 800a198:	b2ed      	uxtb	r5, r5
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800a19a:	42ab      	cmp	r3, r5
 800a19c:	f4ff af25 	bcc.w	8009fea <dhcp_recv+0x176>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800a1a0:	2708      	movs	r7, #8
 800a1a2:	e6d1      	b.n	8009f48 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1a4:	2a06      	cmp	r2, #6
 800a1a6:	f43f af1d 	beq.w	8009fe4 <dhcp_recv+0x170>
 800a1aa:	d831      	bhi.n	800a210 <dhcp_recv+0x39c>
 800a1ac:	2a01      	cmp	r2, #1
 800a1ae:	f43f af1c 	beq.w	8009fea <dhcp_recv+0x176>
 800a1b2:	f4ff aec3 	bcc.w	8009f3c <dhcp_recv+0xc8>
 800a1b6:	2a03      	cmp	r2, #3
 800a1b8:	f43f af17 	beq.w	8009fea <dhcp_recv+0x176>
    u16_t val_offset = offset + 2;
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800a1bc:	2300      	movs	r3, #0
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
 800a1be:	9a05      	ldr	r2, [sp, #20]
 800a1c0:	441a      	add	r2, r3
 800a1c2:	b294      	uxth	r4, r2
 800a1c4:	e6db      	b.n	8009f7e <dhcp_recv+0x10a>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1c6:	2a36      	cmp	r2, #54	; 0x36
 800a1c8:	d105      	bne.n	800a1d6 <dhcp_recv+0x362>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
        break;
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	f47f af0d 	bne.w	8009fea <dhcp_recv+0x176>
 800a1d0:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800a1d2:	2702      	movs	r7, #2
 800a1d4:	e6b8      	b.n	8009f48 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1d6:	d80b      	bhi.n	800a1f0 <dhcp_recv+0x37c>
 800a1d8:	2a34      	cmp	r2, #52	; 0x34
 800a1da:	d105      	bne.n	800a1e8 <dhcp_recv+0x374>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	f47f af04 	bne.w	8009fea <dhcp_recv+0x176>
 800a1e2:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800a1e4:	2700      	movs	r7, #0
 800a1e6:	e6af      	b.n	8009f48 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1e8:	2a35      	cmp	r2, #53	; 0x35
 800a1ea:	d1e8      	bne.n	800a1be <dhcp_recv+0x34a>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
        break;
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	e002      	b.n	800a1f6 <dhcp_recv+0x382>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1f0:	2a3a      	cmp	r2, #58	; 0x3a
 800a1f2:	d105      	bne.n	800a200 <dhcp_recv+0x38c>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
        break;
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	f47f aef8 	bne.w	8009fea <dhcp_recv+0x176>
 800a1fa:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800a1fc:	461f      	mov	r7, r3
 800a1fe:	e6a3      	b.n	8009f48 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a200:	2a3b      	cmp	r2, #59	; 0x3b
 800a202:	d1dc      	bne.n	800a1be <dhcp_recv+0x34a>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_T1;
        break;
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a204:	2b04      	cmp	r3, #4
 800a206:	f47f aef0 	bne.w	8009fea <dhcp_recv+0x176>
 800a20a:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800a20c:	2705      	movs	r7, #5
 800a20e:	e69b      	b.n	8009f48 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a210:	2a33      	cmp	r2, #51	; 0x33
 800a212:	d3d3      	bcc.n	800a1bc <dhcp_recv+0x348>
 800a214:	2a36      	cmp	r2, #54	; 0x36
 800a216:	f67f aee8 	bls.w	8009fea <dhcp_recv+0x176>
 800a21a:	3a3a      	subs	r2, #58	; 0x3a
 800a21c:	2a01      	cmp	r2, #1
 800a21e:	f67f aee4 	bls.w	8009fea <dhcp_recv+0x176>
 800a222:	e7cb      	b.n	800a1bc <dhcp_recv+0x348>

0800a224 <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800a224:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a226:	4605      	mov	r5, r0
 800a228:	2800      	cmp	r0, #0
 800a22a:	d03b      	beq.n	800a2a4 <dhcp_arp_reply+0x80>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_STATE_CHECKING)) {
 800a22c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a22e:	2c00      	cmp	r4, #0
 800a230:	d038      	beq.n	800a2a4 <dhcp_arp_reply+0x80>
 800a232:	7b23      	ldrb	r3, [r4, #12]
 800a234:	2b08      	cmp	r3, #8
 800a236:	d135      	bne.n	800a2a4 <dhcp_arp_reply+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
 800a238:	680a      	ldr	r2, [r1, #0]
 800a23a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d131      	bne.n	800a2a4 <dhcp_arp_reply+0x80>
{
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800a240:	210c      	movs	r1, #12
 800a242:	4620      	mov	r0, r4
 800a244:	f7ff fb58 	bl	80098f8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800a248:	2204      	movs	r2, #4
 800a24a:	4621      	mov	r1, r4
 800a24c:	4628      	mov	r0, r5
 800a24e:	f7ff fb9d 	bl	800998c <dhcp_create_msg>
  if (result == ERR_OK) {
 800a252:	bb00      	cbnz	r0, 800a296 <dhcp_arp_reply+0x72>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800a254:	2204      	movs	r2, #4
 800a256:	2132      	movs	r1, #50	; 0x32
 800a258:	4620      	mov	r0, r4
 800a25a:	f7ff fb55 	bl	8009908 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a25e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a260:	f7ff fae8 	bl	8009834 <lwip_ntohl>
 800a264:	4601      	mov	r1, r0
 800a266:	4620      	mov	r0, r4
 800a268:	f7ff fb6f 	bl	800994a <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7ff fcc1 	bl	8009bf4 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a272:	8b21      	ldrh	r1, [r4, #24]
 800a274:	6920      	ldr	r0, [r4, #16]
 800a276:	31f0      	adds	r1, #240	; 0xf0
 800a278:	b289      	uxth	r1, r1
 800a27a:	f000 ffb9 	bl	800b1f0 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP_ADDR_ANY);
 800a27e:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <dhcp_arp_reply+0x84>)
 800a280:	9500      	str	r5, [sp, #0]
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	2343      	movs	r3, #67	; 0x43
 800a286:	4a09      	ldr	r2, [pc, #36]	; (800a2ac <dhcp_arp_reply+0x88>)
 800a288:	6921      	ldr	r1, [r4, #16]
 800a28a:	6860      	ldr	r0, [r4, #4]
 800a28c:	f003 fbaa 	bl	800d9e4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800a290:	4620      	mov	r0, r4
 800a292:	f7ff fc29 	bl	8009ae8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a296:	7b63      	ldrb	r3, [r4, #13]
 800a298:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800a29a:	bf1c      	itt	ne
 800a29c:	3301      	addne	r3, #1
 800a29e:	7363      	strbne	r3, [r4, #13]
  }
  msecs = 10*1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a2a0:	2314      	movs	r3, #20
 800a2a2:	8363      	strh	r3, [r4, #26]
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
    }
  }
}
 800a2a4:	b003      	add	sp, #12
 800a2a6:	bd30      	pop	{r4, r5, pc}
 800a2a8:	0802f354 	.word	0x0802f354
 800a2ac:	0802f350 	.word	0x0802f350

0800a2b0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800a2b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif->dhcp;
 800a2b2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800a2b4:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800a2b6:	2105      	movs	r1, #5
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f7ff fb1d 	bl	80098f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a2be:	2203      	movs	r2, #3
 800a2c0:	4621      	mov	r1, r4
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	f7ff fb62 	bl	800998c <dhcp_create_msg>
  if (result == ERR_OK) {
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	b9e0      	cbnz	r0, 800a306 <dhcp_renew+0x56>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	2139      	movs	r1, #57	; 0x39
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f7ff fb19 	bl	8009908 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a2d6:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f7ff fb25 	bl	8009928 <dhcp_option_short>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7ff fc88 	bl	8009bf4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a2e4:	8b21      	ldrh	r1, [r4, #24]
 800a2e6:	6920      	ldr	r0, [r4, #16]
 800a2e8:	31f0      	adds	r1, #240	; 0xf0
 800a2ea:	b289      	uxth	r1, r1
 800a2ec:	f000 ff80 	bl	800b1f0 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800a2f0:	9600      	str	r6, [sp, #0]
 800a2f2:	2343      	movs	r3, #67	; 0x43
 800a2f4:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800a2f8:	6921      	ldr	r1, [r4, #16]
 800a2fa:	6860      	ldr	r0, [r4, #4]
 800a2fc:	f003 fbc3 	bl	800da86 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a300:	4620      	mov	r0, r4
 800a302:	f7ff fbf1 	bl	8009ae8 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a306:	7b63      	ldrb	r3, [r4, #13]
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 800a308:	4628      	mov	r0, r5

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a30a:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800a30c:	bf1c      	itt	ne
 800a30e:	3301      	addne	r3, #1
 800a310:	7363      	strbne	r3, [r4, #13]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800a312:	7b63      	ldrb	r3, [r4, #13]
 800a314:	2b09      	cmp	r3, #9
 800a316:	bf96      	itet	ls
 800a318:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800a31c:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 800a320:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a324:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800a328:	bf9c      	itt	ls
 800a32a:	011b      	lslls	r3, r3, #4
 800a32c:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a32e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a332:	fb93 f3f2 	sdiv	r3, r3, r2
 800a336:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 800a338:	b002      	add	sp, #8
 800a33a:	bd70      	pop	{r4, r5, r6, pc}

0800a33c <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800a33c:	b510      	push	{r4, lr}
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800a33e:	b168      	cbz	r0, 800a35c <dhcp_stop+0x20>
  dhcp = netif->dhcp;
 800a340:	6a44      	ldr	r4, [r0, #36]	; 0x24

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800a342:	b15c      	cbz	r4, 800a35c <dhcp_stop+0x20>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
 800a344:	6860      	ldr	r0, [r4, #4]
 800a346:	b118      	cbz	r0, 800a350 <dhcp_stop+0x14>
      udp_remove(dhcp->pcb);
 800a348:	f003 fbfc 	bl	800db44 <udp_remove>
      dhcp->pcb = NULL;
 800a34c:	2300      	movs	r3, #0
 800a34e:	6063      	str	r3, [r4, #4]
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a350:	4620      	mov	r0, r4
 800a352:	2100      	movs	r1, #0
  }
}
 800a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (dhcp->pcb != NULL) {
      udp_remove(dhcp->pcb);
      dhcp->pcb = NULL;
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a358:	f7ff bace 	b.w	80098f8 <dhcp_set_state>
 800a35c:	bd10      	pop	{r4, pc}
	...

0800a360 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800a360:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a362:	4605      	mov	r5, r0
 800a364:	2800      	cmp	r0, #0
 800a366:	d03c      	beq.n	800a3e2 <dhcp_start+0x82>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a368:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800a36c:	07da      	lsls	r2, r3, #31
 800a36e:	d538      	bpl.n	800a3e2 <dhcp_start+0x82>
  dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
 800a370:	071b      	lsls	r3, r3, #28
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  dhcp = netif->dhcp;
 800a372:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
 800a374:	d535      	bpl.n	800a3e2 <dhcp_start+0x82>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800a376:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800a378:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a37c:	d32e      	bcc.n	800a3dc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800a37e:	b934      	cbnz	r4, 800a38e <dhcp_start+0x2e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800a380:	2044      	movs	r0, #68	; 0x44
 800a382:	f000 fd39 	bl	800adf8 <mem_malloc>
    if (dhcp == NULL) {
 800a386:	4604      	mov	r4, r0
 800a388:	b340      	cbz	r0, 800a3dc <dhcp_start+0x7c>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
 800a38a:	6268      	str	r0, [r5, #36]	; 0x24
 800a38c:	e003      	b.n	800a396 <dhcp_start+0x36>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
 800a38e:	6860      	ldr	r0, [r4, #4]
 800a390:	b108      	cbz	r0, 800a396 <dhcp_start+0x36>
      udp_remove(dhcp->pcb);
 800a392:	f003 fbd7 	bl	800db44 <udp_remove>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800a396:	2244      	movs	r2, #68	; 0x44
 800a398:	2100      	movs	r1, #0
 800a39a:	4620      	mov	r0, r4
 800a39c:	f007 fb5c 	bl	8011a58 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
 800a3a0:	f003 fbe8 	bl	800db74 <udp_new>
 800a3a4:	6060      	str	r0, [r4, #4]
  if (dhcp->pcb == NULL) {
 800a3a6:	b1c8      	cbz	r0, 800a3dc <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
 800a3a8:	7a03      	ldrb	r3, [r0, #8]
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 800a3aa:	2244      	movs	r2, #68	; 0x44
 800a3ac:	490e      	ldr	r1, [pc, #56]	; (800a3e8 <dhcp_start+0x88>)
  dhcp->pcb = udp_new();
  if (dhcp->pcb == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
 800a3ae:	f043 0320 	orr.w	r3, r3, #32
 800a3b2:	7203      	strb	r3, [r0, #8]
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 800a3b4:	6860      	ldr	r0, [r4, #4]
 800a3b6:	f003 fab5 	bl	800d924 <udp_bind>
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 800a3ba:	2243      	movs	r2, #67	; 0x43
 800a3bc:	490a      	ldr	r1, [pc, #40]	; (800a3e8 <dhcp_start+0x88>)
 800a3be:	6860      	ldr	r0, [r4, #4]
 800a3c0:	f003 fb94 	bl	800daec <udp_connect>
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
 800a3c4:	6860      	ldr	r0, [r4, #4]
 800a3c6:	462a      	mov	r2, r5
 800a3c8:	4908      	ldr	r1, [pc, #32]	; (800a3ec <dhcp_start+0x8c>)
 800a3ca:	f003 fbb7 	bl	800db3c <udp_recv>
    return ERR_OK;
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f7ff fc7a 	bl	8009cc8 <dhcp_discover>
  if (result != ERR_OK) {
 800a3d4:	b138      	cbz	r0, 800a3e6 <dhcp_start+0x86>
    /* free resources allocated above */
    dhcp_stop(netif);
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f7ff ffb0 	bl	800a33c <dhcp_stop>
    return ERR_MEM;
 800a3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e0:	bd38      	pop	{r3, r4, r5, pc}
dhcp_start(struct netif *netif)
{
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a3e2:	f06f 000e 	mvn.w	r0, #14
    /* free resources allocated above */
    dhcp_stop(netif);
    return ERR_MEM;
  }
  return result;
}
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	0802f354 	.word	0x0802f354
 800a3ec:	08009e75 	.word	0x08009e75

0800a3f0 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(struct netif *netif)
{
  if ((netif != NULL) && (netif->dhcp != NULL)) {
 800a3f0:	b148      	cbz	r0, 800a406 <dhcp_supplied_address+0x16>
 800a3f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a3f4:	b138      	cbz	r0, 800a406 <dhcp_supplied_address+0x16>
    if ((netif->dhcp->state == DHCP_STATE_BOUND) ||
 800a3f6:	7b00      	ldrb	r0, [r0, #12]
 800a3f8:	280a      	cmp	r0, #10
 800a3fa:	d003      	beq.n	800a404 <dhcp_supplied_address+0x14>
      (netif->dhcp->state == DHCP_STATE_RENEWING)) {
      return 1;
 800a3fc:	1f43      	subs	r3, r0, #5
 800a3fe:	4258      	negs	r0, r3
 800a400:	4158      	adcs	r0, r3
 800a402:	4770      	bx	lr
 800a404:	2001      	movs	r0, #1
    }
  }
  return 0;
}
 800a406:	4770      	bx	lr

0800a408 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800a408:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif->dhcp;
 800a40a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800a40c:	b085      	sub	sp, #20
 800a40e:	4606      	mov	r6, r0
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800a410:	2c00      	cmp	r4, #0
 800a412:	d045      	beq.n	800a4a0 <dhcp_release+0x98>
    return ERR_ARG;
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a416:	9303      	str	r3, [sp, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a418:	f7ff ffea 	bl	800a3f0 <dhcp_supplied_address>

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a41c:	2100      	movs	r1, #0
  if (dhcp == NULL) {
    return ERR_ARG;
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a41e:	4602      	mov	r2, r0

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a420:	4620      	mov	r0, r4
 800a422:	f7ff fa69 	bl	80098f8 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a426:	2300      	movs	r3, #0
 800a428:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800a42a:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a42c:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a42e:	6363      	str	r3, [r4, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a430:	6423      	str	r3, [r4, #64]	; 0x40
 800a432:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a434:	63a3      	str	r3, [r4, #56]	; 0x38
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a436:	84e3      	strh	r3, [r4, #38]	; 0x26
 800a438:	84a3      	strh	r3, [r4, #36]	; 0x24
 800a43a:	8463      	strh	r3, [r4, #34]	; 0x22
 800a43c:	8423      	strh	r3, [r4, #32]

  if (!is_dhcp_supplied_address) {
 800a43e:	b392      	cbz	r2, 800a4a6 <dhcp_release+0x9e>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a440:	2207      	movs	r2, #7
 800a442:	4621      	mov	r1, r4
 800a444:	4630      	mov	r0, r6
 800a446:	f7ff faa1 	bl	800998c <dhcp_create_msg>
  if (result == ERR_OK) {
 800a44a:	4605      	mov	r5, r0
 800a44c:	bb00      	cbnz	r0, 800a490 <dhcp_release+0x88>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a44e:	af04      	add	r7, sp, #16
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  if (result == ERR_OK) {
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a450:	2204      	movs	r2, #4
 800a452:	2136      	movs	r1, #54	; 0x36
 800a454:	4620      	mov	r0, r4
 800a456:	f7ff fa57 	bl	8009908 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a45a:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800a45e:	f7ff f9e9 	bl	8009834 <lwip_ntohl>
 800a462:	4601      	mov	r1, r0
 800a464:	4620      	mov	r0, r4
 800a466:	f7ff fa70 	bl	800994a <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a46a:	4620      	mov	r0, r4
 800a46c:	f7ff fbc2 	bl	8009bf4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a470:	8b21      	ldrh	r1, [r4, #24]
 800a472:	6920      	ldr	r0, [r4, #16]
 800a474:	31f0      	adds	r1, #240	; 0xf0
 800a476:	b289      	uxth	r1, r1
 800a478:	f000 feba 	bl	800b1f0 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800a47c:	9600      	str	r6, [sp, #0]
 800a47e:	2343      	movs	r3, #67	; 0x43
 800a480:	463a      	mov	r2, r7
 800a482:	6921      	ldr	r1, [r4, #16]
 800a484:	6860      	ldr	r0, [r4, #4]
 800a486:	f003 fafe 	bl	800da86 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a48a:	4620      	mov	r0, r4
 800a48c:	f7ff fb2c 	bl	8009ae8 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);
 800a490:	4b06      	ldr	r3, [pc, #24]	; (800a4ac <dhcp_release+0xa4>)
 800a492:	4630      	mov	r0, r6
 800a494:	461a      	mov	r2, r3
 800a496:	4619      	mov	r1, r3
 800a498:	f000 fd80 	bl	800af9c <netif_set_addr>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a49c:	4628      	mov	r0, r5
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);

  return result;
 800a49e:	e003      	b.n	800a4a8 <dhcp_release+0xa0>
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
    return ERR_ARG;
 800a4a0:	f06f 000e 	mvn.w	r0, #14
 800a4a4:	e000      	b.n	800a4a8 <dhcp_release+0xa0>
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;

  if (!is_dhcp_supplied_address) {
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800a4a6:	4610      	mov	r0, r2
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);

  return result;
}
 800a4a8:	b005      	add	sp, #20
 800a4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ac:	0802f354 	.word	0x0802f354

0800a4b0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr(void)
{
  struct netif *netif = netif_list;
 800a4b0:	4b46      	ldr	r3, [pc, #280]	; (800a5cc <dhcp_coarse_tmr+0x11c>)
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr(void)
{
 800a4b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct netif *netif = netif_list;
 800a4b4:	681d      	ldr	r5, [r3, #0]
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a4b6:	f240 2619 	movw	r6, #537	; 0x219
dhcp_coarse_tmr(void)
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800a4ba:	2d00      	cmp	r5, #0
 800a4bc:	f000 8084 	beq.w	800a5c8 <dhcp_coarse_tmr+0x118>
    /* only act on DHCP configured interfaces */
    struct dhcp* dhcp = netif->dhcp;
 800a4c0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800a4c2:	2c00      	cmp	r4, #0
 800a4c4:	d07e      	beq.n	800a5c4 <dhcp_coarse_tmr+0x114>
 800a4c6:	7b23      	ldrb	r3, [r4, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d07b      	beq.n	800a5c4 <dhcp_coarse_tmr+0x114>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800a4cc:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800a4ce:	b161      	cbz	r1, 800a4ea <dhcp_coarse_tmr+0x3a>
 800a4d0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800a4d2:	3201      	adds	r2, #1
 800a4d4:	b292      	uxth	r2, r2
 800a4d6:	4291      	cmp	r1, r2
 800a4d8:	84a2      	strh	r2, [r4, #36]	; 0x24
 800a4da:	d106      	bne.n	800a4ea <dhcp_coarse_tmr+0x3a>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f7ff ff93 	bl	800a408 <dhcp_release>
        dhcp_discover(netif);
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f7ff fbf0 	bl	8009cc8 <dhcp_discover>
 800a4e8:	e06c      	b.n	800a5c4 <dhcp_coarse_tmr+0x114>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800a4ea:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800a4ec:	2a00      	cmp	r2, #0
 800a4ee:	d052      	beq.n	800a596 <dhcp_coarse_tmr+0xe6>
 800a4f0:	1e51      	subs	r1, r2, #1
 800a4f2:	2a01      	cmp	r2, #1
 800a4f4:	8461      	strh	r1, [r4, #34]	; 0x22
 800a4f6:	d14e      	bne.n	800a596 <dhcp_coarse_tmr+0xe6>
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	2b09      	cmp	r3, #9
 800a4fe:	d861      	bhi.n	800a5c4 <dhcp_coarse_tmr+0x114>
 800a500:	fa26 f303 	lsr.w	r3, r6, r3
 800a504:	07db      	lsls	r3, r3, #31
 800a506:	d55d      	bpl.n	800a5c4 <dhcp_coarse_tmr+0x114>
{
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800a508:	2104      	movs	r1, #4
 800a50a:	4620      	mov	r0, r4
 800a50c:	f7ff f9f4 	bl	80098f8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a510:	2203      	movs	r2, #3
 800a512:	4621      	mov	r1, r4
 800a514:	4628      	mov	r0, r5
 800a516:	f7ff fa39 	bl	800998c <dhcp_create_msg>
  if (result == ERR_OK) {
 800a51a:	b9d8      	cbnz	r0, 800a554 <dhcp_coarse_tmr+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a51c:	2202      	movs	r2, #2
 800a51e:	2139      	movs	r1, #57	; 0x39
 800a520:	4620      	mov	r0, r4
 800a522:	f7ff f9f1 	bl	8009908 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a526:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 800a528:	4620      	mov	r0, r4
 800a52a:	f7ff f9fd 	bl	8009928 <dhcp_option_short>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800a52e:	4620      	mov	r0, r4
 800a530:	f7ff fb60 	bl	8009bf4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a534:	8b21      	ldrh	r1, [r4, #24]
 800a536:	6920      	ldr	r0, [r4, #16]
 800a538:	31f0      	adds	r1, #240	; 0xf0
 800a53a:	b289      	uxth	r1, r1
 800a53c:	f000 fe58 	bl	800b1f0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800a540:	9500      	str	r5, [sp, #0]
 800a542:	2343      	movs	r3, #67	; 0x43
 800a544:	4a22      	ldr	r2, [pc, #136]	; (800a5d0 <dhcp_coarse_tmr+0x120>)
 800a546:	6921      	ldr	r1, [r4, #16]
 800a548:	6860      	ldr	r0, [r4, #4]
 800a54a:	f003 fa9c 	bl	800da86 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a54e:	4620      	mov	r0, r4
 800a550:	f7ff faca 	bl	8009ae8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a554:	7b63      	ldrb	r3, [r4, #13]
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
    /* Calculate next timeout */
    if (((netif->dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a556:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a558:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800a55a:	bf1c      	itt	ne
 800a55c:	3301      	addne	r3, #1
 800a55e:	7363      	strbne	r3, [r4, #13]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a560:	7b63      	ldrb	r3, [r4, #13]
 800a562:	2b09      	cmp	r3, #9
 800a564:	bf96      	itet	ls
 800a566:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800a56a:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800a56e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a572:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a576:	bf9c      	itt	ls
 800a578:	00db      	lslls	r3, r3, #3
 800a57a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a57c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a580:	fb93 f3f2 	sdiv	r3, r3, r2
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
    /* Calculate next timeout */
    if (((netif->dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a584:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a586:	8363      	strh	r3, [r4, #26]
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
    /* Calculate next timeout */
    if (((netif->dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a588:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a58a:	1a5b      	subs	r3, r3, r1
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	dd19      	ble.n	800a5c4 <dhcp_coarse_tmr+0x114>
    {
       netif->dhcp->t2_rebind_time = ((netif->dhcp->t0_timeout - dhcp->lease_used) / 2);
 800a590:	105b      	asrs	r3, r3, #1
 800a592:	8453      	strh	r3, [r2, #34]	; 0x22
 800a594:	e016      	b.n	800a5c4 <dhcp_coarse_tmr+0x114>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800a596:	8c22      	ldrh	r2, [r4, #32]
 800a598:	b1a2      	cbz	r2, 800a5c4 <dhcp_coarse_tmr+0x114>
 800a59a:	1e51      	subs	r1, r2, #1
 800a59c:	2a01      	cmp	r2, #1
 800a59e:	8421      	strh	r1, [r4, #32]
 800a5a0:	d110      	bne.n	800a5c4 <dhcp_coarse_tmr+0x114>
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a5a2:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800a5a6:	2a01      	cmp	r2, #1
 800a5a8:	d001      	beq.n	800a5ae <dhcp_coarse_tmr+0xfe>
 800a5aa:	2b0a      	cmp	r3, #10
 800a5ac:	d10a      	bne.n	800a5c4 <dhcp_coarse_tmr+0x114>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f7ff fe7e 	bl	800a2b0 <dhcp_renew>
    /* Calculate next timeout */
    if (((netif->dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a5b4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a5b6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800a5b8:	8bd3      	ldrh	r3, [r2, #30]
 800a5ba:	1a5b      	subs	r3, r3, r1
 800a5bc:	2b01      	cmp	r3, #1
    {
       netif->dhcp->t1_renew_time = ((netif->dhcp->t2_timeout - dhcp->lease_used) / 2);
 800a5be:	bfc4      	itt	gt
 800a5c0:	105b      	asrgt	r3, r3, #1
 800a5c2:	8413      	strhgt	r3, [r2, #32]
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800a5c4:	682d      	ldr	r5, [r5, #0]
 800a5c6:	e778      	b.n	800a4ba <dhcp_coarse_tmr+0xa>
  }
}
 800a5c8:	b002      	add	sp, #8
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
 800a5cc:	20049268 	.word	0x20049268
 800a5d0:	0802f350 	.word	0x0802f350

0800a5d4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800a5d4:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 800a5d6:	4b1d      	ldr	r3, [pc, #116]	; (800a64c <dhcp_fine_tmr+0x78>)
      /* timer is active (non zero), and is about to trigger now */
      if (netif->dhcp->request_timeout > 1) {
        netif->dhcp->request_timeout--;
      }
      else if (netif->dhcp->request_timeout == 1) {
        netif->dhcp->request_timeout--;
 800a5d8:	2500      	movs	r5, #0
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  struct netif *netif = netif_list;
 800a5da:	681c      	ldr	r4, [r3, #0]
  /* loop through netif's */
  while (netif != NULL) {
 800a5dc:	b3a4      	cbz	r4, 800a648 <dhcp_fine_tmr+0x74>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
 800a5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e0:	b383      	cbz	r3, 800a644 <dhcp_fine_tmr+0x70>
      /* timer is active (non zero), and is about to trigger now */
      if (netif->dhcp->request_timeout > 1) {
 800a5e2:	8b5a      	ldrh	r2, [r3, #26]
 800a5e4:	2a01      	cmp	r2, #1
 800a5e6:	d902      	bls.n	800a5ee <dhcp_fine_tmr+0x1a>
        netif->dhcp->request_timeout--;
 800a5e8:	3a01      	subs	r2, #1
 800a5ea:	835a      	strh	r2, [r3, #26]
 800a5ec:	e02a      	b.n	800a644 <dhcp_fine_tmr+0x70>
      }
      else if (netif->dhcp->request_timeout == 1) {
 800a5ee:	d129      	bne.n	800a644 <dhcp_fine_tmr+0x70>
dhcp_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a5f0:	7b1a      	ldrb	r2, [r3, #12]
      /* timer is active (non zero), and is about to trigger now */
      if (netif->dhcp->request_timeout > 1) {
        netif->dhcp->request_timeout--;
      }
      else if (netif->dhcp->request_timeout == 1) {
        netif->dhcp->request_timeout--;
 800a5f2:	835d      	strh	r5, [r3, #26]
dhcp_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a5f4:	2a0c      	cmp	r2, #12
 800a5f6:	d00c      	beq.n	800a612 <dhcp_fine_tmr+0x3e>
 800a5f8:	2a06      	cmp	r2, #6
 800a5fa:	d00a      	beq.n	800a612 <dhcp_fine_tmr+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a5fc:	2a01      	cmp	r2, #1
 800a5fe:	d10a      	bne.n	800a616 <dhcp_fine_tmr+0x42>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
 800a600:	7b5b      	ldrb	r3, [r3, #13]
      dhcp_select(netif);
 800a602:	4620      	mov	r0, r4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
 800a604:	2b05      	cmp	r3, #5
 800a606:	d802      	bhi.n	800a60e <dhcp_fine_tmr+0x3a>
      dhcp_select(netif);
 800a608:	f7ff fbbe 	bl	8009d88 <dhcp_select>
 800a60c:	e01a      	b.n	800a644 <dhcp_fine_tmr+0x70>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
 800a60e:	f7ff fefb 	bl	800a408 <dhcp_release>
      dhcp_discover(netif);
 800a612:	4620      	mov	r0, r4
 800a614:	e014      	b.n	800a640 <dhcp_fine_tmr+0x6c>
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800a616:	2a08      	cmp	r2, #8
 800a618:	d109      	bne.n	800a62e <dhcp_fine_tmr+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
 800a61a:	7b5b      	ldrb	r3, [r3, #13]
      dhcp_check(netif);
 800a61c:	4620      	mov	r0, r4
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d802      	bhi.n	800a628 <dhcp_fine_tmr+0x54>
      dhcp_check(netif);
 800a622:	f7ff fa6c 	bl	8009afe <dhcp_check>
 800a626:	e00d      	b.n	800a644 <dhcp_fine_tmr+0x70>
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
 800a628:	f7ff fa7e 	bl	8009b28 <dhcp_bind>
 800a62c:	e00a      	b.n	800a644 <dhcp_fine_tmr+0x70>
    }
#endif /* DHCP_DOES_ARP_CHECK */
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800a62e:	2a03      	cmp	r2, #3
 800a630:	d108      	bne.n	800a644 <dhcp_fine_tmr+0x70>
    if (dhcp->tries < REBOOT_TRIES) {
 800a632:	7b5b      	ldrb	r3, [r3, #13]
      dhcp_reboot(netif);
 800a634:	4620      	mov	r0, r4
      /* bind the interface to the offered address */
      dhcp_bind(netif);
    }
#endif /* DHCP_DOES_ARP_CHECK */
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
    if (dhcp->tries < REBOOT_TRIES) {
 800a636:	2b01      	cmp	r3, #1
 800a638:	d802      	bhi.n	800a640 <dhcp_fine_tmr+0x6c>
      dhcp_reboot(netif);
 800a63a:	f7ff faf1 	bl	8009c20 <dhcp_reboot>
 800a63e:	e001      	b.n	800a644 <dhcp_fine_tmr+0x70>
    } else {
      dhcp_discover(netif);
 800a640:	f7ff fb42 	bl	8009cc8 <dhcp_discover>
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800a644:	6824      	ldr	r4, [r4, #0]
 800a646:	e7c9      	b.n	800a5dc <dhcp_fine_tmr+0x8>
  }
}
 800a648:	bd38      	pop	{r3, r4, r5, pc}
 800a64a:	bf00      	nop
 800a64c:	20049268 	.word	0x20049268

0800a650 <icmp_input>:
  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
  if (p->len < sizeof(u16_t)*2) {
 800a650:	8943      	ldrh	r3, [r0, #10]
 800a652:	2b03      	cmp	r3, #3
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800a654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a658:	4604      	mov	r4, r0
 800a65a:	b085      	sub	sp, #20
 800a65c:	4688      	mov	r8, r1
  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
  if (p->len < sizeof(u16_t)*2) {
 800a65e:	d968      	bls.n	800a732 <icmp_input+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800a660:	6843      	ldr	r3, [r0, #4]
#if LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	2b08      	cmp	r3, #8
 800a666:	d164      	bne.n	800a732 <icmp_input+0xe2>
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
    /* multicast destination address? */
    if (ip_addr_ismulticast(ip_current_dest_addr())) {
 800a668:	4b35      	ldr	r3, [pc, #212]	; (800a740 <icmp_input+0xf0>)
 800a66a:	6958      	ldr	r0, [r3, #20]
 800a66c:	461f      	mov	r7, r3
 800a66e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a672:	2ae0      	cmp	r2, #224	; 0xe0
 800a674:	d05d      	beq.n	800a732 <icmp_input+0xe2>
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800a676:	f8d3 9008 	ldr.w	r9, [r3, #8]
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) {
 800a67a:	6819      	ldr	r1, [r3, #0]

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
 800a67c:	f899 5000 	ldrb.w	r5, [r9]
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) {
 800a680:	f000 f9e1 	bl	800aa46 <ip4_addr_isbroadcast_u32>
 800a684:	2800      	cmp	r0, #0
 800a686:	d154      	bne.n	800a732 <icmp_input+0xe2>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a688:	8923      	ldrh	r3, [r4, #8]
 800a68a:	2b07      	cmp	r3, #7
 800a68c:	d951      	bls.n	800a732 <icmp_input+0xe2>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
 800a68e:	4620      	mov	r0, r4
 800a690:	f7ff f8fe 	bl	8009890 <inet_chksum_pbuf>
 800a694:	4606      	mov	r6, r0
 800a696:	2800      	cmp	r0, #0
 800a698:	d14b      	bne.n	800a732 <icmp_input+0xe2>

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
 800a69a:	f005 050f 	and.w	r5, r5, #15
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a69e:	2122      	movs	r1, #34	; 0x22
 800a6a0:	4620      	mov	r0, r4

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
 800a6a2:	00ad      	lsls	r5, r5, #2
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a6a4:	f000 fcf0 	bl	800b088 <pbuf_header>
 800a6a8:	b308      	cbz	r0, 800a6ee <icmp_input+0x9e>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800a6aa:	8921      	ldrh	r1, [r4, #8]
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	2002      	movs	r0, #2
 800a6b0:	4429      	add	r1, r5
 800a6b2:	b289      	uxth	r1, r1
 800a6b4:	f000 fd16 	bl	800b0e4 <pbuf_alloc>
      if (r == NULL) {
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d039      	beq.n	800a732 <icmp_input+0xe2>
        goto icmperr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800a6be:	4649      	mov	r1, r9
 800a6c0:	462a      	mov	r2, r5
 800a6c2:	6840      	ldr	r0, [r0, #4]
 800a6c4:	f007 f9bd 	bl	8011a42 <memcpy>
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 800a6c8:	4269      	negs	r1, r5
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f000 fcdc 	bl	800b088 <pbuf_header>
 800a6d0:	b920      	cbnz	r0, 800a6dc <icmp_input+0x8c>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
        pbuf_free(r);
        goto icmperr;
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f000 fdd4 	bl	800b282 <pbuf_copy>
 800a6da:	b118      	cbz	r0, 800a6e4 <icmp_input+0x94>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        pbuf_free(r);
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f000 fce1 	bl	800b0a4 <pbuf_free>
        goto icmperr;
 800a6e2:	e026      	b.n	800a732 <icmp_input+0xe2>
      }
      /* free the original p */
      pbuf_free(p);
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	4634      	mov	r4, r6
 800a6e8:	f000 fcdc 	bl	800b0a4 <pbuf_free>
 800a6ec:	e005      	b.n	800a6fa <icmp_input+0xaa>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a6ee:	f06f 0121 	mvn.w	r1, #33	; 0x21
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 fcc8 	bl	800b088 <pbuf_header>
 800a6f8:	b9d8      	cbnz	r0, 800a732 <icmp_input+0xe2>
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
    if (pbuf_header(p, hlen)) {
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4620      	mov	r0, r4
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800a6fe:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, hlen)) {
 800a700:	f000 fcc2 	bl	800b088 <pbuf_header>
 800a704:	4602      	mov	r2, r0
 800a706:	b9a0      	cbnz	r0, 800a732 <icmp_input+0xe2>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a708:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	610b      	str	r3, [r1, #16]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a712:	23ff      	movs	r3, #255	; 0xff
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
      ip4_addr_copy(iphdr->src, *src);
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a714:	7030      	strb	r0, [r6, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800a716:	70b0      	strb	r0, [r6, #2]
 800a718:	70f0      	strb	r0, [r6, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
      IPH_CHKSUM_SET(iphdr, 0);
 800a71a:	7288      	strb	r0, [r1, #10]
 800a71c:	72c8      	strb	r0, [r1, #11]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a71e:	720b      	strb	r3, [r1, #8]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, IP_HDRINCL,
 800a720:	2101      	movs	r1, #1
 800a722:	9000      	str	r0, [sp, #0]
 800a724:	4620      	mov	r0, r4
 800a726:	9101      	str	r1, [sp, #4]
 800a728:	f8cd 8008 	str.w	r8, [sp, #8]
 800a72c:	4905      	ldr	r1, [pc, #20]	; (800a744 <icmp_input+0xf4>)
 800a72e:	f000 f979 	bl	800aa24 <ip4_output_if>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a732:	4620      	mov	r0, r4
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a734:	b005      	add	sp, #20
 800a736:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a73a:	f000 bcb3 	b.w	800b0a4 <pbuf_free>
 800a73e:	bf00      	nop
 800a740:	20043160 	.word	0x20043160
 800a744:	20043174 	.word	0x20043174

0800a748 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a748:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a74a:	2200      	movs	r2, #0
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a74c:	b087      	sub	sp, #28
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a752:	2001      	movs	r0, #1
 800a754:	2124      	movs	r1, #36	; 0x24
 800a756:	f000 fcc5 	bl	800b0e4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800a75a:	4605      	mov	r5, r0
 800a75c:	b358      	cbz	r0, 800a7b6 <icmp_dest_unreach+0x6e>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a75e:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
 800a760:	2303      	movs	r3, #3
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a762:	6871      	ldr	r1, [r6, #4]
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
 800a764:	7023      	strb	r3, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800a766:	2300      	movs	r3, #0
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
 800a768:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800a76a:	7123      	strb	r3, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a76c:	6842      	ldr	r2, [r0, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800a76e:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800a770:	71a3      	strb	r3, [r4, #6]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a772:	3208      	adds	r2, #8

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
  icmphdr->seqno = 0;
 800a774:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a776:	6873      	ldr	r3, [r6, #4]
 800a778:	f103 001c 	add.w	r0, r3, #28
 800a77c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a780:	4283      	cmp	r3, r0
 800a782:	f842 6b04 	str.w	r6, [r2], #4
 800a786:	d1f9      	bne.n	800a77c <icmp_dest_unreach+0x34>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a788:	ae06      	add	r6, sp, #24
 800a78a:	68cb      	ldr	r3, [r1, #12]
 800a78c:	f846 3d04 	str.w	r3, [r6, #-4]!
  netif = ip4_route(&iphdr_src);
 800a790:	4630      	mov	r0, r6
 800a792:	f000 f813 	bl	800a7bc <ip4_route>
  if (netif != NULL) {
 800a796:	b158      	cbz	r0, 800a7b0 <icmp_dest_unreach+0x68>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a798:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a79a:	2301      	movs	r3, #1
 800a79c:	4632      	mov	r2, r6

  ip4_addr_copy(iphdr_src, iphdr->src);
  netif = ip4_route(&iphdr_src);
  if (netif != NULL) {
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a79e:	70a1      	strb	r1, [r4, #2]
 800a7a0:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a7a2:	9002      	str	r0, [sp, #8]
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	e88d 000a 	stmia.w	sp, {r1, r3}
 800a7aa:	23ff      	movs	r3, #255	; 0xff
 800a7ac:	f000 f93a 	bl	800aa24 <ip4_output_if>
  }
  pbuf_free(q);
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	f000 fc77 	bl	800b0a4 <pbuf_free>
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
}
 800a7b6:	b007      	add	sp, #28
 800a7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a7bc <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a7bc:	4b13      	ldr	r3, [pc, #76]	; (800a80c <ip4_route+0x50>)
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a7be:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	b19b      	cbz	r3, 800a7ec <ip4_route+0x30>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a7c4:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
 800a7c8:	f004 0205 	and.w	r2, r4, #5
 800a7cc:	2a05      	cmp	r2, #5
 800a7ce:	d1f7      	bne.n	800a7c0 <ip4_route+0x4>
 800a7d0:	685a      	ldr	r2, [r3, #4]
 800a7d2:	2a00      	cmp	r2, #0
 800a7d4:	d0f4      	beq.n	800a7c0 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a7d6:	6801      	ldr	r1, [r0, #0]
 800a7d8:	689d      	ldr	r5, [r3, #8]
 800a7da:	404a      	eors	r2, r1
 800a7dc:	422a      	tst	r2, r5
 800a7de:	d013      	beq.n	800a808 <ip4_route+0x4c>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a7e0:	07a2      	lsls	r2, r4, #30
 800a7e2:	d4ed      	bmi.n	800a7c0 <ip4_route+0x4>
 800a7e4:	68da      	ldr	r2, [r3, #12]
 800a7e6:	4291      	cmp	r1, r2
 800a7e8:	d1ea      	bne.n	800a7c0 <ip4_route+0x4>
 800a7ea:	e00d      	b.n	800a808 <ip4_route+0x4c>
    }
    return NULL;
  }
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a7ec:	4a08      	ldr	r2, [pc, #32]	; (800a810 <ip4_route+0x54>)
 800a7ee:	6810      	ldr	r0, [r2, #0]
 800a7f0:	b158      	cbz	r0, 800a80a <ip4_route+0x4e>
 800a7f2:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 800a7f6:	f002 0205 	and.w	r2, r2, #5
 800a7fa:	2a05      	cmp	r2, #5
 800a7fc:	d104      	bne.n	800a808 <ip4_route+0x4c>
 800a7fe:	6843      	ldr	r3, [r0, #4]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a800:	2b00      	cmp	r3, #0
 800a802:	bf08      	it	eq
 800a804:	2000      	moveq	r0, #0
 800a806:	bd30      	pop	{r4, r5, pc}
 800a808:	4618      	mov	r0, r3
  }

  return netif_default;
}
 800a80a:	bd30      	pop	{r4, r5, pc}
 800a80c:	20049268 	.word	0x20049268
 800a810:	2004926c 	.word	0x2004926c

0800a814 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a818:	6847      	ldr	r7, [r0, #4]
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a81a:	4606      	mov	r6, r0
 800a81c:	4689      	mov	r9, r1
  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  if (IPH_V(iphdr) != 4) {
 800a81e:	f897 8000 	ldrb.w	r8, [r7]
 800a822:	ea4f 1318 	mov.w	r3, r8, lsr #4
 800a826:	2b04      	cmp	r3, #4
 800a828:	d003      	beq.n	800a832 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a82a:	4630      	mov	r0, r6
 800a82c:	f000 fc3a 	bl	800b0a4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a830:	e0a2      	b.n	800a978 <ip4_input+0x164>
  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800a832:	8878      	ldrh	r0, [r7, #2]
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800a834:	f008 080f 	and.w	r8, r8, #15
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800a838:	f7fe fff7 	bl	800982a <lwip_ntohs>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a83c:	8933      	ldrh	r3, [r6, #8]
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800a83e:	ea4f 0888 	mov.w	r8, r8, lsl #2
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800a842:	4604      	mov	r4, r0

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a844:	4283      	cmp	r3, r0
 800a846:	d903      	bls.n	800a850 <ip4_input+0x3c>
    pbuf_realloc(p, iphdr_len);
 800a848:	4601      	mov	r1, r0
 800a84a:	4630      	mov	r0, r6
 800a84c:	f000 fcd0 	bl	800b1f0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 800a850:	8973      	ldrh	r3, [r6, #10]
 800a852:	4543      	cmp	r3, r8
 800a854:	d3e9      	bcc.n	800a82a <ip4_input+0x16>
 800a856:	8933      	ldrh	r3, [r6, #8]
 800a858:	42a3      	cmp	r3, r4
 800a85a:	d3e6      	bcc.n	800a82a <ip4_input+0x16>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a85c:	693b      	ldr	r3, [r7, #16]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a85e:	464d      	mov	r5, r9
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a860:	4c47      	ldr	r4, [pc, #284]	; (800a980 <ip4_input+0x16c>)
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800a862:	f04f 0a01 	mov.w	sl, #1
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
        first = 0;
        netif = netif_list;
 800a866:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800a984 <ip4_input+0x170>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a86a:	6163      	str	r3, [r4, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6123      	str	r3, [r4, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a870:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 800a874:	07db      	lsls	r3, r3, #31
 800a876:	d405      	bmi.n	800a884 <ip4_input+0x70>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800a878:	f1ba 0f00 	cmp.w	sl, #0
 800a87c:	d00e      	beq.n	800a89c <ip4_input+0x88>
        first = 0;
        netif = netif_list;
 800a87e:	f8db 5000 	ldr.w	r5, [fp]
 800a882:	e00c      	b.n	800a89e <ip4_input+0x8a>
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a884:	686b      	ldr	r3, [r5, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d0f6      	beq.n	800a878 <ip4_input+0x64>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a88a:	6960      	ldr	r0, [r4, #20]
 800a88c:	4283      	cmp	r3, r0
 800a88e:	d063      	beq.n	800a958 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(ip_current_dest_addr(), netif)
 800a890:	4629      	mov	r1, r5
 800a892:	f000 f8d8 	bl	800aa46 <ip4_addr_isbroadcast_u32>
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a896:	2800      	cmp	r0, #0
 800a898:	d0ee      	beq.n	800a878 <ip4_input+0x64>
 800a89a:	e05d      	b.n	800a958 <ip4_input+0x144>
      }
      if (first) {
        first = 0;
        netif = netif_list;
      } else {
        netif = netif->next;
 800a89c:	682d      	ldr	r5, [r5, #0]
      }
      if (netif == inp) {
 800a89e:	454d      	cmp	r5, r9
 800a8a0:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 800a8a4:	bf08      	it	eq
 800a8a6:	682d      	ldreq	r5, [r5, #0]
      }
    } while (netif != NULL);
 800a8a8:	2d00      	cmp	r5, #0
 800a8aa:	d1e1      	bne.n	800a870 <ip4_input+0x5c>
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800a8ac:	7a7b      	ldrb	r3, [r7, #9]
 800a8ae:	2b11      	cmp	r3, #17
 800a8b0:	d152      	bne.n	800a958 <ip4_input+0x144>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800a8b2:	eb07 0308 	add.w	r3, r7, r8
 800a8b6:	885b      	ldrh	r3, [r3, #2]
 800a8b8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800a8bc:	d14c      	bne.n	800a958 <ip4_input+0x144>
 800a8be:	464d      	mov	r5, r9
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a8c0:	2d00      	cmp	r5, #0
 800a8c2:	d0b2      	beq.n	800a82a <ip4_input+0x16>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a8c4:	88fb      	ldrh	r3, [r7, #6]
 800a8c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1ad      	bne.n	800a82a <ip4_input+0x16>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800a8ce:	60a7      	str	r7, [r4, #8]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a8d0:	f1c8 0100 	rsb	r1, r8, #0
 800a8d4:	4630      	mov	r0, r6
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a8d6:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a980 <ip4_input+0x16c>
  ip_data.current_input_netif = inp;
 800a8da:	e884 0220 	stmia.w	r4, {r5, r9}
  ip_data.current_ip4_header = iphdr;
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a8de:	783b      	ldrb	r3, [r7, #0]
 800a8e0:	f003 030f 	and.w	r3, r3, #15
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	81a3      	strh	r3, [r4, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a8e8:	f000 fbce 	bl	800b088 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800a8ec:	7a7b      	ldrb	r3, [r7, #9]
 800a8ee:	2b06      	cmp	r3, #6
 800a8f0:	d00d      	beq.n	800a90e <ip4_input+0xfa>
 800a8f2:	2b11      	cmp	r3, #17
 800a8f4:	d006      	beq.n	800a904 <ip4_input+0xf0>
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d10e      	bne.n	800a918 <ip4_input+0x104>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff fea7 	bl	800a650 <icmp_input>
      break;
 800a902:	e021      	b.n	800a948 <ip4_input+0x134>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800a904:	4649      	mov	r1, r9
 800a906:	4630      	mov	r0, r6
 800a908:	f002 ff6e 	bl	800d7e8 <udp_input>
      break;
 800a90c:	e01c      	b.n	800a948 <ip4_input+0x134>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800a90e:	4649      	mov	r1, r9
 800a910:	4630      	mov	r0, r6
 800a912:	f001 fdd3 	bl	800c4bc <tcp_input>
      break;
 800a916:	e017      	b.n	800a948 <ip4_input+0x134>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(ip_current_dest_addr(), netif) &&
 800a918:	4629      	mov	r1, r5
 800a91a:	f8da 0014 	ldr.w	r0, [sl, #20]
 800a91e:	f000 f892 	bl	800aa46 <ip4_addr_isbroadcast_u32>
 800a922:	b970      	cbnz	r0, 800a942 <ip4_input+0x12e>
 800a924:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a92c:	2be0      	cmp	r3, #224	; 0xe0
 800a92e:	d008      	beq.n	800a942 <ip4_input+0x12e>
          !ip_addr_ismulticast(ip_current_dest_addr())) {
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800a930:	4641      	mov	r1, r8
 800a932:	4630      	mov	r0, r6
 800a934:	f000 fbaf 	bl	800b096 <pbuf_header_force>
        p->payload = iphdr;
 800a938:	6077      	str	r7, [r6, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a93a:	2102      	movs	r1, #2
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7ff ff03 	bl	800a748 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800a942:	4630      	mov	r0, r6
 800a944:	f000 fbae 	bl	800b0a4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a948:	2300      	movs	r3, #0
 800a94a:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 800a94c:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 800a94e:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a950:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a952:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a954:	6163      	str	r3, [r4, #20]

  return ERR_OK;
 800a956:	e00f      	b.n	800a978 <ip4_input+0x164>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip_addr_isany_val(*ip_current_src_addr())
 800a958:	6920      	ldr	r0, [r4, #16]
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d0b0      	beq.n	800a8c0 <ip4_input+0xac>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip_addr_isbroadcast(ip_current_src_addr(), inp)) ||
 800a95e:	4649      	mov	r1, r9
 800a960:	f000 f871 	bl	800aa46 <ip4_addr_isbroadcast_u32>
 800a964:	2800      	cmp	r0, #0
 800a966:	f47f af60 	bne.w	800a82a <ip4_input+0x16>
 800a96a:	4b05      	ldr	r3, [pc, #20]	; (800a980 <ip4_input+0x16c>)
 800a96c:	691b      	ldr	r3, [r3, #16]
 800a96e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a972:	2be0      	cmp	r3, #224	; 0xe0
 800a974:	d1a4      	bne.n	800a8c0 <ip4_input+0xac>
 800a976:	e758      	b.n	800a82a <ip4_input+0x16>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800a978:	2000      	movs	r0, #0
 800a97a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	bf00      	nop
 800a980:	20043160 	.word	0x20043160
 800a984:	20049268 	.word	0x20049268

0800a988 <ip_input>:
    }
    return ip4_input(p, inp);
  }
  return ERR_VAL;
#else /* LWIP_IPV6 */
  return ip4_input(p, inp);
 800a988:	f7ff bf44 	b.w	800a814 <ip4_input>

0800a98c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a98c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800a994:	4606      	mov	r6, r0
 800a996:	4689      	mov	r9, r1
 800a998:	469a      	mov	sl, r3
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 800a99a:	4615      	mov	r5, r2
 800a99c:	b36a      	cbz	r2, 800a9fa <ip4_output_if_src+0x6e>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800a99e:	2114      	movs	r1, #20
 800a9a0:	f000 fb72 	bl	800b088 <pbuf_header>
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d133      	bne.n	800aa12 <ip4_output_if_src+0x86>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a9aa:	6874      	ldr	r4, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800a9ac:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a9b0:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a9b4:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a9b6:	682b      	ldr	r3, [r5, #0]
 800a9b8:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a9ba:	2345      	movs	r3, #69	; 0x45
 800a9bc:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800a9be:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a9c2:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 800a9c4:	8930      	ldrh	r0, [r6, #8]
 800a9c6:	f7fe ff2d 	bl	8009824 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a9ca:	71a7      	strb	r7, [r4, #6]
 800a9cc:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 800a9ce:	4f13      	ldr	r7, [pc, #76]	; (800aa1c <ip4_output_if_src+0x90>)
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 800a9d0:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, htons(ip_id));
 800a9d2:	8838      	ldrh	r0, [r7, #0]
 800a9d4:	f7fe ff26 	bl	8009824 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a9d8:	883b      	ldrh	r3, [r7, #0]
    IPH_LEN_SET(iphdr, htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, htons(ip_id));
 800a9da:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a9dc:	3301      	adds	r3, #1
 800a9de:	803b      	strh	r3, [r7, #0]

    if (src == NULL) {
 800a9e0:	f1b9 0f00 	cmp.w	r9, #0
 800a9e4:	d102      	bne.n	800a9ec <ip4_output_if_src+0x60>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY);
 800a9e6:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <ip4_output_if_src+0x94>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	e001      	b.n	800a9f0 <ip4_output_if_src+0x64>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a9ec:	f8d9 3000 	ldr.w	r3, [r9]
 800a9f0:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	72a3      	strb	r3, [r4, #10]
 800a9f6:	72e3      	strb	r3, [r4, #11]
 800a9f8:	e004      	b.n	800aa04 <ip4_output_if_src+0x78>
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a9fa:	6843      	ldr	r3, [r0, #4]
 800a9fc:	ad02      	add	r5, sp, #8
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	f845 3d04 	str.w	r3, [r5, #-4]!
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800aa04:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800aa08:	462a      	mov	r2, r5
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	4798      	blx	r3
 800aa10:	e001      	b.n	800aa16 <ip4_output_if_src+0x8a>
    if (pbuf_header(p, IP_HLEN)) {
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800aa12:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800aa16:	b002      	add	sp, #8
 800aa18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa1c:	20042dec 	.word	0x20042dec
 800aa20:	0802f354 	.word	0x0802f354

0800aa24 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800aa24:	b4f0      	push	{r4, r5, r6, r7}
 800aa26:	9c06      	ldr	r4, [sp, #24]
 800aa28:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800aa2c:	f89d 6014 	ldrb.w	r6, [sp, #20]
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  if (dest != IP_HDRINCL) {
 800aa30:	b11a      	cbz	r2, 800aa3a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800aa32:	b109      	cbz	r1, 800aa38 <ip4_output_if+0x14>
 800aa34:	680f      	ldr	r7, [r1, #0]
 800aa36:	b907      	cbnz	r7, 800aa3a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800aa38:	1d21      	adds	r1, r4, #4

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800aa3a:	9406      	str	r4, [sp, #24]
 800aa3c:	9605      	str	r6, [sp, #20]
 800aa3e:	9504      	str	r5, [sp, #16]
#endif /* IP_OPTIONS_SEND */
}
 800aa40:	bcf0      	pop	{r4, r5, r6, r7}

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800aa42:	f7ff bfa3 	b.w	800a98c <ip4_output_if_src>

0800aa46 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800aa46:	1e43      	subs	r3, r0, #1
 800aa48:	3303      	adds	r3, #3
 800aa4a:	d813      	bhi.n	800aa74 <ip4_addr_isbroadcast_u32+0x2e>
 800aa4c:	f891 2033 	ldrb.w	r2, [r1, #51]	; 0x33
 800aa50:	f002 0202 	and.w	r2, r2, #2
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800aa54:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800aa58:	b17a      	cbz	r2, 800aa7a <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800aa5a:	684a      	ldr	r2, [r1, #4]
 800aa5c:	4290      	cmp	r0, r2
 800aa5e:	d00b      	beq.n	800aa78 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800aa60:	688b      	ldr	r3, [r1, #8]
 800aa62:	4042      	eors	r2, r0
 800aa64:	421a      	tst	r2, r3
 800aa66:	d107      	bne.n	800aa78 <ip4_addr_isbroadcast_u32+0x32>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800aa68:	43db      	mvns	r3, r3
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
      (addr == IPADDR_ANY)) {
    return 1;
 800aa6a:	4383      	bics	r3, r0
 800aa6c:	bf0c      	ite	eq
 800aa6e:	2301      	moveq	r3, #1
 800aa70:	2300      	movne	r3, #0
 800aa72:	e002      	b.n	800aa7a <ip4_addr_isbroadcast_u32+0x34>
 800aa74:	2301      	movs	r3, #1
 800aa76:	e000      	b.n	800aa7a <ip4_addr_isbroadcast_u32+0x34>
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800aa78:	2300      	movs	r3, #0
  }
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	4770      	bx	lr
	...

0800aa80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aa80:	b570      	push	{r4, r5, r6, lr}
 800aa82:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;
#if NO_SYS
  u32_t now, diff;
#endif

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aa84:	2008      	movs	r0, #8
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aa86:	460e      	mov	r6, r1
 800aa88:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;
#if NO_SYS
  u32_t now, diff;
#endif

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aa8a:	f000 fa45 	bl	800af18 <memp_malloc>
  if (timeout == NULL) {
 800aa8e:	b300      	cbz	r0, 800aad2 <sys_timeout+0x52>
  } else {
    diff = now - timeouts_last_time;
  }
#endif

  timeout->next = NULL;
 800aa90:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800aa92:	4910      	ldr	r1, [pc, #64]	; (800aad4 <sys_timeout+0x54>)
    diff = now - timeouts_last_time;
  }
#endif

  timeout->next = NULL;
  timeout->h = handler;
 800aa94:	6086      	str	r6, [r0, #8]
  } else {
    diff = now - timeouts_last_time;
  }
#endif

  timeout->next = NULL;
 800aa96:	6003      	str	r3, [r0, #0]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800aa98:	680b      	ldr	r3, [r1, #0]
  }
#endif

  timeout->next = NULL;
  timeout->h = handler;
  timeout->arg = arg;
 800aa9a:	60c5      	str	r5, [r0, #12]
#if NO_SYS
  timeout->time = msecs + diff;
#else
  timeout->time = msecs;
 800aa9c:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800aa9e:	b12b      	cbz	r3, 800aaac <sys_timeout+0x2c>
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	4294      	cmp	r4, r2
 800aaa4:	d208      	bcs.n	800aab8 <sys_timeout+0x38>
    next_timeout->time -= msecs;
 800aaa6:	1b12      	subs	r2, r2, r4
 800aaa8:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800aaaa:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800aaac:	6008      	str	r0, [r1, #0]
 800aaae:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
 800aab0:	6854      	ldr	r4, [r2, #4]
 800aab2:	42a1      	cmp	r1, r4
 800aab4:	d308      	bcc.n	800aac8 <sys_timeout+0x48>
 800aab6:	4613      	mov	r3, r2
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
 800aab8:	6842      	ldr	r2, [r0, #4]
 800aaba:	6859      	ldr	r1, [r3, #4]
 800aabc:	1a51      	subs	r1, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800aabe:	681a      	ldr	r2, [r3, #0]
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
 800aac0:	6041      	str	r1, [r0, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800aac2:	2a00      	cmp	r2, #0
 800aac4:	d1f4      	bne.n	800aab0 <sys_timeout+0x30>
 800aac6:	e001      	b.n	800aacc <sys_timeout+0x4c>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
 800aac8:	1a61      	subs	r1, r4, r1
 800aaca:	6051      	str	r1, [r2, #4]
        }
        timeout->next = t->next;
 800aacc:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 800aace:	6018      	str	r0, [r3, #0]
        break;
 800aad0:	bd70      	pop	{r4, r5, r6, pc}
 800aad2:	bd70      	pop	{r4, r5, r6, pc}
 800aad4:	20042df4 	.word	0x20042df4

0800aad8 <tcp_timer_needed>:
 */
void
tcp_timer_needed(void)
{
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <tcp_timer_needed+0x24>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	b962      	cbnz	r2, 800aaf8 <tcp_timer_needed+0x20>
 800aade:	4a08      	ldr	r2, [pc, #32]	; (800ab00 <tcp_timer_needed+0x28>)
 800aae0:	6812      	ldr	r2, [r2, #0]
 800aae2:	b912      	cbnz	r2, 800aaea <tcp_timer_needed+0x12>
 800aae4:	4a07      	ldr	r2, [pc, #28]	; (800ab04 <tcp_timer_needed+0x2c>)
 800aae6:	6812      	ldr	r2, [r2, #0]
 800aae8:	b132      	cbz	r2, 800aaf8 <tcp_timer_needed+0x20>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800aaea:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aaec:	4906      	ldr	r1, [pc, #24]	; (800ab08 <tcp_timer_needed+0x30>)
 800aaee:	20fa      	movs	r0, #250	; 0xfa
tcp_timer_needed(void)
{
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800aaf0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f7ff bfc4 	b.w	800aa80 <sys_timeout>
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	20042df0 	.word	0x20042df0
 800ab00:	20049274 	.word	0x20049274
 800ab04:	20049284 	.word	0x20049284
 800ab08:	0800ab0d 	.word	0x0800ab0d

0800ab0c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ab0c:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ab0e:	f000 ffff 	bl	800bb10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ab12:	4b08      	ldr	r3, [pc, #32]	; (800ab34 <tcpip_tcp_timer+0x28>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	b913      	cbnz	r3, 800ab1e <tcpip_tcp_timer+0x12>
 800ab18:	4b07      	ldr	r3, [pc, #28]	; (800ab38 <tcpip_tcp_timer+0x2c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	b133      	cbz	r3, 800ab2c <tcpip_tcp_timer+0x20>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ab1e:	2200      	movs	r2, #0
 800ab20:	4906      	ldr	r1, [pc, #24]	; (800ab3c <tcpip_tcp_timer+0x30>)
 800ab22:	20fa      	movs	r0, #250	; 0xfa
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  }
}
 800ab24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* call TCP timer handler */
  tcp_tmr();
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ab28:	f7ff bfaa 	b.w	800aa80 <sys_timeout>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ab2c:	4a04      	ldr	r2, [pc, #16]	; (800ab40 <tcpip_tcp_timer+0x34>)
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	bd08      	pop	{r3, pc}
 800ab32:	bf00      	nop
 800ab34:	20049274 	.word	0x20049274
 800ab38:	20049284 	.word	0x20049284
 800ab3c:	0800ab0d 	.word	0x0800ab0d
 800ab40:	20042df0 	.word	0x20042df0

0800ab44 <sys_timeouts_init>:
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ab44:	b508      	push	{r3, lr}
#if LWIP_IPV4
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800ab46:	2200      	movs	r2, #0
 800ab48:	4909      	ldr	r1, [pc, #36]	; (800ab70 <sys_timeouts_init+0x2c>)
 800ab4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab4e:	f7ff ff97 	bl	800aa80 <sys_timeout>
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 800ab52:	2200      	movs	r2, #0
 800ab54:	4907      	ldr	r1, [pc, #28]	; (800ab74 <sys_timeouts_init+0x30>)
 800ab56:	f64e 2060 	movw	r0, #60000	; 0xea60
 800ab5a:	f7ff ff91 	bl	800aa80 <sys_timeout>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 800ab5e:	2200      	movs	r2, #0
 800ab60:	4905      	ldr	r1, [pc, #20]	; (800ab78 <sys_timeouts_init+0x34>)
 800ab62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
#endif
}
 800ab66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 800ab6a:	f7ff bf89 	b.w	800aa80 <sys_timeout>
 800ab6e:	bf00      	nop
 800ab70:	0800abb5 	.word	0x0800abb5
 800ab74:	0800ab99 	.word	0x0800ab99
 800ab78:	0800ab7d 	.word	0x0800ab7d

0800ab7c <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
 800ab7c:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
 800ab7e:	f7ff fd29 	bl	800a5d4 <dhcp_fine_tmr>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 800ab82:	2200      	movs	r2, #0
 800ab84:	4903      	ldr	r1, [pc, #12]	; (800ab94 <dhcp_timer_fine+0x18>)
 800ab86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800ab8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
dhcp_timer_fine(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 800ab8e:	f7ff bf77 	b.w	800aa80 <sys_timeout>
 800ab92:	bf00      	nop
 800ab94:	0800ab7d 	.word	0x0800ab7d

0800ab98 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
 800ab98:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
 800ab9a:	f7ff fc89 	bl	800a4b0 <dhcp_coarse_tmr>
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4903      	ldr	r1, [pc, #12]	; (800abb0 <dhcp_timer_coarse+0x18>)
 800aba2:	f64e 2060 	movw	r0, #60000	; 0xea60
}
 800aba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
dhcp_timer_coarse(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 800abaa:	f7ff bf69 	b.w	800aa80 <sys_timeout>
 800abae:	bf00      	nop
 800abb0:	0800ab99 	.word	0x0800ab99

0800abb4 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 800abb4:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 800abb6:	f003 f93b 	bl	800de30 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800abba:	2200      	movs	r2, #0
 800abbc:	4903      	ldr	r1, [pc, #12]	; (800abcc <arp_timer+0x18>)
 800abbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800abc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
arp_timer(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800abc6:	f7ff bf5b 	b.w	800aa80 <sys_timeout>
 800abca:	bf00      	nop
 800abcc:	0800abb5 	.word	0x0800abb5

0800abd0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800abd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
 800abd4:	4f16      	ldr	r7, [pc, #88]	; (800ac30 <sys_timeouts_mbox_fetch+0x60>)
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800abd6:	4605      	mov	r5, r0
 800abd8:	460e      	mov	r6, r1
 800abda:	46b8      	mov	r8, r7
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
 800abdc:	683a      	ldr	r2, [r7, #0]
 800abde:	b92a      	cbnz	r2, 800abec <sys_timeouts_mbox_fetch+0x1c>
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
      } else {
        next_timeout->time = 0;
      }
    }
  }
}
 800abe4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
 800abe8:	f003 bb60 	b.w	800e2ac <sys_arch_mbox_fetch>
  } else {
    if (next_timeout->time > 0) {
 800abec:	6852      	ldr	r2, [r2, #4]
 800abee:	b97a      	cbnz	r2, 800ac10 <sys_timeouts_mbox_fetch+0x40>

    if (time_needed == SYS_ARCH_TIMEOUT) {
      /* If time == SYS_ARCH_TIMEOUT, a timeout occurred before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
 800abf0:	f8d8 1000 	ldr.w	r1, [r8]
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800abf4:	2008      	movs	r0, #8
    if (time_needed == SYS_ARCH_TIMEOUT) {
      /* If time == SYS_ARCH_TIMEOUT, a timeout occurred before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
      next_timeout = tmptimeout->next;
 800abf6:	680b      	ldr	r3, [r1, #0]
      handler = tmptimeout->h;
 800abf8:	688c      	ldr	r4, [r1, #8]
    if (time_needed == SYS_ARCH_TIMEOUT) {
      /* If time == SYS_ARCH_TIMEOUT, a timeout occurred before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
      next_timeout = tmptimeout->next;
 800abfa:	f8c8 3000 	str.w	r3, [r8]
      handler = tmptimeout->h;
      arg = tmptimeout->arg;
 800abfe:	f8d1 900c 	ldr.w	r9, [r1, #12]
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ac02:	f000 f995 	bl	800af30 <memp_free>
      if (handler != NULL) {
 800ac06:	2c00      	cmp	r4, #0
 800ac08:	d0e8      	beq.n	800abdc <sys_timeouts_mbox_fetch+0xc>
        /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
           timeout handler function. */
        LOCK_TCPIP_CORE();
        handler(arg);
 800ac0a:	4648      	mov	r0, r9
 800ac0c:	47a0      	blx	r4
 800ac0e:	e7e5      	b.n	800abdc <sys_timeouts_mbox_fetch+0xc>
 again:
  if (!next_timeout) {
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
  } else {
    if (next_timeout->time > 0) {
      time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
 800ac10:	4631      	mov	r1, r6
 800ac12:	4628      	mov	r0, r5
 800ac14:	f003 fb4a 	bl	800e2ac <sys_arch_mbox_fetch>
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d0e9      	beq.n	800abf0 <sys_timeouts_mbox_fetch+0x20>
      goto again;
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
 800ac1c:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <sys_timeouts_mbox_fetch+0x60>)
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	6853      	ldr	r3, [r2, #4]
 800ac22:	4298      	cmp	r0, r3
        next_timeout->time -= time_needed;
 800ac24:	bf34      	ite	cc
 800ac26:	1a1b      	subcc	r3, r3, r0
      } else {
        next_timeout->time = 0;
 800ac28:	2300      	movcs	r3, #0
 800ac2a:	6053      	str	r3, [r2, #4]
 800ac2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac30:	20042df4 	.word	0x20042df4

0800ac34 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ac34:	4b0b      	ldr	r3, [pc, #44]	; (800ac64 <mem_init+0x30>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800ac36:	f44f 50a0 	mov.w	r0, #5120	; 0x1400

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ac3a:	4a0b      	ldr	r2, [pc, #44]	; (800ac68 <mem_init+0x34>)
 800ac3c:	f023 0303 	bic.w	r3, r3, #3
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ac40:	490a      	ldr	r1, [pc, #40]	; (800ac6c <mem_init+0x38>)

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ac42:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800ac44:	2200      	movs	r2, #0

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800ac46:	8018      	strh	r0, [r3, #0]
  mem->prev = 0;
 800ac48:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ac4a:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ac4c:	181a      	adds	r2, r3, r0
 800ac4e:	600a      	str	r2, [r1, #0]
  ram_end->used = 1;
 800ac50:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 800ac52:	8010      	strh	r0, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ac54:	8050      	strh	r0, [r2, #2]
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  ram_end->used = 1;
 800ac56:	7111      	strb	r1, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ac58:	4a05      	ldr	r2, [pc, #20]	; (800ac70 <mem_init+0x3c>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ac5a:	4806      	ldr	r0, [pc, #24]	; (800ac74 <mem_init+0x40>)
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ac5c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ac5e:	f003 bb62 	b.w	800e326 <sys_sem_new>
 800ac62:	bf00      	nop
 800ac64:	2004317b 	.word	0x2004317b
 800ac68:	20042e04 	.word	0x20042e04
 800ac6c:	20042dfc 	.word	0x20042dfc
 800ac70:	20042df8 	.word	0x20042df8
 800ac74:	20042e00 	.word	0x20042e00

0800ac78 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d046      	beq.n	800ad0e <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ac80:	4b23      	ldr	r3, [pc, #140]	; (800ad10 <mem_free+0x98>)
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	461d      	mov	r5, r3
 800ac86:	4290      	cmp	r0, r2
 800ac88:	d341      	bcc.n	800ad0e <mem_free+0x96>
 800ac8a:	4b22      	ldr	r3, [pc, #136]	; (800ad14 <mem_free+0x9c>)
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	461e      	mov	r6, r3
 800ac90:	4290      	cmp	r0, r2
 800ac92:	d23c      	bcs.n	800ad0e <mem_free+0x96>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ac94:	2100      	movs	r1, #0
 800ac96:	4820      	ldr	r0, [pc, #128]	; (800ad18 <mem_free+0xa0>)
 800ac98:	f003 fb63 	bl	800e362 <sys_arch_sem_wait>
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 800ac9c:	2300      	movs	r3, #0

  if (mem < lfree) {
 800ac9e:	491f      	ldr	r1, [pc, #124]	; (800ad1c <mem_free+0xa4>)
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800aca0:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 800aca4:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 800aca8:	680b      	ldr	r3, [r1, #0]
 800acaa:	429a      	cmp	r2, r3
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	f834 5c08 	ldrh.w	r5, [r4, #-8]
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800acb2:	bf38      	it	cc
 800acb4:	600a      	strcc	r2, [r1, #0]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 800acb6:	1958      	adds	r0, r3, r5
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800acb8:	4282      	cmp	r2, r0
 800acba:	d010      	beq.n	800acde <mem_free+0x66>
 800acbc:	7907      	ldrb	r7, [r0, #4]
 800acbe:	b977      	cbnz	r7, 800acde <mem_free+0x66>
 800acc0:	6836      	ldr	r6, [r6, #0]
 800acc2:	42b0      	cmp	r0, r6
 800acc4:	d00b      	beq.n	800acde <mem_free+0x66>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800acc6:	680e      	ldr	r6, [r1, #0]
 800acc8:	42b0      	cmp	r0, r6
      lfree = mem;
 800acca:	bf04      	itt	eq
 800accc:	4813      	ldreq	r0, [pc, #76]	; (800ad1c <mem_free+0xa4>)
 800acce:	6002      	streq	r2, [r0, #0]
    }
    mem->next = nmem->next;
 800acd0:	5b58      	ldrh	r0, [r3, r5]
 800acd2:	f824 0c08 	strh.w	r0, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800acd6:	5b58      	ldrh	r0, [r3, r5]
 800acd8:	1ad5      	subs	r5, r2, r3
 800acda:	4418      	add	r0, r3
 800acdc:	8045      	strh	r5, [r0, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800acde:	f834 0c06 	ldrh.w	r0, [r4, #-6]
 800ace2:	181d      	adds	r5, r3, r0
  if (pmem != mem && pmem->used == 0) {
 800ace4:	42aa      	cmp	r2, r5
 800ace6:	d00d      	beq.n	800ad04 <mem_free+0x8c>
 800ace8:	792e      	ldrb	r6, [r5, #4]
 800acea:	b95e      	cbnz	r6, 800ad04 <mem_free+0x8c>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800acec:	6809      	ldr	r1, [r1, #0]
 800acee:	428a      	cmp	r2, r1
      lfree = pmem;
 800acf0:	bf04      	itt	eq
 800acf2:	4a0a      	ldreq	r2, [pc, #40]	; (800ad1c <mem_free+0xa4>)
 800acf4:	6015      	streq	r5, [r2, #0]
    }
    pmem->next = mem->next;
 800acf6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800acfa:	521a      	strh	r2, [r3, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800acfc:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800ad00:	4413      	add	r3, r2
 800ad02:	8058      	strh	r0, [r3, #2]
  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ad04:	4804      	ldr	r0, [pc, #16]	; (800ad18 <mem_free+0xa0>)
}
 800ad06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ad0a:	f003 bb4a 	b.w	800e3a2 <sys_sem_signal>
 800ad0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad10:	20042e04 	.word	0x20042e04
 800ad14:	20042dfc 	.word	0x20042dfc
 800ad18:	20042e00 	.word	0x20042e00
 800ad1c:	20042df8 	.word	0x20042df8

0800ad20 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ad24:	3103      	adds	r1, #3
 800ad26:	f64f 76fc 	movw	r6, #65532	; 0xfffc
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ad2a:	4604      	mov	r4, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ad2c:	400e      	ands	r6, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800ad2e:	2e0b      	cmp	r6, #11
 800ad30:	d903      	bls.n	800ad3a <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800ad32:	f5b6 5fa0 	cmp.w	r6, #5120	; 0x1400
 800ad36:	d901      	bls.n	800ad3c <mem_trim+0x1c>
 800ad38:	e04f      	b.n	800adda <mem_trim+0xba>
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);

  if (newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ad3a:	260c      	movs	r6, #12

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ad3c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800adf4 <mem_trim+0xd4>
 800ad40:	f8d8 5000 	ldr.w	r5, [r8]
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ad44:	42a5      	cmp	r5, r4
 800ad46:	d84b      	bhi.n	800ade0 <mem_trim+0xc0>
 800ad48:	4b27      	ldr	r3, [pc, #156]	; (800ade8 <mem_trim+0xc8>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	429c      	cmp	r4, r3
 800ad4e:	d247      	bcs.n	800ade0 <mem_trim+0xc0>
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ad50:	f1a4 0308 	sub.w	r3, r4, #8

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ad54:	f834 7c08 	ldrh.w	r7, [r4, #-8]
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ad58:	1b5d      	subs	r5, r3, r5

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ad5a:	3f08      	subs	r7, #8
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ad5c:	b2ad      	uxth	r5, r5

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ad5e:	1b7f      	subs	r7, r7, r5
 800ad60:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 800ad62:	42b7      	cmp	r7, r6
 800ad64:	d339      	bcc.n	800adda <mem_trim+0xba>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800ad66:	d03b      	beq.n	800ade0 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ad68:	2100      	movs	r1, #0
 800ad6a:	4820      	ldr	r0, [pc, #128]	; (800adec <mem_trim+0xcc>)
 800ad6c:	f003 faf9 	bl	800e362 <sys_arch_sem_wait>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800ad70:	f8d8 3000 	ldr.w	r3, [r8]
 800ad74:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800ad78:	1819      	adds	r1, r3, r0
  if (mem2->used == 0) {
 800ad7a:	790a      	ldrb	r2, [r1, #4]
 800ad7c:	b97a      	cbnz	r2, 800ad9e <mem_trim+0x7e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ad7e:	f105 0208 	add.w	r2, r5, #8
  mem2 = (struct mem *)(void *)&ram[mem->next];
  if (mem2->used == 0) {
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800ad82:	5a1f      	ldrh	r7, [r3, r0]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    if (lfree == mem2) {
 800ad84:	481a      	ldr	r0, [pc, #104]	; (800adf0 <mem_trim+0xd0>)
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ad86:	4432      	add	r2, r6
    if (lfree == mem2) {
 800ad88:	6806      	ldr	r6, [r0, #0]
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ad8a:	b292      	uxth	r2, r2
    if (lfree == mem2) {
 800ad8c:	42b1      	cmp	r1, r6
 800ad8e:	eb03 0102 	add.w	r1, r3, r2
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ad92:	bf08      	it	eq
 800ad94:	6001      	streq	r1, [r0, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
    mem2->used = 0;
 800ad96:	2000      	movs	r0, #0
 800ad98:	7108      	strb	r0, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ad9a:	529f      	strh	r7, [r3, r2]
 800ad9c:	e010      	b.n	800adc0 <mem_trim+0xa0>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ad9e:	f106 0214 	add.w	r2, r6, #20
 800ada2:	42ba      	cmp	r2, r7
 800ada4:	d815      	bhi.n	800add2 <mem_trim+0xb2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ada6:	f105 0108 	add.w	r1, r5, #8
 800adaa:	1872      	adds	r2, r6, r1
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 800adac:	4e10      	ldr	r6, [pc, #64]	; (800adf0 <mem_trim+0xd0>)
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800adae:	b292      	uxth	r2, r2
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 800adb0:	6837      	ldr	r7, [r6, #0]
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800adb2:	1899      	adds	r1, r3, r2
    if (mem2 < lfree) {
 800adb4:	42b9      	cmp	r1, r7
      lfree = mem2;
 800adb6:	bf38      	it	cc
 800adb8:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 800adba:	2600      	movs	r6, #0
 800adbc:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 800adbe:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 800adc0:	804d      	strh	r5, [r1, #2]
    mem->next = ptr2;
 800adc2:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800adc6:	5a99      	ldrh	r1, [r3, r2]
 800adc8:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800adcc:	bf1c      	itt	ne
 800adce:	185b      	addne	r3, r3, r1
 800add0:	805a      	strhne	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800add2:	4806      	ldr	r0, [pc, #24]	; (800adec <mem_trim+0xcc>)
 800add4:	f003 fae5 	bl	800e3a2 <sys_sem_signal>
 800add8:	e002      	b.n	800ade0 <mem_trim+0xc0>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
 800adda:	2000      	movs	r0, #0
 800addc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade0:	4620      	mov	r0, r4
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800ade2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade6:	bf00      	nop
 800ade8:	20042dfc 	.word	0x20042dfc
 800adec:	20042e00 	.word	0x20042e00
 800adf0:	20042df8 	.word	0x20042df8
 800adf4:	20042e04 	.word	0x20042e04

0800adf8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800adf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800adfc:	2800      	cmp	r0, #0
 800adfe:	d058      	beq.n	800aeb2 <mem_malloc+0xba>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800ae00:	3003      	adds	r0, #3
 800ae02:	f64f 74fc 	movw	r4, #65532	; 0xfffc
 800ae06:	4004      	ands	r4, r0

  if (size < MIN_SIZE_ALIGNED) {
 800ae08:	2c0b      	cmp	r4, #11
 800ae0a:	d903      	bls.n	800ae14 <mem_malloc+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800ae0c:	f5b4 5fa0 	cmp.w	r4, #5120	; 0x1400
 800ae10:	d901      	bls.n	800ae16 <mem_malloc+0x1e>
 800ae12:	e04d      	b.n	800aeb0 <mem_malloc+0xb8>
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);

  if (size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ae14:	240c      	movs	r4, #12
  if (size > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ae16:	2100      	movs	r1, #0
 800ae18:	4827      	ldr	r0, [pc, #156]	; (800aeb8 <mem_malloc+0xc0>)
 800ae1a:	f003 faa2 	bl	800e362 <sys_arch_sem_wait>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ae1e:	4e27      	ldr	r6, [pc, #156]	; (800aebc <mem_malloc+0xc4>)
 800ae20:	4827      	ldr	r0, [pc, #156]	; (800aec0 <mem_malloc+0xc8>)
 800ae22:	f5c4 58a0 	rsb	r8, r4, #5120	; 0x1400
 800ae26:	6831      	ldr	r1, [r6, #0]
 800ae28:	6802      	ldr	r2, [r0, #0]
 800ae2a:	1a53      	subs	r3, r2, r1
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	4543      	cmp	r3, r8
 800ae30:	d23b      	bcs.n	800aeaa <mem_malloc+0xb2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800ae32:	18cd      	adds	r5, r1, r3
 800ae34:	f831 e003 	ldrh.w	lr, [r1, r3]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ae38:	f895 c004 	ldrb.w	ip, [r5, #4]
 800ae3c:	f1bc 0f00 	cmp.w	ip, #0
 800ae40:	d131      	bne.n	800aea6 <mem_malloc+0xae>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ae42:	f1ae 0708 	sub.w	r7, lr, #8
 800ae46:	1aff      	subs	r7, r7, r3
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ae48:	42bc      	cmp	r4, r7
 800ae4a:	d82c      	bhi.n	800aea6 <mem_malloc+0xae>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ae4c:	f104 0814 	add.w	r8, r4, #20
 800ae50:	4547      	cmp	r7, r8
 800ae52:	d312      	bcc.n	800ae7a <mem_malloc+0x82>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800ae54:	3408      	adds	r4, #8
 800ae56:	441c      	add	r4, r3
 800ae58:	b2a4      	uxth	r4, r4
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800ae5a:	190f      	adds	r7, r1, r4
          mem2->used = 0;
 800ae5c:	f887 c004 	strb.w	ip, [r7, #4]
          mem2->next = mem->next;
 800ae60:	f821 e004 	strh.w	lr, [r1, r4]
          mem2->prev = ptr;
 800ae64:	807b      	strh	r3, [r7, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 800ae66:	2301      	movs	r3, #1
          mem2 = (struct mem *)(void *)&ram[ptr2];
          mem2->used = 0;
          mem2->next = mem->next;
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ae68:	802c      	strh	r4, [r5, #0]
          mem->used = 1;
 800ae6a:	712b      	strb	r3, [r5, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae6c:	5b0b      	ldrh	r3, [r1, r4]
 800ae6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ae72:	d004      	beq.n	800ae7e <mem_malloc+0x86>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ae74:	4419      	add	r1, r3
 800ae76:	804c      	strh	r4, [r1, #2]
 800ae78:	e001      	b.n	800ae7e <mem_malloc+0x86>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ae7e:	42aa      	cmp	r2, r5
 800ae80:	d10a      	bne.n	800ae98 <mem_malloc+0xa0>
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ae82:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <mem_malloc+0xcc>)
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ae84:	6831      	ldr	r1, [r6, #0]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	7914      	ldrb	r4, [r2, #4]
 800ae8a:	b124      	cbz	r4, 800ae96 <mem_malloc+0x9e>
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d002      	beq.n	800ae96 <mem_malloc+0x9e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ae90:	8812      	ldrh	r2, [r2, #0]
 800ae92:	440a      	add	r2, r1
 800ae94:	e7f8      	b.n	800ae88 <mem_malloc+0x90>
          }
          lfree = cur;
 800ae96:	6002      	str	r2, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ae98:	4807      	ldr	r0, [pc, #28]	; (800aeb8 <mem_malloc+0xc0>)
 800ae9a:	f003 fa82 	bl	800e3a2 <sys_sem_signal>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800ae9e:	f105 0008 	add.w	r0, r5, #8
 800aea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800aea6:	4673      	mov	r3, lr
 800aea8:	e7c1      	b.n	800ae2e <mem_malloc+0x36>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800aeaa:	4803      	ldr	r0, [pc, #12]	; (800aeb8 <mem_malloc+0xc0>)
 800aeac:	f003 fa79 	bl	800e3a2 <sys_sem_signal>
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    return NULL;
 800aeb0:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 800aeb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20042e00 	.word	0x20042e00
 800aebc:	20042e04 	.word	0x20042e04
 800aec0:	20042df8 	.word	0x20042df8
 800aec4:	20042dfc 	.word	0x20042dfc

0800aec8 <memp_init_pool>:
memp_init_pool(const struct memp_desc *desc)
{
  int i;
  struct memp *memp;
  
  *desc->tab = NULL;
 800aec8:	68c3      	ldr	r3, [r0, #12]
 800aeca:	2200      	movs	r2, #0
#endif /* MEMP_OVERFLOW_CHECK */


void
memp_init_pool(const struct memp_desc *desc)
{
 800aecc:	b530      	push	{r4, r5, lr}
  int i;
  struct memp *memp;
  
  *desc->tab = NULL;
 800aece:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800aed0:	6883      	ldr	r3, [r0, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aed2:	8844      	ldrh	r4, [r0, #2]
{
  int i;
  struct memp *memp;
  
  *desc->tab = NULL;
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800aed4:	3303      	adds	r3, #3
 800aed6:	f023 0303 	bic.w	r3, r3, #3
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aeda:	42a2      	cmp	r2, r4
 800aedc:	da07      	bge.n	800aeee <memp_init_pool+0x26>
    memp->next = *desc->tab;
 800aede:	68c1      	ldr	r1, [r0, #12]
  struct memp *memp;
  
  *desc->tab = NULL;
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aee0:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800aee2:	680d      	ldr	r5, [r1, #0]
 800aee4:	601d      	str	r5, [r3, #0]
    *desc->tab = memp;
 800aee6:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aee8:	8801      	ldrh	r1, [r0, #0]
 800aeea:	440b      	add	r3, r1
 800aeec:	e7f5      	b.n	800aeda <memp_init_pool+0x12>
  }  

#if MEMP_OVERFLOW_CHECK
  memp_overflow_init(desc);
#endif /* MEMP_OVERFLOW_CHECK */
}
 800aeee:	bd30      	pop	{r4, r5, pc}

0800aef0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	2400      	movs	r4, #0
    MEMP_STATS_AVAIL(avail, i, memp_pools[i]->num);
  }

  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_init_pool(memp_pools[i]);
 800aef4:	4d04      	ldr	r5, [pc, #16]	; (800af08 <memp_init+0x18>)
 800aef6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800aefa:	3401      	adds	r4, #1
 800aefc:	f7ff ffe4 	bl	800aec8 <memp_init_pool>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_pools[i]->num);
  }

  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 800af00:	2c0b      	cmp	r4, #11
 800af02:	d1f8      	bne.n	800aef6 <memp_init+0x6>

#if MEMP_OVERFLOW_CHECK
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	bf00      	nop
 800af08:	2001004c 	.word	0x2001004c

0800af0c <memp_malloc_pool>:
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800af0c:	68c3      	ldr	r3, [r0, #12]
 800af0e:	6818      	ldr	r0, [r3, #0]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

  if (memp != NULL) {
 800af10:	b108      	cbz	r0, 800af16 <memp_malloc_pool+0xa>
    *desc->tab = memp->next;
 800af12:	6802      	ldr	r2, [r0, #0]
 800af14:	601a      	str	r2, [r3, #0]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
 800af16:	4770      	bx	lr

0800af18 <memp_malloc>:
#endif
{
  void *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800af18:	280a      	cmp	r0, #10
 800af1a:	d804      	bhi.n	800af26 <memp_malloc+0xe>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = memp_malloc_pool(memp_pools[type]);
 800af1c:	4b03      	ldr	r3, [pc, #12]	; (800af2c <memp_malloc+0x14>)
 800af1e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800af22:	f7ff bff3 	b.w	800af0c <memp_malloc_pool>
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
 800af26:	2000      	movs	r0, #0
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	2001004c 	.word	0x2001004c

0800af30 <memp_free>:
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800af30:	280a      	cmp	r0, #10
 800af32:	d806      	bhi.n	800af42 <memp_free+0x12>
  MEMP_STATS_DEC(used, type);

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  do_memp_free_pool(memp_pools[type], mem, &old_first);
#else
  do_memp_free_pool(memp_pools[type], mem);
 800af34:	4b03      	ldr	r3, [pc, #12]	; (800af44 <memp_free+0x14>)
 800af36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800af3a:	68db      	ldr	r3, [r3, #12]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

  memp->next = *desc->tab;
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	600a      	str	r2, [r1, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first)
    *old_first = *desc->tab;
#endif

  *desc->tab = memp;
 800af40:	6019      	str	r1, [r3, #0]
 800af42:	4770      	bx	lr
 800af44:	2001004c 	.word	0x2001004c

0800af48 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800af48:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
 800af4c:	4601      	mov	r1, r0
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800af4e:	071b      	lsls	r3, r3, #28
 800af50:	d502      	bpl.n	800af58 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800af52:	3104      	adds	r1, #4
 800af54:	f002 bf5c 	b.w	800de10 <etharp_request>
 800af58:	4770      	bx	lr

0800af5a <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800af5a:	4770      	bx	lr

0800af5c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800af5c:	b570      	push	{r4, r5, r6, lr}
 800af5e:	4605      	mov	r5, r0
  ip4_addr_t new_addr = (ipaddr ? *ipaddr : *IP4_ADDR_ANY);
 800af60:	460c      	mov	r4, r1
 800af62:	b109      	cbz	r1, 800af68 <netif_set_ipaddr+0xc>
 800af64:	680b      	ldr	r3, [r1, #0]
 800af66:	e001      	b.n	800af6c <netif_set_ipaddr+0x10>
 800af68:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <netif_set_ipaddr+0x3c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
  /* address is actually being changed? */
  if (ip4_addr_cmp(&new_addr, netif_ip4_addr(netif)) == 0) {
 800af6c:	686a      	ldr	r2, [r5, #4]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d011      	beq.n	800af96 <netif_set_ipaddr+0x3a>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ipv4_addr_changed(netif_ip4_addr(netif), ipaddr);
 800af72:	1d2e      	adds	r6, r5, #4
 800af74:	4621      	mov	r1, r4
 800af76:	4630      	mov	r0, r6
 800af78:	f000 ffbc 	bl	800bef4 <tcp_netif_ipv4_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ipv4_addr_changed(netif_ip4_addr(netif), ipaddr);
 800af7c:	4621      	mov	r1, r4
 800af7e:	4630      	mov	r0, r6
 800af80:	f002 fe06 	bl	800db90 <udp_netif_ipv4_addr_changed>
#endif /* LWIP_UDP */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800af84:	b104      	cbz	r4, 800af88 <netif_set_ipaddr+0x2c>
 800af86:	6824      	ldr	r4, [r4, #0]
 800af88:	606c      	str	r4, [r5, #4]
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af8a:	b124      	cbz	r4, 800af96 <netif_set_ipaddr+0x3a>
 800af8c:	4628      	mov	r0, r5
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800af8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af92:	f7ff bfd9 	b.w	800af48 <netif_issue_reports.part.0>
 800af96:	bd70      	pop	{r4, r5, r6, pc}
 800af98:	0802f354 	.word	0x0802f354

0800af9c <netif_set_addr>:
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800af9c:	b102      	cbz	r2, 800afa0 <netif_set_addr+0x4>
 800af9e:	6812      	ldr	r2, [r2, #0]
 800afa0:	6082      	str	r2, [r0, #8]
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800afa2:	b103      	cbz	r3, 800afa6 <netif_set_addr+0xa>
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	60c3      	str	r3, [r0, #12]
    const ip4_addr_t *gw)
{
  netif_set_netmask(netif, netmask);
  netif_set_gw(netif, gw);
  /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
  netif_set_ipaddr(netif, ipaddr);
 800afa8:	f7ff bfd8 	b.w	800af5c <netif_set_ipaddr>

0800afac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800afae:	2603      	movs	r6, #3
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 800afb0:	4f12      	ldr	r7, [pc, #72]	; (800affc <netif_add+0x50>)

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800afb2:	2500      	movs	r5, #0
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800afb4:	4604      	mov	r4, r0
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800afb6:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800afba:	9e06      	ldr	r6, [sp, #24]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800afbc:	6045      	str	r5, [r0, #4]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800afbe:	6206      	str	r6, [r0, #32]
  netif->num = netif_num++;
 800afc0:	783e      	ldrb	r6, [r7, #0]
  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  ip_addr_set_zero_ip4(&netif->netmask);
 800afc2:	6085      	str	r5, [r0, #8]
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 800afc4:	f106 0e01 	add.w	lr, r6, #1
 800afc8:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
  netif->input = input;
 800afcc:	9e08      	ldr	r6, [sp, #32]

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  ip_addr_set_zero_ip4(&netif->netmask);
  ip_addr_set_zero_ip4(&netif->gw);
 800afce:	60c5      	str	r5, [r0, #12]
    netif_ip6_addr_set_state(netif, i, IP6_ADDR_INVALID);
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800afd0:	f880 5033 	strb.w	r5, [r0, #51]	; 0x33
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
 800afd4:	6245      	str	r5, [r0, #36]	; 0x24
#endif /* LWIP_IPV6_DHCP6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800afd6:	61c5      	str	r5, [r0, #28]
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
  netif->input = input;
 800afd8:	6106      	str	r6, [r0, #16]
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 800afda:	f887 e000 	strb.w	lr, [r7]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800afde:	f7ff ffdd 	bl	800af9c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800afe2:	4620      	mov	r0, r4
 800afe4:	9b07      	ldr	r3, [sp, #28]
 800afe6:	4798      	blx	r3
 800afe8:	b928      	cbnz	r0, 800aff6 <netif_add+0x4a>
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <netif_add+0x54>)
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800afec:	4620      	mov	r0, r4
  if (init(netif) != ERR_OK) {
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800aff2:	601c      	str	r4, [r3, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800aff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  netif_set_addr(netif, ipaddr, netmask, gw);
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    return NULL;
 800aff6:	4628      	mov	r0, r5
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
}
 800aff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800affa:	bf00      	nop
 800affc:	20042e34 	.word	0x20042e34
 800b000:	20049268 	.word	0x20049268

0800b004 <netif_set_default>:
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b004:	4b01      	ldr	r3, [pc, #4]	; (800b00c <netif_set_default+0x8>)
 800b006:	6018      	str	r0, [r3, #0]
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	2004926c 	.word	0x2004926c

0800b010 <netif_set_up>:
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b010:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 800b014:	07d1      	lsls	r1, r2, #31
 800b016:	d409      	bmi.n	800b02c <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 800b018:	f042 0101 	orr.w	r1, r2, #1

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b01c:	0752      	lsls	r2, r2, #29
 */
void
netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
    netif->flags |= NETIF_FLAG_UP;
 800b01e:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b022:	d503      	bpl.n	800b02c <netif_set_up+0x1c>
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b024:	6843      	ldr	r3, [r0, #4]
 800b026:	b10b      	cbz	r3, 800b02c <netif_set_up+0x1c>
 800b028:	f7ff bf8e 	b.w	800af48 <netif_issue_reports.part.0>
 800b02c:	4770      	bx	lr

0800b02e <pbuf_header_impl.part.0>:
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
 800b02e:	2900      	cmp	r1, #0
 *
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
 800b030:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
 800b032:	da05      	bge.n	800b040 <pbuf_header_impl.part.0+0x12>
    increment_magnitude = -header_size_increment;
 800b034:	424c      	negs	r4, r1
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b036:	8943      	ldrh	r3, [r0, #10]
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
    increment_magnitude = -header_size_increment;
 800b038:	b2a4      	uxth	r4, r4
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b03a:	42a3      	cmp	r3, r4
 800b03c:	d201      	bcs.n	800b042 <pbuf_header_impl.part.0+0x14>
 800b03e:	e021      	b.n	800b084 <pbuf_header_impl.part.0+0x56>
  } else {
    increment_magnitude = header_size_increment;
 800b040:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800b042:	7b05      	ldrb	r5, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800b044:	6843      	ldr	r3, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800b046:	b10d      	cbz	r5, 800b04c <pbuf_header_impl.part.0+0x1e>
 800b048:	2d03      	cmp	r5, #3
 800b04a:	d105      	bne.n	800b058 <pbuf_header_impl.part.0+0x2a>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800b04c:	1a5b      	subs	r3, r3, r1
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b04e:	f100 0210 	add.w	r2, r0, #16
 800b052:	4293      	cmp	r3, r2
 800b054:	d20c      	bcs.n	800b070 <pbuf_header_impl.part.0+0x42>
 800b056:	e015      	b.n	800b084 <pbuf_header_impl.part.0+0x56>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800b058:	3d01      	subs	r5, #1
 800b05a:	2d01      	cmp	r5, #1
 800b05c:	d812      	bhi.n	800b084 <pbuf_header_impl.part.0+0x56>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800b05e:	2900      	cmp	r1, #0
 800b060:	da03      	bge.n	800b06a <pbuf_header_impl.part.0+0x3c>
 800b062:	8942      	ldrh	r2, [r0, #10]
 800b064:	42a2      	cmp	r2, r4
 800b066:	d30d      	bcc.n	800b084 <pbuf_header_impl.part.0+0x56>
 800b068:	e001      	b.n	800b06e <pbuf_header_impl.part.0+0x40>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 800b06a:	d00b      	beq.n	800b084 <pbuf_header_impl.part.0+0x56>
 800b06c:	b152      	cbz	r2, 800b084 <pbuf_header_impl.part.0+0x56>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800b06e:	1a5b      	subs	r3, r3, r1
 800b070:	6043      	str	r3, [r0, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800b072:	b289      	uxth	r1, r1
 800b074:	8943      	ldrh	r3, [r0, #10]
 800b076:	440b      	add	r3, r1
 800b078:	8143      	strh	r3, [r0, #10]
  p->tot_len += header_size_increment;
 800b07a:	8903      	ldrh	r3, [r0, #8]
 800b07c:	4419      	add	r1, r3
 800b07e:	8101      	strh	r1, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800b080:	2000      	movs	r0, #0
 800b082:	bd30      	pop	{r4, r5, pc}
  }

  if (header_size_increment < 0) {
    increment_magnitude = -header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b084:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
 800b086:	bd30      	pop	{r4, r5, pc}

0800b088 <pbuf_header>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 800b088:	b119      	cbz	r1, 800b092 <pbuf_header+0xa>
 800b08a:	b110      	cbz	r0, 800b092 <pbuf_header+0xa>
 800b08c:	2200      	movs	r2, #0
 800b08e:	f7ff bfce 	b.w	800b02e <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
}
 800b092:	2000      	movs	r0, #0
 800b094:	4770      	bx	lr

0800b096 <pbuf_header_force>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 800b096:	b119      	cbz	r1, 800b0a0 <pbuf_header_force+0xa>
 800b098:	b110      	cbz	r0, 800b0a0 <pbuf_header_force+0xa>
 800b09a:	2201      	movs	r2, #1
 800b09c:	f7ff bfc7 	b.w	800b02e <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
}
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	4770      	bx	lr

0800b0a4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b0a4:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b0a6:	4601      	mov	r1, r0
 800b0a8:	b1d8      	cbz	r0, 800b0e2 <pbuf_free+0x3e>
 800b0aa:	2400      	movs	r4, #0
 800b0ac:	b2e0      	uxtb	r0, r4
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b0ae:	b1b9      	cbz	r1, 800b0e0 <pbuf_free+0x3c>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b0b0:	89cb      	ldrh	r3, [r1, #14]
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	81cb      	strh	r3, [r1, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b0b8:	b99b      	cbnz	r3, 800b0e2 <pbuf_free+0x3e>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800b0ba:	7b0b      	ldrb	r3, [r1, #12]
    ref = --(p->ref);
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b0bc:	680d      	ldr	r5, [r1, #0]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d101      	bne.n	800b0c6 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800b0c2:	200a      	movs	r0, #10
 800b0c4:	e003      	b.n	800b0ce <pbuf_free+0x2a>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d803      	bhi.n	800b0d4 <pbuf_free+0x30>
          memp_free(MEMP_PBUF, p);
 800b0cc:	2009      	movs	r0, #9
 800b0ce:	f7ff ff2f 	bl	800af30 <memp_free>
 800b0d2:	e002      	b.n	800b0da <pbuf_free+0x36>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	f7ff fdcf 	bl	800ac78 <mem_free>
 800b0da:	3401      	adds	r4, #1
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 800b0dc:	4629      	mov	r1, r5
 800b0de:	e7e5      	b.n	800b0ac <pbuf_free+0x8>
 800b0e0:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}

0800b0e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0e8:	460e      	mov	r6, r1
 800b0ea:	4617      	mov	r7, r2
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800b0ec:	2804      	cmp	r0, #4
 800b0ee:	d87c      	bhi.n	800b1ea <pbuf_alloc+0x106>
 800b0f0:	e8df f000 	tbb	[pc, r0]
 800b0f4:	07050309 	.word	0x07050309
 800b0f8:	07          	.byte	0x07
 800b0f9:	00          	.byte	0x00
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    break;
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b0fa:	2522      	movs	r5, #34	; 0x22
 800b0fc:	e004      	b.n	800b108 <pbuf_alloc+0x24>
    break;
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b0fe:	250e      	movs	r5, #14
    break;
 800b100:	e002      	b.n	800b108 <pbuf_alloc+0x24>
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
    break;
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800b102:	2500      	movs	r5, #0
    break;
 800b104:	e000      	b.n	800b108 <pbuf_alloc+0x24>

  /* determine header offset */
  switch (layer) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b106:	2536      	movs	r5, #54	; 0x36
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  }

  switch (type) {
 800b108:	2f03      	cmp	r7, #3
 800b10a:	d86e      	bhi.n	800b1ea <pbuf_alloc+0x106>
 800b10c:	e8df f007 	tbb	[pc, r7]
 800b110:	025b5b43 	.word	0x025b5b43
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b114:	200a      	movs	r0, #10
 800b116:	f7ff feff 	bl	800af18 <memp_malloc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800b11a:	4604      	mov	r4, r0
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d064      	beq.n	800b1ea <pbuf_alloc+0x106>
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
 800b120:	2203      	movs	r2, #3
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b122:	1943      	adds	r3, r0, r5
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
    p->next = NULL;
 800b124:	2700      	movs	r7, #0
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800b126:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b128:	4415      	add	r5, r2
    }
    p->type = type;
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b12a:	3313      	adds	r3, #19
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccessfully */
        return NULL;
      }
      q->type = type;
 800b12c:	4690      	mov	r8, r2
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
 800b12e:	7302      	strb	r2, [r0, #12]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b130:	f025 0503 	bic.w	r5, r5, #3
    }
    p->type = type;
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b134:	f023 0303 	bic.w	r3, r3, #3
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
    p->next = NULL;
 800b138:	6007      	str	r7, [r0, #0]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b13a:	f5c5 65be 	rsb	r5, r5, #1520	; 0x5f0
    }
    p->type = type;
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b13e:	6043      	str	r3, [r0, #4]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800b140:	2301      	movs	r3, #1
    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800b142:	8106      	strh	r6, [r0, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b144:	3504      	adds	r5, #4
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800b146:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b148:	42b5      	cmp	r5, r6
 800b14a:	bf28      	it	cs
 800b14c:	4635      	movcs	r5, r6
 800b14e:	8145      	strh	r5, [r0, #10]
    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800b150:	1b75      	subs	r5, r6, r5
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800b152:	2d00      	cmp	r5, #0
 800b154:	dd42      	ble.n	800b1dc <pbuf_alloc+0xf8>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b156:	200a      	movs	r0, #10
 800b158:	f7ff fede 	bl	800af18 <memp_malloc>
      if (q == NULL) {
 800b15c:	4606      	mov	r6, r0
 800b15e:	b928      	cbnz	r0, 800b16c <pbuf_alloc+0x88>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 800b160:	4620      	mov	r0, r4
 800b162:	f7ff ff9f 	bl	800b0a4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800b166:	4630      	mov	r0, r6
 800b168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b16c:	f240 53f4 	movw	r3, #1524	; 0x5f4
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b170:	f100 0210 	add.w	r2, r0, #16
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccessfully */
        return NULL;
      }
      q->type = type;
 800b174:	f880 800c 	strb.w	r8, [r0, #12]
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b178:	42ab      	cmp	r3, r5
        pbuf_free(p);
        /* bail out unsuccessfully */
        return NULL;
      }
      q->type = type;
      q->flags = 0;
 800b17a:	7347      	strb	r7, [r0, #13]
      q->next = NULL;
 800b17c:	6007      	str	r7, [r0, #0]
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b17e:	bf28      	it	cs
 800b180:	462b      	movcs	r3, r5
      }
      q->type = type;
      q->flags = 0;
      q->next = NULL;
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800b182:	f8c9 0000 	str.w	r0, [r9]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b186:	6042      	str	r2, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800b188:	2201      	movs	r2, #1
      q->next = NULL;
      /* make previous pbuf point to this pbuf */
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 800b18a:	8105      	strh	r5, [r0, #8]
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800b18c:	4681      	mov	r9, r0
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b18e:	8143      	strh	r3, [r0, #10]
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800b190:	1aed      	subs	r5, r5, r3
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800b192:	81c2      	strh	r2, [r0, #14]
 800b194:	e7dd      	b.n	800b152 <pbuf_alloc+0x6e>
    /*r->next = NULL;*/

    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b196:	f105 0013 	add.w	r0, r5, #19
 800b19a:	1cf3      	adds	r3, r6, #3
 800b19c:	f020 0003 	bic.w	r0, r0, #3
 800b1a0:	f023 0303 	bic.w	r3, r3, #3
 800b1a4:	4418      	add	r0, r3
 800b1a6:	b280      	uxth	r0, r0
 800b1a8:	f7ff fe26 	bl	800adf8 <mem_malloc>
    if (p == NULL) {
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	b1e0      	cbz	r0, 800b1ea <pbuf_alloc+0x106>
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b1b0:	1943      	adds	r3, r0, r5
    p->len = p->tot_len = length;
 800b1b2:	8106      	strh	r6, [r0, #8]
 800b1b4:	8146      	strh	r6, [r0, #10]
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    if (p == NULL) {
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b1b6:	3313      	adds	r3, #19
 800b1b8:	f023 0303 	bic.w	r3, r3, #3
 800b1bc:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
    p->next = NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	6003      	str	r3, [r0, #0]
    p->type = type;
 800b1c2:	7303      	strb	r3, [r0, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800b1c4:	e00a      	b.n	800b1dc <pbuf_alloc+0xf8>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b1c6:	2009      	movs	r0, #9
 800b1c8:	f7ff fea6 	bl	800af18 <memp_malloc>
    if (p == NULL) {
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	b160      	cbz	r0, 800b1ea <pbuf_alloc+0x106>
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800b1d0:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800b1d2:	8106      	strh	r6, [r0, #8]
 800b1d4:	8146      	strh	r6, [r0, #10]
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800b1d6:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
    p->next = NULL;
 800b1d8:	6003      	str	r3, [r0, #0]
    p->type = type;
 800b1da:	7307      	strb	r7, [r0, #12]
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
 800b1dc:	2301      	movs	r3, #1
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b1de:	4620      	mov	r0, r4
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
 800b1e0:	81e3      	strh	r3, [r4, #14]
  /* set flags */
  p->flags = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->next = NULL;
    p->type = type;
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 800b1ea:	2000      	movs	r0, #0
  p->ref = 1;
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
}
 800b1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b1f0 <pbuf_realloc>:
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b1f0:	8902      	ldrh	r2, [r0, #8]
 800b1f2:	428a      	cmp	r2, r1
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4604      	mov	r4, r0
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b1f8:	d91f      	bls.n	800b23a <pbuf_realloc+0x4a>
 800b1fa:	460d      	mov	r5, r1

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b1fc:	8963      	ldrh	r3, [r4, #10]
 800b1fe:	429d      	cmp	r5, r3
 800b200:	d907      	bls.n	800b212 <pbuf_realloc+0x22>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800b202:	1aed      	subs	r5, r5, r3
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 800b204:	8923      	ldrh	r3, [r4, #8]
 800b206:	1a9b      	subs	r3, r3, r2
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800b208:	b2ad      	uxth	r5, r5
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 800b20a:	440b      	add	r3, r1
 800b20c:	8123      	strh	r3, [r4, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b20e:	6824      	ldr	r4, [r4, #0]
 800b210:	e7f4      	b.n	800b1fc <pbuf_realloc+0xc>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800b212:	7b22      	ldrb	r2, [r4, #12]
 800b214:	b94a      	cbnz	r2, 800b22a <pbuf_realloc+0x3a>
 800b216:	429d      	cmp	r5, r3
 800b218:	d007      	beq.n	800b22a <pbuf_realloc+0x3a>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800b21a:	6861      	ldr	r1, [r4, #4]
 800b21c:	4620      	mov	r0, r4
 800b21e:	1b09      	subs	r1, r1, r4
 800b220:	4429      	add	r1, r5
 800b222:	b289      	uxth	r1, r1
 800b224:	f7ff fd7c 	bl	800ad20 <mem_trim>
 800b228:	4604      	mov	r4, r0
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  q->tot_len = q->len;

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b22a:	6820      	ldr	r0, [r4, #0]
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b22c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800b22e:	8125      	strh	r5, [r4, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b230:	b108      	cbz	r0, 800b236 <pbuf_realloc+0x46>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b232:	f7ff ff37 	bl	800b0a4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b236:	2300      	movs	r3, #0
 800b238:	6023      	str	r3, [r4, #0]
 800b23a:	bd38      	pop	{r3, r4, r5, pc}

0800b23c <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 800b23c:	4603      	mov	r3, r0
  u8_t len;

  len = 0;
  while (p != NULL) {
 800b23e:	2200      	movs	r2, #0
 800b240:	b2d0      	uxtb	r0, r2
 800b242:	3201      	adds	r2, #1
 800b244:	b10b      	cbz	r3, 800b24a <pbuf_clen+0xe>
    ++len;
    p = p->next;
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	e7fa      	b.n	800b240 <pbuf_clen+0x4>
  }
  return len;
}
 800b24a:	4770      	bx	lr

0800b24c <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 800b24c:	b110      	cbz	r0, 800b254 <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 800b24e:	89c3      	ldrh	r3, [r0, #14]
 800b250:	3301      	adds	r3, #1
 800b252:	81c3      	strh	r3, [r0, #14]
 800b254:	4770      	bx	lr

0800b256 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b256:	b510      	push	{r4, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b258:	b150      	cbz	r0, 800b270 <pbuf_cat+0x1a>
 800b25a:	b901      	cbnz	r1, 800b25e <pbuf_cat+0x8>
 800b25c:	bd10      	pop	{r4, pc}
 800b25e:	8902      	ldrh	r2, [r0, #8]
 800b260:	890b      	ldrh	r3, [r1, #8]
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b262:	6804      	ldr	r4, [r0, #0]
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800b264:	4413      	add	r3, r2
 800b266:	8103      	strh	r3, [r0, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b268:	b10c      	cbz	r4, 800b26e <pbuf_cat+0x18>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800b26a:	4620      	mov	r0, r4
 800b26c:	e7f7      	b.n	800b25e <pbuf_cat+0x8>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b26e:	6001      	str	r1, [r0, #0]
 800b270:	bd10      	pop	{r4, pc}

0800b272 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b272:	b510      	push	{r4, lr}
  pbuf_cat(h, t);
 800b274:	f7ff ffef 	bl	800b256 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b278:	4608      	mov	r0, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b27a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  pbuf_cat(h, t);
  /* t is now referenced by h */
  pbuf_ref(t);
 800b27e:	f7ff bfe5 	b.w	800b24c <pbuf_ref>

0800b282 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 800b282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b286:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b288:	4605      	mov	r5, r0
 800b28a:	b918      	cbnz	r0, 800b294 <pbuf_copy+0x12>
 800b28c:	f06f 000e 	mvn.w	r0, #14
 800b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b294:	2900      	cmp	r1, #0
 800b296:	d0f9      	beq.n	800b28c <pbuf_copy+0xa>
 800b298:	8902      	ldrh	r2, [r0, #8]
 800b29a:	890b      	ldrh	r3, [r1, #8]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d3f5      	bcc.n	800b28c <pbuf_copy+0xa>
 800b2a0:	f04f 0800 	mov.w	r8, #0
 800b2a4:	4647      	mov	r7, r8

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b2a6:	8966      	ldrh	r6, [r4, #10]
 800b2a8:	896b      	ldrh	r3, [r5, #10]
 800b2aa:	ebc8 0606 	rsb	r6, r8, r6
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b2ae:	6868      	ldr	r0, [r5, #4]

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b2b0:	1bdb      	subs	r3, r3, r7
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b2b2:	6861      	ldr	r1, [r4, #4]
 800b2b4:	4438      	add	r0, r7

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b2b6:	42b3      	cmp	r3, r6
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b2b8:	4441      	add	r1, r8
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b2ba:	bfb4      	ite	lt
 800b2bc:	b29e      	uxthlt	r6, r3
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b2be:	b2b6      	uxthge	r6, r6
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b2c0:	4632      	mov	r2, r6
    offset_to += len;
 800b2c2:	4437      	add	r7, r6
    offset_from += len;
 800b2c4:	4446      	add	r6, r8
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b2c6:	f006 fbbc 	bl	8011a42 <memcpy>
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 800b2ca:	8963      	ldrh	r3, [r4, #10]
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
 800b2cc:	b2bf      	uxth	r7, r7
    offset_from += len;
 800b2ce:	fa1f f886 	uxth.w	r8, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 800b2d2:	4543      	cmp	r3, r8
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800b2d4:	896b      	ldrh	r3, [r5, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 800b2d6:	bf9c      	itt	ls
 800b2d8:	6824      	ldrls	r4, [r4, #0]
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
 800b2da:	f04f 0800 	movls.w	r8, #0
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800b2de:	42bb      	cmp	r3, r7
 800b2e0:	d104      	bne.n	800b2ec <pbuf_copy+0x6a>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800b2e2:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800b2e4:	b90d      	cbnz	r5, 800b2ea <pbuf_copy+0x68>
 800b2e6:	b164      	cbz	r4, 800b302 <pbuf_copy+0x80>
 800b2e8:	e7d0      	b.n	800b28c <pbuf_copy+0xa>
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
 800b2ea:	2700      	movs	r7, #0
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b2ec:	b11c      	cbz	r4, 800b2f6 <pbuf_copy+0x74>
 800b2ee:	8962      	ldrh	r2, [r4, #10]
 800b2f0:	8923      	ldrh	r3, [r4, #8]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d008      	beq.n	800b308 <pbuf_copy+0x86>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b2f6:	896a      	ldrh	r2, [r5, #10]
 800b2f8:	892b      	ldrh	r3, [r5, #8]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d008      	beq.n	800b310 <pbuf_copy+0x8e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b2fe:	2c00      	cmp	r4, #0
 800b300:	d1d1      	bne.n	800b2a6 <pbuf_copy+0x24>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b302:	4620      	mov	r0, r4
 800b304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d0f3      	beq.n	800b2f6 <pbuf_copy+0x74>
 800b30e:	e002      	b.n	800b316 <pbuf_copy+0x94>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b310:	682b      	ldr	r3, [r5, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d0f3      	beq.n	800b2fe <pbuf_copy+0x7c>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b316:	f06f 0005 	mvn.w	r0, #5
 800b31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b31e <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b31e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b322:	4688      	mov	r8, r1
 800b324:	4691      	mov	r9, r2
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b326:	4606      	mov	r6, r0
 800b328:	b328      	cbz	r0, 800b376 <pbuf_copy_partial+0x58>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b32a:	b331      	cbz	r1, 800b37a <pbuf_copy_partial+0x5c>
 800b32c:	2400      	movs	r4, #0
 800b32e:	4627      	mov	r7, r4
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b330:	f1b9 0f00 	cmp.w	r9, #0
 800b334:	d024      	beq.n	800b380 <pbuf_copy_partial+0x62>
 800b336:	b31e      	cbz	r6, 800b380 <pbuf_copy_partial+0x62>
    if ((offset != 0) && (offset >= p->len)) {
 800b338:	b12b      	cbz	r3, 800b346 <pbuf_copy_partial+0x28>
 800b33a:	8971      	ldrh	r1, [r6, #10]
 800b33c:	428b      	cmp	r3, r1
 800b33e:	d302      	bcc.n	800b346 <pbuf_copy_partial+0x28>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800b340:	1a5b      	subs	r3, r3, r1
 800b342:	b29b      	uxth	r3, r3
 800b344:	e015      	b.n	800b372 <pbuf_copy_partial+0x54>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800b346:	8975      	ldrh	r5, [r6, #10]
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b348:	eb08 0007 	add.w	r0, r8, r7
 800b34c:	6871      	ldr	r1, [r6, #4]
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800b34e:	1aed      	subs	r5, r5, r3
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b350:	4419      	add	r1, r3
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800b352:	b2ad      	uxth	r5, r5
 800b354:	454d      	cmp	r5, r9
 800b356:	bf28      	it	cs
 800b358:	464d      	movcs	r5, r9
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b35a:	462a      	mov	r2, r5
      copied_total += buf_copy_len;
 800b35c:	442c      	add	r4, r5
      left += buf_copy_len;
 800b35e:	442f      	add	r7, r5
      len -= buf_copy_len;
 800b360:	ebc5 0509 	rsb	r5, r5, r9
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b364:	f006 fb6d 	bl	8011a42 <memcpy>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
 800b368:	2300      	movs	r3, #0
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
      copied_total += buf_copy_len;
 800b36a:	b2a4      	uxth	r4, r4
      left += buf_copy_len;
 800b36c:	b2bf      	uxth	r7, r7
      len -= buf_copy_len;
 800b36e:	fa1f f985 	uxth.w	r9, r5
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b372:	6836      	ldr	r6, [r6, #0]
 800b374:	e7dc      	b.n	800b330 <pbuf_copy_partial+0x12>
 800b376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b37a:	4608      	mov	r0, r1
 800b37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b380:	4620      	mov	r0, r4
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800b382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800b388 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b388:	4a12      	ldr	r2, [pc, #72]	; (800b3d4 <tcp_new_port+0x4c>)
 800b38a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b38e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b390:	8810      	ldrh	r0, [r2, #0]
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b392:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b396:	4e10      	ldr	r6, [pc, #64]	; (800b3d8 <tcp_new_port+0x50>)
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b398:	42a8      	cmp	r0, r5
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b39a:	f04f 0100 	mov.w	r1, #0
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b39e:	bf16      	itet	ne
 800b3a0:	3001      	addne	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b3a2:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b3a6:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b3a8:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 800b3ac:	6824      	ldr	r4, [r4, #0]
 800b3ae:	b15c      	cbz	r4, 800b3c8 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 800b3b0:	8b67      	ldrh	r7, [r4, #26]
 800b3b2:	4287      	cmp	r7, r0
 800b3b4:	d106      	bne.n	800b3c4 <tcp_new_port+0x3c>
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1ec      	bne.n	800b398 <tcp_new_port+0x10>
 800b3be:	8010      	strh	r0, [r2, #0]
          return 0;
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b3c4:	68e4      	ldr	r4, [r4, #12]
 800b3c6:	e7f2      	b.n	800b3ae <tcp_new_port+0x26>
 800b3c8:	3101      	adds	r1, #1
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b3ca:	2904      	cmp	r1, #4
 800b3cc:	d1ec      	bne.n	800b3a8 <tcp_new_port+0x20>
 800b3ce:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800b3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20010078 	.word	0x20010078
 800b3d8:	0802f480 	.word	0x0802f480

0800b3dc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	460d      	mov	r5, r1
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  struct tcp_pcb *cpcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	b340      	cbz	r0, 800b43a <tcp_bind+0x5a>
    return ERR_VAL;
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b3e8:	7e03      	ldrb	r3, [r0, #24]
 800b3ea:	bb33      	cbnz	r3, 800b43a <tcp_bind+0x5a>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800b3ec:	b922      	cbnz	r2, 800b3f8 <tcp_bind+0x18>
    port = tcp_new_port();
 800b3ee:	f7ff ffcb 	bl	800b388 <tcp_new_port>
    if (port == 0) {
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	b9a0      	cbnz	r0, 800b420 <tcp_bind+0x40>
 800b3f6:	e023      	b.n	800b440 <tcp_bind+0x60>
      return ERR_BUF;
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b3f8:	4f14      	ldr	r7, [pc, #80]	; (800b44c <tcp_bind+0x6c>)
 800b3fa:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800b3fe:	6808      	ldr	r0, [r1, #0]
 800b400:	b158      	cbz	r0, 800b41a <tcp_bind+0x3a>
        if (cpcb->local_port == port) {
 800b402:	8b41      	ldrh	r1, [r0, #26]
 800b404:	4291      	cmp	r1, r2
 800b406:	d106      	bne.n	800b416 <tcp_bind+0x36>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if (IP_PCB_IPVER_EQ(pcb, cpcb) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b408:	6806      	ldr	r6, [r0, #0]
 800b40a:	b1e6      	cbz	r6, 800b446 <tcp_bind+0x66>
 800b40c:	b1dd      	cbz	r5, 800b446 <tcp_bind+0x66>
                ip_addr_isany(ipaddr) ||
 800b40e:	6829      	ldr	r1, [r5, #0]
 800b410:	b1c9      	cbz	r1, 800b446 <tcp_bind+0x66>
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if (IP_PCB_IPVER_EQ(pcb, cpcb) &&
 800b412:	428e      	cmp	r6, r1
 800b414:	d017      	beq.n	800b446 <tcp_bind+0x66>
      return ERR_BUF;
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b416:	68c0      	ldr	r0, [r0, #12]
 800b418:	e7f2      	b.n	800b400 <tcp_bind+0x20>
    if (port == 0) {
      return ERR_BUF;
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b41a:	3301      	adds	r3, #1
 800b41c:	2b04      	cmp	r3, #4
 800b41e:	d1ec      	bne.n	800b3fa <tcp_bind+0x1a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800b420:	b115      	cbz	r5, 800b428 <tcp_bind+0x48>
 800b422:	682b      	ldr	r3, [r5, #0]
 800b424:	b103      	cbz	r3, 800b428 <tcp_bind+0x48>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b426:	6023      	str	r3, [r4, #0]
  }
  pcb->local_port = port;
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b428:	4b09      	ldr	r3, [pc, #36]	; (800b450 <tcp_bind+0x70>)
  }

  if (!ip_addr_isany(ipaddr)) {
    ip_addr_set(&pcb->local_ip, ipaddr);
  }
  pcb->local_port = port;
 800b42a:	8362      	strh	r2, [r4, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	601c      	str	r4, [r3, #0]
 800b430:	60e2      	str	r2, [r4, #12]
 800b432:	f7ff fb51 	bl	800aad8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b436:	2000      	movs	r0, #0
 800b438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  struct tcp_pcb *cpcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
 800b43a:	f06f 0005 	mvn.w	r0, #5
 800b43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif /* SO_REUSE */

  if (port == 0) {
    port = tcp_new_port();
    if (port == 0) {
      return ERR_BUF;
 800b440:	f06f 0001 	mvn.w	r0, #1
 800b444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            /* @todo: check accept_any_ip_version */
            if (IP_PCB_IPVER_EQ(pcb, cpcb) &&
                (ip_addr_isany(&cpcb->local_ip) ||
                ip_addr_isany(ipaddr) ||
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
              return ERR_USE;
 800b446:	f06f 0007 	mvn.w	r0, #7
  }
  pcb->local_port = port;
  TCP_REG(&tcp_bound_pcbs, pcb);
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
}
 800b44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b44c:	0802f480 	.word	0x0802f480
 800b450:	20049280 	.word	0x20049280

0800b454 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800b454:	b538      	push	{r3, r4, r5, lr}
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 800b456:	7e03      	ldrb	r3, [r0, #24]
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800b458:	4605      	mov	r5, r0
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 800b45a:	b10b      	cbz	r3, 800b460 <tcp_listen_with_backlog+0xc>
 800b45c:	2000      	movs	r0, #0
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b460:	2002      	movs	r0, #2
 800b462:	f7ff fd59 	bl	800af18 <memp_malloc>
  if (lpcb == NULL) {
 800b466:	4604      	mov	r4, r0
 800b468:	2800      	cmp	r0, #0
 800b46a:	d0f7      	beq.n	800b45c <tcp_listen_with_backlog+0x8>
    return NULL;
  }
  lpcb->callback_arg = pcb->callback_arg;
 800b46c:	692b      	ldr	r3, [r5, #16]
 800b46e:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800b470:	8b6b      	ldrh	r3, [r5, #26]
 800b472:	8343      	strh	r3, [r0, #26]
  lpcb->state = LISTEN;
 800b474:	2301      	movs	r3, #1
 800b476:	7603      	strb	r3, [r0, #24]
  lpcb->prio = pcb->prio;
 800b478:	7e6b      	ldrb	r3, [r5, #25]
 800b47a:	7643      	strb	r3, [r0, #25]
  lpcb->so_options = pcb->so_options;
 800b47c:	7a2b      	ldrb	r3, [r5, #8]
 800b47e:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800b480:	7aab      	ldrb	r3, [r5, #10]
 800b482:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 800b484:	7a6b      	ldrb	r3, [r5, #9]
 800b486:	7243      	strb	r3, [r0, #9]
#if LWIP_IPV4 && LWIP_IPV6
  PCB_ISIPV6(lpcb) = PCB_ISIPV6(pcb);
  lpcb->accept_any_ip_version = 0;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 800b48c:	8b6b      	ldrh	r3, [r5, #26]
 800b48e:	b17b      	cbz	r3, 800b4b0 <tcp_listen_with_backlog+0x5c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b490:	4a0e      	ldr	r2, [pc, #56]	; (800b4cc <tcp_listen_with_backlog+0x78>)
 800b492:	6813      	ldr	r3, [r2, #0]
 800b494:	429d      	cmp	r5, r3
 800b496:	d103      	bne.n	800b4a0 <tcp_listen_with_backlog+0x4c>
 800b498:	68eb      	ldr	r3, [r5, #12]
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	e006      	b.n	800b4ac <tcp_listen_with_backlog+0x58>
 800b49e:	4613      	mov	r3, r2
 800b4a0:	b123      	cbz	r3, 800b4ac <tcp_listen_with_backlog+0x58>
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	4295      	cmp	r5, r2
 800b4a6:	d1fa      	bne.n	800b49e <tcp_listen_with_backlog+0x4a>
 800b4a8:	68ea      	ldr	r2, [r5, #12]
 800b4aa:	60da      	str	r2, [r3, #12]
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	60eb      	str	r3, [r5, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	2001      	movs	r0, #1
 800b4b4:	f7ff fd3c 	bl	800af30 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800b4b8:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <tcp_listen_with_backlog+0x7c>)
 800b4ba:	6163      	str	r3, [r4, #20]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b4bc:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <tcp_listen_with_backlog+0x80>)
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	601c      	str	r4, [r3, #0]
 800b4c2:	60e2      	str	r2, [r4, #12]
 800b4c4:	f7ff fb08 	bl	800aad8 <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
 800b4c8:	4620      	mov	r0, r4
}
 800b4ca:	bd38      	pop	{r3, r4, r5, pc}
 800b4cc:	20049280 	.word	0x20049280
 800b4d0:	0800bc47 	.word	0x0800bc47
 800b4d4:	2004927c 	.word	0x2004927c

0800b4d8 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b4d8:	b570      	push	{r4, r5, r6, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b4da:	6b01      	ldr	r1, [r0, #48]	; 0x30
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b4dc:	4602      	mov	r2, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b4de:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
 800b4e0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b4e2:	1a73      	subs	r3, r6, r1

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b4e4:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 800b4e6:	1918      	adds	r0, r3, r4
 800b4e8:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800b4ec:	429d      	cmp	r5, r3
 800b4ee:	bf94      	ite	ls
 800b4f0:	1b43      	subls	r3, r0, r5
 800b4f2:	1ac3      	subhi	r3, r0, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	db01      	blt.n	800b4fc <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b4f8:	85d6      	strh	r6, [r2, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b4fc:	1a63      	subs	r3, r4, r1
 800b4fe:	2000      	movs	r0, #0
 800b500:	2b00      	cmp	r3, #0
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b502:	bfd6      	itet	le
 800b504:	1b09      	suble	r1, r1, r4
    return new_right_edge - pcb->rcv_ann_right_edge;
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b506:	85d0      	strhgt	r0, [r2, #46]	; 0x2e
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b508:	85d1      	strhle	r1, [r2, #46]	; 0x2e
    }
    return 0;
  }
}
 800b50a:	bd70      	pop	{r4, r5, r6, pc}

0800b50c <tcp_recved>:

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b50c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800b50e:	4419      	add	r1, r3
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b510:	f640 3368 	movw	r3, #2920	; 0xb68

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b514:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b516:	4299      	cmp	r1, r3
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b518:	b510      	push	{r4, lr}
 800b51a:	4604      	mov	r4, r0

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b51c:	8581      	strh	r1, [r0, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b51e:	d903      	bls.n	800b528 <tcp_recved+0x1c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b520:	f640 3368 	movw	r3, #2920	; 0xb68
 800b524:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800b526:	e005      	b.n	800b534 <tcp_recved+0x28>
  } else if (pcb->rcv_wnd == 0) {
 800b528:	b921      	cbnz	r1, 800b534 <tcp_recved+0x28>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800b52a:	7e03      	ldrb	r3, [r0, #24]
 800b52c:	2b07      	cmp	r3, #7
 800b52e:	d0f7      	beq.n	800b520 <tcp_recved+0x14>
 800b530:	2b09      	cmp	r3, #9
 800b532:	d0f5      	beq.n	800b520 <tcp_recved+0x14>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b534:	4620      	mov	r0, r4
 800b536:	f7ff ffcf 	bl	800b4d8 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b53a:	f240 23d9 	movw	r3, #729	; 0x2d9
 800b53e:	4298      	cmp	r0, r3
 800b540:	dd08      	ble.n	800b554 <tcp_recved+0x48>
    tcp_ack_now(pcb);
 800b542:	7fa3      	ldrb	r3, [r4, #30]
    tcp_output(pcb);
 800b544:	4620      	mov	r0, r4
  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    tcp_ack_now(pcb);
 800b546:	f043 0302 	orr.w	r3, r3, #2
 800b54a:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, TCP_WND_MAX(pcb) - pcb->rcv_wnd));
}
 800b54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    tcp_ack_now(pcb);
    tcp_output(pcb);
 800b550:	f001 bed0 	b.w	800d2f4 <tcp_output>
 800b554:	bd10      	pop	{r4, pc}

0800b556 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b556:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800b558:	4604      	mov	r4, r0
 800b55a:	b148      	cbz	r0, 800b570 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800b55c:	6840      	ldr	r0, [r0, #4]
 800b55e:	b108      	cbz	r0, 800b564 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800b560:	f7ff fda0 	bl	800b0a4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b564:	4621      	mov	r1, r4
 800b566:	2003      	movs	r0, #3
  }
}
 800b568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      pbuf_free(seg->p);
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b56c:	f7ff bce0 	b.w	800af30 <memp_free>
 800b570:	bd10      	pop	{r4, pc}

0800b572 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b572:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800b574:	b120      	cbz	r0, 800b580 <tcp_segs_free+0xe>
    struct tcp_seg *next = seg->next;
 800b576:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800b578:	f7ff ffed 	bl	800b556 <tcp_seg_free>
    seg = next;
 800b57c:	4620      	mov	r0, r4
 800b57e:	e7f9      	b.n	800b574 <tcp_segs_free+0x2>
  }
}
 800b580:	bd10      	pop	{r4, pc}

0800b582 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
 800b582:	6101      	str	r1, [r0, #16]
 800b584:	4770      	bx	lr

0800b586 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
 800b586:	67c1      	str	r1, [r0, #124]	; 0x7c
 800b588:	4770      	bx	lr

0800b58a <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
 800b58a:	6781      	str	r1, [r0, #120]	; 0x78
 800b58c:	4770      	bx	lr

0800b58e <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
 800b58e:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 800b592:	4770      	bx	lr

0800b594 <tcp_accept>:
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
 800b594:	6141      	str	r1, [r0, #20]
 800b596:	4770      	bx	lr

0800b598 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b598:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b59c:	f880 2020 	strb.w	r2, [r0, #32]
 800b5a0:	4770      	bx	lr

0800b5a2 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 800b5a2:	7e03      	ldrb	r3, [r0, #24]
 800b5a4:	2b01      	cmp	r3, #1
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800b5aa:	d915      	bls.n	800b5d8 <tcp_pcb_purge+0x36>
 800b5ac:	2b0a      	cmp	r3, #10
 800b5ae:	d013      	beq.n	800b5d8 <tcp_pcb_purge+0x36>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 800b5b0:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800b5b2:	b118      	cbz	r0, 800b5bc <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b5b4:	f7ff fd76 	bl	800b0a4 <pbuf_free>
      pcb->refused_data = NULL;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b5bc:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 800b5c0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b5c2:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
 800b5c4:	f7ff ffd5 	bl	800b572 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b5c8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b5ca:	f7ff ffd2 	bl	800b572 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b5d2:	6723      	str	r3, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b5d4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b5d8:	bd10      	pop	{r4, pc}
	...

0800b5dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
 800b5e0:	4da2      	ldr	r5, [pc, #648]	; (800b86c <tcp_slowtmr+0x290>)
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b5e2:	b087      	sub	sp, #28
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);

      tcp_active_pcbs_changed = 0;
 800b5e4:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 800b888 <tcp_slowtmr+0x2ac>
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
 800b5e8:	682b      	ldr	r3, [r5, #0]
 800b5ea:	46c2      	mov	sl, r8
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800b5f0:	4b9f      	ldr	r3, [pc, #636]	; (800b870 <tcp_slowtmr+0x294>)
 800b5f2:	781a      	ldrb	r2, [r3, #0]
 800b5f4:	469b      	mov	fp, r3
 800b5f6:	3201      	adds	r2, #1
 800b5f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  pcb = tcp_active_pcbs;
 800b5fa:	4f9e      	ldr	r7, [pc, #632]	; (800b874 <tcp_slowtmr+0x298>)
  ++tcp_ticks;
  ++tcp_timer_ctr;

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b5fc:	2600      	movs	r6, #0
  pcb = tcp_active_pcbs;
 800b5fe:	683c      	ldr	r4, [r7, #0]
 800b600:	9703      	str	r7, [sp, #12]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b602:	2c00      	cmp	r4, #0
 800b604:	f000 8112 	beq.w	800b82c <tcp_slowtmr+0x250>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 800b608:	f89b 3000 	ldrb.w	r3, [fp]
 800b60c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800b610:	429a      	cmp	r2, r3
 800b612:	d102      	bne.n	800b61a <tcp_slowtmr+0x3e>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800b614:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800b618:	e0e5      	b.n	800b7e6 <tcp_slowtmr+0x20a>
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 800b61a:	7e21      	ldrb	r1, [r4, #24]
    if (pcb->last_timer == tcp_timer_ctr) {
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;
 800b61c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 800b620:	2902      	cmp	r1, #2
 800b622:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800b626:	d101      	bne.n	800b62c <tcp_slowtmr+0x50>
 800b628:	2a06      	cmp	r2, #6
 800b62a:	d057      	beq.n	800b6dc <tcp_slowtmr+0x100>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
 800b62c:	2a0c      	cmp	r2, #12
 800b62e:	d055      	beq.n	800b6dc <tcp_slowtmr+0x100>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b630:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800b634:	b1eb      	cbz	r3, 800b672 <tcp_slowtmr+0x96>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800b636:	4a90      	ldr	r2, [pc, #576]	; (800b878 <tcp_slowtmr+0x29c>)
 800b638:	4413      	add	r3, r2
 800b63a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 800b63e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b642:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800b644:	bf84      	itt	hi
 800b646:	3301      	addhi	r3, #1
 800b648:	f884 3090 	strbhi.w	r3, [r4, #144]	; 0x90
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800b64c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b650:	4293      	cmp	r3, r2
 800b652:	d341      	bcc.n	800b6d8 <tcp_slowtmr+0xfc>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800b654:	4620      	mov	r0, r4
 800b656:	f002 f871 	bl	800d73c <tcp_zero_window_probe>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d13c      	bne.n	800b6d8 <tcp_slowtmr+0xfc>
            pcb->persist_cnt = 0;
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b65e:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
        if (pcb->persist_cnt < backoff_cnt) {
          pcb->persist_cnt++;
        }
        if (pcb->persist_cnt >= backoff_cnt) {
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
            pcb->persist_cnt = 0;
 800b662:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b666:	2a06      	cmp	r2, #6
 800b668:	d836      	bhi.n	800b6d8 <tcp_slowtmr+0xfc>
              pcb->persist_backoff++;
 800b66a:	3201      	adds	r2, #1
 800b66c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
 800b670:	e032      	b.n	800b6d8 <tcp_slowtmr+0xfc>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800b672:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800b676:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 800b678:	bfa4      	itt	ge
 800b67a:	3301      	addge	r3, #1
 800b67c:	86a3      	strhge	r3, [r4, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800b67e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b680:	b353      	cbz	r3, 800b6d8 <tcp_slowtmr+0xfc>
 800b682:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 800b686:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 800b68a:	4298      	cmp	r0, r3
 800b68c:	db24      	blt.n	800b6d8 <tcp_slowtmr+0xfc>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800b68e:	2902      	cmp	r1, #2
 800b690:	d00a      	beq.n	800b6a8 <tcp_slowtmr+0xcc>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 800b692:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800b696:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800b69a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b69e:	4977      	ldr	r1, [pc, #476]	; (800b87c <tcp_slowtmr+0x2a0>)
 800b6a0:	5c8a      	ldrb	r2, [r1, r2]
 800b6a2:	4093      	lsls	r3, r2
 800b6a4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800b6a8:	2300      	movs	r3, #0

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b6aa:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b6ae:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800b6b0:	4620      	mov	r0, r4
          if (pcb->state != SYN_SENT) {
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800b6b2:	86a3      	strh	r3, [r4, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b6b4:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
            pcb->ssthresh = (pcb->mss << 1);
          }
          pcb->cwnd = pcb->mss;
 800b6b8:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	bf28      	it	cs
 800b6c0:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b6c2:	004a      	lsls	r2, r1, #1
          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b6c4:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b6c6:	b292      	uxth	r2, r2
          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b6c8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b6cc:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 800b6ce:	bf38      	it	cc
 800b6d0:	f8a4 204e 	strhcc.w	r2, [r4, #78]	; 0x4e
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800b6d4:	f001 ff9e 	bl	800d614 <tcp_rexmit_rto>
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e000      	b.n	800b6de <tcp_slowtmr+0x102>
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
 800b6dc:	2301      	movs	r3, #1
          tcp_rexmit_rto(pcb);
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b6de:	7e21      	ldrb	r1, [r4, #24]
 800b6e0:	2906      	cmp	r1, #6
 800b6e2:	d109      	bne.n	800b6f8 <tcp_slowtmr+0x11c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b6e4:	7fa2      	ldrb	r2, [r4, #30]
 800b6e6:	06d2      	lsls	r2, r2, #27
 800b6e8:	d506      	bpl.n	800b6f8 <tcp_slowtmr+0x11c>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6ea:	682a      	ldr	r2, [r5, #0]
 800b6ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b6ee:	1a12      	subs	r2, r2, r0
 800b6f0:	2a28      	cmp	r2, #40	; 0x28
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b6f2:	bf84      	itt	hi
 800b6f4:	3301      	addhi	r3, #1
 800b6f6:	b2db      	uxtbhi	r3, r3
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b6f8:	7a22      	ldrb	r2, [r4, #8]
 800b6fa:	f002 0208 	and.w	r2, r2, #8
 800b6fe:	f002 09ff 	and.w	r9, r2, #255	; 0xff
 800b702:	b37a      	cbz	r2, 800b764 <tcp_slowtmr+0x188>
 800b704:	2904      	cmp	r1, #4
 800b706:	d001      	beq.n	800b70c <tcp_slowtmr+0x130>
       ((pcb->state == ESTABLISHED) ||
 800b708:	2907      	cmp	r1, #7
 800b70a:	d129      	bne.n	800b760 <tcp_slowtmr+0x184>
        (pcb->state == CLOSE_WAIT))) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b70c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b70e:	f44f 7efa 	mov.w	lr, #500	; 0x1f4
 800b712:	6828      	ldr	r0, [r5, #0]
 800b714:	1a80      	subs	r0, r0, r2
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800b716:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b71a:	f502 2124 	add.w	r1, r2, #671744	; 0xa4000
 800b71e:	f601 41b8 	addw	r1, r1, #3256	; 0xcb8
 800b722:	fbb1 f1fe 	udiv	r1, r1, lr
 800b726:	4288      	cmp	r0, r1
 800b728:	d904      	bls.n	800b734 <tcp_slowtmr+0x158>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b72a:	3301      	adds	r3, #1
        ++pcb_reset;
 800b72c:	f04f 0901 	mov.w	r9, #1
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b730:	b2db      	uxtb	r3, r3
 800b732:	e017      	b.n	800b764 <tcp_slowtmr+0x188>
        ++pcb_reset;
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b734:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 800b738:	4f51      	ldr	r7, [pc, #324]	; (800b880 <tcp_slowtmr+0x2a4>)
 800b73a:	fb07 2201 	mla	r2, r7, r1, r2
 800b73e:	fbb2 f2fe 	udiv	r2, r2, lr
 800b742:	4290      	cmp	r0, r2
 800b744:	d90c      	bls.n	800b760 <tcp_slowtmr+0x184>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
                / TCP_SLOW_INTERVAL)
      {
        err = tcp_keepalive(pcb);
 800b746:	4620      	mov	r0, r4
 800b748:	9304      	str	r3, [sp, #16]
 800b74a:	f001 ffcd 	bl	800d6e8 <tcp_keepalive>
        if (err == ERR_OK) {
 800b74e:	9b04      	ldr	r3, [sp, #16]
 800b750:	b930      	cbnz	r0, 800b760 <tcp_slowtmr+0x184>
          pcb->keep_cnt_sent++;
 800b752:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
 800b756:	4681      	mov	r9, r0
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
                / TCP_SLOW_INTERVAL)
      {
        err = tcp_keepalive(pcb);
        if (err == ERR_OK) {
          pcb->keep_cnt_sent++;
 800b758:	3201      	adds	r2, #1
 800b75a:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
 800b75e:	e001      	b.n	800b764 <tcp_slowtmr+0x188>
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
 800b760:	f04f 0900 	mov.w	r9, #0
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b764:	7e22      	ldrb	r2, [r4, #24]
 800b766:	2a03      	cmp	r2, #3
 800b768:	d104      	bne.n	800b774 <tcp_slowtmr+0x198>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b76a:	682a      	ldr	r2, [r5, #0]
 800b76c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b76e:	1a52      	subs	r2, r2, r1
 800b770:	2a28      	cmp	r2, #40	; 0x28
 800b772:	e005      	b.n	800b780 <tcp_slowtmr+0x1a4>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b774:	2a09      	cmp	r2, #9
 800b776:	d104      	bne.n	800b782 <tcp_slowtmr+0x1a6>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b778:	682a      	ldr	r2, [r5, #0]
 800b77a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b77c:	1a52      	subs	r2, r2, r1
 800b77e:	2af0      	cmp	r2, #240	; 0xf0
 800b780:	d801      	bhi.n	800b786 <tcp_slowtmr+0x1aa>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b782:	2b00      	cmp	r3, #0
 800b784:	d031      	beq.n	800b7ea <tcp_slowtmr+0x20e>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
 800b786:	4620      	mov	r0, r4
 800b788:	f7ff ff0b 	bl	800b5a2 <tcp_pcb_purge>
 800b78c:	68e3      	ldr	r3, [r4, #12]
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b78e:	b10e      	cbz	r6, 800b794 <tcp_slowtmr+0x1b8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 800b790:	60f3      	str	r3, [r6, #12]
 800b792:	e001      	b.n	800b798 <tcp_slowtmr+0x1bc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 800b794:	9a03      	ldr	r2, [sp, #12]
 800b796:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b798:	f1b9 0f00 	cmp.w	r9, #0
 800b79c:	d009      	beq.n	800b7b2 <tcp_slowtmr+0x1d6>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b79e:	8ba3      	ldrh	r3, [r4, #28]
 800b7a0:	4622      	mov	r2, r4
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	8b63      	ldrh	r3, [r4, #26]
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	1d23      	adds	r3, r4, #4
 800b7aa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b7ac:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b7ae:	f001 fee9 	bl	800d584 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 800b7b2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
 800b7b6:	4621      	mov	r1, r4
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
                 pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
      err_arg = pcb->callback_arg;
 800b7b8:	6922      	ldr	r2, [r4, #16]
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
 800b7ba:	2001      	movs	r0, #1
      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
                 pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 800b7bc:	9305      	str	r3, [sp, #20]
      err_arg = pcb->callback_arg;
 800b7be:	9204      	str	r2, [sp, #16]
      pcb2 = pcb;
      pcb = pcb->next;
 800b7c0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800b7c4:	f7ff fbb4 	bl	800af30 <memp_free>

      tcp_active_pcbs_changed = 0;
 800b7c8:	2100      	movs	r1, #0
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 800b7ca:	9b05      	ldr	r3, [sp, #20]
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);

      tcp_active_pcbs_changed = 0;
 800b7cc:	f888 1000 	strb.w	r1, [r8]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 800b7d0:	b123      	cbz	r3, 800b7dc <tcp_slowtmr+0x200>
 800b7d2:	9a04      	ldr	r2, [sp, #16]
 800b7d4:	f06f 010b 	mvn.w	r1, #11
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f47f af0a 	bne.w	800b5fa <tcp_slowtmr+0x1e>
 800b7e6:	4634      	mov	r4, r6
 800b7e8:	e01d      	b.n	800b826 <tcp_slowtmr+0x24a>
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7ea:	7fe2      	ldrb	r2, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 800b7ec:	f894 1020 	ldrb.w	r1, [r4, #32]
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7f0:	3201      	adds	r2, #1
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
 800b7f2:	f8d4 900c 	ldr.w	r9, [r4, #12]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7f6:	b2d2      	uxtb	r2, r2
      if (prev->polltmr >= prev->pollinterval) {
 800b7f8:	4291      	cmp	r1, r2
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7fa:	77e2      	strb	r2, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 800b7fc:	d813      	bhi.n	800b826 <tcp_slowtmr+0x24a>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
 800b7fe:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
      if (prev->polltmr >= prev->pollinterval) {
        prev->polltmr = 0;
 800b802:	77e3      	strb	r3, [r4, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b804:	f888 3000 	strb.w	r3, [r8]
        TCP_EVENT_POLL(prev, err);
 800b808:	b11a      	cbz	r2, 800b812 <tcp_slowtmr+0x236>
 800b80a:	4621      	mov	r1, r4
 800b80c:	6920      	ldr	r0, [r4, #16]
 800b80e:	4790      	blx	r2
 800b810:	e000      	b.n	800b814 <tcp_slowtmr+0x238>
 800b812:	4618      	mov	r0, r3
        if (tcp_active_pcbs_changed) {
 800b814:	f89a 3000 	ldrb.w	r3, [sl]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f47f aeee 	bne.w	800b5fa <tcp_slowtmr+0x1e>
          goto tcp_slowtmr_start;
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b81e:	b910      	cbnz	r0, 800b826 <tcp_slowtmr+0x24a>
          tcp_output(prev);
 800b820:	4620      	mov	r0, r4
 800b822:	f001 fd67 	bl	800d2f4 <tcp_output>
 800b826:	4626      	mov	r6, r4
 800b828:	464c      	mov	r4, r9
 800b82a:	e6ea      	b.n	800b602 <tcp_slowtmr+0x26>
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
 800b82c:	4b15      	ldr	r3, [pc, #84]	; (800b884 <tcp_slowtmr+0x2a8>)
 800b82e:	681e      	ldr	r6, [r3, #0]
 800b830:	4698      	mov	r8, r3
  while (pcb != NULL) {
 800b832:	b1c6      	cbz	r6, 800b866 <tcp_slowtmr+0x28a>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b838:	1a9b      	subs	r3, r3, r2
 800b83a:	2bf0      	cmp	r3, #240	; 0xf0
 800b83c:	d911      	bls.n	800b862 <tcp_slowtmr+0x286>
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b83e:	4630      	mov	r0, r6
 800b840:	f7ff feaf 	bl	800b5a2 <tcp_pcb_purge>
 800b844:	68f3      	ldr	r3, [r6, #12]
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b846:	b10c      	cbz	r4, 800b84c <tcp_slowtmr+0x270>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 800b848:	60e3      	str	r3, [r4, #12]
 800b84a:	e001      	b.n	800b850 <tcp_slowtmr+0x274>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 800b84c:	f8c8 3000 	str.w	r3, [r8]
      }
      pcb2 = pcb;
      pcb = pcb->next;
 800b850:	68f7      	ldr	r7, [r6, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800b852:	4631      	mov	r1, r6
 800b854:	4626      	mov	r6, r4
 800b856:	2001      	movs	r0, #1
 800b858:	f7ff fb6a 	bl	800af30 <memp_free>
 800b85c:	4634      	mov	r4, r6
 800b85e:	463e      	mov	r6, r7
 800b860:	e7e7      	b.n	800b832 <tcp_slowtmr+0x256>
    } else {
      prev = pcb;
      pcb = pcb->next;
 800b862:	68f7      	ldr	r7, [r6, #12]
 800b864:	e7fa      	b.n	800b85c <tcp_slowtmr+0x280>
    }
  }
}
 800b866:	b007      	add	sp, #28
 800b868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b86c:	20049278 	.word	0x20049278
 800b870:	20042e36 	.word	0x20042e36
 800b874:	20049274 	.word	0x20049274
 800b878:	0802f49d 	.word	0x0802f49d
 800b87c:	0802f490 	.word	0x0802f490
 800b880:	000124f8 	.word	0x000124f8
 800b884:	20049284 	.word	0x20049284
 800b888:	20049270 	.word	0x20049270

0800b88c <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800b88c:	6803      	ldr	r3, [r0, #0]
 800b88e:	428b      	cmp	r3, r1
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b890:	b510      	push	{r4, lr}
 800b892:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800b894:	d103      	bne.n	800b89e <tcp_pcb_remove+0x12>
 800b896:	68cb      	ldr	r3, [r1, #12]
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	e006      	b.n	800b8aa <tcp_pcb_remove+0x1e>
 800b89c:	4613      	mov	r3, r2
 800b89e:	b123      	cbz	r3, 800b8aa <tcp_pcb_remove+0x1e>
 800b8a0:	68da      	ldr	r2, [r3, #12]
 800b8a2:	4294      	cmp	r4, r2
 800b8a4:	d1fa      	bne.n	800b89c <tcp_pcb_remove+0x10>
 800b8a6:	68e2      	ldr	r2, [r4, #12]
 800b8a8:	60da      	str	r2, [r3, #12]
 800b8aa:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800b8ac:	4620      	mov	r0, r4
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800b8ae:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800b8b0:	f7ff fe77 	bl	800b5a2 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800b8b4:	7e23      	ldrb	r3, [r4, #24]
 800b8b6:	2b0a      	cmp	r3, #10
 800b8b8:	d00a      	beq.n	800b8d0 <tcp_pcb_remove+0x44>
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d008      	beq.n	800b8d0 <tcp_pcb_remove+0x44>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800b8be:	7fa3      	ldrb	r3, [r4, #30]

  tcp_pcb_purge(pcb);

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
 800b8c0:	07da      	lsls	r2, r3, #31
 800b8c2:	d505      	bpl.n	800b8d0 <tcp_pcb_remove+0x44>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
 800b8c4:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b8c8:	4620      	mov	r0, r4

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
 800b8ca:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
 800b8cc:	f001 fd12 	bl	800d2f4 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	7623      	strb	r3, [r4, #24]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b8d4:	8363      	strh	r3, [r4, #26]
 800b8d6:	bd10      	pop	{r4, pc}

0800b8d8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8da:	7e03      	ldrb	r3, [r0, #24]
 800b8dc:	4604      	mov	r4, r0
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b8de:	2900      	cmp	r1, #0
 800b8e0:	d042      	beq.n	800b968 <tcp_close_shutdown+0x90>
 800b8e2:	2b04      	cmp	r3, #4
 800b8e4:	d001      	beq.n	800b8ea <tcp_close_shutdown+0x12>
 800b8e6:	2b07      	cmp	r3, #7
 800b8e8:	d13e      	bne.n	800b968 <tcp_close_shutdown+0x90>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b8ea:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b8ec:	b922      	cbnz	r2, 800b8f8 <tcp_close_shutdown+0x20>
 800b8ee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b8f0:	f640 3268 	movw	r2, #2920	; 0xb68
 800b8f4:	4291      	cmp	r1, r2
 800b8f6:	d037      	beq.n	800b968 <tcp_close_shutdown+0x90>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b8f8:	8ba3      	ldrh	r3, [r4, #28]
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	8b63      	ldrh	r3, [r4, #26]
 800b902:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	1d23      	adds	r3, r4, #4
 800b908:	f001 fe3c 	bl	800d584 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b90c:	4620      	mov	r0, r4
 800b90e:	f7ff fe48 	bl	800b5a2 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b912:	4a36      	ldr	r2, [pc, #216]	; (800b9ec <tcp_close_shutdown+0x114>)
 800b914:	6813      	ldr	r3, [r2, #0]
 800b916:	429c      	cmp	r4, r3
 800b918:	d103      	bne.n	800b922 <tcp_close_shutdown+0x4a>
 800b91a:	68e3      	ldr	r3, [r4, #12]
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	e006      	b.n	800b92e <tcp_close_shutdown+0x56>
 800b920:	4613      	mov	r3, r2
 800b922:	b123      	cbz	r3, 800b92e <tcp_close_shutdown+0x56>
 800b924:	68da      	ldr	r2, [r3, #12]
 800b926:	4294      	cmp	r4, r2
 800b928:	d1fa      	bne.n	800b920 <tcp_close_shutdown+0x48>
 800b92a:	68e2      	ldr	r2, [r4, #12]
 800b92c:	60da      	str	r2, [r3, #12]
 800b92e:	4b30      	ldr	r3, [pc, #192]	; (800b9f0 <tcp_close_shutdown+0x118>)
 800b930:	2001      	movs	r0, #1
 800b932:	2500      	movs	r5, #0
 800b934:	7018      	strb	r0, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800b936:	7e23      	ldrb	r3, [r4, #24]
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
 800b938:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	d108      	bne.n	800b950 <tcp_close_shutdown+0x78>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800b93e:	230a      	movs	r3, #10
 800b940:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b942:	4b2c      	ldr	r3, [pc, #176]	; (800b9f4 <tcp_close_shutdown+0x11c>)
 800b944:	681a      	ldr	r2, [r3, #0]
 800b946:	601c      	str	r4, [r3, #0]
 800b948:	60e2      	str	r2, [r4, #12]
 800b94a:	f7ff f8c5 	bl	800aad8 <tcp_timer_needed>
 800b94e:	e005      	b.n	800b95c <tcp_close_shutdown+0x84>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800b950:	4b29      	ldr	r3, [pc, #164]	; (800b9f8 <tcp_close_shutdown+0x120>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	429c      	cmp	r4, r3
 800b956:	d103      	bne.n	800b960 <tcp_close_shutdown+0x88>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800b958:	f001 f9d2 	bl	800cd00 <tcp_trigger_input_pcb_close>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
        }
      }
      return ERR_OK;
 800b95c:	4628      	mov	r0, r5
 800b95e:	e042      	b.n	800b9e6 <tcp_close_shutdown+0x10e>
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800b960:	4621      	mov	r1, r4
 800b962:	f7ff fae5 	bl	800af30 <memp_free>
 800b966:	e7f9      	b.n	800b95c <tcp_close_shutdown+0x84>
      }
      return ERR_OK;
    }
  }

  switch (pcb->state) {
 800b968:	2b07      	cmp	r3, #7
 800b96a:	d83b      	bhi.n	800b9e4 <tcp_close_shutdown+0x10c>
 800b96c:	e8df f003 	tbb	[pc, r3]
 800b970:	2b201904 	.word	0x2b201904
 800b974:	313a3a2b 	.word	0x313a3a2b
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    if (pcb->local_port != 0) {
 800b978:	8b63      	ldrh	r3, [r4, #26]
 800b97a:	b17b      	cbz	r3, 800b99c <tcp_close_shutdown+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b97c:	4a1f      	ldr	r2, [pc, #124]	; (800b9fc <tcp_close_shutdown+0x124>)
 800b97e:	6813      	ldr	r3, [r2, #0]
 800b980:	429c      	cmp	r4, r3
 800b982:	d103      	bne.n	800b98c <tcp_close_shutdown+0xb4>
 800b984:	68e3      	ldr	r3, [r4, #12]
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	e006      	b.n	800b998 <tcp_close_shutdown+0xc0>
 800b98a:	4613      	mov	r3, r2
 800b98c:	b123      	cbz	r3, 800b998 <tcp_close_shutdown+0xc0>
 800b98e:	68da      	ldr	r2, [r3, #12]
 800b990:	4294      	cmp	r4, r2
 800b992:	d1fa      	bne.n	800b98a <tcp_close_shutdown+0xb2>
 800b994:	68e2      	ldr	r2, [r4, #12]
 800b996:	60da      	str	r2, [r3, #12]
 800b998:	2300      	movs	r3, #0
 800b99a:	60e3      	str	r3, [r4, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800b99c:	4621      	mov	r1, r4
 800b99e:	2001      	movs	r0, #1
 800b9a0:	e00e      	b.n	800b9c0 <tcp_close_shutdown+0xe8>
    pcb = NULL;
    break;
  case LISTEN:
    err = ERR_OK;
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4816      	ldr	r0, [pc, #88]	; (800ba00 <tcp_close_shutdown+0x128>)
 800b9a6:	f7ff ff71 	bl	800b88c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b9aa:	4621      	mov	r1, r4
 800b9ac:	2002      	movs	r0, #2
 800b9ae:	e007      	b.n	800b9c0 <tcp_close_shutdown+0xe8>
    pcb = NULL;
    break;
  case SYN_SENT:
    err = ERR_OK;
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	480e      	ldr	r0, [pc, #56]	; (800b9ec <tcp_close_shutdown+0x114>)
 800b9b4:	f7ff ff6a 	bl	800b88c <tcp_pcb_remove>
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	4b0d      	ldr	r3, [pc, #52]	; (800b9f0 <tcp_close_shutdown+0x118>)
    memp_free(MEMP_TCP_PCB, pcb);
 800b9bc:	4621      	mov	r1, r4
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    pcb = NULL;
    break;
  case SYN_SENT:
    err = ERR_OK;
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800b9be:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800b9c0:	f7ff fab6 	bl	800af30 <memp_free>
    pcb = NULL;
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800b9c4:	e00e      	b.n	800b9e4 <tcp_close_shutdown+0x10c>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f001 fc3d 	bl	800d246 <tcp_send_fin>
    if (err == ERR_OK) {
 800b9cc:	b958      	cbnz	r0, 800b9e6 <tcp_close_shutdown+0x10e>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800b9ce:	2305      	movs	r3, #5
 800b9d0:	e004      	b.n	800b9dc <tcp_close_shutdown+0x104>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
    }
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f001 fc37 	bl	800d246 <tcp_send_fin>
    if (err == ERR_OK) {
 800b9d8:	b928      	cbnz	r0, 800b9e6 <tcp_close_shutdown+0x10e>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800b9da:	2309      	movs	r3, #9
 800b9dc:	7623      	strb	r3, [r4, #24]
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f001 fc88 	bl	800d2f4 <tcp_output>
 800b9e4:	2000      	movs	r0, #0
  }
  return err;
}
 800b9e6:	b003      	add	sp, #12
 800b9e8:	bd30      	pop	{r4, r5, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20049274 	.word	0x20049274
 800b9f0:	20049270 	.word	0x20049270
 800b9f4:	20049284 	.word	0x20049284
 800b9f8:	20049288 	.word	0x20049288
 800b9fc:	20049280 	.word	0x20049280
 800ba00:	2004927c 	.word	0x2004927c

0800ba04 <tcp_close>:
tcp_close(struct tcp_pcb *pcb)
{
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ba04:	7e03      	ldrb	r3, [r0, #24]
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ba06:	2101      	movs	r1, #1
tcp_close(struct tcp_pcb *pcb)
{
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ba08:	2b01      	cmp	r3, #1
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ba0a:	bf1e      	ittt	ne
 800ba0c:	7f83      	ldrbne	r3, [r0, #30]
 800ba0e:	f043 0310 	orrne.w	r3, r3, #16
 800ba12:	7783      	strbne	r3, [r0, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ba14:	f7ff bf60 	b.w	800b8d8 <tcp_close_shutdown>

0800ba18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ba18:	b510      	push	{r4, lr}
 800ba1a:	4608      	mov	r0, r1
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800ba1c:	4614      	mov	r4, r2
 800ba1e:	b132      	cbz	r2, 800ba2e <tcp_recv_null+0x16>
    tcp_recved(pcb, p->tot_len);
 800ba20:	8911      	ldrh	r1, [r2, #8]
 800ba22:	f7ff fd73 	bl	800b50c <tcp_recved>
    pbuf_free(p);
 800ba26:	4620      	mov	r0, r4
 800ba28:	f7ff fb3c 	bl	800b0a4 <pbuf_free>
 800ba2c:	e004      	b.n	800ba38 <tcp_recv_null+0x20>
  } else if (err == ERR_OK) {
 800ba2e:	b91b      	cbnz	r3, 800ba38 <tcp_recv_null+0x20>
    return tcp_close(pcb);
  }
  return ERR_OK;
}
 800ba30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
    tcp_recved(pcb, p->tot_len);
    pbuf_free(p);
  } else if (err == ERR_OK) {
    return tcp_close(pcb);
 800ba34:	f7ff bfe6 	b.w	800ba04 <tcp_close>
  }
  return ERR_OK;
}
 800ba38:	2000      	movs	r0, #0
 800ba3a:	bd10      	pop	{r4, pc}

0800ba3c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ba3e:	6f45      	ldr	r5, [r0, #116]	; 0x74
    struct pbuf *refused_data = pcb->refused_data;
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ba40:	2300      	movs	r3, #0
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ba42:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ba44:	4604      	mov	r4, r0
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ba46:	7b6f      	ldrb	r7, [r5, #13]
    struct pbuf *refused_data = pcb->refused_data;
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ba48:	6743      	str	r3, [r0, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ba4a:	b126      	cbz	r6, 800ba56 <tcp_process_refused_data+0x1a>
 800ba4c:	4601      	mov	r1, r0
 800ba4e:	462a      	mov	r2, r5
 800ba50:	6900      	ldr	r0, [r0, #16]
 800ba52:	47b0      	blx	r6
 800ba54:	e005      	b.n	800ba62 <tcp_process_refused_data+0x26>
 800ba56:	4601      	mov	r1, r0
 800ba58:	4633      	mov	r3, r6
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	f7ff ffdb 	bl	800ba18 <tcp_recv_null>
    if (err == ERR_OK) {
 800ba62:	b9b0      	cbnz	r0, 800ba92 <tcp_process_refused_data+0x56>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ba64:	06bb      	lsls	r3, r7, #26
 800ba66:	d512      	bpl.n	800ba8e <tcp_process_refused_data+0x52>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba68:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800ba6a:	f640 3268 	movw	r2, #2920	; 0xb68
          pcb->rcv_wnd++;
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ba6e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba70:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800ba72:	bf1c      	itt	ne
 800ba74:	3301      	addne	r3, #1
 800ba76:	85a3      	strhne	r3, [r4, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ba78:	b14d      	cbz	r5, 800ba8e <tcp_process_refused_data+0x52>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	6920      	ldr	r0, [r4, #16]
 800ba80:	461a      	mov	r2, r3
 800ba82:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800ba84:	300c      	adds	r0, #12
 800ba86:	d102      	bne.n	800ba8e <tcp_process_refused_data+0x52>
          return ERR_ABRT;
 800ba88:	f06f 000b 	mvn.w	r0, #11
 800ba8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
      return ERR_INPROGRESS;
    }
  }
  return ERR_OK;
 800ba8e:	2000      	movs	r0, #0
 800ba90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_EVENT_CLOSED(pcb, err);
        if (err == ERR_ABRT) {
          return ERR_ABRT;
        }
      }
    } else if (err == ERR_ABRT) {
 800ba92:	300c      	adds	r0, #12
 800ba94:	d0f8      	beq.n	800ba88 <tcp_process_refused_data+0x4c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ba96:	6765      	str	r5, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800ba98:	f06f 0004 	mvn.w	r0, #4
    }
  }
  return ERR_OK;
}
 800ba9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800baa0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800baa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800baa4:	4d17      	ldr	r5, [pc, #92]	; (800bb04 <tcp_fasttmr+0x64>)

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800baa6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800bb0c <tcp_fasttmr+0x6c>
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800baaa:	782b      	ldrb	r3, [r5, #0]

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 800baac:	4e16      	ldr	r6, [pc, #88]	; (800bb08 <tcp_fasttmr+0x68>)
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800baae:	3301      	adds	r3, #1
 800bab0:	702b      	strb	r3, [r5, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bab2:	f8d8 4000 	ldr.w	r4, [r8]

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 800bab6:	2700      	movs	r7, #0
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while (pcb != NULL) {
 800bab8:	b314      	cbz	r4, 800bb00 <tcp_fasttmr+0x60>
    if (pcb->last_timer != tcp_timer_ctr) {
 800baba:	782b      	ldrb	r3, [r5, #0]
 800babc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d019      	beq.n	800baf8 <tcp_fasttmr+0x58>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bac4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bac8:	7fa3      	ldrb	r3, [r4, #30]
 800baca:	07da      	lsls	r2, r3, #31
 800bacc:	d509      	bpl.n	800bae2 <tcp_fasttmr+0x42>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bace:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800bad2:	4620      	mov	r0, r4
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800bad4:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
 800bad6:	f001 fc0d 	bl	800d2f4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bada:	7fa3      	ldrb	r3, [r4, #30]
 800badc:	f023 0303 	bic.w	r3, r3, #3
 800bae0:	77a3      	strb	r3, [r4, #30]
      }

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bae2:	6f63      	ldr	r3, [r4, #116]	; 0x74
        tcp_ack_now(pcb);
        tcp_output(pcb);
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
      }

      next = pcb->next;
 800bae4:	f8d4 900c 	ldr.w	r9, [r4, #12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bae8:	b143      	cbz	r3, 800bafc <tcp_fasttmr+0x5c>
        tcp_active_pcbs_changed = 0;
        tcp_process_refused_data(pcb);
 800baea:	4620      	mov	r0, r4

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 800baec:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800baee:	f7ff ffa5 	bl	800ba3c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800baf2:	7833      	ldrb	r3, [r6, #0]
 800baf4:	b113      	cbz	r3, 800bafc <tcp_fasttmr+0x5c>
 800baf6:	e7dc      	b.n	800bab2 <tcp_fasttmr+0x12>
          goto tcp_fasttmr_start;
        }
      }
      pcb = next;
    } else {
      pcb = pcb->next;
 800baf8:	f8d4 900c 	ldr.w	r9, [r4, #12]
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800bafc:	464c      	mov	r4, r9
 800bafe:	e7db      	b.n	800bab8 <tcp_fasttmr+0x18>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800bb00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb04:	20042e36 	.word	0x20042e36
 800bb08:	20049270 	.word	0x20049270
 800bb0c:	20049274 	.word	0x20049274

0800bb10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bb10:	b508      	push	{r3, lr}
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bb12:	f7ff ffc5 	bl	800baa0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bb16:	4a06      	ldr	r2, [pc, #24]	; (800bb30 <tcp_tmr+0x20>)
 800bb18:	7813      	ldrb	r3, [r2, #0]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	7013      	strb	r3, [r2, #0]
 800bb20:	07db      	lsls	r3, r3, #31
 800bb22:	d503      	bpl.n	800bb2c <tcp_tmr+0x1c>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  }
}
 800bb24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tcp_fasttmr();

  if (++tcp_timer & 1) {
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bb28:	f7ff bd58 	b.w	800b5dc <tcp_slowtmr>
 800bb2c:	bd08      	pop	{r3, pc}
 800bb2e:	bf00      	nop
 800bb30:	20042e35 	.word	0x20042e35

0800bb34 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800bb34:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state == LISTEN) {
 800bb36:	7e05      	ldrb	r5, [r0, #24]
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800bb38:	4604      	mov	r4, r0
 800bb3a:	4616      	mov	r6, r2
  if (pcb->state == LISTEN) {
 800bb3c:	2d01      	cmp	r5, #1
 800bb3e:	d019      	beq.n	800bb74 <tcp_shutdown+0x40>
    return ERR_CONN;
  }
  if (shut_rx) {
 800bb40:	b161      	cbz	r1, 800bb5c <tcp_shutdown+0x28>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800bb42:	7f83      	ldrb	r3, [r0, #30]
 800bb44:	f043 0310 	orr.w	r3, r3, #16
 800bb48:	7783      	strb	r3, [r0, #30]
    if (shut_tx) {
 800bb4a:	b10a      	cbz	r2, 800bb50 <tcp_shutdown+0x1c>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800bb4c:	2101      	movs	r1, #1
 800bb4e:	e00d      	b.n	800bb6c <tcp_shutdown+0x38>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800bb50:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800bb52:	b190      	cbz	r0, 800bb7a <tcp_shutdown+0x46>
      pbuf_free(pcb->refused_data);
 800bb54:	f7ff faa6 	bl	800b0a4 <pbuf_free>
      pcb->refused_data = NULL;
 800bb58:	6766      	str	r6, [r4, #116]	; 0x74
 800bb5a:	e00e      	b.n	800bb7a <tcp_shutdown+0x46>
    }
  }
  if (shut_tx) {
 800bb5c:	b16a      	cbz	r2, 800bb7a <tcp_shutdown+0x46>
 800bb5e:	2d07      	cmp	r5, #7
 800bb60:	d808      	bhi.n	800bb74 <tcp_shutdown+0x40>
 800bb62:	2301      	movs	r3, #1
 800bb64:	40ab      	lsls	r3, r5
 800bb66:	f013 0f98 	tst.w	r3, #152	; 0x98
 800bb6a:	d003      	beq.n	800bb74 <tcp_shutdown+0x40>
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
    }
  }
  return ERR_OK;
}
 800bb6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800bb70:	f7ff beb2 	b.w	800b8d8 <tcp_close_shutdown>
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  if (pcb->state == LISTEN) {
    return ERR_CONN;
 800bb74:	f06f 000a 	mvn.w	r0, #10
 800bb78:	bd70      	pop	{r4, r5, r6, pc}
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
    }
  }
  return ERR_OK;
 800bb7a:	2000      	movs	r0, #0
}
 800bb7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb80 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bb80:	7e03      	ldrb	r3, [r0, #24]
 800bb82:	2b0a      	cmp	r3, #10
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bb84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb88:	4604      	mov	r4, r0
 800bb8a:	460f      	mov	r7, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bb8c:	d10a      	bne.n	800bba4 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bb8e:	4601      	mov	r1, r0
 800bb90:	4827      	ldr	r0, [pc, #156]	; (800bc30 <tcp_abandon+0xb0>)
 800bb92:	f7ff fe7b 	bl	800b88c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800bb96:	4621      	mov	r1, r4
 800bb98:	2001      	movs	r0, #1
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 800bb9a:	b002      	add	sp, #8
 800bb9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
 800bba0:	f7ff b9c6 	b.w	800af30 <memp_free>
  } else {
    int send_rst = 0;
    u16_t local_port = 0;
    seqno = pcb->snd_nxt;
 800bba4:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800bba8:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bbac:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bbb0:	f8d0 8010 	ldr.w	r8, [r0, #16]
 800bbb4:	8b45      	ldrh	r5, [r0, #26]
    if ((pcb->state == CLOSED) && (pcb->local_port != 0)) {
 800bbb6:	b993      	cbnz	r3, 800bbde <tcp_abandon+0x5e>
 800bbb8:	b18d      	cbz	r5, 800bbde <tcp_abandon+0x5e>
      /* bound, not yet opened */
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bbba:	4a1e      	ldr	r2, [pc, #120]	; (800bc34 <tcp_abandon+0xb4>)
 800bbbc:	6813      	ldr	r3, [r2, #0]
 800bbbe:	4298      	cmp	r0, r3
 800bbc0:	d103      	bne.n	800bbca <tcp_abandon+0x4a>
 800bbc2:	68c3      	ldr	r3, [r0, #12]
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	e006      	b.n	800bbd6 <tcp_abandon+0x56>
 800bbc8:	4613      	mov	r3, r2
 800bbca:	b123      	cbz	r3, 800bbd6 <tcp_abandon+0x56>
 800bbcc:	68da      	ldr	r2, [r3, #12]
 800bbce:	4294      	cmp	r4, r2
 800bbd0:	d1fa      	bne.n	800bbc8 <tcp_abandon+0x48>
 800bbd2:	68e2      	ldr	r2, [r4, #12]
 800bbd4:	60da      	str	r2, [r3, #12]
 800bbd6:	2500      	movs	r5, #0
 800bbd8:	60e5      	str	r5, [r4, #12]
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
  } else {
    int send_rst = 0;
 800bbda:	462f      	mov	r7, r5
    errf = pcb->errf;
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
    if ((pcb->state == CLOSED) && (pcb->local_port != 0)) {
      /* bound, not yet opened */
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bbdc:	e006      	b.n	800bbec <tcp_abandon+0x6c>
    } else {
      send_rst = reset;
      local_port = pcb->local_port;
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4815      	ldr	r0, [pc, #84]	; (800bc38 <tcp_abandon+0xb8>)
 800bbe2:	f7ff fe53 	bl	800b88c <tcp_pcb_remove>
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	4b14      	ldr	r3, [pc, #80]	; (800bc3c <tcp_abandon+0xbc>)
 800bbea:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bbec:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bbee:	b108      	cbz	r0, 800bbf4 <tcp_abandon+0x74>
      tcp_segs_free(pcb->unacked);
 800bbf0:	f7ff fcbf 	bl	800b572 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bbf4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800bbf6:	b108      	cbz	r0, 800bbfc <tcp_abandon+0x7c>
      tcp_segs_free(pcb->unsent);
 800bbf8:	f7ff fcbb 	bl	800b572 <tcp_segs_free>
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (send_rst) {
 800bbfc:	b147      	cbz	r7, 800bc10 <tcp_abandon+0x90>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bbfe:	8ba3      	ldrh	r3, [r4, #28]
 800bc00:	4622      	mov	r2, r4
 800bc02:	9500      	str	r5, [sp, #0]
 800bc04:	4651      	mov	r1, sl
 800bc06:	9301      	str	r3, [sp, #4]
 800bc08:	4648      	mov	r0, r9
 800bc0a:	1d23      	adds	r3, r4, #4
 800bc0c:	f001 fcba 	bl	800d584 <tcp_rst>
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800bc10:	4621      	mov	r1, r4
 800bc12:	2001      	movs	r0, #1
 800bc14:	f7ff f98c 	bl	800af30 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 800bc18:	b13e      	cbz	r6, 800bc2a <tcp_abandon+0xaa>
 800bc1a:	f06f 010b 	mvn.w	r1, #11
 800bc1e:	4640      	mov	r0, r8
 800bc20:	4633      	mov	r3, r6
  }
}
 800bc22:	b002      	add	sp, #8
 800bc24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (send_rst) {
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 800bc28:	4718      	bx	r3
  }
}
 800bc2a:	b002      	add	sp, #8
 800bc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc30:	20049284 	.word	0x20049284
 800bc34:	20049280 	.word	0x20049280
 800bc38:	20049274 	.word	0x20049274
 800bc3c:	20049270 	.word	0x20049270

0800bc40 <tcp_abort>:
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  tcp_abandon(pcb, 1);
 800bc40:	2101      	movs	r1, #1
 800bc42:	f7ff bf9d 	b.w	800bb80 <tcp_abandon>

0800bc46 <tcp_accept_null>:
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800bc46:	4608      	mov	r0, r1
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bc48:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800bc4a:	f7ff fff9 	bl	800bc40 <tcp_abort>

  return ERR_ABRT;
}
 800bc4e:	f06f 000b 	mvn.w	r0, #11
 800bc52:	bd08      	pop	{r3, pc}

0800bc54 <tcp_netif_ipv4_addr_changed_pcblist>:

#if LWIP_IPV4
/** Helper function for tcp_netif_ipv4_addr_changed() that iterates a pcb list */
static void
tcp_netif_ipv4_addr_changed_pcblist(const ip4_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800bc54:	b538      	push	{r3, r4, r5, lr}
 800bc56:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800bc58:	b149      	cbz	r1, 800bc6e <tcp_netif_ipv4_addr_changed_pcblist+0x1a>
    /* PCB bound to current local interface address? */
    if (!IP_IS_V6_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), old_addr)
 800bc5a:	680a      	ldr	r2, [r1, #0]
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	68cc      	ldr	r4, [r1, #12]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d102      	bne.n	800bc6a <tcp_netif_ipv4_addr_changed_pcblist+0x16>
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bc64:	4608      	mov	r0, r1
 800bc66:	f7ff ffeb 	bl	800bc40 <tcp_abort>
      pcb = next;
    } else {
      pcb = pcb->next;
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	e7f4      	b.n	800bc58 <tcp_netif_ipv4_addr_changed_pcblist+0x4>
    }
  }
}
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}

0800bc70 <tcp_kill_state>:

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc70:	4b0c      	ldr	r3, [pc, #48]	; (800bca4 <tcp_kill_state+0x34>)
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bc72:	b430      	push	{r4, r5}

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc74:	6819      	ldr	r1, [r3, #0]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
 800bc76:	2400      	movs	r4, #0
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->state == state) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc78:	4b0b      	ldr	r3, [pc, #44]	; (800bca8 <tcp_kill_state+0x38>)
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
  inactive = NULL;
 800bc7a:	4622      	mov	r2, r4
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->state == state) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc7c:	681d      	ldr	r5, [r3, #0]

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc7e:	b151      	cbz	r1, 800bc96 <tcp_kill_state+0x26>
    if (pcb->state == state) {
 800bc80:	7e0b      	ldrb	r3, [r1, #24]
 800bc82:	4283      	cmp	r3, r0
 800bc84:	d105      	bne.n	800bc92 <tcp_kill_state+0x22>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc86:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bc88:	1aeb      	subs	r3, r5, r3
 800bc8a:	429c      	cmp	r4, r3
 800bc8c:	bf9c      	itt	ls
 800bc8e:	461c      	movls	r4, r3
 800bc90:	460a      	movls	r2, r1

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc92:	68c9      	ldr	r1, [r1, #12]
 800bc94:	e7f3      	b.n	800bc7e <tcp_kill_state+0xe>
        inactivity = tcp_ticks - pcb->tmr;
        inactive = pcb;
      }
    }
  }
  if (inactive != NULL) {
 800bc96:	b11a      	cbz	r2, 800bca0 <tcp_kill_state+0x30>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bc98:	4610      	mov	r0, r2
  }
}
 800bc9a:	bc30      	pop	{r4, r5}
  }
  if (inactive != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bc9c:	f7ff bf70 	b.w	800bb80 <tcp_abandon>
  }
}
 800bca0:	bc30      	pop	{r4, r5}
 800bca2:	4770      	bx	lr
 800bca4:	20049274 	.word	0x20049274
 800bca8:	20049278 	.word	0x20049278

0800bcac <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;

  iss += tcp_ticks;       /* XXX */
 800bcac:	4a03      	ldr	r2, [pc, #12]	; (800bcbc <tcp_next_iss+0x10>)
 800bcae:	4b04      	ldr	r3, [pc, #16]	; (800bcc0 <tcp_next_iss+0x14>)
 800bcb0:	6810      	ldr	r0, [r2, #0]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4418      	add	r0, r3
 800bcb6:	6010      	str	r0, [r2, #0]
  return iss;
}
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	2001007c 	.word	0x2001007c
 800bcc0:	20049278 	.word	0x20049278

0800bcc4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc6:	4606      	mov	r6, r0
  struct tcp_pcb *pcb;
  u32_t iss;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcc8:	2001      	movs	r0, #1
 800bcca:	f7ff f925 	bl	800af18 <memp_malloc>
 800bcce:	4d41      	ldr	r5, [pc, #260]	; (800bdd4 <tcp_alloc+0x110>)
  if (pcb == NULL) {
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d143      	bne.n	800bd5e <tcp_alloc+0x9a>
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcd6:	4b40      	ldr	r3, [pc, #256]	; (800bdd8 <tcp_alloc+0x114>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bcd8:	6829      	ldr	r1, [r5, #0]
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	b13b      	cbz	r3, 800bcee <tcp_alloc+0x2a>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bcde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bce0:	1a8a      	subs	r2, r1, r2
 800bce2:	42a2      	cmp	r2, r4
 800bce4:	bf24      	itt	cs
 800bce6:	4618      	movcs	r0, r3
 800bce8:	4614      	movcs	r4, r2
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	e7f6      	b.n	800bcdc <tcp_alloc+0x18>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
 800bcee:	b108      	cbz	r0, 800bcf4 <tcp_alloc+0x30>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bcf0:	f7ff ffa6 	bl	800bc40 <tcp_abort>
  if (pcb == NULL) {
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcf4:	2001      	movs	r0, #1
 800bcf6:	f7ff f90f 	bl	800af18 <memp_malloc>
    if (pcb == NULL) {
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	bb78      	cbnz	r0, 800bd5e <tcp_alloc+0x9a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bcfe:	2009      	movs	r0, #9
 800bd00:	f7ff ffb6 	bl	800bc70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd04:	2001      	movs	r0, #1
 800bd06:	f7ff f907 	bl	800af18 <memp_malloc>
      if (pcb == NULL) {
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	bb38      	cbnz	r0, 800bd5e <tcp_alloc+0x9a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bd0e:	2008      	movs	r0, #8
 800bd10:	f7ff ffae 	bl	800bc70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd14:	2001      	movs	r0, #1
 800bd16:	f7ff f8ff 	bl	800af18 <memp_malloc>
        if (pcb == NULL) {
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	b9f8      	cbnz	r0, 800bd5e <tcp_alloc+0x9a>
{
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bd1e:	f016 0f80 	tst.w	r6, #128	; 0x80

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd22:	4b2e      	ldr	r3, [pc, #184]	; (800bddc <tcp_alloc+0x118>)
    if (pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bd24:	f8d5 e000 	ldr.w	lr, [r5]
{
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bd28:	bf0c      	ite	eq
 800bd2a:	4631      	moveq	r1, r6
 800bd2c:	217f      	movne	r1, #127	; 0x7f

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	b163      	cbz	r3, 800bd4c <tcp_alloc+0x88>
    if (pcb->prio <= mprio &&
 800bd32:	7e5f      	ldrb	r7, [r3, #25]
 800bd34:	428f      	cmp	r7, r1
 800bd36:	d807      	bhi.n	800bd48 <tcp_alloc+0x84>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bd38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd3a:	ebc2 020e 	rsb	r2, r2, lr

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= mprio &&
 800bd3e:	42a2      	cmp	r2, r4
 800bd40:	bf22      	ittt	cs
 800bd42:	4639      	movcs	r1, r7
 800bd44:	4614      	movcs	r4, r2
 800bd46:	4618      	movcs	r0, r3
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	e7f1      	b.n	800bd30 <tcp_alloc+0x6c>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
 800bd4c:	b108      	cbz	r0, 800bd52 <tcp_alloc+0x8e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bd4e:	f7ff ff77 	bl	800bc40 <tcp_abort>
        if (pcb == NULL) {
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd52:	2001      	movs	r0, #1
 800bd54:	f7ff f8e0 	bl	800af18 <memp_malloc>
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bd58:	4604      	mov	r4, r0
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	d037      	beq.n	800bdce <tcp_alloc+0x10a>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bd5e:	2294      	movs	r2, #148	; 0x94
 800bd60:	2100      	movs	r1, #0
 800bd62:	4620      	mov	r0, r4
 800bd64:	f005 fe78 	bl	8011a58 <memset>
    pcb->prio = prio;
    pcb->snd_buf = TCP_SND_BUF;
 800bd68:	f241 63d0 	movw	r3, #5840	; 0x16d0
    pcb->snd_queuelen = 0;
 800bd6c:	2100      	movs	r1, #0
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
    memset(pcb, 0, sizeof(struct tcp_pcb));
    pcb->prio = prio;
 800bd6e:	7666      	strb	r6, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
 800bd70:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bd74:	f640 3368 	movw	r3, #2920	; 0xb68
  }
  if (pcb != NULL) {
    memset(pcb, 0, sizeof(struct tcp_pcb));
    pcb->prio = prio;
    pcb->snd_buf = TCP_SND_BUF;
    pcb->snd_queuelen = 0;
 800bd78:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bd7c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800bd7e:	85a3      	strh	r3, [r4, #44]	; 0x2c
    /* snd_scale and rcv_scale are zero unless both sides agree to use scaling */
    pcb->snd_scale = 0;
    pcb->rcv_scale = 0;
#endif
    pcb->tos = 0;
    pcb->ttl = TCP_TTL;
 800bd80:	23ff      	movs	r3, #255	; 0xff
#if LWIP_WND_SCALE
    /* snd_scale and rcv_scale are zero unless both sides agree to use scaling */
    pcb->snd_scale = 0;
    pcb->rcv_scale = 0;
#endif
    pcb->tos = 0;
 800bd82:	7261      	strb	r1, [r4, #9]
    pcb->ttl = TCP_TTL;
 800bd84:	72a3      	strb	r3, [r4, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 800bd86:	f44f 7306 	mov.w	r3, #536	; 0x218
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
    pcb->sa = 0;
 800bd8a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
#endif
    pcb->tos = 0;
    pcb->ttl = TCP_TTL;
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 800bd8e:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bd90:	2306      	movs	r3, #6
 800bd92:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bd96:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
 800bd9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd9e:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
 800bda0:	2301      	movs	r3, #1
 800bda2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss();
 800bda6:	f7ff ff81 	bl	800bcac <tcp_next_iss>
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
 800bdaa:	682b      	ldr	r3, [r5, #0]
    pcb->sa = 0;
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
 800bdac:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
 800bdae:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
 800bdb0:	4b0b      	ldr	r3, [pc, #44]	; (800bde0 <tcp_alloc+0x11c>)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
 800bdb2:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
    pcb->last_timer = tcp_timer_ctr;
 800bdb4:	781b      	ldrb	r3, [r3, #0]
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
 800bdb6:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
    pcb->last_timer = tcp_timer_ctr;
 800bdb8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb->polltmr = 0;

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bdbc:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <tcp_alloc+0x120>)
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
 800bdbe:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->last_timer = tcp_timer_ctr;

    pcb->polltmr = 0;

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bdc0:	67e3      	str	r3, [r4, #124]	; 0x7c
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bdc2:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <tcp_alloc+0x124>)
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
    pcb->last_timer = tcp_timer_ctr;

    pcb->polltmr = 0;
 800bdc4:	77e1      	strb	r1, [r4, #31]
#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bdc6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
 800bdca:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
  }
  return pcb;
}
 800bdce:	4620      	mov	r0, r4
 800bdd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20049278 	.word	0x20049278
 800bdd8:	20049284 	.word	0x20049284
 800bddc:	20049274 	.word	0x20049274
 800bde0:	20042e36 	.word	0x20042e36
 800bde4:	0800ba19 	.word	0x0800ba19
 800bde8:	006ddd00 	.word	0x006ddd00

0800bdec <tcp_new>:
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  return tcp_alloc(TCP_PRIO_NORMAL);
 800bdec:	2040      	movs	r0, #64	; 0x40
 800bdee:	f7ff bf69 	b.w	800bcc4 <tcp_alloc>

0800bdf2 <tcp_eff_send_mss_impl>:
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
#if LWIP_IPV6 && LWIP_IPV4
                     , u8_t isipv6
#endif /* LWIP_IPV6 && LWIP_IPV4 */
                     )
{
 800bdf2:	b510      	push	{r4, lr}
 800bdf4:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(isipv6, src, dest);
 800bdf6:	4608      	mov	r0, r1
 800bdf8:	f7fe fce0 	bl	800a7bc <ip4_route>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bdfc:	b130      	cbz	r0, 800be0c <tcp_eff_send_mss_impl+0x1a>
      return sendmss;
    }
    mtu = outif->mtu;
 800bdfe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800be00:	b123      	cbz	r3, 800be0c <tcp_eff_send_mss_impl+0x1a>
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800be02:	3b28      	subs	r3, #40	; 0x28
 800be04:	b29b      	uxth	r3, r3
 800be06:	429c      	cmp	r4, r3
 800be08:	bf28      	it	cs
 800be0a:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 800be0c:	4620      	mov	r0, r4
 800be0e:	bd10      	pop	{r4, pc}

0800be10 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	461f      	mov	r7, r3
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800be14:	4604      	mov	r4, r0
 800be16:	2800      	cmp	r0, #0
 800be18:	d05f      	beq.n	800beda <tcp_connect+0xca>
    return ERR_VAL;
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800be1a:	7e03      	ldrb	r3, [r0, #24]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d159      	bne.n	800bed4 <tcp_connect+0xc4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
 800be20:	2900      	cmp	r1, #0
 800be22:	d05a      	beq.n	800beda <tcp_connect+0xca>
    ip_addr_set(&pcb->remote_ip, ipaddr);
 800be24:	680b      	ldr	r3, [r1, #0]
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
 800be26:	8382      	strh	r2, [r0, #28]

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    ip_addr_set(&pcb->remote_ip, ipaddr);
 800be28:	6043      	str	r3, [r0, #4]
    return ERR_VAL;
  }
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800be2a:	6803      	ldr	r3, [r0, #0]
 800be2c:	b933      	cbnz	r3, 800be3c <tcp_connect+0x2c>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800be2e:	3004      	adds	r0, #4
 800be30:	f7fe fcc4 	bl	800a7bc <ip4_route>
 800be34:	2800      	cmp	r0, #0
 800be36:	d053      	beq.n	800bee0 <tcp_connect+0xd0>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800be38:	6843      	ldr	r3, [r0, #4]
 800be3a:	6023      	str	r3, [r4, #0]
  }

  old_local_port = pcb->local_port;
 800be3c:	8b66      	ldrh	r6, [r4, #26]
  if (pcb->local_port == 0) {
 800be3e:	b316      	cbz	r6, 800be86 <tcp_connect+0x76>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss();
 800be40:	f7ff ff34 	bl	800bcac <tcp_next_iss>
  pcb->rcv_nxt = 0;
  pcb->snd_nxt = iss;
 800be44:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 800be46:	3801      	subs	r0, #1
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss();
  pcb->rcv_nxt = 0;
 800be48:	2300      	movs	r3, #0
  pcb->snd_nxt = iss;
  pcb->lastack = iss - 1;
  pcb->snd_lbb = iss - 1;
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800be4a:	f640 3568 	movw	r5, #2920	; 0xb68
  pcb->snd_wnd = TCP_WND;
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 800be4e:	1d21      	adds	r1, r4, #4
  }

  iss = tcp_next_iss();
  pcb->rcv_nxt = 0;
  pcb->snd_nxt = iss;
  pcb->lastack = iss - 1;
 800be50:	64a0      	str	r0, [r4, #72]	; 0x48
  pcb->snd_lbb = iss - 1;
 800be52:	65e0      	str	r0, [r4, #92]	; 0x5c
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  pcb->snd_wnd = TCP_WND;
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 800be54:	f44f 7006 	mov.w	r0, #536	; 0x218
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss();
  pcb->rcv_nxt = 0;
 800be58:	62a3      	str	r3, [r4, #40]	; 0x28
  pcb->lastack = iss - 1;
  pcb->snd_lbb = iss - 1;
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800be5a:	6323      	str	r3, [r4, #48]	; 0x30
  pcb->snd_nxt = iss;
  pcb->lastack = iss - 1;
  pcb->snd_lbb = iss - 1;
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800be5c:	85e5      	strh	r5, [r4, #46]	; 0x2e
 800be5e:	85a5      	strh	r5, [r4, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  pcb->snd_wnd = TCP_WND;
 800be60:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 800be64:	86e0      	strh	r0, [r4, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 800be66:	f7ff ffc4 	bl	800bdf2 <tcp_eff_send_mss_impl>
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800be6a:	2301      	movs	r3, #1
  pcb->snd_wnd = TCP_WND;
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 800be6c:	86e0      	strh	r0, [r4, #54]	; 0x36
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800be6e:	2102      	movs	r1, #2
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800be70:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800be74:	4620      	mov	r0, r4
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  pcb->ssthresh = TCP_WND;
 800be76:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800be7a:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800be7e:	f001 f990 	bl	800d1a2 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800be82:	b140      	cbz	r0, 800be96 <tcp_connect+0x86>
 800be84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ip_addr_copy(pcb->local_ip, *local_ip);
  }

  old_local_port = pcb->local_port;
  if (pcb->local_port == 0) {
    pcb->local_port = tcp_new_port();
 800be86:	f7ff fa7f 	bl	800b388 <tcp_new_port>
 800be8a:	8360      	strh	r0, [r4, #26]
    if (pcb->local_port == 0) {
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d1d7      	bne.n	800be40 <tcp_connect+0x30>
      return ERR_BUF;
 800be90:	f06f 0001 	mvn.w	r0, #1
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
  }
  return ret;
}
 800be94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  if (ret == ERR_OK) {
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800be96:	2302      	movs	r3, #2
 800be98:	7623      	strb	r3, [r4, #24]
    if (old_local_port != 0) {
 800be9a:	b16e      	cbz	r6, 800beb8 <tcp_connect+0xa8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800be9c:	4a12      	ldr	r2, [pc, #72]	; (800bee8 <tcp_connect+0xd8>)
 800be9e:	6813      	ldr	r3, [r2, #0]
 800bea0:	429c      	cmp	r4, r3
 800bea2:	d103      	bne.n	800beac <tcp_connect+0x9c>
 800bea4:	68e3      	ldr	r3, [r4, #12]
 800bea6:	6013      	str	r3, [r2, #0]
 800bea8:	e006      	b.n	800beb8 <tcp_connect+0xa8>
 800beaa:	4613      	mov	r3, r2
 800beac:	b123      	cbz	r3, 800beb8 <tcp_connect+0xa8>
 800beae:	68da      	ldr	r2, [r3, #12]
 800beb0:	4294      	cmp	r4, r2
 800beb2:	d1fa      	bne.n	800beaa <tcp_connect+0x9a>
 800beb4:	68e2      	ldr	r2, [r4, #12]
 800beb6:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800beb8:	4b0c      	ldr	r3, [pc, #48]	; (800beec <tcp_connect+0xdc>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	601c      	str	r4, [r3, #0]
 800bebe:	60e2      	str	r2, [r4, #12]
 800bec0:	f7fe fe0a 	bl	800aad8 <tcp_timer_needed>
 800bec4:	2201      	movs	r2, #1
 800bec6:	4b0a      	ldr	r3, [pc, #40]	; (800bef0 <tcp_connect+0xe0>)
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800bec8:	4620      	mov	r0, r4
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
    if (old_local_port != 0) {
      TCP_RMV(&tcp_bound_pcbs, pcb);
    }
    TCP_REG_ACTIVE(pcb);
 800beca:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800becc:	f001 fa12 	bl	800d2f4 <tcp_output>
 800bed0:	2000      	movs	r0, #0
 800bed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800bed4:	f06f 0009 	mvn.w	r0, #9
 800bed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
 800beda:	f06f 0005 	mvn.w	r0, #5
 800bede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip, netif, local_ip);
    if ((netif == NULL) || (local_ip == NULL)) {
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800bee0:	f06f 0003 	mvn.w	r0, #3
 800bee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee6:	bf00      	nop
 800bee8:	20049280 	.word	0x20049280
 800beec:	20049274 	.word	0x20049274
 800bef0:	20049270 	.word	0x20049270

0800bef4 <tcp_netif_ipv4_addr_changed>:
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change or NULL if netif has been removed
 */
void tcp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 800bef4:	b538      	push	{r3, r4, r5, lr}
  struct tcp_pcb_listen *lpcb, *next;

  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bef6:	4b0e      	ldr	r3, [pc, #56]	; (800bf30 <tcp_netif_ipv4_addr_changed+0x3c>)
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change or NULL if netif has been removed
 */
void tcp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 800bef8:	460c      	mov	r4, r1
 800befa:	4605      	mov	r5, r0
  struct tcp_pcb_listen *lpcb, *next;

  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800befc:	6819      	ldr	r1, [r3, #0]
 800befe:	f7ff fea9 	bl	800bc54 <tcp_netif_ipv4_addr_changed_pcblist>
  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bf02:	4b0c      	ldr	r3, [pc, #48]	; (800bf34 <tcp_netif_ipv4_addr_changed+0x40>)
 800bf04:	4628      	mov	r0, r5
 800bf06:	6819      	ldr	r1, [r3, #0]
 800bf08:	f7ff fea4 	bl	800bc54 <tcp_netif_ipv4_addr_changed_pcblist>

  if (!ip4_addr_isany(new_addr)) {
 800bf0c:	b174      	cbz	r4, 800bf2c <tcp_netif_ipv4_addr_changed+0x38>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	b163      	cbz	r3, 800bf2c <tcp_netif_ipv4_addr_changed+0x38>
    /* PCB bound to current local interface address? */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800bf12:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <tcp_netif_ipv4_addr_changed+0x44>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	b14b      	cbz	r3, 800bf2c <tcp_netif_ipv4_addr_changed+0x38>
      next = lpcb->next;
      /* Is this an IPv4 pcb? */
      if (!IP_IS_V6_VAL(lpcb->local_ip)) {
        /* PCB bound to current local interface address? */
        if ((!(ip4_addr_isany(ip_2_ip4(&lpcb->local_ip)))) &&
 800bf18:	681a      	ldr	r2, [r3, #0]
  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_bound_pcbs);

  if (!ip4_addr_isany(new_addr)) {
    /* PCB bound to current local interface address? */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
      next = lpcb->next;
 800bf1a:	68d9      	ldr	r1, [r3, #12]
      /* Is this an IPv4 pcb? */
      if (!IP_IS_V6_VAL(lpcb->local_ip)) {
        /* PCB bound to current local interface address? */
        if ((!(ip4_addr_isany(ip_2_ip4(&lpcb->local_ip)))) &&
 800bf1c:	b122      	cbz	r2, 800bf28 <tcp_netif_ipv4_addr_changed+0x34>
 800bf1e:	6828      	ldr	r0, [r5, #0]
 800bf20:	4282      	cmp	r2, r0
            (ip4_addr_cmp(ip_2_ip4(&lpcb->local_ip), old_addr))) {
          /* The PCB is listening to the old ipaddr and
           * is set to listen to the new one instead */
              ip_addr_copy_from_ip4(lpcb->local_ip, *new_addr);
 800bf22:	bf04      	itt	eq
 800bf24:	6822      	ldreq	r2, [r4, #0]
 800bf26:	601a      	streq	r2, [r3, #0]
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change or NULL if netif has been removed
 */
void tcp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 800bf28:	460b      	mov	r3, r1
 800bf2a:	e7f4      	b.n	800bf16 <tcp_netif_ipv4_addr_changed+0x22>
 800bf2c:	bd38      	pop	{r3, r4, r5, pc}
 800bf2e:	bf00      	nop
 800bf30:	20049274 	.word	0x20049274
 800bf34:	20049280 	.word	0x20049280
 800bf38:	2004927c 	.word	0x2004927c

0800bf3c <tcp_receive>:
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800bf3c:	4ba1      	ldr	r3, [pc, #644]	; (800c1c4 <tcp_receive+0x288>)
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bf3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800bf42:	781b      	ldrb	r3, [r3, #0]
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bf44:	4604      	mov	r4, r0
 800bf46:	4ea0      	ldr	r6, [pc, #640]	; (800c1c8 <tcp_receive+0x28c>)
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800bf48:	f013 0f10 	tst.w	r3, #16
 800bf4c:	f000 8169 	beq.w	800c222 <tcp_receive+0x2e6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf50:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bf52:	6831      	ldr	r1, [r6, #0]
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bf54:	f8b0 7060 	ldrh.w	r7, [r0, #96]	; 0x60
 800bf58:	6d82      	ldr	r2, [r0, #88]	; 0x58

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf5a:	1a58      	subs	r0, r3, r1
 800bf5c:	4d9b      	ldr	r5, [pc, #620]	; (800c1cc <tcp_receive+0x290>)
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	db0d      	blt.n	800bf7e <tcp_receive+0x42>
 800bf62:	428b      	cmp	r3, r1
 800bf64:	d103      	bne.n	800bf6e <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf66:	682b      	ldr	r3, [r5, #0]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	db07      	blt.n	800bf7e <tcp_receive+0x42>
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d11e      	bne.n	800bfb2 <tcp_receive+0x76>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bf74:	4b96      	ldr	r3, [pc, #600]	; (800c1d0 <tcp_receive+0x294>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	89db      	ldrh	r3, [r3, #14]
 800bf7a:	42bb      	cmp	r3, r7
 800bf7c:	d919      	bls.n	800bfb2 <tcp_receive+0x76>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf7e:	4b94      	ldr	r3, [pc, #592]	; (800c1d0 <tcp_receive+0x294>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bf80:	f8b4 e062 	ldrh.w	lr, [r4, #98]	; 0x62

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	89d8      	ldrh	r0, [r3, #14]
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 800bf88:	6561      	str	r1, [r4, #84]	; 0x54
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bf8a:	4586      	cmp	lr, r0
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 800bf8c:	6829      	ldr	r1, [r5, #0]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf8e:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 800bf92:	65a1      	str	r1, [r4, #88]	; 0x58
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bf94:	bf38      	it	cc
 800bf96:	f8a4 0062 	strhcc.w	r0, [r4, #98]	; 0x62
 800bf9a:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
      if (pcb->snd_wnd == 0) {
 800bf9e:	b920      	cbnz	r0, 800bfaa <tcp_receive+0x6e>
        if (pcb->persist_backoff == 0) {
 800bfa0:	b939      	cbnz	r1, 800bfb2 <tcp_receive+0x76>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800bfa2:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
          pcb->persist_backoff = 1;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e001      	b.n	800bfae <tcp_receive+0x72>
        }
      } else if (pcb->persist_backoff > 0) {
 800bfaa:	b111      	cbz	r1, 800bfb2 <tcp_receive+0x76>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bfb2:	6829      	ldr	r1, [r5, #0]
 800bfb4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bfb6:	1a0b      	subs	r3, r1, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	dc34      	bgt.n	800c026 <tcp_receive+0xea>
      pcb->acked = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
 800bfc2:	4b84      	ldr	r3, [pc, #528]	; (800c1d4 <tcp_receive+0x298>)
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f040 81f9 	bne.w	800c3be <tcp_receive+0x482>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bfcc:	443a      	add	r2, r7
 800bfce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bfd0:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 800bfd4:	443b      	add	r3, r7
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	f040 81f1 	bne.w	800c3be <tcp_receive+0x482>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bfdc:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f2c0 81ec 	blt.w	800c3be <tcp_receive+0x482>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bfe6:	4281      	cmp	r1, r0
 800bfe8:	f040 81e9 	bne.w	800c3be <tcp_receive+0x482>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bfec:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800bff0:	1c53      	adds	r3, r2, #1
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800bff6:	bf38      	it	cc
 800bff8:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
 800bffc:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800c000:	2b03      	cmp	r3, #3
 800c002:	d90a      	bls.n	800c01a <tcp_receive+0xde>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c004:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 800c008:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c00a:	4413      	add	r3, r2
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	429a      	cmp	r2, r3
 800c010:	f080 808e 	bcs.w	800c130 <tcp_receive+0x1f4>
                  pcb->cwnd += pcb->mss;
 800c014:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800c018:	e08a      	b.n	800c130 <tcp_receive+0x1f4>
                }
              } else if (pcb->dupacks == 3) {
 800c01a:	f040 8089 	bne.w	800c130 <tcp_receive+0x1f4>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800c01e:	4620      	mov	r0, r4
 800c020:	f001 fb39 	bl	800d696 <tcp_rexmit_fast>
 800c024:	e084      	b.n	800c130 <tcp_receive+0x1f4>
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c026:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c028:	1a8a      	subs	r2, r1, r2
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	dc7a      	bgt.n	800c124 <tcp_receive+0x1e8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c02e:	7fa2      	ldrb	r2, [r4, #30]
      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;

      /* Update the send buffer space. Diff between the two can never exceed 64K
         unless window scaling is used. */
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c030:	b29b      	uxth	r3, r3

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c032:	f9b4 7040 	ldrsh.w	r7, [r4, #64]	; 0x40
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c036:	0750      	lsls	r0, r2, #29
      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;

      /* Update the send buffer space. Diff between the two can never exceed 64K
         unless window scaling is used. */
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c038:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        pcb->flags &= ~TF_INFR;
        pcb->cwnd = pcb->ssthresh;
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c03c:	f04f 0000 	mov.w	r0, #0

      pcb->snd_buf += pcb->acked;

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
      pcb->lastack = ackno;
 800c040:	64a1      	str	r1, [r4, #72]	; 0x48

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
        pcb->flags &= ~TF_INFR;
 800c042:	bf48      	it	mi
 800c044:	f022 0204 	bicmi.w	r2, r2, #4
        pcb->cwnd = pcb->ssthresh;
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c048:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
        pcb->flags &= ~TF_INFR;
 800c04c:	bf44      	itt	mi
 800c04e:	77a2      	strbmi	r2, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
 800c050:	f8b4 204e 	ldrhmi.w	r2, [r4, #78]	; 0x4e
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);

      pcb->snd_buf += pcb->acked;

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c054:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
        pcb->flags &= ~TF_INFR;
        pcb->cwnd = pcb->ssthresh;
 800c058:	bf48      	it	mi
 800c05a:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c05e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800c062:	eb02 02e7 	add.w	r2, r2, r7, asr #3
 800c066:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44

      /* Update the send buffer space. Diff between the two can never exceed 64K
         unless window scaling is used. */
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);

      pcb->snd_buf += pcb->acked;
 800c06a:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800c06e:	4413      	add	r3, r2
 800c070:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->dupacks = 0;
      pcb->lastack = ackno;

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c074:	7e23      	ldrb	r3, [r4, #24]
 800c076:	2b03      	cmp	r3, #3
 800c078:	d947      	bls.n	800c10a <tcp_receive+0x1ce>
        if (pcb->cwnd < pcb->ssthresh) {
 800c07a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 800c07e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800c082:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c084:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
            pcb->cwnd += pcb->mss;
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c086:	bf9c      	itt	ls
 800c088:	435b      	mulls	r3, r3
 800c08a:	fb93 f3f2 	sdivls	r3, r3, r2
 800c08e:	4413      	add	r3, r2
 800c090:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800c092:	429a      	cmp	r2, r3
 800c094:	d239      	bcs.n	800c10a <tcp_receive+0x1ce>
            pcb->cwnd = new_cwnd;
 800c096:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800c09a:	e036      	b.n	800c10a <tcp_receive+0x1ce>
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	6858      	ldr	r0, [r3, #4]
 800c0a0:	f7fd fbc8 	bl	8009834 <lwip_ntohl>
 800c0a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0a6:	4607      	mov	r7, r0
 800c0a8:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	8998      	ldrh	r0, [r3, #12]
 800c0b0:	f7fd fbbb 	bl	800982a <lwip_ntohs>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	f010 0003 	ands.w	r0, r0, #3
 800c0ba:	ebc3 0808 	rsb	r8, r3, r8
 800c0be:	bf18      	it	ne
 800c0c0:	2001      	movne	r0, #1
 800c0c2:	4447      	add	r7, r8
 800c0c4:	4438      	add	r0, r7
 800c0c6:	2800      	cmp	r0, #0
 800c0c8:	dc22      	bgt.n	800c110 <tcp_receive+0x1d4>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800c0ca:	6f27      	ldr	r7, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
 800c0cc:	683b      	ldr	r3, [r7, #0]

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c0ce:	6878      	ldr	r0, [r7, #4]
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
        pcb->unacked = pcb->unacked->next;
 800c0d0:	6723      	str	r3, [r4, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c0d2:	f7ff f8b3 	bl	800b23c <pbuf_clen>
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 800c0d6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c0da:	b15b      	cbz	r3, 800c0f4 <tcp_receive+0x1b8>
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	8998      	ldrh	r0, [r3, #12]
 800c0e0:	f7fd fba3 	bl	800982a <lwip_ntohs>
 800c0e4:	07c1      	lsls	r1, r0, #31
          pcb->acked--;
 800c0e6:	bf42      	ittt	mi
 800c0e8:	f8b4 3064 	ldrhmi.w	r3, [r4, #100]	; 0x64
 800c0ec:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c0f0:	f8a4 3064 	strhmi.w	r3, [r4, #100]	; 0x64
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7ff f8a1 	bl	800b23c <pbuf_clen>
 800c0fa:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800c0fe:	1a18      	subs	r0, r3, r0
 800c100:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
 800c104:	4638      	mov	r0, r7
 800c106:	f7ff fa26 	bl	800b556 <tcp_seg_free>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c10a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1c5      	bne.n	800c09c <tcp_receive+0x160>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c110:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c112:	2300      	movs	r3, #0
 800c114:	b91a      	cbnz	r2, 800c11e <tcp_receive+0x1e2>
        pcb->rtime = -1;
 800c116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c11a:	86a2      	strh	r2, [r4, #52]	; 0x34
 800c11c:	e000      	b.n	800c120 <tcp_receive+0x1e4>
      } else {
        pcb->rtime = 0;
 800c11e:	86a3      	strh	r3, [r4, #52]	; 0x34
      }

      pcb->polltmr = 0;
 800c120:	77e3      	strb	r3, [r4, #31]
 800c122:	e005      	b.n	800c130 <tcp_receive+0x1f4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 800c124:	2300      	movs	r3, #0
      tcp_send_empty_ack(pcb);
 800c126:	4620      	mov	r0, r4
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 800c128:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      tcp_send_empty_ack(pcb);
 800c12c:	f001 f8ad 	bl	800d28a <tcp_send_empty_ack>
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 800c130:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800c1cc <tcp_receive+0x290>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c134:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c136:	b91b      	cbnz	r3, 800c140 <tcp_receive+0x204>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c138:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c13a:	2800      	cmp	r0, #0
 800c13c:	d14c      	bne.n	800c1d8 <tcp_receive+0x29c>
 800c13e:	e070      	b.n	800c222 <tcp_receive+0x2e6>
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 800c140:	691b      	ldr	r3, [r3, #16]
 800c142:	682f      	ldr	r7, [r5, #0]
 800c144:	6858      	ldr	r0, [r3, #4]
 800c146:	f7fd fb75 	bl	8009834 <lwip_ntohl>
 800c14a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c14c:	4681      	mov	r9, r0
 800c14e:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 800c152:	691b      	ldr	r3, [r3, #16]
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c154:	ebca 0707 	rsb	r7, sl, r7
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 800c158:	8998      	ldrh	r0, [r3, #12]
 800c15a:	f7fd fb66 	bl	800982a <lwip_ntohs>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c15e:	f010 0003 	ands.w	r0, r0, #3
 800c162:	ebc9 0707 	rsb	r7, r9, r7
 800c166:	bf18      	it	ne
 800c168:	2001      	movne	r0, #1
 800c16a:	1a3f      	subs	r7, r7, r0
 800c16c:	2f00      	cmp	r7, #0
 800c16e:	dbe3      	blt.n	800c138 <tcp_receive+0x1fc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 800c170:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c172:	f8d8 3000 	ldr.w	r3, [r8]
 800c176:	1a9b      	subs	r3, r3, r2
 800c178:	2b00      	cmp	r3, #0
 800c17a:	dcdd      	bgt.n	800c138 <tcp_receive+0x1fc>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800c17c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	66e3      	str	r3, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c182:	b90b      	cbnz	r3, 800c188 <tcp_receive+0x24c>
        pcb->unsent_oversize = 0;
 800c184:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff f857 	bl	800b23c <pbuf_clen>
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 800c18e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c192:	b15b      	cbz	r3, 800c1ac <tcp_receive+0x270>
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	8998      	ldrh	r0, [r3, #12]
 800c198:	f7fd fb47 	bl	800982a <lwip_ntohs>
 800c19c:	07c2      	lsls	r2, r0, #31
        pcb->acked--;
 800c19e:	bf42      	ittt	mi
 800c1a0:	f8b4 3064 	ldrhmi.w	r3, [r4, #100]	; 0x64
 800c1a4:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c1a8:	f8a4 3064 	strhmi.w	r3, [r4, #100]	; 0x64
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7ff f845 	bl	800b23c <pbuf_clen>
 800c1b2:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800c1b6:	1a18      	subs	r0, r3, r0
 800c1b8:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f7ff f9ca 	bl	800b556 <tcp_seg_free>
 800c1c2:	e7b7      	b.n	800c134 <tcp_receive+0x1f8>
 800c1c4:	20042e4c 	.word	0x20042e4c
 800c1c8:	20042e3c 	.word	0x20042e3c
 800c1cc:	20042e48 	.word	0x20042e48
 800c1d0:	20042e50 	.word	0x20042e50
 800c1d4:	20042e44 	.word	0x20042e44
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c1d8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c1da:	682b      	ldr	r3, [r5, #0]
 800c1dc:	1ad2      	subs	r2, r2, r3
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	da1f      	bge.n	800c222 <tcp_receive+0x2e6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c1e2:	4b7a      	ldr	r3, [pc, #488]	; (800c3cc <tcp_receive+0x490>)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800c1e4:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	1a1b      	subs	r3, r3, r0
 800c1ec:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	b21a      	sxth	r2, r3
      pcb->sa += m;
 800c1f4:	4419      	add	r1, r3
      if (m < 0) {
 800c1f6:	2a00      	cmp	r2, #0
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
      pcb->sa += m;
 800c1f8:	b209      	sxth	r1, r1
      if (m < 0) {
        m = -m;
 800c1fa:	bfb8      	it	lt
 800c1fc:	425b      	neglt	r3, r3
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
      pcb->sa += m;
 800c1fe:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (m < 0) {
        m = -m;
 800c202:	bfb8      	it	lt
 800c204:	b21a      	sxthlt	r2, r3
      }
      m = m - (pcb->sv >> 2);
 800c206:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
      pcb->sv += m;
 800c20a:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 800c20e:	441a      	add	r2, r3
 800c210:	b293      	uxth	r3, r2
 800c212:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c216:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800c21a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	63a3      	str	r3, [r4, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c222:	4f6b      	ldr	r7, [pc, #428]	; (800c3d0 <tcp_receive+0x494>)
 800c224:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c226:	883d      	ldrh	r5, [r7, #0]
 800c228:	2d00      	cmp	r5, #0
 800c22a:	f000 80b8 	beq.w	800c39e <tcp_receive+0x462>
 800c22e:	7e23      	ldrb	r3, [r4, #24]
 800c230:	2b06      	cmp	r3, #6
 800c232:	f200 80b4 	bhi.w	800c39e <tcp_receive+0x462>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c236:	6833      	ldr	r3, [r6, #0]
 800c238:	1ad1      	subs	r1, r2, r3
 800c23a:	2901      	cmp	r1, #1
 800c23c:	d428      	bmi.n	800c290 <tcp_receive+0x354>
 800c23e:	1c50      	adds	r0, r2, #1
 800c240:	1ac0      	subs	r0, r0, r3
 800c242:	1b40      	subs	r0, r0, r5
 800c244:	2800      	cmp	r0, #0
 800c246:	dc23      	bgt.n	800c290 <tcp_receive+0x354>
         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
      p = inseg.p;
 800c248:	4d62      	ldr	r5, [pc, #392]	; (800c3d4 <tcp_receive+0x498>)

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
 800c24a:	460b      	mov	r3, r1
      p = inseg.p;
 800c24c:	6868      	ldr	r0, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 800c24e:	8942      	ldrh	r2, [r0, #10]
 800c250:	4291      	cmp	r1, r2
 800c252:	dd0f      	ble.n	800c274 <tcp_receive+0x338>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c254:	8902      	ldrh	r2, [r0, #8]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800c256:	f04f 0e00 	mov.w	lr, #0
      p = inseg.p;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c25a:	1a52      	subs	r2, r2, r1
 800c25c:	b292      	uxth	r2, r2
        while (p->len < off) {
 800c25e:	8941      	ldrh	r1, [r0, #10]
 800c260:	428b      	cmp	r3, r1
 800c262:	dd05      	ble.n	800c270 <tcp_receive+0x334>
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800c264:	8102      	strh	r2, [r0, #8]
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
          off -= p->len;
 800c266:	1a5b      	subs	r3, r3, r1
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800c268:	f8a0 e00a 	strh.w	lr, [r0, #10]
          p = p->next;
 800c26c:	6800      	ldr	r0, [r0, #0]
 800c26e:	e7f6      	b.n	800c25e <tcp_receive+0x322>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800c270:	4259      	negs	r1, r3
 800c272:	e000      	b.n	800c276 <tcp_receive+0x33a>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800c274:	4249      	negs	r1, r1
 800c276:	b209      	sxth	r1, r1
 800c278:	f7fe ff06 	bl	800b088 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c27c:	6831      	ldr	r1, [r6, #0]
 800c27e:	892b      	ldrh	r3, [r5, #8]
 800c280:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c282:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c284:	6032      	str	r2, [r6, #0]
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c286:	1a9b      	subs	r3, r3, r2
 800c288:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c28a:	692b      	ldr	r3, [r5, #16]
 800c28c:	605a      	str	r2, [r3, #4]
 800c28e:	e006      	b.n	800c29e <tcp_receive+0x362>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c290:	1a9b      	subs	r3, r3, r2
 800c292:	2b00      	cmp	r3, #0
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c294:	bfbe      	ittt	lt
 800c296:	7fa3      	ldrblt	r3, [r4, #30]
 800c298:	f043 0302 	orrlt.w	r3, r3, #2
 800c29c:	77a3      	strblt	r3, [r4, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c29e:	6831      	ldr	r1, [r6, #0]
 800c2a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c2a2:	1a8b      	subs	r3, r1, r2
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	db75      	blt.n	800c394 <tcp_receive+0x458>
 800c2a8:	1c4b      	adds	r3, r1, #1
 800c2aa:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 800c2ac:	1a9b      	subs	r3, r3, r2
 800c2ae:	1a1b      	subs	r3, r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	dc6f      	bgt.n	800c394 <tcp_receive+0x458>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c2b4:	4291      	cmp	r1, r2
 800c2b6:	d16d      	bne.n	800c394 <tcp_receive+0x458>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c2b8:	4d46      	ldr	r5, [pc, #280]	; (800c3d4 <tcp_receive+0x498>)
 800c2ba:	692b      	ldr	r3, [r5, #16]
 800c2bc:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c2c0:	8998      	ldrh	r0, [r3, #12]
 800c2c2:	f7fd fab2 	bl	800982a <lwip_ntohs>
 800c2c6:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 800c2ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c2cc:	bf18      	it	ne
 800c2ce:	2001      	movne	r0, #1
 800c2d0:	4440      	add	r0, r8
 800c2d2:	b280      	uxth	r0, r0

        if (tcplen > pcb->rcv_wnd) {
 800c2d4:	4283      	cmp	r3, r0
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c2d6:	8038      	strh	r0, [r7, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c2d8:	d236      	bcs.n	800c348 <tcp_receive+0x40c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c2da:	692b      	ldr	r3, [r5, #16]
 800c2dc:	8998      	ldrh	r0, [r3, #12]
 800c2de:	f7fd faa4 	bl	800982a <lwip_ntohs>
 800c2e2:	07c3      	lsls	r3, r0, #31
 800c2e4:	d510      	bpl.n	800c308 <tcp_receive+0x3cc>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c2e6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c2ea:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800c2f4:	f7fd fa99 	bl	800982a <lwip_ntohs>
 800c2f8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c2fc:	f7fd fa92 	bl	8009824 <lwip_htons>
 800c300:	ea40 0008 	orr.w	r0, r0, r8
 800c304:	f8a9 000c 	strh.w	r0, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c308:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800c30a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800c3d4 <tcp_receive+0x498>
 800c30e:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c310:	692b      	ldr	r3, [r5, #16]
 800c312:	8998      	ldrh	r0, [r3, #12]
 800c314:	f7fd fa89 	bl	800982a <lwip_ntohs>
 800c318:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c31a:	6868      	ldr	r0, [r5, #4]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
            inseg.len -= 1;
 800c31c:	bf42      	ittt	mi
 800c31e:	f8b8 3008 	ldrhmi.w	r3, [r8, #8]
 800c322:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c326:	f8a8 3008 	strhmi.w	r3, [r8, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c32a:	8929      	ldrh	r1, [r5, #8]
 800c32c:	f7fe ff60 	bl	800b1f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c330:	692b      	ldr	r3, [r5, #16]
 800c332:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c336:	8998      	ldrh	r0, [r3, #12]
 800c338:	f7fd fa77 	bl	800982a <lwip_ntohs>
 800c33c:	f010 0003 	ands.w	r0, r0, #3
 800c340:	bf18      	it	ne
 800c342:	2001      	movne	r0, #1
 800c344:	4440      	add	r0, r8
 800c346:	8038      	strh	r0, [r7, #0]
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c348:	8839      	ldrh	r1, [r7, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;

        tcp_update_rcv_ann_wnd(pcb);
 800c34a:	4620      	mov	r0, r4

        pcb->rcv_nxt = seqno + tcplen;

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800c34c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c34e:	6832      	ldr	r2, [r6, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800c350:	1a5b      	subs	r3, r3, r1
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c352:	440a      	add	r2, r1

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800c354:	85a3      	strh	r3, [r4, #44]	; 0x2c
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c356:	62a2      	str	r2, [r4, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;

        tcp_update_rcv_ann_wnd(pcb);
 800c358:	f7ff f8be 	bl	800b4d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c35c:	686b      	ldr	r3, [r5, #4]
 800c35e:	891a      	ldrh	r2, [r3, #8]
 800c360:	b122      	cbz	r2, 800c36c <tcp_receive+0x430>
          recv_data = inseg.p;
 800c362:	4a1d      	ldr	r2, [pc, #116]	; (800c3d8 <tcp_receive+0x49c>)
 800c364:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c366:	2200      	movs	r2, #0
 800c368:	4b1a      	ldr	r3, [pc, #104]	; (800c3d4 <tcp_receive+0x498>)
 800c36a:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c36c:	692b      	ldr	r3, [r5, #16]
 800c36e:	8998      	ldrh	r0, [r3, #12]
 800c370:	f7fd fa5b 	bl	800982a <lwip_ntohs>
 800c374:	07c1      	lsls	r1, r0, #31
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c376:	bf41      	itttt	mi
 800c378:	4a18      	ldrmi	r2, [pc, #96]	; (800c3dc <tcp_receive+0x4a0>)
 800c37a:	7813      	ldrbmi	r3, [r2, #0]
 800c37c:	f043 0320 	orrmi.w	r3, r3, #32
 800c380:	7013      	strbmi	r3, [r2, #0]
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c382:	7fa3      	ldrb	r3, [r4, #30]
 800c384:	07da      	lsls	r2, r3, #31
 800c386:	d502      	bpl.n	800c38e <tcp_receive+0x452>
 800c388:	f023 0301 	bic.w	r3, r3, #1
 800c38c:	e012      	b.n	800c3b4 <tcp_receive+0x478>
 800c38e:	f043 0301 	orr.w	r3, r3, #1
 800c392:	e011      	b.n	800c3b8 <tcp_receive+0x47c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800c394:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 800c396:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800c39a:	f000 bf76 	b.w	800d28a <tcp_send_empty_ack>
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c39e:	6833      	ldr	r3, [r6, #0]
 800c3a0:	1a99      	subs	r1, r3, r2
 800c3a2:	2900      	cmp	r1, #0
 800c3a4:	db05      	blt.n	800c3b2 <tcp_receive+0x476>
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	1a9b      	subs	r3, r3, r2
 800c3aa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c3ac:	1a9b      	subs	r3, r3, r2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dd09      	ble.n	800c3c6 <tcp_receive+0x48a>
      tcp_ack_now(pcb);
 800c3b2:	7fa3      	ldrb	r3, [r4, #30]
 800c3b4:	f043 0302 	orr.w	r3, r3, #2
 800c3b8:	77a3      	strb	r3, [r4, #30]
    }
  }
}
 800c3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800c3c4:	e6b4      	b.n	800c130 <tcp_receive+0x1f4>
 800c3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ca:	bf00      	nop
 800c3cc:	20049278 	.word	0x20049278
 800c3d0:	20042e44 	.word	0x20042e44
 800c3d4:	20042e5c 	.word	0x20042e5c
 800c3d8:	20042e54 	.word	0x20042e54
 800c3dc:	20042e4d 	.word	0x20042e4d

0800c3e0 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c3e0:	4b0b      	ldr	r3, [pc, #44]	; (800c410 <tcp_getoptbyte+0x30>)
 800c3e2:	4a0c      	ldr	r2, [pc, #48]	; (800c414 <tcp_getoptbyte+0x34>)
 800c3e4:	6819      	ldr	r1, [r3, #0]
  }
}

static u8_t
tcp_getoptbyte(void)
{
 800c3e6:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c3e8:	b121      	cbz	r1, 800c3f4 <tcp_getoptbyte+0x14>
 800c3ea:	480b      	ldr	r0, [pc, #44]	; (800c418 <tcp_getoptbyte+0x38>)
 800c3ec:	8813      	ldrh	r3, [r2, #0]
 800c3ee:	8800      	ldrh	r0, [r0, #0]
 800c3f0:	4283      	cmp	r3, r0
 800c3f2:	d207      	bcs.n	800c404 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800c3f4:	4b09      	ldr	r3, [pc, #36]	; (800c41c <tcp_getoptbyte+0x3c>)
 800c3f6:	6819      	ldr	r1, [r3, #0]
    return opts[tcp_optidx++];
 800c3f8:	8813      	ldrh	r3, [r2, #0]
 800c3fa:	1c58      	adds	r0, r3, #1
 800c3fc:	440b      	add	r3, r1
 800c3fe:	8010      	strh	r0, [r2, #0]
 800c400:	7d18      	ldrb	r0, [r3, #20]
 800c402:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c404:	1c5c      	adds	r4, r3, #1
    return tcphdr_opt2[idx];
 800c406:	1a1b      	subs	r3, r3, r0
 800c408:	b2db      	uxtb	r3, r3
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c40a:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 800c40c:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800c40e:	bd10      	pop	{r4, pc}
 800c410:	20042e40 	.word	0x20042e40
 800c414:	20042e38 	.word	0x20042e38
 800c418:	20042e58 	.word	0x20042e58
 800c41c:	20042e50 	.word	0x20042e50

0800c420 <tcp_parseopt.isra.1>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 800c420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
 800c424:	4c23      	ldr	r4, [pc, #140]	; (800c4b4 <tcp_parseopt.isra.1+0x94>)
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 800c426:	4680      	mov	r8, r0
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
 800c428:	6823      	ldr	r3, [r4, #0]
 800c42a:	8998      	ldrh	r0, [r3, #12]
 800c42c:	f7fd f9fd 	bl	800982a <lwip_ntohs>
 800c430:	f3c0 300f 	ubfx	r0, r0, #12, #16
 800c434:	2805      	cmp	r0, #5
 800c436:	d93a      	bls.n	800c4ae <tcp_parseopt.isra.1+0x8e>
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c438:	6823      	ldr	r3, [r4, #0]
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
        mss |= tcp_getoptbyte();
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c43a:	f240 59b3 	movw	r9, #1459	; 0x5b3
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c43e:	4e1e      	ldr	r6, [pc, #120]	; (800c4b8 <tcp_parseopt.isra.1+0x98>)
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
        mss |= tcp_getoptbyte();
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c440:	f240 5ab4 	movw	sl, #1460	; 0x5b4
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c444:	8998      	ldrh	r0, [r3, #12]
 800c446:	f7fd f9f0 	bl	800982a <lwip_ntohs>
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c44a:	4637      	mov	r7, r6
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c44c:	0b00      	lsrs	r0, r0, #12
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c44e:	2300      	movs	r3, #0
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c450:	1f45      	subs	r5, r0, #5
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c452:	8033      	strh	r3, [r6, #0]
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c454:	00ad      	lsls	r5, r5, #2
 800c456:	b2ad      	uxth	r5, r5
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c458:	8833      	ldrh	r3, [r6, #0]
 800c45a:	42ab      	cmp	r3, r5
 800c45c:	d227      	bcs.n	800c4ae <tcp_parseopt.isra.1+0x8e>
      u8_t opt = tcp_getoptbyte();
 800c45e:	f7ff ffbf 	bl	800c3e0 <tcp_getoptbyte>
      switch (opt) {
 800c462:	2801      	cmp	r0, #1
 800c464:	d0f8      	beq.n	800c458 <tcp_parseopt.isra.1+0x38>
 800c466:	d322      	bcc.n	800c4ae <tcp_parseopt.isra.1+0x8e>
 800c468:	2802      	cmp	r0, #2
 800c46a:	d117      	bne.n	800c49c <tcp_parseopt.isra.1+0x7c>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > max_c) {
 800c46c:	f7ff ffb8 	bl	800c3e0 <tcp_getoptbyte>
 800c470:	2804      	cmp	r0, #4
 800c472:	d11c      	bne.n	800c4ae <tcp_parseopt.isra.1+0x8e>
 800c474:	883b      	ldrh	r3, [r7, #0]
 800c476:	3301      	adds	r3, #1
 800c478:	42ab      	cmp	r3, r5
 800c47a:	da18      	bge.n	800c4ae <tcp_parseopt.isra.1+0x8e>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800c47c:	f7ff ffb0 	bl	800c3e0 <tcp_getoptbyte>
 800c480:	0200      	lsls	r0, r0, #8
 800c482:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 800c484:	f7ff ffac 	bl	800c3e0 <tcp_getoptbyte>
 800c488:	4320      	orrs	r0, r4
 800c48a:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c48c:	1e43      	subs	r3, r0, #1
 800c48e:	b29b      	uxth	r3, r3
 800c490:	454b      	cmp	r3, r9
 800c492:	bf88      	it	hi
 800c494:	4650      	movhi	r0, sl
 800c496:	f8a8 0000 	strh.w	r0, [r8]
 800c49a:	e7dd      	b.n	800c458 <tcp_parseopt.isra.1+0x38>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800c49c:	f7ff ffa0 	bl	800c3e0 <tcp_getoptbyte>
        if (data < 2) {
 800c4a0:	2801      	cmp	r0, #1
 800c4a2:	d904      	bls.n	800c4ae <tcp_parseopt.isra.1+0x8e>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800c4a4:	883b      	ldrh	r3, [r7, #0]
 800c4a6:	3b02      	subs	r3, #2
 800c4a8:	4418      	add	r0, r3
 800c4aa:	8038      	strh	r0, [r7, #0]
 800c4ac:	e7d4      	b.n	800c458 <tcp_parseopt.isra.1+0x38>
 800c4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b2:	bf00      	nop
 800c4b4:	20042e50 	.word	0x20042e50
 800c4b8:	20042e38 	.word	0x20042e38

0800c4bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c4c0:	6843      	ldr	r3, [r0, #4]
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c4c2:	b089      	sub	sp, #36	; 0x24
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c4c4:	4db5      	ldr	r5, [pc, #724]	; (800c79c <tcp_input+0x2e0>)
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c4c6:	4680      	mov	r8, r0
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c4c8:	602b      	str	r3, [r5, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < sizeof(struct tcp_hdr)) {
 800c4ca:	8943      	ldrh	r3, [r0, #10]
 800c4cc:	2b13      	cmp	r3, #19
 800c4ce:	f240 80d0 	bls.w	800c672 <tcp_input+0x1b6>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (
#if LWIP_IPV4
      (!ip_current_is_v6() && ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) ||
 800c4d2:	4eb3      	ldr	r6, [pc, #716]	; (800c7a0 <tcp_input+0x2e4>)
 800c4d4:	6831      	ldr	r1, [r6, #0]
 800c4d6:	6970      	ldr	r0, [r6, #20]
 800c4d8:	f7fe fab5 	bl	800aa46 <ip4_addr_isbroadcast_u32>
 800c4dc:	9603      	str	r6, [sp, #12]
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (
 800c4de:	4682      	mov	sl, r0
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	f040 80c6 	bne.w	800c672 <tcp_input+0x1b6>
#if LWIP_IPV4
      (!ip_current_is_v6() && ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) ||
 800c4e6:	6973      	ldr	r3, [r6, #20]
 800c4e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4ec:	2be0      	cmp	r3, #224	; 0xe0
 800c4ee:	f000 80c0 	beq.w	800c672 <tcp_input+0x1b6>
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 800c4f2:	682b      	ldr	r3, [r5, #0]
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 800c4f4:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 800c7d0 <tcp_input+0x314>
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 800c4f8:	8998      	ldrh	r0, [r3, #12]
 800c4fa:	f7fd f996 	bl	800982a <lwip_ntohs>
 800c4fe:	f3c0 300f 	ubfx	r0, r0, #12, #16
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
  tcphdr_opt2 = NULL;
  if (p->len < hdrlen * 4) {
 800c502:	f8b8 300a 	ldrh.w	r3, [r8, #10]
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 800c506:	1f44      	subs	r4, r0, #5
  tcphdr_opt2 = NULL;
 800c508:	4fa6      	ldr	r7, [pc, #664]	; (800c7a4 <tcp_input+0x2e8>)
  if (p->len < hdrlen * 4) {
 800c50a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 800c50e:	ea4f 0484 	mov.w	r4, r4, lsl #2
  tcphdr_opt2 = NULL;
 800c512:	f8c7 a000 	str.w	sl, [r7]
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 800c516:	b2a4      	uxth	r4, r4
 800c518:	f8a9 4000 	strh.w	r4, [r9]
  tcphdr_opt2 = NULL;
  if (p->len < hdrlen * 4) {
 800c51c:	da24      	bge.n	800c568 <tcp_input+0xac>
    if (p->len >= TCP_HLEN) {
 800c51e:	2b13      	cmp	r3, #19
 800c520:	f240 80a7 	bls.w	800c672 <tcp_input+0x1b6>
      /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
      u16_t optlen = tcphdr_opt1len;
      pbuf_header(p, -TCP_HLEN); /* cannot fail */
 800c524:	f06f 0113 	mvn.w	r1, #19
 800c528:	4640      	mov	r0, r8
 800c52a:	f7fe fdad 	bl	800b088 <pbuf_header>
      LWIP_ASSERT("tcphdr_opt1len >= p->len", tcphdr_opt1len >= p->len);
      LWIP_ASSERT("p->next != NULL", p->next != NULL);
      tcphdr_opt1len = p->len;
 800c52e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
      if (optlen > tcphdr_opt1len) {
 800c532:	428c      	cmp	r4, r1
      /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
      u16_t optlen = tcphdr_opt1len;
      pbuf_header(p, -TCP_HLEN); /* cannot fail */
      LWIP_ASSERT("tcphdr_opt1len >= p->len", tcphdr_opt1len >= p->len);
      LWIP_ASSERT("p->next != NULL", p->next != NULL);
      tcphdr_opt1len = p->len;
 800c534:	f8a9 1000 	strh.w	r1, [r9]
      if (optlen > tcphdr_opt1len) {
 800c538:	d91d      	bls.n	800c576 <tcp_input+0xba>
        s16_t opt2len;
        /* options continue in the next pbuf: set p to zero length and hide the
           options in the next pbuf (adjusting p->tot_len) */
        u8_t phret = pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800c53a:	4249      	negs	r1, r1
 800c53c:	4640      	mov	r0, r8
 800c53e:	b209      	sxth	r1, r1
 800c540:	f7fe fda2 	bl	800b088 <pbuf_header>
        LWIP_ASSERT("phret == 0", phret == 0);
        tcphdr_opt2 = (u8_t*)p->next->payload;
 800c544:	f8d8 0000 	ldr.w	r0, [r8]
 800c548:	6843      	ldr	r3, [r0, #4]
 800c54a:	603b      	str	r3, [r7, #0]
        opt2len = optlen - tcphdr_opt1len;
 800c54c:	f8b9 3000 	ldrh.w	r3, [r9]
 800c550:	1ae4      	subs	r4, r4, r3
 800c552:	b2a4      	uxth	r4, r4
        phret = pbuf_header(p->next, -opt2len);
 800c554:	4261      	negs	r1, r4
 800c556:	b209      	sxth	r1, r1
 800c558:	f7fe fd96 	bl	800b088 <pbuf_header>
        LWIP_ASSERT("phret == 0", phret == 0);
        /* p->next->payload now points to the TCP data */
        /* manually adjust p->tot_len to changed p->next->tot_len change */
        p->tot_len -= opt2len;
 800c55c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c560:	1b1c      	subs	r4, r3, r4
 800c562:	f8a8 4008 	strh.w	r4, [r8, #8]
 800c566:	e006      	b.n	800c576 <tcp_input+0xba>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }
  } else {
    pbuf_header(p, -(hdrlen * 4)); /* cannot fail */
 800c568:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
 800c56c:	0081      	lsls	r1, r0, #2
 800c56e:	4640      	mov	r0, r8
 800c570:	b209      	sxth	r1, r1
 800c572:	f7fe fd89 	bl	800b088 <pbuf_header>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 800c576:	682c      	ldr	r4, [r5, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 800c578:	4f8b      	ldr	r7, [pc, #556]	; (800c7a8 <tcp_input+0x2ec>)
  } else {
    pbuf_header(p, -(hdrlen * 4)); /* cannot fail */
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 800c57a:	8820      	ldrh	r0, [r4, #0]
 800c57c:	f7fd f955 	bl	800982a <lwip_ntohs>
 800c580:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
 800c582:	682c      	ldr	r4, [r5, #0]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800c584:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c7d4 <tcp_input+0x318>
    pbuf_header(p, -(hdrlen * 4)); /* cannot fail */
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
 800c588:	8860      	ldrh	r0, [r4, #2]
 800c58a:	f7fd f94e 	bl	800982a <lwip_ntohs>
 800c58e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 800c590:	682c      	ldr	r4, [r5, #0]
 800c592:	6860      	ldr	r0, [r4, #4]
 800c594:	f7fd f94e 	bl	8009834 <lwip_ntohl>
 800c598:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800c59a:	682c      	ldr	r4, [r5, #0]
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 800c59c:	6038      	str	r0, [r7, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800c59e:	68a0      	ldr	r0, [r4, #8]
 800c5a0:	f7fd f948 	bl	8009834 <lwip_ntohl>
 800c5a4:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 800c5a6:	682c      	ldr	r4, [r5, #0]

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800c5a8:	f8c9 0000 	str.w	r0, [r9]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 800c5ac:	89e0      	ldrh	r0, [r4, #14]
 800c5ae:	f7fd f93c 	bl	800982a <lwip_ntohs>

  flags = TCPH_FLAGS(tcphdr);
 800c5b2:	682b      	ldr	r3, [r5, #0]
  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);
 800c5b4:	81e0      	strh	r0, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c5b6:	8998      	ldrh	r0, [r3, #12]
 800c5b8:	f7fd f937 	bl	800982a <lwip_ntohs>
 800c5bc:	4a7b      	ldr	r2, [pc, #492]	; (800c7ac <tcp_input+0x2f0>)
 800c5be:	b2c3      	uxtb	r3, r0
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c5c0:	f8b8 a008 	ldrh.w	sl, [r8, #8]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5c4:	487a      	ldr	r0, [pc, #488]	; (800c7b0 <tcp_input+0x2f4>)
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
 800c5c6:	f003 013f 	and.w	r1, r3, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c5ca:	f013 0b03 	ands.w	fp, r3, #3

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5ce:	f8d0 e000 	ldr.w	lr, [r0]
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
 800c5d2:	7011      	strb	r1, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c5d4:	bf18      	it	ne
 800c5d6:	f04f 0b01 	movne.w	fp, #1
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5da:	9903      	ldr	r1, [sp, #12]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5dc:	4674      	mov	r4, lr
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c5de:	44d3      	add	fp, sl
 800c5e0:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800c7d8 <tcp_input+0x31c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5e4:	6909      	ldr	r1, [r1, #16]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c5e6:	fa1f fb8b 	uxth.w	fp, fp
 800c5ea:	f8cd 9010 	str.w	r9, [sp, #16]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5ee:	9107      	str	r1, [sp, #28]
 800c5f0:	4681      	mov	r9, r0
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5f2:	9903      	ldr	r1, [sp, #12]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 800c5f4:	682a      	ldr	r2, [r5, #0]
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5f6:	6949      	ldr	r1, [r1, #20]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c5f8:	f8ac b000 	strh.w	fp, [ip]
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5fc:	9105      	str	r1, [sp, #20]
  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c5fe:	2100      	movs	r1, #0
 800c600:	f8cd c018 	str.w	ip, [sp, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c604:	2c00      	cmp	r4, #0
 800c606:	d03a      	beq.n	800c67e <tcp_input+0x1c2>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 800c608:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
 800c60c:	8810      	ldrh	r0, [r2, #0]
 800c60e:	4584      	cmp	ip, r0
 800c610:	d116      	bne.n	800c640 <tcp_input+0x184>
 800c612:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 800c616:	8850      	ldrh	r0, [r2, #2]
 800c618:	4584      	cmp	ip, r0
 800c61a:	d111      	bne.n	800c640 <tcp_input+0x184>
        pcb->local_port == tcphdr->dest &&
 800c61c:	6860      	ldr	r0, [r4, #4]
 800c61e:	9e07      	ldr	r6, [sp, #28]
 800c620:	42b0      	cmp	r0, r6
 800c622:	d10d      	bne.n	800c640 <tcp_input+0x184>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c624:	6820      	ldr	r0, [r4, #0]
 800c626:	9e05      	ldr	r6, [sp, #20]
 800c628:	42b0      	cmp	r0, r6
 800c62a:	d109      	bne.n	800c640 <tcp_input+0x184>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 800c62c:	2900      	cmp	r1, #0
 800c62e:	f000 8090 	beq.w	800c752 <tcp_input+0x296>
        prev->next = pcb->next;
 800c632:	68e0      	ldr	r0, [r4, #12]
 800c634:	60c8      	str	r0, [r1, #12]
        pcb->next = tcp_active_pcbs;
        tcp_active_pcbs = pcb;
 800c636:	495e      	ldr	r1, [pc, #376]	; (800c7b0 <tcp_input+0x2f4>)
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
        prev->next = pcb->next;
        pcb->next = tcp_active_pcbs;
 800c638:	f8c4 e00c 	str.w	lr, [r4, #12]
        tcp_active_pcbs = pcb;
 800c63c:	600c      	str	r4, [r1, #0]
 800c63e:	e088      	b.n	800c752 <tcp_input+0x296>

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c640:	4621      	mov	r1, r4
 800c642:	68e4      	ldr	r4, [r4, #12]
 800c644:	e7de      	b.n	800c604 <tcp_input+0x148>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c646:	68c0      	ldr	r0, [r0, #12]
 800c648:	2800      	cmp	r0, #0
 800c64a:	d03a      	beq.n	800c6c2 <tcp_input+0x206>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 800c64c:	8b81      	ldrh	r1, [r0, #28]
 800c64e:	f8b2 e000 	ldrh.w	lr, [r2]
 800c652:	458e      	cmp	lr, r1
 800c654:	d1f7      	bne.n	800c646 <tcp_input+0x18a>
          pcb->local_port == tcphdr->dest &&
 800c656:	8b41      	ldrh	r1, [r0, #26]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 800c658:	8854      	ldrh	r4, [r2, #2]
 800c65a:	428c      	cmp	r4, r1
 800c65c:	d1f3      	bne.n	800c646 <tcp_input+0x18a>
          pcb->local_port == tcphdr->dest &&
 800c65e:	6841      	ldr	r1, [r0, #4]
 800c660:	9e07      	ldr	r6, [sp, #28]
 800c662:	428e      	cmp	r6, r1
 800c664:	d1ef      	bne.n	800c646 <tcp_input+0x18a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c666:	6801      	ldr	r1, [r0, #0]
 800c668:	9e05      	ldr	r6, [sp, #20]
 800c66a:	428e      	cmp	r6, r1
 800c66c:	d1eb      	bne.n	800c646 <tcp_input+0x18a>
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c66e:	075e      	lsls	r6, r3, #29
 800c670:	d508      	bpl.n	800c684 <tcp_input+0x1c8>
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c672:	4640      	mov	r0, r8
}
 800c674:	b009      	add	sp, #36	; 0x24
 800c676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c67a:	f7fe bd13 	b.w	800b0a4 <pbuf_free>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c67e:	494d      	ldr	r1, [pc, #308]	; (800c7b4 <tcp_input+0x2f8>)
 800c680:	6808      	ldr	r0, [r1, #0]
 800c682:	e7e1      	b.n	800c648 <tcp_input+0x18c>
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
    return ERR_OK;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c684:	079d      	lsls	r5, r3, #30
 800c686:	d50d      	bpl.n	800c6a4 <tcp_input+0x1e8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c688:	6839      	ldr	r1, [r7, #0]
 800c68a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c68c:	1acb      	subs	r3, r1, r3
 800c68e:	d40e      	bmi.n	800c6ae <tcp_input+0x1f2>
 800c690:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c692:	1a9b      	subs	r3, r3, r2
 800c694:	2b00      	cmp	r3, #0
 800c696:	dc0a      	bgt.n	800c6ae <tcp_input+0x1f2>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c698:	4b47      	ldr	r3, [pc, #284]	; (800c7b8 <tcp_input+0x2fc>)
 800c69a:	4459      	add	r1, fp
 800c69c:	e88d 4010 	stmia.w	sp, {r4, lr}
 800c6a0:	1d1a      	adds	r2, r3, #4
 800c6a2:	e040      	b.n	800c726 <tcp_input+0x26a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
      return ERR_OK;
    }
  } else if (flags & TCP_FIN) {
 800c6a4:	07dc      	lsls	r4, r3, #31
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c6a6:	bf42      	ittt	mi
 800c6a8:	4b44      	ldrmi	r3, [pc, #272]	; (800c7bc <tcp_input+0x300>)
 800c6aa:	681b      	ldrmi	r3, [r3, #0]
 800c6ac:	6243      	strmi	r3, [r0, #36]	; 0x24
  }

  if ((tcplen > 0)) {
 800c6ae:	f1bb 0f00 	cmp.w	fp, #0
 800c6b2:	d0de      	beq.n	800c672 <tcp_input+0x1b6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800c6b4:	7f83      	ldrb	r3, [r0, #30]
 800c6b6:	f043 0302 	orr.w	r3, r3, #2
 800c6ba:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
 800c6bc:	f000 fe1a 	bl	800d2f4 <tcp_output>
 800c6c0:	e7d7      	b.n	800c672 <tcp_input+0x1b6>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c6c2:	493f      	ldr	r1, [pc, #252]	; (800c7c0 <tcp_input+0x304>)
 800c6c4:	680c      	ldr	r4, [r1, #0]
 800c6c6:	46a2      	mov	sl, r4
 800c6c8:	f1ba 0f00 	cmp.w	sl, #0
 800c6cc:	d030      	beq.n	800c730 <tcp_input+0x274>
      if (lpcb->local_port == tcphdr->dest) {
 800c6ce:	f8ba 101a 	ldrh.w	r1, [sl, #26]
 800c6d2:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 800c6d6:	458e      	cmp	lr, r1
 800c6d8:	d107      	bne.n	800c6ea <tcp_input+0x22e>
          break;
#endif /* SO_REUSE */
        } else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
        if (IP_PCB_IPVER_INPUT_MATCH(lpcb)) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c6da:	f8da e000 	ldr.w	lr, [sl]
 800c6de:	9e05      	ldr	r6, [sp, #20]
 800c6e0:	4576      	cmp	r6, lr
 800c6e2:	d006      	beq.n	800c6f2 <tcp_input+0x236>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c6e4:	f1be 0f00 	cmp.w	lr, #0
 800c6e8:	d003      	beq.n	800c6f2 <tcp_input+0x236>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c6ea:	4650      	mov	r0, sl
 800c6ec:	f8da a00c 	ldr.w	sl, [sl, #12]
 800c6f0:	e7ea      	b.n	800c6c8 <tcp_input+0x20c>
#endif /* SO_REUSE */
    if (lpcb != NULL) {
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c6f2:	b138      	cbz	r0, 800c704 <tcp_input+0x248>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c6f4:	f8da 600c 	ldr.w	r6, [sl, #12]
 800c6f8:	60c6      	str	r6, [r0, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c6fa:	4831      	ldr	r0, [pc, #196]	; (800c7c0 <tcp_input+0x304>)
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c6fc:	f8ca 400c 	str.w	r4, [sl, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c700:	f8c0 a000 	str.w	sl, [r0]
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 800c704:	0758      	lsls	r0, r3, #29
 800c706:	d4b4      	bmi.n	800c672 <tcp_input+0x1b6>
    return ERR_OK;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c708:	f003 0010 	and.w	r0, r3, #16
 800c70c:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 800c710:	2800      	cmp	r0, #0
 800c712:	f000 8288 	beq.w	800cc26 <tcp_input+0x76a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c716:	8813      	ldrh	r3, [r2, #0]
 800c718:	6838      	ldr	r0, [r7, #0]
 800c71a:	e88d 000a 	stmia.w	sp, {r1, r3}
 800c71e:	4b26      	ldr	r3, [pc, #152]	; (800c7b8 <tcp_input+0x2fc>)
 800c720:	eb0b 0100 	add.w	r1, fp, r0
 800c724:	1d1a      	adds	r2, r3, #4
 800c726:	9804      	ldr	r0, [sp, #16]
 800c728:	6800      	ldr	r0, [r0, #0]
 800c72a:	f000 ff2b 	bl	800d584 <tcp_rst>
 800c72e:	e7a0      	b.n	800c672 <tcp_input+0x1b6>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c730:	8990      	ldrh	r0, [r2, #12]
 800c732:	f7fd f87a 	bl	800982a <lwip_ntohs>
 800c736:	0743      	lsls	r3, r0, #29
 800c738:	d49b      	bmi.n	800c672 <tcp_input+0x1b6>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c73a:	682b      	ldr	r3, [r5, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c73c:	9a06      	ldr	r2, [sp, #24]
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	8810      	ldrh	r0, [r2, #0]
 800c742:	881a      	ldrh	r2, [r3, #0]
 800c744:	4401      	add	r1, r0
 800c746:	9201      	str	r2, [sp, #4]
 800c748:	885b      	ldrh	r3, [r3, #2]
 800c74a:	9300      	str	r3, [sp, #0]
 800c74c:	4b1a      	ldr	r3, [pc, #104]	; (800c7b8 <tcp_input+0x2fc>)
 800c74e:	1d1a      	adds	r2, r3, #4
 800c750:	e7e9      	b.n	800c726 <tcp_input+0x26a>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c752:	481c      	ldr	r0, [pc, #112]	; (800c7c4 <tcp_input+0x308>)
 800c754:	2100      	movs	r1, #0
    inseg.len = p->tot_len;
    inseg.p = p;
    inseg.tcphdr = tcphdr;

    recv_data = NULL;
    recv_flags = 0;
 800c756:	4e1c      	ldr	r6, [pc, #112]	; (800c7c8 <tcp_input+0x30c>)

    if (flags & TCP_PSH) {
 800c758:	f013 0f08 	tst.w	r3, #8

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
    inseg.len = p->tot_len;
    inseg.p = p;
    inseg.tcphdr = tcphdr;
 800c75c:	6102      	str	r2, [r0, #16]
 800c75e:	4681      	mov	r9, r0

    recv_data = NULL;
 800c760:	4a1a      	ldr	r2, [pc, #104]	; (800c7cc <tcp_input+0x310>)
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
    inseg.len = p->tot_len;
 800c762:	f8a0 a008 	strh.w	sl, [r0, #8]
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c766:	6001      	str	r1, [r0, #0]
 800c768:	4692      	mov	sl, r2
    inseg.len = p->tot_len;
    inseg.p = p;
 800c76a:	f8c0 8004 	str.w	r8, [r0, #4]
    inseg.tcphdr = tcphdr;

    recv_data = NULL;
 800c76e:	6011      	str	r1, [r2, #0]
    recv_flags = 0;
 800c770:	7031      	strb	r1, [r6, #0]

    if (flags & TCP_PSH) {
 800c772:	d005      	beq.n	800c780 <tcp_input+0x2c4>
      p->flags |= PBUF_FLAG_PUSH;
 800c774:	f898 300d 	ldrb.w	r3, [r8, #13]
 800c778:	f043 0301 	orr.w	r3, r3, #1
 800c77c:	f888 300d 	strb.w	r3, [r8, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c780:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c782:	f8df b058 	ldr.w	fp, [pc, #88]	; 800c7dc <tcp_input+0x320>
 800c786:	bb5b      	cbnz	r3, 800c7e0 <tcp_input+0x324>
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c788:	4a08      	ldr	r2, [pc, #32]	; (800c7ac <tcp_input+0x2f0>)
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
 800c78a:	f8cb 4000 	str.w	r4, [fp]
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c78e:	7813      	ldrb	r3, [r2, #0]
 800c790:	4690      	mov	r8, r2
 800c792:	f013 0f04 	tst.w	r3, #4
 800c796:	d132      	bne.n	800c7fe <tcp_input+0x342>
 800c798:	e046      	b.n	800c828 <tcp_input+0x36c>
 800c79a:	bf00      	nop
 800c79c:	20042e50 	.word	0x20042e50
 800c7a0:	20043160 	.word	0x20043160
 800c7a4:	20042e40 	.word	0x20042e40
 800c7a8:	20042e3c 	.word	0x20042e3c
 800c7ac:	20042e4c 	.word	0x20042e4c
 800c7b0:	20049274 	.word	0x20049274
 800c7b4:	20049284 	.word	0x20049284
 800c7b8:	20043170 	.word	0x20043170
 800c7bc:	20049278 	.word	0x20049278
 800c7c0:	2004927c 	.word	0x2004927c
 800c7c4:	20042e5c 	.word	0x20042e5c
 800c7c8:	20042e4d 	.word	0x20042e4d
 800c7cc:	20042e54 	.word	0x20042e54
 800c7d0:	20042e58 	.word	0x20042e58
 800c7d4:	20042e48 	.word	0x20042e48
 800c7d8:	20042e44 	.word	0x20042e44
 800c7dc:	20049288 	.word	0x20049288
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f7ff f92b 	bl	800ba3c <tcp_process_refused_data>
 800c7e6:	300c      	adds	r0, #12
 800c7e8:	f000 820f 	beq.w	800cc0a <tcp_input+0x74e>
 800c7ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d0ca      	beq.n	800c788 <tcp_input+0x2cc>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c7f2:	4bab      	ldr	r3, [pc, #684]	; (800caa0 <tcp_input+0x5e4>)
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f040 8207 	bne.w	800cc0a <tcp_input+0x74e>
 800c7fc:	e7c4      	b.n	800c788 <tcp_input+0x2cc>
  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c7fe:	7e23      	ldrb	r3, [r4, #24]
 800c800:	2b02      	cmp	r3, #2
 800c802:	d106      	bne.n	800c812 <tcp_input+0x356>
      if (ackno == pcb->snd_nxt) {
 800c804:	4ba7      	ldr	r3, [pc, #668]	; (800caa4 <tcp_input+0x5e8>)
 800c806:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	f040 818f 	bne.w	800cb2e <tcp_input+0x672>
 800c810:	e260      	b.n	800ccd4 <tcp_input+0x818>
        acceptable = 1;
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c816:	1a9b      	subs	r3, r3, r2
 800c818:	f100 8189 	bmi.w	800cb2e <tcp_input+0x672>
 800c81c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c81e:	1a9b      	subs	r3, r3, r2
 800c820:	2b00      	cmp	r3, #0
 800c822:	f300 8184 	bgt.w	800cb2e <tcp_input+0x672>
 800c826:	e255      	b.n	800ccd4 <tcp_input+0x818>
       seqno, pcb->rcv_nxt));
      return ERR_OK;
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c828:	f013 0f02 	tst.w	r3, #2
 800c82c:	7fa3      	ldrb	r3, [r4, #30]
 800c82e:	d003      	beq.n	800c838 <tcp_input+0x37c>
 800c830:	7e22      	ldrb	r2, [r4, #24]
 800c832:	3a02      	subs	r2, #2
 800c834:	2a01      	cmp	r2, #1
 800c836:	d86b      	bhi.n	800c910 <tcp_input+0x454>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
    return ERR_OK;
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c838:	06d8      	lsls	r0, r3, #27
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  }
  pcb->keep_cnt_sent = 0;

  tcp_parseopt(pcb);
 800c83a:	f104 0036 	add.w	r0, r4, #54	; 0x36
    return ERR_OK;
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c83e:	bf5e      	ittt	pl
 800c840:	4b99      	ldrpl	r3, [pc, #612]	; (800caa8 <tcp_input+0x5ec>)
 800c842:	681b      	ldrpl	r3, [r3, #0]
 800c844:	6263      	strpl	r3, [r4, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92

  tcp_parseopt(pcb);
 800c84c:	f7ff fde8 	bl	800c420 <tcp_parseopt.isra.1>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c850:	7e23      	ldrb	r3, [r4, #24]
 800c852:	3b02      	subs	r3, #2
 800c854:	2b07      	cmp	r3, #7
 800c856:	f200 816a 	bhi.w	800cb2e <tcp_input+0x672>
 800c85a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c85e:	0008      	.short	0x0008
 800c860:	00cb0077 	.word	0x00cb0077
 800c864:	010800d8 	.word	0x010800d8
 800c868:	012d00cb 	.word	0x012d00cb
 800c86c:	0158      	.short	0x0158
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c86e:	f898 3000 	ldrb.w	r3, [r8]
 800c872:	f003 0312 	and.w	r3, r3, #18
 800c876:	2b12      	cmp	r3, #18
 800c878:	d155      	bne.n	800c926 <tcp_input+0x46a>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 800c87a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	6858      	ldr	r0, [r3, #4]
 800c880:	f7fc ffd8 	bl	8009834 <lwip_ntohl>
 800c884:	4b87      	ldr	r3, [pc, #540]	; (800caa4 <tcp_input+0x5e8>)
 800c886:	3001      	adds	r0, #1
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4298      	cmp	r0, r3
 800c88c:	d14b      	bne.n	800c926 <tcp_input+0x46a>
      pcb->snd_buf++;
 800c88e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
 800c892:	64a0      	str	r0, [r4, #72]	; 0x48
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
 800c894:	3301      	adds	r3, #1
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 800c896:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
 800c898:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	1c5a      	adds	r2, r3, #1
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c8a0:	3b01      	subs	r3, #1
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
 800c8a2:	62a2      	str	r2, [r4, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c8a4:	6322      	str	r2, [r4, #48]	; 0x30
      pcb->lastack = ackno;
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c8a6:	682a      	ldr	r2, [r5, #0]
 800c8a8:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c8aa:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->state = ESTABLISHED;
 800c8ac:	2304      	movs	r3, #4
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c8ae:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 800c8b2:	18e1      	adds	r1, r4, r3
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
      pcb->snd_wnd_max = pcb->snd_wnd;
 800c8b4:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;
 800c8b8:	7623      	strb	r3, [r4, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 800c8ba:	f7ff fa9a 	bl	800bdf2 <tcp_eff_send_mss_impl>
        PCB_ISIPV6(pcb));
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing 'mss' and 'snd_wnd' */
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 800c8be:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c8c2:	f241 121c 	movw	r2, #4380	; 0x111c
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 800c8c6:	86e0      	strh	r0, [r4, #54]	; 0x36
        PCB_ISIPV6(pcb));
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing 'mss' and 'snd_wnd' */
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 800c8c8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c8cc:	0043      	lsls	r3, r0, #1
 800c8ce:	0080      	lsls	r0, r0, #2
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	bf38      	it	cc
 800c8d4:	4613      	movcc	r3, r2
 800c8d6:	4298      	cmp	r0, r3
 800c8d8:	bf28      	it	cs
 800c8da:	4618      	movcs	r0, r3
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 800c8dc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing 'mss' and 'snd_wnd' */
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c8e0:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 800c8e4:	3b01      	subs	r3, #1
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800c8e6:	6f20      	ldr	r0, [r4, #112]	; 0x70
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 800c8e8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
      pcb->unacked = rseg->next;
 800c8ec:	6803      	ldr	r3, [r0, #0]
 800c8ee:	6723      	str	r3, [r4, #112]	; 0x70
      tcp_seg_free(rseg);
 800c8f0:	f7fe fe31 	bl	800b556 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c8f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c8f6:	b91b      	cbnz	r3, 800c900 <tcp_input+0x444>
        pcb->rtime = -1;
 800c8f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8fc:	86a3      	strh	r3, [r4, #52]	; 0x34
 800c8fe:	e003      	b.n	800c908 <tcp_input+0x44c>
      } else {
        pcb->rtime = 0;
 800c900:	2300      	movs	r3, #0
 800c902:	86a3      	strh	r3, [r4, #52]	; 0x34
        pcb->nrtx = 0;
 800c904:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c908:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c90c:	b923      	cbnz	r3, 800c918 <tcp_input+0x45c>
      if (err == ERR_ABRT) {
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
 800c90e:	7fa3      	ldrb	r3, [r4, #30]
 800c910:	f043 0302 	orr.w	r3, r3, #2
 800c914:	77a3      	strb	r3, [r4, #30]
 800c916:	e10a      	b.n	800cb2e <tcp_input+0x672>
        pcb->nrtx = 0;
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c918:	2200      	movs	r2, #0
 800c91a:	4621      	mov	r1, r4
 800c91c:	6920      	ldr	r0, [r4, #16]
 800c91e:	4798      	blx	r3
      if (err == ERR_ABRT) {
 800c920:	300c      	adds	r0, #12
 800c922:	d1f4      	bne.n	800c90e <tcp_input+0x452>
 800c924:	e171      	b.n	800cc0a <tcp_input+0x74e>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
 800c926:	f898 3000 	ldrb.w	r3, [r8]
 800c92a:	06d9      	lsls	r1, r3, #27
 800c92c:	f140 80ff 	bpl.w	800cb2e <tcp_input+0x672>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c930:	682b      	ldr	r3, [r5, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c932:	9a06      	ldr	r2, [sp, #24]
 800c934:	6839      	ldr	r1, [r7, #0]
 800c936:	8810      	ldrh	r0, [r2, #0]
 800c938:	881a      	ldrh	r2, [r3, #0]
 800c93a:	4401      	add	r1, r0
 800c93c:	9804      	ldr	r0, [sp, #16]
 800c93e:	9201      	str	r2, [sp, #4]
 800c940:	885b      	ldrh	r3, [r3, #2]
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	4b59      	ldr	r3, [pc, #356]	; (800caac <tcp_input+0x5f0>)
 800c946:	6800      	ldr	r0, [r0, #0]
 800c948:	1d1a      	adds	r2, r3, #4
 800c94a:	e042      	b.n	800c9d2 <tcp_input+0x516>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800c94c:	f898 3000 	ldrb.w	r3, [r8]
 800c950:	06da      	lsls	r2, r3, #27
 800c952:	d541      	bpl.n	800c9d8 <tcp_input+0x51c>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c954:	4b53      	ldr	r3, [pc, #332]	; (800caa4 <tcp_input+0x5e8>)
 800c956:	6818      	ldr	r0, [r3, #0]
 800c958:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c95a:	43db      	mvns	r3, r3
 800c95c:	42c3      	cmn	r3, r0
 800c95e:	d42d      	bmi.n	800c9bc <tcp_input+0x500>
 800c960:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c962:	1ac3      	subs	r3, r0, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	dc29      	bgt.n	800c9bc <tcp_input+0x500>
        pcb->state = ESTABLISHED;
 800c968:	2304      	movs	r3, #4
 800c96a:	7623      	strb	r3, [r4, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 800c96c:	6963      	ldr	r3, [r4, #20]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 8115 	beq.w	800cb9e <tcp_input+0x6e2>
 800c974:	2200      	movs	r2, #0
 800c976:	4621      	mov	r1, r4
 800c978:	6920      	ldr	r0, [r4, #16]
 800c97a:	4798      	blx	r3
        if (err != ERR_OK) {
 800c97c:	b118      	cbz	r0, 800c986 <tcp_input+0x4ca>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800c97e:	300c      	adds	r0, #12
 800c980:	f000 8143 	beq.w	800cc0a <tcp_input+0x74e>
 800c984:	e10b      	b.n	800cb9e <tcp_input+0x6e2>
          }
          return ERR_ABRT;
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800c986:	4620      	mov	r0, r4
 800c988:	f7ff fad8 	bl	800bf3c <tcp_receive>

        /* passive open: update initial ssthresh now that the correct window is
           known: if the remote side supports window scaling, the window sent
           with the initial SYN can be smaller than the one used later */
        pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 800c98c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800c990:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
 800c994:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c998:	b113      	cbz	r3, 800c9a0 <tcp_input+0x4e4>
          pcb->acked--;
 800c99a:	3b01      	subs	r3, #1
 800c99c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c9a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c9a2:	f241 111c 	movw	r1, #4380	; 0x111c
 800c9a6:	005a      	lsls	r2, r3, #1
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	428a      	cmp	r2, r1
 800c9ac:	bf38      	it	cc
 800c9ae:	460a      	movcc	r2, r1
 800c9b0:	4293      	cmp	r3, r2
 800c9b2:	bf28      	it	cs
 800c9b4:	4613      	movcs	r3, r2
 800c9b6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800c9ba:	e01e      	b.n	800c9fa <tcp_input+0x53e>
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9bc:	682b      	ldr	r3, [r5, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9be:	9a06      	ldr	r2, [sp, #24]
 800c9c0:	6839      	ldr	r1, [r7, #0]
 800c9c2:	8815      	ldrh	r5, [r2, #0]
 800c9c4:	881a      	ldrh	r2, [r3, #0]
 800c9c6:	4429      	add	r1, r5
 800c9c8:	9201      	str	r2, [sp, #4]
 800c9ca:	885b      	ldrh	r3, [r3, #2]
 800c9cc:	9300      	str	r3, [sp, #0]
 800c9ce:	4b37      	ldr	r3, [pc, #220]	; (800caac <tcp_input+0x5f0>)
 800c9d0:	1d1a      	adds	r2, r3, #4
 800c9d2:	f000 fdd7 	bl	800d584 <tcp_rst>
 800c9d6:	e0aa      	b.n	800cb2e <tcp_input+0x672>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c9d8:	079d      	lsls	r5, r3, #30
 800c9da:	f140 80a8 	bpl.w	800cb2e <tcp_input+0x672>
 800c9de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c9e0:	4a33      	ldr	r2, [pc, #204]	; (800cab0 <tcp_input+0x5f4>)
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	6812      	ldr	r2, [r2, #0]
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	f040 80a1 	bne.w	800cb2e <tcp_input+0x672>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f000 fe2a 	bl	800d646 <tcp_rexmit>
 800c9f2:	e09c      	b.n	800cb2e <tcp_input+0x672>
    }
    break;
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f7ff faa1 	bl	800bf3c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c9fa:	7833      	ldrb	r3, [r6, #0]
 800c9fc:	0698      	lsls	r0, r3, #26
 800c9fe:	f140 8096 	bpl.w	800cb2e <tcp_input+0x672>
      tcp_ack_now(pcb);
 800ca02:	7fa3      	ldrb	r3, [r4, #30]
 800ca04:	f043 0302 	orr.w	r3, r3, #2
 800ca08:	77a3      	strb	r3, [r4, #30]
      pcb->state = CLOSE_WAIT;
 800ca0a:	2307      	movs	r3, #7
 800ca0c:	e024      	b.n	800ca58 <tcp_input+0x59c>
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f7ff fa94 	bl	800bf3c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ca14:	7833      	ldrb	r3, [r6, #0]
 800ca16:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800ca1a:	f898 3000 	ldrb.w	r3, [r8]
      pcb->state = CLOSE_WAIT;
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) {
 800ca1e:	d01d      	beq.n	800ca5c <tcp_input+0x5a0>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800ca20:	f013 0f10 	tst.w	r3, #16
 800ca24:	7fa3      	ldrb	r3, [r4, #30]
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ca26:	f043 0302 	orr.w	r3, r3, #2
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) {
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800ca2a:	d013      	beq.n	800ca54 <tcp_input+0x598>
 800ca2c:	4a1d      	ldr	r2, [pc, #116]	; (800caa4 <tcp_input+0x5e8>)
 800ca2e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ca30:	6812      	ldr	r2, [r2, #0]
 800ca32:	4291      	cmp	r1, r2
 800ca34:	d10e      	bne.n	800ca54 <tcp_input+0x598>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ca36:	77a3      	strb	r3, [r4, #30]
        tcp_pcb_purge(pcb);
 800ca38:	4620      	mov	r0, r4
 800ca3a:	f7fe fdb2 	bl	800b5a2 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ca3e:	4a1d      	ldr	r2, [pc, #116]	; (800cab4 <tcp_input+0x5f8>)
 800ca40:	6813      	ldr	r3, [r2, #0]
 800ca42:	429c      	cmp	r4, r3
 800ca44:	d04b      	beq.n	800cade <tcp_input+0x622>
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d055      	beq.n	800caf6 <tcp_input+0x63a>
 800ca4a:	68da      	ldr	r2, [r3, #12]
 800ca4c:	4294      	cmp	r4, r2
 800ca4e:	d049      	beq.n	800cae4 <tcp_input+0x628>
 800ca50:	4613      	mov	r3, r2
 800ca52:	e7f8      	b.n	800ca46 <tcp_input+0x58a>
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
 800ca54:	77a3      	strb	r3, [r4, #30]
        pcb->state = CLOSING;
 800ca56:	2308      	movs	r3, #8
 800ca58:	7623      	strb	r3, [r4, #24]
 800ca5a:	e068      	b.n	800cb2e <tcp_input+0x672>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800ca5c:	06d9      	lsls	r1, r3, #27
 800ca5e:	d566      	bpl.n	800cb2e <tcp_input+0x672>
 800ca60:	4b10      	ldr	r3, [pc, #64]	; (800caa4 <tcp_input+0x5e8>)
 800ca62:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d161      	bne.n	800cb2e <tcp_input+0x672>
      pcb->state = FIN_WAIT_2;
 800ca6a:	2306      	movs	r3, #6
 800ca6c:	e7f4      	b.n	800ca58 <tcp_input+0x59c>
    }
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f7ff fa64 	bl	800bf3c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ca74:	7833      	ldrb	r3, [r6, #0]
 800ca76:	069a      	lsls	r2, r3, #26
 800ca78:	d559      	bpl.n	800cb2e <tcp_input+0x672>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800ca7a:	7fa3      	ldrb	r3, [r4, #30]
      tcp_pcb_purge(pcb);
 800ca7c:	4620      	mov	r0, r4
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) {
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800ca7e:	f043 0302 	orr.w	r3, r3, #2
 800ca82:	77a3      	strb	r3, [r4, #30]
      tcp_pcb_purge(pcb);
 800ca84:	f7fe fd8d 	bl	800b5a2 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ca88:	4a0a      	ldr	r2, [pc, #40]	; (800cab4 <tcp_input+0x5f8>)
 800ca8a:	6813      	ldr	r3, [r2, #0]
 800ca8c:	429c      	cmp	r4, r3
 800ca8e:	d026      	beq.n	800cade <tcp_input+0x622>
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d030      	beq.n	800caf6 <tcp_input+0x63a>
 800ca94:	68da      	ldr	r2, [r3, #12]
 800ca96:	4294      	cmp	r4, r2
 800ca98:	d024      	beq.n	800cae4 <tcp_input+0x628>
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	e7f8      	b.n	800ca90 <tcp_input+0x5d4>
 800ca9e:	bf00      	nop
 800caa0:	20042e44 	.word	0x20042e44
 800caa4:	20042e48 	.word	0x20042e48
 800caa8:	20049278 	.word	0x20049278
 800caac:	20043170 	.word	0x20043170
 800cab0:	20042e3c 	.word	0x20042e3c
 800cab4:	20049274 	.word	0x20049274
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
  case CLOSING:
    tcp_receive(pcb);
 800cab8:	4620      	mov	r0, r4
 800caba:	f7ff fa3f 	bl	800bf3c <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 800cabe:	f898 3000 	ldrb.w	r3, [r8]
 800cac2:	06db      	lsls	r3, r3, #27
 800cac4:	d533      	bpl.n	800cb2e <tcp_input+0x672>
 800cac6:	4b89      	ldr	r3, [pc, #548]	; (800ccec <tcp_input+0x830>)
 800cac8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d12e      	bne.n	800cb2e <tcp_input+0x672>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800cad0:	4620      	mov	r0, r4
 800cad2:	f7fe fd66 	bl	800b5a2 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cad6:	4a86      	ldr	r2, [pc, #536]	; (800ccf0 <tcp_input+0x834>)
 800cad8:	6813      	ldr	r3, [r2, #0]
 800cada:	429c      	cmp	r4, r3
 800cadc:	d109      	bne.n	800caf2 <tcp_input+0x636>
 800cade:	68e3      	ldr	r3, [r4, #12]
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	e008      	b.n	800caf6 <tcp_input+0x63a>
 800cae4:	68e2      	ldr	r2, [r4, #12]
 800cae6:	60da      	str	r2, [r3, #12]
 800cae8:	e005      	b.n	800caf6 <tcp_input+0x63a>
 800caea:	68da      	ldr	r2, [r3, #12]
 800caec:	4294      	cmp	r4, r2
 800caee:	d0f9      	beq.n	800cae4 <tcp_input+0x628>
 800caf0:	4613      	mov	r3, r2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1f9      	bne.n	800caea <tcp_input+0x62e>
 800caf6:	2201      	movs	r2, #1
 800caf8:	4b7e      	ldr	r3, [pc, #504]	; (800ccf4 <tcp_input+0x838>)
 800cafa:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800cafc:	230a      	movs	r3, #10
 800cafe:	7623      	strb	r3, [r4, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800cb00:	4b7d      	ldr	r3, [pc, #500]	; (800ccf8 <tcp_input+0x83c>)
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	601c      	str	r4, [r3, #0]
 800cb06:	60e2      	str	r2, [r4, #12]
 800cb08:	f7fd ffe6 	bl	800aad8 <tcp_timer_needed>
 800cb0c:	e00f      	b.n	800cb2e <tcp_input+0x672>
    }
    break;
  case LAST_ACK:
    tcp_receive(pcb);
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f7ff fa14 	bl	800bf3c <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 800cb14:	f898 3000 	ldrb.w	r3, [r8]
 800cb18:	06df      	lsls	r7, r3, #27
 800cb1a:	d508      	bpl.n	800cb2e <tcp_input+0x672>
 800cb1c:	4b73      	ldr	r3, [pc, #460]	; (800ccec <tcp_input+0x830>)
 800cb1e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	429a      	cmp	r2, r3
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800cb24:	bf02      	ittt	eq
 800cb26:	7833      	ldrbeq	r3, [r6, #0]
 800cb28:	f043 0310 	orreq.w	r3, r3, #16
 800cb2c:	7033      	strbeq	r3, [r6, #0]
    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
      if (recv_flags & TF_RESET) {
 800cb2e:	7833      	ldrb	r3, [r6, #0]
 800cb30:	071d      	lsls	r5, r3, #28
 800cb32:	d505      	bpl.n	800cb40 <tcp_input+0x684>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 800cb34:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800cb38:	b1e3      	cbz	r3, 800cb74 <tcp_input+0x6b8>
 800cb3a:	f06f 010c 	mvn.w	r1, #12
 800cb3e:	e017      	b.n	800cb70 <tcp_input+0x6b4>
      } else {
        err = ERR_OK;
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
 800cb40:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800cb44:	b91a      	cbnz	r2, 800cb4e <tcp_input+0x692>
            if (err == ERR_ABRT) {
              goto aborted;
            }
          }
        }
        if (recv_flags & TF_CLOSED) {
 800cb46:	7833      	ldrb	r3, [r6, #0]
 800cb48:	06d8      	lsls	r0, r3, #27
 800cb4a:	d409      	bmi.n	800cb60 <tcp_input+0x6a4>
 800cb4c:	e01b      	b.n	800cb86 <tcp_input+0x6ca>
            pcb_acked -= acked;
#else
          {
            acked = pcb->acked;
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked, err);
 800cb4e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d0f8      	beq.n	800cb46 <tcp_input+0x68a>
 800cb54:	4621      	mov	r1, r4
 800cb56:	6920      	ldr	r0, [r4, #16]
 800cb58:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800cb5a:	300c      	adds	r0, #12
 800cb5c:	d1f3      	bne.n	800cb46 <tcp_input+0x68a>
 800cb5e:	e054      	b.n	800cc0a <tcp_input+0x74e>
          }
        }
        if (recv_flags & TF_CLOSED) {
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
 800cb60:	7fa3      	ldrb	r3, [r4, #30]
 800cb62:	06d9      	lsls	r1, r3, #27
 800cb64:	d406      	bmi.n	800cb74 <tcp_input+0x6b8>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cb66:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800cb6a:	b11b      	cbz	r3, 800cb74 <tcp_input+0x6b8>
 800cb6c:	f06f 010d 	mvn.w	r1, #13
 800cb70:	6920      	ldr	r0, [r4, #16]
 800cb72:	4798      	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cb74:	4621      	mov	r1, r4
 800cb76:	485e      	ldr	r0, [pc, #376]	; (800ccf0 <tcp_input+0x834>)
 800cb78:	f7fe fe88 	bl	800b88c <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	2001      	movs	r0, #1
 800cb80:	f7fe f9d6 	bl	800af30 <memp_free>
          goto aborted;
 800cb84:	e041      	b.n	800cc0a <tcp_input+0x74e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cb86:	f8da 2000 	ldr.w	r2, [sl]
 800cb8a:	b1f2      	cbz	r2, 800cbca <tcp_input+0x70e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 800cb8c:	7fa1      	ldrb	r1, [r4, #30]
 800cb8e:	f001 0110 	and.w	r1, r1, #16
 800cb92:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 800cb96:	b131      	cbz	r1, 800cba6 <tcp_input+0x6ea>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cb98:	4610      	mov	r0, r2
 800cb9a:	f7fe fa83 	bl	800b0a4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff f84e 	bl	800bc40 <tcp_abort>
            goto aborted;
 800cba4:	e031      	b.n	800cc0a <tcp_input+0x74e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cba6:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800cba8:	b11d      	cbz	r5, 800cbb2 <tcp_input+0x6f6>
 800cbaa:	4621      	mov	r1, r4
 800cbac:	6920      	ldr	r0, [r4, #16]
 800cbae:	47a8      	blx	r5
 800cbb0:	e004      	b.n	800cbbc <tcp_input+0x700>
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f7fe ff2e 	bl	800ba18 <tcp_recv_null>
          if (err == ERR_ABRT) {
 800cbbc:	f110 0f0c 	cmn.w	r0, #12
 800cbc0:	d023      	beq.n	800cc0a <tcp_input+0x74e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cbc2:	b110      	cbz	r0, 800cbca <tcp_input+0x70e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cbc4:	f8da 3000 	ldr.w	r3, [sl]
 800cbc8:	6763      	str	r3, [r4, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cbca:	7833      	ldrb	r3, [r6, #0]
 800cbcc:	069a      	lsls	r2, r3, #26
 800cbce:	d516      	bpl.n	800cbfe <tcp_input+0x742>
          if (pcb->refused_data != NULL) {
 800cbd0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cbd2:	b123      	cbz	r3, 800cbde <tcp_input+0x722>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cbd4:	7b5a      	ldrb	r2, [r3, #13]
 800cbd6:	f042 0220 	orr.w	r2, r2, #32
 800cbda:	735a      	strb	r2, [r3, #13]
 800cbdc:	e00f      	b.n	800cbfe <tcp_input+0x742>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cbde:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800cbe0:	f640 3268 	movw	r2, #2920	; 0xb68
              pcb->rcv_wnd++;
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cbe4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cbe6:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800cbe8:	bf1c      	itt	ne
 800cbea:	3301      	addne	r3, #1
 800cbec:	85a3      	strhne	r3, [r4, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cbee:	b135      	cbz	r5, 800cbfe <tcp_input+0x742>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	6920      	ldr	r0, [r4, #16]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800cbfa:	300c      	adds	r0, #12
 800cbfc:	d005      	beq.n	800cc0a <tcp_input+0x74e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cbfe:	2300      	movs	r3, #0
        /* Try to send something out. */
        tcp_output(pcb);
 800cc00:	4620      	mov	r0, r4
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cc02:	f8cb 3000 	str.w	r3, [fp]
        /* Try to send something out. */
        tcp_output(pcb);
 800cc06:	f000 fb75 	bl	800d2f4 <tcp_output>
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800cc0a:	2400      	movs	r4, #0
    recv_data = NULL;

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800cc0c:	f8d9 0004 	ldr.w	r0, [r9, #4]
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800cc10:	f8cb 4000 	str.w	r4, [fp]
    recv_data = NULL;
 800cc14:	f8ca 4000 	str.w	r4, [sl]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d063      	beq.n	800cce4 <tcp_input+0x828>
    {
      pbuf_free(inseg.p);
 800cc1c:	f7fe fa42 	bl	800b0a4 <pbuf_free>
      inseg.p = NULL;
 800cc20:	4b36      	ldr	r3, [pc, #216]	; (800ccfc <tcp_input+0x840>)
 800cc22:	605c      	str	r4, [r3, #4]
 800cc24:	e05e      	b.n	800cce4 <tcp_input+0x828>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
 800cc26:	079e      	lsls	r6, r3, #30
 800cc28:	f57f ad23 	bpl.w	800c672 <tcp_input+0x1b6>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 800cc2c:	f89a 0019 	ldrb.w	r0, [sl, #25]
 800cc30:	f7ff f848 	bl	800bcc4 <tcp_alloc>
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 800cc34:	4683      	mov	fp, r0
 800cc36:	2800      	cmp	r0, #0
 800cc38:	f43f ad1b 	beq.w	800c672 <tcp_input+0x1b6>
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
#if LWIP_IPV4 && LWIP_IPV6
    PCB_ISIPV6(npcb) = ip_current_is_v6();
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cc3c:	9b03      	ldr	r3, [sp, #12]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
    npcb->local_port = pcb->local_port;
    npcb->remote_port = tcphdr->src;
 800cc3e:	682a      	ldr	r2, [r5, #0]
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
#if LWIP_IPV4 && LWIP_IPV6
    PCB_ISIPV6(npcb) = ip_current_is_v6();
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800cc4a:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 800cc4e:	8343      	strh	r3, [r0, #26]
    npcb->remote_port = tcphdr->src;
 800cc50:	7813      	ldrb	r3, [r2, #0]
 800cc52:	7852      	ldrb	r2, [r2, #1]
 800cc54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc58:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
 800cc5a:	2303      	movs	r3, #3
 800cc5c:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	1c5a      	adds	r2, r3, #1
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cc62:	3b01      	subs	r3, #1
 800cc64:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cc66:	f8da 3010 	ldr.w	r3, [sl, #16]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
    npcb->local_port = pcb->local_port;
    npcb->remote_port = tcphdr->src;
    npcb->state = SYN_RCVD;
    npcb->rcv_nxt = seqno + 1;
 800cc6a:	6282      	str	r2, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
    npcb->callback_arg = pcb->callback_arg;
 800cc6c:	6103      	str	r3, [r0, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 800cc6e:	f8da 3014 	ldr.w	r3, [sl, #20]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
    npcb->local_port = pcb->local_port;
    npcb->remote_port = tcphdr->src;
    npcb->state = SYN_RCVD;
    npcb->rcv_nxt = seqno + 1;
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cc72:	6302      	str	r2, [r0, #48]	; 0x30
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
    npcb->callback_arg = pcb->callback_arg;
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 800cc74:	6143      	str	r3, [r0, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cc76:	f89a 3008 	ldrb.w	r3, [sl, #8]
 800cc7a:	f003 030c 	and.w	r3, r3, #12
 800cc7e:	7203      	strb	r3, [r0, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 800cc80:	f8d9 3000 	ldr.w	r3, [r9]
 800cc84:	f8c9 0000 	str.w	r0, [r9]
 800cc88:	60c3      	str	r3, [r0, #12]
 800cc8a:	f7fd ff25 	bl	800aad8 <tcp_timer_needed>
 800cc8e:	2201      	movs	r2, #1
 800cc90:	4b18      	ldr	r3, [pc, #96]	; (800ccf4 <tcp_input+0x838>)

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 800cc92:	f10b 0036 	add.w	r0, fp, #54	; 0x36
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 800cc96:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 800cc98:	f7ff fbc2 	bl	800c420 <tcp_parseopt.isra.1>
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 800cc9c:	682b      	ldr	r3, [r5, #0]
    npcb->snd_wnd_max = npcb->snd_wnd;
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);

#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip,
 800cc9e:	f10b 0104 	add.w	r1, fp, #4
 800cca2:	f8bb 0036 	ldrh.w	r0, [fp, #54]	; 0x36
       for it. */
    TCP_REG_ACTIVE(npcb);

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 800cca6:	89db      	ldrh	r3, [r3, #14]
 800cca8:	f8ab 3060 	strh.w	r3, [fp, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ccac:	f8ab 3062 	strh.w	r3, [fp, #98]	; 0x62
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);
 800ccb0:	f8ab 304e 	strh.w	r3, [fp, #78]	; 0x4e

#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip,
 800ccb4:	f7ff f89d 	bl	800bdf2 <tcp_eff_send_mss_impl>
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    MIB2_STATS_INC(mib2.tcppassiveopens);

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ccb8:	2112      	movs	r1, #18
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
    npcb->snd_wnd_max = npcb->snd_wnd;
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);

#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip,
 800ccba:	f8ab 0036 	strh.w	r0, [fp, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    MIB2_STATS_INC(mib2.tcppassiveopens);

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ccbe:	4658      	mov	r0, fp
 800ccc0:	f000 fa6f 	bl	800d1a2 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800ccc4:	b120      	cbz	r0, 800ccd0 <tcp_input+0x814>
      tcp_abandon(npcb, 0);
 800ccc6:	4621      	mov	r1, r4
 800ccc8:	4658      	mov	r0, fp
 800ccca:	f7fe ff59 	bl	800bb80 <tcp_abandon>
 800ccce:	e4d0      	b.n	800c672 <tcp_input+0x1b6>
      return rc;
    }
    return tcp_output(npcb);
 800ccd0:	4658      	mov	r0, fp
 800ccd2:	e4f3      	b.n	800c6bc <tcp_input+0x200>
    }

    if (acceptable) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 800ccd4:	7833      	ldrb	r3, [r6, #0]
 800ccd6:	f043 0308 	orr.w	r3, r3, #8
 800ccda:	7033      	strb	r3, [r6, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800ccdc:	7fa3      	ldrb	r3, [r4, #30]
 800ccde:	f023 0301 	bic.w	r3, r3, #1
 800cce2:	e617      	b.n	800c914 <tcp_input+0x458>
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
}
 800cce4:	b009      	add	sp, #36	; 0x24
 800cce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccea:	bf00      	nop
 800ccec:	20042e48 	.word	0x20042e48
 800ccf0:	20049274 	.word	0x20049274
 800ccf4:	20049270 	.word	0x20049270
 800ccf8:	20049284 	.word	0x20049284
 800ccfc:	20042e5c 	.word	0x20042e5c

0800cd00 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800cd00:	4a02      	ldr	r2, [pc, #8]	; (800cd0c <tcp_trigger_input_pcb_close+0xc>)
 800cd02:	7813      	ldrb	r3, [r2, #0]
 800cd04:	f043 0310 	orr.w	r3, r3, #16
 800cd08:	7013      	strb	r3, [r2, #0]
 800cd0a:	4770      	bx	lr
 800cd0c:	20042e4d 	.word	0x20042e4d

0800cd10 <tcp_pbuf_prealloc>:
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800cd10:	4291      	cmp	r1, r2
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800cd12:	b538      	push	{r3, r4, r5, lr}
 800cd14:	461d      	mov	r5, r3
 800cd16:	460c      	mov	r4, r1
 800cd18:	9b04      	ldr	r3, [sp, #16]
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800cd1a:	d216      	bcs.n	800cd4a <tcp_pbuf_prealloc+0x3a>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cd1c:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800cd20:	0789      	lsls	r1, r1, #30
 800cd22:	d409      	bmi.n	800cd38 <tcp_pbuf_prealloc+0x28>
 800cd24:	7f99      	ldrb	r1, [r3, #30]
 800cd26:	0649      	lsls	r1, r1, #25
 800cd28:	d40f      	bmi.n	800cd4a <tcp_pbuf_prealloc+0x3a>
        (!(pcb->flags & TF_NODELAY) &&
 800cd2a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800cd2e:	b119      	cbz	r1, 800cd38 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 800cd30:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800cd32:	b909      	cbnz	r1, 800cd38 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 800cd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd36:	b143      	cbz	r3, 800cd4a <tcp_pbuf_prealloc+0x3a>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800cd38:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
 800cd3c:	f021 0103 	bic.w	r1, r1, #3
 800cd40:	428a      	cmp	r2, r1
 800cd42:	bf28      	it	cs
 800cd44:	460a      	movcs	r2, r1
 800cd46:	b291      	uxth	r1, r2
 800cd48:	e000      	b.n	800cd4c <tcp_pbuf_prealloc+0x3c>
 800cd4a:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f7fe f9c9 	bl	800b0e4 <pbuf_alloc>
  if (p == NULL) {
 800cd52:	b120      	cbz	r0, 800cd5e <tcp_pbuf_prealloc+0x4e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 800cd54:	8942      	ldrh	r2, [r0, #10]
 800cd56:	1b12      	subs	r2, r2, r4
 800cd58:	802a      	strh	r2, [r5, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800cd5a:	8104      	strh	r4, [r0, #8]
 800cd5c:	8144      	strh	r4, [r0, #10]
  return p;
}
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}

0800cd60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800cd60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 800cd68:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cd6a:	2003      	movs	r0, #3
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800cd6c:	460e      	mov	r6, r1
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cd6e:	f01b 0f01 	tst.w	fp, #1
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800cd72:	4691      	mov	r9, r2
 800cd74:	469a      	mov	sl, r3
 800cd76:	f04f 0700 	mov.w	r7, #0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cd7a:	bf14      	ite	ne
 800cd7c:	2504      	movne	r5, #4
 800cd7e:	2500      	moveq	r5, #0

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cd80:	f7fe f8ca 	bl	800af18 <memp_malloc>
 800cd84:	4604      	mov	r4, r0
 800cd86:	b918      	cbnz	r0, 800cd90 <tcp_create_segment+0x30>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f7fe f98b 	bl	800b0a4 <pbuf_free>
 800cd8e:	e035      	b.n	800cdfc <tcp_create_segment+0x9c>
    return NULL;
  }
  seg->flags = optflags;
 800cd90:	f880 b00c 	strb.w	fp, [r0, #12]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800cd94:	2114      	movs	r1, #20
  }
  seg->flags = optflags;
  seg->next = NULL;
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800cd96:	8933      	ldrh	r3, [r6, #8]
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  seg->next = NULL;
  seg->p = p;
 800cd98:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800cd9a:	1b5b      	subs	r3, r3, r5
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  seg->next = NULL;
 800cd9c:	6007      	str	r7, [r0, #0]
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800cd9e:	8147      	strh	r7, [r0, #10]
  }
  seg->flags = optflags;
  seg->next = NULL;
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800cda0:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7fe f970 	bl	800b088 <pbuf_header>
 800cda8:	4606      	mov	r6, r0
 800cdaa:	b128      	cbz	r0, 800cdb8 <tcp_create_segment+0x58>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cdac:	4620      	mov	r0, r4
 800cdae:	f7fe fbd2 	bl	800b556 <tcp_seg_free>
    return NULL;
 800cdb2:	4638      	mov	r0, r7
 800cdb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cdb8:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = htons(pcb->local_port);
 800cdba:	f8b8 001a 	ldrh.w	r0, [r8, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cdbe:	685f      	ldr	r7, [r3, #4]
 800cdc0:	6127      	str	r7, [r4, #16]
  seg->tcphdr->src = htons(pcb->local_port);
 800cdc2:	f7fc fd2f 	bl	8009824 <lwip_htons>
 800cdc6:	8038      	strh	r0, [r7, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
 800cdc8:	6927      	ldr	r7, [r4, #16]
 800cdca:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 800cdce:	f7fc fd29 	bl	8009824 <lwip_htons>
 800cdd2:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = htonl(seqno);
 800cdd4:	6927      	ldr	r7, [r4, #16]
 800cdd6:	4650      	mov	r0, sl
 800cdd8:	f7fc fd2a 	bl	8009830 <lwip_htonl>
 800cddc:	6078      	str	r0, [r7, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800cdde:	2d00      	cmp	r5, #0
 800cde0:	bf14      	ite	ne
 800cde2:	f44f 40c0 	movne.w	r0, #24576	; 0x6000
 800cde6:	f44f 40a0 	moveq.w	r0, #20480	; 0x5000
 800cdea:	6927      	ldr	r7, [r4, #16]
 800cdec:	ea40 0009 	orr.w	r0, r0, r9
 800cdf0:	f7fc fd18 	bl	8009824 <lwip_htons>
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cdf4:	6923      	ldr	r3, [r4, #16]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  seg->tcphdr->src = htons(pcb->local_port);
  seg->tcphdr->dest = htons(pcb->remote_port);
  seg->tcphdr->seqno = htonl(seqno);
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800cdf6:	81b8      	strh	r0, [r7, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cdf8:	749e      	strb	r6, [r3, #18]
 800cdfa:	74de      	strb	r6, [r3, #19]
  return seg;
 800cdfc:	4620      	mov	r0, r4
}
 800cdfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce02 <tcp_output_alloc_header.constprop.1>:
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ce02:	3114      	adds	r1, #20
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800ce04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ce06:	b289      	uxth	r1, r1
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800ce08:	4605      	mov	r5, r0
 800ce0a:	4617      	mov	r7, r2
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ce0c:	2001      	movs	r0, #1
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f7fe f968 	bl	800b0e4 <pbuf_alloc>
  if (p != NULL) {
 800ce14:	4606      	mov	r6, r0
 800ce16:	b1f8      	cbz	r0, 800ce58 <tcp_output_alloc_header.constprop.1+0x56>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ce18:	6844      	ldr	r4, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
 800ce1a:	8b68      	ldrh	r0, [r5, #26]
 800ce1c:	f7fc fd02 	bl	8009824 <lwip_htons>
 800ce20:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = htons(pcb->remote_port);
 800ce22:	8ba8      	ldrh	r0, [r5, #28]
 800ce24:	f7fc fcfe 	bl	8009824 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800ce28:	6067      	str	r7, [r4, #4]
  if (p != NULL) {
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = htons(pcb->local_port);
    tcphdr->dest = htons(pcb->remote_port);
 800ce2a:	8060      	strh	r0, [r4, #2]
    tcphdr->seqno = seqno_be;
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 800ce2c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800ce2e:	f7fc fcff 	bl	8009830 <lwip_htonl>
 800ce32:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800ce34:	f245 0010 	movw	r0, #20496	; 0x5010
 800ce38:	f7fc fcf4 	bl	8009824 <lwip_htons>
 800ce3c:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ce3e:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
 800ce40:	f7fc fcf0 	bl	8009824 <lwip_htons>
    tcphdr->chksum = 0;
 800ce44:	2300      	movs	r3, #0
    tcphdr->urgp = 0;

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ce46:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    tcphdr->dest = htons(pcb->remote_port);
    tcphdr->seqno = seqno_be;
    tcphdr->ackno = htonl(pcb->rcv_nxt);
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
    tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
    tcphdr->chksum = 0;
 800ce48:	7423      	strb	r3, [r4, #16]
 800ce4a:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800ce4c:	74a3      	strb	r3, [r4, #18]
 800ce4e:	74e3      	strb	r3, [r4, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ce50:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    tcphdr->src = htons(pcb->local_port);
    tcphdr->dest = htons(pcb->remote_port);
    tcphdr->seqno = seqno_be;
    tcphdr->ackno = htonl(pcb->rcv_nxt);
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
    tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ce52:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
    tcphdr->urgp = 0;

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ce54:	4413      	add	r3, r2
 800ce56:	632b      	str	r3, [r5, #48]	; 0x30
  }
  return p;
}
 800ce58:	4630      	mov	r0, r6
 800ce5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce5c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ce5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce60:	b08f      	sub	sp, #60	; 0x3c
 800ce62:	4692      	mov	sl, r2
 800ce64:	4605      	mov	r5, r0
 800ce66:	9307      	str	r3, [sp, #28]
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ce68:	2300      	movs	r3, #0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ce6a:	9106      	str	r1, [sp, #24]
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ce6c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800ce70:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800ce72:	9304      	str	r3, [sp, #16]
 800ce74:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ce78:	9a04      	ldr	r2, [sp, #16]
 800ce7a:	085b      	lsrs	r3, r3, #1
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	bf28      	it	cs
 800ce80:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	bf18      	it	ne
 800ce86:	461a      	movne	r2, r3
 800ce88:	9204      	str	r2, [sp, #16]
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ce8a:	2900      	cmp	r1, #0
 800ce8c:	f000 809e 	beq.w	800cfcc <tcp_write+0x170>
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ce90:	7e03      	ldrb	r3, [r0, #24]
 800ce92:	2b07      	cmp	r3, #7
 800ce94:	d003      	beq.n	800ce9e <tcp_write+0x42>
      (pcb->state != CLOSE_WAIT) &&
 800ce96:	3b02      	subs	r3, #2
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	f200 817d 	bhi.w	800d198 <tcp_write+0x33c>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800ce9e:	f1ba 0f00 	cmp.w	sl, #0
 800cea2:	f000 8096 	beq.w	800cfd2 <tcp_write+0x176>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800cea6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800ceaa:	4553      	cmp	r3, sl
 800ceac:	d204      	bcs.n	800ceb8 <tcp_write+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800ceae:	7fab      	ldrb	r3, [r5, #30]
 800ceb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ceb4:	77ab      	strb	r3, [r5, #30]
 800ceb6:	e086      	b.n	800cfc6 <tcp_write+0x16a>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ceb8:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 800cebc:	2b07      	cmp	r3, #7
 800cebe:	f240 8088 	bls.w	800cfd2 <tcp_write+0x176>
 800cec2:	e7f4      	b.n	800ceae <tcp_write+0x52>
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800cec4:	7b23      	ldrb	r3, [r4, #12]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cec6:	8927      	ldrh	r7, [r4, #8]
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800cec8:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cecc:	9b04      	ldr	r3, [sp, #16]
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800cece:	bf18      	it	ne
 800ced0:	2204      	movne	r2, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ced2:	eba3 0307 	sub.w	r3, r3, r7
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800ced6:	bf08      	it	eq
 800ced8:	2200      	moveq	r2, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ceda:	1a9a      	subs	r2, r3, r2
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800cedc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cee0:	b292      	uxth	r2, r2
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
    if (oversize > 0) {
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	f000 8084 	beq.w	800cff0 <tcp_write+0x194>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
 800cee8:	459a      	cmp	sl, r3
 800ceea:	46d0      	mov	r8, sl
 800ceec:	46a3      	mov	fp, r4
 800ceee:	bf28      	it	cs
 800cef0:	4698      	movcs	r8, r3
      pos += oversize_used;
      oversize -= oversize_used;
 800cef2:	ebc8 0303 	rsb	r3, r8, r3
      space -= oversize_used;
 800cef6:	ebc8 0202 	rsb	r2, r8, r2
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cefa:	45c2      	cmp	sl, r8
    if (oversize > 0) {
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
      pos += oversize_used;
      oversize -= oversize_used;
 800cefc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 800cf00:	b292      	uxth	r2, r2
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cf02:	f240 80e5 	bls.w	800d0d0 <tcp_write+0x274>
 800cf06:	2a00      	cmp	r2, #0
 800cf08:	f000 8089 	beq.w	800d01e <tcp_write+0x1c2>
 800cf0c:	2f00      	cmp	r7, #0
 800cf0e:	f000 8089 	beq.w	800d024 <tcp_write+0x1c8>
      u16_t seglen = space < len - pos ? space : len - pos;
 800cf12:	ebc8 060a 	rsb	r6, r8, sl
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cf16:	9b07      	ldr	r3, [sp, #28]
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
      u16_t seglen = space < len - pos ? space : len - pos;
 800cf18:	4296      	cmp	r6, r2
 800cf1a:	bfa8      	it	ge
 800cf1c:	4616      	movge	r6, r2
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cf1e:	07db      	lsls	r3, r3, #31
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
      u16_t seglen = space < len - pos ? space : len - pos;
 800cf20:	b2b6      	uxth	r6, r6
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cf22:	d56f      	bpl.n	800d004 <tcp_write+0x1a8>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cf24:	2301      	movs	r3, #1
 800cf26:	9500      	str	r5, [sp, #0]
 800cf28:	4631      	mov	r1, r6
 800cf2a:	2004      	movs	r0, #4
 800cf2c:	9302      	str	r3, [sp, #8]
 800cf2e:	9b07      	ldr	r3, [sp, #28]
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800cf36:	f7ff feeb 	bl	800cd10 <tcp_pbuf_prealloc>
 800cf3a:	4607      	mov	r7, r0
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	f000 811e 	beq.w	800d17e <tcp_write+0x322>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
 800cf42:	8962      	ldrh	r2, [r4, #10]
 800cf44:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cf48:	6840      	ldr	r0, [r0, #4]
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
 800cf4a:	4413      	add	r3, r2
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cf4c:	4632      	mov	r2, r6
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
 800cf4e:	8163      	strh	r3, [r4, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cf50:	9b06      	ldr	r3, [sp, #24]
 800cf52:	eb03 0108 	add.w	r1, r3, r8
 800cf56:	f004 fd74 	bl	8011a42 <memcpy>
        /* reference the non-volatile payload data */
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
      }

      pos += seglen;
      queuelen += pbuf_clen(concat_p);
 800cf5a:	4638      	mov	r0, r7
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
      }

      pos += seglen;
 800cf5c:	4446      	add	r6, r8
      queuelen += pbuf_clen(concat_p);
 800cf5e:	f7fe f96d 	bl	800b23c <pbuf_clen>
 800cf62:	9b05      	ldr	r3, [sp, #20]
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
      }

      pos += seglen;
 800cf64:	b2b6      	uxth	r6, r6
      queuelen += pbuf_clen(concat_p);
 800cf66:	46a3      	mov	fp, r4
 800cf68:	4403      	add	r3, r0
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	9305      	str	r3, [sp, #20]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cf6e:	9b07      	ldr	r3, [sp, #28]
 800cf70:	f04f 0900 	mov.w	r9, #0
 800cf74:	f003 0301 	and.w	r3, r3, #1
 800cf78:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800cf7c:	9308      	str	r3, [sp, #32]
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800cf7e:	4556      	cmp	r6, sl
 800cf80:	f080 80a2 	bcs.w	800d0c8 <tcp_write+0x26c>
    struct pbuf *p;
    u16_t left = len - pos;
    u16_t max_len = mss_local - optlen;
    u16_t seglen = left > max_len ? max_len : left;
 800cf84:	ebc6 030a 	rsb	r3, r6, sl
 800cf88:	9a04      	ldr	r2, [sp, #16]
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	bf28      	it	cs
 800cf90:	4613      	movcs	r3, r2
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	9309      	str	r3, [sp, #36]	; 0x24
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cf96:	9b08      	ldr	r3, [sp, #32]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d145      	bne.n	800d028 <tcp_write+0x1cc>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfa0:	9808      	ldr	r0, [sp, #32]
 800cfa2:	f7fe f89f 	bl	800b0e4 <pbuf_alloc>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d155      	bne.n	800d056 <tcp_write+0x1fa>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800cfaa:	7fab      	ldrb	r3, [r5, #30]
 800cfac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cfb0:	77ab      	strb	r3, [r5, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800cfb2:	b117      	cbz	r7, 800cfba <tcp_write+0x15e>
    pbuf_free(concat_p);
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	f7fe f875 	bl	800b0a4 <pbuf_free>
  }
  if (queue != NULL) {
 800cfba:	f1b9 0f00 	cmp.w	r9, #0
 800cfbe:	d002      	beq.n	800cfc6 <tcp_write+0x16a>
    tcp_segs_free(queue);
 800cfc0:	4648      	mov	r0, r9
 800cfc2:	f7fe fad6 	bl	800b572 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfca:	e0e7      	b.n	800d19c <tcp_write+0x340>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cfcc:	f06f 000e 	mvn.w	r0, #14
 800cfd0:	e0e4      	b.n	800d19c <tcp_write+0x340>

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
 800cfd2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cfd6:	6eec      	ldr	r4, [r5, #108]	; 0x6c

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
 800cfd8:	9305      	str	r3, [sp, #20]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cfda:	2c00      	cmp	r4, #0
 800cfdc:	f000 80d7 	beq.w	800d18e <tcp_write+0x332>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cfe0:	f8d4 9000 	ldr.w	r9, [r4]
 800cfe4:	f1b9 0f00 	cmp.w	r9, #0
 800cfe8:	f43f af6c 	beq.w	800cec4 <tcp_write+0x68>
 800cfec:	464c      	mov	r4, r9
 800cfee:	e7f7      	b.n	800cfe0 <tcp_write+0x184>
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800cff0:	f8ad 9036 	strh.w	r9, [sp, #54]	; 0x36
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cff4:	f1ba 0f00 	cmp.w	sl, #0
 800cff8:	d101      	bne.n	800cffe <tcp_write+0x1a2>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cffa:	46d3      	mov	fp, sl
 800cffc:	e099      	b.n	800d132 <tcp_write+0x2d6>
 800cffe:	46cb      	mov	fp, r9
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d000:	46c8      	mov	r8, r9
 800d002:	e780      	b.n	800cf06 <tcp_write+0xaa>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d004:	2201      	movs	r2, #1
 800d006:	4631      	mov	r1, r6
 800d008:	2004      	movs	r0, #4
 800d00a:	f7fe f86b 	bl	800b0e4 <pbuf_alloc>
 800d00e:	4607      	mov	r7, r0
 800d010:	2800      	cmp	r0, #0
 800d012:	f000 80b4 	beq.w	800d17e <tcp_write+0x322>
        tcp_seg_add_chksum(~inet_chksum((const u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800d016:	9b06      	ldr	r3, [sp, #24]
 800d018:	4443      	add	r3, r8
 800d01a:	6043      	str	r3, [r0, #4]
 800d01c:	e79d      	b.n	800cf5a <tcp_write+0xfe>
 800d01e:	4646      	mov	r6, r8
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800d020:	4617      	mov	r7, r2
 800d022:	e7a4      	b.n	800cf6e <tcp_write+0x112>
 800d024:	4646      	mov	r6, r8
 800d026:	e7a2      	b.n	800cf6e <tcp_write+0x112>
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d028:	fab9 f389 	clz	r3, r9
 800d02c:	9500      	str	r5, [sp, #0]
 800d02e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d030:	2000      	movs	r0, #0
 800d032:	095b      	lsrs	r3, r3, #5
 800d034:	9302      	str	r3, [sp, #8]
 800d036:	9b07      	ldr	r3, [sp, #28]
 800d038:	9301      	str	r3, [sp, #4]
 800d03a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800d03e:	f7ff fe67 	bl	800cd10 <tcp_pbuf_prealloc>
 800d042:	4683      	mov	fp, r0
 800d044:	2800      	cmp	r0, #0
 800d046:	d0b0      	beq.n	800cfaa <tcp_write+0x14e>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800d048:	9b06      	ldr	r3, [sp, #24]
 800d04a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d04c:	1999      	adds	r1, r3, r6
 800d04e:	6840      	ldr	r0, [r0, #4]
 800d050:	f004 fcf7 	bl	8011a42 <memcpy>
 800d054:	e010      	b.n	800d078 <tcp_write+0x21c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800d056:	9a06      	ldr	r2, [sp, #24]
 800d058:	900b      	str	r0, [sp, #44]	; 0x2c
 800d05a:	4432      	add	r2, r6
 800d05c:	6042      	str	r2, [r0, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d05e:	9a08      	ldr	r2, [sp, #32]
 800d060:	4611      	mov	r1, r2
 800d062:	4610      	mov	r0, r2
 800d064:	f7fe f83e 	bl	800b0e4 <pbuf_alloc>
 800d068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d06a:	4683      	mov	fp, r0
 800d06c:	b908      	cbnz	r0, 800d072 <tcp_write+0x216>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d06e:	4618      	mov	r0, r3
 800d070:	e00c      	b.n	800d08c <tcp_write+0x230>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d072:	4619      	mov	r1, r3
 800d074:	f7fe f8ef 	bl	800b256 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d078:	4658      	mov	r0, fp
 800d07a:	f7fe f8df 	bl	800b23c <pbuf_clen>
 800d07e:	9b05      	ldr	r3, [sp, #20]
 800d080:	4403      	add	r3, r0
 800d082:	b29b      	uxth	r3, r3

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d084:	2b08      	cmp	r3, #8
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
    }

    queuelen += pbuf_clen(p);
 800d086:	9305      	str	r3, [sp, #20]

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d088:	d903      	bls.n	800d092 <tcp_write+0x236>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d08a:	4658      	mov	r0, fp
 800d08c:	f7fe f80a 	bl	800b0a4 <pbuf_free>
      goto memerr;
 800d090:	e78b      	b.n	800cfaa <tcp_write+0x14e>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d092:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800d094:	2200      	movs	r2, #0
 800d096:	4659      	mov	r1, fp
 800d098:	4628      	mov	r0, r5
 800d09a:	9200      	str	r2, [sp, #0]
 800d09c:	4433      	add	r3, r6
 800d09e:	f7ff fe5f 	bl	800cd60 <tcp_create_segment>
 800d0a2:	4683      	mov	fp, r0
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d080      	beq.n	800cfaa <tcp_write+0x14e>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800d0a8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d0ac:	8143      	strh	r3, [r0, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d0ae:	f1b9 0f00 	cmp.w	r9, #0
 800d0b2:	d002      	beq.n	800d0ba <tcp_write+0x25e>
      queue = seg;
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 800d0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b6:	6018      	str	r0, [r3, #0]
 800d0b8:	e000      	b.n	800d0bc <tcp_write+0x260>
 800d0ba:	4681      	mov	r9, r0

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0be:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d0c2:	441e      	add	r6, r3
 800d0c4:	b2b6      	uxth	r6, r6
 800d0c6:	e75a      	b.n	800cf7e <tcp_write+0x122>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d0c8:	f1b8 0f00 	cmp.w	r8, #0
 800d0cc:	d01f      	beq.n	800d10e <tcp_write+0x2b2>
 800d0ce:	e003      	b.n	800d0d8 <tcp_write+0x27c>
 800d0d0:	f1b8 0f00 	cmp.w	r8, #0
 800d0d4:	d02d      	beq.n	800d132 <tcp_write+0x2d6>
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800d0d6:	464f      	mov	r7, r9
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d0d8:	6866      	ldr	r6, [r4, #4]
 800d0da:	b186      	cbz	r6, 800d0fe <tcp_write+0x2a2>
      p->tot_len += oversize_used;
 800d0dc:	8933      	ldrh	r3, [r6, #8]
 800d0de:	4443      	add	r3, r8
 800d0e0:	8133      	strh	r3, [r6, #8]
      if (p->next == NULL) {
 800d0e2:	6833      	ldr	r3, [r6, #0]
 800d0e4:	b94b      	cbnz	r3, 800d0fa <tcp_write+0x29e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d0e6:	6873      	ldr	r3, [r6, #4]
 800d0e8:	4642      	mov	r2, r8
 800d0ea:	8970      	ldrh	r0, [r6, #10]
 800d0ec:	9906      	ldr	r1, [sp, #24]
 800d0ee:	4418      	add	r0, r3
 800d0f0:	f004 fca7 	bl	8011a42 <memcpy>
        p->len += oversize_used;
 800d0f4:	8973      	ldrh	r3, [r6, #10]
 800d0f6:	4443      	add	r3, r8
 800d0f8:	8173      	strh	r3, [r6, #10]
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d0fa:	6836      	ldr	r6, [r6, #0]
 800d0fc:	e7ed      	b.n	800d0da <tcp_write+0x27e>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
 800d0fe:	8923      	ldrh	r3, [r4, #8]
 800d100:	4443      	add	r3, r8
 800d102:	8123      	strh	r3, [r4, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800d104:	8963      	ldrh	r3, [r4, #10]
 800d106:	ebc8 0803 	rsb	r8, r8, r3
 800d10a:	f8a4 800a 	strh.w	r8, [r4, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d10e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d112:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
 800d116:	b147      	cbz	r7, 800d12a <tcp_write+0x2ce>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d118:	4639      	mov	r1, r7
 800d11a:	6860      	ldr	r0, [r4, #4]
 800d11c:	f7fe f89b 	bl	800b256 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d120:	8922      	ldrh	r2, [r4, #8]
 800d122:	893b      	ldrh	r3, [r7, #8]
 800d124:	4413      	add	r3, r2
 800d126:	8123      	strh	r3, [r4, #8]
 800d128:	e007      	b.n	800d13a <tcp_write+0x2de>

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d12a:	b934      	cbnz	r4, 800d13a <tcp_write+0x2de>
    pcb->unsent = queue;
 800d12c:	f8c5 906c 	str.w	r9, [r5, #108]	; 0x6c
 800d130:	e005      	b.n	800d13e <tcp_write+0x2e2>
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d132:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d136:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
   * is harmless
   */
  if (last_unsent == NULL) {
    pcb->unsent = queue;
  } else {
    last_unsent->next = queue;
 800d13a:	f8c4 9000 	str.w	r9, [r4]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d13e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800d140:	4453      	add	r3, sl
 800d142:	65eb      	str	r3, [r5, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d144:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800d148:	ebca 0a03 	rsb	sl, sl, r3
  pcb->snd_queuelen = queuelen;
 800d14c:	f8bd 3014 	ldrh.w	r3, [sp, #20]

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  pcb->snd_buf -= len;
 800d150:	f8a5 a066 	strh.w	sl, [r5, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
 800d154:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800d158:	f1bb 0f00 	cmp.w	fp, #0
 800d15c:	d011      	beq.n	800d182 <tcp_write+0x326>
 800d15e:	f8db 4010 	ldr.w	r4, [fp, #16]
 800d162:	b184      	cbz	r4, 800d186 <tcp_write+0x32a>
 800d164:	9b07      	ldr	r3, [sp, #28]
 800d166:	f003 0302 	and.w	r3, r3, #2
 800d16a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800d16e:	b963      	cbnz	r3, 800d18a <tcp_write+0x32e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d170:	89a5      	ldrh	r5, [r4, #12]
 800d172:	2008      	movs	r0, #8
 800d174:	f7fc fb56 	bl	8009824 <lwip_htons>
 800d178:	4328      	orrs	r0, r5
 800d17a:	81a0      	strh	r0, [r4, #12]
 800d17c:	e001      	b.n	800d182 <tcp_write+0x326>
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800d17e:	2700      	movs	r7, #0
 800d180:	e713      	b.n	800cfaa <tcp_write+0x14e>
  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
 800d182:	4658      	mov	r0, fp
 800d184:	e00a      	b.n	800d19c <tcp_write+0x340>
 800d186:	4620      	mov	r0, r4
 800d188:	e008      	b.n	800d19c <tcp_write+0x340>
 800d18a:	2000      	movs	r0, #0
 800d18c:	e006      	b.n	800d19c <tcp_write+0x340>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d18e:	46a3      	mov	fp, r4
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
  u16_t oversize_used = 0;
 800d190:	46a0      	mov	r8, r4
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  u16_t pos = 0; /* position in 'arg' data */
 800d192:	4626      	mov	r6, r4
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800d194:	4627      	mov	r7, r4
 800d196:	e6ea      	b.n	800cf6e <tcp_write+0x112>
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d198:	f06f 000a 	mvn.w	r0, #10
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 800d19c:	b00f      	add	sp, #60	; 0x3c
 800d19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d1a2 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d1a2:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800d1a6:	2b07      	cmp	r3, #7
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	460d      	mov	r5, r1
 800d1ae:	f001 0603 	and.w	r6, r1, #3

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d1b2:	d901      	bls.n	800d1b8 <tcp_enqueue_flags+0x16>
 800d1b4:	07ca      	lsls	r2, r1, #31
 800d1b6:	d518      	bpl.n	800d1ea <tcp_enqueue_flags+0x48>
 800d1b8:	f005 0302 	and.w	r3, r5, #2
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d1bc:	2b00      	cmp	r3, #0

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 800d1be:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d1c2:	bf13      	iteet	ne
 800d1c4:	2701      	movne	r7, #1
 800d1c6:	2700      	moveq	r7, #0
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d1c8:	2100      	moveq	r1, #0
 800d1ca:	2104      	movne	r1, #4

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d036      	beq.n	800d23e <tcp_enqueue_flags+0x9c>
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	4610      	mov	r0, r2
 800d1d4:	f7fd ff86 	bl	800b0e4 <pbuf_alloc>
 800d1d8:	4601      	mov	r1, r0
 800d1da:	b130      	cbz	r0, 800d1ea <tcp_enqueue_flags+0x48>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d1dc:	9700      	str	r7, [sp, #0]
 800d1de:	462a      	mov	r2, r5
 800d1e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f7ff fdbc 	bl	800cd60 <tcp_create_segment>
 800d1e8:	b920      	cbnz	r0, 800d1f4 <tcp_enqueue_flags+0x52>
    pcb->flags |= TF_NAGLEMEMERR;
 800d1ea:	7fa3      	ldrb	r3, [r4, #30]
 800d1ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1f0:	77a3      	strb	r3, [r4, #30]
 800d1f2:	e024      	b.n	800d23e <tcp_enqueue_flags+0x9c>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d1f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d1f6:	b90b      	cbnz	r3, 800d1fc <tcp_enqueue_flags+0x5a>
    pcb->unsent = seg;
 800d1f8:	66e0      	str	r0, [r4, #108]	; 0x6c
 800d1fa:	e004      	b.n	800d206 <tcp_enqueue_flags+0x64>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	b10a      	cbz	r2, 800d204 <tcp_enqueue_flags+0x62>
 800d200:	4613      	mov	r3, r2
 800d202:	e7fb      	b.n	800d1fc <tcp_enqueue_flags+0x5a>
    useg->next = seg;
 800d204:	6018      	str	r0, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d20c:	b13e      	cbz	r6, 800d21e <tcp_enqueue_flags+0x7c>
    pcb->snd_lbb++;
 800d20e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d210:	3301      	adds	r3, #1
 800d212:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
 800d214:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d218:	3b01      	subs	r3, #1
 800d21a:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
 800d21e:	07eb      	lsls	r3, r5, #31
    pcb->flags |= TF_FIN;
 800d220:	bf42      	ittt	mi
 800d222:	7fa3      	ldrbmi	r3, [r4, #30]
 800d224:	f043 0320 	orrmi.w	r3, r3, #32
 800d228:	77a3      	strbmi	r3, [r4, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d22a:	6840      	ldr	r0, [r0, #4]
 800d22c:	f7fe f806 	bl	800b23c <pbuf_clen>
 800d230:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800d234:	4418      	add	r0, r3
 800d236:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d23a:	2000      	movs	r0, #0
 800d23c:	e001      	b.n	800d242 <tcp_enqueue_flags+0xa0>
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d23e:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800d242:	b003      	add	sp, #12
 800d244:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d246 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d248:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d24a:	4605      	mov	r5, r0
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d24c:	b154      	cbz	r4, 800d264 <tcp_send_fin+0x1e>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	b10b      	cbz	r3, 800d256 <tcp_send_fin+0x10>
 800d252:	461c      	mov	r4, r3
 800d254:	e7fb      	b.n	800d24e <tcp_send_fin+0x8>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	8998      	ldrh	r0, [r3, #12]
 800d25a:	f7fc fae6 	bl	800982a <lwip_ntohs>
 800d25e:	f010 0707 	ands.w	r7, r0, #7
 800d262:	d005      	beq.n	800d270 <tcp_send_fin+0x2a>
      pcb->flags |= TF_FIN;
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d264:	4628      	mov	r0, r5
 800d266:	2101      	movs	r1, #1
}
 800d268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      pcb->flags |= TF_FIN;
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d26c:	f7ff bf99 	b.w	800d1a2 <tcp_enqueue_flags>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d270:	6926      	ldr	r6, [r4, #16]
 800d272:	2001      	movs	r0, #1
 800d274:	89b4      	ldrh	r4, [r6, #12]
 800d276:	f7fc fad5 	bl	8009824 <lwip_htons>
 800d27a:	4320      	orrs	r0, r4
 800d27c:	81b0      	strh	r0, [r6, #12]
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
}
 800d27e:	4638      	mov	r0, r7
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
      pcb->flags |= TF_FIN;
 800d280:	7fab      	ldrb	r3, [r5, #30]
 800d282:	f043 0320 	orr.w	r3, r3, #32
 800d286:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
}
 800d288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d28a <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d28a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d28c:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 800d28e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800d290:	f7fc face 	bl	8009830 <lwip_htonl>
 800d294:	2100      	movs	r1, #0
 800d296:	4602      	mov	r2, r0
 800d298:	4620      	mov	r0, r4
 800d29a:	f7ff fdb2 	bl	800ce02 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 800d29e:	4606      	mov	r6, r0
 800d2a0:	b930      	cbnz	r0, 800d2b0 <tcp_send_empty_ack+0x26>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d2a2:	7fa3      	ldrb	r3, [r4, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d2a4:	f06f 0001 	mvn.w	r0, #1
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  if (p == NULL) {
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d2a8:	f043 0303 	orr.w	r3, r3, #3
 800d2ac:	77a3      	strb	r3, [r4, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d2ae:	e01f      	b.n	800d2f0 <tcp_send_empty_ack+0x66>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d2b0:	1d25      	adds	r5, r4, #4
 800d2b2:	4628      	mov	r0, r5
 800d2b4:	f7fd fa82 	bl	800a7bc <ip4_route>
  if (netif == NULL) {
 800d2b8:	b160      	cbz	r0, 800d2d4 <tcp_send_empty_ack+0x4a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip,
 800d2ba:	2206      	movs	r2, #6
 800d2bc:	9002      	str	r0, [sp, #8]
 800d2be:	7aa3      	ldrb	r3, [r4, #10]
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	9201      	str	r2, [sp, #4]
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	7a62      	ldrb	r2, [r4, #9]
 800d2c8:	9200      	str	r2, [sp, #0]
 800d2ca:	462a      	mov	r2, r5
 800d2cc:	f7fd fbaa 	bl	800aa24 <ip4_output_if>
 800d2d0:	4605      	mov	r5, r0
 800d2d2:	e001      	b.n	800d2d8 <tcp_send_empty_ack+0x4e>
  }
#endif

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    err = ERR_RTE;
 800d2d4:	f06f 0503 	mvn.w	r5, #3
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip,
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7fd fee3 	bl	800b0a4 <pbuf_free>
 800d2de:	7fa3      	ldrb	r3, [r4, #30]

  if (err != ERR_OK) {
 800d2e0:	b115      	cbz	r5, 800d2e8 <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d2e2:	f043 0303 	orr.w	r3, r3, #3
 800d2e6:	e001      	b.n	800d2ec <tcp_send_empty_ack+0x62>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d2e8:	f023 0303 	bic.w	r3, r3, #3
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	77a3      	strb	r3, [r4, #30]
  }

  return err;
}
 800d2f0:	b004      	add	sp, #16
 800d2f2:	bd70      	pop	{r4, r5, r6, pc}

0800d2f4 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d2f4:	4ba1      	ldr	r3, [pc, #644]	; (800d57c <tcp_output+0x288>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4298      	cmp	r0, r3
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d2fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fe:	4604      	mov	r4, r0
 800d300:	b085      	sub	sp, #20

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d302:	f000 8131 	beq.w	800d568 <tcp_output+0x274>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d306:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800d30a:	f8b0 804c 	ldrh.w	r8, [r0, #76]	; 0x4c

  seg = pcb->unsent;
 800d30e:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d310:	4598      	cmp	r8, r3
 800d312:	bf28      	it	cs
 800d314:	4698      	movcs	r8, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800d316:	7f83      	ldrb	r3, [r0, #30]
 800d318:	079b      	lsls	r3, r3, #30
 800d31a:	d510      	bpl.n	800d33e <tcp_output+0x4a>
 800d31c:	b92d      	cbnz	r5, 800d32a <tcp_output+0x36>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800d31e:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800d320:	b005      	add	sp, #20
 800d322:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800d326:	f7ff bfb0 	b.w	800d28a <tcp_send_empty_ack>
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800d32a:	692b      	ldr	r3, [r5, #16]
 800d32c:	6858      	ldr	r0, [r3, #4]
 800d32e:	f7fc fa81 	bl	8009834 <lwip_ntohl>
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
 800d332:	892b      	ldrh	r3, [r5, #8]
 800d334:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d336:	1a9b      	subs	r3, r3, r2
 800d338:	4418      	add	r0, r3
 800d33a:	4580      	cmp	r8, r0
 800d33c:	d3ef      	bcc.n	800d31e <tcp_output+0x2a>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d33e:	6f26      	ldr	r6, [r4, #112]	; 0x70
  if (useg != NULL) {
 800d340:	b91e      	cbnz	r6, 800d34a <tcp_output+0x56>
    if (pcb->state != SYN_SENT) {
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800d342:	2700      	movs	r7, #0
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  }

  if (pcb->rttest == 0) {
    pcb->rttest = tcp_ticks;
 800d344:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800d580 <tcp_output+0x28c>
 800d348:	e0b1      	b.n	800d4ae <tcp_output+0x1ba>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
 800d34a:	6833      	ldr	r3, [r6, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d0f8      	beq.n	800d342 <tcp_output+0x4e>
 800d350:	461e      	mov	r6, r3
 800d352:	e7fa      	b.n	800d34a <tcp_output+0x56>
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d354:	692b      	ldr	r3, [r5, #16]
 800d356:	6858      	ldr	r0, [r3, #4]
 800d358:	f7fc fa6c 	bl	8009834 <lwip_ntohl>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d35c:	892b      	ldrh	r3, [r5, #8]
 800d35e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d360:	1a9b      	subs	r3, r3, r2
 800d362:	4418      	add	r0, r3
 800d364:	4580      	cmp	r8, r0
 800d366:	f0c0 80a5 	bcc.w	800d4b4 <tcp_output+0x1c0>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d36a:	692b      	ldr	r3, [r5, #16]
 800d36c:	8998      	ldrh	r0, [r3, #12]
 800d36e:	f7fc fa5c 	bl	800982a <lwip_ntohs>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 800d372:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d374:	2b00      	cmp	r3, #0
 800d376:	f040 80a3 	bne.w	800d4c0 <tcp_output+0x1cc>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d37a:	7e23      	ldrb	r3, [r4, #24]
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d00a      	beq.n	800d396 <tcp_output+0xa2>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d380:	f8d5 b010 	ldr.w	fp, [r5, #16]
 800d384:	2010      	movs	r0, #16
 800d386:	f8bb a00c 	ldrh.w	sl, [fp, #12]
 800d38a:	f7fc fa4b 	bl	8009824 <lwip_htons>
 800d38e:	ea4a 0000 	orr.w	r0, sl, r0
 800d392:	f8ab 000c 	strh.w	r0, [fp, #12]
  /** @bug Exclude retransmitted segments from this count. */
  MIB2_STATS_INC(mib2.tcpoutsegs);

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 800d396:	f8d5 a010 	ldr.w	sl, [r5, #16]
    if (pcb->state != SYN_SENT) {
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800d39a:	816f      	strh	r7, [r5, #10]
  /** @bug Exclude retransmitted segments from this count. */
  MIB2_STATS_INC(mib2.tcpoutsegs);

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 800d39c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d39e:	f7fc fa47 	bl	8009830 <lwip_htonl>
 800d3a2:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d3a6:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800d3a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d3ac:	f7fc fa3a 	bl	8009824 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d3b0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800d3b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d3b4:	f8aa 000e 	strh.w	r0, [sl, #14]
 800d3b8:	f104 0a04 	add.w	sl, r4, #4
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d3bc:	4413      	add	r3, r2
 800d3be:	6323      	str	r3, [r4, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d3c0:	7b2b      	ldrb	r3, [r5, #12]
 800d3c2:	f013 0f01 	tst.w	r3, #1
 800d3c6:	d00c      	beq.n	800d3e2 <tcp_output+0xee>

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d3c8:	f8d5 b010 	ldr.w	fp, [r5, #16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 800d3cc:	4651      	mov	r1, sl
 800d3ce:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800d3d2:	f7fe fd0e 	bl	800bdf2 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d3d6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800d3da:	f7fc fa29 	bl	8009830 <lwip_htonl>
 800d3de:	f8cb 0014 	str.w	r0, [fp, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 800d3e2:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    pcb->rtime = 0;
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d3e6:	4650      	mov	r0, sl
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 800d3e8:	3301      	adds	r3, #1
    pcb->rtime = 0;
 800d3ea:	bf08      	it	eq
 800d3ec:	86a7      	strheq	r7, [r4, #52]	; 0x34
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d3ee:	f7fd f9e5 	bl	800a7bc <ip4_route>
  if (netif == NULL) {
 800d3f2:	4683      	mov	fp, r0
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d07d      	beq.n	800d4f4 <tcp_output+0x200>
    return ERR_RTE;
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	b90b      	cbnz	r3, 800d400 <tcp_output+0x10c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(PCB_ISIPV6(pcb), netif,
      &pcb->remote_ip);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d3fc:	6843      	ldr	r3, [r0, #4]
 800d3fe:	6023      	str	r3, [r4, #0]
  }

  if (pcb->rttest == 0) {
 800d400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d402:	b93b      	cbnz	r3, 800d414 <tcp_output+0x120>
    pcb->rttest = tcp_ticks;
 800d404:	f8d9 3000 	ldr.w	r3, [r9]
 800d408:	63a3      	str	r3, [r4, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 800d40a:	692b      	ldr	r3, [r5, #16]
 800d40c:	6858      	ldr	r0, [r3, #4]
 800d40e:	f7fc fa11 	bl	8009834 <lwip_ntohl>
 800d412:	63e0      	str	r0, [r4, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d414:	6868      	ldr	r0, [r5, #4]
 800d416:	692a      	ldr	r2, [r5, #16]
 800d418:	6843      	ldr	r3, [r0, #4]

  seg->p->len -= len;
 800d41a:	8941      	ldrh	r1, [r0, #10]
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d41c:	1ad3      	subs	r3, r2, r3

  seg->p->len -= len;
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800d41e:	6042      	str	r2, [r0, #4]
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d420:	b29b      	uxth	r3, r3

  seg->p->len -= len;
 800d422:	1ac9      	subs	r1, r1, r3
 800d424:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800d426:	8901      	ldrh	r1, [r0, #8]
 800d428:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(PCB_ISIPV6(pcb), seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d42a:	4621      	mov	r1, r4
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);

  seg->p->len -= len;
  seg->p->tot_len -= len;
 800d42c:	8103      	strh	r3, [r0, #8]

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
 800d42e:	7417      	strb	r7, [r2, #16]
 800d430:	7457      	strb	r7, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(PCB_ISIPV6(pcb), seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d432:	2206      	movs	r2, #6
 800d434:	7aa3      	ldrb	r3, [r4, #10]
 800d436:	9201      	str	r2, [sp, #4]
 800d438:	7a62      	ldrb	r2, [r4, #9]
 800d43a:	f8cd b008 	str.w	fp, [sp, #8]
 800d43e:	9200      	str	r2, [sp, #0]
 800d440:	4652      	mov	r2, sl
 800d442:	f7fd faef 	bl	800aa24 <ip4_output_if>

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb);
    if (err != ERR_OK) {
 800d446:	2800      	cmp	r0, #0
 800d448:	d156      	bne.n	800d4f8 <tcp_output+0x204>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
      return err;
    }
    pcb->unsent = seg->next;
 800d44a:	682b      	ldr	r3, [r5, #0]
 800d44c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d44e:	7e23      	ldrb	r3, [r4, #24]
 800d450:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d452:	bf1e      	ittt	ne
 800d454:	7fa3      	ldrbne	r3, [r4, #30]
 800d456:	f023 0303 	bicne.w	r3, r3, #3
 800d45a:	77a3      	strbne	r3, [r4, #30]
    }
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d45c:	692b      	ldr	r3, [r5, #16]
 800d45e:	6858      	ldr	r0, [r3, #4]
 800d460:	f7fc f9e8 	bl	8009834 <lwip_ntohl>
 800d464:	692b      	ldr	r3, [r5, #16]
 800d466:	4683      	mov	fp, r0
 800d468:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800d46c:	8998      	ldrh	r0, [r3, #12]
 800d46e:	f7fc f9dc 	bl	800982a <lwip_ntohs>
 800d472:	f010 0003 	ands.w	r0, r0, #3
 800d476:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d478:	6d23      	ldr	r3, [r4, #80]	; 0x50
    }
    pcb->unsent = seg->next;
    if (pcb->state != SYN_SENT) {
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d47a:	bf18      	it	ne
 800d47c:	2001      	movne	r0, #1
 800d47e:	4450      	add	r0, sl
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
      pcb->snd_nxt = snd_nxt;
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d480:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    pcb->unsent = seg->next;
    if (pcb->state != SYN_SENT) {
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d484:	1a1b      	subs	r3, r3, r0
 800d486:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d488:	692b      	ldr	r3, [r5, #16]
    if (pcb->state != SYN_SENT) {
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
      pcb->snd_nxt = snd_nxt;
 800d48a:	bfb8      	it	lt
 800d48c:	6520      	strlt	r0, [r4, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d48e:	8998      	ldrh	r0, [r3, #12]
 800d490:	f7fc f9cb 	bl	800982a <lwip_ntohs>
 800d494:	f010 0003 	ands.w	r0, r0, #3
 800d498:	bf18      	it	ne
 800d49a:	2001      	movne	r0, #1
 800d49c:	eb10 0f0a 	cmn.w	r0, sl
 800d4a0:	d059      	beq.n	800d556 <tcp_output+0x262>
      seg->next = NULL;
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d4a2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
      pcb->snd_nxt = snd_nxt;
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
      seg->next = NULL;
 800d4a4:	602f      	str	r7, [r5, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d4a6:	bb63      	cbnz	r3, 800d502 <tcp_output+0x20e>
        pcb->unacked = seg;
 800d4a8:	6725      	str	r5, [r4, #112]	; 0x70
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
 800d4aa:	462e      	mov	r6, r5
 800d4ac:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d4ae:	2d00      	cmp	r5, #0
 800d4b0:	f47f af50 	bne.w	800d354 <tcp_output+0x60>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d4b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d152      	bne.n	800d560 <tcp_output+0x26c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d4ba:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800d4be:	e04f      	b.n	800d560 <tcp_output+0x26c>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 800d4c0:	7fa2      	ldrb	r2, [r4, #30]
 800d4c2:	f012 0f44 	tst.w	r2, #68	; 0x44
 800d4c6:	f47f af58 	bne.w	800d37a <tcp_output+0x86>
 800d4ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d4cc:	b143      	cbz	r3, 800d4e0 <tcp_output+0x1ec>
 800d4ce:	6819      	ldr	r1, [r3, #0]
 800d4d0:	2900      	cmp	r1, #0
 800d4d2:	f47f af52 	bne.w	800d37a <tcp_output+0x86>
 800d4d6:	8919      	ldrh	r1, [r3, #8]
 800d4d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800d4da:	4299      	cmp	r1, r3
 800d4dc:	f4bf af4d 	bcs.w	800d37a <tcp_output+0x86>
 800d4e0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f43f af48 	beq.w	800d37a <tcp_output+0x86>
 800d4ea:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800d4ee:	2b07      	cmp	r3, #7
 800d4f0:	d93c      	bls.n	800d56c <tcp_output+0x278>
 800d4f2:	e742      	b.n	800d37a <tcp_output+0x86>
    pcb->rtime = 0;
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    return ERR_RTE;
 800d4f4:	f06f 0003 	mvn.w	r0, #3
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb);
    if (err != ERR_OK) {
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800d4f8:	7fa3      	ldrb	r3, [r4, #30]
 800d4fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4fe:	77a3      	strb	r3, [r4, #30]
      return err;
 800d500:	e039      	b.n	800d576 <tcp_output+0x282>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 800d502:	692b      	ldr	r3, [r5, #16]
 800d504:	6858      	ldr	r0, [r3, #4]
 800d506:	f7fc f995 	bl	8009834 <lwip_ntohl>
 800d50a:	6933      	ldr	r3, [r6, #16]
 800d50c:	4682      	mov	sl, r0
 800d50e:	6858      	ldr	r0, [r3, #4]
 800d510:	f7fc f990 	bl	8009834 <lwip_ntohl>
 800d514:	ebc0 000a 	rsb	r0, r0, sl
 800d518:	2800      	cmp	r0, #0
 800d51a:	da1a      	bge.n	800d552 <tcp_output+0x25e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d51c:	f104 0a70 	add.w	sl, r4, #112	; 0x70
          while (*cur_seg &&
 800d520:	f8da 3000 	ldr.w	r3, [sl]
 800d524:	b92b      	cbnz	r3, 800d532 <tcp_output+0x23e>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
 800d526:	f8da 3000 	ldr.w	r3, [sl]
 800d52a:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800d52c:	f8ca 5000 	str.w	r5, [sl]
 800d530:	e014      	b.n	800d55c <tcp_output+0x268>
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 800d532:	691b      	ldr	r3, [r3, #16]
 800d534:	6858      	ldr	r0, [r3, #4]
 800d536:	f7fc f97d 	bl	8009834 <lwip_ntohl>
 800d53a:	692b      	ldr	r3, [r5, #16]
 800d53c:	4683      	mov	fp, r0
 800d53e:	6858      	ldr	r0, [r3, #4]
 800d540:	f7fc f978 	bl	8009834 <lwip_ntohl>
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 800d544:	ebc0 000b 	rsb	r0, r0, fp
 800d548:	2800      	cmp	r0, #0
 800d54a:	daec      	bge.n	800d526 <tcp_output+0x232>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800d54c:	f8da a000 	ldr.w	sl, [sl]
 800d550:	e7e6      	b.n	800d520 <tcp_output+0x22c>
          }
          seg->next = (*cur_seg);
          (*cur_seg) = seg;
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d552:	6035      	str	r5, [r6, #0]
 800d554:	e7a9      	b.n	800d4aa <tcp_output+0x1b6>
          useg = useg->next;
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d556:	4628      	mov	r0, r5
 800d558:	f7fd fffd 	bl	800b556 <tcp_seg_free>
 800d55c:	4635      	mov	r5, r6
 800d55e:	e7a4      	b.n	800d4aa <tcp_output+0x1b6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800d560:	7fa3      	ldrb	r3, [r4, #30]
 800d562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d566:	77a3      	strb	r3, [r4, #30]
  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
 800d568:	2000      	movs	r0, #0
 800d56a:	e004      	b.n	800d576 <tcp_output+0x282>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 800d56c:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800d570:	f47f af03 	bne.w	800d37a <tcp_output+0x86>
 800d574:	e79e      	b.n	800d4b4 <tcp_output+0x1c0>
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800d576:	b005      	add	sp, #20
 800d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57c:	20049288 	.word	0x20049288
 800d580:	20049278 	.word	0x20049278

0800d584 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800d584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d588:	b085      	sub	sp, #20
 800d58a:	4681      	mov	r9, r0
 800d58c:	460d      	mov	r5, r1
 800d58e:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d590:	2114      	movs	r1, #20
 800d592:	2200      	movs	r2, #0
 800d594:	2001      	movs	r0, #1
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800d596:	461f      	mov	r7, r3
 800d598:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800d59c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d5a0:	f7fd fda0 	bl	800b0e4 <pbuf_alloc>
  if (p == NULL) {
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	b390      	cbz	r0, 800d60e <tcp_rst+0x8a>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800d5a8:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
 800d5aa:	4658      	mov	r0, fp
 800d5ac:	f7fc f93a 	bl	8009824 <lwip_htons>
 800d5b0:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
 800d5b2:	4650      	mov	r0, sl
 800d5b4:	f7fc f936 	bl	8009824 <lwip_htons>
 800d5b8:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
 800d5ba:	4648      	mov	r0, r9
 800d5bc:	f7fc f938 	bl	8009830 <lwip_htonl>
 800d5c0:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
 800d5c2:	4628      	mov	r0, r5
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d5c4:	2500      	movs	r5, #0

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = htons(local_port);
  tcphdr->dest = htons(remote_port);
  tcphdr->seqno = htonl(seqno);
  tcphdr->ackno = htonl(ackno);
 800d5c6:	f7fc f933 	bl	8009830 <lwip_htonl>
 800d5ca:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d5cc:	f245 0014 	movw	r0, #20500	; 0x5014
 800d5d0:	f7fc f928 	bl	8009824 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d5d4:	230b      	movs	r3, #11
  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = htons(local_port);
  tcphdr->dest = htons(remote_port);
  tcphdr->seqno = htonl(seqno);
  tcphdr->ackno = htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d5d6:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(IP_IS_V6(remote_ip), local_ip, remote_ip);
 800d5d8:	4638      	mov	r0, r7
  tcphdr->ackno = htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d5da:	73a3      	strb	r3, [r4, #14]
 800d5dc:	2368      	movs	r3, #104	; 0x68
#endif
  tcphdr->chksum = 0;
 800d5de:	7425      	strb	r5, [r4, #16]
  tcphdr->ackno = htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d5e0:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800d5e2:	7465      	strb	r5, [r4, #17]
  tcphdr->urgp = 0;
 800d5e4:	74a5      	strb	r5, [r4, #18]
 800d5e6:	74e5      	strb	r5, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(IP_IS_V6(remote_ip), local_ip, remote_ip);
 800d5e8:	f7fd f8e8 	bl	800a7bc <ip4_route>
  if (netif != NULL) {
 800d5ec:	b148      	cbz	r0, 800d602 <tcp_rst+0x7e>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(IP_IS_V6(remote_ip), p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800d5ee:	2306      	movs	r3, #6
 800d5f0:	9002      	str	r0, [sp, #8]
 800d5f2:	9500      	str	r5, [sp, #0]
 800d5f4:	463a      	mov	r2, r7
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	4641      	mov	r1, r8
 800d5fa:	23ff      	movs	r3, #255	; 0xff
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f7fd fa11 	bl	800aa24 <ip4_output_if>
  }
  pbuf_free(p);
 800d602:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d604:	b005      	add	sp, #20
 800d606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(IP_IS_V6(remote_ip), p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  }
  pbuf_free(p);
 800d60a:	f7fd bd4b 	b.w	800b0a4 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d60e:	b005      	add	sp, #20
 800d610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d614 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800d614:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800d616:	b1aa      	cbz	r2, 800d644 <tcp_rexmit_rto+0x30>
 800d618:	4613      	mov	r3, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800d61a:	6819      	ldr	r1, [r3, #0]
 800d61c:	b109      	cbz	r1, 800d622 <tcp_rexmit_rto+0xe>
 800d61e:	460b      	mov	r3, r1
 800d620:	e7fb      	b.n	800d61a <tcp_rexmit_rto+0x6>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d622:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800d624:	6019      	str	r1, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800d626:	b911      	cbnz	r1, 800d62e <tcp_rexmit_rto+0x1a>
    pcb->unsent_oversize = seg->oversize_left;
 800d628:	895b      	ldrh	r3, [r3, #10]
 800d62a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800d62e:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d632:	66c2      	str	r2, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d634:	2200      	movs	r2, #0

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800d636:	3301      	adds	r3, #1
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d638:	6702      	str	r2, [r0, #112]	; 0x70

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800d63a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d63e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
 800d640:	f7ff be58 	b.w	800d2f4 <tcp_output>
 800d644:	4770      	bx	lr

0800d646 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800d648:	6f05      	ldr	r5, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d64a:	4604      	mov	r4, r0
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800d64c:	b315      	cbz	r5, 800d694 <tcp_rexmit+0x4e>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800d64e:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 800d650:	f100 066c 	add.w	r6, r0, #108	; 0x6c
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800d654:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800d656:	6833      	ldr	r3, [r6, #0]
 800d658:	b93b      	cbnz	r3, 800d66a <tcp_rexmit+0x24>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800d65a:	6833      	ldr	r3, [r6, #0]
 800d65c:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800d65e:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d660:	682b      	ldr	r3, [r5, #0]
 800d662:	b983      	cbnz	r3, 800d686 <tcp_rexmit+0x40>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d664:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800d668:	e00d      	b.n	800d686 <tcp_rexmit+0x40>
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	6858      	ldr	r0, [r3, #4]
 800d66e:	f7fc f8e1 	bl	8009834 <lwip_ntohl>
 800d672:	692b      	ldr	r3, [r5, #16]
 800d674:	4607      	mov	r7, r0
 800d676:	6858      	ldr	r0, [r3, #4]
 800d678:	f7fc f8dc 	bl	8009834 <lwip_ntohl>
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800d67c:	1a38      	subs	r0, r7, r0
 800d67e:	2800      	cmp	r0, #0
 800d680:	daeb      	bge.n	800d65a <tcp_rexmit+0x14>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800d682:	6836      	ldr	r6, [r6, #0]
 800d684:	e7e7      	b.n	800d656 <tcp_rexmit+0x10>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 800d686:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d68a:	3301      	adds	r3, #1
 800d68c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d690:	2300      	movs	r3, #0
 800d692:	63a3      	str	r3, [r4, #56]	; 0x38
 800d694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d696 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d696:	6f03      	ldr	r3, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d698:	b510      	push	{r4, lr}
 800d69a:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d69c:	b31b      	cbz	r3, 800d6e6 <tcp_rexmit_fast+0x50>
 800d69e:	7f83      	ldrb	r3, [r0, #30]
 800d6a0:	075b      	lsls	r3, r3, #29
 800d6a2:	d420      	bmi.n	800d6e6 <tcp_rexmit_fast+0x50>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800d6a4:	f7ff ffcf 	bl	800d646 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 800d6a8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800d6ac:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800d6b0:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
 800d6b2:	bf8a      	itet	hi
 800d6b4:	0852      	lsrhi	r2, r2, #1
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 800d6b6:	085b      	lsrls	r3, r3, #1
    tcp_rexmit(pcb);

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
      pcb->ssthresh = pcb->snd_wnd / 2;
 800d6b8:	f8a4 204e 	strhhi.w	r2, [r4, #78]	; 0x4e
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d6bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
      pcb->ssthresh = pcb->snd_wnd / 2;
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 800d6be:	bf98      	it	ls
 800d6c0:	f8a4 304e 	strhls.w	r3, [r4, #78]	; 0x4e
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d6c4:	0053      	lsls	r3, r2, #1
 800d6c6:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800d6ca:	4299      	cmp	r1, r3
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 800d6cc:	bf38      	it	cc
 800d6ce:	f8a4 304e 	strhcc.w	r3, [r4, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d6d2:	4413      	add	r3, r2
 800d6d4:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 800d6d8:	4413      	add	r3, r2
 800d6da:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
 800d6de:	7fa3      	ldrb	r3, [r4, #30]
 800d6e0:	f043 0304 	orr.w	r3, r3, #4
 800d6e4:	77a3      	strb	r3, [r4, #30]
 800d6e6:	bd10      	pop	{r4, pc}

0800d6e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d6e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d6ea:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 800d6ec:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800d6ee:	3801      	subs	r0, #1
 800d6f0:	f7fc f89e 	bl	8009830 <lwip_htonl>
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	4602      	mov	r2, r0
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f7ff fb82 	bl	800ce02 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 800d6fe:	4605      	mov	r5, r0
 800d700:	b1c0      	cbz	r0, 800d734 <tcp_keepalive+0x4c>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d702:	1d26      	adds	r6, r4, #4
 800d704:	4630      	mov	r0, r6
 800d706:	f7fd f859 	bl	800a7bc <ip4_route>
  if (netif == NULL) {
 800d70a:	b160      	cbz	r0, 800d726 <tcp_keepalive+0x3e>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d70c:	2100      	movs	r1, #0
 800d70e:	2206      	movs	r2, #6
 800d710:	7aa3      	ldrb	r3, [r4, #10]
 800d712:	9002      	str	r0, [sp, #8]
 800d714:	4628      	mov	r0, r5
 800d716:	e88d 0006 	stmia.w	sp, {r1, r2}
 800d71a:	4621      	mov	r1, r4
 800d71c:	4632      	mov	r2, r6
 800d71e:	f7fd f981 	bl	800aa24 <ip4_output_if>
 800d722:	4604      	mov	r4, r0
 800d724:	e001      	b.n	800d72a <tcp_keepalive+0x42>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    err = ERR_RTE;
 800d726:	f06f 0403 	mvn.w	r4, #3
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d72a:	4628      	mov	r0, r5
 800d72c:	f7fd fcba 	bl	800b0a4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d730:	4620      	mov	r0, r4
 800d732:	e001      	b.n	800d738 <tcp_keepalive+0x50>

  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  if (p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d734:	f04f 30ff 	mov.w	r0, #4294967295
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d738:	b004      	add	sp, #16
 800d73a:	bd70      	pop	{r4, r5, r6, pc}

0800d73c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d73c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800d740:	6f04      	ldr	r4, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d742:	4606      	mov	r6, r0
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;

  if (seg == NULL) {
 800d744:	b914      	cbnz	r4, 800d74c <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800d746:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  }
  if (seg == NULL) {
 800d748:	2c00      	cmp	r4, #0
 800d74a:	d045      	beq.n	800d7d8 <tcp_zero_window_probe+0x9c>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d74c:	6923      	ldr	r3, [r4, #16]
 800d74e:	8998      	ldrh	r0, [r3, #12]
 800d750:	f7fc f86b 	bl	800982a <lwip_ntohs>
 800d754:	f010 0001 	ands.w	r0, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d758:	6923      	ldr	r3, [r4, #16]
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d75a:	bf14      	ite	ne
 800d75c:	8925      	ldrhne	r5, [r4, #8]
 800d75e:	4605      	moveq	r5, r0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	4630      	mov	r0, r6
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d764:	bf1c      	itt	ne
 800d766:	fab5 f585 	clzne	r5, r5
 800d76a:	096d      	lsrne	r5, r5, #5
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d76c:	f085 0101 	eor.w	r1, r5, #1
 800d770:	f7ff fb47 	bl	800ce02 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 800d774:	4607      	mov	r7, r0
 800d776:	b388      	cbz	r0, 800d7dc <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d778:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800d77c:	b15d      	cbz	r5, 800d796 <tcp_zero_window_probe+0x5a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d77e:	f8b8 400c 	ldrh.w	r4, [r8, #12]
 800d782:	2011      	movs	r0, #17
 800d784:	f7fc f84e 	bl	8009824 <lwip_htons>
 800d788:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800d78c:	b2a4      	uxth	r4, r4
 800d78e:	4320      	orrs	r0, r4
 800d790:	f8a8 000c 	strh.w	r0, [r8, #12]
 800d794:	e009      	b.n	800d7aa <tcp_zero_window_probe+0x6e>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d796:	6860      	ldr	r0, [r4, #4]
 800d798:	f108 0114 	add.w	r1, r8, #20
 800d79c:	8922      	ldrh	r2, [r4, #8]
 800d79e:	8903      	ldrh	r3, [r0, #8]
 800d7a0:	1a9b      	subs	r3, r3, r2
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	f7fd fdba 	bl	800b31e <pbuf_copy_partial>
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d7aa:	1d34      	adds	r4, r6, #4
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	f7fd f805 	bl	800a7bc <ip4_route>
  if (netif == NULL) {
 800d7b2:	b160      	cbz	r0, 800d7ce <tcp_zero_window_probe+0x92>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	2206      	movs	r2, #6
 800d7b8:	9002      	str	r0, [sp, #8]
 800d7ba:	4638      	mov	r0, r7
 800d7bc:	7ab3      	ldrb	r3, [r6, #10]
 800d7be:	e88d 0006 	stmia.w	sp, {r1, r2}
 800d7c2:	4622      	mov	r2, r4
 800d7c4:	4631      	mov	r1, r6
 800d7c6:	f7fd f92d 	bl	800aa24 <ip4_output_if>
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	e001      	b.n	800d7d2 <tcp_zero_window_probe+0x96>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    err = ERR_RTE;
 800d7ce:	f06f 0403 	mvn.w	r4, #3
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	f7fd fc66 	bl	800b0a4 <pbuf_free>
  if (seg == NULL) {
    seg = pcb->unsent;
  }
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800d7d8:	4620      	mov	r0, r4
 800d7da:	e001      	b.n	800d7e0 <tcp_zero_window_probe+0xa4>
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if (p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d7e0:	b004      	add	sp, #16
 800d7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7e6 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d7e6:	4770      	bx	lr

0800d7e8 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d7e8:	8943      	ldrh	r3, [r0, #10]
 800d7ea:	2b07      	cmp	r3, #7
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f0:	4606      	mov	r6, r0
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	4689      	mov	r9, r1
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d7f6:	d805      	bhi.n	800d804 <udp_input+0x1c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d7f8:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d7fa:	b005      	add	sp, #20
 800d7fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d800:	f7fd bc50 	b.w	800b0a4 <pbuf_free>

  udphdr = (struct udp_hdr *)p->payload;

#if LWIP_IPV4
  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d804:	4d44      	ldr	r5, [pc, #272]	; (800d918 <udp_input+0x130>)
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d806:	6844      	ldr	r4, [r0, #4]

#if LWIP_IPV4
  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d808:	6829      	ldr	r1, [r5, #0]
 800d80a:	6968      	ldr	r0, [r5, #20]
 800d80c:	f7fd f91b 	bl	800aa46 <ip4_addr_isbroadcast_u32>
 800d810:	4607      	mov	r7, r0
#endif /* LWIP_IPV4 */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 800d812:	8820      	ldrh	r0, [r4, #0]
 800d814:	f7fc f809 	bl	800982a <lwip_ntohs>
 800d818:	4680      	mov	r8, r0
  dest = ntohs(udphdr->dest);
 800d81a:	8860      	ldrh	r0, [r4, #2]
 800d81c:	f7fc f805 	bl	800982a <lwip_ntohs>

#if LWIP_DHCP
  pcb = NULL;
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
 800d820:	2844      	cmp	r0, #68	; 0x44
 800d822:	d110      	bne.n	800d846 <udp_input+0x5e>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
 800d824:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
 800d828:	d13b      	bne.n	800d8a2 <udp_input+0xba>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
 800d82a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d037      	beq.n	800d8a2 <udp_input+0xba>
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d034      	beq.n	800d8a2 <udp_input+0xba>
        /* accept the packet if
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src
           (no need to check for IPv6 since the dhcp struct always uses IPv4) */
        if (ip_addr_isany_val(inp->dhcp->pcb->remote_ip) ||
 800d838:	685a      	ldr	r2, [r3, #4]
 800d83a:	2a00      	cmp	r2, #0
 800d83c:	d069      	beq.n	800d912 <udp_input+0x12a>
 800d83e:	6929      	ldr	r1, [r5, #16]
 800d840:	428a      	cmp	r2, r1
 800d842:	d12e      	bne.n	800d8a2 <udp_input+0xba>
 800d844:	e065      	b.n	800d912 <udp_input+0x12a>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d846:	4935      	ldr	r1, [pc, #212]	; (800d91c <udp_input+0x134>)
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
    local_match = 0;
    uncon_pcb = NULL;
 800d848:	2400      	movs	r4, #0
#if LWIP_IPV4
#if !LWIP_IPV6
            (
#endif /* !LWIP_IPV6 */
            ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
            ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr()) ||
 800d84a:	f8d5 a014 	ldr.w	sl, [r5, #20]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d84e:	f8d1 c000 	ldr.w	ip, [r1]
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 800d852:	46a6      	mov	lr, r4
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
            (ip_addr_isany_val(pcb->remote_ip) ||
              ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d854:	f8d5 b010 	ldr.w	fp, [r5, #16]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d858:	4663      	mov	r3, ip
 800d85a:	9103      	str	r1, [sp, #12]
 800d85c:	b303      	cbz	r3, 800d8a0 <udp_input+0xb8>
      LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
      ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
      LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
 800d85e:	8a5a      	ldrh	r2, [r3, #18]
 800d860:	4282      	cmp	r2, r0
 800d862:	d11a      	bne.n	800d89a <udp_input+0xb2>
 800d864:	681a      	ldr	r2, [r3, #0]
        if (
 800d866:	b907      	cbnz	r7, 800d86a <udp_input+0x82>
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
#if !LWIP_IPV6
            (
#endif /* !LWIP_IPV6 */
            ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 800d868:	b14a      	cbz	r2, 800d87e <udp_input+0x96>
 800d86a:	4552      	cmp	r2, sl
 800d86c:	d007      	beq.n	800d87e <udp_input+0x96>
            ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr()) ||
 800d86e:	b1a7      	cbz	r7, 800d89a <udp_input+0xb2>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), netif_ip4_netmask(inp))))))
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 800d870:	b12a      	cbz	r2, 800d87e <udp_input+0x96>
 800d872:	ea82 020a 	eor.w	r2, r2, sl
 800d876:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800d87a:	420a      	tst	r2, r1
 800d87c:	d10d      	bne.n	800d89a <udp_input+0xb2>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), netif_ip4_netmask(inp))))))
#endif /* IP_SOF_BROADCAST_RECV */
#endif /* LWIP_IPV4 */
              ) {
          local_match = 1;
          if ((uncon_pcb == NULL) &&
 800d87e:	b924      	cbnz	r4, 800d88a <udp_input+0xa2>
 800d880:	7c1a      	ldrb	r2, [r3, #16]
 800d882:	f012 0f04 	tst.w	r2, #4
 800d886:	bf08      	it	eq
 800d888:	461c      	moveq	r4, r3
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
 800d88a:	8a9a      	ldrh	r2, [r3, #20]
 800d88c:	4542      	cmp	r2, r8
 800d88e:	d104      	bne.n	800d89a <udp_input+0xb2>
            (ip_addr_isany_val(pcb->remote_ip) ||
 800d890:	685a      	ldr	r2, [r3, #4]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
 800d892:	2a00      	cmp	r2, #0
 800d894:	d033      	beq.n	800d8fe <udp_input+0x116>
            (ip_addr_isany_val(pcb->remote_ip) ||
 800d896:	455a      	cmp	r2, fp
 800d898:	d031      	beq.n	800d8fe <udp_input+0x116>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d89a:	469e      	mov	lr, r3
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	e7dd      	b.n	800d85c <udp_input+0x74>
      pcb = uncon_pcb;
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d8a0:	b92c      	cbnz	r4, 800d8ae <udp_input+0xc6>
    {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
    }
#endif /* LWIP_IPV4 */
  }
  if (for_us) {
 800d8a2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d8a6:	696b      	ldr	r3, [r5, #20]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d1a5      	bne.n	800d7f8 <udp_input+0x10>
 800d8ac:	2400      	movs	r4, #0
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800d8ae:	f06f 0107 	mvn.w	r1, #7
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	f7fd fbe8 	bl	800b088 <pbuf_header>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	d19d      	bne.n	800d7f8 <udp_input+0x10>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 800d8bc:	b164      	cbz	r4, 800d8d8 <udp_input+0xf0>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d8be:	69a5      	ldr	r5, [r4, #24]
 800d8c0:	2d00      	cmp	r5, #0
 800d8c2:	d099      	beq.n	800d7f8 <udp_input+0x10>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d8c4:	f8cd 8000 	str.w	r8, [sp]
 800d8c8:	4632      	mov	r2, r6
 800d8ca:	4b15      	ldr	r3, [pc, #84]	; (800d920 <udp_input+0x138>)
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	69e0      	ldr	r0, [r4, #28]
 800d8d0:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d8d2:	b005      	add	sp, #20
 800d8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP || LWIP_ICMP6
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (
 800d8d8:	2f00      	cmp	r7, #0
 800d8da:	d18d      	bne.n	800d7f8 <udp_input+0x10>
#if LWIP_IPV4
          !broadcast && !ip_addr_ismulticast(ip_current_dest_addr())
 800d8dc:	696b      	ldr	r3, [r5, #20]
 800d8de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8e2:	2be0      	cmp	r3, #224	; 0xe0
 800d8e4:	d088      	beq.n	800d7f8 <udp_input+0x10>
#if LWIP_IPV6
          !ip6_addr_ismulticast(ip6_current_dest_addr())
#endif /* LWIP_IPV6 */
          ) {
        /* move payload pointer back to ip header */
        pbuf_header_force(p, ip_current_header_tot_len() + UDP_HLEN);
 800d8e6:	4b0c      	ldr	r3, [pc, #48]	; (800d918 <udp_input+0x130>)
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	8999      	ldrh	r1, [r3, #12]
 800d8ec:	3108      	adds	r1, #8
 800d8ee:	b209      	sxth	r1, r1
 800d8f0:	f7fd fbd1 	bl	800b096 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d8f4:	2103      	movs	r1, #3
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f7fc ff26 	bl	800a748 <icmp_dest_unreach>
 800d8fc:	e77c      	b.n	800d7f8 <udp_input+0x10>
      if ((local_match != 0) &&
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
            (ip_addr_isany_val(pcb->remote_ip) ||
              ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d8fe:	f1be 0f00 	cmp.w	lr, #0
 800d902:	d006      	beq.n	800d912 <udp_input+0x12a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d904:	68da      	ldr	r2, [r3, #12]
 800d906:	f8ce 200c 	str.w	r2, [lr, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 800d90a:	9a03      	ldr	r2, [sp, #12]
        /* the first fully matching PCB */
        if (prev != NULL) {
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 800d90c:	f8c3 c00c 	str.w	ip, [r3, #12]
          udp_pcbs = pcb;
 800d910:	6013      	str	r3, [r2, #0]
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), netif_ip4_netmask(inp))))))
#endif /* IP_SOF_BROADCAST_RECV */
#endif /* LWIP_IPV4 */
              ) {
          local_match = 1;
          if ((uncon_pcb == NULL) &&
 800d912:	461c      	mov	r4, r3
 800d914:	e7cb      	b.n	800d8ae <udp_input+0xc6>
 800d916:	bf00      	nop
 800d918:	20043160 	.word	0x20043160
 800d91c:	2004928c 	.word	0x2004928c
 800d920:	20043170 	.word	0x20043170

0800d924 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct udp_pcb *ipcb;
  u8_t rebind;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800d928:	2800      	cmp	r0, #0
 800d92a:	d04f      	beq.n	800d9cc <udp_bind+0xa8>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d92c:	4f2b      	ldr	r7, [pc, #172]	; (800d9dc <udp_bind+0xb8>)
 800d92e:	f8d7 e000 	ldr.w	lr, [r7]
 800d932:	4673      	mov	r3, lr
 800d934:	b11b      	cbz	r3, 800d93e <udp_bind+0x1a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d936:	4283      	cmp	r3, r0
 800d938:	d003      	beq.n	800d942 <udp_bind+0x1e>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	e7fa      	b.n	800d934 <udp_bind+0x10>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d93e:	461e      	mov	r6, r3
 800d940:	e000      	b.n	800d944 <udp_bind+0x20>
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      rebind = 1;
 800d942:	2601      	movs	r6, #1
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800d944:	b10a      	cbz	r2, 800d94a <udp_bind+0x26>
 800d946:	4673      	mov	r3, lr
 800d948:	e022      	b.n	800d990 <udp_bind+0x6c>
 800d94a:	4b25      	ldr	r3, [pc, #148]	; (800d9e0 <udp_bind+0xbc>)
 800d94c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
{
  u16_t n = 0;
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d950:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800d954:	881d      	ldrh	r5, [r3, #0]
 800d956:	4565      	cmp	r5, ip
 800d958:	bf16      	itet	ne
 800d95a:	3501      	addne	r5, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d95c:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
{
  u16_t n = 0;
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d960:	b2aa      	uxthne	r2, r5
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d962:	4675      	mov	r5, lr
 800d964:	b17d      	cbz	r5, 800d986 <udp_bind+0x62>
    if (pcb->local_port == udp_port) {
 800d966:	f8b5 8012 	ldrh.w	r8, [r5, #18]
 800d96a:	4590      	cmp	r8, r2
 800d96c:	d109      	bne.n	800d982 <udp_bind+0x5e>
 800d96e:	3c01      	subs	r4, #1
 800d970:	4615      	mov	r5, r2
 800d972:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d974:	2c00      	cmp	r4, #0
 800d976:	d1ee      	bne.n	800d956 <udp_bind+0x32>
 800d978:	801a      	strh	r2, [r3, #0]
  if (port == 0) {
    port = udp_new_port();
    if (port == 0) {
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d97a:	f06f 0007 	mvn.w	r0, #7
 800d97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d982:	68ed      	ldr	r5, [r5, #12]
 800d984:	e7ee      	b.n	800d964 <udp_bind+0x40>
 800d986:	801a      	strh	r2, [r3, #0]
 800d988:	e015      	b.n	800d9b6 <udp_bind+0x92>
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
      if (pcb != ipcb) {
 800d98a:	4283      	cmp	r3, r0
 800d98c:	d103      	bne.n	800d996 <udp_bind+0x72>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1fa      	bne.n	800d98a <udp_bind+0x66>
 800d994:	e00f      	b.n	800d9b6 <udp_bind+0x92>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) && IP_PCB_IPVER_EQ(pcb, ipcb) &&
 800d996:	8a5c      	ldrh	r4, [r3, #18]
 800d998:	4294      	cmp	r4, r2
 800d99a:	d1f8      	bne.n	800d98e <udp_bind+0x6a>
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d0ec      	beq.n	800d97a <udp_bind+0x56>
              /* IP address matches, or one is IP_ADDR_ANY? */
                (ip_addr_isany(&ipcb->local_ip) ||
 800d9a0:	681d      	ldr	r5, [r3, #0]
 800d9a2:	2d00      	cmp	r5, #0
 800d9a4:	d0e9      	beq.n	800d97a <udp_bind+0x56>
 800d9a6:	2900      	cmp	r1, #0
 800d9a8:	d0e7      	beq.n	800d97a <udp_bind+0x56>
                 ip_addr_isany(ipaddr) ||
 800d9aa:	680c      	ldr	r4, [r1, #0]
 800d9ac:	2c00      	cmp	r4, #0
 800d9ae:	d0e4      	beq.n	800d97a <udp_bind+0x56>
 800d9b0:	42a5      	cmp	r5, r4
 800d9b2:	d1ec      	bne.n	800d98e <udp_bind+0x6a>
 800d9b4:	e7e1      	b.n	800d97a <udp_bind+0x56>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d9b6:	b101      	cbz	r1, 800d9ba <udp_bind+0x96>
 800d9b8:	6809      	ldr	r1, [r1, #0]
 800d9ba:	6001      	str	r1, [r0, #0]

  pcb->local_port = port;
 800d9bc:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d9be:	b94e      	cbnz	r6, 800d9d4 <udp_bind+0xb0>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d9c0:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 800d9c4:	6038      	str	r0, [r7, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  struct udp_pcb *ipcb;
  u8_t rebind;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
 800d9cc:	f06f 0005 	mvn.w	r0, #5
 800d9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d9d4:	2000      	movs	r0, #0
}
 800d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9da:	bf00      	nop
 800d9dc:	2004928c 	.word	0x2004928c
 800d9e0:	20010080 	.word	0x20010080

0800d9e4 <udp_sendto_if_src>:

/** Same as udp_sendto_if(), but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d9e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9e8:	460e      	mov	r6, r1
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	4690      	mov	r8, r2
 800d9ee:	4699      	mov	r9, r3
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	d03d      	beq.n	800da72 <udp_sendto_if_src+0x8e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d9f6:	8a42      	ldrh	r2, [r0, #18]
 800d9f8:	b132      	cbz	r2, 800da08 <udp_sendto_if_src+0x24>
      return err;
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800d9fa:	2108      	movs	r1, #8
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f7fd fb43 	bl	800b088 <pbuf_header>
 800da02:	b938      	cbnz	r0, 800da14 <udp_sendto_if_src+0x30>
 800da04:	4635      	mov	r5, r6
 800da06:	e011      	b.n	800da2c <udp_sendto_if_src+0x48>
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800da08:	4601      	mov	r1, r0
 800da0a:	f7ff ff8b 	bl	800d924 <udp_bind>
    if (err != ERR_OK) {
 800da0e:	2800      	cmp	r0, #0
 800da10:	d0f3      	beq.n	800d9fa <udp_sendto_if_src+0x16>
 800da12:	e035      	b.n	800da80 <udp_sendto_if_src+0x9c>
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800da14:	2200      	movs	r2, #0
 800da16:	2108      	movs	r1, #8
 800da18:	2001      	movs	r0, #1
 800da1a:	f7fd fb63 	bl	800b0e4 <pbuf_alloc>
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800da1e:	4605      	mov	r5, r0
 800da20:	b350      	cbz	r0, 800da78 <udp_sendto_if_src+0x94>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
    }
    if (p->tot_len != 0) {
 800da22:	8933      	ldrh	r3, [r6, #8]
 800da24:	b113      	cbz	r3, 800da2c <udp_sendto_if_src+0x48>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800da26:	4631      	mov	r1, r6
 800da28:	f7fd fc23 	bl	800b272 <pbuf_chain>
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800da2c:	686f      	ldr	r7, [r5, #4]
  udphdr->src = htons(pcb->local_port);
 800da2e:	8a60      	ldrh	r0, [r4, #18]
 800da30:	f7fb fef8 	bl	8009824 <lwip_htons>
 800da34:	8038      	strh	r0, [r7, #0]
  udphdr->dest = htons(dst_port);
 800da36:	4648      	mov	r0, r9
 800da38:	f7fb fef4 	bl	8009824 <lwip_htons>
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800da3c:	2300      	movs	r3, #0
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  udphdr->src = htons(pcb->local_port);
  udphdr->dest = htons(dst_port);
 800da3e:	8078      	strh	r0, [r7, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800da40:	71bb      	strb	r3, [r7, #6]
 800da42:	71fb      	strb	r3, [r7, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 800da44:	8928      	ldrh	r0, [r5, #8]
 800da46:	f7fb feed 	bl	8009824 <lwip_htons>

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(PCB_ISIPV6(pcb), q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800da4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 800da4c:	80b8      	strh	r0, [r7, #4]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(PCB_ISIPV6(pcb), q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800da4e:	4628      	mov	r0, r5
 800da50:	7aa3      	ldrb	r3, [r4, #10]
 800da52:	9202      	str	r2, [sp, #8]
 800da54:	2211      	movs	r2, #17
 800da56:	990d      	ldr	r1, [sp, #52]	; 0x34
 800da58:	9201      	str	r2, [sp, #4]
 800da5a:	7a62      	ldrb	r2, [r4, #9]
 800da5c:	9200      	str	r2, [sp, #0]
 800da5e:	4642      	mov	r2, r8
 800da60:	f7fc ff94 	bl	800a98c <ip4_output_if_src>

  /* TODO: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800da64:	42b5      	cmp	r5, r6

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(PCB_ISIPV6(pcb), q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800da66:	4604      	mov	r4, r0

  /* TODO: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800da68:	d009      	beq.n	800da7e <udp_sendto_if_src+0x9a>
    /* free the header pbuf */
    pbuf_free(q);
 800da6a:	4628      	mov	r0, r5
 800da6c:	f7fd fb1a 	bl	800b0a4 <pbuf_free>
 800da70:	e005      	b.n	800da7e <udp_sendto_if_src+0x9a>
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800da72:	f06f 0005 	mvn.w	r0, #5
 800da76:	e003      	b.n	800da80 <udp_sendto_if_src+0x9c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800da78:	f04f 30ff 	mov.w	r0, #4294967295
 800da7c:	e000      	b.n	800da80 <udp_sendto_if_src+0x9c>
    q = NULL;
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800da7e:	4620      	mov	r0, r4
}
 800da80:	b005      	add	sp, #20
 800da82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800da86 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800da86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da88:	9c06      	ldr	r4, [sp, #24]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800da8a:	b160      	cbz	r0, 800daa6 <udp_sendto_if+0x20>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 800da8c:	6805      	ldr	r5, [r0, #0]
 800da8e:	b90d      	cbnz	r5, 800da94 <udp_sendto_if+0xe>
    /* use outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800da90:	1d25      	adds	r5, r4, #4
 800da92:	e003      	b.n	800da9c <udp_sendto_if+0x16>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800da94:	6866      	ldr	r6, [r4, #4]
 800da96:	42b5      	cmp	r5, r6
 800da98:	d105      	bne.n	800daa6 <udp_sendto_if+0x20>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 800da9a:	4605      	mov	r5, r0
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800da9c:	e88d 0030 	stmia.w	sp, {r4, r5}
 800daa0:	f7ff ffa0 	bl	800d9e4 <udp_sendto_if_src>
 800daa4:	e001      	b.n	800daaa <udp_sendto_if+0x24>
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800daa6:	f06f 0005 	mvn.w	r0, #5
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800daaa:	b002      	add	sp, #8
 800daac:	bd70      	pop	{r4, r5, r6, pc}

0800daae <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800daae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dab0:	460e      	mov	r6, r1
 800dab2:	4615      	mov	r5, r2
 800dab4:	461f      	mov	r7, r3
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800dab6:	4604      	mov	r4, r0
 800dab8:	b158      	cbz	r0, 800dad2 <udp_sendto+0x24>
    }
  }
#endif /* LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) */

  /* find the outgoing network interface for this packet */
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, dst_ip_route);
 800daba:	4610      	mov	r0, r2
 800dabc:	f7fc fe7e 	bl	800a7bc <ip4_route>

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800dac0:	b150      	cbz	r0, 800dad8 <udp_sendto+0x2a>
    return ERR_RTE;
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800dac2:	9000      	str	r0, [sp, #0]
 800dac4:	463b      	mov	r3, r7
 800dac6:	462a      	mov	r2, r5
 800dac8:	4631      	mov	r1, r6
 800daca:	4620      	mov	r0, r4
 800dacc:	f7ff ffdb 	bl	800da86 <udp_sendto_if>
 800dad0:	e004      	b.n	800dadc <udp_sendto+0x2e>
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800dad2:	f06f 0005 	mvn.w	r0, #5
 800dad6:	e001      	b.n	800dadc <udp_sendto+0x2e>
  if (netif == NULL) {
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800dad8:	f06f 0003 	mvn.w	r0, #3
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800dadc:	b003      	add	sp, #12
 800dade:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dae0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800dae0:	4602      	mov	r2, r0
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800dae2:	8a83      	ldrh	r3, [r0, #20]
 800dae4:	3204      	adds	r2, #4
 800dae6:	f7ff bfe2 	b.w	800daae <udp_sendto>
	...

0800daec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	460d      	mov	r5, r1
 800daf0:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800daf2:	4604      	mov	r4, r0
 800daf4:	b1d8      	cbz	r0, 800db2e <udp_connect+0x42>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800daf6:	8a42      	ldrh	r2, [r0, #18]
 800daf8:	b112      	cbz	r2, 800db00 <udp_connect+0x14>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800dafa:	b13d      	cbz	r5, 800db0c <udp_connect+0x20>
 800dafc:	682d      	ldr	r5, [r5, #0]
 800dafe:	e005      	b.n	800db0c <udp_connect+0x20>
  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800db00:	4601      	mov	r1, r0
 800db02:	f7ff ff0f 	bl	800d924 <udp_bind>
    if (err != ERR_OK) {
 800db06:	2800      	cmp	r0, #0
 800db08:	d0f7      	beq.n	800dafa <udp_connect+0xe>
 800db0a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800db0c:	7c23      	ldrb	r3, [r4, #16]
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800db0e:	6065      	str	r5, [r4, #4]
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800db10:	f043 0304 	orr.w	r3, r3, #4
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  pcb->remote_port = port;
 800db14:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800db16:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800db18:	4b07      	ldr	r3, [pc, #28]	; (800db38 <udp_connect+0x4c>)
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	4610      	mov	r0, r2
 800db1e:	b118      	cbz	r0, 800db28 <udp_connect+0x3c>
    if (pcb == ipcb) {
 800db20:	42a0      	cmp	r0, r4
 800db22:	d007      	beq.n	800db34 <udp_connect+0x48>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800db24:	68c0      	ldr	r0, [r0, #12]
 800db26:	e7fa      	b.n	800db1e <udp_connect+0x32>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800db28:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800db2a:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
 800db2e:	f06f 0005 	mvn.w	r0, #5
 800db32:	bd70      	pop	{r4, r5, r6, pc}

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    if (pcb == ipcb) {
      /* already on the list, just return */
      return ERR_OK;
 800db34:	2000      	movs	r0, #0
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800db36:	bd70      	pop	{r4, r5, r6, pc}
 800db38:	2004928c 	.word	0x2004928c

0800db3c <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800db3c:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800db3e:	61c2      	str	r2, [r0, #28]
 800db40:	4770      	bx	lr
	...

0800db44 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800db44:	4a0a      	ldr	r2, [pc, #40]	; (800db70 <udp_remove+0x2c>)
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800db46:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800db48:	6813      	ldr	r3, [r2, #0]
 800db4a:	4283      	cmp	r3, r0
 800db4c:	d105      	bne.n	800db5a <udp_remove+0x16>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800db4e:	68c3      	ldr	r3, [r0, #12]
 800db50:	6013      	str	r3, [r2, #0]
 800db52:	e009      	b.n	800db68 <udp_remove+0x24>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800db54:	68da      	ldr	r2, [r3, #12]
 800db56:	b91a      	cbnz	r2, 800db60 <udp_remove+0x1c>
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800db58:	4613      	mov	r3, r2
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1fa      	bne.n	800db54 <udp_remove+0x10>
 800db5e:	e003      	b.n	800db68 <udp_remove+0x24>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800db60:	4291      	cmp	r1, r2
 800db62:	d1f9      	bne.n	800db58 <udp_remove+0x14>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800db64:	68ca      	ldr	r2, [r1, #12]
 800db66:	60da      	str	r2, [r3, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800db68:	2000      	movs	r0, #0
 800db6a:	f7fd b9e1 	b.w	800af30 <memp_free>
 800db6e:	bf00      	nop
 800db70:	2004928c 	.word	0x2004928c

0800db74 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800db74:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800db76:	2000      	movs	r0, #0
 800db78:	f7fd f9ce 	bl	800af18 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800db7c:	4604      	mov	r4, r0
 800db7e:	b128      	cbz	r0, 800db8c <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800db80:	2220      	movs	r2, #32
 800db82:	2100      	movs	r1, #0
 800db84:	f003 ff68 	bl	8011a58 <memset>
    pcb->ttl = UDP_TTL;
 800db88:	23ff      	movs	r3, #255	; 0xff
 800db8a:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    pcb->mcast_ttl = UDP_TTL;
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800db8c:	4620      	mov	r0, r4
 800db8e:	bd10      	pop	{r4, pc}

0800db90 <udp_netif_ipv4_addr_changed>:
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change
 */
void udp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 800db90:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip4_addr_isany(new_addr)) {
 800db92:	b169      	cbz	r1, 800dbb0 <udp_netif_ipv4_addr_changed+0x20>
 800db94:	680b      	ldr	r3, [r1, #0]
 800db96:	b15b      	cbz	r3, 800dbb0 <udp_netif_ipv4_addr_changed+0x20>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db98:	4b06      	ldr	r3, [pc, #24]	; (800dbb4 <udp_netif_ipv4_addr_changed+0x24>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	b143      	cbz	r3, 800dbb0 <udp_netif_ipv4_addr_changed+0x20>
      /* Is this an IPv4 pcb? */
      if (!IP_IS_V6_VAL(upcb->local_ip)) {
        /* PCB bound to current local interface address? */
        if (!ip4_addr_isany(ip_2_ip4(&upcb->local_ip)) &&
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	b122      	cbz	r2, 800dbac <udp_netif_ipv4_addr_changed+0x1c>
 800dba2:	6804      	ldr	r4, [r0, #0]
 800dba4:	42a2      	cmp	r2, r4
            ip4_addr_cmp(ip_2_ip4(&upcb->local_ip), old_addr)) {
          /* The PCB is bound to the old ipaddr and
            * is set to bound to the new one instead */
          ip_addr_copy_from_ip4(upcb->local_ip, *new_addr);
 800dba6:	bf04      	itt	eq
 800dba8:	680a      	ldreq	r2, [r1, #0]
 800dbaa:	601a      	streq	r2, [r3, #0]
void udp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip4_addr_isany(new_addr)) {
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	e7f5      	b.n	800db9c <udp_netif_ipv4_addr_changed+0xc>
 800dbb0:	bd10      	pop	{r4, pc}
 800dbb2:	bf00      	nop
 800dbb4:	2004928c 	.word	0x2004928c

0800dbb8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dbb8:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dbba:	2618      	movs	r6, #24
 800dbbc:	4d09      	ldr	r5, [pc, #36]	; (800dbe4 <etharp_free_entry+0x2c>)
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800dbbe:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800dbc0:	4346      	muls	r6, r0
 800dbc2:	59a8      	ldr	r0, [r5, r6]
 800dbc4:	b118      	cbz	r0, 800dbce <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800dbc6:	f7fd fa6d 	bl	800b0a4 <pbuf_free>
    arp_table[i].q = NULL;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800dbce:	2018      	movs	r0, #24
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	fb00 5004 	mla	r0, r0, r4, r5
 800dbd6:	7503      	strb	r3, [r0, #20]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800dbd8:	8243      	strh	r3, [r0, #18]
  arp_table[i].netif = NULL;
 800dbda:	6083      	str	r3, [r0, #8]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800dbdc:	6043      	str	r3, [r0, #4]
  arp_table[i].ethaddr = ethzero;
 800dbde:	60c3      	str	r3, [r0, #12]
 800dbe0:	8203      	strh	r3, [r0, #16]
 800dbe2:	bd70      	pop	{r4, r5, r6, pc}
 800dbe4:	20042e74 	.word	0x20042e74

0800dbe8 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, const struct eth_addr *dst)
{
 800dbe8:	b430      	push	{r4, r5}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 800dbea:	684c      	ldr	r4, [r1, #4]
  if (!LWIP_HOOK_VLAN_SET(netif, ethhdr, vlanhdr)) {
    /* packet shall not contain VLAN header, so hide it and set correct ethertype */
    pbuf_header(p, -SIZEOF_VLAN_HDR);
    ethhdr = (struct eth_hdr *)p->payload;
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    ethhdr->type = PP_HTONS(ETHTYPE_IP);
 800dbec:	2508      	movs	r5, #8
 800dbee:	7325      	strb	r5, [r4, #12]
 800dbf0:	2500      	movs	r5, #0
 800dbf2:	7365      	strb	r5, [r4, #13]
#if ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET)
  }
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800dbf4:	681d      	ldr	r5, [r3, #0]
 800dbf6:	6025      	str	r5, [r4, #0]
 800dbf8:	889b      	ldrh	r3, [r3, #4]
 800dbfa:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
 800dbfc:	6813      	ldr	r3, [r2, #0]
 800dbfe:	f8c4 3006 	str.w	r3, [r4, #6]
 800dc02:	8893      	ldrh	r3, [r2, #4]
 800dc04:	8163      	strh	r3, [r4, #10]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 800dc06:	6983      	ldr	r3, [r0, #24]
}
 800dc08:	bc30      	pop	{r4, r5}
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  ETHADDR32_COPY(&ethhdr->dest, dst);
  ETHADDR16_COPY(&ethhdr->src, src);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 800dc0a:	4718      	bx	r3

0800dc0c <etharp_find_entry.isra.0>:
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800dc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc10:	2300      	movs	r3, #0
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800dc12:	250a      	movs	r5, #10
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800dc14:	4607      	mov	r7, r0
 800dc16:	468b      	mov	fp, r1
 800dc18:	4a31      	ldr	r2, [pc, #196]	; (800dce0 <etharp_find_entry.isra.0+0xd4>)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	462c      	mov	r4, r5
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dc1e:	4698      	mov	r8, r3
 800dc20:	469c      	mov	ip, r3
 800dc22:	469e      	mov	lr, r3
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
 800dc24:	462e      	mov	r6, r5
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dc26:	2e0a      	cmp	r6, #10
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
 800dc28:	f892 9000 	ldrb.w	r9, [r2]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dc2c:	d104      	bne.n	800dc38 <etharp_find_entry.isra.0+0x2c>
 800dc2e:	f1b9 0f00 	cmp.w	r9, #0
 800dc32:	d104      	bne.n	800dc3e <etharp_find_entry.isra.0+0x32>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800dc34:	b25e      	sxtb	r6, r3
 800dc36:	e018      	b.n	800dc6a <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dc38:	f1b9 0f00 	cmp.w	r9, #0
 800dc3c:	d015      	beq.n	800dc6a <etharp_find_entry.isra.0+0x5e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dc3e:	b147      	cbz	r7, 800dc52 <etharp_find_entry.isra.0+0x46>
 800dc40:	6839      	ldr	r1, [r7, #0]
 800dc42:	468a      	mov	sl, r1
 800dc44:	f852 1c10 	ldr.w	r1, [r2, #-16]
 800dc48:	458a      	cmp	sl, r1
 800dc4a:	d102      	bne.n	800dc52 <etharp_find_entry.isra.0+0x46>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dc4c:	b258      	sxtb	r0, r3
 800dc4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dc52:	f1b9 0f01 	cmp.w	r9, #1
 800dc56:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800dc5a:	d13b      	bne.n	800dcd4 <etharp_find_entry.isra.0+0xc8>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dc5c:	f852 1c14 	ldr.w	r1, [r2, #-20]
 800dc60:	b399      	cbz	r1, 800dcca <etharp_find_entry.isra.0+0xbe>
          if (arp_table[i].ctime >= age_queue) {
 800dc62:	45f1      	cmp	r9, lr
 800dc64:	d301      	bcc.n	800dc6a <etharp_find_entry.isra.0+0x5e>
            old_queue = i;
 800dc66:	b25d      	sxtb	r5, r3
 800dc68:	46ce      	mov	lr, r9
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	3218      	adds	r2, #24
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc6e:	2b0a      	cmp	r3, #10
 800dc70:	d1d9      	bne.n	800dc26 <etharp_find_entry.isra.0+0x1a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dc72:	f01b 0f02 	tst.w	fp, #2
 800dc76:	d124      	bne.n	800dcc2 <etharp_find_entry.isra.0+0xb6>
 800dc78:	2e0a      	cmp	r6, #10
 800dc7a:	d103      	bne.n	800dc84 <etharp_find_entry.isra.0+0x78>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dc7c:	f01b 0f01 	tst.w	fp, #1
 800dc80:	d102      	bne.n	800dc88 <etharp_find_entry.isra.0+0x7c>
 800dc82:	e01e      	b.n	800dcc2 <etharp_find_entry.isra.0+0xb6>
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
 800dc84:	b2f4      	uxtb	r4, r6
 800dc86:	e00d      	b.n	800dca4 <etharp_find_entry.isra.0+0x98>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800dc88:	2c0a      	cmp	r4, #10
 800dc8a:	d001      	beq.n	800dc90 <etharp_find_entry.isra.0+0x84>
      /* recycle oldest stable*/
      i = old_stable;
 800dc8c:	b2e4      	uxtb	r4, r4
 800dc8e:	e006      	b.n	800dc9e <etharp_find_entry.isra.0+0x92>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dc90:	280a      	cmp	r0, #10
 800dc92:	d001      	beq.n	800dc98 <etharp_find_entry.isra.0+0x8c>
      /* recycle oldest pending */
      i = old_pending;
 800dc94:	b2c4      	uxtb	r4, r0
 800dc96:	e002      	b.n	800dc9e <etharp_find_entry.isra.0+0x92>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dc98:	2d0a      	cmp	r5, #10
 800dc9a:	d012      	beq.n	800dcc2 <etharp_find_entry.isra.0+0xb6>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dc9c:	b2ec      	uxtb	r4, r5
      return (s8_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800dc9e:	4620      	mov	r0, r4
 800dca0:	f7ff ff8a 	bl	800dbb8 <etharp_free_entry>
 800dca4:	490f      	ldr	r1, [pc, #60]	; (800dce4 <etharp_find_entry.isra.0+0xd8>)
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dca6:	b127      	cbz	r7, 800dcb2 <etharp_find_entry.isra.0+0xa6>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dca8:	2218      	movs	r2, #24
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	fb02 1204 	mla	r2, r2, r4, r1
 800dcb0:	6053      	str	r3, [r2, #4]
  }
  arp_table[i].ctime = 0;
 800dcb2:	2318      	movs	r3, #24
 800dcb4:	2200      	movs	r2, #0
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800dcb6:	b260      	sxtb	r0, r4
  /* IP address given? */
  if (ipaddr != NULL) {
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  }
  arp_table[i].ctime = 0;
 800dcb8:	fb03 1304 	mla	r3, r3, r4, r1
 800dcbc:	825a      	strh	r2, [r3, #18]
 800dcbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800dcc2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            age_queue = arp_table[i].ctime;
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dcca:	45e1      	cmp	r9, ip
 800dccc:	d3cd      	bcc.n	800dc6a <etharp_find_entry.isra.0+0x5e>
            old_pending = i;
 800dcce:	b258      	sxtb	r0, r3
 800dcd0:	46cc      	mov	ip, r9
 800dcd2:	e7ca      	b.n	800dc6a <etharp_find_entry.isra.0+0x5e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dcd4:	45c1      	cmp	r9, r8
            old_stable = i;
 800dcd6:	bf24      	itt	cs
 800dcd8:	b25c      	sxtbcs	r4, r3
 800dcda:	46c8      	movcs	r8, r9
 800dcdc:	e7c5      	b.n	800dc6a <etharp_find_entry.isra.0+0x5e>
 800dcde:	bf00      	nop
 800dce0:	20042e88 	.word	0x20042e88
 800dce4:	20042e74 	.word	0x20042e74

0800dce8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcec:	4606      	mov	r6, r0
 800dcee:	4617      	mov	r7, r2
 800dcf0:	4698      	mov	r8, r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	b919      	cbnz	r1, 800dcfe <etharp_update_arp_entry+0x16>
      ip4_addr_isbroadcast(ipaddr, netif) ||
      ip4_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dcf6:	f06f 000e 	mvn.w	r0, #14
 800dcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dcfe:	6808      	ldr	r0, [r1, #0]
 800dd00:	2800      	cmp	r0, #0
 800dd02:	d0f8      	beq.n	800dcf6 <etharp_update_arp_entry+0xe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd04:	4631      	mov	r1, r6
 800dd06:	f7fc fe9e 	bl	800aa46 <ip4_addr_isbroadcast_u32>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d1f2      	bne.n	800dcf6 <etharp_update_arp_entry+0xe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dd10:	6822      	ldr	r2, [r4, #0]
 800dd12:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800dd16:	2ae0      	cmp	r2, #224	; 0xe0
 800dd18:	d0ed      	beq.n	800dcf6 <etharp_update_arp_entry+0xe>
      ip4_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dd1a:	4641      	mov	r1, r8
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	f7ff ff75 	bl	800dc0c <etharp_find_entry.isra.0>
  /* bail out if no entry could be found */
  if (i < 0) {
 800dd22:	2800      	cmp	r0, #0
 800dd24:	db1f      	blt.n	800dd66 <etharp_update_arp_entry+0x7e>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd26:	2318      	movs	r3, #24
 800dd28:	4910      	ldr	r1, [pc, #64]	; (800dd6c <etharp_update_arp_entry+0x84>)
 800dd2a:	4343      	muls	r3, r0
 800dd2c:	2002      	movs	r0, #2
 800dd2e:	18ca      	adds	r2, r1, r3
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800dd30:	f103 0408 	add.w	r4, r3, #8
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dd34:	7510      	strb	r0, [r2, #20]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800dd36:	440c      	add	r4, r1
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dd38:	6096      	str	r6, [r2, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800dd3a:	6838      	ldr	r0, [r7, #0]
 800dd3c:	6060      	str	r0, [r4, #4]
 800dd3e:	88b8      	ldrh	r0, [r7, #4]
 800dd40:	8120      	strh	r0, [r4, #8]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dd42:	58cc      	ldr	r4, [r1, r3]

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dd44:	8255      	strh	r5, [r2, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dd46:	b16c      	cbz	r4, 800dd64 <etharp_update_arp_entry+0x7c>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800dd48:	50cd      	str	r5, [r1, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 800dd4a:	f106 022d 	add.w	r2, r6, #45	; 0x2d
 800dd4e:	463b      	mov	r3, r7
 800dd50:	4621      	mov	r1, r4
 800dd52:	4630      	mov	r0, r6
 800dd54:	f7ff ff48 	bl	800dbe8 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f7fd f9a3 	bl	800b0a4 <pbuf_free>
  }
  return ERR_OK;
 800dd5e:	4628      	mov	r0, r5
 800dd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd64:	4620      	mov	r0, r4
}
 800dd66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20042e74 	.word	0x20042e74

0800dd70 <etharp_raw.constprop.2>:
 */
#if !LWIP_AUTOIP
static
#endif /* LWIP_AUTOIP */
err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 800dd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd74:	4606      	mov	r6, r0
 800dd76:	460f      	mov	r7, r1
 800dd78:	4690      	mov	r8, r2
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW_TX, SIZEOF_ETHARP_PACKET_TX, PBUF_RAM);
 800dd7a:	212a      	movs	r1, #42	; 0x2a
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	2003      	movs	r0, #3
 */
#if !LWIP_AUTOIP
static
#endif /* LWIP_AUTOIP */
err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 800dd80:	4699      	mov	r9, r3
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW_TX, SIZEOF_ETHARP_PACKET_TX, PBUF_RAM);
 800dd82:	f7fd f9af 	bl	800b0e4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800dd86:	4605      	mov	r5, r0
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d03a      	beq.n	800de02 <etharp_raw.constprop.2+0x92>
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET_TX));

  ethhdr = (struct eth_hdr *)p->payload;
 800dd8c:	6844      	ldr	r4, [r0, #4]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 800dd8e:	2001      	movs	r0, #1
 800dd90:	f7fb fd48 	bl	8009824 <lwip_htons>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 800dd94:	2104      	movs	r1, #4
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 800dd96:	82a0      	strh	r0, [r4, #20]
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);

  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800dd98:	4630      	mov	r0, r6
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip4_addr_islinklocal(ipsrc_addr) ? (const u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800dd9a:	f8d9 3000 	ldr.w	r3, [r9]
 800dd9e:	f8c4 3016 	str.w	r3, [r4, #22]
 800dda2:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800dda6:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800dda8:	4b18      	ldr	r3, [pc, #96]	; (800de0c <etharp_raw.constprop.2+0x9c>)
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	889b      	ldrh	r3, [r3, #4]
 800ddae:	6222      	str	r2, [r4, #32]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ddb0:	2201      	movs	r2, #1
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip4_addr_islinklocal(ipsrc_addr) ? (const u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800ddb2:	84a3      	strh	r3, [r4, #36]	; 0x24
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800ddb4:	9b08      	ldr	r3, [sp, #32]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800ddba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddbc:	681b      	ldr	r3, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ddbe:	73e2      	strb	r2, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ddc0:	2208      	movs	r2, #8
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800ddc2:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ddc6:	2300      	movs	r3, #0
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ddc8:	7422      	strb	r2, [r4, #16]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ddca:	73a3      	strb	r3, [r4, #14]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ddcc:	7463      	strb	r3, [r4, #17]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 800ddce:	2306      	movs	r3, #6
  hdr->protolen = sizeof(ip4_addr_t);
 800ddd0:	74e1      	strb	r1, [r4, #19]
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);

  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800ddd2:	4629      	mov	r1, r5
  if (!LWIP_HOOK_VLAN_SET(netif, ethhdr, vlanhdr)) {
    /* packet shall not contain VLAN header, so hide it and set correct ethertype */
    pbuf_header(p, -SIZEOF_VLAN_HDR);
    ethhdr = (struct eth_hdr *)p->payload;
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 800ddd4:	7322      	strb	r2, [r4, #12]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 800ddd6:	74a3      	strb	r3, [r4, #18]
  if (!LWIP_HOOK_VLAN_SET(netif, ethhdr, vlanhdr)) {
    /* packet shall not contain VLAN header, so hide it and set correct ethertype */
    pbuf_header(p, -SIZEOF_VLAN_HDR);
    ethhdr = (struct eth_hdr *)p->payload;
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 800ddd8:	7363      	strb	r3, [r4, #13]

  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 800ddda:	f8d8 3000 	ldr.w	r3, [r8]
 800ddde:	6023      	str	r3, [r4, #0]
 800dde0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800dde4:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	f8c4 3006 	str.w	r3, [r4, #6]
 800ddec:	88bb      	ldrh	r3, [r7, #4]
 800ddee:	8163      	strh	r3, [r4, #10]

  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800ddf0:	69b3      	ldr	r3, [r6, #24]
 800ddf2:	4798      	blx	r3
 800ddf4:	4604      	mov	r4, r0
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f7fd f954 	bl	800b0a4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800de02:	f04f 30ff 	mov.w	r0, #4294967295
  pbuf_free(p);
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
}
 800de06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de0a:	bf00      	nop
 800de0c:	0802f4aa 	.word	0x0802f4aa

0800de10 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800de10:	b507      	push	{r0, r1, r2, lr}
 800de12:	4602      	mov	r2, r0
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800de14:	f100 032d 	add.w	r3, r0, #45	; 0x2d
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800de18:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800de1a:	3204      	adds	r2, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800de1c:	4619      	mov	r1, r3
 800de1e:	9200      	str	r2, [sp, #0]
 800de20:	4a02      	ldr	r2, [pc, #8]	; (800de2c <etharp_request+0x1c>)
 800de22:	f7ff ffa5 	bl	800dd70 <etharp_raw.constprop.2>
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800de26:	b003      	add	sp, #12
 800de28:	f85d fb04 	ldr.w	pc, [sp], #4
 800de2c:	0802f4a4 	.word	0x0802f4a4

0800de30 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de32:	4c13      	ldr	r4, [pc, #76]	; (800de80 <etharp_tmr+0x50>)
 800de34:	2500      	movs	r5, #0
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800de36:	2602      	movs	r6, #2
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800de38:	2704      	movs	r7, #4
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
 800de3a:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800de3c:	b1b2      	cbz	r2, 800de6c <etharp_tmr+0x3c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800de3e:	89e3      	ldrh	r3, [r4, #14]
 800de40:	3301      	adds	r3, #1
 800de42:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800de44:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    if (state != ETHARP_STATE_EMPTY
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800de48:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800de4a:	d203      	bcs.n	800de54 <etharp_tmr+0x24>
 800de4c:	2a01      	cmp	r2, #1
 800de4e:	d105      	bne.n	800de5c <etharp_tmr+0x2c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800de50:	2b04      	cmp	r3, #4
 800de52:	d907      	bls.n	800de64 <etharp_tmr+0x34>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800de54:	4628      	mov	r0, r5
 800de56:	f7ff feaf 	bl	800dbb8 <etharp_free_entry>
 800de5a:	e007      	b.n	800de6c <etharp_tmr+0x3c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800de5c:	2a03      	cmp	r2, #3
 800de5e:	d10a      	bne.n	800de76 <etharp_tmr+0x46>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800de60:	7427      	strb	r7, [r4, #16]
 800de62:	e003      	b.n	800de6c <etharp_tmr+0x3c>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800de64:	4621      	mov	r1, r4
 800de66:	6860      	ldr	r0, [r4, #4]
 800de68:	f7ff ffd2 	bl	800de10 <etharp_request>
 800de6c:	3501      	adds	r5, #1
 800de6e:	3418      	adds	r4, #24
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de70:	2d0a      	cmp	r5, #10
 800de72:	d1e2      	bne.n	800de3a <etharp_tmr+0xa>
 800de74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800de76:	2a04      	cmp	r2, #4
 800de78:	d1f8      	bne.n	800de6c <etharp_tmr+0x3c>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800de7a:	7426      	strb	r6, [r4, #16]
 800de7c:	e7f6      	b.n	800de6c <etharp_tmr+0x3c>
 800de7e:	bf00      	nop
 800de80:	20042e78 	.word	0x20042e78

0800de84 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800de84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de88:	4616      	mov	r6, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de8a:	2218      	movs	r2, #24
 800de8c:	4d16      	ldr	r5, [pc, #88]	; (800dee8 <etharp_output_to_arp_index+0x64>)
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800de8e:	4607      	mov	r7, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de90:	4372      	muls	r2, r6
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800de92:	4688      	mov	r8, r1
 800de94:	f100 092d 	add.w	r9, r0, #45	; 0x2d
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de98:	18ac      	adds	r4, r5, r2
 800de9a:	7d23      	ldrb	r3, [r4, #20]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d117      	bne.n	800ded0 <etharp_output_to_arp_index+0x4c>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dea0:	8a63      	ldrh	r3, [r4, #18]
 800dea2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dea6:	d903      	bls.n	800deb0 <etharp_output_to_arp_index+0x2c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dea8:	1d21      	adds	r1, r4, #4
 800deaa:	f7ff ffb1 	bl	800de10 <etharp_request>
 800deae:	e00c      	b.n	800deca <etharp_output_to_arp_index+0x46>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800deb0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800deb4:	d30c      	bcc.n	800ded0 <etharp_output_to_arp_index+0x4c>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800deb6:	1d23      	adds	r3, r4, #4
 800deb8:	442a      	add	r2, r5
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800deba:	4649      	mov	r1, r9
 800debc:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800debe:	1d03      	adds	r3, r0, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dec0:	320c      	adds	r2, #12
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	464b      	mov	r3, r9
 800dec6:	f7ff ff53 	bl	800dd70 <etharp_raw.constprop.2>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800deca:	b908      	cbnz	r0, 800ded0 <etharp_output_to_arp_index+0x4c>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800decc:	2303      	movs	r3, #3
 800dece:	7523      	strb	r3, [r4, #20]
      }
    }
  }

  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
    &arp_table[arp_idx].ethaddr);
 800ded0:	2318      	movs	r3, #24
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    }
  }

  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800ded2:	464a      	mov	r2, r9
 800ded4:	4641      	mov	r1, r8
 800ded6:	4638      	mov	r0, r7
    &arp_table[arp_idx].ethaddr);
 800ded8:	fb03 5306 	mla	r3, r3, r6, r5
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    }
  }

  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800dedc:	330c      	adds	r3, #12
    &arp_table[arp_idx].ethaddr);
}
 800dede:	b003      	add	sp, #12
 800dee0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    }
  }

  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800dee4:	f7ff be80 	b.w	800dbe8 <etharp_send_ip>
 800dee8:	20042e74 	.word	0x20042e74

0800deec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800deec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800def0:	4688      	mov	r8, r1
 800def2:	4607      	mov	r7, r0
  err_t result = ERR_MEM;
  int is_new_entry = 0;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800def4:	4601      	mov	r1, r0
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800def6:	4614      	mov	r4, r2
  err_t result = ERR_MEM;
  int is_new_entry = 0;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800def8:	f8d8 0000 	ldr.w	r0, [r8]
 800defc:	f7fc fda3 	bl	800aa46 <ip4_addr_isbroadcast_u32>
 800df00:	2800      	cmp	r0, #0
 800df02:	d137      	bne.n	800df74 <etharp_query+0x88>
      ip4_addr_ismulticast(ipaddr) ||
 800df04:	f8d8 3000 	ldr.w	r3, [r8]
  err_t result = ERR_MEM;
  int is_new_entry = 0;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800df08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800df0c:	2ae0      	cmp	r2, #224	; 0xe0
 800df0e:	d031      	beq.n	800df74 <etharp_query+0x88>
      ip4_addr_ismulticast(ipaddr) ||
      ip4_addr_isany(ipaddr)) {
 800df10:	b383      	cbz	r3, 800df74 <etharp_query+0x88>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800df12:	2101      	movs	r1, #1
 800df14:	4640      	mov	r0, r8
 800df16:	f7ff fe79 	bl	800dc0c <etharp_find_entry.isra.0>

  /* could not find or create entry? */
  if (i < 0) {
 800df1a:	1e05      	subs	r5, r0, #0
 800df1c:	db2e      	blt.n	800df7c <etharp_query+0x90>
    }
    return (err_t)i;
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800df1e:	4e30      	ldr	r6, [pc, #192]	; (800dfe0 <etharp_query+0xf4>)
 800df20:	2318      	movs	r3, #24
 800df22:	fb03 6305 	mla	r3, r3, r5, r6
 800df26:	7d1a      	ldrb	r2, [r3, #20]
 800df28:	bb72      	cbnz	r2, 800df88 <etharp_query+0x9c>
    is_new_entry = 1;
    arp_table[i].state = ETHARP_STATE_PENDING;
 800df2a:	2201      	movs	r2, #1
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800df2c:	609f      	str	r7, [r3, #8]
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
    is_new_entry = 1;
    arp_table[i].state = ETHARP_STATE_PENDING;
 800df2e:	751a      	strb	r2, [r3, #20]
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800df30:	4641      	mov	r1, r8
 800df32:	4638      	mov	r0, r7
 800df34:	f7ff ff6c 	bl	800de10 <etharp_request>
 800df38:	4602      	mov	r2, r0
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800df3a:	2c00      	cmp	r4, #0
 800df3c:	d04e      	beq.n	800dfdc <etharp_query+0xf0>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800df3e:	2318      	movs	r3, #24
 800df40:	436b      	muls	r3, r5
 800df42:	18f1      	adds	r1, r6, r3
 800df44:	7d09      	ldrb	r1, [r1, #20]
 800df46:	2901      	cmp	r1, #1
 800df48:	d90c      	bls.n	800df64 <etharp_query+0x78>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800df4a:	4a26      	ldr	r2, [pc, #152]	; (800dfe4 <etharp_query+0xf8>)
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800df4c:	4621      	mov	r1, r4
 800df4e:	4638      	mov	r0, r7
  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800df50:	7015      	strb	r5, [r2, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800df52:	4a23      	ldr	r2, [pc, #140]	; (800dfe0 <etharp_query+0xf4>)
 800df54:	4413      	add	r3, r2
 800df56:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 800df5a:	330c      	adds	r3, #12
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
    }
  }
  return result;
}
 800df5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800df60:	f7ff be42 	b.w	800dbe8 <etharp_send_ip>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800df64:	d10d      	bne.n	800df82 <etharp_query+0x96>
 800df66:	4623      	mov	r3, r4
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 800df68:	b19b      	cbz	r3, 800df92 <etharp_query+0xa6>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if (p->type != PBUF_ROM) {
 800df6a:	7b1a      	ldrb	r2, [r3, #12]
 800df6c:	2a01      	cmp	r2, #1
 800df6e:	d122      	bne.n	800dfb6 <etharp_query+0xca>
        copy_needed = 1;
        break;
      }
      p = p->next;
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	e7f9      	b.n	800df68 <etharp_query+0x7c>
  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
      ip4_addr_ismulticast(ipaddr) ||
      ip4_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df74:	f06f 000e 	mvn.w	r0, #14
 800df78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df7c:	4628      	mov	r0, r5
 800df7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df82:	4610      	mov	r0, r2
 800df84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800df88:	2c00      	cmp	r4, #0
 800df8a:	d0d1      	beq.n	800df30 <etharp_query+0x44>
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
 800df8c:	f04f 32ff 	mov.w	r2, #4294967295
 800df90:	e7d5      	b.n	800df3e <etharp_query+0x52>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
      pbuf_ref(p);
 800df92:	4620      	mov	r0, r4
 800df94:	f7fd f95a 	bl	800b24c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800df98:	b1f4      	cbz	r4, 800dfd8 <etharp_query+0xec>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800df9a:	2318      	movs	r3, #24
 800df9c:	fb03 f205 	mul.w	r2, r3, r5
 800dfa0:	461f      	mov	r7, r3
 800dfa2:	58b0      	ldr	r0, [r6, r2]
 800dfa4:	b108      	cbz	r0, 800dfaa <etharp_query+0xbe>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800dfa6:	f7fd f87d 	bl	800b0a4 <pbuf_free>
      }
      arp_table[i].q = p;
 800dfaa:	fb07 f005 	mul.w	r0, r7, r5
 800dfae:	5034      	str	r4, [r6, r0]
      result = ERR_OK;
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
      p = p->next;
    }
    if (copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW_TX, p->tot_len, PBUF_RAM);
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	8919      	ldrh	r1, [r3, #8]
 800dfba:	2003      	movs	r0, #3
 800dfbc:	f7fd f892 	bl	800b0e4 <pbuf_alloc>
      if (p != NULL) {
 800dfc0:	4607      	mov	r7, r0
 800dfc2:	b148      	cbz	r0, 800dfd8 <etharp_query+0xec>
        if (pbuf_copy(p, q) != ERR_OK) {
 800dfc4:	4621      	mov	r1, r4
 800dfc6:	f7fd f95c 	bl	800b282 <pbuf_copy>
 800dfca:	b118      	cbz	r0, 800dfd4 <etharp_query+0xe8>
          pbuf_free(p);
 800dfcc:	4638      	mov	r0, r7
 800dfce:	f7fd f869 	bl	800b0a4 <pbuf_free>
 800dfd2:	e001      	b.n	800dfd8 <etharp_query+0xec>
 800dfd4:	463c      	mov	r4, r7
 800dfd6:	e7e0      	b.n	800df9a <etharp_query+0xae>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800dfd8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }
  return result;
}
 800dfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe0:	20042e74 	.word	0x20042e74
 800dfe4:	20042e70 	.word	0x20042e70

0800dfe8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dfe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfea:	460e      	mov	r6, r1
 800dfec:	4604      	mov	r4, r0

  /* make room for Ethernet header - should not fail */
#if ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET)
  if (pbuf_header(q, sizeof(struct eth_hdr) + SIZEOF_VLAN_HDR) != 0) {
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 800dfee:	210e      	movs	r1, #14
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dff0:	4615      	mov	r5, r2

  /* make room for Ethernet header - should not fail */
#if ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET)
  if (pbuf_header(q, sizeof(struct eth_hdr) + SIZEOF_VLAN_HDR) != 0) {
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 800dff2:	4630      	mov	r0, r6
 800dff4:	f7fd f848 	bl	800b088 <pbuf_header>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	d15e      	bne.n	800e0ba <etharp_output+0xd2>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dffc:	4621      	mov	r1, r4
 800dffe:	6828      	ldr	r0, [r5, #0]
 800e000:	f7fc fd21 	bl	800aa46 <ip4_addr_isbroadcast_u32>
 800e004:	2800      	cmp	r0, #0
 800e006:	d150      	bne.n	800e0aa <etharp_output+0xc2>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e00e:	2ae0      	cmp	r2, #224	; 0xe0
 800e010:	d114      	bne.n	800e03c <etharp_output+0x54>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 800e012:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 800e014:	f88d 0001 	strb.w	r0, [sp, #1]
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 800e018:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 800e01c:	235e      	movs	r3, #94	; 0x5e
 800e01e:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e022:	786b      	ldrb	r3, [r5, #1]
 800e024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e028:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e02c:	78ab      	ldrb	r3, [r5, #2]
 800e02e:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e032:	78eb      	ldrb	r3, [r5, #3]
 800e034:	f88d 3005 	strb.w	r3, [sp, #5]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e038:	466b      	mov	r3, sp
 800e03a:	e037      	b.n	800e0ac <etharp_output+0xc4>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e03c:	6862      	ldr	r2, [r4, #4]
 800e03e:	68a1      	ldr	r1, [r4, #8]
 800e040:	405a      	eors	r2, r3
 800e042:	420a      	tst	r2, r1
 800e044:	d009      	beq.n	800e05a <etharp_output+0x72>
 800e046:	b29b      	uxth	r3, r3
 800e048:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d004      	beq.n	800e05a <etharp_output+0x72>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e050:	68e3      	ldr	r3, [r4, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d034      	beq.n	800e0c0 <etharp_output+0xd8>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e056:	f104 050c 	add.w	r5, r4, #12
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e05a:	4b1b      	ldr	r3, [pc, #108]	; (800e0c8 <etharp_output+0xe0>)
 800e05c:	2118      	movs	r1, #24
 800e05e:	481b      	ldr	r0, [pc, #108]	; (800e0cc <etharp_output+0xe4>)
 800e060:	781a      	ldrb	r2, [r3, #0]
 800e062:	fb01 0002 	mla	r0, r1, r2, r0
 800e066:	7d01      	ldrb	r1, [r0, #20]
 800e068:	2901      	cmp	r1, #1
 800e06a:	4619      	mov	r1, r3
 800e06c:	d903      	bls.n	800e076 <etharp_output+0x8e>
 800e06e:	682f      	ldr	r7, [r5, #0]
 800e070:	6843      	ldr	r3, [r0, #4]
 800e072:	429f      	cmp	r7, r3
 800e074:	d00a      	beq.n	800e08c <etharp_output+0xa4>
 800e076:	4b15      	ldr	r3, [pc, #84]	; (800e0cc <etharp_output+0xe4>)
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e078:	2200      	movs	r2, #0
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e07a:	7d18      	ldrb	r0, [r3, #20]
 800e07c:	2801      	cmp	r0, #1
 800e07e:	d90a      	bls.n	800e096 <etharp_output+0xae>
 800e080:	682f      	ldr	r7, [r5, #0]
 800e082:	6858      	ldr	r0, [r3, #4]
 800e084:	4287      	cmp	r7, r0
 800e086:	d106      	bne.n	800e096 <etharp_output+0xae>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800e088:	b2d2      	uxtb	r2, r2
 800e08a:	700a      	strb	r2, [r1, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e08c:	4631      	mov	r1, r6
 800e08e:	4620      	mov	r0, r4
 800e090:	f7ff fef8 	bl	800de84 <etharp_output_to_arp_index>
 800e094:	e016      	b.n	800e0c4 <etharp_output+0xdc>
 800e096:	3201      	adds	r2, #1
 800e098:	3318      	adds	r3, #24
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e09a:	2a0a      	cmp	r2, #10
 800e09c:	d1ed      	bne.n	800e07a <etharp_output+0x92>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e09e:	4632      	mov	r2, r6
 800e0a0:	4629      	mov	r1, r5
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f7ff ff22 	bl	800deec <etharp_query>
 800e0a8:	e00c      	b.n	800e0c4 <etharp_output+0xdc>
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e0aa:	4b09      	ldr	r3, [pc, #36]	; (800e0d0 <etharp_output+0xe8>)
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 800e0ac:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 800e0b0:	4631      	mov	r1, r6
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f7ff fd98 	bl	800dbe8 <etharp_send_ip>
 800e0b8:	e004      	b.n	800e0c4 <etharp_output+0xdc>
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
 800e0ba:	f06f 0001 	mvn.w	r0, #1
 800e0be:	e001      	b.n	800e0c4 <etharp_output+0xdc>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e0c0:	f06f 0003 	mvn.w	r0, #3

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
}
 800e0c4:	b003      	add	sp, #12
 800e0c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0c8:	20042e70 	.word	0x20042e70
 800e0cc:	20042e74 	.word	0x20042e74
 800e0d0:	0802f4a4 	.word	0x0802f4a4

0800e0d4 <ethernet_input>:
 * @param p the received packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e0d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800e0d8:	8947      	ldrh	r7, [r0, #10]
 * @param p the received packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e0da:	4605      	mov	r5, r0
 800e0dc:	460e      	mov	r6, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800e0de:	2f0e      	cmp	r7, #14
 800e0e0:	f240 80a2 	bls.w	800e228 <ethernet_input+0x154>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e0e4:	6844      	ldr	r4, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e0e6:	7823      	ldrb	r3, [r4, #0]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 800e0e8:	f8b4 800c 	ldrh.w	r8, [r4, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e0ec:	07da      	lsls	r2, r3, #31
 800e0ee:	d514      	bpl.n	800e11a <ethernet_input+0x46>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d108      	bne.n	800e106 <ethernet_input+0x32>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 800e0f4:	7863      	ldrb	r3, [r4, #1]
 800e0f6:	b983      	cbnz	r3, 800e11a <ethernet_input+0x46>
 800e0f8:	78a3      	ldrb	r3, [r4, #2]
 800e0fa:	2b5e      	cmp	r3, #94	; 0x5e
 800e0fc:	d10d      	bne.n	800e11a <ethernet_input+0x46>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e0fe:	7b43      	ldrb	r3, [r0, #13]
 800e100:	f043 0310 	orr.w	r3, r3, #16
 800e104:	e008      	b.n	800e118 <ethernet_input+0x44>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e106:	2206      	movs	r2, #6
 800e108:	494b      	ldr	r1, [pc, #300]	; (800e238 <ethernet_input+0x164>)
 800e10a:	4620      	mov	r0, r4
 800e10c:	f003 fc8a 	bl	8011a24 <memcmp>
 800e110:	b918      	cbnz	r0, 800e11a <ethernet_input+0x46>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e112:	7b6b      	ldrb	r3, [r5, #13]
 800e114:	f043 0308 	orr.w	r3, r3, #8
 800e118:	736b      	strb	r3, [r5, #13]
    }
  }

  switch (type) {
 800e11a:	f1b8 0f08 	cmp.w	r8, #8
 800e11e:	d003      	beq.n	800e128 <ethernet_input+0x54>
 800e120:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
 800e124:	d021      	beq.n	800e16a <ethernet_input+0x96>
 800e126:	e07f      	b.n	800e228 <ethernet_input+0x154>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e128:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 800e12c:	0718      	lsls	r0, r3, #28
 800e12e:	d57b      	bpl.n	800e228 <ethernet_input+0x154>
  if (ethhdr->type == PP_HTONS(ETHTYPE_VLAN)) {
    iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e130:	f8d4 201a 	ldr.w	r2, [r4, #26]

  /* source is not on the local network? */
  if (!ip4_addr_netcmp(&iphdr_src, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e134:	6873      	ldr	r3, [r6, #4]
  if (ethhdr->type == PP_HTONS(ETHTYPE_VLAN)) {
    iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e136:	9201      	str	r2, [sp, #4]

  /* source is not on the local network? */
  if (!ip4_addr_netcmp(&iphdr_src, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e138:	4053      	eors	r3, r2
 800e13a:	68b2      	ldr	r2, [r6, #8]
 800e13c:	4213      	tst	r3, r2
 800e13e:	d105      	bne.n	800e14c <ethernet_input+0x78>

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
 800e140:	2302      	movs	r3, #2
 800e142:	1da2      	adds	r2, r4, #6
 800e144:	a901      	add	r1, sp, #4
 800e146:	4630      	mov	r0, r6
 800e148:	f7ff fdce 	bl	800dce8 <etharp_update_arp_entry>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e14c:	896b      	ldrh	r3, [r5, #10]
 800e14e:	2b0d      	cmp	r3, #13
 800e150:	dd6a      	ble.n	800e228 <ethernet_input+0x154>
 800e152:	f06f 010d 	mvn.w	r1, #13
 800e156:	4628      	mov	r0, r5
 800e158:	f7fc ff96 	bl	800b088 <pbuf_header>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d163      	bne.n	800e228 <ethernet_input+0x154>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 800e160:	4631      	mov	r1, r6
 800e162:	4628      	mov	r0, r5
 800e164:	f7fc fb56 	bl	800a814 <ip4_input>
      }
      break;
 800e168:	e061      	b.n	800e22e <ethernet_input+0x15a>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e16a:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 800e16e:	0719      	lsls	r1, r3, #28
 800e170:	d55a      	bpl.n	800e228 <ethernet_input+0x154>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 800e172:	2f29      	cmp	r7, #41	; 0x29
 800e174:	d958      	bls.n	800e228 <ethernet_input+0x154>
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800e176:	89e3      	ldrh	r3, [r4, #14]
 800e178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e17c:	d154      	bne.n	800e228 <ethernet_input+0x154>
 800e17e:	7ca3      	ldrb	r3, [r4, #18]
 800e180:	2b06      	cmp	r3, #6
 800e182:	d151      	bne.n	800e228 <ethernet_input+0x154>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 800e184:	7ce3      	ldrb	r3, [r4, #19]
 800e186:	2b04      	cmp	r3, #4
 800e188:	d14e      	bne.n	800e228 <ethernet_input+0x154>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e18a:	8a23      	ldrh	r3, [r4, #16]
 800e18c:	2b08      	cmp	r3, #8
 800e18e:	d14b      	bne.n	800e228 <ethernet_input+0x154>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800e190:	46a1      	mov	r9, r4
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e192:	6877      	ldr	r7, [r6, #4]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800e194:	f859 0f1c 	ldr.w	r0, [r9, #28]!
 800e198:	9000      	str	r0, [sp, #0]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800e19a:	f8d4 0026 	ldr.w	r0, [r4, #38]	; 0x26
 800e19e:	9001      	str	r0, [sp, #4]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e1a0:	b11f      	cbz	r7, 800e1aa <ethernet_input+0xd6>
    for_us = 0;
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e1a2:	9b01      	ldr	r3, [sp, #4]
 800e1a4:	1bda      	subs	r2, r3, r7
 800e1a6:	4257      	negs	r7, r2
 800e1a8:	4157      	adcs	r7, r2
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e1aa:	2f00      	cmp	r7, #0
 800e1ac:	f104 0816 	add.w	r8, r4, #22
 800e1b0:	4669      	mov	r1, sp
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	bf14      	ite	ne
 800e1b6:	2301      	movne	r3, #1
 800e1b8:	2302      	moveq	r3, #2
 800e1ba:	4642      	mov	r2, r8
 800e1bc:	f7ff fd94 	bl	800dce8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e1c0:	8aa3      	ldrh	r3, [r4, #20]
 800e1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1c6:	d007      	beq.n	800e1d8 <ethernet_input+0x104>
 800e1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1cc:	d12c      	bne.n	800e228 <ethernet_input+0x154>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 800e1ce:	4669      	mov	r1, sp
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	f7fc f827 	bl	800a224 <dhcp_arp_reply>
 800e1d6:	e027      	b.n	800e228 <ethernet_input+0x154>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 800e1d8:	b337      	cbz	r7, 800e228 <ethernet_input+0x154>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 800e1da:	2002      	movs	r0, #2
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 800e1dc:	4637      	mov	r7, r6

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 800e1de:	f7fb fb21 	bl	8009824 <lwip_htons>
 800e1e2:	82a0      	strh	r0, [r4, #20]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 800e1e4:	f8d9 3000 	ldr.w	r3, [r9]

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 800e1e8:	4629      	mov	r1, r5
 800e1ea:	4630      	mov	r0, r6
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 800e1ec:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, netif_ip4_addr(netif));
 800e1f0:	6873      	ldr	r3, [r6, #4]
 800e1f2:	61e3      	str	r3, [r4, #28]
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip4_addr_islinklocal(netif_ip4_addr(netif)) ? (const u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 800e1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800e1f8:	6223      	str	r3, [r4, #32]
 800e1fa:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800e1fe:	84a3      	strh	r3, [r4, #36]	; 0x24
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 800e200:	f8d8 3000 	ldr.w	r3, [r8]
 800e204:	6023      	str	r3, [r4, #0]
 800e206:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800e20a:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 800e20c:	f857 3f2d 	ldr.w	r3, [r7, #45]!
 800e210:	f8c4 3016 	str.w	r3, [r4, #22]
 800e214:	88bb      	ldrh	r3, [r7, #4]
 800e216:	f8a8 3004 	strh.w	r3, [r8, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	f8c4 3006 	str.w	r3, [r4, #6]
 800e220:	88bb      	ldrh	r3, [r7, #4]
 800e222:	8163      	strh	r3, [r4, #10]

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 800e224:	69b3      	ldr	r3, [r6, #24]
 800e226:	4798      	blx	r3
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e228:	4628      	mov	r0, r5
 800e22a:	f7fc ff3b 	bl	800b0a4 <pbuf_free>
  return ERR_OK;
}
 800e22e:	2000      	movs	r0, #0
 800e230:	b003      	add	sp, #12
 800e232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e236:	bf00      	nop
 800e238:	0802f4a4 	.word	0x0802f4a4

0800e23c <sys_mbox_new>:


/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e23c:	b510      	push	{r4, lr}
 800e23e:	4604      	mov	r4, r0
	(void ) size;

	*mbox = xQueueCreate( archMESG_QUEUE_LENGTH, sizeof( void * ) );
 800e240:	2200      	movs	r2, #0
 800e242:	2104      	movs	r1, #4
 800e244:	2006      	movs	r0, #6
 800e246:	f7f9 f8c1 	bl	80073cc <xQueueGenericCreate>
 800e24a:	6020      	str	r0, [r4, #0]
 800e24c:	fab0 f080 	clz	r0, r0
 800e250:	0940      	lsrs	r0, r0, #5
#endif /* SYS_STATS */
 if (*mbox == NULL)
  return ERR_MEM;

 return ERR_OK;
}
 800e252:	4240      	negs	r0, r0
 800e254:	bd10      	pop	{r4, pc}

0800e256 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800e256:	b510      	push	{r4, lr}
 800e258:	4604      	mov	r4, r0
	if( uxQueueMessagesWaiting( *mbox ) )
 800e25a:	6800      	ldr	r0, [r0, #0]
 800e25c:	f7f9 fb92 	bl	8007984 <uxQueueMessagesWaiting>
#endif /* SYS_STATS */

		// TODO notify the user of failure.
	}

	vQueueDelete( *mbox );
 800e260:	6820      	ldr	r0, [r4, #0]

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800e262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif /* SYS_STATS */

		// TODO notify the user of failure.
	}

	vQueueDelete( *mbox );
 800e266:	f7f9 bbb5 	b.w	80079d4 <vQueueDelete>

0800e26a <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800e26a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e26c:	4605      	mov	r5, r0
 800e26e:	ac02      	add	r4, sp, #8
 800e270:	f844 1d04 	str.w	r1, [r4, #-4]!
	while ( xQueueSendToBack(*mbox, &data, portMAX_DELAY ) != pdTRUE ){}
 800e274:	2300      	movs	r3, #0
 800e276:	f04f 32ff 	mov.w	r2, #4294967295
 800e27a:	4621      	mov	r1, r4
 800e27c:	6828      	ldr	r0, [r5, #0]
 800e27e:	f7f9 f8db 	bl	8007438 <xQueueGenericSend>
 800e282:	2801      	cmp	r0, #1
 800e284:	d1f6      	bne.n	800e274 <sys_mbox_post+0xa>
}
 800e286:	b003      	add	sp, #12
 800e288:	bd30      	pop	{r4, r5, pc}

0800e28a <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e28a:	b513      	push	{r0, r1, r4, lr}
err_t result;

   if ( xQueueSend( *mbox, &msg, 0 ) == pdPASS )
 800e28c:	2300      	movs	r3, #0


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e28e:	ac02      	add	r4, sp, #8
err_t result;

   if ( xQueueSend( *mbox, &msg, 0 ) == pdPASS )
 800e290:	6800      	ldr	r0, [r0, #0]


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e292:	f844 1d04 	str.w	r1, [r4, #-4]!
err_t result;

   if ( xQueueSend( *mbox, &msg, 0 ) == pdPASS )
 800e296:	461a      	mov	r2, r3
 800e298:	4621      	mov	r1, r4
 800e29a:	f7f9 f8cd 	bl	8007438 <xQueueGenericSend>
#endif /* SYS_STATS */

   }

   return result;
}
 800e29e:	f110 30ff 	adds.w	r0, r0, #4294967295
 800e2a2:	bf18      	it	ne
 800e2a4:	f04f 30ff 	movne.w	r0, #4294967295
 800e2a8:	b002      	add	sp, #8
 800e2aa:	bd10      	pop	{r4, pc}

0800e2ac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2ae:	460d      	mov	r5, r1
 800e2b0:	4606      	mov	r6, r0
 800e2b2:	4617      	mov	r7, r2
void *dummyptr;
portTickType StartTime, EndTime, Elapsed;

	StartTime = xTaskGetTickCount();
 800e2b4:	f7f9 fd96 	bl	8007de4 <xTaskGetTickCount>
 800e2b8:	4604      	mov	r4, r0

	if ( msg == NULL )
 800e2ba:	b905      	cbnz	r5, 800e2be <sys_arch_mbox_fetch+0x12>
	{
		msg = &dummyptr;
 800e2bc:	ad01      	add	r5, sp, #4
	}

	if ( timeout != 0 )
 800e2be:	b167      	cbz	r7, 800e2da <sys_arch_mbox_fetch+0x2e>
	{
		if ( pdTRUE == xQueueReceive( *mbox, &(*msg), timeout / portTICK_RATE_MS ) )
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	463a      	mov	r2, r7
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	6830      	ldr	r0, [r6, #0]
 800e2c8:	f7f9 fa56 	bl	8007778 <xQueueGenericReceive>
 800e2cc:	2801      	cmp	r0, #1
 800e2ce:	d00d      	beq.n	800e2ec <sys_arch_mbox_fetch+0x40>

			return ( Elapsed );
		}
		else // timed out blocking for message
		{
			*msg = NULL;
 800e2d0:	2300      	movs	r3, #0

			return SYS_ARCH_TIMEOUT;
 800e2d2:	f04f 30ff 	mov.w	r0, #4294967295

			return ( Elapsed );
		}
		else // timed out blocking for message
		{
			*msg = NULL;
 800e2d6:	602b      	str	r3, [r5, #0]

			return SYS_ARCH_TIMEOUT;
 800e2d8:	e00b      	b.n	800e2f2 <sys_arch_mbox_fetch+0x46>
		}
	}
	else // block forever for a message.
	{
		while( pdTRUE != xQueueReceive( *mbox, &(*msg), portMAX_DELAY ) ){} // time is arbitrary
 800e2da:	2300      	movs	r3, #0
 800e2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	6830      	ldr	r0, [r6, #0]
 800e2e4:	f7f9 fa48 	bl	8007778 <xQueueGenericReceive>
 800e2e8:	2801      	cmp	r0, #1
 800e2ea:	d1f6      	bne.n	800e2da <sys_arch_mbox_fetch+0x2e>
		EndTime = xTaskGetTickCount();
 800e2ec:	f7f9 fd7a 	bl	8007de4 <xTaskGetTickCount>
		Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;
 800e2f0:	1b00      	subs	r0, r0, r4

		return ( Elapsed ); // return time blocked TODO test
	}
}
 800e2f2:	b003      	add	sp, #12
 800e2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2f6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800e2f6:	b507      	push	{r0, r1, r2, lr}
void *dummyptr;

	if ( msg == NULL )
 800e2f8:	b901      	cbnz	r1, 800e2fc <sys_arch_mbox_tryfetch+0x6>
	{
		msg = &dummyptr;
 800e2fa:	a901      	add	r1, sp, #4
	}

   if ( pdTRUE == xQueueReceive( *mbox, &(*msg), 0 ) )
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	6800      	ldr	r0, [r0, #0]
 800e300:	461a      	mov	r2, r3
 800e302:	f7f9 fa39 	bl	8007778 <xQueueGenericReceive>
   }
   else
   {
      return SYS_MBOX_EMPTY;
   }
}
 800e306:	f110 30ff 	adds.w	r0, r0, #4294967295
 800e30a:	bf18      	it	ne
 800e30c:	f04f 30ff 	movne.w	r0, #4294967295
 800e310:	b003      	add	sp, #12
 800e312:	f85d fb04 	ldr.w	pc, [sp], #4

0800e316 <sys_mbox_valid>:
 800e316:	6800      	ldr	r0, [r0, #0]
 800e318:	3000      	adds	r0, #0
 800e31a:	bf18      	it	ne
 800e31c:	2001      	movne	r0, #1
 800e31e:	4770      	bx	lr

0800e320 <sys_mbox_set_invalid>:
 800e320:	2300      	movs	r3, #0
 800e322:	6003      	str	r3, [r0, #0]
 800e324:	4770      	bx	lr

0800e326 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800e326:	b538      	push	{r3, r4, r5, lr}
 800e328:	4605      	mov	r5, r0
 800e32a:	460c      	mov	r4, r1
	vSemaphoreCreateBinary(*sem );
 800e32c:	2203      	movs	r2, #3
 800e32e:	2100      	movs	r1, #0
 800e330:	2001      	movs	r0, #1
 800e332:	f7f9 f84b 	bl	80073cc <xQueueGenericCreate>
 800e336:	6028      	str	r0, [r5, #0]
 800e338:	b120      	cbz	r0, 800e344 <sys_sem_new+0x1e>
 800e33a:	2300      	movs	r3, #0
 800e33c:	461a      	mov	r2, r3
 800e33e:	4619      	mov	r1, r3
 800e340:	f7f9 f87a 	bl	8007438 <xQueueGenericSend>
	if(*sem == NULL)
 800e344:	6828      	ldr	r0, [r5, #0]
 800e346:	b138      	cbz	r0, 800e358 <sys_sem_new+0x32>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
		return ERR_MEM;
	}

	if(count == 0)	// Means it can't be taken
 800e348:	b94c      	cbnz	r4, 800e35e <sys_sem_new+0x38>
	{
		xSemaphoreTake(*sem,1);
 800e34a:	4623      	mov	r3, r4
 800e34c:	2201      	movs	r2, #1
 800e34e:	4621      	mov	r1, r4
 800e350:	f7f9 fa12 	bl	8007778 <xQueueGenericReceive>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */

	return ERR_OK;
 800e354:	4620      	mov	r0, r4
 800e356:	bd38      	pop	{r3, r4, r5, pc}
	if(*sem == NULL)
	{
#if SYS_STATS
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
		return ERR_MEM;
 800e358:	f04f 30ff 	mov.w	r0, #4294967295
 800e35c:	bd38      	pop	{r3, r4, r5, pc}
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */

	return ERR_OK;
 800e35e:	2000      	movs	r0, #0
}
 800e360:	bd38      	pop	{r3, r4, r5, pc}

0800e362 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800e362:	b570      	push	{r4, r5, r6, lr}
 800e364:	460e      	mov	r6, r1
 800e366:	4605      	mov	r5, r0
portTickType StartTime, EndTime, Elapsed;

	StartTime = xTaskGetTickCount();
 800e368:	f7f9 fd3c 	bl	8007de4 <xTaskGetTickCount>
 800e36c:	4604      	mov	r4, r0

	if(	timeout != 0)
 800e36e:	b146      	cbz	r6, 800e382 <sys_arch_sem_wait+0x20>
	{
		if( xSemaphoreTake( *sem, timeout / portTICK_RATE_MS ) == pdTRUE )
 800e370:	2300      	movs	r3, #0
 800e372:	4632      	mov	r2, r6
 800e374:	6828      	ldr	r0, [r5, #0]
 800e376:	4619      	mov	r1, r3
 800e378:	f7f9 f9fe 	bl	8007778 <xQueueGenericReceive>
 800e37c:	2801      	cmp	r0, #1
 800e37e:	d10d      	bne.n	800e39c <sys_arch_sem_wait+0x3a>
 800e380:	e008      	b.n	800e394 <sys_arch_sem_wait+0x32>
			return SYS_ARCH_TIMEOUT;
		}
	}
	else // must block without a timeout
	{
		while( xSemaphoreTake(*sem, portMAX_DELAY) != pdTRUE){}
 800e382:	2300      	movs	r3, #0
 800e384:	f04f 32ff 	mov.w	r2, #4294967295
 800e388:	6828      	ldr	r0, [r5, #0]
 800e38a:	4619      	mov	r1, r3
 800e38c:	f7f9 f9f4 	bl	8007778 <xQueueGenericReceive>
 800e390:	2801      	cmp	r0, #1
 800e392:	d1f6      	bne.n	800e382 <sys_arch_sem_wait+0x20>
		EndTime = xTaskGetTickCount();
 800e394:	f7f9 fd26 	bl	8007de4 <xTaskGetTickCount>
		Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;
 800e398:	1b00      	subs	r0, r0, r4

		return ( Elapsed ); // return time blocked
 800e39a:	bd70      	pop	{r4, r5, r6, pc}

			return (Elapsed); // return time blocked TODO test
		}
		else
		{
			return SYS_ARCH_TIMEOUT;
 800e39c:	f04f 30ff 	mov.w	r0, #4294967295
		Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;

		return ( Elapsed ); // return time blocked

	}
}
 800e3a0:	bd70      	pop	{r4, r5, r6, pc}

0800e3a2 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
	xSemaphoreGive(*sem);
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	6800      	ldr	r0, [r0, #0]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	f7f9 b845 	b.w	8007438 <xQueueGenericSend>

0800e3ae <sys_sem_free>:
{
#if SYS_STATS
      --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

	vQueueDelete(*sem);
 800e3ae:	6800      	ldr	r0, [r0, #0]
 800e3b0:	f7f9 bb10 	b.w	80079d4 <vQueueDelete>

0800e3b4 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 800e3b4:	6800      	ldr	r0, [r0, #0]
  if (*sem == SYS_SEM_NULL)
    return 0;
  else
    return 1;
}
 800e3b6:	3000      	adds	r0, #0
 800e3b8:	bf18      	it	ne
 800e3ba:	2001      	movne	r0, #1
 800e3bc:	4770      	bx	lr

0800e3be <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	6003      	str	r3, [r0, #0]
 800e3c2:	4770      	bx	lr

0800e3c4 <sys_init>:
/*-----------------------------------------------------------------------------------*/
// Initialize sys arch
void sys_init(void)
{
	// keep track of how many threads have been created
	s_nextthread = 0;
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	4b01      	ldr	r3, [pc, #4]	; (800e3cc <sys_init+0x8>)
 800e3c8:	801a      	strh	r2, [r3, #0]
 800e3ca:	4770      	bx	lr
 800e3cc:	20042f64 	.word	0x20042f64

0800e3d0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	4619      	mov	r1, r3
xTaskHandle CreatedTask;
int result;

   if ( s_nextthread < SYS_THREAD_MAX )
 800e3d8:	4b0b      	ldr	r3, [pc, #44]	; (800e408 <sys_thread_new+0x38>)
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e3da:	b086      	sub	sp, #24
xTaskHandle CreatedTask;
int result;

   if ( s_nextthread < SYS_THREAD_MAX )
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	2b05      	cmp	r3, #5
 800e3e0:	d901      	bls.n	800e3e6 <sys_thread_new+0x16>
		   return NULL;
	   }
   }
   else
   {
      return NULL;
 800e3e2:	2000      	movs	r0, #0
 800e3e4:	e00e      	b.n	800e404 <sys_thread_new+0x34>
xTaskHandle CreatedTask;
int result;

   if ( s_nextthread < SYS_THREAD_MAX )
   {
      result = xTaskCreate( thread, name, stacksize, arg, prio, &CreatedTask );
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	9303      	str	r3, [sp, #12]
 800e3ea:	9302      	str	r3, [sp, #8]
 800e3ec:	ab05      	add	r3, sp, #20
 800e3ee:	9301      	str	r3, [sp, #4]
 800e3f0:	9b08      	ldr	r3, [sp, #32]
 800e3f2:	9300      	str	r3, [sp, #0]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	b28a      	uxth	r2, r1
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	f7f9 fc26 	bl	8007c4a <xTaskGenericCreate>

	   // For each task created, store the task handle (pid) in the timers array.
	   // This scheme doesn't allow for threads to be deleted
	   //s_timeoutlist[s_nextthread++].pid = CreatedTask;

	   if(result == pdPASS)
 800e3fe:	2801      	cmp	r0, #1
 800e400:	d1ef      	bne.n	800e3e2 <sys_thread_new+0x12>
	   {
		   return CreatedTask;
 800e402:	9805      	ldr	r0, [sp, #20]
   }
   else
   {
      return NULL;
   }
}
 800e404:	b006      	add	sp, #24
 800e406:	bd10      	pop	{r4, pc}
 800e408:	20042f64 	.word	0x20042f64

0800e40c <low_level_output>:
 * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
 800e40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t *) (EthHandle.TxDesc->Buffer1Addr);
 800e410:	4a25      	ldr	r2, [pc, #148]	; (800e4a8 <low_level_output+0x9c>)
	uint32_t bufferoffset = 0;
	uint32_t byteslefttocopy = 0;
	uint32_t payloadoffset = 0;

	DmaTxDesc = EthHandle.TxDesc;
	bufferoffset = 0;
 800e412:	f04f 0800 	mov.w	r8, #0
 * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
 800e416:	460d      	mov	r5, r1
		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
		payloadoffset = 0;

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 800e418:	f240 5bf4 	movw	fp, #1524	; 0x5f4
 *       dropped because of memory failure (except for the TCP timers).
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t *) (EthHandle.TxDesc->Buffer1Addr);
 800e41c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	__IO ETH_DMADescTypeDef *DmaTxDesc;
	uint32_t framelength = 0;
 800e41e:	4647      	mov	r7, r8
 800e420:	9200      	str	r2, [sp, #0]
 *       dropped because of memory failure (except for the TCP timers).
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t *) (EthHandle.TxDesc->Buffer1Addr);
 800e422:	68b3      	ldr	r3, [r6, #8]

	DmaTxDesc = EthHandle.TxDesc;
	bufferoffset = 0;

	/* copy frame from pbufs to driver buffers */
	for (q = p; q != NULL; q = q->next) {
 800e424:	b35d      	cbz	r5, 800e47e <low_level_output+0x72>
		/* Is this buffer available? If not, goto error */
		if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 800e426:	6832      	ldr	r2, [r6, #0]
 800e428:	2a00      	cmp	r2, #0
 800e42a:	da02      	bge.n	800e432 <low_level_output+0x26>
			errval = ERR_USE;
 800e42c:	f06f 0007 	mvn.w	r0, #7
 800e430:	e02a      	b.n	800e488 <low_level_output+0x7c>
			goto error;
		}

		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
 800e432:	f8b5 900a 	ldrh.w	r9, [r5, #10]
		payloadoffset = 0;

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 800e436:	4644      	mov	r4, r8
			goto error;
		}

		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
		payloadoffset = 0;
 800e438:	f04f 0a00 	mov.w	sl, #0

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 800e43c:	eb04 0809 	add.w	r8, r4, r9
 800e440:	1918      	adds	r0, r3, r4
 800e442:	6869      	ldr	r1, [r5, #4]
 800e444:	45d8      	cmp	r8, fp
 800e446:	d911      	bls.n	800e46c <low_level_output+0x60>
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
					(ETH_TX_BUF_SIZE - bufferoffset));
 800e448:	f5c4 64be 	rsb	r4, r4, #1520	; 0x5f0
		payloadoffset = 0;

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800e44c:	4451      	add	r1, sl
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
					(ETH_TX_BUF_SIZE - bufferoffset));
 800e44e:	3404      	adds	r4, #4
		payloadoffset = 0;

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800e450:	4622      	mov	r2, r4
 800e452:	f003 faf6 	bl	8011a42 <memcpy>
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
					(ETH_TX_BUF_SIZE - bufferoffset));

			/* Point to next descriptor */
			DmaTxDesc = (ETH_DMADescTypeDef *) (DmaTxDesc->Buffer2NextDescAddr);
 800e456:	68f6      	ldr	r6, [r6, #12]

			/* Check if the buffer is available */
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 800e458:	6833      	ldr	r3, [r6, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	dbe6      	blt.n	800e42c <low_level_output+0x20>

			buffer = (uint8_t *) (DmaTxDesc->Buffer1Addr);

			byteslefttocopy = byteslefttocopy
					- (ETH_TX_BUF_SIZE - bufferoffset);
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800e45e:	44a2      	add	sl, r4
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800e460:	4427      	add	r7, r4
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
				errval = ERR_USE;
				goto error;
			}

			buffer = (uint8_t *) (DmaTxDesc->Buffer1Addr);
 800e462:	68b3      	ldr	r3, [r6, #8]

			byteslefttocopy = byteslefttocopy
 800e464:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
					- (ETH_TX_BUF_SIZE - bufferoffset);
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
			bufferoffset = 0;
 800e468:	2400      	movs	r4, #0
 800e46a:	e7e7      	b.n	800e43c <low_level_output+0x30>
		}

		/* Copy the remaining bytes */
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800e46c:	464a      	mov	r2, r9
 800e46e:	4451      	add	r1, sl
 800e470:	9301      	str	r3, [sp, #4]
				(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
				byteslefttocopy);
		bufferoffset = bufferoffset + byteslefttocopy;
		framelength = framelength + byteslefttocopy;
 800e472:	444f      	add	r7, r9
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
			bufferoffset = 0;
		}

		/* Copy the remaining bytes */
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800e474:	f003 fae5 	bl	8011a42 <memcpy>

	DmaTxDesc = EthHandle.TxDesc;
	bufferoffset = 0;

	/* copy frame from pbufs to driver buffers */
	for (q = p; q != NULL; q = q->next) {
 800e478:	682d      	ldr	r5, [r5, #0]
 800e47a:	9b01      	ldr	r3, [sp, #4]
 800e47c:	e7d2      	b.n	800e424 <low_level_output+0x18>
		bufferoffset = bufferoffset + byteslefttocopy;
		framelength = framelength + byteslefttocopy;
	}

	/* Prepare transmit descriptors to give to DMA */
	HAL_ETH_TransmitFrame(&EthHandle, framelength);
 800e47e:	4639      	mov	r1, r7
 800e480:	4809      	ldr	r0, [pc, #36]	; (800e4a8 <low_level_output+0x9c>)
 800e482:	f7f5 fd9d 	bl	8003fc0 <HAL_ETH_TransmitFrame>

	errval = ERR_OK;
 800e486:	4628      	mov	r0, r5

	error:

	/* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t) RESET) {
 800e488:	9b00      	ldr	r3, [sp, #0]
 800e48a:	f241 0214 	movw	r2, #4116	; 0x1014
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	5899      	ldr	r1, [r3, r2]
 800e492:	0689      	lsls	r1, r1, #26
 800e494:	d505      	bpl.n	800e4a2 <low_level_output+0x96>
		/* Clear TUS ETHERNET DMA flag */
		EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 800e496:	2120      	movs	r1, #32
 800e498:	5099      	str	r1, [r3, r2]

		/* Resume DMA transmission*/
		EthHandle.Instance->DMATPDR = 0;
 800e49a:	2100      	movs	r1, #0
 800e49c:	f241 0204 	movw	r2, #4100	; 0x1004
 800e4a0:	5099      	str	r1, [r3, r2]
	}
	return errval;
}
 800e4a2:	b003      	add	sp, #12
 800e4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a8:	20049290 	.word	0x20049290

0800e4ac <ethernetif_input>:
 * interface. Then the type of the received packet is determined and
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument) {
 800e4ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b0:	4682      	mov	sl, r0
	struct pbuf *p;
	struct netif *netif = (struct netif *) argument;

	for (;;) {
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK) {
 800e4b2:	4c37      	ldr	r4, [pc, #220]	; (800e590 <ethernetif_input+0xe4>)
 800e4b4:	f04f 31ff 	mov.w	r1, #4294967295
 800e4b8:	6820      	ldr	r0, [r4, #0]
 800e4ba:	f7f8 fa9b 	bl	80069f4 <osSemaphoreWait>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d1f8      	bne.n	800e4b4 <ethernetif_input+0x8>
	uint32_t payloadoffset = 0;
	uint32_t byteslefttocopy = 0;
	uint32_t i = 0;

	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 800e4c2:	4d34      	ldr	r5, [pc, #208]	; (800e594 <ethernetif_input+0xe8>)
 800e4c4:	4628      	mov	r0, r5
 800e4c6:	f7f5 fdf1 	bl	80040ac <HAL_ETH_GetReceivedFrame_IT>
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d1f0      	bne.n	800e4b2 <ethernetif_input+0x6>
		return NULL;

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = EthHandle.RxFrameInfos.length;
	buffer = (uint8_t *) EthHandle.RxFrameInfos.buffer;
 800e4d0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
		return NULL;

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = EthHandle.RxFrameInfos.length;
 800e4d2:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
	buffer = (uint8_t *) EthHandle.RxFrameInfos.buffer;
 800e4d4:	9301      	str	r3, [sp, #4]

	if (len > 0) {
 800e4d6:	b909      	cbnz	r1, 800e4dc <ethernetif_input+0x30>
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif) {
	struct pbuf *p = NULL, *q = NULL;
 800e4d8:	2700      	movs	r7, #0
 800e4da:	e031      	b.n	800e540 <ethernetif_input+0x94>
	len = EthHandle.RxFrameInfos.length;
	buffer = (uint8_t *) EthHandle.RxFrameInfos.buffer;

	if (len > 0) {
		/* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800e4dc:	2203      	movs	r2, #3
 800e4de:	2004      	movs	r0, #4
 800e4e0:	f7fc fe00 	bl	800b0e4 <pbuf_alloc>
	}

	if (p != NULL) {
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d0f6      	beq.n	800e4d8 <ethernetif_input+0x2c>
		dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 800e4ea:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 800e4ee:	4680      	mov	r8, r0
		bufferoffset = 0;

		for (q = p; q != NULL; q = q->next) {
			byteslefttocopy = q->len;
 800e4f0:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800e4f4:	4634      	mov	r4, r6
			payloadoffset = 0;
 800e4f6:	f04f 0900 	mov.w	r9, #0

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
 800e4fa:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800e4fe:	18a6      	adds	r6, r4, r2
 800e500:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e504:	429e      	cmp	r6, r3
 800e506:	9b01      	ldr	r3, [sp, #4]
 800e508:	eb03 0104 	add.w	r1, r3, r4
 800e50c:	d910      	bls.n	800e530 <ethernetif_input+0x84>
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
						(ETH_RX_BUF_SIZE - bufferoffset));
 800e50e:	f5c4 64be 	rsb	r4, r4, #1520	; 0x5f0
			payloadoffset = 0;

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800e512:	4448      	add	r0, r9
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
						(ETH_RX_BUF_SIZE - bufferoffset));
 800e514:	3404      	adds	r4, #4
			payloadoffset = 0;

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800e516:	4622      	mov	r2, r4
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);

				byteslefttocopy = byteslefttocopy
						- (ETH_RX_BUF_SIZE - bufferoffset);
				payloadoffset = payloadoffset
 800e518:	44a1      	add	r9, r4
			payloadoffset = 0;

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800e51a:	f003 fa92 	bl	8011a42 <memcpy>
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
						(ETH_RX_BUF_SIZE - bufferoffset));

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 800e51e:	f8db b00c 	ldr.w	fp, [fp, #12]
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);

				byteslefttocopy = byteslefttocopy
 800e522:	f2a6 52f4 	subw	r2, r6, #1524	; 0x5f4
						- (ETH_RX_BUF_SIZE - bufferoffset);
				payloadoffset = payloadoffset
						+ (ETH_RX_BUF_SIZE - bufferoffset);
				bufferoffset = 0;
 800e526:	2400      	movs	r4, #0
						(ETH_RX_BUF_SIZE - bufferoffset));

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);
 800e528:	f8db 3008 	ldr.w	r3, [fp, #8]
 800e52c:	9301      	str	r3, [sp, #4]
 800e52e:	e7e4      	b.n	800e4fa <ethernetif_input+0x4e>
						+ (ETH_RX_BUF_SIZE - bufferoffset);
				bufferoffset = 0;
			}

			/* Copy remaining data in pbuf */
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800e530:	4448      	add	r0, r9
 800e532:	f003 fa86 	bl	8011a42 <memcpy>

	if (p != NULL) {
		dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
		bufferoffset = 0;

		for (q = p; q != NULL; q = q->next) {
 800e536:	f8d8 8000 	ldr.w	r8, [r8]
 800e53a:	f1b8 0f00 	cmp.w	r8, #0
 800e53e:	d1d7      	bne.n	800e4f0 <ethernetif_input+0x44>
		}
	}

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 800e540:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < EthHandle.RxFrameInfos.SegCount; i++) {
 800e542:	2200      	movs	r2, #0
 800e544:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800e546:	4282      	cmp	r2, r0
 800e548:	d006      	beq.n	800e558 <ethernetif_input+0xac>
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e54a:	6819      	ldr	r1, [r3, #0]

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < EthHandle.RxFrameInfos.SegCount; i++) {
 800e54c:	3201      	adds	r2, #1
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e54e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800e552:	6019      	str	r1, [r3, #0]
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	e7f6      	b.n	800e546 <ethernetif_input+0x9a>

	/* Clear Segment_Count */
	EthHandle.RxFrameInfos.SegCount = 0;

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 800e558:	682b      	ldr	r3, [r5, #0]
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
	}

	/* Clear Segment_Count */
	EthHandle.RxFrameInfos.SegCount = 0;
 800e55a:	2100      	movs	r1, #0

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 800e55c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
	}

	/* Clear Segment_Count */
	EthHandle.RxFrameInfos.SegCount = 0;
 800e560:	63a9      	str	r1, [r5, #56]	; 0x38

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 800e562:	6950      	ldr	r0, [r2, #20]
 800e564:	3214      	adds	r2, #20
 800e566:	0600      	lsls	r0, r0, #24
 800e568:	d504      	bpl.n	800e574 <ethernetif_input+0xc8>
		/* Clear RBUS ETHERNET DMA flag */
		EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 800e56a:	2080      	movs	r0, #128	; 0x80
		/* Resume DMA reception */
		EthHandle.Instance->DMARPDR = 0;
 800e56c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	EthHandle.RxFrameInfos.SegCount = 0;

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
		/* Clear RBUS ETHERNET DMA flag */
		EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 800e570:	6010      	str	r0, [r2, #0]
		/* Resume DMA reception */
		EthHandle.Instance->DMARPDR = 0;
 800e572:	6099      	str	r1, [r3, #8]

	for (;;) {
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK) {
			do {
				p = low_level_input(netif);
				if (p != NULL) {
 800e574:	2f00      	cmp	r7, #0
 800e576:	d09c      	beq.n	800e4b2 <ethernetif_input+0x6>
					if (netif->input(p, netif) != ERR_OK) {
 800e578:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e57c:	4651      	mov	r1, sl
 800e57e:	4638      	mov	r0, r7
 800e580:	4798      	blx	r3
 800e582:	2800      	cmp	r0, #0
 800e584:	d09d      	beq.n	800e4c2 <ethernetif_input+0x16>
						pbuf_free(p);
 800e586:	4638      	mov	r0, r7
 800e588:	f7fc fd8c 	bl	800b0a4 <pbuf_free>
 800e58c:	e799      	b.n	800e4c2 <ethernetif_input+0x16>
 800e58e:	bf00      	nop
 800e590:	20042f68 	.word	0x20042f68
 800e594:	20049290 	.word	0x20049290

0800e598 <HAL_ETH_MspInit>:
/**
 * @brief  Initializes the ETH MSP.
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth) {
 800e598:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800e59a:	4c2f      	ldr	r4, [pc, #188]	; (800e658 <HAL_ETH_MspInit+0xc0>)
/**
 * @brief  Initializes the ETH MSP.
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth) {
 800e59c:	b08c      	sub	sp, #48	; 0x30
	 */

	/* Configure PA1, PA2 and PA7 */
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800e59e:	2600      	movs	r6, #0
	GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800e5a0:	482e      	ldr	r0, [pc, #184]	; (800e65c <HAL_ETH_MspInit+0xc4>)
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800e5a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
	/* Configure PA1, PA2 and PA7 */
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800e5a4:	ad0c      	add	r5, sp, #48	; 0x30
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800e5a6:	f043 0301 	orr.w	r3, r3, #1
 800e5aa:	6323      	str	r3, [r4, #48]	; 0x30
 800e5ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5ae:	f003 0301 	and.w	r3, r3, #1
 800e5b2:	9301      	str	r3, [sp, #4]
 800e5b4:	9b01      	ldr	r3, [sp, #4]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800e5b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5b8:	f043 0304 	orr.w	r3, r3, #4
 800e5bc:	6323      	str	r3, [r4, #48]	; 0x30
 800e5be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5c0:	f003 0304 	and.w	r3, r3, #4
 800e5c4:	9302      	str	r3, [sp, #8]
 800e5c6:	9b02      	ldr	r3, [sp, #8]
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800e5c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5ce:	6323      	str	r3, [r4, #48]	; 0x30
 800e5d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
	 */

	/* Configure PA1, PA2 and PA7 */
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800e5d2:	9609      	str	r6, [sp, #36]	; 0x24
	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800e5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d8:	9303      	str	r3, [sp, #12]
 800e5da:	9b03      	ldr	r3, [sp, #12]
	 RMII_MII_TXD0 ---------------------> PG13
	 RMII_MII_TXD1 ---------------------> PG14
	 */

	/* Configure PA1, PA2 and PA7 */
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	9308      	str	r3, [sp, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800e5e4:	230b      	movs	r3, #11
 800e5e6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800e5e8:	2386      	movs	r3, #134	; 0x86
 800e5ea:	f845 3d14 	str.w	r3, [r5, #-20]!
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	f7f5 ff84 	bl	80044fc <HAL_GPIO_Init>

	/* Configure PC1, PC4 and PC5 */
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800e5f4:	2332      	movs	r3, #50	; 0x32
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e5f6:	4629      	mov	r1, r5
 800e5f8:	4819      	ldr	r0, [pc, #100]	; (800e660 <HAL_ETH_MspInit+0xc8>)
	GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);

	/* Configure PC1, PC4 and PC5 */
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800e5fa:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e5fc:	f7f5 ff7e 	bl	80044fc <HAL_GPIO_Init>

	/* Configure PG2, PG11, PG13 and PG14 */
	GPIO_InitStructure.Pin = GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13
 800e600:	f646 0304 	movw	r3, #26628	; 0x6804
			| GPIO_PIN_14;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800e604:	4629      	mov	r1, r5
 800e606:	4817      	ldr	r0, [pc, #92]	; (800e664 <HAL_ETH_MspInit+0xcc>)
	/* Configure PC1, PC4 and PC5 */
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);

	/* Configure PG2, PG11, PG13 and PG14 */
	GPIO_InitStructure.Pin = GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13
 800e608:	9307      	str	r3, [sp, #28]
			| GPIO_PIN_14;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800e60a:	f7f5 ff77 	bl	80044fc <HAL_GPIO_Init>

	/* Enable the Ethernet global Interrupt */
	HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800e60e:	4632      	mov	r2, r6
 800e610:	2107      	movs	r1, #7
 800e612:	203d      	movs	r0, #61	; 0x3d
 800e614:	f7f4 fffa 	bl	800360c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e618:	203d      	movs	r0, #61	; 0x3d
 800e61a:	f7f5 f82f 	bl	800367c <HAL_NVIC_EnableIRQ>

	/* Enable ETHERNET clock  */
	__HAL_RCC_ETH_CLK_ENABLE()
 800e61e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e620:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e624:	6323      	str	r3, [r4, #48]	; 0x30
 800e626:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e62c:	9304      	str	r3, [sp, #16]
 800e62e:	9b04      	ldr	r3, [sp, #16]
 800e630:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e636:	6323      	str	r3, [r4, #48]	; 0x30
 800e638:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e63a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e63e:	9305      	str	r3, [sp, #20]
 800e640:	9b05      	ldr	r3, [sp, #20]
 800e642:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e644:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e648:	6323      	str	r3, [r4, #48]	; 0x30
 800e64a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e64c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e650:	9306      	str	r3, [sp, #24]
 800e652:	9b06      	ldr	r3, [sp, #24]
	;
}
 800e654:	b00c      	add	sp, #48	; 0x30
 800e656:	bd70      	pop	{r4, r5, r6, pc}
 800e658:	40023800 	.word	0x40023800
 800e65c:	40020000 	.word	0x40020000
 800e660:	40020800 	.word	0x40020800
 800e664:	40021800 	.word	0x40021800

0800e668 <HAL_ETH_RxCpltCallback>:
 * @brief  Ethernet Rx Transfer completed callback
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth) {
	osSemaphoreRelease(s_xSemaphore);
 800e668:	4b01      	ldr	r3, [pc, #4]	; (800e670 <HAL_ETH_RxCpltCallback+0x8>)
 800e66a:	6818      	ldr	r0, [r3, #0]
 800e66c:	f7f8 b9ea 	b.w	8006a44 <osSemaphoreRelease>
 800e670:	20042f68 	.word	0x20042f68

0800e674 <ETHERNET_IRQHandler>:
 * @brief  Ethernet IRQ Handler
 * @param  None
 * @retval None
 */
void ETHERNET_IRQHandler(void) {
	HAL_ETH_IRQHandler(&EthHandle);
 800e674:	4801      	ldr	r0, [pc, #4]	; (800e67c <ETHERNET_IRQHandler+0x8>)
 800e676:	f7f5 bd60 	b.w	800413a <HAL_ETH_IRQHandler>
 800e67a:	bf00      	nop
 800e67c:	20049290 	.word	0x20049290

0800e680 <ethernetif_init>:
#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 800e680:	2373      	movs	r3, #115	; 0x73
 */
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
 800e682:	4a3a      	ldr	r2, [pc, #232]	; (800e76c <ethernetif_init+0xec>)
	EthHandle.Init.MACAddr = macaddress;
	EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
	EthHandle.Init.Speed = ETH_SPEED_100M;
 800e684:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif) {
 800e688:	b5f0      	push	{r4, r5, r6, r7, lr}
#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 800e68a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
	netif->name[1] = IFNAME1;
 800e68e:	2374      	movs	r3, #116	; 0x74
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif) {
 800e690:	b089      	sub	sp, #36	; 0x24
 800e692:	4604      	mov	r4, r0
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
	netif->name[1] = IFNAME1;
 800e694:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

	netif->output = etharp_output;
 800e698:	4b35      	ldr	r3, [pc, #212]	; (800e770 <ethernetif_init+0xf0>)
 800e69a:	6143      	str	r3, [r0, #20]
	netif->linkoutput = low_level_output;
 800e69c:	4b35      	ldr	r3, [pc, #212]	; (800e774 <ethernetif_init+0xf4>)
 800e69e:	6183      	str	r3, [r0, #24]
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
 800e6a0:	2302      	movs	r3, #2
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
 800e6a2:	4835      	ldr	r0, [pc, #212]	; (800e778 <ethernetif_init+0xf8>)
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
 800e6a4:	f88d 3004 	strb.w	r3, [sp, #4]
 800e6a8:	2300      	movs	r3, #0
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
 800e6aa:	6002      	str	r2, [r0, #0]
	EthHandle.Init.MACAddr = macaddress;
 800e6ac:	aa01      	add	r2, sp, #4
	EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
	EthHandle.Init.Speed = ETH_SPEED_100M;
 800e6ae:	6081      	str	r1, [r0, #8]
	EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e6b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
	EthHandle.Init.MACAddr = macaddress;
 800e6b4:	6142      	str	r2, [r0, #20]
	EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800e6b6:	2201      	movs	r2, #1
	EthHandle.Init.Speed = ETH_SPEED_100M;
	EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e6b8:	60c1      	str	r1, [r0, #12]
	EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e6ba:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
 800e6be:	f88d 3005 	strb.w	r3, [sp, #5]
 800e6c2:	f88d 3006 	strb.w	r3, [sp, #6]
 800e6c6:	f88d 3007 	strb.w	r3, [sp, #7]
 800e6ca:	f88d 3008 	strb.w	r3, [sp, #8]
 800e6ce:	f88d 3009 	strb.w	r3, [sp, #9]
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
	EthHandle.Init.MACAddr = macaddress;
	EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800e6d2:	6042      	str	r2, [r0, #4]
	EthHandle.Init.Speed = ETH_SPEED_100M;
	EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
	EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e6d4:	6201      	str	r1, [r0, #32]
	EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800e6d6:	6182      	str	r2, [r0, #24]
	EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800e6d8:	61c3      	str	r3, [r0, #28]
	EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800e6da:	8203      	strh	r3, [r0, #16]

	/* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
	if (HAL_ETH_Init(&EthHandle) == HAL_OK) {
 800e6dc:	f7f5 fdd8 	bl	8004290 <HAL_ETH_Init>
 800e6e0:	b928      	cbnz	r0, 800e6ee <ethernetif_init+0x6e>
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP;
 800e6e2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800e6e6:	f043 0304 	orr.w	r3, r3, #4
 800e6ea:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	}

	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0],
 800e6ee:	2305      	movs	r3, #5
 800e6f0:	4a22      	ldr	r2, [pc, #136]	; (800e77c <ethernetif_init+0xfc>)
 800e6f2:	4923      	ldr	r1, [pc, #140]	; (800e780 <ethernetif_init+0x100>)
	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
 800e6f4:	2500      	movs	r5, #0
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP;
	}

	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0],
 800e6f6:	4820      	ldr	r0, [pc, #128]	; (800e778 <ethernetif_init+0xf8>)
	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 800e6f8:	ae03      	add	r6, sp, #12
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP;
	}

	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0],
 800e6fa:	f7f5 fbe7 	bl	8003ecc <HAL_ETH_DMATxDescListInit>
			ETH_TXBUFNB);

	/* Initialize Rx Descriptors list: Chain Mode  */
	HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0],
 800e6fe:	4a21      	ldr	r2, [pc, #132]	; (800e784 <ethernetif_init+0x104>)
 800e700:	2305      	movs	r3, #5
 800e702:	4921      	ldr	r1, [pc, #132]	; (800e788 <ethernetif_init+0x108>)
 800e704:	481c      	ldr	r0, [pc, #112]	; (800e778 <ethernetif_init+0xf8>)
 800e706:	f7f5 fc1e 	bl	8003f46 <HAL_ETH_DMARxDescListInit>
			ETH_RXBUFNB);

	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;
 800e70a:	2306      	movs	r3, #6

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
 800e70c:	a808      	add	r0, sp, #32
	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
 800e70e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
	/* Initialize Rx Descriptors list: Chain Mode  */
	HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0],
			ETH_RXBUFNB);

	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;
 800e712:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
 800e716:	2302      	movs	r3, #2
	netif->hwaddr[1] = MAC_ADDR1;
	netif->hwaddr[2] = MAC_ADDR2;
 800e718:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e71c:	2101      	movs	r1, #1

	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
 800e71e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	netif->hwaddr[3] = MAC_ADDR3;
	netif->hwaddr[4] = MAC_ADDR4;
	netif->hwaddr[5] = MAC_ADDR5;

	/* set netif maximum transfer unit */
	netif->mtu = 1500;
 800e722:	f240 53dc 	movw	r3, #1500	; 0x5dc

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
	netif->hwaddr[2] = MAC_ADDR2;
	netif->hwaddr[3] = MAC_ADDR3;
 800e726:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	netif->hwaddr[4] = MAC_ADDR4;
	netif->hwaddr[5] = MAC_ADDR5;

	/* set netif maximum transfer unit */
	netif->mtu = 1500;
 800e72a:	8563      	strh	r3, [r4, #42]	; 0x2a

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e72c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
	netif->hwaddr[2] = MAC_ADDR2;
	netif->hwaddr[3] = MAC_ADDR3;
	netif->hwaddr[4] = MAC_ADDR4;
 800e730:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31

	/* set netif maximum transfer unit */
	netif->mtu = 1500;

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e734:	f043 030a 	orr.w	r3, r3, #10
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
	netif->hwaddr[2] = MAC_ADDR2;
	netif->hwaddr[3] = MAC_ADDR3;
	netif->hwaddr[4] = MAC_ADDR4;
	netif->hwaddr[5] = MAC_ADDR5;
 800e738:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
 800e73c:	f840 5d20 	str.w	r5, [r0, #-32]!

	/* set netif maximum transfer unit */
	netif->mtu = 1500;

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e740:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e744:	f7f8 f942 	bl	80069cc <osSemaphoreCreate>

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 800e748:	4f10      	ldr	r7, [pc, #64]	; (800e78c <ethernetif_init+0x10c>)
	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e74a:	4b11      	ldr	r3, [pc, #68]	; (800e790 <ethernetif_init+0x110>)
 800e74c:	6018      	str	r0, [r3, #0]

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 800e74e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e750:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e752:	683b      	ldr	r3, [r7, #0]
			INTERFACE_THREAD_STACK_SIZE);
	osThreadCreate(osThread(EthIf), netif);
 800e754:	4621      	mov	r1, r4
 800e756:	a803      	add	r0, sp, #12
	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 800e758:	6033      	str	r3, [r6, #0]
			INTERFACE_THREAD_STACK_SIZE);
	osThreadCreate(osThread(EthIf), netif);
 800e75a:	f7f8 f899 	bl	8006890 <osThreadCreate>

	/* Enable MAC and DMA transmission and reception */
	HAL_ETH_Start(&EthHandle);
 800e75e:	4806      	ldr	r0, [pc, #24]	; (800e778 <ethernetif_init+0xf8>)
 800e760:	f7f5 fe8e 	bl	8004480 <HAL_ETH_Start>

	/* initialize the hardware */
	low_level_init(netif);

	return ERR_OK;
}
 800e764:	4628      	mov	r0, r5
 800e766:	b009      	add	sp, #36	; 0x24
 800e768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e76a:	bf00      	nop
 800e76c:	40028000 	.word	0x40028000
 800e770:	0800dfe9 	.word	0x0800dfe9
 800e774:	0800e40d 	.word	0x0800e40d
 800e778:	20049290 	.word	0x20049290
 800e77c:	2001245c 	.word	0x2001245c
 800e780:	20014220 	.word	0x20014220
 800e784:	20010698 	.word	0x20010698
 800e788:	200105f8 	.word	0x200105f8
 800e78c:	08017ef8 	.word	0x08017ef8
 800e790:	20042f68 	.word	0x20042f68

0800e794 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e796:	2003      	movs	r0, #3
 800e798:	f7f4 ff26 	bl	80035e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800e79c:	2200      	movs	r2, #0
 800e79e:	f06f 000b 	mvn.w	r0, #11
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	f7f4 ff32 	bl	800360c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f06f 000a 	mvn.w	r0, #10
 800e7ae:	4611      	mov	r1, r2
 800e7b0:	f7f4 ff2c 	bl	800360c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	f06f 0009 	mvn.w	r0, #9
 800e7ba:	4611      	mov	r1, r2
 800e7bc:	f7f4 ff26 	bl	800360c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f06f 0004 	mvn.w	r0, #4
 800e7c6:	4611      	mov	r1, r2
 800e7c8:	f7f4 ff20 	bl	800360c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	f06f 0003 	mvn.w	r0, #3
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	f7f4 ff1a 	bl	800360c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e7d8:	2200      	movs	r2, #0
 800e7da:	210f      	movs	r1, #15
 800e7dc:	f06f 0001 	mvn.w	r0, #1
 800e7e0:	f7f4 ff14 	bl	800360c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	210f      	movs	r1, #15
 800e7e8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e7ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800e7f0:	f7f4 bf0c 	b.w	800360c <HAL_NVIC_SetPriority>

0800e7f4 <HAL_DMA2D_MspInit>:
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{

  if(hdma2d->Instance==DMA2D)
 800e7f4:	6802      	ldr	r2, [r0, #0]

  /* USER CODE END MspInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800e7f6:	b082      	sub	sp, #8

  if(hdma2d->Instance==DMA2D)
 800e7f8:	4b07      	ldr	r3, [pc, #28]	; (800e818 <HAL_DMA2D_MspInit+0x24>)
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d10a      	bne.n	800e814 <HAL_DMA2D_MspInit+0x20>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e7fe:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800e802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e804:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e808:	631a      	str	r2, [r3, #48]	; 0x30
 800e80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e80c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e810:	9301      	str	r3, [sp, #4]
 800e812:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800e814:	b002      	add	sp, #8
 800e816:	4770      	bx	lr
 800e818:	4002b000 	.word	0x4002b000

0800e81c <HAL_I2C_MspInit>:
  /* USER CODE END DMA2D_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e81c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 800e81e:	6802      	ldr	r2, [r0, #0]
 800e820:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <HAL_I2C_MspInit+0x44>)
 800e822:	429a      	cmp	r2, r3
 800e824:	d119      	bne.n	800e85a <HAL_I2C_MspInit+0x3e>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800e826:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e82a:	480e      	ldr	r0, [pc, #56]	; (800e864 <HAL_I2C_MspInit+0x48>)
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800e82c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e82e:	2312      	movs	r3, #18
 800e830:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e832:	2301      	movs	r3, #1
 800e834:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e836:	2303      	movs	r3, #3
 800e838:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800e83a:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e83c:	eb0d 0103 	add.w	r1, sp, r3
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800e840:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e842:	f7f5 fe5b 	bl	80044fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800e846:	4b08      	ldr	r3, [pc, #32]	; (800e868 <HAL_I2C_MspInit+0x4c>)
 800e848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e84a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e84e:	641a      	str	r2, [r3, #64]	; 0x40
 800e850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800e85a:	b007      	add	sp, #28
 800e85c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e860:	40005c00 	.word	0x40005c00
 800e864:	40021c00 	.word	0x40021c00
 800e868:	40023800 	.word	0x40023800

0800e86c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C3)
 800e86c:	6802      	ldr	r2, [r0, #0]
 800e86e:	4b07      	ldr	r3, [pc, #28]	; (800e88c <HAL_I2C_MspDeInit+0x20>)
 800e870:	429a      	cmp	r2, r3
 800e872:	d109      	bne.n	800e888 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800e874:	4a06      	ldr	r2, [pc, #24]	; (800e890 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800e876:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800e87a:	4806      	ldr	r0, [pc, #24]	; (800e894 <HAL_I2C_MspDeInit+0x28>)
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800e87c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e87e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e882:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800e884:	f7f5 bf26 	b.w	80046d4 <HAL_GPIO_DeInit>
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	40005c00 	.word	0x40005c00
 800e890:	40023800 	.word	0x40023800
 800e894:	40021c00 	.word	0x40021c00

0800e898 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800e898:	6802      	ldr	r2, [r0, #0]
 800e89a:	4b25      	ldr	r3, [pc, #148]	; (800e930 <HAL_LTDC_MspInit+0x98>)
 800e89c:	429a      	cmp	r2, r3
  /* USER CODE END I2C3_MspDeInit 1 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800e89e:	b570      	push	{r4, r5, r6, lr}
 800e8a0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800e8a2:	d143      	bne.n	800e92c <HAL_LTDC_MspInit+0x94>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e8a4:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8a8:	2400      	movs	r4, #0
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8aa:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e8ac:	260e      	movs	r6, #14
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e8ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800e8b0:	a901      	add	r1, sp, #4
 800e8b2:	4820      	ldr	r0, [pc, #128]	; (800e934 <HAL_LTDC_MspInit+0x9c>)
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e8b4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e8b8:	645a      	str	r2, [r3, #68]	; 0x44
 800e8ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8bc:	9502      	str	r5, [sp, #8]
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e8be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8c2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8c4:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	9b00      	ldr	r3, [sp, #0]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800e8ca:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e8cc:	9605      	str	r6, [sp, #20]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800e8ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800e8d0:	f7f5 fe14 	bl	80044fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800e8d4:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e8d8:	a901      	add	r1, sp, #4
 800e8da:	4817      	ldr	r0, [pc, #92]	; (800e938 <HAL_LTDC_MspInit+0xa0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800e8dc:	9301      	str	r3, [sp, #4]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8de:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8e0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8e2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e8e4:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e8e6:	f7f5 fe09 	bl	80044fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800e8ea:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800e8ec:	a901      	add	r1, sp, #4
 800e8ee:	4813      	ldr	r0, [pc, #76]	; (800e93c <HAL_LTDC_MspInit+0xa4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800e8f0:	9301      	str	r3, [sp, #4]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8f2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8f4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8f6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e8f8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800e8fa:	f7f5 fdff 	bl	80044fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800e8fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800e902:	a901      	add	r1, sp, #4
 800e904:	480e      	ldr	r0, [pc, #56]	; (800e940 <HAL_LTDC_MspInit+0xa8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800e906:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800e908:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e90a:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800e90c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e90e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e910:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800e912:	f7f5 fdf3 	bl	80044fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800e916:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e91a:	a901      	add	r1, sp, #4
 800e91c:	4809      	ldr	r0, [pc, #36]	; (800e944 <HAL_LTDC_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800e91e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e920:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e922:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e924:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e926:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e928:	f7f5 fde8 	bl	80044fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800e92c:	b006      	add	sp, #24
 800e92e:	bd70      	pop	{r4, r5, r6, pc}
 800e930:	40016800 	.word	0x40016800
 800e934:	40021000 	.word	0x40021000
 800e938:	40022400 	.word	0x40022400
 800e93c:	40022800 	.word	0x40022800
 800e940:	40021800 	.word	0x40021800
 800e944:	40022000 	.word	0x40022000

0800e948 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800e948:	4b2b      	ldr	r3, [pc, #172]	; (800e9f8 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800e94a:	b5f0      	push	{r4, r5, r6, r7, lr}
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800e94c:	681c      	ldr	r4, [r3, #0]
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800e94e:	b087      	sub	sp, #28
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800e950:	2c00      	cmp	r4, #0
 800e952:	d14e      	bne.n	800e9f2 <HAL_SDRAM_MspInit+0xaa>
    return;
  }
  FMC_Initialized = 1;
 800e954:	2201      	movs	r2, #1
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e956:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e958:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e95a:	250c      	movs	r5, #12
  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
 800e95c:	601a      	str	r2, [r3, #0]
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e95e:	a901      	add	r1, sp, #4
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e960:	4b26      	ldr	r3, [pc, #152]	; (800e9fc <HAL_SDRAM_MspInit+0xb4>)
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e962:	4827      	ldr	r0, [pc, #156]	; (800ea00 <HAL_SDRAM_MspInit+0xb8>)
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e966:	f042 0201 	orr.w	r2, r2, #1
 800e96a:	639a      	str	r2, [r3, #56]	; 0x38
 800e96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e96e:	9702      	str	r7, [sp, #8]
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e970:	f003 0301 	and.w	r3, r3, #1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e974:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e976:	9604      	str	r6, [sp, #16]
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	9b00      	ldr	r3, [sp, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
 800e97c:	f64f 7383 	movw	r3, #65411	; 0xff83
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e980:	9505      	str	r5, [sp, #20]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
 800e982:	9301      	str	r3, [sp, #4]
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e984:	f7f5 fdba 	bl	80044fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 800e988:	f248 1333 	movw	r3, #33075	; 0x8133
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e98c:	a901      	add	r1, sp, #4
 800e98e:	481d      	ldr	r0, [pc, #116]	; (800ea04 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 800e990:	9301      	str	r3, [sp, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e992:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e994:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e996:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e998:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e99a:	f7f5 fdaf 	bl	80044fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800e99e:	f24c 7303 	movw	r3, #50947	; 0xc703
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e9a2:	a901      	add	r1, sp, #4
 800e9a4:	4818      	ldr	r0, [pc, #96]	; (800ea08 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800e9a6:	9301      	str	r3, [sp, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9a8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9aa:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9ac:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9ae:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e9b0:	f7f5 fda4 	bl	80044fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800e9b4:	f64f 033f 	movw	r3, #63551	; 0xf83f
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e9b8:	a901      	add	r1, sp, #4
 800e9ba:	4814      	ldr	r0, [pc, #80]	; (800ea0c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800e9bc:	9301      	str	r3, [sp, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9be:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9c0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9c2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9c4:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e9c6:	f7f5 fd99 	bl	80044fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|GPIO_PIN_3;
 800e9ca:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e9cc:	a901      	add	r1, sp, #4
 800e9ce:	4810      	ldr	r0, [pc, #64]	; (800ea10 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|GPIO_PIN_3;
 800e9d0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9d2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9d4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9d6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9d8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e9da:	f7f5 fd8f 	bl	80044fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e9de:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9e0:	a901      	add	r1, sp, #4
 800e9e2:	480c      	ldr	r0, [pc, #48]	; (800ea14 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e9e4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9e6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9e8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9ea:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9ec:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9ee:	f7f5 fd85 	bl	80044fc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800e9f2:	b007      	add	sp, #28
 800e9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	20042f70 	.word	0x20042f70
 800e9fc:	40023800 	.word	0x40023800
 800ea00:	40021000 	.word	0x40021000
 800ea04:	40021800 	.word	0x40021800
 800ea08:	40020c00 	.word	0x40020c00
 800ea0c:	40021400 	.word	0x40021400
 800ea10:	40021c00 	.word	0x40021c00
 800ea14:	40020800 	.word	0x40020800

0800ea18 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800ea18:	6802      	ldr	r2, [r0, #0]
 800ea1a:	4b22      	ldr	r3, [pc, #136]	; (800eaa4 <HAL_SAI_MspInit+0x8c>)
 800ea1c:	429a      	cmp	r2, r3
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800ea1e:	b510      	push	{r4, lr}
 800ea20:	4604      	mov	r4, r0
 800ea22:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800ea24:	d11b      	bne.n	800ea5e <HAL_SAI_MspInit+0x46>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800ea26:	4b20      	ldr	r3, [pc, #128]	; (800eaa8 <HAL_SAI_MspInit+0x90>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	b94a      	cbnz	r2, 800ea40 <HAL_SAI_MspInit+0x28>
    {
      __HAL_RCC_SAI2_CLK_ENABLE();
 800ea2c:	491f      	ldr	r1, [pc, #124]	; (800eaac <HAL_SAI_MspInit+0x94>)
 800ea2e:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800ea30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ea34:	6448      	str	r0, [r1, #68]	; 0x44
 800ea36:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800ea38:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800ea3c:	9101      	str	r1, [sp, #4]
 800ea3e:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 800ea40:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ea42:	a903      	add	r1, sp, #12
 800ea44:	481a      	ldr	r0, [pc, #104]	; (800eab0 <HAL_SAI_MspInit+0x98>)
    /* Peripheral clock enable */
    if (SAI2_client == 0)
    {
      __HAL_RCC_SAI2_CLK_ENABLE();
    }
    SAI2_client ++;
 800ea46:	601a      	str	r2, [r3, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800ea48:	23f0      	movs	r3, #240	; 0xf0
 800ea4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea4c:	2302      	movs	r3, #2
 800ea4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea50:	2300      	movs	r3, #0
 800ea52:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea54:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800ea56:	230a      	movs	r3, #10
 800ea58:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ea5a:	f7f5 fd4f 	bl	80044fc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800ea5e:	6822      	ldr	r2, [r4, #0]
 800ea60:	4b14      	ldr	r3, [pc, #80]	; (800eab4 <HAL_SAI_MspInit+0x9c>)
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d11c      	bne.n	800eaa0 <HAL_SAI_MspInit+0x88>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800ea66:	4b10      	ldr	r3, [pc, #64]	; (800eaa8 <HAL_SAI_MspInit+0x90>)
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	b94a      	cbnz	r2, 800ea80 <HAL_SAI_MspInit+0x68>
      {
      __HAL_RCC_SAI2_CLK_ENABLE();
 800ea6c:	490f      	ldr	r1, [pc, #60]	; (800eaac <HAL_SAI_MspInit+0x94>)
 800ea6e:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800ea70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ea74:	6448      	str	r0, [r1, #68]	; 0x44
 800ea76:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800ea78:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800ea7c:	9102      	str	r1, [sp, #8]
 800ea7e:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 800ea80:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800ea82:	a903      	add	r1, sp, #12
 800ea84:	480c      	ldr	r0, [pc, #48]	; (800eab8 <HAL_SAI_MspInit+0xa0>)
      /* Peripheral clock enable */
      if (SAI2_client == 0)
      {
      __HAL_RCC_SAI2_CLK_ENABLE();
      }
    SAI2_client ++;
 800ea86:	601a      	str	r2, [r3, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800ea88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea8e:	2302      	movs	r3, #2
 800ea90:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea92:	2300      	movs	r3, #0
 800ea94:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea96:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800ea98:	230a      	movs	r3, #10
 800ea9a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800ea9c:	f7f5 fd2e 	bl	80044fc <HAL_GPIO_Init>

    }
}
 800eaa0:	b008      	add	sp, #32
 800eaa2:	bd10      	pop	{r4, pc}
 800eaa4:	40015c04 	.word	0x40015c04
 800eaa8:	20042f6c 	.word	0x20042f6c
 800eaac:	40023800 	.word	0x40023800
 800eab0:	40022000 	.word	0x40022000
 800eab4:	40015c24 	.word	0x40015c24
 800eab8:	40021800 	.word	0x40021800

0800eabc <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{

/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800eabc:	6802      	ldr	r2, [r0, #0]
 800eabe:	4b14      	ldr	r3, [pc, #80]	; (800eb10 <HAL_SAI_MspDeInit+0x54>)
 800eac0:	429a      	cmp	r2, r3

    }
}

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 800eac2:	b510      	push	{r4, lr}
 800eac4:	4604      	mov	r4, r0

/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800eac6:	d10d      	bne.n	800eae4 <HAL_SAI_MspDeInit+0x28>
    {
    SAI2_client --;
 800eac8:	4a12      	ldr	r2, [pc, #72]	; (800eb14 <HAL_SAI_MspDeInit+0x58>)
 800eaca:	6813      	ldr	r3, [r2, #0]
 800eacc:	3b01      	subs	r3, #1
 800eace:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 800ead0:	b923      	cbnz	r3, 800eadc <HAL_SAI_MspDeInit+0x20>
      {
      /* Peripheral clock disable */ 
       __HAL_RCC_SAI2_CLK_DISABLE();
 800ead2:	4a11      	ldr	r2, [pc, #68]	; (800eb18 <HAL_SAI_MspDeInit+0x5c>)
 800ead4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800ead6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eada:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 800eadc:	21f0      	movs	r1, #240	; 0xf0
 800eade:	480f      	ldr	r0, [pc, #60]	; (800eb1c <HAL_SAI_MspDeInit+0x60>)
 800eae0:	f7f5 fdf8 	bl	80046d4 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 800eae4:	6822      	ldr	r2, [r4, #0]
 800eae6:	4b0e      	ldr	r3, [pc, #56]	; (800eb20 <HAL_SAI_MspDeInit+0x64>)
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d110      	bne.n	800eb0e <HAL_SAI_MspDeInit+0x52>
    {
    SAI2_client --;
 800eaec:	4a09      	ldr	r2, [pc, #36]	; (800eb14 <HAL_SAI_MspDeInit+0x58>)
 800eaee:	6813      	ldr	r3, [r2, #0]
 800eaf0:	3b01      	subs	r3, #1
 800eaf2:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 800eaf4:	b923      	cbnz	r3, 800eb00 <HAL_SAI_MspDeInit+0x44>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 800eaf6:	4a08      	ldr	r2, [pc, #32]	; (800eb18 <HAL_SAI_MspDeInit+0x5c>)
 800eaf8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800eafa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eafe:	6453      	str	r3, [r2, #68]	; 0x44
      }
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 800eb00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eb04:	4807      	ldr	r0, [pc, #28]	; (800eb24 <HAL_SAI_MspDeInit+0x68>)

    }
}
 800eb06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      }
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 800eb0a:	f7f5 bde3 	b.w	80046d4 <HAL_GPIO_DeInit>
 800eb0e:	bd10      	pop	{r4, pc}
 800eb10:	40015c04 	.word	0x40015c04
 800eb14:	20042f6c 	.word	0x20042f6c
 800eb18:	40023800 	.word	0x40023800
 800eb1c:	40022000 	.word	0x40022000
 800eb20:	40015c24 	.word	0x40015c24
 800eb24:	40021800 	.word	0x40021800

0800eb28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb28:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800eb2a:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eb2c:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800eb2e:	2200      	movs	r2, #0
 800eb30:	2019      	movs	r0, #25
 800eb32:	f7f4 fd6b 	bl	800360c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800eb36:	2019      	movs	r0, #25
 800eb38:	f7f4 fda0 	bl	800367c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800eb3c:	4b14      	ldr	r3, [pc, #80]	; (800eb90 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800eb3e:	a901      	add	r1, sp, #4
 800eb40:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800eb42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800eb44:	4c13      	ldr	r4, [pc, #76]	; (800eb94 <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800eb46:	f042 0201 	orr.w	r2, r2, #1
 800eb4a:	645a      	str	r2, [r3, #68]	; 0x44
 800eb4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb4e:	f003 0301 	and.w	r3, r3, #1
 800eb52:	9302      	str	r3, [sp, #8]
 800eb54:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800eb56:	f7f6 fd45 	bl	80055e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800eb5a:	f7f6 fd2b 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800eb5e:	4b0e      	ldr	r3, [pc, #56]	; (800eb98 <HAL_InitTick+0x70>)
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
 800eb60:	0040      	lsls	r0, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800eb62:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800eb64:	f240 33e7 	movw	r3, #999	; 0x3e7
 800eb68:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800eb6a:	4b0c      	ldr	r3, [pc, #48]	; (800eb9c <HAL_InitTick+0x74>)
 800eb6c:	fbb0 f0f3 	udiv	r0, r0, r3
 800eb70:	3801      	subs	r0, #1
  htim1.Init.ClockDivision = 0;
 800eb72:	2300      	movs	r3, #0
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
 800eb74:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800eb76:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800eb78:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb7a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800eb7c:	f7f7 fdb2 	bl	80066e4 <HAL_TIM_Base_Init>
 800eb80:	b918      	cbnz	r0, 800eb8a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800eb82:	4620      	mov	r0, r4
 800eb84:	f7f7 fc8c 	bl	80064a0 <HAL_TIM_Base_Start_IT>
 800eb88:	e000      	b.n	800eb8c <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800eb8a:	2001      	movs	r0, #1
}
 800eb8c:	b008      	add	sp, #32
 800eb8e:	bd10      	pop	{r4, pc}
 800eb90:	40023800 	.word	0x40023800
 800eb94:	200492d8 	.word	0x200492d8
 800eb98:	40010000 	.word	0x40010000
 800eb9c:	000f4240 	.word	0x000f4240

0800eba0 <audioRecorderInit>:
 * @param volume: 0 - mute, 80 - 0 dB, 100 - 17.625 dB
 * @retval AUDIO_OK - no errors
 */
uint8_t audioRecorderInit(uint16_t inputDevice, uint8_t volume,
		uint32_t audioFreq) {
	inputDeviceStat = inputDevice;
 800eba0:	4b02      	ldr	r3, [pc, #8]	; (800ebac <audioRecorderInit+0xc>)
 800eba2:	8018      	strh	r0, [r3, #0]
	volumeStat = volume;
 800eba4:	4b02      	ldr	r3, [pc, #8]	; (800ebb0 <audioRecorderInit+0x10>)
 800eba6:	7019      	strb	r1, [r3, #0]
	audioFreqStat = audioFreq;
	return BSP_AUDIO_IN_Init(inputDevice, volume, audioFreq);
 800eba8:	f7f3 b9ba 	b.w	8001f20 <BSP_AUDIO_IN_Init>
 800ebac:	20042f7c 	.word	0x20042f7c
 800ebb0:	20042f74 	.word	0x20042f74

0800ebb4 <audioRecorderStartRecording>:
 * @brief The function sets the 16 bit audio buffer (must have allocated memory) by \p audioBuffer and \p audioBufferSize.
 * @retval AUDIO_OK - no errors
 */
uint8_t audioRecorderStartRecording(uint16_t* audioBuffer,
		uint32_t audioBufferSize) {
	audioBufferStat = audioBuffer;
 800ebb4:	4b02      	ldr	r3, [pc, #8]	; (800ebc0 <audioRecorderStartRecording+0xc>)
 800ebb6:	6018      	str	r0, [r3, #0]
	audioBufferSizeStat = audioBufferSize;
 800ebb8:	4b02      	ldr	r3, [pc, #8]	; (800ebc4 <audioRecorderStartRecording+0x10>)
 800ebba:	6019      	str	r1, [r3, #0]

	return BSP_AUDIO_IN_Record(audioBuffer, audioBufferSize);
 800ebbc:	f7f3 b8d8 	b.w	8001d70 <BSP_AUDIO_IN_Record>
 800ebc0:	20042f78 	.word	0x20042f78
 800ebc4:	20042f80 	.word	0x20042f80

0800ebc8 <audioRecorderSetSamplingFrequency>:
uint8_t audioRecorderSetVolume(uint8_t volume) {
	volumeStat = volume;
	return BSP_AUDIO_IN_SetVolume(volume);
}

uint8_t audioRecorderSetSamplingFrequency(uint32_t frequency) {
 800ebc8:	b510      	push	{r4, lr}
 800ebca:	4604      	mov	r4, r0
	BSP_AUDIO_IN_Pause();
 800ebcc:	f7f3 f8f6 	bl	8001dbc <BSP_AUDIO_IN_Pause>
	BSP_AUDIO_IN_Stop(CODEC_PDWN_HW);
 800ebd0:	2001      	movs	r0, #1
 800ebd2:	f7f3 f8d7 	bl	8001d84 <BSP_AUDIO_IN_Stop>
	audioFreqStat = frequency;

	uint8_t status = audioRecorderInit(inputDeviceStat, volumeStat,
 800ebd6:	4b08      	ldr	r3, [pc, #32]	; (800ebf8 <audioRecorderSetSamplingFrequency+0x30>)
 800ebd8:	4622      	mov	r2, r4
 800ebda:	7819      	ldrb	r1, [r3, #0]
 800ebdc:	4b07      	ldr	r3, [pc, #28]	; (800ebfc <audioRecorderSetSamplingFrequency+0x34>)
 800ebde:	8818      	ldrh	r0, [r3, #0]
 800ebe0:	f7ff ffde 	bl	800eba0 <audioRecorderInit>
			audioFreqStat);
	if (status != AUDIO_OK)
 800ebe4:	b938      	cbnz	r0, 800ebf6 <audioRecorderSetSamplingFrequency+0x2e>
		return status;

	return audioRecorderStartRecording(audioBufferStat, audioBufferSizeStat);
 800ebe6:	4b06      	ldr	r3, [pc, #24]	; (800ec00 <audioRecorderSetSamplingFrequency+0x38>)
 800ebe8:	6819      	ldr	r1, [r3, #0]
 800ebea:	4b06      	ldr	r3, [pc, #24]	; (800ec04 <audioRecorderSetSamplingFrequency+0x3c>)
}
 800ebec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint8_t status = audioRecorderInit(inputDeviceStat, volumeStat,
			audioFreqStat);
	if (status != AUDIO_OK)
		return status;

	return audioRecorderStartRecording(audioBufferStat, audioBufferSizeStat);
 800ebf0:	6818      	ldr	r0, [r3, #0]
 800ebf2:	f7ff bfdf 	b.w	800ebb4 <audioRecorderStartRecording>
}
 800ebf6:	bd10      	pop	{r4, pc}
 800ebf8:	20042f74 	.word	0x20042f74
 800ebfc:	20042f7c 	.word	0x20042f7c
 800ec00:	20042f80 	.word	0x20042f80
 800ec04:	20042f78 	.word	0x20042f78

0800ec08 <audioRecordingSoundMailFill>:
 * @param audioBufferSize buffer size
 * @param frequency sampling frequency
 */
void audioRecordingSoundMailFill(SoundMailStr* soundStructure,
		uint16_t* audioBuffer, uint32_t audioBufferSize, uint32_t frequency) {
	soundStructure->frequency = frequency;
 800ec08:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	soundStructure->soundBufferSize = audioBufferSize;

	for (uint32_t iterator = 0; iterator < audioBufferSize; iterator++) {
 800ec0c:	2300      	movs	r3, #0
 * @param frequency sampling frequency
 */
void audioRecordingSoundMailFill(SoundMailStr* soundStructure,
		uint16_t* audioBuffer, uint32_t audioBufferSize, uint32_t frequency) {
	soundStructure->frequency = frequency;
	soundStructure->soundBufferSize = audioBufferSize;
 800ec0e:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
 * @param audioBuffer 16 bit data array
 * @param audioBufferSize buffer size
 * @param frequency sampling frequency
 */
void audioRecordingSoundMailFill(SoundMailStr* soundStructure,
		uint16_t* audioBuffer, uint32_t audioBufferSize, uint32_t frequency) {
 800ec12:	b510      	push	{r4, lr}
	soundStructure->frequency = frequency;
	soundStructure->soundBufferSize = audioBufferSize;

	for (uint32_t iterator = 0; iterator < audioBufferSize; iterator++) {
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d005      	beq.n	800ec24 <audioRecordingSoundMailFill+0x1c>
		soundStructure->soundBuffer[iterator] = audioBuffer[iterator];
 800ec18:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800ec1c:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
void audioRecordingSoundMailFill(SoundMailStr* soundStructure,
		uint16_t* audioBuffer, uint32_t audioBufferSize, uint32_t frequency) {
	soundStructure->frequency = frequency;
	soundStructure->soundBufferSize = audioBufferSize;

	for (uint32_t iterator = 0; iterator < audioBufferSize; iterator++) {
 800ec20:	3301      	adds	r3, #1
 800ec22:	e7f7      	b.n	800ec14 <audioRecordingSoundMailFill+0xc>
		soundStructure->soundBuffer[iterator] = audioBuffer[iterator];
	}
}
 800ec24:	bd10      	pop	{r4, pc}

0800ec26 <audioRecordingUpdateSoundBuffer>:
 * @param soundBuffer: pointer to SoundBuffer (destination)
 * @param SoundMail: pointer to SoundMail (source)
 */
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;
 800ec26:	f242 0304 	movw	r3, #8196	; 0x2004
 800ec2a:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 800ec2e:	50c2      	str	r2, [r0, r3]
 800ec30:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 * @brief This function updates the sound buffer using "small" sound package of sound mail.
 * @param soundBuffer: pointer to SoundBuffer (destination)
 * @param SoundMail: pointer to SoundMail (source)
 */
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
 800ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec36:	eb01 0443 	add.w	r4, r1, r3, lsl #1
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
 800ec3a:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
		if (soundBuffer->iterator >= soundBuffer->size)
 800ec3e:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
			soundBuffer->iterator = 0;
 800ec42:	2600      	movs	r6, #0
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
 800ec44:	3308      	adds	r3, #8
 */
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
 800ec46:	42a1      	cmp	r1, r4
 800ec48:	d00c      	beq.n	800ec64 <audioRecordingUpdateSoundBuffer+0x3e>
		soundBuffer->iterator++;
 800ec4a:	681a      	ldr	r2, [r3, #0]
		if (soundBuffer->iterator >= soundBuffer->size)
 800ec4c:	682f      	ldr	r7, [r5, #0]
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
 800ec4e:	3201      	adds	r2, #1
		if (soundBuffer->iterator >= soundBuffer->size)
 800ec50:	42ba      	cmp	r2, r7
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
 800ec52:	601a      	str	r2, [r3, #0]
		if (soundBuffer->iterator >= soundBuffer->size)
			soundBuffer->iterator = 0;
		soundBuffer->soundBuffer[soundBuffer->iterator] =
				soundMail->soundBuffer[i];
 800ec54:	f831 7b02 	ldrh.w	r7, [r1], #2
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
		if (soundBuffer->iterator >= soundBuffer->size)
			soundBuffer->iterator = 0;
 800ec58:	bf28      	it	cs
 800ec5a:	601e      	strcs	r6, [r3, #0]
		soundBuffer->soundBuffer[soundBuffer->iterator] =
 800ec5c:	681a      	ldr	r2, [r3, #0]
 800ec5e:	f820 7012 	strh.w	r7, [r0, r2, lsl #1]
 800ec62:	e7f0      	b.n	800ec46 <audioRecordingUpdateSoundBuffer+0x20>
				soundMail->soundBuffer[i];
	}
}
 800ec64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ec68 <printAddress>:
 */
void printAddress(const struct netif* gnetif, uint8_t addressType) {
	char addrType[8];
	char msg[40];
	uint32_t address = 0;
	switch (addressType) {
 800ec68:	2901      	cmp	r1, #1
/**
 * @brief Used for printing the IP, netmask or gateway address
 * @param gnetif: pointer to \ref netif structure
 * @param addressType: type of address (IP_ADDRESS etc.)
 */
void printAddress(const struct netif* gnetif, uint8_t addressType) {
 800ec6a:	b510      	push	{r4, lr}
 800ec6c:	4604      	mov	r4, r0
 800ec6e:	b090      	sub	sp, #64	; 0x40
	char addrType[8];
	char msg[40];
	uint32_t address = 0;
	switch (addressType) {
 800ec70:	d00e      	beq.n	800ec90 <printAddress+0x28>
 800ec72:	d307      	bcc.n	800ec84 <printAddress+0x1c>
 800ec74:	2902      	cmp	r1, #2
 800ec76:	d111      	bne.n	800ec9c <printAddress+0x34>
		strcpy(addrType, "Netmask");
		address = gnetif->netmask.addr;
		break;
	}
	case GATEWAY_ADDRESS: {
		strcpy(addrType, "Gateway");
 800ec78:	4912      	ldr	r1, [pc, #72]	; (800ecc4 <printAddress+0x5c>)
 800ec7a:	a804      	add	r0, sp, #16
 800ec7c:	f002 ff9e 	bl	8011bbc <strcpy>
		address = gnetif->gw.addr;
 800ec80:	68e3      	ldr	r3, [r4, #12]
		break;
 800ec82:	e00c      	b.n	800ec9e <printAddress+0x36>
	char addrType[8];
	char msg[40];
	uint32_t address = 0;
	switch (addressType) {
	case IP_ADDRESS: {
		strcpy(addrType, "IP");
 800ec84:	4910      	ldr	r1, [pc, #64]	; (800ecc8 <printAddress+0x60>)
 800ec86:	a804      	add	r0, sp, #16
 800ec88:	f002 ff98 	bl	8011bbc <strcpy>
		address = gnetif->ip_addr.addr;
 800ec8c:	6863      	ldr	r3, [r4, #4]
		break;
 800ec8e:	e006      	b.n	800ec9e <printAddress+0x36>
	}
	case NETMASK_ADDRESS: {
		strcpy(addrType, "Netmask");
 800ec90:	490e      	ldr	r1, [pc, #56]	; (800eccc <printAddress+0x64>)
 800ec92:	a804      	add	r0, sp, #16
 800ec94:	f002 ff92 	bl	8011bbc <strcpy>
		address = gnetif->netmask.addr;
 800ec98:	68a3      	ldr	r3, [r4, #8]
		break;
 800ec9a:	e000      	b.n	800ec9e <printAddress+0x36>
 * @param addressType: type of address (IP_ADDRESS etc.)
 */
void printAddress(const struct netif* gnetif, uint8_t addressType) {
	char addrType[8];
	char msg[40];
	uint32_t address = 0;
 800ec9c:	2300      	movs	r3, #0
		break;
	}
	default:
		break;
	}
	sprintf(msg, "%s address: %d.%d.%d.%d", addrType, (uint8_t) (address),
 800ec9e:	0e1a      	lsrs	r2, r3, #24
 800eca0:	490b      	ldr	r1, [pc, #44]	; (800ecd0 <printAddress+0x68>)
 800eca2:	a806      	add	r0, sp, #24
 800eca4:	9202      	str	r2, [sp, #8]
 800eca6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ecaa:	9201      	str	r2, [sp, #4]
 800ecac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	9200      	str	r2, [sp, #0]
 800ecb4:	aa04      	add	r2, sp, #16
 800ecb6:	f002 ff23 	bl	8011b00 <sprintf>
			(uint8_t) (address >> 8), (uint8_t) (address >> 16),
			(uint8_t) (address >> 24));
	logMsg(msg);
 800ecba:	a806      	add	r0, sp, #24
 800ecbc:	f000 f9ba 	bl	800f034 <logMsg>
}
 800ecc0:	b010      	add	sp, #64	; 0x40
 800ecc2:	bd10      	pop	{r4, pc}
 800ecc4:	0802f4e6 	.word	0x0802f4e6
 800ecc8:	0802f7b1 	.word	0x0802f7b1
 800eccc:	0802f4de 	.word	0x0802f4de
 800ecd0:	0802f4ee 	.word	0x0802f4ee

0800ecd4 <isEthernetCableConnected>:

/**
 * @brief The function checks state of ethernet cable (is it connected or not).
 * @retval \ref ETHERNET_CABLE_NOT_CONNECTED or \ref ETHERNET_CABLE_CONNECTED
 */
uint32_t isEthernetCableConnected() {
 800ecd4:	b507      	push	{r0, r1, r2, lr}
	uint32_t val;

	// reads from PHY register
	HAL_ETH_ReadPHYRegister(&EthHandle, 1, &val);
 800ecd6:	2101      	movs	r1, #1
 800ecd8:	aa01      	add	r2, sp, #4
 800ecda:	4804      	ldr	r0, [pc, #16]	; (800ecec <isEthernetCableConnected+0x18>)
 800ecdc:	f7f5 fa65 	bl	80041aa <HAL_ETH_ReadPHYRegister>
	val = val & (1 << 2);
	return val;
}
 800ece0:	9801      	ldr	r0, [sp, #4]
 800ece2:	f000 0004 	and.w	r0, r0, #4
 800ece6:	b003      	add	sp, #12
 800ece8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecec:	20049290 	.word	0x20049290

0800ecf0 <isNetconnStatusOk>:
 * @brief The functions checks the returned \ref err_t because sometimes LWIP functions returns \ref ERR_RST if the ethernet cable is disconnected.
 * @param status: error code
 * @retval returns 0 if there are no errors
 */
uint8_t isNetconnStatusOk(err_t status) {
	if (status != ERR_OK && status != ERR_RST)
 800ecf0:	b128      	cbz	r0, 800ecfe <isNetconnStatusOk+0xe>
		return 0;
 800ecf2:	f110 0f0d 	cmn.w	r0, #13
 800ecf6:	bf14      	ite	ne
 800ecf8:	2000      	movne	r0, #0
 800ecfa:	2001      	moveq	r0, #1
 800ecfc:	4770      	bx	lr
	return 1;
 800ecfe:	2001      	movs	r0, #1
}
 800ed00:	4770      	bx	lr

0800ed02 <udpSend>:
 * @param client: pointer to \ref netconn
 * @param buf: pointer to the beginning of data
 * @param buffSize: data length
 * @retval returns \ref ERR_OK if there are no errors
 */
err_t udpSend(struct netconn *client, void* buf, uint32_t buffSize) {
 800ed02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed04:	460c      	mov	r4, r1
 800ed06:	4617      	mov	r7, r2
 800ed08:	4606      	mov	r6, r0
	err_t err;
	struct netbuf* netBuf = netbuf_new();
 800ed0a:	f7fa fca2 	bl	8009652 <netbuf_new>
	err = netbuf_ref(netBuf, buf, buffSize);
 800ed0e:	4621      	mov	r1, r4
 800ed10:	b2ba      	uxth	r2, r7
 * @param buffSize: data length
 * @retval returns \ref ERR_OK if there are no errors
 */
err_t udpSend(struct netconn *client, void* buf, uint32_t buffSize) {
	err_t err;
	struct netbuf* netBuf = netbuf_new();
 800ed12:	4605      	mov	r5, r0
	err = netbuf_ref(netBuf, buf, buffSize);
 800ed14:	f7fa fcb9 	bl	800968a <netbuf_ref>
	if (err != ERR_OK) {
 800ed18:	4604      	mov	r4, r0
 800ed1a:	b920      	cbnz	r0, 800ed26 <udpSend+0x24>
		netbuf_delete(netBuf);
		return err;
	}
	err = netconn_send(client, netBuf);
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7f9 fe84 	bl	8008a2c <netconn_send>
 800ed24:	4604      	mov	r4, r0
	netbuf_delete(netBuf);
 800ed26:	4628      	mov	r0, r5
 800ed28:	f7fa fc9e 	bl	8009668 <netbuf_delete>
	return err;
 800ed2c:	4620      	mov	r0, r4
}
 800ed2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ed30 <sendSpectrum>:
 * @brief The function sends the \p ampStr by UDP to \p client.
 * @param ampStr: pointer to \ref AmplitudeStr
 * @param client: pointer to \ref netconn
 * @retval returns \ref ERR_OK if there are no errors
 */
err_t sendSpectrum(SpectrumStr* ampStr, struct netconn *client) {
 800ed30:	b508      	push	{r3, lr}
	err_t status;

	if (client != NULL)
 800ed32:	460b      	mov	r3, r1
 800ed34:	b161      	cbz	r1, 800ed50 <sendSpectrum+0x20>
		if (client->state != NETCONN_CLOSE) {
 800ed36:	784a      	ldrb	r2, [r1, #1]
 800ed38:	2a04      	cmp	r2, #4
 800ed3a:	d009      	beq.n	800ed50 <sendSpectrum+0x20>
			status = udpSend(client, ampStr->amplitudeVector,
 800ed3c:	4601      	mov	r1, r0
 800ed3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7ff ffdd 	bl	800ed02 <udpSend>
 800ed48:	4603      	mov	r3, r0
			ETHERNET_AMP_BUFFER_SIZE * sizeof(float32_t));
			if (!isNetconnStatusOk(status))
 800ed4a:	f7ff ffd1 	bl	800ecf0 <isNetconnStatusOk>
 800ed4e:	b108      	cbz	r0, 800ed54 <sendSpectrum+0x24>
				return status;
		}
	return ERR_OK;
 800ed50:	2000      	movs	r0, #0
 800ed52:	bd08      	pop	{r3, pc}
	if (client != NULL)
		if (client->state != NETCONN_CLOSE) {
			status = udpSend(client, ampStr->amplitudeVector,
			ETHERNET_AMP_BUFFER_SIZE * sizeof(float32_t));
			if (!isNetconnStatusOk(status))
				return status;
 800ed54:	4618      	mov	r0, r3
		}
	return ERR_OK;
}
 800ed56:	bd08      	pop	{r3, pc}

0800ed58 <getRequestType>:
/**
 * @brief Returns the request type
 * @param buf: pointer to \ref netbuf structure
 * @retval GET_REQUEST, PUT_REQUEST or NOT_SUPPORTED_REQUEST
 */
uint16_t getRequestType(struct netbuf* buf) {
 800ed58:	b513      	push	{r0, r1, r4, lr}
	void* data;
	uint16_t length;
	netbuf_data(buf, &data, &length);
 800ed5a:	a901      	add	r1, sp, #4
 800ed5c:	f10d 0202 	add.w	r2, sp, #2
 800ed60:	f7fa fcb0 	bl	80096c4 <netbuf_data>
	char* fullMsg = (char*) data;
 800ed64:	9c01      	ldr	r4, [sp, #4]

	if (strstr(fullMsg, "GET") != NULL)
 800ed66:	4908      	ldr	r1, [pc, #32]	; (800ed88 <getRequestType+0x30>)
 800ed68:	4620      	mov	r0, r4
 800ed6a:	f002 ff44 	bl	8011bf6 <strstr>
 800ed6e:	b940      	cbnz	r0, 800ed82 <getRequestType+0x2a>
		return GET_REQUEST;
	else if (strstr(fullMsg, "PUT") != NULL)
 800ed70:	4906      	ldr	r1, [pc, #24]	; (800ed8c <getRequestType+0x34>)
 800ed72:	4620      	mov	r0, r4
 800ed74:	f002 ff3f 	bl	8011bf6 <strstr>
 800ed78:	2800      	cmp	r0, #0
		return PUT_REQUEST;
	else
		return NOT_SUPPORTED_REQUEST;
 800ed7a:	bf14      	ite	ne
 800ed7c:	2002      	movne	r0, #2
 800ed7e:	2000      	moveq	r0, #0
 800ed80:	e000      	b.n	800ed84 <getRequestType+0x2c>
	uint16_t length;
	netbuf_data(buf, &data, &length);
	char* fullMsg = (char*) data;

	if (strstr(fullMsg, "GET") != NULL)
		return GET_REQUEST;
 800ed82:	2001      	movs	r0, #1
	else if (strstr(fullMsg, "PUT") != NULL)
		return PUT_REQUEST;
	else
		return NOT_SUPPORTED_REQUEST;
}
 800ed84:	b002      	add	sp, #8
 800ed86:	bd10      	pop	{r4, pc}
 800ed88:	0802f508 	.word	0x0802f508
 800ed8c:	0802f50c 	.word	0x0802f50c

0800ed90 <sendString>:
	sprintf(response, httpHeaderPattern, httpStatus, strlen(content),
			requestParameters, content);
	return sendString(client, response);
}

err_t sendString(struct netconn* client, const char* array) {
 800ed90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed92:	4605      	mov	r5, r0
 800ed94:	460c      	mov	r4, r1
	return netconn_write(client, array, strlen(array), NETCONN_NOCOPY);
 800ed96:	4608      	mov	r0, r1
 800ed98:	f7f1 fa9a 	bl	80002d0 <strlen>
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4602      	mov	r2, r0
 800eda0:	4621      	mov	r1, r4
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	4628      	mov	r0, r5
 800eda6:	f7f9 fe53 	bl	8008a50 <netconn_write_partly>
}
 800edaa:	b003      	add	sp, #12
 800edac:	bd30      	pop	{r4, r5, pc}
	...

0800edb0 <sendHttpResponse>:
	stmConfigToString(config, configContent);
	return sendHttpResponse(client, "200 OK",requestParameters, configContent);
}

err_t sendHttpResponse(struct netconn* client, char* httpStatus,
		char* requestParameters, char* content) {
 800edb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edb2:	460e      	mov	r6, r1
 800edb4:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 800edb8:	4617      	mov	r7, r2
 800edba:	461c      	mov	r4, r3
 800edbc:	4605      	mov	r5, r0
	char response[512];
	sprintf(response, httpHeaderPattern, httpStatus, strlen(content),
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7f1 fa86 	bl	80002d0 <strlen>
 800edc4:	4632      	mov	r2, r6
 800edc6:	4603      	mov	r3, r0
 800edc8:	9401      	str	r4, [sp, #4]
 800edca:	9700      	str	r7, [sp, #0]
 800edcc:	a802      	add	r0, sp, #8
 800edce:	4905      	ldr	r1, [pc, #20]	; (800ede4 <sendHttpResponse+0x34>)
 800edd0:	f002 fe96 	bl	8011b00 <sprintf>
			requestParameters, content);
	return sendString(client, response);
 800edd4:	a902      	add	r1, sp, #8
 800edd6:	4628      	mov	r0, r5
 800edd8:	f7ff ffda 	bl	800ed90 <sendString>
}
 800eddc:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 800ede0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ede2:	bf00      	nop
 800ede4:	0802f4b6 	.word	0x0802f4b6

0800ede8 <sendConfiguration>:
 * @param config: pointer to \ref StmConfig structure
 * @param client: pointer to \ref netconn structure (represents endpoint client)
 * @retval ERR_OK if there are no errors
 */
err_t sendConfiguration(StmConfig* config, struct netconn* client,
		char* requestParameters) {
 800ede8:	b530      	push	{r4, r5, lr}
 800edea:	b0c1      	sub	sp, #260	; 0x104
 800edec:	4615      	mov	r5, r2
 800edee:	460c      	mov	r4, r1
	char configContent[256];
	stmConfigToString(config, configContent);
 800edf0:	4669      	mov	r1, sp
 800edf2:	f000 f867 	bl	800eec4 <stmConfigToString>
	return sendHttpResponse(client, "200 OK",requestParameters, configContent);
 800edf6:	466b      	mov	r3, sp
 800edf8:	462a      	mov	r2, r5
 800edfa:	4903      	ldr	r1, [pc, #12]	; (800ee08 <sendConfiguration+0x20>)
 800edfc:	4620      	mov	r0, r4
 800edfe:	f7ff ffd7 	bl	800edb0 <sendHttpResponse>
}
 800ee02:	b041      	add	sp, #260	; 0x104
 800ee04:	bd30      	pop	{r4, r5, pc}
 800ee06:	bf00      	nop
 800ee08:	0802f510 	.word	0x0802f510

0800ee0c <isConfigRequest>:
/**
 * @brief Check if the request includes '/config' text
 * @param buf: pointer to \ref netbuf structure
 * @retval 1 if request includes '/config'
 */
uint8_t isConfigRequest(struct netbuf* buf) {
 800ee0c:	b507      	push	{r0, r1, r2, lr}
	void* data;
	uint16_t length;
	netbuf_data(buf, &data, &length);
 800ee0e:	f10d 0202 	add.w	r2, sp, #2
 800ee12:	a901      	add	r1, sp, #4
 800ee14:	f7fa fc56 	bl	80096c4 <netbuf_data>
	char* fullMsg = (char*) data;

	if (strstr(fullMsg, " /config ") != NULL)
 800ee18:	4904      	ldr	r1, [pc, #16]	; (800ee2c <isConfigRequest+0x20>)
 800ee1a:	9801      	ldr	r0, [sp, #4]
 800ee1c:	f002 feeb 	bl	8011bf6 <strstr>
		return 1;
	return 0;
}
 800ee20:	3000      	adds	r0, #0
 800ee22:	bf18      	it	ne
 800ee24:	2001      	movne	r0, #1
 800ee26:	b003      	add	sp, #12
 800ee28:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee2c:	0802f517 	.word	0x0802f517

0800ee30 <parseJSON>:
#include "jsonConfiguration.h"

/**
 * @brief Parses \netbuf (JSON data) to \StmConfig structure
 */
void parseJSON(struct netbuf* buf, StmConfig* config) {
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	b088      	sub	sp, #32
 800ee34:	460d      	mov	r5, r1
	void* data;
	uint16_t length;
	netbuf_data(buf, &data, &length);
 800ee36:	f10d 020a 	add.w	r2, sp, #10
 800ee3a:	a903      	add	r1, sp, #12
 800ee3c:	f7fa fc42 	bl	80096c4 <netbuf_data>
	char* jsonData = (char*) data;

	cJSON* parser = cJSON_Parse(jsonData);
 800ee40:	9803      	ldr	r0, [sp, #12]
 800ee42:	f002 fb2b 	bl	801149c <cJSON_Parse>
 800ee46:	4604      	mov	r4, r0
	/*config->started = cJSON_GetObjectItem(parser, "Started")->valueint;*/
	char* udpEndpoint =
			cJSON_GetObjectItem(parser, "UdpEndpointIP")->valuestring;
 800ee48:	4919      	ldr	r1, [pc, #100]	; (800eeb0 <parseJSON+0x80>)
 800ee4a:	f002 fb30 	bl	80114ae <cJSON_GetObjectItem>
	/*config->udpEndpointPort =
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
 800ee4e:	4919      	ldr	r1, [pc, #100]	; (800eeb4 <parseJSON+0x84>)
	netbuf_data(buf, &data, &length);
	char* jsonData = (char*) data;

	cJSON* parser = cJSON_Parse(jsonData);
	/*config->started = cJSON_GetObjectItem(parser, "Started")->valueint;*/
	char* udpEndpoint =
 800ee50:	6906      	ldr	r6, [r0, #16]
			cJSON_GetObjectItem(parser, "UdpEndpointIP")->valuestring;
	/*config->udpEndpointPort =
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
 800ee52:	4620      	mov	r0, r4
 800ee54:	f002 fb2b 	bl	80114ae <cJSON_GetObjectItem>
 800ee58:	6943      	ldr	r3, [r0, #20]
			"AmplitudeSamplingDelay")->valueint;
	config->audioSamplingFrequency = cJSON_GetObjectItem(parser,
 800ee5a:	4917      	ldr	r1, [pc, #92]	; (800eeb8 <parseJSON+0x88>)
 800ee5c:	4620      	mov	r0, r4
	/*config->started = cJSON_GetObjectItem(parser, "Started")->valueint;*/
	char* udpEndpoint =
			cJSON_GetObjectItem(parser, "UdpEndpointIP")->valuestring;
	/*config->udpEndpointPort =
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
 800ee5e:	702b      	strb	r3, [r5, #0]
			"AmplitudeSamplingDelay")->valueint;
	config->audioSamplingFrequency = cJSON_GetObjectItem(parser,
 800ee60:	f002 fb25 	bl	80114ae <cJSON_GetObjectItem>
 800ee64:	6943      	ldr	r3, [r0, #20]
			"SamplingFrequency")->valueint;
	config->clientPort =
			cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;
 800ee66:	4915      	ldr	r1, [pc, #84]	; (800eebc <parseJSON+0x8c>)
 800ee68:	4620      	mov	r0, r4
			cJSON_GetObjectItem(parser, "UdpEndpointIP")->valuestring;
	/*config->udpEndpointPort =
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
			"AmplitudeSamplingDelay")->valueint;
	config->audioSamplingFrequency = cJSON_GetObjectItem(parser,
 800ee6a:	606b      	str	r3, [r5, #4]
			"SamplingFrequency")->valueint;
	config->clientPort =
			cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;
 800ee6c:	f002 fb1f 	bl	80114ae <cJSON_GetObjectItem>
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
			"AmplitudeSamplingDelay")->valueint;
	config->audioSamplingFrequency = cJSON_GetObjectItem(parser,
			"SamplingFrequency")->valueint;
	config->clientPort =
 800ee70:	6943      	ldr	r3, [r0, #20]
			cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;

	int ipTab[4];
	sscanf(udpEndpoint, "%d.%d.%d.%d", &ipTab[0], &ipTab[1], &ipTab[2],
 800ee72:	aa04      	add	r2, sp, #16
 800ee74:	4912      	ldr	r1, [pc, #72]	; (800eec0 <parseJSON+0x90>)
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
			"AmplitudeSamplingDelay")->valueint;
	config->audioSamplingFrequency = cJSON_GetObjectItem(parser,
			"SamplingFrequency")->valueint;
	config->clientPort =
 800ee76:	60eb      	str	r3, [r5, #12]
			cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;

	int ipTab[4];
	sscanf(udpEndpoint, "%d.%d.%d.%d", &ipTab[0], &ipTab[1], &ipTab[2],
 800ee78:	ab07      	add	r3, sp, #28
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	9301      	str	r3, [sp, #4]
 800ee7e:	ab06      	add	r3, sp, #24
 800ee80:	9300      	str	r3, [sp, #0]
 800ee82:	ab05      	add	r3, sp, #20
 800ee84:	f002 fe60 	bl	8011b48 <sscanf>
			&ipTab[3]);
	IP4_ADDR(&config->clientIp, ipTab[0], ipTab[1], ipTab[2], ipTab[3]);
 800ee88:	9a07      	ldr	r2, [sp, #28]
 800ee8a:	f89d 3010 	ldrb.w	r3, [sp, #16]

	cJSON_Delete(parser);
 800ee8e:	4620      	mov	r0, r4
			cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;

	int ipTab[4];
	sscanf(udpEndpoint, "%d.%d.%d.%d", &ipTab[0], &ipTab[1], &ipTab[2],
			&ipTab[3]);
	IP4_ADDR(&config->clientIp, ipTab[0], ipTab[1], ipTab[2], ipTab[3]);
 800ee90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ee94:	9a06      	ldr	r2, [sp, #24]
 800ee96:	0412      	lsls	r2, r2, #16
 800ee98:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800ee9c:	431a      	orrs	r2, r3
 800ee9e:	9b05      	ldr	r3, [sp, #20]
 800eea0:	021b      	lsls	r3, r3, #8
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	4313      	orrs	r3, r2
 800eea6:	60ab      	str	r3, [r5, #8]

	cJSON_Delete(parser);
 800eea8:	f002 fa9e 	bl	80113e8 <cJSON_Delete>
}
 800eeac:	b008      	add	sp, #32
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	0802f521 	.word	0x0802f521
 800eeb4:	0802f52f 	.word	0x0802f52f
 800eeb8:	0802f546 	.word	0x0802f546
 800eebc:	0802f558 	.word	0x0802f558
 800eec0:	0802f4fa 	.word	0x0802f4fa

0800eec4 <stmConfigToString>:
/**
 * @brief Converts \ref StmConfig structure to JSON string
 * @param config: pointer to \ref StmConfig structure
 * @param str: pointer to output of the JSON string (must have allocated memory)
 */
void stmConfigToString(StmConfig* config, char* str) {
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	4605      	mov	r5, r0
 800eec8:	b08a      	sub	sp, #40	; 0x28
 800eeca:	460e      	mov	r6, r1
	cJSON *jsonCreator;
	jsonCreator = cJSON_CreateObject();
 800eecc:	f002 fb4c 	bl	8011568 <cJSON_CreateObject>
 800eed0:	4604      	mov	r4, r0
	/*cJSON_AddBoolToObject(jsonCreator, "Started", config->started);*/
	cJSON_AddNumberToObject(jsonCreator, "UdpEndpointPort", config->clientPort);
 800eed2:	68e8      	ldr	r0, [r5, #12]
 800eed4:	f7f1 fb96 	bl	8000604 <__aeabi_ui2d>
 800eed8:	ec41 0b10 	vmov	d0, r0, r1
 800eedc:	f002 fb1a 	bl	8011514 <cJSON_CreateNumber>
 800eee0:	4923      	ldr	r1, [pc, #140]	; (800ef70 <stmConfigToString+0xac>)
 800eee2:	4602      	mov	r2, r0
 800eee4:	4620      	mov	r0, r4
 800eee6:	f002 fafd 	bl	80114e4 <cJSON_AddItemToObject>
	cJSON_AddNumberToObject(jsonCreator, "AmplitudeSamplingDelay",
 800eeea:	7828      	ldrb	r0, [r5, #0]
 800eeec:	f7f1 fb8a 	bl	8000604 <__aeabi_ui2d>
 800eef0:	ec41 0b10 	vmov	d0, r0, r1
 800eef4:	f002 fb0e 	bl	8011514 <cJSON_CreateNumber>
 800eef8:	491e      	ldr	r1, [pc, #120]	; (800ef74 <stmConfigToString+0xb0>)
 800eefa:	4602      	mov	r2, r0
 800eefc:	4620      	mov	r0, r4
 800eefe:	f002 faf1 	bl	80114e4 <cJSON_AddItemToObject>
			config->amplitudeSamplingDelay);
	cJSON_AddNumberToObject(jsonCreator, "SamplingFrequency",
 800ef02:	6868      	ldr	r0, [r5, #4]
 800ef04:	f7f1 fb7e 	bl	8000604 <__aeabi_ui2d>
 800ef08:	ec41 0b10 	vmov	d0, r0, r1
 800ef0c:	f002 fb02 	bl	8011514 <cJSON_CreateNumber>
 800ef10:	4919      	ldr	r1, [pc, #100]	; (800ef78 <stmConfigToString+0xb4>)
 800ef12:	4602      	mov	r2, r0
 800ef14:	4620      	mov	r0, r4
 800ef16:	f002 fae5 	bl	80114e4 <cJSON_AddItemToObject>
			config->audioSamplingFrequency);

	char ip[15];
	int ipTab[4];
	for (uint8_t i = 0; i < 4; i++) {
		ipTab[i] = IP_ADDR_GET(config->clientIp, i);
 800ef1a:	68a8      	ldr	r0, [r5, #8]
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	00da      	lsls	r2, r3, #3
 800ef20:	a906      	add	r1, sp, #24
 800ef22:	fa20 f202 	lsr.w	r2, r0, r2
 800ef26:	b2d2      	uxtb	r2, r2
 800ef28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ef2c:	3301      	adds	r3, #1
	cJSON_AddNumberToObject(jsonCreator, "SamplingFrequency",
			config->audioSamplingFrequency);

	char ip[15];
	int ipTab[4];
	for (uint8_t i = 0; i < 4; i++) {
 800ef2e:	2b04      	cmp	r3, #4
 800ef30:	d1f5      	bne.n	800ef1e <stmConfigToString+0x5a>
		ipTab[i] = IP_ADDR_GET(config->clientIp, i);
	}
	sprintf(ip, "%d.%d.%d.%d", ipTab[0], ipTab[1], ipTab[2], ipTab[3]);
 800ef32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef34:	a802      	add	r0, sp, #8
 800ef36:	9a06      	ldr	r2, [sp, #24]
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	9b08      	ldr	r3, [sp, #32]
 800ef3c:	490f      	ldr	r1, [pc, #60]	; (800ef7c <stmConfigToString+0xb8>)
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	9b07      	ldr	r3, [sp, #28]
 800ef42:	f002 fddd 	bl	8011b00 <sprintf>
	cJSON_AddStringToObject(jsonCreator, "UdpEndpointIP", ip);
 800ef46:	a802      	add	r0, sp, #8
 800ef48:	f002 faf9 	bl	801153e <cJSON_CreateString>
 800ef4c:	490c      	ldr	r1, [pc, #48]	; (800ef80 <stmConfigToString+0xbc>)
 800ef4e:	4602      	mov	r2, r0
 800ef50:	4620      	mov	r0, r4
 800ef52:	f002 fac7 	bl	80114e4 <cJSON_AddItemToObject>

	strcpy(str, cJSON_Print(jsonCreator));
 800ef56:	4620      	mov	r0, r4
 800ef58:	f002 faa4 	bl	80114a4 <cJSON_Print>
 800ef5c:	4601      	mov	r1, r0
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f002 fe2c 	bl	8011bbc <strcpy>
	cJSON_Delete(jsonCreator);
 800ef64:	4620      	mov	r0, r4
 800ef66:	f002 fa3f 	bl	80113e8 <cJSON_Delete>
}
 800ef6a:	b00a      	add	sp, #40	; 0x28
 800ef6c:	bd70      	pop	{r4, r5, r6, pc}
 800ef6e:	bf00      	nop
 800ef70:	0802f558 	.word	0x0802f558
 800ef74:	0802f52f 	.word	0x0802f52f
 800ef78:	0802f546 	.word	0x0802f546
 800ef7c:	0802f4fa 	.word	0x0802f4fa
 800ef80:	0802f521 	.word	0x0802f521

0800ef84 <copyConfig>:
 * @brief Copies \ref StmConfig structure to another \ref StmConfig structure
 * @param destination: pointer (output) to \ref StmConfig structure
 * @param source: pointer to \ref StmConfig structure
 */
void copyConfig(StmConfig* destination, StmConfig* source) {
	destination->amplitudeSamplingDelay = source->amplitudeSamplingDelay;
 800ef84:	780b      	ldrb	r3, [r1, #0]
 800ef86:	7003      	strb	r3, [r0, #0]
	destination->audioSamplingFrequency = source->audioSamplingFrequency;
 800ef88:	684b      	ldr	r3, [r1, #4]
 800ef8a:	6043      	str	r3, [r0, #4]
	destination->clientIp.addr = source->clientIp.addr;
 800ef8c:	688b      	ldr	r3, [r1, #8]
 800ef8e:	6083      	str	r3, [r0, #8]
	destination->clientPort = source->clientPort;
 800ef90:	68cb      	ldr	r3, [r1, #12]
 800ef92:	60c3      	str	r3, [r0, #12]
 800ef94:	4770      	bx	lr
	...

0800ef98 <disp>:
/**
 * @brief Displays the \p msg
 * @param msg: text message
 * @param col: font color
 */
static void disp(char* msg, uint32_t col) {
 800ef98:	b510      	push	{r4, lr}
 800ef9a:	4604      	mov	r4, r0
	BSP_LCD_SetTextColor(col);
 800ef9c:	4608      	mov	r0, r1
 800ef9e:	f7f3 f88b 	bl	80020b8 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(row++, (uint8_t*) msg);
 800efa2:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <disp+0x20>)
 800efa4:	4621      	mov	r1, r4
 800efa6:	6818      	ldr	r0, [r3, #0]
 800efa8:	1c42      	adds	r2, r0, #1
 800efaa:	b280      	uxth	r0, r0
}
 800efac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @param msg: text message
 * @param col: font color
 */
static void disp(char* msg, uint32_t col) {
	BSP_LCD_SetTextColor(col);
	BSP_LCD_DisplayStringAtLine(row++, (uint8_t*) msg);
 800efb0:	601a      	str	r2, [r3, #0]
 800efb2:	f7f3 b98b 	b.w	80022cc <BSP_LCD_DisplayStringAtLine>
 800efb6:	bf00      	nop
 800efb8:	20042f84 	.word	0x20042f84

0800efbc <updateRow>:

/**
 * @brief Checks if the row is too large
 */
static void updateRow() {
	if (row > LOG_MAX_ROWS) {
 800efbc:	4b05      	ldr	r3, [pc, #20]	; (800efd4 <updateRow+0x18>)
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	2a16      	cmp	r2, #22
 800efc2:	dd05      	ble.n	800efd0 <updateRow+0x14>
		row = 0;
 800efc4:	2200      	movs	r2, #0
		BSP_LCD_Clear(LOG_BACKGROUND_COLOR);
 800efc6:	f04f 30ff 	mov.w	r0, #4294967295
/**
 * @brief Checks if the row is too large
 */
static void updateRow() {
	if (row > LOG_MAX_ROWS) {
		row = 0;
 800efca:	601a      	str	r2, [r3, #0]
		BSP_LCD_Clear(LOG_BACKGROUND_COLOR);
 800efcc:	f7f3 b88c 	b.w	80020e8 <BSP_LCD_Clear>
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	20042f84 	.word	0x20042f84

0800efd8 <lcdInit>:
}

/**
 * @brief Initializes LCD logging feature. At first initializes and clears the LCD. Then allocates memory for \ref fullMsg.
 */
void lcdInit() {
 800efd8:	b510      	push	{r4, lr}
	BSP_LCD_Init();
 800efda:	f7f3 fa5b 	bl	8002494 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800efde:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800efe2:	2000      	movs	r0, #0
	BSP_LCD_Clear(LOG_BACKGROUND_COLOR);
	BSP_LCD_SetTextColor(LOG_FONT_COLOR);
	BSP_LCD_SetFont(LOG_FONT);

	row = 0;
	if (flag == 0) {
 800efe4:	4c0f      	ldr	r4, [pc, #60]	; (800f024 <lcdInit+0x4c>)
/**
 * @brief Initializes LCD logging feature. At first initializes and clears the LCD. Then allocates memory for \ref fullMsg.
 */
void lcdInit() {
	BSP_LCD_Init();
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800efe6:	f7f3 f825 	bl	8002034 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 800efea:	2000      	movs	r0, #0
 800efec:	f7f3 f85e 	bl	80020ac <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800eff0:	f7f3 f984 	bl	80022fc <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LOG_BACKGROUND_COLOR);
 800eff4:	f04f 30ff 	mov.w	r0, #4294967295
 800eff8:	f7f3 f876 	bl	80020e8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LOG_FONT_COLOR);
 800effc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800f000:	f7f3 f85a 	bl	80020b8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(LOG_FONT);
 800f004:	4808      	ldr	r0, [pc, #32]	; (800f028 <lcdInit+0x50>)
 800f006:	f7f3 f863 	bl	80020d0 <BSP_LCD_SetFont>

	row = 0;
 800f00a:	4b08      	ldr	r3, [pc, #32]	; (800f02c <lcdInit+0x54>)
 800f00c:	2200      	movs	r2, #0
 800f00e:	601a      	str	r2, [r3, #0]
	if (flag == 0) {
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	b933      	cbnz	r3, 800f022 <lcdInit+0x4a>
		fullMsg = malloc(LOG_MAX_MESSAGE_LENGTH);
 800f014:	2032      	movs	r0, #50	; 0x32
 800f016:	f002 fad5 	bl	80115c4 <malloc>
 800f01a:	4b05      	ldr	r3, [pc, #20]	; (800f030 <lcdInit+0x58>)
 800f01c:	6018      	str	r0, [r3, #0]
		flag = 1;
 800f01e:	2301      	movs	r3, #1
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	bd10      	pop	{r4, pc}
 800f024:	20042f8c 	.word	0x20042f8c
 800f028:	20010030 	.word	0x20010030
 800f02c:	20042f84 	.word	0x20042f84
 800f030:	20042f88 	.word	0x20042f88

0800f034 <logMsg>:

/**
 * @brief The function displays info \p msg on the LCD in the next row.
 * @param msg: log message
 */
void logMsg(char* msg) {
 800f034:	b510      	push	{r4, lr}
 800f036:	4604      	mov	r4, r0
	updateRow();
 800f038:	f7ff ffc0 	bl	800efbc <updateRow>
	disp(msg, LOG_FONT_COLOR);
 800f03c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 800f040:	4620      	mov	r0, r4
}
 800f042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @brief The function displays info \p msg on the LCD in the next row.
 * @param msg: log message
 */
void logMsg(char* msg) {
	updateRow();
	disp(msg, LOG_FONT_COLOR);
 800f046:	f7ff bfa7 	b.w	800ef98 <disp>
	...

0800f04c <logErr>:

/**
 * @brief The function displays error \p msg on the LCD in the next row.
 * @param msg: log message
 */
void logErr(char* msg) {
 800f04c:	b510      	push	{r4, lr}
 800f04e:	4604      	mov	r4, r0
	updateRow();
 800f050:	f7ff ffb4 	bl	800efbc <updateRow>
	disp(msg, LCD_COLOR_RED);
 800f054:	4902      	ldr	r1, [pc, #8]	; (800f060 <logErr+0x14>)
 800f056:	4620      	mov	r0, r4
}
 800f058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @brief The function displays error \p msg on the LCD in the next row.
 * @param msg: log message
 */
void logErr(char* msg) {
	updateRow();
	disp(msg, LCD_COLOR_RED);
 800f05c:	f7ff bf9c 	b.w	800ef98 <disp>
 800f060:	ffff0000 	.word	0xffff0000

0800f064 <logMsgVal>:
/**
 * @brief The function displays info \p msg concatenated with \val number on the LCD in the next row .
 * @param msg: log message
 * @param val: value to concatenate
 */
void logMsgVal(char* msg, int val) {
 800f064:	b570      	push	{r4, r5, r6, lr}
 800f066:	4605      	mov	r5, r0
 800f068:	460e      	mov	r6, r1
	updateRow();
	sprintf(fullMsg, "%s%d", msg, val);
 800f06a:	4c08      	ldr	r4, [pc, #32]	; (800f08c <logMsgVal+0x28>)
 * @brief The function displays info \p msg concatenated with \val number on the LCD in the next row .
 * @param msg: log message
 * @param val: value to concatenate
 */
void logMsgVal(char* msg, int val) {
	updateRow();
 800f06c:	f7ff ffa6 	bl	800efbc <updateRow>
	sprintf(fullMsg, "%s%d", msg, val);
 800f070:	4633      	mov	r3, r6
 800f072:	462a      	mov	r2, r5
 800f074:	4906      	ldr	r1, [pc, #24]	; (800f090 <logMsgVal+0x2c>)
 800f076:	6820      	ldr	r0, [r4, #0]
 800f078:	f002 fd42 	bl	8011b00 <sprintf>
	disp(fullMsg, LOG_FONT_COLOR);
 800f07c:	6820      	ldr	r0, [r4, #0]
 800f07e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
}
 800f082:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param val: value to concatenate
 */
void logMsgVal(char* msg, int val) {
	updateRow();
	sprintf(fullMsg, "%s%d", msg, val);
	disp(fullMsg, LOG_FONT_COLOR);
 800f086:	f7ff bf87 	b.w	800ef98 <disp>
 800f08a:	bf00      	nop
 800f08c:	20042f88 	.word	0x20042f88
 800f090:	0802f568 	.word	0x0802f568

0800f094 <logErrVal>:
/**
 * @brief The function displays error \p msg concatenated with \val number on the LCD in the next row .
 * @param msg: log message
 * @param val: value to concatenate
 */
void logErrVal(char* msg, int val) {
 800f094:	b570      	push	{r4, r5, r6, lr}
 800f096:	4605      	mov	r5, r0
 800f098:	460e      	mov	r6, r1
	updateRow();
	sprintf(fullMsg, "%s%d", msg, val);
 800f09a:	4c07      	ldr	r4, [pc, #28]	; (800f0b8 <logErrVal+0x24>)
 * @brief The function displays error \p msg concatenated with \val number on the LCD in the next row .
 * @param msg: log message
 * @param val: value to concatenate
 */
void logErrVal(char* msg, int val) {
	updateRow();
 800f09c:	f7ff ff8e 	bl	800efbc <updateRow>
	sprintf(fullMsg, "%s%d", msg, val);
 800f0a0:	4633      	mov	r3, r6
 800f0a2:	462a      	mov	r2, r5
 800f0a4:	4905      	ldr	r1, [pc, #20]	; (800f0bc <logErrVal+0x28>)
 800f0a6:	6820      	ldr	r0, [r4, #0]
 800f0a8:	f002 fd2a 	bl	8011b00 <sprintf>
	disp(fullMsg, LCD_COLOR_RED);
 800f0ac:	6820      	ldr	r0, [r4, #0]
 800f0ae:	4904      	ldr	r1, [pc, #16]	; (800f0c0 <logErrVal+0x2c>)
}
 800f0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param val: value to concatenate
 */
void logErrVal(char* msg, int val) {
	updateRow();
	sprintf(fullMsg, "%s%d", msg, val);
	disp(fullMsg, LCD_COLOR_RED);
 800f0b4:	f7ff bf70 	b.w	800ef98 <disp>
 800f0b8:	20042f88 	.word	0x20042f88
 800f0bc:	0802f568 	.word	0x0802f568
 800f0c0:	ffff0000 	.word	0xffff0000

0800f0c4 <MX_LWIP_Init>:
/* USER CODE END 2 */

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
 800f0c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 800f0c6:	2100      	movs	r1, #0
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2,
			NETMASK_ADDR3);
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&ethernetInterfaceHandler, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 800f0c8:	4c0f      	ldr	r4, [pc, #60]	; (800f108 <MX_LWIP_Init+0x44>)
/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 800f0ca:	4608      	mov	r0, r1
 800f0cc:	f7fa fb88 	bl	80097e0 <tcpip_init>

	/* IP addresses initialization with DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800f0d0:	490e      	ldr	r1, [pc, #56]	; (800f10c <MX_LWIP_Init+0x48>)
 800f0d2:	4b0f      	ldr	r3, [pc, #60]	; (800f110 <MX_LWIP_Init+0x4c>)
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2,
 800f0d4:	4a0f      	ldr	r2, [pc, #60]	; (800f114 <MX_LWIP_Init+0x50>)
void MX_LWIP_Init(void) {
	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);

	/* IP addresses initialization with DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800f0d6:	600b      	str	r3, [r1, #0]
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2,
 800f0d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
			NETMASK_ADDR3);
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800f0dc:	480e      	ldr	r0, [pc, #56]	; (800f118 <MX_LWIP_Init+0x54>)
	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);

	/* IP addresses initialization with DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2,
 800f0de:	6013      	str	r3, [r2, #0]
			NETMASK_ADDR3);
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800f0e0:	4b0e      	ldr	r3, [pc, #56]	; (800f11c <MX_LWIP_Init+0x58>)
 800f0e2:	6018      	str	r0, [r3, #0]

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&ethernetInterfaceHandler, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 800f0e4:	480e      	ldr	r0, [pc, #56]	; (800f120 <MX_LWIP_Init+0x5c>)
 800f0e6:	9002      	str	r0, [sp, #8]
 800f0e8:	480e      	ldr	r0, [pc, #56]	; (800f124 <MX_LWIP_Init+0x60>)
 800f0ea:	9001      	str	r0, [sp, #4]
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	9000      	str	r0, [sp, #0]
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f7fb ff5b 	bl	800afac <netif_add>
			&tcpip_input);

	/* Registers the default network interface */
	netif_set_default(&ethernetInterfaceHandler);
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	f7fb ff84 	bl	800b004 <netif_set_default>

	//if (netif_is_link_up(&gnetif)) {
		/* When the netif is fully configured this function must be called */
		netif_set_up(&ethernetInterfaceHandler);
 800f0fc:	4620      	mov	r0, r4
	//	netif_set_down(&gnetif);
	//}
	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 800f0fe:	b004      	add	sp, #16
 800f100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Registers the default network interface */
	netif_set_default(&ethernetInterfaceHandler);

	//if (netif_is_link_up(&gnetif)) {
		/* When the netif is fully configured this function must be called */
		netif_set_up(&ethernetInterfaceHandler);
 800f104:	f7fb bf84 	b.w	800b010 <netif_set_up>
 800f108:	20049594 	.word	0x20049594
 800f10c:	2004946c 	.word	0x2004946c
 800f110:	0b01a8c0 	.word	0x0b01a8c0
 800f114:	20049518 	.word	0x20049518
 800f118:	0101a8c0 	.word	0x0101a8c0
 800f11c:	2004951c 	.word	0x2004951c
 800f120:	0800975d 	.word	0x0800975d
 800f124:	0800e681 	.word	0x0800e681

0800f128 <main>:
#include "main.h"

/**
 * Main function
 */
int main(void) {
 800f128:	b508      	push	{r3, lr}
	/* CORE INITIALIZATION */

	/* HAL initialization */
	HAL_Init();
 800f12a:	f7f4 fa35 	bl	8003598 <HAL_Init>

	/* Setting the system clock */
	SystemClock_Config();
 800f12e:	f000 f805 	bl	800f13c <SystemClock_Config>

	/* Initializing threads */
	threadsInit();
 800f132:	f001 f8d9 	bl	80102e8 <threadsInit>

	/* Tasks scheduler start */
	osKernelStart();
 800f136:	f7f7 fba6 	bl	8006886 <osKernelStart>
 800f13a:	e7fe      	b.n	800f13a <main+0x12>

0800f13c <SystemClock_Config>:

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 800f13c:	4b30      	ldr	r3, [pc, #192]	; (800f200 <SystemClock_Config+0xc4>)
 800f13e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f140:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000

#include "mcuConfig.h"

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 800f144:	b570      	push	{r4, r5, r6, lr}

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 800f146:	641a      	str	r2, [r3, #64]	; 0x40

#include "mcuConfig.h"

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 800f148:	b0b4      	sub	sp, #208	; 0xd0

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 800f14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f14c:	2402      	movs	r4, #2
//	RCC_OscInitStruct.PLL.PLLM = 8;
//	RCC_OscInitStruct.PLL.PLLN = 180;
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f14e:	2601      	movs	r6, #1
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 400;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 8;

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800f150:	a807      	add	r0, sp, #28

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 800f152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f156:	9300      	str	r3, [sp, #0]
 800f158:	9b00      	ldr	r3, [sp, #0]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f15a:	4b2a      	ldr	r3, [pc, #168]	; (800f204 <SystemClock_Config+0xc8>)
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800f162:	601a      	str	r2, [r3, #0]
 800f164:	681b      	ldr	r3, [r3, #0]
//	RCC_OscInitStruct.PLL.PLLM = 8;
//	RCC_OscInitStruct.PLL.PLLN = 180;
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f166:	9607      	str	r6, [sp, #28]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f16c:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 400;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f16e:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f170:	9301      	str	r3, [sp, #4]
 800f172:	9b01      	ldr	r3, [sp, #4]
//	RCC_OscInitStruct.PLL.PLLN = 180;
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f178:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f17a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f17e:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 800f180:	2319      	movs	r3, #25
 800f182:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 400;
 800f184:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f188:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800f18a:	2308      	movs	r3, #8
 800f18c:	9312      	str	r3, [sp, #72]	; 0x48

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800f18e:	f7f5 ff89 	bl	80050a4 <HAL_RCC_OscConfig>
 800f192:	b100      	cbz	r0, 800f196 <SystemClock_Config+0x5a>
 800f194:	e7fe      	b.n	800f194 <SystemClock_Config+0x58>

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f196:	f44f 53a0 	mov.w	r3, #5120	; 0x1400

//	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
//		Error_Handler();
//	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800f19a:	250f      	movs	r5, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f19c:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800f19e:	2105      	movs	r1, #5

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f1a0:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f1a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800f1a6:	a802      	add	r0, sp, #8

//	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
//		Error_Handler();
//	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800f1a8:	9502      	str	r5, [sp, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f1aa:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f1ac:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800f1ae:	f7f6 f951 	bl	8005454 <HAL_RCC_ClockConfig>
 800f1b2:	b100      	cbz	r0, 800f1b6 <SystemClock_Config+0x7a>
 800f1b4:	e7fe      	b.n	800f1b4 <SystemClock_Config+0x78>
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800f1b6:	4b14      	ldr	r3, [pc, #80]	; (800f208 <SystemClock_Config+0xcc>)
			| RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800f1b8:	901b      	str	r0, [sp, #108]	; 0x6c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800f1ba:	9313      	str	r3, [sp, #76]	; 0x4c
			| RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 800f1bc:	23d8      	movs	r3, #216	; 0xd8
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
	PeriphClkInitStruct.PLLSAIDivQ = 1;
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800f1be:	901e      	str	r0, [sp, #120]	; 0x78
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800f1c0:	9023      	str	r0, [sp, #140]	; 0x8c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800f1c2:	902e      	str	r0, [sp, #184]	; 0xb8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800f1c4:	a813      	add	r0, sp, #76	; 0x4c
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
			| RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800f1c6:	941a      	str	r4, [sp, #104]	; 0x68
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800f1c8:	9419      	str	r4, [sp, #100]	; 0x64
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
			| RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 800f1ca:	9318      	str	r3, [sp, #96]	; 0x60
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800f1cc:	961d      	str	r6, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800f1ce:	f7f6 fa27 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	b100      	cbz	r0, 800f1d8 <SystemClock_Config+0x9c>
 800f1d6:	e7fe      	b.n	800f1d6 <SystemClock_Config+0x9a>
		Error_Handler();
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800f1d8:	f7f6 f9e6 	bl	80055a8 <HAL_RCC_GetHCLKFreq>
 800f1dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f1e0:	fbb0 f0f3 	udiv	r0, r0, r3
 800f1e4:	f7f4 fa56 	bl	8003694 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800f1e8:	2004      	movs	r0, #4
 800f1ea:	f7f4 fa69 	bl	80036c0 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800f1ee:	4622      	mov	r2, r4
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f6:	f7f4 fa09 	bl	800360c <HAL_NVIC_SetPriority>
}
 800f1fa:	b034      	add	sp, #208	; 0xd0
 800f1fc:	bd70      	pop	{r4, r5, r6, pc}
 800f1fe:	bf00      	nop
 800f200:	40023800 	.word	0x40023800
 800f204:	40007000 	.word	0x40007000
 800f208:	00110008 	.word	0x00110008

0800f20c <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void) {
 800f20c:	b510      	push	{r4, lr}

	hdma2d.Instance = DMA2D;
 800f20e:	4b0c      	ldr	r3, [pc, #48]	; (800f240 <MX_DMA2D_Init+0x34>)
	hdma2d.Init.Mode = DMA2D_M2M;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800f210:	2202      	movs	r2, #2
}

/* DMA2D init function */
void MX_DMA2D_Init(void) {

	hdma2d.Instance = DMA2D;
 800f212:	4c0c      	ldr	r4, [pc, #48]	; (800f244 <MX_DMA2D_Init+0x38>)
 800f214:	6023      	str	r3, [r4, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800f216:	2300      	movs	r3, #0
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
	hdma2d.Init.OutputOffset = 0;
	hdma2d.LayerCfg[1].InputOffset = 0;
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800f218:	62e2      	str	r2, [r4, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
	hdma2d.LayerCfg[1].InputAlpha = 0;
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800f21a:	4620      	mov	r0, r4

	hdma2d.Instance = DMA2D;
	hdma2d.Init.Mode = DMA2D_M2M;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
	hdma2d.Init.OutputOffset = 0;
	hdma2d.LayerCfg[1].InputOffset = 0;
 800f21c:	62a3      	str	r3, [r4, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800f21e:	6323      	str	r3, [r4, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800f220:	6363      	str	r3, [r4, #52]	; 0x34

/* DMA2D init function */
void MX_DMA2D_Init(void) {

	hdma2d.Instance = DMA2D;
	hdma2d.Init.Mode = DMA2D_M2M;
 800f222:	6063      	str	r3, [r4, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800f224:	60a2      	str	r2, [r4, #8]
	hdma2d.Init.OutputOffset = 0;
 800f226:	60e3      	str	r3, [r4, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
	hdma2d.LayerCfg[1].InputAlpha = 0;
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800f228:	f7f4 fc98 	bl	8003b5c <HAL_DMA2D_Init>
 800f22c:	b100      	cbz	r0, 800f230 <MX_DMA2D_Init+0x24>
 800f22e:	e7fe      	b.n	800f22e <MX_DMA2D_Init+0x22>
		Error_Handler();
	}

	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 800f230:	2101      	movs	r1, #1
 800f232:	4620      	mov	r0, r4
 800f234:	f7f4 fd5e 	bl	8003cf4 <HAL_DMA2D_ConfigLayer>
 800f238:	b100      	cbz	r0, 800f23c <MX_DMA2D_Init+0x30>
 800f23a:	e7fe      	b.n	800f23a <MX_DMA2D_Init+0x2e>
 800f23c:	bd10      	pop	{r4, pc}
 800f23e:	bf00      	nop
 800f240:	4002b000 	.word	0x4002b000
 800f244:	20049520 	.word	0x20049520

0800f248 <MX_LTDC_Init>:
	}

}

/* LTDC init function */
void MX_LTDC_Init(void) {
 800f248:	b570      	push	{r4, r5, r6, lr}
	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
 800f24a:	2207      	movs	r2, #7
void MX_LTDC_Init(void) {

	LTDC_LayerCfgTypeDef pLayerCfg;
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
 800f24c:	4c2e      	ldr	r4, [pc, #184]	; (800f308 <MX_LTDC_Init+0xc0>)
 800f24e:	4b2f      	ldr	r3, [pc, #188]	; (800f30c <MX_LTDC_Init+0xc4>)
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
 800f250:	2505      	movs	r5, #5
	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
 800f252:	6162      	str	r2, [r4, #20]
	hltdc.Init.VerticalSync = 3;
 800f254:	2203      	movs	r2, #3
void MX_LTDC_Init(void) {

	LTDC_LayerCfgTypeDef pLayerCfg;
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
 800f256:	6023      	str	r3, [r4, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800f258:	2300      	movs	r3, #0
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
 800f25a:	61a2      	str	r2, [r4, #24]
	hltdc.Init.AccumulatedHBP = 14;
 800f25c:	220e      	movs	r2, #14
	}

}

/* LTDC init function */
void MX_LTDC_Init(void) {
 800f25e:	b09a      	sub	sp, #104	; 0x68
	hltdc.Init.TotalWidth = 500;
	hltdc.Init.TotalHeigh = 279;
	hltdc.Init.Backcolor.Blue = 0;
	hltdc.Init.Backcolor.Green = 0;
	hltdc.Init.Backcolor.Red = 0;
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 800f260:	4620      	mov	r0, r4
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
 800f262:	61e2      	str	r2, [r4, #28]
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
 800f264:	f44f 72f7 	mov.w	r2, #494	; 0x1ee

	LTDC_LayerCfgTypeDef pLayerCfg;
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800f268:	6063      	str	r3, [r4, #4]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
 800f26a:	6262      	str	r2, [r4, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 277;
 800f26c:	f240 1215 	movw	r2, #277	; 0x115
	LTDC_LayerCfgTypeDef pLayerCfg;
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800f270:	60a3      	str	r3, [r4, #8]
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
	hltdc.Init.AccumulatedActiveH = 277;
 800f272:	62a2      	str	r2, [r4, #40]	; 0x28
	hltdc.Init.TotalWidth = 500;
 800f274:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800f278:	60e3      	str	r3, [r4, #12]
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
	hltdc.Init.AccumulatedActiveH = 277;
	hltdc.Init.TotalWidth = 500;
 800f27a:	62e2      	str	r2, [r4, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 279;
 800f27c:	f240 1217 	movw	r2, #279	; 0x117

	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800f280:	6123      	str	r3, [r4, #16]
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
	hltdc.Init.AccumulatedActiveH = 277;
	hltdc.Init.TotalWidth = 500;
	hltdc.Init.TotalHeigh = 279;
 800f282:	6322      	str	r2, [r4, #48]	; 0x30
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
 800f284:	6225      	str	r5, [r4, #32]
	hltdc.Init.AccumulatedActiveW = 494;
	hltdc.Init.AccumulatedActiveH = 277;
	hltdc.Init.TotalWidth = 500;
	hltdc.Init.TotalHeigh = 279;
	hltdc.Init.Backcolor.Blue = 0;
 800f286:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800f28a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800f28e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 800f292:	f7f5 fe67 	bl	8004f64 <HAL_LTDC_Init>
 800f296:	4602      	mov	r2, r0
 800f298:	b100      	cbz	r0, 800f29c <MX_LTDC_Init+0x54>
 800f29a:	e7fe      	b.n	800f29a <MX_LTDC_Init+0x52>
	pLayerCfg.WindowY0 = 0;
	pLayerCfg.WindowY1 = 0;
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	pLayerCfg.Alpha = 0;
	pLayerCfg.Alpha0 = 0;
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800f29c:	f44f 6680 	mov.w	r6, #1024	; 0x400
	hltdc.Init.Backcolor.Red = 0;
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
		Error_Handler();
	}

	pLayerCfg.WindowX0 = 0;
 800f2a0:	9000      	str	r0, [sp, #0]
	pLayerCfg.WindowX1 = 0;
 800f2a2:	9001      	str	r0, [sp, #4]
	pLayerCfg.ImageWidth = 0;
	pLayerCfg.ImageHeight = 0;
	pLayerCfg.Backcolor.Blue = 0;
	pLayerCfg.Backcolor.Green = 0;
	pLayerCfg.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800f2a4:	4669      	mov	r1, sp
		Error_Handler();
	}

	pLayerCfg.WindowX0 = 0;
	pLayerCfg.WindowX1 = 0;
	pLayerCfg.WindowY0 = 0;
 800f2a6:	9002      	str	r0, [sp, #8]
	pLayerCfg.WindowY1 = 0;
 800f2a8:	9003      	str	r0, [sp, #12]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800f2aa:	9004      	str	r0, [sp, #16]
	pLayerCfg.Alpha = 0;
 800f2ac:	9005      	str	r0, [sp, #20]
	pLayerCfg.Alpha0 = 0;
 800f2ae:	9006      	str	r0, [sp, #24]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
	pLayerCfg.FBStartAdress = 0;
 800f2b0:	9009      	str	r0, [sp, #36]	; 0x24
	pLayerCfg.ImageWidth = 0;
 800f2b2:	900a      	str	r0, [sp, #40]	; 0x28
	pLayerCfg.ImageHeight = 0;
 800f2b4:	900b      	str	r0, [sp, #44]	; 0x2c
	pLayerCfg.Backcolor.Blue = 0;
 800f2b6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
	pLayerCfg.Backcolor.Green = 0;
 800f2ba:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
	pLayerCfg.Backcolor.Red = 0;
 800f2be:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800f2c2:	4620      	mov	r0, r4
	pLayerCfg.WindowY0 = 0;
	pLayerCfg.WindowY1 = 0;
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	pLayerCfg.Alpha = 0;
	pLayerCfg.Alpha0 = 0;
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800f2c4:	9607      	str	r6, [sp, #28]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800f2c6:	9508      	str	r5, [sp, #32]
	pLayerCfg.ImageWidth = 0;
	pLayerCfg.ImageHeight = 0;
	pLayerCfg.Backcolor.Blue = 0;
	pLayerCfg.Backcolor.Green = 0;
	pLayerCfg.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800f2c8:	f7f5 fec0 	bl	800504c <HAL_LTDC_ConfigLayer>
 800f2cc:	b100      	cbz	r0, 800f2d0 <MX_LTDC_Init+0x88>
 800f2ce:	e7fe      	b.n	800f2ce <MX_LTDC_Init+0x86>
		Error_Handler();
	}

	pLayerCfg1.WindowX0 = 0;
 800f2d0:	900d      	str	r0, [sp, #52]	; 0x34
	pLayerCfg1.ImageWidth = 0;
	pLayerCfg1.ImageHeight = 0;
	pLayerCfg1.Backcolor.Blue = 0;
	pLayerCfg1.Backcolor.Green = 0;
	pLayerCfg1.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800f2d2:	2201      	movs	r2, #1
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
		Error_Handler();
	}

	pLayerCfg1.WindowX0 = 0;
	pLayerCfg1.WindowX1 = 0;
 800f2d4:	900e      	str	r0, [sp, #56]	; 0x38
	pLayerCfg1.ImageWidth = 0;
	pLayerCfg1.ImageHeight = 0;
	pLayerCfg1.Backcolor.Blue = 0;
	pLayerCfg1.Backcolor.Green = 0;
	pLayerCfg1.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800f2d6:	a90d      	add	r1, sp, #52	; 0x34
		Error_Handler();
	}

	pLayerCfg1.WindowX0 = 0;
	pLayerCfg1.WindowX1 = 0;
	pLayerCfg1.WindowY0 = 0;
 800f2d8:	900f      	str	r0, [sp, #60]	; 0x3c
	pLayerCfg1.WindowY1 = 0;
 800f2da:	9010      	str	r0, [sp, #64]	; 0x40
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800f2dc:	9011      	str	r0, [sp, #68]	; 0x44
	pLayerCfg1.Alpha = 0;
 800f2de:	9012      	str	r0, [sp, #72]	; 0x48
	pLayerCfg1.Alpha0 = 0;
 800f2e0:	9013      	str	r0, [sp, #76]	; 0x4c
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
	pLayerCfg1.FBStartAdress = 0;
 800f2e2:	9016      	str	r0, [sp, #88]	; 0x58
	pLayerCfg1.ImageWidth = 0;
 800f2e4:	9017      	str	r0, [sp, #92]	; 0x5c
	pLayerCfg1.ImageHeight = 0;
 800f2e6:	9018      	str	r0, [sp, #96]	; 0x60
	pLayerCfg1.Backcolor.Blue = 0;
 800f2e8:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
	pLayerCfg1.Backcolor.Green = 0;
 800f2ec:	f88d 0065 	strb.w	r0, [sp, #101]	; 0x65
	pLayerCfg1.Backcolor.Red = 0;
 800f2f0:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800f2f4:	4620      	mov	r0, r4
	pLayerCfg1.WindowY0 = 0;
	pLayerCfg1.WindowY1 = 0;
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	pLayerCfg1.Alpha = 0;
	pLayerCfg1.Alpha0 = 0;
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800f2f6:	9614      	str	r6, [sp, #80]	; 0x50
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800f2f8:	9515      	str	r5, [sp, #84]	; 0x54
	pLayerCfg1.ImageWidth = 0;
	pLayerCfg1.ImageHeight = 0;
	pLayerCfg1.Backcolor.Blue = 0;
	pLayerCfg1.Backcolor.Green = 0;
	pLayerCfg1.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800f2fa:	f7f5 fea7 	bl	800504c <HAL_LTDC_ConfigLayer>
 800f2fe:	b100      	cbz	r0, 800f302 <MX_LTDC_Init+0xba>
 800f300:	e7fe      	b.n	800f300 <MX_LTDC_Init+0xb8>
		Error_Handler();
	}

}
 800f302:	b01a      	add	sp, #104	; 0x68
 800f304:	bd70      	pop	{r4, r5, r6, pc}
 800f306:	bf00      	nop
 800f308:	20049470 	.word	0x20049470
 800f30c:	40016800 	.word	0x40016800

0800f310 <MX_FMC_Init>:
void MX_FMC_Init(void) {
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800f310:	4810      	ldr	r0, [pc, #64]	; (800f354 <MX_FMC_Init+0x44>)
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800f312:	2140      	movs	r1, #64	; 0x40
void MX_FMC_Init(void) {
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800f314:	4b10      	ldr	r3, [pc, #64]	; (800f358 <MX_FMC_Init+0x48>)
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800f316:	2200      	movs	r2, #0
	}

}

/* FMC initialization function */
void MX_FMC_Init(void) {
 800f318:	b500      	push	{lr}
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800f31a:	6141      	str	r1, [r0, #20]
	}

}

/* FMC initialization function */
void MX_FMC_Init(void) {
 800f31c:	b089      	sub	sp, #36	; 0x24
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800f31e:	2180      	movs	r1, #128	; 0x80
void MX_FMC_Init(void) {
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800f320:	6003      	str	r3, [r0, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800f322:	2310      	movs	r3, #16

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800f324:	6042      	str	r2, [r0, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800f326:	6181      	str	r1, [r0, #24]
	SdramTiming.RowCycleDelay = 16;
	SdramTiming.WriteRecoveryTime = 16;
	SdramTiming.RPDelay = 16;
	SdramTiming.RCDDelay = 16;

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 800f328:	a901      	add	r1, sp, #4
	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800f32a:	6082      	str	r2, [r0, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800f32c:	60c2      	str	r2, [r0, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800f32e:	6103      	str	r3, [r0, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800f330:	61c2      	str	r2, [r0, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800f332:	6202      	str	r2, [r0, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800f334:	6242      	str	r2, [r0, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800f336:	6282      	str	r2, [r0, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 800f338:	9301      	str	r3, [sp, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 800f33a:	9302      	str	r3, [sp, #8]
	SdramTiming.SelfRefreshTime = 16;
 800f33c:	9303      	str	r3, [sp, #12]
	SdramTiming.RowCycleDelay = 16;
 800f33e:	9304      	str	r3, [sp, #16]
	SdramTiming.WriteRecoveryTime = 16;
 800f340:	9305      	str	r3, [sp, #20]
	SdramTiming.RPDelay = 16;
 800f342:	9306      	str	r3, [sp, #24]
	SdramTiming.RCDDelay = 16;
 800f344:	9307      	str	r3, [sp, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 800f346:	f7f7 f861 	bl	800640c <HAL_SDRAM_Init>
 800f34a:	b100      	cbz	r0, 800f34e <MX_FMC_Init+0x3e>
 800f34c:	e7fe      	b.n	800f34c <MX_FMC_Init+0x3c>
		Error_Handler();
	}

}
 800f34e:	b009      	add	sp, #36	; 0x24
 800f350:	f85d fb04 	ldr.w	pc, [sp], #4
 800f354:	20049560 	.word	0x20049560
 800f358:	a0000140 	.word	0xa0000140

0800f35c <MX_GPIO_Init>:
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f35c:	4ba5      	ldr	r3, [pc, #660]	; (800f5f4 <MX_GPIO_Init+0x298>)
 800f35e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f360:	f042 0210 	orr.w	r2, r2, #16
 PB11   ------> USB_OTG_HS_ULPI_D4
 PB14   ------> SPI2_MISO
 PB15   ------> SPI2_MOSI
 */

void MX_GPIO_Init(void) {
 800f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f368:	631a      	str	r2, [r3, #48]	; 0x30
 PB11   ------> USB_OTG_HS_ULPI_D4
 PB14   ------> SPI2_MISO
 PB15   ------> SPI2_MOSI
 */

void MX_GPIO_Init(void) {
 800f36a:	b093      	sub	sp, #76	; 0x4c

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f36c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_ENABLE()
	;

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f36e:	2400      	movs	r4, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f370:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800f610 <MX_GPIO_Init+0x2b4>
 800f374:	a90d      	add	r1, sp, #52	; 0x34
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f376:	f002 0210 	and.w	r2, r2, #16
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f37a:	2502      	movs	r5, #2

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f37c:	4650      	mov	r0, sl

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f37e:	2603      	movs	r6, #3
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f380:	9202      	str	r2, [sp, #8]
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f382:	2701      	movs	r7, #1
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f384:	9a02      	ldr	r2, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800f386:	f04f 0b80 	mov.w	fp, #128	; 0x80
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800f38a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800f38c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800f614 <MX_GPIO_Init+0x2b8>
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800f390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800f394:	f8df 9280 	ldr.w	r9, [pc, #640]	; 800f618 <MX_GPIO_Init+0x2bc>
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800f398:	631a      	str	r2, [r3, #48]	; 0x30
 800f39a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f39c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800f3a0:	9203      	str	r2, [sp, #12]
 800f3a2:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800f3a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3a6:	f042 0202 	orr.w	r2, r2, #2
 800f3aa:	631a      	str	r2, [r3, #48]	; 0x30
 800f3ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3ae:	f002 0202 	and.w	r2, r2, #2
 800f3b2:	9204      	str	r2, [sp, #16]
 800f3b4:	9a04      	ldr	r2, [sp, #16]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800f3b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3b8:	f042 0208 	orr.w	r2, r2, #8
 800f3bc:	631a      	str	r2, [r3, #48]	; 0x30
 800f3be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3c0:	f002 0208 	and.w	r2, r2, #8
 800f3c4:	9205      	str	r2, [sp, #20]
 800f3c6:	9a05      	ldr	r2, [sp, #20]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800f3c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3ca:	f042 0204 	orr.w	r2, r2, #4
 800f3ce:	631a      	str	r2, [r3, #48]	; 0x30
 800f3d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3d2:	f002 0204 	and.w	r2, r2, #4
 800f3d6:	9206      	str	r2, [sp, #24]
 800f3d8:	9a06      	ldr	r2, [sp, #24]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800f3da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3dc:	f042 0201 	orr.w	r2, r2, #1
 800f3e0:	631a      	str	r2, [r3, #48]	; 0x30
 800f3e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3e4:	f002 0201 	and.w	r2, r2, #1
 800f3e8:	9207      	str	r2, [sp, #28]
 800f3ea:	9a07      	ldr	r2, [sp, #28]
	;
	__HAL_RCC_GPIOJ_CLK_ENABLE()
 800f3ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3f2:	631a      	str	r2, [r3, #48]	; 0x30
 800f3f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3f6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800f3fa:	9208      	str	r2, [sp, #32]
 800f3fc:	9a08      	ldr	r2, [sp, #32]
	;
	__HAL_RCC_GPIOI_CLK_ENABLE()
 800f3fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f404:	631a      	str	r2, [r3, #48]	; 0x30
 800f406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f408:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f40c:	9209      	str	r2, [sp, #36]	; 0x24
 800f40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
 800f410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f412:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f416:	631a      	str	r2, [r3, #48]	; 0x30
 800f418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f41a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800f41e:	920a      	str	r2, [sp, #40]	; 0x28
 800f420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 800f422:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f424:	f042 0220 	orr.w	r2, r2, #32
 800f428:	631a      	str	r2, [r3, #48]	; 0x30
 800f42a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f42c:	f002 0220 	and.w	r2, r2, #32
 800f430:	920b      	str	r2, [sp, #44]	; 0x2c
 800f432:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800f434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f436:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f43a:	631a      	str	r2, [r3, #48]	; 0x30
 800f43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	;

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f43e:	940e      	str	r4, [sp, #56]	; 0x38
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800f440:	f003 0380 	and.w	r3, r3, #128	; 0x80
	;

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f444:	940f      	str	r4, [sp, #60]	; 0x3c
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800f446:	930c      	str	r3, [sp, #48]	; 0x30
 800f448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	;

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800f44a:	2308      	movs	r3, #8
 800f44c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f44e:	f7f5 f855 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800f452:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800f454:	a90d      	add	r1, sp, #52	; 0x34
 800f456:	4650      	mov	r0, sl
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f458:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800f45a:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f45c:	2309      	movs	r3, #9
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f45e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f460:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f462:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800f464:	f7f5 f84a 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 800f468:	f44f 7340 	mov.w	r3, #768	; 0x300
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f46c:	a90d      	add	r1, sp, #52	; 0x34
 800f46e:	4862      	ldr	r0, [pc, #392]	; (800f5f8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 800f470:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f472:	2312      	movs	r3, #18
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f474:	970f      	str	r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f476:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f478:	2304      	movs	r3, #4

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f47a:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f47c:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f47e:	f7f5 f83d 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 800f482:	f643 4323 	movw	r3, #15395	; 0x3c23
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f486:	a90d      	add	r1, sp, #52	; 0x34
 800f488:	485b      	ldr	r0, [pc, #364]	; (800f5f8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 800f48a:	930d      	str	r3, [sp, #52]	; 0x34
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f48c:	230a      	movs	r3, #10

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f48e:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f490:	9311      	str	r3, [sp, #68]	; 0x44
	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f492:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f494:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f496:	f7f5 f831 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800f49a:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800f49c:	a90d      	add	r1, sp, #52	; 0x34
 800f49e:	4856      	ldr	r0, [pc, #344]	; (800f5f8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800f4a0:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4a2:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4a4:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4a6:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f4a8:	9511      	str	r5, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800f4aa:	f7f5 f827 	bl	80044fc <HAL_GPIO_Init>
	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800f4ae:	2308      	movs	r3, #8
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800f4b0:	a90d      	add	r1, sp, #52	; 0x34
 800f4b2:	4640      	mov	r0, r8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800f4b4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800f4b8:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4ba:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4bc:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4be:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800f4c0:	f7f5 f81c 	bl	80044fc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f4c4:	220c      	movs	r2, #12
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800f4c6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f4ca:	a90d      	add	r1, sp, #52	; 0x34
 800f4cc:	484b      	ldr	r0, [pc, #300]	; (800f5fc <MX_GPIO_Init+0x2a0>)
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f4ce:	9211      	str	r2, [sp, #68]	; 0x44
 800f4d0:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800f4d2:	930d      	str	r3, [sp, #52]	; 0x34
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4d4:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4d6:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4d8:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f4da:	f7f5 f80f 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800f4de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800f4e2:	a90d      	add	r1, sp, #52	; 0x34
 800f4e4:	4648      	mov	r0, r9
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4e6:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800f4e8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4ea:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4ec:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f4ee:	9711      	str	r7, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800f4f0:	f7f5 f804 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800f4f4:	2360      	movs	r3, #96	; 0x60
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f4f6:	a90d      	add	r1, sp, #52	; 0x34
 800f4f8:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4fa:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800f4fc:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f4fe:	230d      	movs	r3, #13
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f500:	940f      	str	r4, [sp, #60]	; 0x3c

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f502:	f50a 6a40 	add.w	sl, sl, #3072	; 0xc00
	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f506:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f508:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f50a:	f7f4 fff7 	bl	80044fc <HAL_GPIO_Init>
	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f50e:	2307      	movs	r3, #7
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800f510:	a90d      	add	r1, sp, #52	; 0x34
 800f512:	4839      	ldr	r0, [pc, #228]	; (800f5f8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
 800f514:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f518:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f51a:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f51c:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f51e:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800f520:	f7f4 ffec 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800f524:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800f526:	a90d      	add	r1, sp, #52	; 0x34
 800f528:	4833      	ldr	r0, [pc, #204]	; (800f5f8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800f52a:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800f52c:	230a      	movs	r3, #10
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f52e:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800f530:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f532:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f534:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800f536:	f7f4 ffe1 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800f53a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f53e:	a90d      	add	r1, sp, #52	; 0x34
 800f540:	482f      	ldr	r0, [pc, #188]	; (800f600 <MX_GPIO_Init+0x2a4>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800f542:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f544:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f546:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f548:	f7f4 ffd8 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800f54c:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800f54e:	a90d      	add	r1, sp, #52	; 0x34
 800f550:	4640      	mov	r0, r8
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f552:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800f554:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f556:	4b2b      	ldr	r3, [pc, #172]	; (800f604 <MX_GPIO_Init+0x2a8>)
	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f558:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800f61c <MX_GPIO_Init+0x2c0>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f55c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800f55e:	f7f4 ffcd 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800f562:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f566:	a90d      	add	r1, sp, #52	; 0x34
 800f568:	4648      	mov	r0, r9
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f56a:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800f56c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f56e:	230a      	movs	r3, #10
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f570:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f572:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f574:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f576:	f7f4 ffc1 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800f57a:	2320      	movs	r3, #32
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800f57c:	a90d      	add	r1, sp, #52	; 0x34
 800f57e:	4640      	mov	r0, r8
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f580:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800f582:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f584:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f586:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800f588:	f7f4 ffb8 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f58c:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f58e:	a90d      	add	r1, sp, #52	; 0x34
 800f590:	4640      	mov	r0, r8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f592:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f594:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f596:	230d      	movs	r3, #13
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f598:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f59a:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f59c:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f59e:	f7f4 ffad 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800f5a2:	f241 030c 	movw	r3, #4108	; 0x100c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f5a6:	a90d      	add	r1, sp, #52	; 0x34
 800f5a8:	4658      	mov	r0, fp
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f5aa:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800f5ac:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5ae:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5b0:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f5b2:	f7f4 ffa3 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800f5b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800f5ba:	a90d      	add	r1, sp, #52	; 0x34
 800f5bc:	480f      	ldr	r0, [pc, #60]	; (800f5fc <MX_GPIO_Init+0x2a0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800f5be:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f5c0:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5c2:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800f5c4:	f7f4 ff9a 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800f5c8:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f5ca:	a90d      	add	r1, sp, #52	; 0x34
 800f5cc:	480e      	ldr	r0, [pc, #56]	; (800f608 <MX_GPIO_Init+0x2ac>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800f5ce:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f5d0:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5d2:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5d4:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f5d6:	f7f4 ff91 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f5da:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f5de:	a90d      	add	r1, sp, #52	; 0x34
 800f5e0:	480a      	ldr	r0, [pc, #40]	; (800f60c <MX_GPIO_Init+0x2b0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f5e2:	930d      	str	r3, [sp, #52]	; 0x34
 800f5e4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f5e6:	230d      	movs	r3, #13
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5e8:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f5ea:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5ec:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5ee:	9410      	str	r4, [sp, #64]	; 0x40
 800f5f0:	e016      	b.n	800f620 <MX_GPIO_Init+0x2c4>
 800f5f2:	bf00      	nop
 800f5f4:	40023800 	.word	0x40023800
 800f5f8:	40020400 	.word	0x40020400
 800f5fc:	40020800 	.word	0x40020800
 800f600:	40022400 	.word	0x40022400
 800f604:	10120000 	.word	0x10120000
 800f608:	40022800 	.word	0x40022800
 800f60c:	40021800 	.word	0x40021800
 800f610:	40021000 	.word	0x40021000
 800f614:	40020c00 	.word	0x40020c00
 800f618:	40020000 	.word	0x40020000
 800f61c:	40022000 	.word	0x40022000
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f620:	f7f4 ff6c 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800f624:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f626:	a90d      	add	r1, sp, #52	; 0x34
 800f628:	4640      	mov	r0, r8
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f62a:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800f62c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f62e:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f630:	f7f4 ff64 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800f634:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f636:	9a00      	ldr	r2, [sp, #0]
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800f638:	a90d      	add	r1, sp, #52	; 0x34
 800f63a:	4640      	mov	r0, r8
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800f63c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f63e:	9211      	str	r2, [sp, #68]	; 0x44
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f640:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f642:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f644:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800f646:	f7f4 ff59 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800f64a:	f248 0204 	movw	r2, #32772	; 0x8004
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f64e:	a90d      	add	r1, sp, #52	; 0x34
 800f650:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f652:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800f654:	920d      	str	r2, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f656:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f658:	f7f4 ff50 	bl	80044fc <HAL_GPIO_Init>
	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f65c:	2205      	movs	r2, #5
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800f65e:	a90d      	add	r1, sp, #52	; 0x34
 800f660:	4658      	mov	r0, fp
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800f662:	950d      	str	r5, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f664:	9211      	str	r2, [sp, #68]	; 0x44
 800f666:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f668:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f66a:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f66c:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800f66e:	f7f4 ff45 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800f672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800f676:	a90d      	add	r1, sp, #52	; 0x34
 800f678:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f67a:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800f67c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f67e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f680:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800f682:	f7f4 ff3b 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : PH14 PH12 PH9 PH11
	 PH10 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
 800f686:	f44f 41bc 	mov.w	r1, #24064	; 0x5e00
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f68a:	230d      	movs	r3, #13
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f68c:	4650      	mov	r0, sl

	/*Configure GPIO pins : PH14 PH12 PH9 PH11
	 PH10 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f68e:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PH14 PH12 PH9 PH11
	 PH10 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
 800f690:	910d      	str	r1, [sp, #52]	; 0x34
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f692:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f694:	9311      	str	r3, [sp, #68]	; 0x44
	/*Configure GPIO pins : PH14 PH12 PH9 PH11
	 PH10 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f696:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f698:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f69a:	f7f4 ff2f 	bl	80044fc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800f69e:	a90d      	add	r1, sp, #52	; 0x34
 800f6a0:	4658      	mov	r0, fp
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 800f6a2:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6a4:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6a6:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6a8:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800f6aa:	9511      	str	r5, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800f6ac:	f7f4 ff26 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
 800f6b0:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800f6b2:	a90d      	add	r1, sp, #52	; 0x34
 800f6b4:	4648      	mov	r0, r9
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6b6:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
 800f6b8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f6ba:	2307      	movs	r3, #7
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6bc:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f6be:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6c0:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800f6c2:	f7f4 ff1b 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800f6c6:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800f6ca:	a90d      	add	r1, sp, #52	; 0x34
 800f6cc:	4648      	mov	r0, r9
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6ce:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800f6d0:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6d2:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6d4:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800f6d6:	9711      	str	r7, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800f6d8:	f7f4 ff10 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800f6dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800f6e0:	a90d      	add	r1, sp, #52	; 0x34
 800f6e2:	4658      	mov	r0, fp
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6e4:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800f6e6:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f6e8:	4b54      	ldr	r3, [pc, #336]	; (800f83c <MX_GPIO_Init+0x4e0>)
 800f6ea:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800f6ec:	f7f4 ff06 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800f6f0:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f6f2:	a90d      	add	r1, sp, #52	; 0x34
 800f6f4:	4852      	ldr	r0, [pc, #328]	; (800f840 <MX_GPIO_Init+0x4e4>)
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800f6f6:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800f6f8:	2308      	movs	r3, #8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6fa:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800f6fc:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6fe:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f700:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f702:	f7f4 fefb 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800f706:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f708:	a90d      	add	r1, sp, #52	; 0x34
 800f70a:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f70c:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800f70e:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f710:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f712:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f714:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f716:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f718:	f7f4 fef0 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800f71c:	23c8      	movs	r3, #200	; 0xc8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f71e:	a90d      	add	r1, sp, #52	; 0x34
 800f720:	4848      	ldr	r0, [pc, #288]	; (800f844 <MX_GPIO_Init+0x4e8>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800f722:	930d      	str	r3, [sp, #52]	; 0x34
 800f724:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f726:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f728:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f72a:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f72c:	f7f4 fee6 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
 800f730:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f734:	4844      	ldr	r0, [pc, #272]	; (800f848 <MX_GPIO_Init+0x4ec>)

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f736:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
 800f738:	910d      	str	r1, [sp, #52]	; 0x34
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f73a:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f73c:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f73e:	f7f4 fedd 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800f742:	9a00      	ldr	r2, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f744:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f746:	a90d      	add	r1, sp, #52	; 0x34
 800f748:	483d      	ldr	r0, [pc, #244]	; (800f840 <MX_GPIO_Init+0x4e4>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800f74a:	920d      	str	r2, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f74c:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f74e:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f750:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f752:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f754:	f7f4 fed2 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f758:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f75a:	a90d      	add	r1, sp, #52	; 0x34
 800f75c:	483b      	ldr	r0, [pc, #236]	; (800f84c <MX_GPIO_Init+0x4f0>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f75e:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f760:	2309      	movs	r3, #9
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f762:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f764:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f766:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f768:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f76a:	f7f4 fec7 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800f76e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f772:	2309      	movs	r3, #9
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f774:	4640      	mov	r0, r8
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f776:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800f778:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f77a:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f77c:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f77e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f780:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f782:	f7f4 febb 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800f786:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800f788:	a90d      	add	r1, sp, #52	; 0x34
 800f78a:	482e      	ldr	r0, [pc, #184]	; (800f844 <MX_GPIO_Init+0x4e8>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800f78c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f78e:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f790:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800f792:	f7f4 feb3 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800f796:	a90d      	add	r1, sp, #52	; 0x34
 800f798:	4648      	mov	r0, r9
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800f79a:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f79c:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f79e:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800f7a0:	f7f4 feac 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 800f7a4:	2150      	movs	r1, #80	; 0x50
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f7a6:	230d      	movs	r3, #13
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7a8:	4648      	mov	r0, r9
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7aa:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 800f7ac:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7ae:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f7b0:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7b2:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7b4:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7b6:	f7f4 fea1 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800f7ba:	2128      	movs	r1, #40	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f7bc:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7be:	4648      	mov	r0, r9
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7c0:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800f7c2:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7c4:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f7c6:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7c8:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7ca:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f7cc:	f7f4 fe96 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800f7d0:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800f7d2:	a90d      	add	r1, sp, #52	; 0x34
 800f7d4:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7d6:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800f7d8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800f7da:	2309      	movs	r3, #9
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7dc:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800f7de:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7e0:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800f7e2:	f7f4 fe8b 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800f7e6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f7ea:	9a00      	ldr	r2, [sp, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f7ec:	4817      	ldr	r0, [pc, #92]	; (800f84c <MX_GPIO_Init+0x4f0>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800f7ee:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f7f0:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f7f2:	9211      	str	r2, [sp, #68]	; 0x44
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7f4:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7f6:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f7f8:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f7fa:	f7f4 fe7f 	bl	80044fc <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800f7fe:	4622      	mov	r2, r4
 800f800:	4640      	mov	r0, r8
 800f802:	2120      	movs	r1, #32
 800f804:	f7f5 f80c 	bl	8004820 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 800f808:	4622      	mov	r2, r4
 800f80a:	4658      	mov	r0, fp
 800f80c:	f241 010c 	movw	r1, #4108	; 0x100c
 800f810:	f7f5 f806 	bl	8004820 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800f814:	4622      	mov	r2, r4
 800f816:	2108      	movs	r1, #8
 800f818:	480d      	ldr	r0, [pc, #52]	; (800f850 <MX_GPIO_Init+0x4f4>)
 800f81a:	f7f5 f801 	bl	8004820 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800f81e:	4622      	mov	r2, r4
 800f820:	4650      	mov	r0, sl
 800f822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f826:	f7f4 fffb 	bl	8004820 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800f82a:	9b01      	ldr	r3, [sp, #4]
 800f82c:	4622      	mov	r2, r4
 800f82e:	4805      	ldr	r0, [pc, #20]	; (800f844 <MX_GPIO_Init+0x4e8>)
 800f830:	4619      	mov	r1, r3
 800f832:	f7f4 fff5 	bl	8004820 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

}
 800f836:	b013      	add	sp, #76	; 0x4c
 800f838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f83c:	10120000 	.word	0x10120000
 800f840:	40020800 	.word	0x40020800
 800f844:	40021800 	.word	0x40021800
 800f848:	40021400 	.word	0x40021400
 800f84c:	40020400 	.word	0x40020400
 800f850:	40022800 	.word	0x40022800

0800f854 <HAL_TIM_PeriodElapsedCallback>:
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800f854:	6802      	ldr	r2, [r0, #0]
 800f856:	4b03      	ldr	r3, [pc, #12]	; (800f864 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800f858:	429a      	cmp	r2, r3
 800f85a:	d101      	bne.n	800f860 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 800f85c:	f7f3 bea8 	b.w	80035b0 <HAL_IncTick>
 800f860:	4770      	bx	lr
 800f862:	bf00      	nop
 800f864:	40010000 	.word	0x40010000

0800f868 <soundProcessingGetAmplitudeInstance>:
 * @param cfft_instance: pointer to \ref arm_cfft_instance_f32
 * @param amplitudeStr: pointer to \ref SpectrumStr - destination of amplitude vector
 * @param sourceBuffer: source buffer of audio samples
 */
void soundProcessingGetAmplitudeInstance(arm_cfft_instance_f32* cfft_instance,
		SpectrumStr* amplitudeStr, float32_t* sourceBuffer) {
 800f868:	b570      	push	{r4, r5, r6, lr}
 800f86a:	4614      	mov	r4, r2
 800f86c:	4606      	mov	r6, r0
 800f86e:	460d      	mov	r5, r1
	arm_cfft_f32(cfft_instance, sourceBuffer, 0, 1);
 800f870:	2200      	movs	r2, #0
 800f872:	4621      	mov	r1, r4
 800f874:	2301      	movs	r3, #1
 800f876:	f7f3 fb07 	bl	8002e88 <arm_cfft_f32>
	arm_cmplx_mag_f32(sourceBuffer, amplitudeStr->amplitudeVector,
 800f87a:	8832      	ldrh	r2, [r6, #0]
 800f87c:	4629      	mov	r1, r5
 800f87e:	4620      	mov	r0, r4
			cfft_instance->fftLen);
}
 800f880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param sourceBuffer: source buffer of audio samples
 */
void soundProcessingGetAmplitudeInstance(arm_cfft_instance_f32* cfft_instance,
		SpectrumStr* amplitudeStr, float32_t* sourceBuffer) {
	arm_cfft_f32(cfft_instance, sourceBuffer, 0, 1);
	arm_cmplx_mag_f32(sourceBuffer, amplitudeStr->amplitudeVector,
 800f884:	f7f2 bfbe 	b.w	8002804 <arm_cmplx_mag_f32>

0800f888 <soundProcessingAmplitudeInit>:
 * @param spectrumStr: pointer to \ref SpectrumStr (destination)
 * @param soundBuffer: pointer to \ref SoundBuffer (source)
 * @param destinationBuffer: buffer to temporary hold the audio samples (destination)
 */
void soundProcessingAmplitudeInit(SpectrumStr* spectrumStr,
		SoundBufferStr* soundBuffer, float32_t* destinationBuffer) {
 800f888:	b570      	push	{r4, r5, r6, lr}
	spectrumStr->frequencyResolution = (float32_t) soundBuffer->frequency
 800f88a:	f242 0504 	movw	r5, #8196	; 0x2004
			/ soundBuffer->size * 2;
 800f88e:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 * @param soundBuffer: pointer to \ref SoundBuffer (source)
 * @param destinationBuffer: buffer to temporary hold the audio samples (destination)
 */
void soundProcessingAmplitudeInit(SpectrumStr* spectrumStr,
		SoundBufferStr* soundBuffer, float32_t* destinationBuffer) {
	spectrumStr->frequencyResolution = (float32_t) soundBuffer->frequency
 800f892:	594e      	ldr	r6, [r1, r5]
			/ soundBuffer->size * 2;
 800f894:	681c      	ldr	r4, [r3, #0]
 * @param soundBuffer: pointer to \ref SoundBuffer (source)
 * @param destinationBuffer: buffer to temporary hold the audio samples (destination)
 */
void soundProcessingAmplitudeInit(SpectrumStr* spectrumStr,
		SoundBufferStr* soundBuffer, float32_t* destinationBuffer) {
	spectrumStr->frequencyResolution = (float32_t) soundBuffer->frequency
 800f896:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800f89a:	ee07 6a90 	vmov	s15, r6
 800f89e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f8a2:	ee07 4a90 	vmov	s15, r4
 800f8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f8ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f8b2:	edc3 7a02 	vstr	s15, [r3, #8]
			/ soundBuffer->size * 2;
	spectrumStr->vectorSize = soundBuffer->size / 2;
 800f8b6:	0863      	lsrs	r3, r4, #1
 800f8b8:	5143      	str	r3, [r0, r5]

	uint32_t soundBuffIterator = soundBuffer->iterator + 1;
 800f8ba:	f242 0308 	movw	r3, #8200	; 0x2008
 800f8be:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 800f8c2:	58cb      	ldr	r3, [r1, r3]
 800f8c4:	3301      	adds	r3, #1
	for (uint32_t i = 0; i < soundBuffer->size; i++) {
 800f8c6:	4295      	cmp	r5, r2
 800f8c8:	d00d      	beq.n	800f8e6 <soundProcessingAmplitudeInit+0x5e>
		destinationBuffer[i] = soundBuffer->soundBuffer[soundBuffIterator++];
 800f8ca:	1c58      	adds	r0, r3, #1
 800f8cc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f8d0:	ee07 3a90 	vmov	s15, r3
		if (soundBuffIterator >= soundBuffer->size)
			soundBuffIterator = 0;
 800f8d4:	4284      	cmp	r4, r0
 800f8d6:	bf8c      	ite	hi
 800f8d8:	4603      	movhi	r3, r0
 800f8da:	2300      	movls	r3, #0
			/ soundBuffer->size * 2;
	spectrumStr->vectorSize = soundBuffer->size / 2;

	uint32_t soundBuffIterator = soundBuffer->iterator + 1;
	for (uint32_t i = 0; i < soundBuffer->size; i++) {
		destinationBuffer[i] = soundBuffer->soundBuffer[soundBuffIterator++];
 800f8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8e0:	ece2 7a01 	vstmia	r2!, {s15}
 800f8e4:	e7ef      	b.n	800f8c6 <soundProcessingAmplitudeInit+0x3e>
		if (soundBuffIterator >= soundBuffer->size)
			soundBuffIterator = 0;
	}
}
 800f8e6:	bd70      	pop	{r4, r5, r6, pc}

0800f8e8 <soundProcessingGetCfftInstance>:
 * @param length: \ref arm_cfft_instance_f32 length
 * The \p length can be only the power of two (from 16 to 4096)
 */
void soundProcessingGetCfftInstance(arm_cfft_instance_f32* instance,
		uint32_t length) {
	switch (length) {
 800f8e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 * @param instance: pointer to \ref arm_cfft_instance_f32 structure
 * @param length: \ref arm_cfft_instance_f32 length
 * The \p length can be only the power of two (from 16 to 4096)
 */
void soundProcessingGetCfftInstance(arm_cfft_instance_f32* instance,
		uint32_t length) {
 800f8ec:	b510      	push	{r4, lr}
 800f8ee:	4604      	mov	r4, r0
	switch (length) {
 800f8f0:	d022      	beq.n	800f938 <soundProcessingGetCfftInstance+0x50>
 800f8f2:	d80a      	bhi.n	800f90a <soundProcessingGetCfftInstance+0x22>
 800f8f4:	2920      	cmp	r1, #32
 800f8f6:	d019      	beq.n	800f92c <soundProcessingGetCfftInstance+0x44>
 800f8f8:	d802      	bhi.n	800f900 <soundProcessingGetCfftInstance+0x18>
 800f8fa:	2910      	cmp	r1, #16
 800f8fc:	d014      	beq.n	800f928 <soundProcessingGetCfftInstance+0x40>
 800f8fe:	bd10      	pop	{r4, pc}
 800f900:	2940      	cmp	r1, #64	; 0x40
 800f902:	d015      	beq.n	800f930 <soundProcessingGetCfftInstance+0x48>
 800f904:	2980      	cmp	r1, #128	; 0x80
 800f906:	d015      	beq.n	800f934 <soundProcessingGetCfftInstance+0x4c>
 800f908:	bd10      	pop	{r4, pc}
 800f90a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f90e:	d017      	beq.n	800f940 <soundProcessingGetCfftInstance+0x58>
 800f910:	d803      	bhi.n	800f91a <soundProcessingGetCfftInstance+0x32>
 800f912:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f916:	d011      	beq.n	800f93c <soundProcessingGetCfftInstance+0x54>
 800f918:	bd10      	pop	{r4, pc}
 800f91a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800f91e:	d011      	beq.n	800f944 <soundProcessingGetCfftInstance+0x5c>
 800f920:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800f924:	d010      	beq.n	800f948 <soundProcessingGetCfftInstance+0x60>
 800f926:	bd10      	pop	{r4, pc}
	case 16: {
		*instance = arm_cfft_sR_f32_len16;
 800f928:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <soundProcessingGetCfftInstance+0x6c>)
 800f92a:	e00e      	b.n	800f94a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 32: {
		*instance = arm_cfft_sR_f32_len32;
 800f92c:	4b0a      	ldr	r3, [pc, #40]	; (800f958 <soundProcessingGetCfftInstance+0x70>)
 800f92e:	e00c      	b.n	800f94a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 64: {
		*instance = arm_cfft_sR_f32_len64;
 800f930:	4b0a      	ldr	r3, [pc, #40]	; (800f95c <soundProcessingGetCfftInstance+0x74>)
 800f932:	e00a      	b.n	800f94a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 128: {
		*instance = arm_cfft_sR_f32_len128;
 800f934:	4b0a      	ldr	r3, [pc, #40]	; (800f960 <soundProcessingGetCfftInstance+0x78>)
 800f936:	e008      	b.n	800f94a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 256: {
		*instance = arm_cfft_sR_f32_len256;
 800f938:	4b0a      	ldr	r3, [pc, #40]	; (800f964 <soundProcessingGetCfftInstance+0x7c>)
 800f93a:	e006      	b.n	800f94a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 512: {
		*instance = arm_cfft_sR_f32_len512;
 800f93c:	4b0a      	ldr	r3, [pc, #40]	; (800f968 <soundProcessingGetCfftInstance+0x80>)
 800f93e:	e004      	b.n	800f94a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 1024: {
		*instance = arm_cfft_sR_f32_len1024;
 800f940:	4b0a      	ldr	r3, [pc, #40]	; (800f96c <soundProcessingGetCfftInstance+0x84>)
 800f942:	e002      	b.n	800f94a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 2048: {
		*instance = arm_cfft_sR_f32_len2048;
 800f944:	4b0a      	ldr	r3, [pc, #40]	; (800f970 <soundProcessingGetCfftInstance+0x88>)
 800f946:	e000      	b.n	800f94a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 4096: {
		*instance = arm_cfft_sR_f32_len4096;
 800f948:	4b0a      	ldr	r3, [pc, #40]	; (800f974 <soundProcessingGetCfftInstance+0x8c>)
 800f94a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f94c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f950:	bd10      	pop	{r4, pc}
 800f952:	bf00      	nop
 800f954:	0802f2b0 	.word	0x0802f2b0
 800f958:	0802f2c0 	.word	0x0802f2c0
 800f95c:	0802f2d0 	.word	0x0802f2d0
 800f960:	0802f2f0 	.word	0x0802f2f0
 800f964:	0802f290 	.word	0x0802f290
 800f968:	0802f300 	.word	0x0802f300
 800f96c:	0802f2e0 	.word	0x0802f2e0
 800f970:	0802f2a0 	.word	0x0802f2a0
 800f974:	0802f310 	.word	0x0802f310

0800f978 <soundProcessingCopyAmplitudeInstance>:
 * @param source: pointer to \ref SpectrumStr structure
 * @param destination: pointer (output) to \ref SpectrumStr structure
 */
void soundProcessingCopyAmplitudeInstance(SpectrumStr* source,
		SpectrumStr* destination) {
	destination->frequencyResolution = source->frequencyResolution;
 800f978:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800f97c:	689a      	ldr	r2, [r3, #8]
 800f97e:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 800f982:	609a      	str	r2, [r3, #8]
	destination->vectorSize = source->vectorSize;
 800f984:	f242 0204 	movw	r2, #8196	; 0x2004
 800f988:	5883      	ldr	r3, [r0, r2]
 800f98a:	508b      	str	r3, [r1, r2]
 800f98c:	eb00 0383 	add.w	r3, r0, r3, lsl #2

	for (uint32_t i = 0; i < destination->vectorSize; i++) {
 800f990:	4298      	cmp	r0, r3
 800f992:	d004      	beq.n	800f99e <soundProcessingCopyAmplitudeInstance+0x26>
		destination->amplitudeVector[i] = source->amplitudeVector[i];
 800f994:	f850 2b04 	ldr.w	r2, [r0], #4
 800f998:	f841 2b04 	str.w	r2, [r1], #4
 800f99c:	e7f8      	b.n	800f990 <soundProcessingCopyAmplitudeInstance+0x18>
	}
}
 800f99e:	4770      	bx	lr

0800f9a0 <SysTick_Handler>:
 */
void SysTick_Handler(void) {
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	osSystickHandler();
 800f9a0:	f7f7 b99a 	b.w	8006cd8 <osSystickHandler>

0800f9a4 <TIM1_UP_TIM10_IRQHandler>:
 */
void TIM1_UP_TIM10_IRQHandler(void) {
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 800f9a4:	4801      	ldr	r0, [pc, #4]	; (800f9ac <TIM1_UP_TIM10_IRQHandler+0x8>)
 800f9a6:	f7f6 bd8a 	b.w	80064be <HAL_TIM_IRQHandler>
 800f9aa:	bf00      	nop
 800f9ac:	200492d8 	.word	0x200492d8

0800f9b0 <ETH_IRQHandler>:
 */
void ETH_IRQHandler(void) {
	/* USER CODE BEGIN ETH_IRQn 0 */

	/* USER CODE END ETH_IRQn 0 */
	ETHERNET_IRQHandler();
 800f9b0:	f7fe be60 	b.w	800e674 <ETHERNET_IRQHandler>

0800f9b4 <DMA2_Stream4_IRQHandler>:
 * @brief This function handles DMA2 Stream 4 interrupt request.
 * @param None
 * @retval None
 */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void) {
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800f9b4:	4b01      	ldr	r3, [pc, #4]	; (800f9bc <DMA2_Stream4_IRQHandler+0x8>)
 800f9b6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f9b8:	f7f3 bfc2 	b.w	8003940 <HAL_DMA_IRQHandler>
 800f9bc:	20014474 	.word	0x20014474

0800f9c0 <DMA2_Stream7_IRQHandler>:
 * @brief This function handles DMA2 Stream 7 interrupt request.
 * @param None
 * @retval None
 */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void) {
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800f9c0:	4b01      	ldr	r3, [pc, #4]	; (800f9c8 <DMA2_Stream7_IRQHandler+0x8>)
 800f9c2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f9c4:	f7f3 bfbc 	b.w	8003940 <HAL_DMA_IRQHandler>
 800f9c8:	20014390 	.word	0x20014390

0800f9cc <printNullHandle>:
 *      Author: Patryk
 */

#include "usrTaskSupport.h"

void printNullHandle(char* handleName) {
 800f9cc:	b500      	push	{lr}
 800f9ce:	b089      	sub	sp, #36	; 0x24
	char msg[30];
	sprintf(msg, "%s is NULL", handleName);
 800f9d0:	4602      	mov	r2, r0
 800f9d2:	4905      	ldr	r1, [pc, #20]	; (800f9e8 <printNullHandle+0x1c>)
 800f9d4:	4668      	mov	r0, sp
 800f9d6:	f002 f893 	bl	8011b00 <sprintf>
	logErr(msg);
 800f9da:	4668      	mov	r0, sp
 800f9dc:	f7ff fb36 	bl	800f04c <logErr>
}
 800f9e0:	b009      	add	sp, #36	; 0x24
 800f9e2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9e6:	bf00      	nop
 800f9e8:	0802f575 	.word	0x0802f575

0800f9ec <initTask>:
// OS TASKS

/**
 * @brief Initialization task
 */
void initTask(void const * argument) {
 800f9ec:	b530      	push	{r4, r5, lr}
 800f9ee:	b085      	sub	sp, #20
	lcdInit();
	logMsg("Ethernet initialization...");
	MX_LWIP_Init();

	/* DHCP initialization */
	dhcpInitTaskHandle = osThreadCreate(osThread(dhcpInitThread), NULL);
 800f9f0:	4c76      	ldr	r4, [pc, #472]	; (800fbcc <initTask+0x1e0>)
/**
 * @brief Initialization task
 */
void initTask(void const * argument) {
	/* PERIPHERALS INITIALIZATION */
	MX_FMC_Init();
 800f9f2:	f7ff fc8d 	bl	800f310 <MX_FMC_Init>
	MX_LTDC_Init();
 800f9f6:	f7ff fc27 	bl	800f248 <MX_LTDC_Init>
	MX_DMA2D_Init();
 800f9fa:	f7ff fc07 	bl	800f20c <MX_DMA2D_Init>
	MX_GPIO_Init();
 800f9fe:	f7ff fcad 	bl	800f35c <MX_GPIO_Init>
	lcdInit();
 800fa02:	f7ff fae9 	bl	800efd8 <lcdInit>
	logMsg("Ethernet initialization...");
 800fa06:	4872      	ldr	r0, [pc, #456]	; (800fbd0 <initTask+0x1e4>)
 800fa08:	f7ff fb14 	bl	800f034 <logMsg>
	MX_LWIP_Init();
 800fa0c:	f7ff fb5a 	bl	800f0c4 <MX_LWIP_Init>

	/* DHCP initialization */
	dhcpInitTaskHandle = osThreadCreate(osThread(dhcpInitThread), NULL);
 800fa10:	2100      	movs	r1, #0
 800fa12:	4870      	ldr	r0, [pc, #448]	; (800fbd4 <initTask+0x1e8>)
 800fa14:	f7f6 ff3c 	bl	8006890 <osThreadCreate>
 800fa18:	6020      	str	r0, [r4, #0]

	logMsg("Waiting for DHCP");
 800fa1a:	486f      	ldr	r0, [pc, #444]	; (800fbd8 <initTask+0x1ec>)
 800fa1c:	f7ff fb0a 	bl	800f034 <logMsg>
	osEvent event;
	do {
		// waiting for DHCP initialization
		event = osSignalWait(DHCP_FINISHED_SIGNAL, osWaitForever);
 800fa20:	f04f 32ff 	mov.w	r2, #4294967295
 800fa24:	2101      	movs	r1, #1
 800fa26:	a801      	add	r0, sp, #4
 800fa28:	f7f6 ff80 	bl	800692c <osSignalWait>
	} while (event.status != osOK && event.status != osEventSignal);
 800fa2c:	9b01      	ldr	r3, [sp, #4]
 800fa2e:	f033 0308 	bics.w	r3, r3, #8
 800fa32:	d1f5      	bne.n	800fa20 <initTask+0x34>
	logMsg("DHCP task done");
 800fa34:	4869      	ldr	r0, [pc, #420]	; (800fbdc <initTask+0x1f0>)
 800fa36:	f7ff fafd 	bl	800f034 <logMsg>

	// terminating DHCP initialization task
	logMsg("Terminating dhcp");
 800fa3a:	4869      	ldr	r0, [pc, #420]	; (800fbe0 <initTask+0x1f4>)
 800fa3c:	f7ff fafa 	bl	800f034 <logMsg>
	osThreadTerminate(dhcpInitTaskHandle);
 800fa40:	6820      	ldr	r0, [r4, #0]
 800fa42:	f7f6 ff40 	bl	80068c6 <osThreadTerminate>

	/* Taska, mutexes, mail queues and memory pools initialization */
	logMsg("Initializing memory pools");
	spectrumBufferPool_id = osPoolCreate(osPool(spectrumBufferPool));
 800fa46:	4d67      	ldr	r5, [pc, #412]	; (800fbe4 <initTask+0x1f8>)
	// terminating DHCP initialization task
	logMsg("Terminating dhcp");
	osThreadTerminate(dhcpInitTaskHandle);

	/* Taska, mutexes, mail queues and memory pools initialization */
	logMsg("Initializing memory pools");
 800fa48:	4867      	ldr	r0, [pc, #412]	; (800fbe8 <initTask+0x1fc>)
 800fa4a:	f7ff faf3 	bl	800f034 <logMsg>
	spectrumBufferPool_id = osPoolCreate(osPool(spectrumBufferPool));
 800fa4e:	4867      	ldr	r0, [pc, #412]	; (800fbec <initTask+0x200>)
 800fa50:	f7f7 f81e 	bl	8006a90 <osPoolCreate>
 800fa54:	6028      	str	r0, [r5, #0]
	if (spectrumBufferPool_id == NULL)
 800fa56:	b910      	cbnz	r0, 800fa5e <initTask+0x72>
		printNullHandle("Spect pool");
 800fa58:	4865      	ldr	r0, [pc, #404]	; (800fbf0 <initTask+0x204>)
 800fa5a:	f7ff ffb7 	bl	800f9cc <printNullHandle>
	cfftPool_id = osPoolCreate(osPool(cfftPool));
 800fa5e:	4865      	ldr	r0, [pc, #404]	; (800fbf4 <initTask+0x208>)
 800fa60:	f7f7 f816 	bl	8006a90 <osPoolCreate>
 800fa64:	4b64      	ldr	r3, [pc, #400]	; (800fbf8 <initTask+0x20c>)
 800fa66:	6018      	str	r0, [r3, #0]
	if (cfftPool_id == NULL)
 800fa68:	b910      	cbnz	r0, 800fa70 <initTask+0x84>
		printNullHandle("Cfft pool");
 800fa6a:	4864      	ldr	r0, [pc, #400]	; (800fbfc <initTask+0x210>)
 800fa6c:	f7ff ffae 	bl	800f9cc <printNullHandle>
	soundBufferPool_id = osPoolCreate(osPool(soundBufferPool));
 800fa70:	4863      	ldr	r0, [pc, #396]	; (800fc00 <initTask+0x214>)
 800fa72:	f7f7 f80d 	bl	8006a90 <osPoolCreate>
 800fa76:	4b63      	ldr	r3, [pc, #396]	; (800fc04 <initTask+0x218>)
 800fa78:	6018      	str	r0, [r3, #0]
 800fa7a:	461c      	mov	r4, r3
	if (soundBufferPool_id == NULL)
 800fa7c:	b910      	cbnz	r0, 800fa84 <initTask+0x98>
		printNullHandle("Sound pool");
 800fa7e:	4862      	ldr	r0, [pc, #392]	; (800fc08 <initTask+0x21c>)
 800fa80:	f7ff ffa4 	bl	800f9cc <printNullHandle>
	/*stmConfigPool_id = osPoolCreate(osPool(stmConfigPool));
	 if (stmConfigPool_id == NULL)
	 printHandleNull("Stm config pool");*/

	logMsg("Initializing mail queues");
 800fa84:	4861      	ldr	r0, [pc, #388]	; (800fc0c <initTask+0x220>)
 800fa86:	f7ff fad5 	bl	800f034 <logMsg>
	dmaAudioMail_q_id = osMailCreate(osMailQ(dmaAudioMail_q), NULL);
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	4860      	ldr	r0, [pc, #384]	; (800fc10 <initTask+0x224>)
 800fa8e:	f7f7 f886 	bl	8006b9e <osMailCreate>
 800fa92:	4b60      	ldr	r3, [pc, #384]	; (800fc14 <initTask+0x228>)
 800fa94:	6018      	str	r0, [r3, #0]
	if (dmaAudioMail_q_id == NULL)
 800fa96:	b910      	cbnz	r0, 800fa9e <initTask+0xb2>
		printNullHandle("Audio mail q");
 800fa98:	485f      	ldr	r0, [pc, #380]	; (800fc18 <initTask+0x22c>)
 800fa9a:	f7ff ff97 	bl	800f9cc <printNullHandle>

	logMsg("Initializing mutexes");
 800fa9e:	485f      	ldr	r0, [pc, #380]	; (800fc1c <initTask+0x230>)
 800faa0:	f7ff fac8 	bl	800f034 <logMsg>
	mainSpectrumBufferMutex_id = osMutexCreate(
 800faa4:	485e      	ldr	r0, [pc, #376]	; (800fc20 <initTask+0x234>)
 800faa6:	f7f6 ff65 	bl	8006974 <osMutexCreate>
 800faaa:	4b5e      	ldr	r3, [pc, #376]	; (800fc24 <initTask+0x238>)
 800faac:	6018      	str	r0, [r3, #0]
			osMutex(mainSpectrumBufferMutex));
	if (mainSpectrumBufferMutex_id == NULL)
 800faae:	b910      	cbnz	r0, 800fab6 <initTask+0xca>
		printNullHandle("Spect mut");
 800fab0:	485d      	ldr	r0, [pc, #372]	; (800fc28 <initTask+0x23c>)
 800fab2:	f7ff ff8b 	bl	800f9cc <printNullHandle>
	mainSoundBufferMutex_id = osMutexCreate(osMutex(mainSoundBufferMutex));
 800fab6:	485d      	ldr	r0, [pc, #372]	; (800fc2c <initTask+0x240>)
 800fab8:	f7f6 ff5c 	bl	8006974 <osMutexCreate>
 800fabc:	4b5c      	ldr	r3, [pc, #368]	; (800fc30 <initTask+0x244>)
 800fabe:	6018      	str	r0, [r3, #0]
	if (mainSoundBufferMutex_id == NULL)
 800fac0:	b910      	cbnz	r0, 800fac8 <initTask+0xdc>
		printNullHandle("Audio mut");
 800fac2:	485c      	ldr	r0, [pc, #368]	; (800fc34 <initTask+0x248>)
 800fac4:	f7ff ff82 	bl	800f9cc <printNullHandle>
	ethernetInterfaceMutex_id = osMutexCreate(osMutex(ethernetInterfaceMutex));
 800fac8:	485b      	ldr	r0, [pc, #364]	; (800fc38 <initTask+0x24c>)
 800faca:	f7f6 ff53 	bl	8006974 <osMutexCreate>
 800face:	4b5b      	ldr	r3, [pc, #364]	; (800fc3c <initTask+0x250>)
 800fad0:	6018      	str	r0, [r3, #0]
	if (ethernetInterfaceMutex_id == NULL)
 800fad2:	b910      	cbnz	r0, 800fada <initTask+0xee>
		printNullHandle("Eth mut");
 800fad4:	485a      	ldr	r0, [pc, #360]	; (800fc40 <initTask+0x254>)
 800fad6:	f7ff ff79 	bl	800f9cc <printNullHandle>

	/* Global variables */
	logMsg("Preparing global variables");
 800fada:	485a      	ldr	r0, [pc, #360]	; (800fc44 <initTask+0x258>)
 800fadc:	f7ff faaa 	bl	800f034 <logMsg>
	//configStr = osPoolCAlloc(stmConfigPool_id);
	mainSpectrumBuffer = osPoolCAlloc(spectrumBufferPool_id);
 800fae0:	6828      	ldr	r0, [r5, #0]
 800fae2:	f7f7 f840 	bl	8006b66 <osPoolCAlloc>
 800fae6:	4b58      	ldr	r3, [pc, #352]	; (800fc48 <initTask+0x25c>)
 800fae8:	6018      	str	r0, [r3, #0]
	mainSoundBuffer = osPoolCAlloc(soundBufferPool_id);
 800faea:	6820      	ldr	r0, [r4, #0]
 800faec:	f7f7 f83b 	bl	8006b66 <osPoolCAlloc>
 800faf0:	4b56      	ldr	r3, [pc, #344]	; (800fc4c <initTask+0x260>)
	mainSoundBuffer->iterator = 0;
 800faf2:	f242 0208 	movw	r2, #8200	; 0x2008
	mainSoundBuffer->frequency = configStr.audioSamplingFrequency;
 800faf6:	4c56      	ldr	r4, [pc, #344]	; (800fc50 <initTask+0x264>)

	/* Global variables */
	logMsg("Preparing global variables");
	//configStr = osPoolCAlloc(stmConfigPool_id);
	mainSpectrumBuffer = osPoolCAlloc(spectrumBufferPool_id);
	mainSoundBuffer = osPoolCAlloc(soundBufferPool_id);
 800faf8:	6018      	str	r0, [r3, #0]
	mainSoundBuffer->iterator = 0;
 800fafa:	2300      	movs	r3, #0
	mainSoundBuffer->frequency = configStr.audioSamplingFrequency;
 800fafc:	6861      	ldr	r1, [r4, #4]
	/* Global variables */
	logMsg("Preparing global variables");
	//configStr = osPoolCAlloc(stmConfigPool_id);
	mainSpectrumBuffer = osPoolCAlloc(spectrumBufferPool_id);
	mainSoundBuffer = osPoolCAlloc(soundBufferPool_id);
	mainSoundBuffer->iterator = 0;
 800fafe:	5083      	str	r3, [r0, r2]
	mainSoundBuffer->frequency = configStr.audioSamplingFrequency;
 800fb00:	f242 0204 	movw	r2, #8196	; 0x2004
 800fb04:	5081      	str	r1, [r0, r2]
	mainSoundBuffer->size = MAIN_SOUND_BUFFER_MAX_BUFFER_SIZE;
 800fb06:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 800fb0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fb0e:	6011      	str	r1, [r2, #0]
 800fb10:	1e82      	subs	r2, r0, #2
 800fb12:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
 800fb16:	301e      	adds	r0, #30
	for (uint32_t i = 0; i < mainSoundBuffer->size; i++) {
		mainSoundBuffer->soundBuffer[i] = 0;
 800fb18:	f822 3f02 	strh.w	r3, [r2, #2]!
	mainSpectrumBuffer = osPoolCAlloc(spectrumBufferPool_id);
	mainSoundBuffer = osPoolCAlloc(soundBufferPool_id);
	mainSoundBuffer->iterator = 0;
	mainSoundBuffer->frequency = configStr.audioSamplingFrequency;
	mainSoundBuffer->size = MAIN_SOUND_BUFFER_MAX_BUFFER_SIZE;
	for (uint32_t i = 0; i < mainSoundBuffer->size; i++) {
 800fb1c:	4282      	cmp	r2, r0
 800fb1e:	d1fb      	bne.n	800fb18 <initTask+0x12c>
		mainSoundBuffer->soundBuffer[i] = 0;
	}

	configStr.amplitudeSamplingDelay = CONNECTION_TASK_DELAY_TIME;
 800fb20:	230a      	movs	r3, #10
	configStr.audioSamplingFrequency = 44100;
	configStr.clientPort = UDP_STREAMING_PORT;
	IP4_ADDR(&configStr.clientIp, 192, 168, 1, 10);

	logMsg("Preparing audio recording");
 800fb22:	484c      	ldr	r0, [pc, #304]	; (800fc54 <initTask+0x268>)
	mainSoundBuffer->size = MAIN_SOUND_BUFFER_MAX_BUFFER_SIZE;
	for (uint32_t i = 0; i < mainSoundBuffer->size; i++) {
		mainSoundBuffer->soundBuffer[i] = 0;
	}

	configStr.amplitudeSamplingDelay = CONNECTION_TASK_DELAY_TIME;
 800fb24:	7023      	strb	r3, [r4, #0]
	configStr.audioSamplingFrequency = 44100;
 800fb26:	f64a 4344 	movw	r3, #44100	; 0xac44
 800fb2a:	6063      	str	r3, [r4, #4]
	configStr.clientPort = UDP_STREAMING_PORT;
 800fb2c:	f24d 03b2 	movw	r3, #53426	; 0xd0b2
 800fb30:	60e3      	str	r3, [r4, #12]
	IP4_ADDR(&configStr.clientIp, 192, 168, 1, 10);
 800fb32:	4b49      	ldr	r3, [pc, #292]	; (800fc58 <initTask+0x26c>)
 800fb34:	60a3      	str	r3, [r4, #8]

	logMsg("Preparing audio recording");
 800fb36:	f7ff fa7d 	bl	800f034 <logMsg>
	if (audioRecorderInit(AUDIO_RECORDER_INPUT_MICROPHONE,
 800fb3a:	6862      	ldr	r2, [r4, #4]
 800fb3c:	2150      	movs	r1, #80	; 0x50
 800fb3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fb42:	f7ff f82d 	bl	800eba0 <audioRecorderInit>
 800fb46:	b110      	cbz	r0, 800fb4e <initTask+0x162>
	AUDIO_RECORDER_VOLUME_0DB,
			configStr.audioSamplingFrequency) != AUDIO_RECORDER_OK) {
		logErr("Audio rec init");
 800fb48:	4844      	ldr	r0, [pc, #272]	; (800fc5c <initTask+0x270>)
 800fb4a:	f7ff fa7f 	bl	800f04c <logErr>
	}

	/* Audio recorder - start recording */
	if (audioRecorderStartRecording(dmaAudioBuffer,
 800fb4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fb52:	4843      	ldr	r0, [pc, #268]	; (800fc60 <initTask+0x274>)
 800fb54:	f7ff f82e 	bl	800ebb4 <audioRecorderStartRecording>
 800fb58:	b110      	cbz	r0, 800fb60 <initTask+0x174>
	AUDIO_BUFFER_SIZE) != AUDIO_RECORDER_OK) {
		logErr("Audio buffer start");
 800fb5a:	4842      	ldr	r0, [pc, #264]	; (800fc64 <initTask+0x278>)
 800fb5c:	f7ff fa76 	bl	800f04c <logErr>
	}

	logMsg("Initializing tasks");
 800fb60:	4841      	ldr	r0, [pc, #260]	; (800fc68 <initTask+0x27c>)
 800fb62:	f7ff fa67 	bl	800f034 <logMsg>
#ifdef LCD_PRINTER_SUPPORT
	lcdTaskHandle = osThreadCreate(osThread(lcdThread), NULL);
	if (lcdTaskHandle == NULL)
	printNullHandle("Lcd task");
#endif
	soundProcessingTaskHandle = osThreadCreate(osThread(soundProcessingThread),
 800fb66:	2100      	movs	r1, #0
 800fb68:	4840      	ldr	r0, [pc, #256]	; (800fc6c <initTask+0x280>)
 800fb6a:	f7f6 fe91 	bl	8006890 <osThreadCreate>
 800fb6e:	4b40      	ldr	r3, [pc, #256]	; (800fc70 <initTask+0x284>)
 800fb70:	6018      	str	r0, [r3, #0]
	NULL);
	if (soundProcessingTaskHandle == NULL)
 800fb72:	b910      	cbnz	r0, 800fb7a <initTask+0x18e>
		printNullHandle("Sound proc task");
 800fb74:	483f      	ldr	r0, [pc, #252]	; (800fc74 <initTask+0x288>)
 800fb76:	f7ff ff29 	bl	800f9cc <printNullHandle>
	samplingTaskHandle = osThreadCreate(osThread(samplingThread), NULL);
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	483e      	ldr	r0, [pc, #248]	; (800fc78 <initTask+0x28c>)
 800fb7e:	f7f6 fe87 	bl	8006890 <osThreadCreate>
 800fb82:	4b3e      	ldr	r3, [pc, #248]	; (800fc7c <initTask+0x290>)
 800fb84:	6018      	str	r0, [r3, #0]
	if (samplingTaskHandle == NULL)
 800fb86:	b910      	cbnz	r0, 800fb8e <initTask+0x1a2>
		printNullHandle("Samp task");
 800fb88:	483d      	ldr	r0, [pc, #244]	; (800fc80 <initTask+0x294>)
 800fb8a:	f7ff ff1f 	bl	800f9cc <printNullHandle>
	streamingTaskHandle = osThreadCreate(osThread(streamingThread), NULL);
 800fb8e:	2100      	movs	r1, #0
 800fb90:	483c      	ldr	r0, [pc, #240]	; (800fc84 <initTask+0x298>)
 800fb92:	f7f6 fe7d 	bl	8006890 <osThreadCreate>
 800fb96:	4b3c      	ldr	r3, [pc, #240]	; (800fc88 <initTask+0x29c>)
 800fb98:	6018      	str	r0, [r3, #0]
	if (streamingTaskHandle == NULL)
 800fb9a:	b910      	cbnz	r0, 800fba2 <initTask+0x1b6>
		printNullHandle("Stream task");
 800fb9c:	483b      	ldr	r0, [pc, #236]	; (800fc8c <initTask+0x2a0>)
 800fb9e:	f7ff ff15 	bl	800f9cc <printNullHandle>
	httpConfigTaskHandle = osThreadCreate(osThread(httpConfigThread), NULL);
 800fba2:	2100      	movs	r1, #0
 800fba4:	483a      	ldr	r0, [pc, #232]	; (800fc90 <initTask+0x2a4>)
 800fba6:	f7f6 fe73 	bl	8006890 <osThreadCreate>
 800fbaa:	4b3a      	ldr	r3, [pc, #232]	; (800fc94 <initTask+0x2a8>)
 800fbac:	6018      	str	r0, [r3, #0]
	if (httpConfigTaskHandle == NULL)
 800fbae:	b910      	cbnz	r0, 800fbb6 <initTask+0x1ca>
		printNullHandle("HTTP task");
 800fbb0:	4839      	ldr	r0, [pc, #228]	; (800fc98 <initTask+0x2ac>)
 800fbb2:	f7ff ff0b 	bl	800f9cc <printNullHandle>

	logMsg("Terminating init");
 800fbb6:	4839      	ldr	r0, [pc, #228]	; (800fc9c <initTask+0x2b0>)
 800fbb8:	f7ff fa3c 	bl	800f034 <logMsg>
	osThreadTerminate(initTaskHandle);
 800fbbc:	4b38      	ldr	r3, [pc, #224]	; (800fca0 <initTask+0x2b4>)
 800fbbe:	6818      	ldr	r0, [r3, #0]
}
 800fbc0:	b005      	add	sp, #20
 800fbc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	httpConfigTaskHandle = osThreadCreate(osThread(httpConfigThread), NULL);
	if (httpConfigTaskHandle == NULL)
		printNullHandle("HTTP task");

	logMsg("Terminating init");
	osThreadTerminate(initTaskHandle);
 800fbc6:	f7f6 be7e 	b.w	80068c6 <osThreadTerminate>
 800fbca:	bf00      	nop
 800fbcc:	200497f0 	.word	0x200497f0
 800fbd0:	0802f5cc 	.word	0x0802f5cc
 800fbd4:	0802fb9c 	.word	0x0802fb9c
 800fbd8:	0802f5e7 	.word	0x0802f5e7
 800fbdc:	0802f5f8 	.word	0x0802f5f8
 800fbe0:	0802f607 	.word	0x0802f607
 800fbe4:	200497e4 	.word	0x200497e4
 800fbe8:	0802f618 	.word	0x0802f618
 800fbec:	0802fb78 	.word	0x0802fb78
 800fbf0:	0802f632 	.word	0x0802f632
 800fbf4:	0802fb90 	.word	0x0802fb90
 800fbf8:	200497f4 	.word	0x200497f4
 800fbfc:	0802f63d 	.word	0x0802f63d
 800fc00:	0802fb84 	.word	0x0802fb84
 800fc04:	200497d4 	.word	0x200497d4
 800fc08:	0802f647 	.word	0x0802f647
 800fc0c:	0802f652 	.word	0x0802f652
 800fc10:	0802fbb0 	.word	0x0802fbb0
 800fc14:	200497e0 	.word	0x200497e0
 800fc18:	0802f66b 	.word	0x0802f66b
 800fc1c:	0802f678 	.word	0x0802f678
 800fc20:	0802fb74 	.word	0x0802fb74
 800fc24:	200497dc 	.word	0x200497dc
 800fc28:	0802f68d 	.word	0x0802f68d
 800fc2c:	0802fbe4 	.word	0x0802fbe4
 800fc30:	200497d8 	.word	0x200497d8
 800fc34:	0802f697 	.word	0x0802f697
 800fc38:	0802f5c8 	.word	0x0802f5c8
 800fc3c:	2004981c 	.word	0x2004981c
 800fc40:	0802f6a1 	.word	0x0802f6a1
 800fc44:	0802f6a9 	.word	0x0802f6a9
 800fc48:	20049814 	.word	0x20049814
 800fc4c:	200497ec 	.word	0x200497ec
 800fc50:	20049800 	.word	0x20049800
 800fc54:	0802f6c4 	.word	0x0802f6c4
 800fc58:	0a01a8c0 	.word	0x0a01a8c0
 800fc5c:	0802f6de 	.word	0x0802f6de
 800fc60:	200495d4 	.word	0x200495d4
 800fc64:	0802f6ed 	.word	0x0802f6ed
 800fc68:	0802f700 	.word	0x0802f700
 800fc6c:	0802f5b4 	.word	0x0802f5b4
 800fc70:	20049810 	.word	0x20049810
 800fc74:	0802f713 	.word	0x0802f713
 800fc78:	0802f5a0 	.word	0x0802f5a0
 800fc7c:	200495cc 	.word	0x200495cc
 800fc80:	0802f723 	.word	0x0802f723
 800fc84:	0802fbbc 	.word	0x0802fbbc
 800fc88:	200497f8 	.word	0x200497f8
 800fc8c:	0802f72d 	.word	0x0802f72d
 800fc90:	0802f58c 	.word	0x0802f58c
 800fc94:	200495d0 	.word	0x200495d0
 800fc98:	0802f739 	.word	0x0802f739
 800fc9c:	0802f743 	.word	0x0802f743
 800fca0:	200497fc 	.word	0x200497fc

0800fca4 <dhcpTask>:
}

/**
 * @brief DHCP initialization task
 */
void dhcpTask(void const * argument) {
 800fca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if (isEthernetCableConnected()) {
 800fca8:	f7ff f814 	bl	800ecd4 <isEthernetCableConnected>
 800fcac:	4604      	mov	r4, r0
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	d05d      	beq.n	800fd6e <dhcpTask+0xca>
		logMsg("Ethernet cable is connected");
		uint32_t ipAddress;
		dhcpState = DHCP_START;
 800fcb2:	4d41      	ldr	r5, [pc, #260]	; (800fdb8 <dhcpTask+0x114>)
/**
 * @brief DHCP initialization task
 */
void dhcpTask(void const * argument) {
	if (isEthernetCableConnected()) {
		logMsg("Ethernet cable is connected");
 800fcb4:	4841      	ldr	r0, [pc, #260]	; (800fdbc <dhcpTask+0x118>)
 800fcb6:	f7ff f9bd 	bl	800f034 <logMsg>
		uint32_t ipAddress;
		dhcpState = DHCP_START;
		do {
			switch (dhcpState) {
 800fcba:	462f      	mov	r7, r5
 */
void dhcpTask(void const * argument) {
	if (isEthernetCableConnected()) {
		logMsg("Ethernet cable is connected");
		uint32_t ipAddress;
		dhcpState = DHCP_START;
 800fcbc:	2301      	movs	r3, #1

						ip_addr_t ipaAddress;
						ip_addr_t netmask;
						ip_addr_t gateway;

						IP4_ADDR(&ipaAddress, IP_ADDR0, IP_ADDR1, IP_ADDR2,
 800fcbe:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800fde0 <dhcpTask+0x13c>
								IP_ADDR3);
						IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
								NETMASK_ADDR2, NETMASK_ADDR3);
						IP4_ADDR(&gateway, GW_ADDR0, GW_ADDR1, GW_ADDR2,
 800fcc2:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800fde4 <dhcpTask+0x140>
 */
void dhcpTask(void const * argument) {
	if (isEthernetCableConnected()) {
		logMsg("Ethernet cable is connected");
		uint32_t ipAddress;
		dhcpState = DHCP_START;
 800fcc6:	702b      	strb	r3, [r5, #0]
		do {
			switch (dhcpState) {
 800fcc8:	782e      	ldrb	r6, [r5, #0]
 800fcca:	2e01      	cmp	r6, #1
 800fccc:	d002      	beq.n	800fcd4 <dhcpTask+0x30>
 800fcce:	2e02      	cmp	r6, #2
 800fcd0:	d00d      	beq.n	800fcee <dhcpTask+0x4a>
 800fcd2:	e044      	b.n	800fd5e <dhcpTask+0xba>
			case DHCP_START : {
				ethernetInterfaceHandler.ip_addr.addr = 0;
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	483a      	ldr	r0, [pc, #232]	; (800fdc0 <dhcpTask+0x11c>)
 800fcd8:	6043      	str	r3, [r0, #4]
				ethernetInterfaceHandler.netmask.addr = 0;
 800fcda:	6083      	str	r3, [r0, #8]
				ethernetInterfaceHandler.gw.addr = 0;
 800fcdc:	60c3      	str	r3, [r0, #12]
				ipAddress = 0;
				dhcp_start(&ethernetInterfaceHandler);
 800fcde:	f7fa fb3f 	bl	800a360 <dhcp_start>
				dhcpState = DHCP_WAIT_ADDRESS;
 800fce2:	2302      	movs	r3, #2
				logMsg("Looking for DHCP server ...");
 800fce4:	4837      	ldr	r0, [pc, #220]	; (800fdc4 <dhcpTask+0x120>)
				ethernetInterfaceHandler.ip_addr.addr = 0;
				ethernetInterfaceHandler.netmask.addr = 0;
				ethernetInterfaceHandler.gw.addr = 0;
				ipAddress = 0;
				dhcp_start(&ethernetInterfaceHandler);
				dhcpState = DHCP_WAIT_ADDRESS;
 800fce6:	703b      	strb	r3, [r7, #0]
				logMsg("Looking for DHCP server ...");
 800fce8:	f7ff f9a4 	bl	800f034 <logMsg>
				break;
 800fcec:	e037      	b.n	800fd5e <dhcpTask+0xba>
			}

			case DHCP_WAIT_ADDRESS : {

				ipAddress = ethernetInterfaceHandler.ip_addr.addr;
 800fcee:	4c34      	ldr	r4, [pc, #208]	; (800fdc0 <dhcpTask+0x11c>)

				if (ipAddress != 0) {
 800fcf0:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800fcf4:	f1ba 0f00 	cmp.w	sl, #0
 800fcf8:	d009      	beq.n	800fd0e <dhcpTask+0x6a>
					dhcpState = DHCP_ADDRESS_ASSIGNED;
 800fcfa:	2303      	movs	r3, #3

					dhcp_stop(&ethernetInterfaceHandler);
 800fcfc:	4620      	mov	r0, r4
			case DHCP_WAIT_ADDRESS : {

				ipAddress = ethernetInterfaceHandler.ip_addr.addr;

				if (ipAddress != 0) {
					dhcpState = DHCP_ADDRESS_ASSIGNED;
 800fcfe:	703b      	strb	r3, [r7, #0]

					dhcp_stop(&ethernetInterfaceHandler);
 800fd00:	f7fa fb1c 	bl	800a33c <dhcp_stop>

					logMsg("Got IP by DHCP:");
 800fd04:	4830      	ldr	r0, [pc, #192]	; (800fdc8 <dhcpTask+0x124>)
 800fd06:	f7ff f995 	bl	800f034 <logMsg>
					printAddress(&ethernetInterfaceHandler, IP_ADDRESS);
 800fd0a:	2100      	movs	r1, #0
 800fd0c:	e01c      	b.n	800fd48 <dhcpTask+0xa4>
					printAddress(&ethernetInterfaceHandler, NETMASK_ADDRESS);
					printAddress(&ethernetInterfaceHandler, GATEWAY_ADDRESS);
				} else {
					if (ethernetInterfaceHandler.dhcp->tries > MAX_DHCP_TRIES) {
 800fd0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd10:	7b5b      	ldrb	r3, [r3, #13]
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d923      	bls.n	800fd5e <dhcpTask+0xba>
						dhcpState = DHCP_TIMEOUT;
 800fd16:	2304      	movs	r3, #4

						dhcp_stop(&ethernetInterfaceHandler);
 800fd18:	4620      	mov	r0, r4
					printAddress(&ethernetInterfaceHandler, IP_ADDRESS);
					printAddress(&ethernetInterfaceHandler, NETMASK_ADDRESS);
					printAddress(&ethernetInterfaceHandler, GATEWAY_ADDRESS);
				} else {
					if (ethernetInterfaceHandler.dhcp->tries > MAX_DHCP_TRIES) {
						dhcpState = DHCP_TIMEOUT;
 800fd1a:	703b      	strb	r3, [r7, #0]

						dhcp_stop(&ethernetInterfaceHandler);
 800fd1c:	f7fa fb0e 	bl	800a33c <dhcp_stop>
						ip_addr_t netmask;
						ip_addr_t gateway;

						IP4_ADDR(&ipaAddress, IP_ADDR0, IP_ADDR1, IP_ADDR2,
								IP_ADDR3);
						IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
 800fd20:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
								NETMASK_ADDR2, NETMASK_ADDR3);
						IP4_ADDR(&gateway, GW_ADDR0, GW_ADDR1, GW_ADDR2,
								GW_ADDR3);
						netif_set_addr(&ethernetInterfaceHandler, &ipaAddress,
 800fd24:	a901      	add	r1, sp, #4
 800fd26:	aa02      	add	r2, sp, #8
 800fd28:	4620      	mov	r0, r4
						ip_addr_t netmask;
						ip_addr_t gateway;

						IP4_ADDR(&ipaAddress, IP_ADDR0, IP_ADDR1, IP_ADDR2,
								IP_ADDR3);
						IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
 800fd2a:	9302      	str	r3, [sp, #8]
								NETMASK_ADDR2, NETMASK_ADDR3);
						IP4_ADDR(&gateway, GW_ADDR0, GW_ADDR1, GW_ADDR2,
 800fd2c:	ab04      	add	r3, sp, #16

						ip_addr_t ipaAddress;
						ip_addr_t netmask;
						ip_addr_t gateway;

						IP4_ADDR(&ipaAddress, IP_ADDR0, IP_ADDR1, IP_ADDR2,
 800fd2e:	f8cd 8004 	str.w	r8, [sp, #4]
								IP_ADDR3);
						IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
								NETMASK_ADDR2, NETMASK_ADDR3);
						IP4_ADDR(&gateway, GW_ADDR0, GW_ADDR1, GW_ADDR2,
 800fd32:	f843 9d04 	str.w	r9, [r3, #-4]!
								GW_ADDR3);
						netif_set_addr(&ethernetInterfaceHandler, &ipaAddress,
 800fd36:	f7fb f931 	bl	800af9c <netif_set_addr>
								&netmask, &gateway);

						logErr("DHCP timeout!");
 800fd3a:	4824      	ldr	r0, [pc, #144]	; (800fdcc <dhcpTask+0x128>)
 800fd3c:	f7ff f986 	bl	800f04c <logErr>
						logMsg("Static IP");
 800fd40:	4823      	ldr	r0, [pc, #140]	; (800fdd0 <dhcpTask+0x12c>)
 800fd42:	f7ff f977 	bl	800f034 <logMsg>
						printAddress(&ethernetInterfaceHandler, IP_ADDRESS);
 800fd46:	4651      	mov	r1, sl
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f7fe ff8d 	bl	800ec68 <printAddress>
						printAddress(&ethernetInterfaceHandler,
 800fd4e:	2101      	movs	r1, #1
 800fd50:	4620      	mov	r0, r4
 800fd52:	f7fe ff89 	bl	800ec68 <printAddress>
						NETMASK_ADDRESS);
						printAddress(&ethernetInterfaceHandler,
 800fd56:	4631      	mov	r1, r6
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f7fe ff85 	bl	800ec68 <printAddress>
				break;

			default:
				break;
			}
			osDelay(250);
 800fd5e:	20fa      	movs	r0, #250	; 0xfa
 800fd60:	f7f6 fdb6 	bl	80068d0 <osDelay>
		} while (dhcpState != DHCP_TIMEOUT && dhcpState != DHCP_ADDRESS_ASSIGNED );
 800fd64:	782b      	ldrb	r3, [r5, #0]
 800fd66:	3b03      	subs	r3, #3
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d8ad      	bhi.n	800fcc8 <dhcpTask+0x24>
 800fd6c:	e014      	b.n	800fd98 <dhcpTask+0xf4>
	} else {
		dhcp_stop(&ethernetInterfaceHandler);
 800fd6e:	4814      	ldr	r0, [pc, #80]	; (800fdc0 <dhcpTask+0x11c>)
 800fd70:	f7fa fae4 	bl	800a33c <dhcp_stop>
		logErr("Ethernet cable is not connected");
 800fd74:	4817      	ldr	r0, [pc, #92]	; (800fdd4 <dhcpTask+0x130>)
 800fd76:	f7ff f969 	bl	800f04c <logErr>
		logMsg("Static IP");
 800fd7a:	4815      	ldr	r0, [pc, #84]	; (800fdd0 <dhcpTask+0x12c>)
 800fd7c:	f7ff f95a 	bl	800f034 <logMsg>
		printAddress(&ethernetInterfaceHandler, IP_ADDRESS);
 800fd80:	4621      	mov	r1, r4
 800fd82:	480f      	ldr	r0, [pc, #60]	; (800fdc0 <dhcpTask+0x11c>)
 800fd84:	f7fe ff70 	bl	800ec68 <printAddress>
		printAddress(&ethernetInterfaceHandler, NETMASK_ADDRESS);
 800fd88:	2101      	movs	r1, #1
 800fd8a:	480d      	ldr	r0, [pc, #52]	; (800fdc0 <dhcpTask+0x11c>)
 800fd8c:	f7fe ff6c 	bl	800ec68 <printAddress>
		printAddress(&ethernetInterfaceHandler, GATEWAY_ADDRESS);
 800fd90:	2102      	movs	r1, #2
 800fd92:	480b      	ldr	r0, [pc, #44]	; (800fdc0 <dhcpTask+0x11c>)
 800fd94:	f7fe ff68 	bl	800ec68 <printAddress>
	}

	// sending DHCP finished signal to initialization task
	osStatus status = osSignalSet(initTaskHandle, DHCP_FINISHED_SIGNAL);
 800fd98:	4b0f      	ldr	r3, [pc, #60]	; (800fdd8 <dhcpTask+0x134>)
 800fd9a:	2101      	movs	r1, #1
 800fd9c:	6818      	ldr	r0, [r3, #0]
 800fd9e:	f7f6 fd9f 	bl	80068e0 <osSignalSet>
	if (status != osOK) {
 800fda2:	4601      	mov	r1, r0
 800fda4:	b110      	cbz	r0, 800fdac <dhcpTask+0x108>
		logErrVal("ERROR: DHCP finished signal", status);
 800fda6:	480d      	ldr	r0, [pc, #52]	; (800fddc <dhcpTask+0x138>)
 800fda8:	f7ff f974 	bl	800f094 <logErrVal>
	}

	// waiting forever for termination
	while (1)
		osDelay(osWaitForever);
 800fdac:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb0:	f7f6 fd8e 	bl	80068d0 <osDelay>
 800fdb4:	e7fa      	b.n	800fdac <dhcpTask+0x108>
 800fdb6:	bf00      	nop
 800fdb8:	20049314 	.word	0x20049314
 800fdbc:	0802f754 	.word	0x0802f754
 800fdc0:	20049594 	.word	0x20049594
 800fdc4:	0802f770 	.word	0x0802f770
 800fdc8:	0802f78c 	.word	0x0802f78c
 800fdcc:	0802f79c 	.word	0x0802f79c
 800fdd0:	0802f7aa 	.word	0x0802f7aa
 800fdd4:	0802f7b4 	.word	0x0802f7b4
 800fdd8:	200497fc 	.word	0x200497fc
 800fddc:	0802f7d4 	.word	0x0802f7d4
 800fde0:	0b01a8c0 	.word	0x0b01a8c0
 800fde4:	0101a8c0 	.word	0x0101a8c0

0800fde8 <samplingTask>:
}

/**
 * @brief Asynchronous task which gets audio mails from queue and fills the mainSoundBuffer
 */
void samplingTask(void const * argument) {
 800fde8:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (1) {
		// waiting for new mail
		osEvent event = osMailGet(dmaAudioMail_q_id, osWaitForever);
 800fdea:	4c18      	ldr	r4, [pc, #96]	; (800fe4c <samplingTask+0x64>)
}

/**
 * @brief Asynchronous task which gets audio mails from queue and fills the mainSoundBuffer
 */
void samplingTask(void const * argument) {
 800fdec:	b085      	sub	sp, #20
		osEvent event = osMailGet(dmaAudioMail_q_id, osWaitForever);
		if (event.status == osEventMail) {
			SoundMailStr *receivedSound = (SoundMailStr *) event.value.p;

			// waiting for access to mailSoundBuffer
			osStatus status = osMutexWait(mainSoundBufferMutex_id,
 800fdee:	4d18      	ldr	r5, [pc, #96]	; (800fe50 <samplingTask+0x68>)
 800fdf0:	4627      	mov	r7, r4
 * @brief Asynchronous task which gets audio mails from queue and fills the mainSoundBuffer
 */
void samplingTask(void const * argument) {
	while (1) {
		// waiting for new mail
		osEvent event = osMailGet(dmaAudioMail_q_id, osWaitForever);
 800fdf2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdf6:	6821      	ldr	r1, [r4, #0]
 800fdf8:	a801      	add	r0, sp, #4
 800fdfa:	f7f6 ff2d 	bl	8006c58 <osMailGet>
		if (event.status == osEventMail) {
 800fdfe:	9b01      	ldr	r3, [sp, #4]
 800fe00:	2b20      	cmp	r3, #32
 800fe02:	d1f6      	bne.n	800fdf2 <samplingTask+0xa>
			SoundMailStr *receivedSound = (SoundMailStr *) event.value.p;

			// waiting for access to mailSoundBuffer
			osStatus status = osMutexWait(mainSoundBufferMutex_id,
 800fe04:	f04f 31ff 	mov.w	r1, #4294967295
 800fe08:	6828      	ldr	r0, [r5, #0]
void samplingTask(void const * argument) {
	while (1) {
		// waiting for new mail
		osEvent event = osMailGet(dmaAudioMail_q_id, osWaitForever);
		if (event.status == osEventMail) {
			SoundMailStr *receivedSound = (SoundMailStr *) event.value.p;
 800fe0a:	9e02      	ldr	r6, [sp, #8]

			// waiting for access to mailSoundBuffer
			osStatus status = osMutexWait(mainSoundBufferMutex_id,
 800fe0c:	f7f6 fdb6 	bl	800697c <osMutexWait>
			osWaitForever);
			if (status == osOK) {
 800fe10:	b968      	cbnz	r0, 800fe2e <samplingTask+0x46>
				// filling cyclic buffer
				audioRecordingUpdateSoundBuffer(mainSoundBuffer, receivedSound);
 800fe12:	4b10      	ldr	r3, [pc, #64]	; (800fe54 <samplingTask+0x6c>)
 800fe14:	4631      	mov	r1, r6
 800fe16:	6818      	ldr	r0, [r3, #0]
 800fe18:	f7fe ff05 	bl	800ec26 <audioRecordingUpdateSoundBuffer>

				// releasing mutex
				status = osMutexRelease(mainSoundBufferMutex_id);
 800fe1c:	6828      	ldr	r0, [r5, #0]
 800fe1e:	f7f6 fe35 	bl	8006a8c <osMutexRelease>
				if (status != osOK) {
 800fe22:	4601      	mov	r1, r0
 800fe24:	b130      	cbz	r0, 800fe34 <samplingTask+0x4c>
					logErrVal("Sampling mutex release", status);
 800fe26:	480c      	ldr	r0, [pc, #48]	; (800fe58 <samplingTask+0x70>)
 800fe28:	f7ff f934 	bl	800f094 <logErrVal>
 800fe2c:	e002      	b.n	800fe34 <samplingTask+0x4c>
				}
			} else {
				logErr("Sampling mutex");
 800fe2e:	480b      	ldr	r0, [pc, #44]	; (800fe5c <samplingTask+0x74>)
 800fe30:	f7ff f90c 	bl	800f04c <logErr>
			}

			// free audio mail memory
			status = osMailFree(dmaAudioMail_q_id, receivedSound);
 800fe34:	4631      	mov	r1, r6
 800fe36:	6838      	ldr	r0, [r7, #0]
 800fe38:	f7f6 ff48 	bl	8006ccc <osMailFree>
			if (status != osOK) {
 800fe3c:	4601      	mov	r1, r0
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d0d7      	beq.n	800fdf2 <samplingTask+0xa>
				logErrVal("Sound mail free", status);
 800fe42:	4807      	ldr	r0, [pc, #28]	; (800fe60 <samplingTask+0x78>)
 800fe44:	f7ff f926 	bl	800f094 <logErrVal>
			}
		}
	}
 800fe48:	e7d3      	b.n	800fdf2 <samplingTask+0xa>
 800fe4a:	bf00      	nop
 800fe4c:	200497e0 	.word	0x200497e0
 800fe50:	200497d8 	.word	0x200497d8
 800fe54:	200497ec 	.word	0x200497ec
 800fe58:	0802f7f0 	.word	0x0802f7f0
 800fe5c:	0802f807 	.word	0x0802f807
 800fe60:	0802f816 	.word	0x0802f816

0800fe64 <soundProcessingTask>:
}

/**
 * @brief FFT processing task
 */
void soundProcessingTask(void const * argument) {
 800fe64:	b5f0      	push	{r4, r5, r6, r7, lr}
	arm_cfft_instance_f32* cfftInstance;
	osStatus status;
	osEvent event;

	// allocating memory for temporary spectrum buffer
	temporarySpectrumBufferStr = osPoolCAlloc(spectrumBufferPool_id);
 800fe66:	4b32      	ldr	r3, [pc, #200]	; (800ff30 <soundProcessingTask+0xcc>)
}

/**
 * @brief FFT processing task
 */
void soundProcessingTask(void const * argument) {
 800fe68:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
	arm_cfft_instance_f32* cfftInstance;
	osStatus status;
	osEvent event;

	// allocating memory for temporary spectrum buffer
	temporarySpectrumBufferStr = osPoolCAlloc(spectrumBufferPool_id);
 800fe6c:	6818      	ldr	r0, [r3, #0]
}

/**
 * @brief FFT processing task
 */
void soundProcessingTask(void const * argument) {
 800fe6e:	b085      	sub	sp, #20
	arm_cfft_instance_f32* cfftInstance;
	osStatus status;
	osEvent event;

	// allocating memory for temporary spectrum buffer
	temporarySpectrumBufferStr = osPoolCAlloc(spectrumBufferPool_id);
 800fe70:	f7f6 fe79 	bl	8006b66 <osPoolCAlloc>
	cfftInstance = osPoolCAlloc(cfftPool_id);
 800fe74:	4b2f      	ldr	r3, [pc, #188]	; (800ff34 <soundProcessingTask+0xd0>)
	arm_cfft_instance_f32* cfftInstance;
	osStatus status;
	osEvent event;

	// allocating memory for temporary spectrum buffer
	temporarySpectrumBufferStr = osPoolCAlloc(spectrumBufferPool_id);
 800fe76:	4604      	mov	r4, r0
	cfftInstance = osPoolCAlloc(cfftPool_id);
 800fe78:	6818      	ldr	r0, [r3, #0]
 800fe7a:	f7f6 fe74 	bl	8006b66 <osPoolCAlloc>
 800fe7e:	4605      	mov	r5, r0

	while (1) {
		// waiting for start signal
		event = osSignalWait(START_SOUND_PROCESSING_SIGNAL, osWaitForever);
 800fe80:	2101      	movs	r1, #1
 800fe82:	f04f 32ff 	mov.w	r2, #4294967295
 800fe86:	a801      	add	r0, sp, #4
 800fe88:	f7f6 fd50 	bl	800692c <osSignalWait>
 800fe8c:	9901      	ldr	r1, [sp, #4]

		if (event.status == osEventSignal) {
 800fe8e:	2908      	cmp	r1, #8
 800fe90:	d149      	bne.n	800ff26 <soundProcessingTask+0xc2>

			// waiting for access to main sound buffer
			status = osMutexWait(mainSoundBufferMutex_id, osWaitForever);
 800fe92:	4e29      	ldr	r6, [pc, #164]	; (800ff38 <soundProcessingTask+0xd4>)
 800fe94:	f04f 31ff 	mov.w	r1, #4294967295
 800fe98:	6830      	ldr	r0, [r6, #0]
 800fe9a:	f7f6 fd6f 	bl	800697c <osMutexWait>
			if (status == osOK) {
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d13d      	bne.n	800ff1e <soundProcessingTask+0xba>

				// getting FFT instance
				soundProcessingGetCfftInstance(cfftInstance,
						mainSoundBuffer->size / 2);
 800fea2:	4f26      	ldr	r7, [pc, #152]	; (800ff3c <soundProcessingTask+0xd8>)
			// waiting for access to main sound buffer
			status = osMutexWait(mainSoundBufferMutex_id, osWaitForever);
			if (status == osOK) {

				// getting FFT instance
				soundProcessingGetCfftInstance(cfftInstance,
 800fea4:	4628      	mov	r0, r5
						mainSoundBuffer->size / 2);
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
			// waiting for access to main sound buffer
			status = osMutexWait(mainSoundBufferMutex_id, osWaitForever);
			if (status == osOK) {

				// getting FFT instance
				soundProcessingGetCfftInstance(cfftInstance,
 800feac:	6819      	ldr	r1, [r3, #0]
 800feae:	0849      	lsrs	r1, r1, #1
 800feb0:	f7ff fd1a 	bl	800f8e8 <soundProcessingGetCfftInstance>
						mainSoundBuffer->size / 2);

				if (cfftInstance != NULL) {
 800feb4:	b345      	cbz	r5, 800ff08 <soundProcessingTask+0xa4>
					float32_t temporaryAudioBuffer[MAIN_SOUND_BUFFER_MAX_BUFFER_SIZE];

					// spectrum buffer initialization and sound buffer copying
					soundProcessingAmplitudeInit(temporarySpectrumBufferStr,
 800feb6:	6839      	ldr	r1, [r7, #0]
 800feb8:	aa04      	add	r2, sp, #16
 800feba:	4620      	mov	r0, r4
 800febc:	f7ff fce4 	bl	800f888 <soundProcessingAmplitudeInit>
							mainSoundBuffer, temporaryAudioBuffer);

					// releasing mainSoundBufferMutex
					status = osMutexRelease(mainSoundBufferMutex_id);
 800fec0:	6830      	ldr	r0, [r6, #0]
 800fec2:	f7f6 fde3 	bl	8006a8c <osMutexRelease>
					if (status != osOK) {
 800fec6:	4601      	mov	r1, r0
 800fec8:	b110      	cbz	r0, 800fed0 <soundProcessingTask+0x6c>
						logErrVal("Sampling mutex (sound processing) release",
 800feca:	481d      	ldr	r0, [pc, #116]	; (800ff40 <soundProcessingTask+0xdc>)
 800fecc:	f7ff f8e2 	bl	800f094 <logErrVal>
					// calculating spectrum
					soundProcessingGetAmplitudeInstance(cfftInstance,
							temporarySpectrumBufferStr, temporaryAudioBuffer);

					// waiting for access to main spectrum buffer
					status = osMutexWait(mainSpectrumBufferMutex_id,
 800fed0:	4e1c      	ldr	r6, [pc, #112]	; (800ff44 <soundProcessingTask+0xe0>)
						logErrVal("Sampling mutex (sound processing) release",
								status);
					}

					// calculating spectrum
					soundProcessingGetAmplitudeInstance(cfftInstance,
 800fed2:	aa04      	add	r2, sp, #16
 800fed4:	4621      	mov	r1, r4
 800fed6:	4628      	mov	r0, r5
 800fed8:	f7ff fcc6 	bl	800f868 <soundProcessingGetAmplitudeInstance>
							temporarySpectrumBufferStr, temporaryAudioBuffer);

					// waiting for access to main spectrum buffer
					status = osMutexWait(mainSpectrumBufferMutex_id,
 800fedc:	f04f 31ff 	mov.w	r1, #4294967295
 800fee0:	6830      	ldr	r0, [r6, #0]
 800fee2:	f7f6 fd4b 	bl	800697c <osMutexWait>
					osWaitForever);
					if (status == osOK) {
 800fee6:	4601      	mov	r1, r0
 800fee8:	b960      	cbnz	r0, 800ff04 <soundProcessingTask+0xa0>

						// copying spectrum from temporary buffer to main buffer
						soundProcessingCopyAmplitudeInstance(
 800feea:	4b17      	ldr	r3, [pc, #92]	; (800ff48 <soundProcessingTask+0xe4>)
 800feec:	4620      	mov	r0, r4
 800feee:	6819      	ldr	r1, [r3, #0]
 800fef0:	f7ff fd42 	bl	800f978 <soundProcessingCopyAmplitudeInstance>
								temporarySpectrumBufferStr, mainSpectrumBuffer);

						// releasing main spectrum buffer mutex
						status = osMutexRelease(mainSpectrumBufferMutex_id);
 800fef4:	6830      	ldr	r0, [r6, #0]
 800fef6:	f7f6 fdc9 	bl	8006a8c <osMutexRelease>
						if (status != osOK) {
 800fefa:	4601      	mov	r1, r0
 800fefc:	2800      	cmp	r0, #0
 800fefe:	d0bf      	beq.n	800fe80 <soundProcessingTask+0x1c>
							logErrVal("Shared amp mutex released", status);
 800ff00:	4812      	ldr	r0, [pc, #72]	; (800ff4c <soundProcessingTask+0xe8>)
 800ff02:	e011      	b.n	800ff28 <soundProcessingTask+0xc4>
						}
					} else {
						logErrVal("Shared amp mutex wait", status);
 800ff04:	4812      	ldr	r0, [pc, #72]	; (800ff50 <soundProcessingTask+0xec>)
 800ff06:	e00f      	b.n	800ff28 <soundProcessingTask+0xc4>
					}

				} else {
					logErr("Cfft NULL");
 800ff08:	4812      	ldr	r0, [pc, #72]	; (800ff54 <soundProcessingTask+0xf0>)
 800ff0a:	f7ff f89f 	bl	800f04c <logErr>

					// releasing main sound buffer mutex
					status = osMutexRelease(mainSoundBufferMutex_id);
 800ff0e:	6830      	ldr	r0, [r6, #0]
 800ff10:	f7f6 fdbc 	bl	8006a8c <osMutexRelease>
					if (status != osOK) {
 800ff14:	4601      	mov	r1, r0
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d0b2      	beq.n	800fe80 <soundProcessingTask+0x1c>
						logErrVal("Sampling mutex (sound processing) release",
 800ff1a:	4809      	ldr	r0, [pc, #36]	; (800ff40 <soundProcessingTask+0xdc>)
 800ff1c:	e004      	b.n	800ff28 <soundProcessingTask+0xc4>
								status);
					}
				}
			} else {
				logErr("Sampling mutex (sound processing)");
 800ff1e:	480e      	ldr	r0, [pc, #56]	; (800ff58 <soundProcessingTask+0xf4>)
 800ff20:	f7ff f894 	bl	800f04c <logErr>
 800ff24:	e7ac      	b.n	800fe80 <soundProcessingTask+0x1c>
			}
		} else
			logErrVal("ST sp wait", event.status);
 800ff26:	480d      	ldr	r0, [pc, #52]	; (800ff5c <soundProcessingTask+0xf8>)
 800ff28:	f7ff f8b4 	bl	800f094 <logErrVal>
 800ff2c:	e7a8      	b.n	800fe80 <soundProcessingTask+0x1c>
 800ff2e:	bf00      	nop
 800ff30:	200497e4 	.word	0x200497e4
 800ff34:	200497f4 	.word	0x200497f4
 800ff38:	200497d8 	.word	0x200497d8
 800ff3c:	200497ec 	.word	0x200497ec
 800ff40:	0802f826 	.word	0x0802f826
 800ff44:	200497dc 	.word	0x200497dc
 800ff48:	20049814 	.word	0x20049814
 800ff4c:	0802f850 	.word	0x0802f850
 800ff50:	0802f86a 	.word	0x0802f86a
 800ff54:	0802f880 	.word	0x0802f880
 800ff58:	0802f88a 	.word	0x0802f88a
 800ff5c:	0802f8ac 	.word	0x0802f8ac

0800ff60 <streamingTask>:
	struct netconn *udpStreamingSocket = NULL;
	err_t status;
	err_t netErr;

	// creating UDP socket
	udpStreamingSocket = netconn_new(NETCONN_UDP);
 800ff60:	2200      	movs	r2, #0
 800ff62:	2020      	movs	r0, #32
#endif

/**
 * @brief Spectrum UDP streaming
 */
void streamingTask(void const * argument) {
 800ff64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct netconn *udpStreamingSocket = NULL;
	err_t status;
	err_t netErr;

	// creating UDP socket
	udpStreamingSocket = netconn_new(NETCONN_UDP);
 800ff68:	4611      	mov	r1, r2
 800ff6a:	f7f8 fc69 	bl	8008840 <netconn_new_with_proto_and_callback>
	if (udpStreamingSocket == NULL)
 800ff6e:	4604      	mov	r4, r0
 800ff70:	b918      	cbnz	r0, 800ff7a <streamingTask+0x1a>
		logErr("Null UDP client");
 800ff72:	482c      	ldr	r0, [pc, #176]	; (8010024 <streamingTask+0xc4>)
 800ff74:	f7ff f86a 	bl	800f04c <logErr>
 800ff78:	e001      	b.n	800ff7e <streamingTask+0x1e>
	else
		udpStreamingSocket->recv_timeout = 1;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	6183      	str	r3, [r0, #24]

	// binding socket to ethernet interface on UDP_STREAMING_PORT
	status = netconn_bind(udpStreamingSocket, &ethernetInterfaceHandler.ip_addr,
 800ff7e:	492a      	ldr	r1, [pc, #168]	; (8010028 <streamingTask+0xc8>)
 800ff80:	f24d 02b2 	movw	r2, #53426	; 0xd0b2
 800ff84:	4620      	mov	r0, r4
 800ff86:	f7f8 fca7 	bl	80088d8 <netconn_bind>
	UDP_STREAMING_PORT);
	if (status != ERR_OK)
 800ff8a:	4601      	mov	r1, r0
 800ff8c:	b110      	cbz	r0, 800ff94 <streamingTask+0x34>
		logErrVal("Udp bind", status);
 800ff8e:	4827      	ldr	r0, [pc, #156]	; (801002c <streamingTask+0xcc>)
 800ff90:	f7ff f880 	bl	800f094 <logErrVal>

		// delay
		//osDelay(10);

		// waiting for acces to ethernet interface
		osStatus status = osMutexWait(ethernetInterfaceMutex_id, osWaitForever);
 800ff94:	4e26      	ldr	r6, [pc, #152]	; (8010030 <streamingTask+0xd0>)
 800ff96:	4637      	mov	r7, r6
	if (status != ERR_OK)
		logErrVal("Udp bind", status);

	while (1) {
		// setting signal to start sound processing
		status = osSignalSet(soundProcessingTaskHandle,
 800ff98:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8010050 <streamingTask+0xf0>
		START_SOUND_PROCESSING_SIGNAL);
		osDelay(configStr.amplitudeSamplingDelay);
 800ff9c:	4d25      	ldr	r5, [pc, #148]	; (8010034 <streamingTask+0xd4>)
	if (status != ERR_OK)
		logErrVal("Udp bind", status);

	while (1) {
		// setting signal to start sound processing
		status = osSignalSet(soundProcessingTaskHandle,
 800ff9e:	2101      	movs	r1, #1
 800ffa0:	f8d8 0000 	ldr.w	r0, [r8]
 800ffa4:	f7f6 fc9c 	bl	80068e0 <osSignalSet>
		START_SOUND_PROCESSING_SIGNAL);
		osDelay(configStr.amplitudeSamplingDelay);
 800ffa8:	7828      	ldrb	r0, [r5, #0]
 800ffaa:	f7f6 fc91 	bl	80068d0 <osDelay>

		// delay
		//osDelay(10);

		// waiting for acces to ethernet interface
		osStatus status = osMutexWait(ethernetInterfaceMutex_id, osWaitForever);
 800ffae:	f04f 31ff 	mov.w	r1, #4294967295
 800ffb2:	6830      	ldr	r0, [r6, #0]
 800ffb4:	f7f6 fce2 	bl	800697c <osMutexWait>
		if (status == osOK) {
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	d1ef      	bne.n	800ff9c <streamingTask+0x3c>

			// waiting for access to main spectrum buffer
			status = osMutexWait(mainSpectrumBufferMutex_id,
 800ffbc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8010054 <streamingTask+0xf4>
 800ffc0:	f04f 31ff 	mov.w	r1, #4294967295
 800ffc4:	f8d9 0000 	ldr.w	r0, [r9]
 800ffc8:	f7f6 fcd8 	bl	800697c <osMutexWait>
			osWaitForever);
			if (status == osOK) {
 800ffcc:	4601      	mov	r1, r0
 800ffce:	b9e0      	cbnz	r0, 801000a <streamingTask+0xaa>

				// "connecting" to UDP
				netErr = netconn_connect(udpStreamingSocket,
 800ffd0:	f105 0108 	add.w	r1, r5, #8
 800ffd4:	89aa      	ldrh	r2, [r5, #12]
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f7f8 fc92 	bl	8008900 <netconn_connect>
						&configStr.clientIp, configStr.clientPort);
				if (netErr)
 800ffdc:	4601      	mov	r1, r0
 800ffde:	b110      	cbz	r0, 800ffe6 <streamingTask+0x86>
					logErrVal("UDP connect", netErr);
 800ffe0:	4815      	ldr	r0, [pc, #84]	; (8010038 <streamingTask+0xd8>)
 800ffe2:	f7ff f857 	bl	800f094 <logErrVal>

				// sending main spectrum buffer by UDP
				netErr = sendSpectrum(mainSpectrumBuffer, udpStreamingSocket);
 800ffe6:	4b15      	ldr	r3, [pc, #84]	; (801003c <streamingTask+0xdc>)
 800ffe8:	4621      	mov	r1, r4
 800ffea:	6818      	ldr	r0, [r3, #0]
 800ffec:	f7fe fea0 	bl	800ed30 <sendSpectrum>
				if (netErr)
 800fff0:	4601      	mov	r1, r0
 800fff2:	b110      	cbz	r0, 800fffa <streamingTask+0x9a>
					logErrVal("UDP write", netErr);
 800fff4:	4812      	ldr	r0, [pc, #72]	; (8010040 <streamingTask+0xe0>)
 800fff6:	f7ff f84d 	bl	800f094 <logErrVal>

				// releasing main spectrum buffer mutex
				status = osMutexRelease(mainSpectrumBufferMutex_id);
 800fffa:	f8d9 0000 	ldr.w	r0, [r9]
 800fffe:	f7f6 fd45 	bl	8006a8c <osMutexRelease>
				if (status != osOK)
 8010002:	4601      	mov	r1, r0
 8010004:	b120      	cbz	r0, 8010010 <streamingTask+0xb0>
					logErrVal("UDP main spect mut release", status);
 8010006:	480f      	ldr	r0, [pc, #60]	; (8010044 <streamingTask+0xe4>)
 8010008:	e000      	b.n	801000c <streamingTask+0xac>
			} else {
				logErrVal("UDP eth int mut wait", status);
 801000a:	480f      	ldr	r0, [pc, #60]	; (8010048 <streamingTask+0xe8>)
 801000c:	f7ff f842 	bl	800f094 <logErrVal>
			}

			// releasing ethernet interface mutex
			status = osMutexRelease(ethernetInterfaceMutex_id);
 8010010:	6838      	ldr	r0, [r7, #0]
 8010012:	f7f6 fd3b 	bl	8006a8c <osMutexRelease>
			if (status != osOK)
 8010016:	4601      	mov	r1, r0
 8010018:	2800      	cmp	r0, #0
 801001a:	d0bf      	beq.n	800ff9c <streamingTask+0x3c>
				logErrVal("UDP eth mut release", status);
 801001c:	480b      	ldr	r0, [pc, #44]	; (801004c <streamingTask+0xec>)
 801001e:	f7ff f839 	bl	800f094 <logErrVal>
 8010022:	e7b9      	b.n	800ff98 <streamingTask+0x38>
 8010024:	0802f8b7 	.word	0x0802f8b7
 8010028:	20049598 	.word	0x20049598
 801002c:	0802f8c7 	.word	0x0802f8c7
 8010030:	2004981c 	.word	0x2004981c
 8010034:	20049800 	.word	0x20049800
 8010038:	0802f8d0 	.word	0x0802f8d0
 801003c:	20049814 	.word	0x20049814
 8010040:	0802f8dc 	.word	0x0802f8dc
 8010044:	0802f8e6 	.word	0x0802f8e6
 8010048:	0802f901 	.word	0x0802f901
 801004c:	0802f916 	.word	0x0802f916
 8010050:	20049810 	.word	0x20049810
 8010054:	200497dc 	.word	0x200497dc

08010058 <httpConfigTask>:
 */
void httpConfigTask(void const* argument) {
	struct netconn *httpServer = NULL;

	// creating TCP server
	httpServer = netconn_new(NETCONN_TCP);
 8010058:	2200      	movs	r2, #0
 801005a:	2010      	movs	r0, #16
}

/**
 * @brief Device configuration (by network using HTTP)
 */
void httpConfigTask(void const* argument) {
 801005c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct netconn *httpServer = NULL;

	// creating TCP server
	httpServer = netconn_new(NETCONN_TCP);
 801005e:	4611      	mov	r1, r2
}

/**
 * @brief Device configuration (by network using HTTP)
 */
void httpConfigTask(void const* argument) {
 8010060:	b093      	sub	sp, #76	; 0x4c
	struct netconn *httpServer = NULL;

	// creating TCP server
	httpServer = netconn_new(NETCONN_TCP);
 8010062:	f7f8 fbed 	bl	8008840 <netconn_new_with_proto_and_callback>
	if (httpServer == NULL)
 8010066:	4604      	mov	r4, r0
 8010068:	b910      	cbnz	r0, 8010070 <httpConfigTask+0x18>
		logErr("Null TCP");
 801006a:	487d      	ldr	r0, [pc, #500]	; (8010260 <httpConfigTask+0x208>)
 801006c:	f7fe ffee 	bl	800f04c <logErr>
	httpServer->recv_timeout = HTTP_HOST_ACCEPT_TIMEOUT;
 8010070:	2301      	movs	r3, #1

	// binding server to ethernet interface on port 80
	err_t netStatus = netconn_bind(httpServer,
 8010072:	497c      	ldr	r1, [pc, #496]	; (8010264 <httpConfigTask+0x20c>)
 8010074:	f641 7290 	movw	r2, #8080	; 0x1f90
 8010078:	4620      	mov	r0, r4

	// creating TCP server
	httpServer = netconn_new(NETCONN_TCP);
	if (httpServer == NULL)
		logErr("Null TCP");
	httpServer->recv_timeout = HTTP_HOST_ACCEPT_TIMEOUT;
 801007a:	61a3      	str	r3, [r4, #24]

	// binding server to ethernet interface on port 80
	err_t netStatus = netconn_bind(httpServer,
 801007c:	f7f8 fc2c 	bl	80088d8 <netconn_bind>
			&ethernetInterfaceHandler.ip_addr, 8080);
	if (netStatus != ERR_OK)
 8010080:	4601      	mov	r1, r0
 8010082:	b110      	cbz	r0, 801008a <httpConfigTask+0x32>
		logErrVal("TCP bind", netStatus);
 8010084:	4878      	ldr	r0, [pc, #480]	; (8010268 <httpConfigTask+0x210>)
 8010086:	f7ff f805 	bl	800f094 <logErrVal>

	// starting listening
	netStatus = netconn_listen(httpServer);
 801008a:	21ff      	movs	r1, #255	; 0xff
 801008c:	4620      	mov	r0, r4
 801008e:	f7f8 fc4b 	bl	8008928 <netconn_listen_with_backlog>
	if (netStatus != ERR_OK)
 8010092:	4601      	mov	r1, r0
 8010094:	b110      	cbz	r0, 801009c <httpConfigTask+0x44>
		logErrVal("TCP listen", netStatus);
 8010096:	4875      	ldr	r0, [pc, #468]	; (801026c <httpConfigTask+0x214>)
 8010098:	f7fe fffc 	bl	800f094 <logErrVal>
		// delay
		osDelay(HTTP_CONFIG_TASK_DELAY_TIME);
		//logMsg("HTTP task");

		// waiting for acces to ethernet interface
		osStatus status = osMutexWait(ethernetInterfaceMutex_id, osWaitForever);
 801009c:	4e74      	ldr	r6, [pc, #464]	; (8010270 <httpConfigTask+0x218>)
 801009e:	4637      	mov	r7, r6
	if (netStatus != ERR_OK)
		logErrVal("TCP listen", netStatus);

	while (1) {
		// delay
		osDelay(HTTP_CONFIG_TASK_DELAY_TIME);
 80100a0:	2064      	movs	r0, #100	; 0x64
 80100a2:	f7f6 fc15 	bl	80068d0 <osDelay>
		//logMsg("HTTP task");

		// waiting for acces to ethernet interface
		osStatus status = osMutexWait(ethernetInterfaceMutex_id, osWaitForever);
 80100a6:	f04f 31ff 	mov.w	r1, #4294967295
 80100aa:	6830      	ldr	r0, [r6, #0]
 80100ac:	f7f6 fc66 	bl	800697c <osMutexWait>
		if (status == osOK) {
 80100b0:	4605      	mov	r5, r0
 80100b2:	2800      	cmp	r0, #0
 80100b4:	d1f4      	bne.n	80100a0 <httpConfigTask+0x48>
			struct netconn *newClient = NULL;
 80100b6:	a912      	add	r1, sp, #72	; 0x48
 80100b8:	f841 0d40 	str.w	r0, [r1, #-64]!

			// accepting incoming client
			netStatus = netconn_accept(httpServer, &newClient);
 80100bc:	4620      	mov	r0, r4
 80100be:	f7f8 fc45 	bl	800894c <netconn_accept>
			if (netStatus == ERR_OK) {
 80100c2:	2800      	cmp	r0, #0
 80100c4:	f040 80bb 	bne.w	801023e <httpConfigTask+0x1e6>
				// if there is a client

				struct netbuf* recvBuf;
				newClient->recv_timeout = HTTP_RECEIVE_TIMEOUT;
 80100c8:	9802      	ldr	r0, [sp, #8]
 80100ca:	f240 53dc 	movw	r3, #1500	; 0x5dc

				// receiving data from client
				err_t netStatus = netconn_recv(newClient, &recvBuf);
 80100ce:	a903      	add	r1, sp, #12
			netStatus = netconn_accept(httpServer, &newClient);
			if (netStatus == ERR_OK) {
				// if there is a client

				struct netbuf* recvBuf;
				newClient->recv_timeout = HTTP_RECEIVE_TIMEOUT;
 80100d0:	6183      	str	r3, [r0, #24]

				// receiving data from client
				err_t netStatus = netconn_recv(newClient, &recvBuf);
 80100d2:	f7f8 fc72 	bl	80089ba <netconn_recv>
				if (netStatus == ERR_OK) {
 80100d6:	4601      	mov	r1, r0
 80100d8:	2800      	cmp	r0, #0
 80100da:	f040 809e 	bne.w	801021a <httpConfigTask+0x1c2>

					// encoding HTTP request type
					uint16_t requestType = getRequestType(recvBuf);
 80100de:	9803      	ldr	r0, [sp, #12]
 80100e0:	f7fe fe3a 	bl	800ed58 <getRequestType>

					switch (requestType) {
 80100e4:	2801      	cmp	r0, #1
 80100e6:	d002      	beq.n	80100ee <httpConfigTask+0x96>
 80100e8:	2802      	cmp	r0, #2
 80100ea:	d00d      	beq.n	8010108 <httpConfigTask+0xb0>
 80100ec:	e088      	b.n	8010200 <httpConfigTask+0x1a8>
					case GET_REQUEST: {
						logMsg("GET request");
 80100ee:	4861      	ldr	r0, [pc, #388]	; (8010274 <httpConfigTask+0x21c>)
 80100f0:	f7fe ffa0 	bl	800f034 <logMsg>
						if (isConfigRequest(recvBuf)) {
 80100f4:	9803      	ldr	r0, [sp, #12]
 80100f6:	f7fe fe89 	bl	800ee0c <isConfigRequest>
 80100fa:	2800      	cmp	r0, #0
 80100fc:	d078      	beq.n	80101f0 <httpConfigTask+0x198>
							// if it is GET config request
							logMsg("Config request");
 80100fe:	485e      	ldr	r0, [pc, #376]	; (8010278 <httpConfigTask+0x220>)
 8010100:	f7fe ff98 	bl	800f034 <logMsg>
							sendConfiguration(&configStr, newClient,
 8010104:	4a5d      	ldr	r2, [pc, #372]	; (801027c <httpConfigTask+0x224>)
 8010106:	e06c      	b.n	80101e2 <httpConfigTask+0x18a>
							logErr("Not supported request");
						}
						break;
					}
					case PUT_REQUEST: {
						logMsg("PUT request");
 8010108:	485d      	ldr	r0, [pc, #372]	; (8010280 <httpConfigTask+0x228>)
 801010a:	f7fe ff93 	bl	800f034 <logMsg>
						if (isConfigRequest(recvBuf)) {
 801010e:	9803      	ldr	r0, [sp, #12]
 8010110:	f7fe fe7c 	bl	800ee0c <isConfigRequest>
 8010114:	2800      	cmp	r0, #0
 8010116:	d06b      	beq.n	80101f0 <httpConfigTask+0x198>
							logMsg("Config request");
 8010118:	4857      	ldr	r0, [pc, #348]	; (8010278 <httpConfigTask+0x220>)
 801011a:	f7fe ff8b 	bl	800f034 <logMsg>

							sendHttpResponse(newClient, "200 OK", "", "");
 801011e:	4b59      	ldr	r3, [pc, #356]	; (8010284 <httpConfigTask+0x22c>)
 8010120:	4959      	ldr	r1, [pc, #356]	; (8010288 <httpConfigTask+0x230>)
 8010122:	461a      	mov	r2, r3
 8010124:	9802      	ldr	r0, [sp, #8]
 8010126:	f7fe fe43 	bl	800edb0 <sendHttpResponse>
							netbuf_delete(recvBuf);
 801012a:	9803      	ldr	r0, [sp, #12]
 801012c:	f7f9 fa9c 	bl	8009668 <netbuf_delete>

							// receiving JSON data
							err_t netStatus = netconn_recv(newClient, &recvBuf);
 8010130:	a903      	add	r1, sp, #12
 8010132:	9802      	ldr	r0, [sp, #8]
 8010134:	f7f8 fc41 	bl	80089ba <netconn_recv>
							if (netStatus == ERR_OK) {
 8010138:	2800      	cmp	r0, #0
 801013a:	d157      	bne.n	80101ec <httpConfigTask+0x194>
								// parsing JSON data to config structure
								parseJSON(recvBuf, &tempConfigStr);

								// processing new data
								if (tempConfigStr.amplitudeSamplingDelay
										!= configStr.amplitudeSamplingDelay) {
 801013c:	4d53      	ldr	r5, [pc, #332]	; (801028c <httpConfigTask+0x234>)
							err_t netStatus = netconn_recv(newClient, &recvBuf);
							if (netStatus == ERR_OK) {
								StmConfig tempConfigStr;

								// parsing JSON data to config structure
								parseJSON(recvBuf, &tempConfigStr);
 801013e:	a904      	add	r1, sp, #16
 8010140:	9803      	ldr	r0, [sp, #12]
 8010142:	f7fe fe75 	bl	800ee30 <parseJSON>

								// processing new data
								if (tempConfigStr.amplitudeSamplingDelay
 8010146:	f89d 1010 	ldrb.w	r1, [sp, #16]
 801014a:	782b      	ldrb	r3, [r5, #0]
 801014c:	428b      	cmp	r3, r1
 801014e:	d002      	beq.n	8010156 <httpConfigTask+0xfe>
										!= configStr.amplitudeSamplingDelay) {
									logMsgVal("New delay ",
 8010150:	484f      	ldr	r0, [pc, #316]	; (8010290 <httpConfigTask+0x238>)
 8010152:	f7fe ff87 	bl	800f064 <logMsgVal>
											tempConfigStr.amplitudeSamplingDelay);
								}
								if (tempConfigStr.audioSamplingFrequency
 8010156:	9805      	ldr	r0, [sp, #20]
 8010158:	686b      	ldr	r3, [r5, #4]
 801015a:	4298      	cmp	r0, r3
 801015c:	d005      	beq.n	801016a <httpConfigTask+0x112>
										!= configStr.audioSamplingFrequency) {
									audioRecorderSetSamplingFrequency(
 801015e:	f7fe fd33 	bl	800ebc8 <audioRecorderSetSamplingFrequency>
											tempConfigStr.audioSamplingFrequency);
									logMsgVal("New frequency ",
 8010162:	9905      	ldr	r1, [sp, #20]
 8010164:	484b      	ldr	r0, [pc, #300]	; (8010294 <httpConfigTask+0x23c>)
 8010166:	f7fe ff7d 	bl	800f064 <logMsgVal>
											tempConfigStr.audioSamplingFrequency);
								}
								if (tempConfigStr.clientIp.addr
 801016a:	9a06      	ldr	r2, [sp, #24]
 801016c:	68ab      	ldr	r3, [r5, #8]
 801016e:	429a      	cmp	r2, r3
 8010170:	d00e      	beq.n	8010190 <httpConfigTask+0x138>
										!= configStr.clientIp.addr) {
									char text[40];
									sprintf(text, "New endpoint %d.%d.%d.%d",
 8010172:	0e13      	lsrs	r3, r2, #24
 8010174:	4948      	ldr	r1, [pc, #288]	; (8010298 <httpConfigTask+0x240>)
 8010176:	a808      	add	r0, sp, #32
 8010178:	9301      	str	r3, [sp, #4]
 801017a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8010184:	b2d2      	uxtb	r2, r2
 8010186:	f001 fcbb 	bl	8011b00 <sprintf>
													1),
											IP_ADDR_GET(tempConfigStr.clientIp,
													2),
											IP_ADDR_GET(tempConfigStr.clientIp,
													3));
									logMsg(text);
 801018a:	a808      	add	r0, sp, #32
 801018c:	f7fe ff52 	bl	800f034 <logMsg>
								}
								if (tempConfigStr.clientPort
 8010190:	9907      	ldr	r1, [sp, #28]
 8010192:	68eb      	ldr	r3, [r5, #12]
 8010194:	4299      	cmp	r1, r3
 8010196:	d002      	beq.n	801019e <httpConfigTask+0x146>
										!= configStr.clientPort) {
									logMsgVal("New port ",
 8010198:	4840      	ldr	r0, [pc, #256]	; (801029c <httpConfigTask+0x244>)
 801019a:	f7fe ff63 	bl	800f064 <logMsgVal>
											tempConfigStr.clientPort);
								}

								logMsgVal("Delay ",
 801019e:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80101a2:	483f      	ldr	r0, [pc, #252]	; (80102a0 <httpConfigTask+0x248>)
 80101a4:	f7fe ff5e 	bl	800f064 <logMsgVal>
										tempConfigStr.amplitudeSamplingDelay);
								logMsgVal("Freq ",
 80101a8:	9905      	ldr	r1, [sp, #20]
 80101aa:	483e      	ldr	r0, [pc, #248]	; (80102a4 <httpConfigTask+0x24c>)
 80101ac:	f7fe ff5a 	bl	800f064 <logMsgVal>
										tempConfigStr.audioSamplingFrequency);
								char text[40];
								sprintf(text, "Endpoint %d.%d.%d.%d",
										IP_ADDR_GET(tempConfigStr.clientIp, 0),
 80101b0:	9a06      	ldr	r2, [sp, #24]
								logMsgVal("Delay ",
										tempConfigStr.amplitudeSamplingDelay);
								logMsgVal("Freq ",
										tempConfigStr.audioSamplingFrequency);
								char text[40];
								sprintf(text, "Endpoint %d.%d.%d.%d",
 80101b2:	493d      	ldr	r1, [pc, #244]	; (80102a8 <httpConfigTask+0x250>)
 80101b4:	a808      	add	r0, sp, #32
 80101b6:	0e13      	lsrs	r3, r2, #24
 80101b8:	9301      	str	r3, [sp, #4]
 80101ba:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80101be:	9300      	str	r3, [sp, #0]
 80101c0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80101c4:	b2d2      	uxtb	r2, r2
 80101c6:	f001 fc9b 	bl	8011b00 <sprintf>
										IP_ADDR_GET(tempConfigStr.clientIp, 0),
										IP_ADDR_GET(tempConfigStr.clientIp, 1),
										IP_ADDR_GET(tempConfigStr.clientIp, 2),
										IP_ADDR_GET(tempConfigStr.clientIp, 3));
								logMsg(text);
 80101ca:	a808      	add	r0, sp, #32
 80101cc:	f7fe ff32 	bl	800f034 <logMsg>
								logMsgVal("Port ", tempConfigStr.clientPort);
 80101d0:	9907      	ldr	r1, [sp, #28]
 80101d2:	4836      	ldr	r0, [pc, #216]	; (80102ac <httpConfigTask+0x254>)
 80101d4:	f7fe ff46 	bl	800f064 <logMsgVal>

								// copying temporary structure to main config structure
								copyConfig(&configStr, &tempConfigStr);
 80101d8:	a904      	add	r1, sp, #16
 80101da:	482c      	ldr	r0, [pc, #176]	; (801028c <httpConfigTask+0x234>)
 80101dc:	f7fe fed2 	bl	800ef84 <copyConfig>
								sendConfiguration(&configStr, newClient,
 80101e0:	4a33      	ldr	r2, [pc, #204]	; (80102b0 <httpConfigTask+0x258>)
 80101e2:	9902      	ldr	r1, [sp, #8]
 80101e4:	4829      	ldr	r0, [pc, #164]	; (801028c <httpConfigTask+0x234>)
 80101e6:	f7fe fdff 	bl	800ede8 <sendConfiguration>
 80101ea:	e012      	b.n	8010212 <httpConfigTask+0x1ba>
										"\r\nConnection: Closed\r\nContent-Type: application/json");
							} else {
								logErr("No PUT data");
 80101ec:	4831      	ldr	r0, [pc, #196]	; (80102b4 <httpConfigTask+0x25c>)
 80101ee:	e00e      	b.n	801020e <httpConfigTask+0x1b6>
							}
						} else {
							sendHttpResponse(newClient, "404 Not Found",
 80101f0:	4b31      	ldr	r3, [pc, #196]	; (80102b8 <httpConfigTask+0x260>)
 80101f2:	4a32      	ldr	r2, [pc, #200]	; (80102bc <httpConfigTask+0x264>)
 80101f4:	4932      	ldr	r1, [pc, #200]	; (80102c0 <httpConfigTask+0x268>)
 80101f6:	9802      	ldr	r0, [sp, #8]
 80101f8:	f7fe fdda 	bl	800edb0 <sendHttpResponse>
									"\r\nContent-Type: text/html",
									"<h1>404 Not Found</h1>");
							logErr("Not supported request");
 80101fc:	4831      	ldr	r0, [pc, #196]	; (80102c4 <httpConfigTask+0x26c>)
 80101fe:	e006      	b.n	801020e <httpConfigTask+0x1b6>
						}
						break;
					}
					default: {
						sendHttpResponse(newClient, "501 Not Implemented",
 8010200:	4b31      	ldr	r3, [pc, #196]	; (80102c8 <httpConfigTask+0x270>)
 8010202:	4a2e      	ldr	r2, [pc, #184]	; (80102bc <httpConfigTask+0x264>)
 8010204:	4931      	ldr	r1, [pc, #196]	; (80102cc <httpConfigTask+0x274>)
 8010206:	9802      	ldr	r0, [sp, #8]
 8010208:	f7fe fdd2 	bl	800edb0 <sendHttpResponse>
								"\r\nContent-Type: text/html",
								"<h1>501 Not Implemented</h1>");
						logErr("Not implemented method");
 801020c:	4830      	ldr	r0, [pc, #192]	; (80102d0 <httpConfigTask+0x278>)
 801020e:	f7fe ff1d 	bl	800f04c <logErr>
						break;
					}
					}

					// deleting socket buffer
					netbuf_delete(recvBuf);
 8010212:	9803      	ldr	r0, [sp, #12]
 8010214:	f7f9 fa28 	bl	8009668 <netbuf_delete>
 8010218:	e002      	b.n	8010220 <httpConfigTask+0x1c8>
				} else
					logErrVal("TCP no data", netStatus);
 801021a:	482e      	ldr	r0, [pc, #184]	; (80102d4 <httpConfigTask+0x27c>)
 801021c:	f7fe ff3a 	bl	800f094 <logErrVal>

				// closing connectoin
				netStatus = netconn_close(newClient);
 8010220:	9802      	ldr	r0, [sp, #8]
 8010222:	f7f8 fc4d 	bl	8008ac0 <netconn_close>
				if (netStatus != ERR_OK)
 8010226:	4601      	mov	r1, r0
 8010228:	b110      	cbz	r0, 8010230 <httpConfigTask+0x1d8>
					logErrVal("TCP close", netStatus);
 801022a:	482b      	ldr	r0, [pc, #172]	; (80102d8 <httpConfigTask+0x280>)
 801022c:	f7fe ff32 	bl	800f094 <logErrVal>

				// free client memory
				netStatus = netconn_delete(newClient);
 8010230:	9802      	ldr	r0, [sp, #8]
 8010232:	f7f8 fb37 	bl	80088a4 <netconn_delete>
				if (netStatus != ERR_OK)
 8010236:	4601      	mov	r1, r0
 8010238:	b138      	cbz	r0, 801024a <httpConfigTask+0x1f2>
					logErrVal("TCP delete", netStatus);
 801023a:	4828      	ldr	r0, [pc, #160]	; (80102dc <httpConfigTask+0x284>)
 801023c:	e003      	b.n	8010246 <httpConfigTask+0x1ee>
			} else if (netStatus != ERR_TIMEOUT)
 801023e:	3003      	adds	r0, #3
 8010240:	d003      	beq.n	801024a <httpConfigTask+0x1f2>
				logErrVal("TCP accept", status);
 8010242:	4629      	mov	r1, r5
 8010244:	4826      	ldr	r0, [pc, #152]	; (80102e0 <httpConfigTask+0x288>)
 8010246:	f7fe ff25 	bl	800f094 <logErrVal>

			// releasing ethernet interface mutex
			status = osMutexRelease(ethernetInterfaceMutex_id);
 801024a:	6838      	ldr	r0, [r7, #0]
 801024c:	f7f6 fc1e 	bl	8006a8c <osMutexRelease>
			if (status != osOK)
 8010250:	4601      	mov	r1, r0
 8010252:	2800      	cmp	r0, #0
 8010254:	f43f af24 	beq.w	80100a0 <httpConfigTask+0x48>
				logErrVal("Eth mut release", status);
 8010258:	4822      	ldr	r0, [pc, #136]	; (80102e4 <httpConfigTask+0x28c>)
 801025a:	f7fe ff1b 	bl	800f094 <logErrVal>
 801025e:	e71f      	b.n	80100a0 <httpConfigTask+0x48>
 8010260:	0802f92a 	.word	0x0802f92a
 8010264:	20049598 	.word	0x20049598
 8010268:	0802f933 	.word	0x0802f933
 801026c:	0802f93c 	.word	0x0802f93c
 8010270:	2004981c 	.word	0x2004981c
 8010274:	0802f947 	.word	0x0802f947
 8010278:	0802f953 	.word	0x0802f953
 801027c:	0802f962 	.word	0x0802f962
 8010280:	0802f9cc 	.word	0x0802f9cc
 8010284:	0802fc0b 	.word	0x0802fc0b
 8010288:	0802f510 	.word	0x0802f510
 801028c:	20049800 	.word	0x20049800
 8010290:	0802f9d8 	.word	0x0802f9d8
 8010294:	0802f9e3 	.word	0x0802f9e3
 8010298:	0802f9f2 	.word	0x0802f9f2
 801029c:	0802fa0b 	.word	0x0802fa0b
 80102a0:	0802fa15 	.word	0x0802fa15
 80102a4:	0802fa1c 	.word	0x0802fa1c
 80102a8:	0802fa22 	.word	0x0802fa22
 80102ac:	0802fa37 	.word	0x0802fa37
 80102b0:	0802fa3d 	.word	0x0802fa3d
 80102b4:	0802fa72 	.word	0x0802fa72
 80102b8:	0802f977 	.word	0x0802f977
 80102bc:	0802f98e 	.word	0x0802f98e
 80102c0:	0802f9a8 	.word	0x0802f9a8
 80102c4:	0802f9b6 	.word	0x0802f9b6
 80102c8:	0802fa7e 	.word	0x0802fa7e
 80102cc:	0802fa9b 	.word	0x0802fa9b
 80102d0:	0802faaf 	.word	0x0802faaf
 80102d4:	0802fac6 	.word	0x0802fac6
 80102d8:	0802fad2 	.word	0x0802fad2
 80102dc:	0802fadc 	.word	0x0802fadc
 80102e0:	0802fae7 	.word	0x0802fae7
 80102e4:	0802faf2 	.word	0x0802faf2

080102e8 <threadsInit>:
// FUNCTIONS

/**
 * @brief Function initializes the initialization task
 */
void threadsInit() {
 80102e8:	b508      	push	{r3, lr}
	/* Starting OS task initialization */
	initTaskHandle = osThreadCreate(osThread(initThread), NULL);
 80102ea:	2100      	movs	r1, #0
 80102ec:	4802      	ldr	r0, [pc, #8]	; (80102f8 <threadsInit+0x10>)
 80102ee:	f7f6 facf 	bl	8006890 <osThreadCreate>
 80102f2:	4b02      	ldr	r3, [pc, #8]	; (80102fc <threadsInit+0x14>)
 80102f4:	6018      	str	r0, [r3, #0]
 80102f6:	bd08      	pop	{r3, pc}
 80102f8:	0802fbd0 	.word	0x0802fbd0
 80102fc:	200497fc 	.word	0x200497fc

08010300 <BSP_AUDIO_IN_TransferComplete_CallBack>:
}

/**
 * @brief Functions called as DMA interrupt
 */
void audioRecorder_FullBufferFilled(void) {
 8010300:	b538      	push	{r3, r4, r5, lr}
	SoundMailStr *soundSamples;

	// allocating memory for sound mail
	soundSamples = osMailAlloc(dmaAudioMail_q_id, osWaitForever);
 8010302:	4c0d      	ldr	r4, [pc, #52]	; (8010338 <BSP_AUDIO_IN_TransferComplete_CallBack+0x38>)
 8010304:	f04f 31ff 	mov.w	r1, #4294967295
 8010308:	6820      	ldr	r0, [r4, #0]
 801030a:	f7f6 fc73 	bl	8006bf4 <osMailAlloc>
	audioRecordingSoundMailFill(soundSamples, dmaAudioBuffer,
 801030e:	4b0b      	ldr	r3, [pc, #44]	; (801033c <BSP_AUDIO_IN_TransferComplete_CallBack+0x3c>)
 */
void audioRecorder_FullBufferFilled(void) {
	SoundMailStr *soundSamples;

	// allocating memory for sound mail
	soundSamples = osMailAlloc(dmaAudioMail_q_id, osWaitForever);
 8010310:	4605      	mov	r5, r0
	audioRecordingSoundMailFill(soundSamples, dmaAudioBuffer,
 8010312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	4909      	ldr	r1, [pc, #36]	; (8010340 <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>)
 801031a:	f7fe fc75 	bl	800ec08 <audioRecordingSoundMailFill>
	AUDIO_BUFFER_SIZE, configStr.audioSamplingFrequency);

	// sending mail to queue
	osStatus status = osMailPut(dmaAudioMail_q_id, soundSamples);
 801031e:	4629      	mov	r1, r5
 8010320:	6820      	ldr	r0, [r4, #0]
 8010322:	f7f6 fc6d 	bl	8006c00 <osMailPut>
	if (status != osOK)
 8010326:	4601      	mov	r1, r0
 8010328:	b120      	cbz	r0, 8010334 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>
		logErrVal("Audio mail send", status);
 801032a:	4806      	ldr	r0, [pc, #24]	; (8010344 <BSP_AUDIO_IN_TransferComplete_CallBack+0x44>)
}
 801032c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	AUDIO_BUFFER_SIZE, configStr.audioSamplingFrequency);

	// sending mail to queue
	osStatus status = osMailPut(dmaAudioMail_q_id, soundSamples);
	if (status != osOK)
		logErrVal("Audio mail send", status);
 8010330:	f7fe beb0 	b.w	800f094 <logErrVal>
 8010334:	bd38      	pop	{r3, r4, r5, pc}
 8010336:	bf00      	nop
 8010338:	200497e0 	.word	0x200497e0
 801033c:	20049800 	.word	0x20049800
 8010340:	200495d4 	.word	0x200495d4
 8010344:	0802fb02 	.word	0x0802fb02

08010348 <cJSON_strcasecmp>:
    return global_ep;
}

/* case insensitive strcmp */
static int cJSON_strcasecmp(const char *s1, const char *s2)
{
 8010348:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!s1)
 801034a:	b918      	cbnz	r0, 8010354 <cJSON_strcasecmp+0xc>
    {
        return (s1 == s2) ? 0 : 1; /* both NULL? */
 801034c:	1c08      	adds	r0, r1, #0
 801034e:	bf18      	it	ne
 8010350:	2001      	movne	r0, #1
 8010352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
    if (!s2)
 8010354:	b349      	cbz	r1, 80103aa <cJSON_strcasecmp+0x62>
    {
        return 1;
    }
    for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 8010356:	4b16      	ldr	r3, [pc, #88]	; (80103b0 <cJSON_strcasecmp+0x68>)
 8010358:	1e42      	subs	r2, r0, #1
 801035a:	3901      	subs	r1, #1
 801035c:	f8d3 e000 	ldr.w	lr, [r3]
 8010360:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010364:	eb0e 0300 	add.w	r3, lr, r0
 8010368:	785d      	ldrb	r5, [r3, #1]
 801036a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801036e:	f005 0503 	and.w	r5, r5, #3
 8010372:	eb0e 0403 	add.w	r4, lr, r3
 8010376:	2d01      	cmp	r5, #1
 8010378:	7864      	ldrb	r4, [r4, #1]
 801037a:	bf0c      	ite	eq
 801037c:	f100 0720 	addeq.w	r7, r0, #32
 8010380:	4607      	movne	r7, r0
 8010382:	f004 0403 	and.w	r4, r4, #3
 8010386:	2c01      	cmp	r4, #1
 8010388:	bf0c      	ite	eq
 801038a:	f103 0620 	addeq.w	r6, r3, #32
 801038e:	461e      	movne	r6, r3
 8010390:	42b7      	cmp	r7, r6
 8010392:	d102      	bne.n	801039a <cJSON_strcasecmp+0x52>
    {
        if (*s1 == 0)
 8010394:	2800      	cmp	r0, #0
 8010396:	d1e3      	bne.n	8010360 <cJSON_strcasecmp+0x18>
 8010398:	e008      	b.n	80103ac <cJSON_strcasecmp+0x64>
        {
            return 0;
        }
    }

    return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 801039a:	2d01      	cmp	r5, #1
 801039c:	bf08      	it	eq
 801039e:	3020      	addeq	r0, #32
 80103a0:	2c01      	cmp	r4, #1
 80103a2:	bf08      	it	eq
 80103a4:	3320      	addeq	r3, #32
 80103a6:	1ac0      	subs	r0, r0, r3
 80103a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    {
        return (s1 == s2) ? 0 : 1; /* both NULL? */
    }
    if (!s2)
    {
        return 1;
 80103aa:	2001      	movs	r0, #1
            return 0;
        }
    }

    return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
}
 80103ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103ae:	bf00      	nop
 80103b0:	2001008c 	.word	0x2001008c

080103b4 <parse_hex4>:
    return str;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const char *str)
{
 80103b4:	b510      	push	{r4, lr}
    unsigned h = 0;
    /* first digit */
    if ((*str >= '0') && (*str <= '9'))
 80103b6:	7801      	ldrb	r1, [r0, #0]
 80103b8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80103bc:	b2da      	uxtb	r2, r3
 80103be:	2a09      	cmp	r2, #9
 80103c0:	d90c      	bls.n	80103dc <parse_hex4+0x28>
    {
        h += (*str) - '0';
    }
    else if ((*str >= 'A') && (*str <= 'F'))
 80103c2:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80103c6:	2b05      	cmp	r3, #5
 80103c8:	d802      	bhi.n	80103d0 <parse_hex4+0x1c>
    {
        h += 10 + (*str) - 'A';
 80103ca:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80103ce:	e005      	b.n	80103dc <parse_hex4+0x28>
    }
    else if ((*str >= 'a') && (*str <= 'f'))
 80103d0:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80103d4:	2b05      	cmp	r3, #5
 80103d6:	d841      	bhi.n	801045c <parse_hex4+0xa8>
    {
        h += 10 + (*str) - 'a';
 80103d8:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57


    /* second digit */
    h = h << 4;
    str++;
    if ((*str >= '0') && (*str <= '9'))
 80103dc:	7844      	ldrb	r4, [r0, #1]
        return 0;
    }


    /* second digit */
    h = h << 4;
 80103de:	0119      	lsls	r1, r3, #4
    str++;
    if ((*str >= '0') && (*str <= '9'))
 80103e0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	2a09      	cmp	r2, #9
 80103e8:	d90c      	bls.n	8010404 <parse_hex4+0x50>
    {
        h += (*str) - '0';
    }
    else if ((*str >= 'A') && (*str <= 'F'))
 80103ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80103ee:	2b05      	cmp	r3, #5
 80103f0:	d802      	bhi.n	80103f8 <parse_hex4+0x44>
    {
        h += 10 + (*str) - 'A';
 80103f2:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 80103f6:	e005      	b.n	8010404 <parse_hex4+0x50>
    }
    else if ((*str >= 'a') && (*str <= 'f'))
 80103f8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80103fc:	2b05      	cmp	r3, #5
 80103fe:	d82d      	bhi.n	801045c <parse_hex4+0xa8>
    {
        h += 10 + (*str) - 'a';
 8010400:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 8010404:	440b      	add	r3, r1
    }

    /* third digit */
    h = h << 4;
    str++;
    if ((*str >= '0') && (*str <= '9'))
 8010406:	7881      	ldrb	r1, [r0, #2]
    {
        return 0;
    }

    /* third digit */
    h = h << 4;
 8010408:	011a      	lsls	r2, r3, #4
    str++;
    if ((*str >= '0') && (*str <= '9'))
 801040a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801040e:	b2dc      	uxtb	r4, r3
 8010410:	2c09      	cmp	r4, #9
 8010412:	d90c      	bls.n	801042e <parse_hex4+0x7a>
    {
        h += (*str) - '0';
    }
    else if ((*str >= 'A') && (*str <= 'F'))
 8010414:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8010418:	2b05      	cmp	r3, #5
 801041a:	d802      	bhi.n	8010422 <parse_hex4+0x6e>
    {
        h += 10 + (*str) - 'A';
 801041c:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8010420:	e005      	b.n	801042e <parse_hex4+0x7a>
    }
    else if ((*str >= 'a') && (*str <= 'f'))
 8010422:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8010426:	2b05      	cmp	r3, #5
 8010428:	d818      	bhi.n	801045c <parse_hex4+0xa8>
    {
        h += 10 + (*str) - 'a';
 801042a:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
 801042e:	4413      	add	r3, r2
    }

    /* fourth digit */
    h = h << 4;
    str++;
    if ((*str >= '0') && (*str <= '9'))
 8010430:	78c2      	ldrb	r2, [r0, #3]
 8010432:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    {
        return 0;
    }

    /* fourth digit */
    h = h << 4;
 8010436:	011b      	lsls	r3, r3, #4
    str++;
    if ((*str >= '0') && (*str <= '9'))
 8010438:	b2c1      	uxtb	r1, r0
 801043a:	2909      	cmp	r1, #9
 801043c:	d90c      	bls.n	8010458 <parse_hex4+0xa4>
    {
        h += (*str) - '0';
    }
    else if ((*str >= 'A') && (*str <= 'F'))
 801043e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8010442:	2905      	cmp	r1, #5
 8010444:	d802      	bhi.n	801044c <parse_hex4+0x98>
    {
        h += 10 + (*str) - 'A';
 8010446:	f1a2 0037 	sub.w	r0, r2, #55	; 0x37
 801044a:	e005      	b.n	8010458 <parse_hex4+0xa4>
    }
    else if ((*str >= 'a') && (*str <= 'f'))
 801044c:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8010450:	2905      	cmp	r1, #5
 8010452:	d803      	bhi.n	801045c <parse_hex4+0xa8>
    {
        h += 10 + (*str) - 'a';
 8010454:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
 8010458:	4418      	add	r0, r3
 801045a:	bd10      	pop	{r4, pc}
    {
        h += 10 + (*str) - 'a';
    }
    else /* invalid */
    {
        return 0;
 801045c:	2000      	movs	r0, #0
    {
        return 0;
    }

    return h;
}
 801045e:	bd10      	pop	{r4, pc}

08010460 <parse_string>:
    0xFC
};

/* Parse the input text into an unescaped cstring, and populate item. */
static const char *parse_string(cJSON *item, const char *str, const char **ep)
{
 8010460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010464:	9200      	str	r2, [sp, #0]
 8010466:	4605      	mov	r5, r0
    int len = 0;
    unsigned uc;
    unsigned uc2;

    /* not a string! */
    if (*str != '\"')
 8010468:	780a      	ldrb	r2, [r1, #0]
    0xFC
};

/* Parse the input text into an unescaped cstring, and populate item. */
static const char *parse_string(cJSON *item, const char *str, const char **ep)
{
 801046a:	460e      	mov	r6, r1
    const char *ptr = str + 1;
    const char *end_ptr =str + 1;
 801046c:	f101 0801 	add.w	r8, r1, #1
    int len = 0;
    unsigned uc;
    unsigned uc2;

    /* not a string! */
    if (*str != '\"')
 8010470:	2a22      	cmp	r2, #34	; 0x22
 8010472:	d114      	bne.n	801049e <parse_string+0x3e>
 8010474:	4647      	mov	r7, r8
 8010476:	2000      	movs	r0, #0
 8010478:	e01c      	b.n	80104b4 <parse_string+0x54>
        }
        /* escape sequence */
        else
        {
            ptr++;
            switch (*ptr)
 801047a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801047e:	286e      	cmp	r0, #110	; 0x6e
 8010480:	d04c      	beq.n	801051c <parse_string+0xbc>
 8010482:	d939      	bls.n	80104f8 <parse_string+0x98>
 8010484:	2874      	cmp	r0, #116	; 0x74
 8010486:	d04c      	beq.n	8010522 <parse_string+0xc2>
 8010488:	2875      	cmp	r0, #117	; 0x75
 801048a:	d13e      	bne.n	801050a <parse_string+0xaa>
                case 't':
                    *ptr2++ = '\t';
                    break;
                case 'u':
                    /* transcode utf16 to utf8. See RFC2781 and RFC3629. */
                    uc = parse_hex4(ptr + 1); /* get the unicode char. */
 801048c:	f108 0002 	add.w	r0, r8, #2
 8010490:	f7ff ff90 	bl	80103b4 <parse_hex4>
                    ptr += 4;
 8010494:	f108 0205 	add.w	r2, r8, #5
                case 't':
                    *ptr2++ = '\t';
                    break;
                case 'u':
                    /* transcode utf16 to utf8. See RFC2781 and RFC3629. */
                    uc = parse_hex4(ptr + 1); /* get the unicode char. */
 8010498:	4605      	mov	r5, r0
                    ptr += 4;
                    if (ptr >= end_ptr)
 801049a:	4297      	cmp	r7, r2
 801049c:	d845      	bhi.n	801052a <parse_string+0xca>
    unsigned uc2;

    /* not a string! */
    if (*str != '\"')
    {
        *ep = str;
 801049e:	9b00      	ldr	r3, [sp, #0]
 80104a0:	601e      	str	r6, [r3, #0]
        if (*end_ptr++ == '\\')
        {
            if (*end_ptr == '\0')
            {
                /* prevent buffer overflow when last input character is a backslash */
                return 0;
 80104a2:	2000      	movs	r0, #0
 80104a4:	e0b0      	b.n	8010608 <parse_string+0x1a8>
    {
        *ep = str;
        return 0;
    }

    while ((*end_ptr != '\"') && *end_ptr && ++len)
 80104a6:	b162      	cbz	r2, 80104c2 <parse_string+0x62>
    {
        if (*end_ptr++ == '\\')
 80104a8:	2a5c      	cmp	r2, #92	; 0x5c
 80104aa:	d108      	bne.n	80104be <parse_string+0x5e>
        {
            if (*end_ptr == '\0')
 80104ac:	787a      	ldrb	r2, [r7, #1]
 80104ae:	2a00      	cmp	r2, #0
 80104b0:	d0f7      	beq.n	80104a2 <parse_string+0x42>
            {
                /* prevent buffer overflow when last input character is a backslash */
                return 0;
            }
            /* Skip escaped quotes. */
            end_ptr++;
 80104b2:	3702      	adds	r7, #2
    {
        *ep = str;
        return 0;
    }

    while ((*end_ptr != '\"') && *end_ptr && ++len)
 80104b4:	783a      	ldrb	r2, [r7, #0]
 80104b6:	3001      	adds	r0, #1
 80104b8:	2a22      	cmp	r2, #34	; 0x22
 80104ba:	d1f4      	bne.n	80104a6 <parse_string+0x46>
 80104bc:	e001      	b.n	80104c2 <parse_string+0x62>
    {
        if (*end_ptr++ == '\\')
 80104be:	3701      	adds	r7, #1
 80104c0:	e7f8      	b.n	80104b4 <parse_string+0x54>
            end_ptr++;
        }
    }

    /* This is at most how long we need for the string, roughly. */
    out = (char*)cJSON_malloc(len + 1);
 80104c2:	4a53      	ldr	r2, [pc, #332]	; (8010610 <parse_string+0x1b0>)
 80104c4:	6812      	ldr	r2, [r2, #0]
 80104c6:	4790      	blx	r2
    if (!out)
 80104c8:	4604      	mov	r4, r0
 80104ca:	2800      	cmp	r0, #0
 80104cc:	d0e9      	beq.n	80104a2 <parse_string+0x42>
    {
        return 0;
    }
    item->valuestring = out; /* assign here so out will be deleted during cJSON_Delete() later */
    item->type = cJSON_String;
 80104ce:	2210      	movs	r2, #16
                    break;
                case 'n':
                    *ptr2++ = '\n';
                    break;
                case 'r':
                    *ptr2++ = '\r';
 80104d0:	f04f 090d 	mov.w	r9, #13
        {
            ptr++;
            switch (*ptr)
            {
                case 'b':
                    *ptr2++ = '\b';
 80104d4:	f04f 0a08 	mov.w	sl, #8
                    break;
                case 'f':
                    *ptr2++ = '\f';
 80104d8:	f04f 0b0c 	mov.w	fp, #12
    out = (char*)cJSON_malloc(len + 1);
    if (!out)
    {
        return 0;
    }
    item->valuestring = out; /* assign here so out will be deleted during cJSON_Delete() later */
 80104dc:	6128      	str	r0, [r5, #16]
    item->type = cJSON_String;
 80104de:	60ea      	str	r2, [r5, #12]

    ptr = str + 1;
    ptr2 = out;
    /* loop through the string literal */
    while (ptr < end_ptr)
 80104e0:	45b8      	cmp	r8, r7
 80104e2:	f080 8088 	bcs.w	80105f6 <parse_string+0x196>
    {
        if (*ptr != '\\')
 80104e6:	4642      	mov	r2, r8
 80104e8:	f812 0b01 	ldrb.w	r0, [r2], #1
 80104ec:	285c      	cmp	r0, #92	; 0x5c
 80104ee:	d0c4      	beq.n	801047a <parse_string+0x1a>
        {
            *ptr2++ = *ptr++;
 80104f0:	7020      	strb	r0, [r4, #0]
 80104f2:	4690      	mov	r8, r2
 80104f4:	3401      	adds	r4, #1
 80104f6:	e7f3      	b.n	80104e0 <parse_string+0x80>
        }
        /* escape sequence */
        else
        {
            ptr++;
            switch (*ptr)
 80104f8:	2862      	cmp	r0, #98	; 0x62
 80104fa:	f104 0301 	add.w	r3, r4, #1
 80104fe:	d009      	beq.n	8010514 <parse_string+0xb4>
 8010500:	2866      	cmp	r0, #102	; 0x66
 8010502:	d173      	bne.n	80105ec <parse_string+0x18c>
            {
                case 'b':
                    *ptr2++ = '\b';
                    break;
                case 'f':
                    *ptr2++ = '\f';
 8010504:	f884 b000 	strb.w	fp, [r4]
 8010508:	e006      	b.n	8010518 <parse_string+0xb8>
        }
        /* escape sequence */
        else
        {
            ptr++;
            switch (*ptr)
 801050a:	2872      	cmp	r0, #114	; 0x72
 801050c:	d16e      	bne.n	80105ec <parse_string+0x18c>
                    break;
                case 'n':
                    *ptr2++ = '\n';
                    break;
                case 'r':
                    *ptr2++ = '\r';
 801050e:	f884 9000 	strb.w	r9, [r4]
 8010512:	e06c      	b.n	80105ee <parse_string+0x18e>
        {
            ptr++;
            switch (*ptr)
            {
                case 'b':
                    *ptr2++ = '\b';
 8010514:	f884 a000 	strb.w	sl, [r4]
                    break;
                case 'f':
                    *ptr2++ = '\f';
 8010518:	461c      	mov	r4, r3
                    break;
 801051a:	e069      	b.n	80105f0 <parse_string+0x190>
                case 'n':
                    *ptr2++ = '\n';
 801051c:	f04f 030a 	mov.w	r3, #10
 8010520:	e001      	b.n	8010526 <parse_string+0xc6>
                    break;
                case 'r':
                    *ptr2++ = '\r';
                    break;
                case 't':
                    *ptr2++ = '\t';
 8010522:	f04f 0309 	mov.w	r3, #9
 8010526:	7023      	strb	r3, [r4, #0]
 8010528:	e061      	b.n	80105ee <parse_string+0x18e>
                        /* invalid */
                        *ep = str;
                        return 0;
                    }
                    /* check for invalid. */
                    if (((uc >= 0xDC00) && (uc <= 0xDFFF)) || (uc == 0))
 801052a:	f5a0 405c 	sub.w	r0, r0, #56320	; 0xdc00
 801052e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010532:	d3b4      	bcc.n	801049e <parse_string+0x3e>
 8010534:	2d00      	cmp	r5, #0
 8010536:	d0b2      	beq.n	801049e <parse_string+0x3e>
                        *ep = str;
                        return 0;
                    }

                    /* UTF16 surrogate pairs. */
                    if ((uc >= 0xD800) && (uc<=0xDBFF))
 8010538:	f5a5 4058 	sub.w	r0, r5, #55296	; 0xd800
 801053c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010540:	d21f      	bcs.n	8010582 <parse_string+0x122>
                    {
                        if ((ptr + 6) > end_ptr)
 8010542:	f108 020b 	add.w	r2, r8, #11
 8010546:	4297      	cmp	r7, r2
 8010548:	9201      	str	r2, [sp, #4]
 801054a:	d3a8      	bcc.n	801049e <parse_string+0x3e>
                        {
                            /* invalid */
                            *ep = str;
                            return 0;
                        }
                        if ((ptr[1] != '\\') || (ptr[2] != 'u'))
 801054c:	f898 0006 	ldrb.w	r0, [r8, #6]
 8010550:	285c      	cmp	r0, #92	; 0x5c
 8010552:	d1a4      	bne.n	801049e <parse_string+0x3e>
 8010554:	f898 0007 	ldrb.w	r0, [r8, #7]
 8010558:	2875      	cmp	r0, #117	; 0x75
 801055a:	d1a0      	bne.n	801049e <parse_string+0x3e>
                        {
                            /* missing second-half of surrogate. */
                            *ep = str;
                            return 0;
                        }
                        uc2 = parse_hex4(ptr + 3);
 801055c:	f108 0008 	add.w	r0, r8, #8
 8010560:	f7ff ff28 	bl	80103b4 <parse_hex4>
                        ptr += 6; /* \uXXXX */
                        if ((uc2 < 0xDC00) || (uc2 > 0xDFFF))
 8010564:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 8010568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801056c:	d297      	bcs.n	801049e <parse_string+0x3e>
                            /* invalid second-half of surrogate. */
                            *ep = str;
                            return 0;
                        }
                        /* calculate unicode codepoint from the surrogate pair */
                        uc = 0x10000 + (((uc & 0x3FF) << 10) | (uc2 & 0x3FF));
 801056e:	02ab      	lsls	r3, r5, #10
 8010570:	4d28      	ldr	r5, [pc, #160]	; (8010614 <parse_string+0x1b4>)
 8010572:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8010576:	9a01      	ldr	r2, [sp, #4]
 8010578:	401d      	ands	r5, r3
 801057a:	4305      	orrs	r5, r0
 801057c:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8010580:	e004      	b.n	801058c <parse_string+0x12c>

                    /* encode as UTF8
                     * takes at maximum 4 bytes to encode:
                     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
                    len = 4;
                    if (uc < 0x80)
 8010582:	2d7f      	cmp	r5, #127	; 0x7f
 8010584:	d908      	bls.n	8010598 <parse_string+0x138>
                    {
                        /* normal ascii, encoding 0xxxxxxx */
                        len = 1;
                    }
                    else if (uc < 0x800)
 8010586:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801058a:	d307      	bcc.n	801059c <parse_string+0x13c>
                        len = 2;
                    }
                    else if (uc < 0x10000)
                    {
                        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
                        len = 3;
 801058c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8010590:	bf2c      	ite	cs
 8010592:	2304      	movcs	r3, #4
 8010594:	2303      	movcc	r3, #3
 8010596:	e002      	b.n	801059e <parse_string+0x13e>
                     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
                    len = 4;
                    if (uc < 0x80)
                    {
                        /* normal ascii, encoding 0xxxxxxx */
                        len = 1;
 8010598:	2301      	movs	r3, #1
 801059a:	e000      	b.n	801059e <parse_string+0x13e>
                    }
                    else if (uc < 0x800)
                    {
                        /* two bytes, encoding 110xxxxx 10xxxxxx */
                        len = 2;
 801059c:	2302      	movs	r3, #2
                        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
                        len = 3;
                    }
                    ptr2 += len;

                    switch (len) {
 801059e:	2b03      	cmp	r3, #3
                    else if (uc < 0x10000)
                    {
                        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
                        len = 3;
                    }
                    ptr2 += len;
 80105a0:	eb04 0003 	add.w	r0, r4, r3

                    switch (len) {
 80105a4:	d00c      	beq.n	80105c0 <parse_string+0x160>
 80105a6:	2b04      	cmp	r3, #4
 80105a8:	d002      	beq.n	80105b0 <parse_string+0x150>
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d116      	bne.n	80105dc <parse_string+0x17c>
 80105ae:	e00e      	b.n	80105ce <parse_string+0x16e>
                        case 4:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80105b0:	f005 0e3f 	and.w	lr, r5, #63	; 0x3f
                            uc >>= 6;
 80105b4:	09ad      	lsrs	r5, r5, #6
                    ptr2 += len;

                    switch (len) {
                        case 4:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80105b6:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 80105ba:	f800 ec01 	strb.w	lr, [r0, #-1]
 80105be:	1ce0      	adds	r0, r4, #3
                            uc >>= 6;
                        case 3:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80105c0:	f005 043f 	and.w	r4, r5, #63	; 0x3f
 80105c4:	3801      	subs	r0, #1
                            uc >>= 6;
 80105c6:	09ad      	lsrs	r5, r5, #6
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
                            uc >>= 6;
                        case 3:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80105c8:	f064 047f 	orn	r4, r4, #127	; 0x7f
 80105cc:	7004      	strb	r4, [r0, #0]
                            uc >>= 6;
                        case 2:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80105ce:	f005 043f 	and.w	r4, r5, #63	; 0x3f
 80105d2:	3801      	subs	r0, #1
                            uc >>= 6;
 80105d4:	09ad      	lsrs	r5, r5, #6
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
                            uc >>= 6;
                        case 2:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80105d6:	f064 047f 	orn	r4, r4, #127	; 0x7f
 80105da:	7004      	strb	r4, [r0, #0]
                            uc >>= 6;
                        case 1:
                            /* depending on the length in bytes this determines the
                             * encoding ofthe first UTF8 byte */
                            *--ptr2 = (uc | firstByteMark[len]);
 80105dc:	490e      	ldr	r1, [pc, #56]	; (8010618 <parse_string+0x1b8>)
 80105de:	5ccc      	ldrb	r4, [r1, r3]
 80105e0:	4325      	orrs	r5, r4
                    }
                    ptr2 += len;
 80105e2:	1e5c      	subs	r4, r3, #1
                            *--ptr2 = ((uc | 0x80) & 0xBF);
                            uc >>= 6;
                        case 1:
                            /* depending on the length in bytes this determines the
                             * encoding ofthe first UTF8 byte */
                            *--ptr2 = (uc | firstByteMark[len]);
 80105e4:	f800 5c01 	strb.w	r5, [r0, #-1]
                    }
                    ptr2 += len;
 80105e8:	4404      	add	r4, r0
                    break;
 80105ea:	e001      	b.n	80105f0 <parse_string+0x190>
                default:
                    *ptr2++ = *ptr;
 80105ec:	7020      	strb	r0, [r4, #0]
 80105ee:	3401      	adds	r4, #1
                    break;
            }
            ptr++;
 80105f0:	f102 0801 	add.w	r8, r2, #1
 80105f4:	e774      	b.n	80104e0 <parse_string+0x80>
        }
    }
    *ptr2 = '\0';
 80105f6:	2200      	movs	r2, #0
 80105f8:	7022      	strb	r2, [r4, #0]
    if (*ptr == '\"')
 80105fa:	f898 2000 	ldrb.w	r2, [r8]
 80105fe:	2a22      	cmp	r2, #34	; 0x22
    {
        ptr++;
 8010600:	bf0c      	ite	eq
 8010602:	f108 0001 	addeq.w	r0, r8, #1
 8010606:	4640      	movne	r0, r8
    }

    return ptr;
}
 8010608:	b003      	add	sp, #12
 801060a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801060e:	bf00      	nop
 8010610:	20010088 	.word	0x20010088
 8010614:	000ffc00 	.word	0x000ffc00
 8010618:	0802fbe8 	.word	0x0802fbe8

0801061c <skip>:
static const char *parse_object(cJSON *item, const char *value, const char **ep);
static char *print_object(const cJSON *item, int depth, int fmt, printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in)
{
 801061c:	4603      	mov	r3, r0
 801061e:	4618      	mov	r0, r3
    while (in && *in && ((unsigned char)*in<=32))
 8010620:	b123      	cbz	r3, 801062c <skip+0x10>
 8010622:	7802      	ldrb	r2, [r0, #0]
 8010624:	3301      	adds	r3, #1
 8010626:	3a01      	subs	r2, #1
 8010628:	2a1f      	cmp	r2, #31
 801062a:	d9f8      	bls.n	801061e <skip+0x2>
    {
        in++;
    }

    return in;
}
 801062c:	4770      	bx	lr
	...

08010630 <cJSON_New_Item>:
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
    cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 8010630:	4b06      	ldr	r3, [pc, #24]	; (801064c <cJSON_New_Item+0x1c>)
 8010632:	2028      	movs	r0, #40	; 0x28
    cJSON_free = (hooks->free_fn) ? hooks->free_fn : free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 8010634:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	4798      	blx	r3
    if (node)
 801063a:	4604      	mov	r4, r0
 801063c:	b118      	cbz	r0, 8010646 <cJSON_New_Item+0x16>
    {
        memset(node, 0, sizeof(cJSON));
 801063e:	2228      	movs	r2, #40	; 0x28
 8010640:	2100      	movs	r1, #0
 8010642:	f001 fa09 	bl	8011a58 <memset>
    }

    return node;
}
 8010646:	4620      	mov	r0, r4
 8010648:	bd10      	pop	{r4, pc}
 801064a:	bf00      	nop
 801064c:	20010088 	.word	0x20010088

08010650 <ensure>:
    int offset;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static char* ensure(printbuffer *p, int needed)
{
 8010650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char *newbuffer;
    int newsize;
    if (!p || !p->buffer)
 8010652:	4605      	mov	r5, r0
 8010654:	2800      	cmp	r0, #0
 8010656:	d02f      	beq.n	80106b8 <ensure+0x68>
 8010658:	6800      	ldr	r0, [r0, #0]
 801065a:	2800      	cmp	r0, #0
 801065c:	d02c      	beq.n	80106b8 <ensure+0x68>
    {
        return 0;
    }
    needed += p->offset;
 801065e:	68ab      	ldr	r3, [r5, #8]
    if (needed <= p->length)
 8010660:	686a      	ldr	r2, [r5, #4]
    int newsize;
    if (!p || !p->buffer)
    {
        return 0;
    }
    needed += p->offset;
 8010662:	185c      	adds	r4, r3, r1
    if (needed <= p->length)
 8010664:	4294      	cmp	r4, r2
 8010666:	dc01      	bgt.n	801066c <ensure+0x1c>
    {
        return p->buffer + p->offset;
 8010668:	4418      	add	r0, r3
 801066a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

/* calculate the next largest power of 2 */
static int pow2gt (int x)
{
    --x;
 801066c:	3c01      	subs	r4, #1
    {
        return p->buffer + p->offset;
    }

    newsize = pow2gt(needed);
    newbuffer = (char*)cJSON_malloc(newsize);
 801066e:	4b13      	ldr	r3, [pc, #76]	; (80106bc <ensure+0x6c>)
 8010670:	4f13      	ldr	r7, [pc, #76]	; (80106c0 <ensure+0x70>)
/* calculate the next largest power of 2 */
static int pow2gt (int x)
{
    --x;

    x |= x >> 1;
 8010672:	ea44 0464 	orr.w	r4, r4, r4, asr #1
    {
        return p->buffer + p->offset;
    }

    newsize = pow2gt(needed);
    newbuffer = (char*)cJSON_malloc(newsize);
 8010676:	681b      	ldr	r3, [r3, #0]
static int pow2gt (int x)
{
    --x;

    x |= x >> 1;
    x |= x >> 2;
 8010678:	ea44 04a4 	orr.w	r4, r4, r4, asr #2
    x |= x >> 4;
 801067c:	ea44 1424 	orr.w	r4, r4, r4, asr #4
    x |= x >> 8;
 8010680:	ea44 2424 	orr.w	r4, r4, r4, asr #8
    x |= x >> 16;

    return x + 1;
 8010684:	ea44 4424 	orr.w	r4, r4, r4, asr #16
 8010688:	3401      	adds	r4, #1
    {
        return p->buffer + p->offset;
    }

    newsize = pow2gt(needed);
    newbuffer = (char*)cJSON_malloc(newsize);
 801068a:	4620      	mov	r0, r4
 801068c:	4798      	blx	r3
    if (!newbuffer)
 801068e:	4606      	mov	r6, r0
 8010690:	b930      	cbnz	r0, 80106a0 <ensure+0x50>
    {
        cJSON_free(p->buffer);
 8010692:	6828      	ldr	r0, [r5, #0]
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	4798      	blx	r3
        p->length = 0;
 8010698:	606e      	str	r6, [r5, #4]
        p->buffer = 0;
 801069a:	602e      	str	r6, [r5, #0]

        return 0;
 801069c:	4630      	mov	r0, r6
 801069e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (newbuffer)
    {
        memcpy(newbuffer, p->buffer, p->length);
 80106a0:	e895 0006 	ldmia.w	r5, {r1, r2}
 80106a4:	f001 f9cd 	bl	8011a42 <memcpy>
    }
    cJSON_free(p->buffer);
 80106a8:	6828      	ldr	r0, [r5, #0]
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	4798      	blx	r3
    p->length = newsize;
    p->buffer = newbuffer;

    return newbuffer + p->offset;
 80106ae:	68a8      	ldr	r0, [r5, #8]
    if (newbuffer)
    {
        memcpy(newbuffer, p->buffer, p->length);
    }
    cJSON_free(p->buffer);
    p->length = newsize;
 80106b0:	606c      	str	r4, [r5, #4]
    p->buffer = newbuffer;
 80106b2:	602e      	str	r6, [r5, #0]

    return newbuffer + p->offset;
 80106b4:	4430      	add	r0, r6
 80106b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 80106b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ba:	bf00      	nop
 80106bc:	20010088 	.word	0x20010088
 80106c0:	20010084 	.word	0x20010084

080106c4 <cJSON_strdup>:

static void *(*cJSON_malloc)(size_t sz) = malloc;
static void (*cJSON_free)(void *ptr) = free;

static char* cJSON_strdup(const char* str)
{
 80106c4:	b570      	push	{r4, r5, r6, lr}
 80106c6:	4606      	mov	r6, r0
    size_t len;
    char* copy;

    len = strlen(str) + 1;
 80106c8:	f7ef fe02 	bl	80002d0 <strlen>
    if (!(copy = (char*)cJSON_malloc(len)))
 80106cc:	4b06      	ldr	r3, [pc, #24]	; (80106e8 <cJSON_strdup+0x24>)
static char* cJSON_strdup(const char* str)
{
    size_t len;
    char* copy;

    len = strlen(str) + 1;
 80106ce:	1c44      	adds	r4, r0, #1
    if (!(copy = (char*)cJSON_malloc(len)))
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4620      	mov	r0, r4
 80106d4:	4798      	blx	r3
 80106d6:	4605      	mov	r5, r0
 80106d8:	b118      	cbz	r0, 80106e2 <cJSON_strdup+0x1e>
    {
        return 0;
    }
    memcpy(copy, str, len);
 80106da:	4622      	mov	r2, r4
 80106dc:	4631      	mov	r1, r6
 80106de:	f001 f9b0 	bl	8011a42 <memcpy>

    return copy;
}
 80106e2:	4628      	mov	r0, r5
 80106e4:	bd70      	pop	{r4, r5, r6, pc}
 80106e6:	bf00      	nop
 80106e8:	20010088 	.word	0x20010088

080106ec <update>:
    return newbuffer + p->offset;
}

/* calculate the new length of the string in a printbuffer */
static int update(const printbuffer *p)
{
 80106ec:	b510      	push	{r4, lr}
    char *str;
    if (!p || !p->buffer)
 80106ee:	b140      	cbz	r0, 8010702 <update+0x16>
 80106f0:	6803      	ldr	r3, [r0, #0]
 80106f2:	b12b      	cbz	r3, 8010700 <update+0x14>
    {
        return 0;
    }
    str = p->buffer + p->offset;
 80106f4:	6884      	ldr	r4, [r0, #8]

    return p->offset + strlen(str);
 80106f6:	1918      	adds	r0, r3, r4
 80106f8:	f7ef fdea 	bl	80002d0 <strlen>
 80106fc:	4420      	add	r0, r4
 80106fe:	bd10      	pop	{r4, pc}
static int update(const printbuffer *p)
{
    char *str;
    if (!p || !p->buffer)
    {
        return 0;
 8010700:	4618      	mov	r0, r3
    }
    str = p->buffer + p->offset;

    return p->offset + strlen(str);
}
 8010702:	bd10      	pop	{r4, pc}
 8010704:	0000      	movs	r0, r0
	...

08010708 <print_number>:

/* Render the number nicely from the given item into a string. */
static char *print_number(const cJSON *item, printbuffer *p)
{
 8010708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    char *str = 0;
    double d = item->valuedouble;
 801070c:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    return p->offset + strlen(str);
}

/* Render the number nicely from the given item into a string. */
static char *print_number(const cJSON *item, printbuffer *p)
{
 8010710:	4605      	mov	r5, r0
 8010712:	460c      	mov	r4, r1
    char *str = 0;
    double d = item->valuedouble;
    /* special case for 0. */
    if (d == 0)
 8010714:	2200      	movs	r2, #0
 8010716:	2300      	movs	r3, #0
 8010718:	4630      	mov	r0, r6
 801071a:	4639      	mov	r1, r7
 801071c:	f7f0 fa50 	bl	8000bc0 <__aeabi_dcmpeq>
 8010720:	b178      	cbz	r0, 8010742 <print_number+0x3a>
    {
        if (p)
 8010722:	b124      	cbz	r4, 801072e <print_number+0x26>
        {
            str = ensure(p, 2);
 8010724:	2102      	movs	r1, #2
 8010726:	4620      	mov	r0, r4
 8010728:	f7ff ff92 	bl	8010650 <ensure>
 801072c:	e003      	b.n	8010736 <print_number+0x2e>
        }
        else
        {
            str = (char*)cJSON_malloc(2);
 801072e:	4b52      	ldr	r3, [pc, #328]	; (8010878 <print_number+0x170>)
 8010730:	2002      	movs	r0, #2
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	4798      	blx	r3
 8010736:	4604      	mov	r4, r0
        }
        if (str)
 8010738:	2800      	cmp	r0, #0
 801073a:	f000 8088 	beq.w	801084e <print_number+0x146>
        {
            strcpy(str,"0");
 801073e:	494f      	ldr	r1, [pc, #316]	; (801087c <print_number+0x174>)
 8010740:	e047      	b.n	80107d2 <print_number+0xca>
        }
    }
    /* value is an int */
    else if ((fabs(((double)item->valueint) - d) <= DBL_EPSILON) && (d <= INT_MAX) && (d >= INT_MIN))
 8010742:	6968      	ldr	r0, [r5, #20]
 8010744:	f7ef ff6e 	bl	8000624 <__aeabi_i2d>
 8010748:	4632      	mov	r2, r6
 801074a:	463b      	mov	r3, r7
 801074c:	f7ef fe1c 	bl	8000388 <__aeabi_dsub>
 8010750:	2200      	movs	r2, #0
 8010752:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010756:	4b4a      	ldr	r3, [pc, #296]	; (8010880 <print_number+0x178>)
 8010758:	f7f0 fa46 	bl	8000be8 <__aeabi_dcmple>
 801075c:	b300      	cbz	r0, 80107a0 <print_number+0x98>
 801075e:	4630      	mov	r0, r6
 8010760:	4639      	mov	r1, r7
 8010762:	a33d      	add	r3, pc, #244	; (adr r3, 8010858 <print_number+0x150>)
 8010764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010768:	f7f0 fa3e 	bl	8000be8 <__aeabi_dcmple>
 801076c:	b1c0      	cbz	r0, 80107a0 <print_number+0x98>
 801076e:	2200      	movs	r2, #0
 8010770:	4b44      	ldr	r3, [pc, #272]	; (8010884 <print_number+0x17c>)
 8010772:	4630      	mov	r0, r6
 8010774:	4639      	mov	r1, r7
 8010776:	f7f0 fa41 	bl	8000bfc <__aeabi_dcmpge>
 801077a:	b188      	cbz	r0, 80107a0 <print_number+0x98>
    {
        if (p)
 801077c:	b124      	cbz	r4, 8010788 <print_number+0x80>
        {
            str = ensure(p, 21);
 801077e:	2115      	movs	r1, #21
 8010780:	4620      	mov	r0, r4
 8010782:	f7ff ff65 	bl	8010650 <ensure>
 8010786:	e003      	b.n	8010790 <print_number+0x88>
        }
        else
        {
            /* 2^64+1 can be represented in 21 chars. */
            str = (char*)cJSON_malloc(21);
 8010788:	4b3b      	ldr	r3, [pc, #236]	; (8010878 <print_number+0x170>)
 801078a:	2015      	movs	r0, #21
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4798      	blx	r3
 8010790:	4604      	mov	r4, r0
        }
        if (str)
 8010792:	2800      	cmp	r0, #0
 8010794:	d05b      	beq.n	801084e <print_number+0x146>
        {
            sprintf(str, "%d", item->valueint);
 8010796:	696a      	ldr	r2, [r5, #20]
 8010798:	493b      	ldr	r1, [pc, #236]	; (8010888 <print_number+0x180>)
 801079a:	f001 f9b1 	bl	8011b00 <sprintf>
 801079e:	e056      	b.n	801084e <print_number+0x146>
        }
    }
    /* value is a floating point number */
    else
    {
        if (p)
 80107a0:	b124      	cbz	r4, 80107ac <print_number+0xa4>
        {
            /* This is a nice tradeoff. */
            str = ensure(p, 64);
 80107a2:	2140      	movs	r1, #64	; 0x40
 80107a4:	4620      	mov	r0, r4
 80107a6:	f7ff ff53 	bl	8010650 <ensure>
 80107aa:	e003      	b.n	80107b4 <print_number+0xac>
        }
        else
        {
            /* This is a nice tradeoff. */
            str=(char*)cJSON_malloc(64);
 80107ac:	4b32      	ldr	r3, [pc, #200]	; (8010878 <print_number+0x170>)
 80107ae:	2040      	movs	r0, #64	; 0x40
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4798      	blx	r3
 80107b4:	4604      	mov	r4, r0
        }
        if (str)
 80107b6:	2800      	cmp	r0, #0
 80107b8:	d049      	beq.n	801084e <print_number+0x146>
        {
            /* This checks for NaN and Infinity */
            if ((d * 0) != 0)
 80107ba:	2200      	movs	r2, #0
 80107bc:	2300      	movs	r3, #0
 80107be:	4630      	mov	r0, r6
 80107c0:	4639      	mov	r1, r7
 80107c2:	f7ef ff95 	bl	80006f0 <__aeabi_dmul>
 80107c6:	2200      	movs	r2, #0
 80107c8:	2300      	movs	r3, #0
 80107ca:	f7f0 f9f9 	bl	8000bc0 <__aeabi_dcmpeq>
 80107ce:	b920      	cbnz	r0, 80107da <print_number+0xd2>
            {
                sprintf(str, "null");
 80107d0:	492e      	ldr	r1, [pc, #184]	; (801088c <print_number+0x184>)
 80107d2:	4620      	mov	r0, r4
 80107d4:	f001 f9f2 	bl	8011bbc <strcpy>
 80107d8:	e039      	b.n	801084e <print_number+0x146>
            }
            else if ((fabs(floor(d) - d) <= DBL_EPSILON) && (fabs(d) < 1.0e60))
 80107da:	ec47 6b10 	vmov	d0, r6, r7
 80107de:	f006 f9eb 	bl	8016bb8 <floor>
 80107e2:	4632      	mov	r2, r6
 80107e4:	463b      	mov	r3, r7
 80107e6:	ec51 0b10 	vmov	r0, r1, d0
 80107ea:	f7ef fdcd 	bl	8000388 <__aeabi_dsub>
 80107ee:	2200      	movs	r2, #0
 80107f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80107f4:	4b22      	ldr	r3, [pc, #136]	; (8010880 <print_number+0x178>)
 80107f6:	f7f0 f9f7 	bl	8000be8 <__aeabi_dcmple>
 80107fa:	b160      	cbz	r0, 8010816 <print_number+0x10e>
 80107fc:	4630      	mov	r0, r6
 80107fe:	f027 4100 	bic.w	r1, r7, #2147483648	; 0x80000000
 8010802:	a317      	add	r3, pc, #92	; (adr r3, 8010860 <print_number+0x158>)
 8010804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010808:	f7f0 f9e4 	bl	8000bd4 <__aeabi_dcmplt>
 801080c:	b118      	cbz	r0, 8010816 <print_number+0x10e>
            {
                sprintf(str, "%.0f", d);
 801080e:	4632      	mov	r2, r6
 8010810:	463b      	mov	r3, r7
 8010812:	491f      	ldr	r1, [pc, #124]	; (8010890 <print_number+0x188>)
 8010814:	e018      	b.n	8010848 <print_number+0x140>
            }
            else if ((fabs(d) < 1.0e-6) || (fabs(d) > 1.0e9))
 8010816:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 801081a:	4630      	mov	r0, r6
 801081c:	a312      	add	r3, pc, #72	; (adr r3, 8010868 <print_number+0x160>)
 801081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010822:	4649      	mov	r1, r9
 8010824:	f7f0 f9d6 	bl	8000bd4 <__aeabi_dcmplt>
 8010828:	b938      	cbnz	r0, 801083a <print_number+0x132>
 801082a:	4630      	mov	r0, r6
 801082c:	4649      	mov	r1, r9
 801082e:	a310      	add	r3, pc, #64	; (adr r3, 8010870 <print_number+0x168>)
 8010830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010834:	f7f0 f9ec 	bl	8000c10 <__aeabi_dcmpgt>
 8010838:	b118      	cbz	r0, 8010842 <print_number+0x13a>
            {
                sprintf(str, "%e", d);
 801083a:	4632      	mov	r2, r6
 801083c:	463b      	mov	r3, r7
 801083e:	4915      	ldr	r1, [pc, #84]	; (8010894 <print_number+0x18c>)
 8010840:	e002      	b.n	8010848 <print_number+0x140>
            }
            else
            {
                sprintf(str, "%f", d);
 8010842:	4632      	mov	r2, r6
 8010844:	463b      	mov	r3, r7
 8010846:	4914      	ldr	r1, [pc, #80]	; (8010898 <print_number+0x190>)
 8010848:	4620      	mov	r0, r4
 801084a:	f001 f959 	bl	8011b00 <sprintf>
            }
        }
    }
    return str;
}
 801084e:	4620      	mov	r0, r4
 8010850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010854:	f3af 8000 	nop.w
 8010858:	ffc00000 	.word	0xffc00000
 801085c:	41dfffff 	.word	0x41dfffff
 8010860:	e4c2f344 	.word	0xe4c2f344
 8010864:	4c63e9e4 	.word	0x4c63e9e4
 8010868:	a0b5ed8d 	.word	0xa0b5ed8d
 801086c:	3eb0c6f7 	.word	0x3eb0c6f7
 8010870:	00000000 	.word	0x00000000
 8010874:	41cdcd65 	.word	0x41cdcd65
 8010878:	20010088 	.word	0x20010088
 801087c:	0802fbef 	.word	0x0802fbef
 8010880:	3cb00000 	.word	0x3cb00000
 8010884:	c1e00000 	.word	0xc1e00000
 8010888:	0802f503 	.word	0x0802f503
 801088c:	0802fbf1 	.word	0x0802fbf1
 8010890:	0802fbf6 	.word	0x0802fbf6
 8010894:	0802fbfb 	.word	0x0802fbfb
 8010898:	0802fbfe 	.word	0x0802fbfe

0801089c <print_string_ptr>:
    return ptr;
}

/* Render the cstring provided to an escaped version that can be printed. */
static char *print_string_ptr(const char *str, printbuffer *p)
{
 801089c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108a0:	460d      	mov	r5, r1
    int len = 0;
    int flag = 0;
    unsigned char token;

    /* empty string */
    if (!str)
 80108a2:	4607      	mov	r7, r0
 80108a4:	b118      	cbz	r0, 80108ae <print_string_ptr+0x12>
 80108a6:	4606      	mov	r6, r0
 80108a8:	4603      	mov	r3, r0
 80108aa:	2200      	movs	r2, #0
 80108ac:	e01c      	b.n	80108e8 <print_string_ptr+0x4c>
    {
        if (p)
 80108ae:	b121      	cbz	r1, 80108ba <print_string_ptr+0x1e>
        {
            out = ensure(p, 3);
 80108b0:	2103      	movs	r1, #3
 80108b2:	4628      	mov	r0, r5
 80108b4:	f7ff fecc 	bl	8010650 <ensure>
 80108b8:	e003      	b.n	80108c2 <print_string_ptr+0x26>
        }
        else
        {
            out = (char*)cJSON_malloc(3);
 80108ba:	4b4c      	ldr	r3, [pc, #304]	; (80109ec <print_string_ptr+0x150>)
 80108bc:	2003      	movs	r0, #3
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	4798      	blx	r3
 80108c2:	4605      	mov	r5, r0
        }
        if (!out)
 80108c4:	2800      	cmp	r0, #0
 80108c6:	f000 808d 	beq.w	80109e4 <print_string_ptr+0x148>
        {
            return 0;
        }
        strcpy(out, "\"\"");
 80108ca:	4949      	ldr	r1, [pc, #292]	; (80109f0 <print_string_ptr+0x154>)
 80108cc:	f001 f976 	bl	8011bbc <strcpy>
 80108d0:	e088      	b.n	80109e4 <print_string_ptr+0x148>
    {
        flag |= (((*ptr > 0) && (*ptr < 32)) /* unprintable characters */
                || (*ptr == '\"') /* double quote */
                || (*ptr == '\\')) /* backslash */
            ? 1
            : 0;
 80108d2:	1e63      	subs	r3, r4, #1
 80108d4:	2b1e      	cmp	r3, #30
 80108d6:	d90d      	bls.n	80108f4 <print_string_ptr+0x58>

    /* set "flag" to 1 if something needs to be escaped */
    for (ptr = str; *ptr; ptr++)
    {
        flag |= (((*ptr > 0) && (*ptr < 32)) /* unprintable characters */
                || (*ptr == '\"') /* double quote */
 80108d8:	2c22      	cmp	r4, #34	; 0x22
 80108da:	d00b      	beq.n	80108f4 <print_string_ptr+0x58>
                || (*ptr == '\\')) /* backslash */
            ? 1
            : 0;
 80108dc:	f1a4 035c 	sub.w	r3, r4, #92	; 0x5c
 80108e0:	425c      	negs	r4, r3
 80108e2:	415c      	adcs	r4, r3
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (ptr = str; *ptr; ptr++)
    {
        flag |= (((*ptr > 0) && (*ptr < 32)) /* unprintable characters */
 80108e4:	4322      	orrs	r2, r4
 80108e6:	460b      	mov	r3, r1

        return out;
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (ptr = str; *ptr; ptr++)
 80108e8:	4619      	mov	r1, r3
 80108ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108ee:	2c00      	cmp	r4, #0
 80108f0:	d1ef      	bne.n	80108d2 <print_string_ptr+0x36>
 80108f2:	e001      	b.n	80108f8 <print_string_ptr+0x5c>
    {
        flag |= (((*ptr > 0) && (*ptr < 32)) /* unprintable characters */
                || (*ptr == '\"') /* double quote */
                || (*ptr == '\\')) /* backslash */
            ? 1
            : 0;
 80108f4:	2401      	movs	r4, #1
 80108f6:	e7f5      	b.n	80108e4 <print_string_ptr+0x48>
    }
    /* no characters have to be escaped */
    if (!flag)
 80108f8:	b10a      	cbz	r2, 80108fe <print_string_ptr+0x62>
 80108fa:	3f01      	subs	r7, #1
 80108fc:	e01e      	b.n	801093c <print_string_ptr+0xa0>
    {
        len = ptr - str;
 80108fe:	1bdc      	subs	r4, r3, r7
 8010900:	1ce1      	adds	r1, r4, #3
        if (p)
 8010902:	b11d      	cbz	r5, 801090c <print_string_ptr+0x70>
        {
            out = ensure(p, len + 3);
 8010904:	4628      	mov	r0, r5
 8010906:	f7ff fea3 	bl	8010650 <ensure>
 801090a:	e003      	b.n	8010914 <print_string_ptr+0x78>
        }
        else
        {
            out = (char*)cJSON_malloc(len + 3);
 801090c:	4b37      	ldr	r3, [pc, #220]	; (80109ec <print_string_ptr+0x150>)
 801090e:	4608      	mov	r0, r1
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	4798      	blx	r3
 8010914:	4605      	mov	r5, r0
        }
        if (!out)
 8010916:	2800      	cmp	r0, #0
 8010918:	d064      	beq.n	80109e4 <print_string_ptr+0x148>
        {
            return 0;
        }

        ptr2 = out;
        *ptr2++ = '\"';
 801091a:	1c43      	adds	r3, r0, #1
 801091c:	2622      	movs	r6, #34	; 0x22
        strcpy(ptr2, str);
 801091e:	4639      	mov	r1, r7
        {
            return 0;
        }

        ptr2 = out;
        *ptr2++ = '\"';
 8010920:	7006      	strb	r6, [r0, #0]
        strcpy(ptr2, str);
 8010922:	4618      	mov	r0, r3
 8010924:	f001 f94a 	bl	8011bbc <strcpy>
        ptr2[len] = '\"';
        ptr2[len + 1] = '\0';
 8010928:	2300      	movs	r3, #0
        }

        ptr2 = out;
        *ptr2++ = '\"';
        strcpy(ptr2, str);
        ptr2[len] = '\"';
 801092a:	5506      	strb	r6, [r0, r4]
        ptr2[len + 1] = '\0';
 801092c:	4404      	add	r4, r0
 801092e:	e058      	b.n	80109e2 <print_string_ptr+0x146>

    ptr = str;
    /* calculate additional space that is needed for escaping */
    while ((token = *ptr) && ++len)
    {
        if (strchr("\"\\\b\f\n\r\t", token))
 8010930:	4641      	mov	r1, r8
 8010932:	4830      	ldr	r0, [pc, #192]	; (80109f4 <print_string_ptr+0x158>)
 8010934:	f001 f934 	bl	8011ba0 <strchr>
 8010938:	b130      	cbz	r0, 8010948 <print_string_ptr+0xac>
        {
            len++; /* +1 for the backslash */
 801093a:	3402      	adds	r4, #2
        return out;
    }

    ptr = str;
    /* calculate additional space that is needed for escaping */
    while ((token = *ptr) && ++len)
 801093c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8010940:	f1b8 0f00 	cmp.w	r8, #0
 8010944:	d1f4      	bne.n	8010930 <print_string_ptr+0x94>
 8010946:	e005      	b.n	8010954 <print_string_ptr+0xb8>
    {
        if (strchr("\"\\\b\f\n\r\t", token))
        {
            len++; /* +1 for the backslash */
        }
        else if (token < 32)
 8010948:	f1b8 0f1f 	cmp.w	r8, #31
        return out;
    }

    ptr = str;
    /* calculate additional space that is needed for escaping */
    while ((token = *ptr) && ++len)
 801094c:	bf8c      	ite	hi
 801094e:	3401      	addhi	r4, #1
        {
            len++; /* +1 for the backslash */
        }
        else if (token < 32)
        {
            len += 5; /* +5 for \uXXXX */
 8010950:	3406      	addls	r4, #6
 8010952:	e7f3      	b.n	801093c <print_string_ptr+0xa0>
 8010954:	1ce1      	adds	r1, r4, #3
        }
        ptr++;
    }

    if (p)
 8010956:	b11d      	cbz	r5, 8010960 <print_string_ptr+0xc4>
    {
        out = ensure(p, len + 3);
 8010958:	4628      	mov	r0, r5
 801095a:	f7ff fe79 	bl	8010650 <ensure>
 801095e:	e003      	b.n	8010968 <print_string_ptr+0xcc>
    }
    else
    {
        out = (char*)cJSON_malloc(len + 3);
 8010960:	4b22      	ldr	r3, [pc, #136]	; (80109ec <print_string_ptr+0x150>)
 8010962:	4608      	mov	r0, r1
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4798      	blx	r3
 8010968:	4605      	mov	r5, r0
    }
    if (!out)
 801096a:	b3d8      	cbz	r0, 80109e4 <print_string_ptr+0x148>
        return 0;
    }

    ptr2 = out;
    ptr = str;
    *ptr2++ = '\"';
 801096c:	2322      	movs	r3, #34	; 0x22
 801096e:	1c44      	adds	r4, r0, #1
            *ptr2++ = *ptr++;
        }
        else
        {
            /* character needs to be escaped */
            *ptr2++ = '\\';
 8010970:	275c      	movs	r7, #92	; 0x5c
                    break;
                case '\b':
                    *ptr2++ = 'b';
                    break;
                case '\f':
                    *ptr2++ = 'f';
 8010972:	f04f 0866 	mov.w	r8, #102	; 0x66
        return 0;
    }

    ptr2 = out;
    ptr = str;
    *ptr2++ = '\"';
 8010976:	7003      	strb	r3, [r0, #0]
    /* copy the string */
    while (*ptr)
 8010978:	f816 3b01 	ldrb.w	r3, [r6], #1
 801097c:	b37b      	cbz	r3, 80109de <print_string_ptr+0x142>
    {
        if (((unsigned char)*ptr > 31) && (*ptr != '\"') && (*ptr != '\\'))
 801097e:	2b1f      	cmp	r3, #31
 8010980:	d906      	bls.n	8010990 <print_string_ptr+0xf4>
 8010982:	2b22      	cmp	r3, #34	; 0x22
 8010984:	d004      	beq.n	8010990 <print_string_ptr+0xf4>
 8010986:	2b5c      	cmp	r3, #92	; 0x5c
 8010988:	d002      	beq.n	8010990 <print_string_ptr+0xf4>
        {
            /* normal character, copy */
            *ptr2++ = *ptr++;
 801098a:	7023      	strb	r3, [r4, #0]
 801098c:	3401      	adds	r4, #1
 801098e:	e7f3      	b.n	8010978 <print_string_ptr+0xdc>
        }
        else
        {
            /* character needs to be escaped */
            *ptr2++ = '\\';
 8010990:	7027      	strb	r7, [r4, #0]
            switch (token = *ptr++)
 8010992:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010996:	2a0c      	cmp	r2, #12
 8010998:	d012      	beq.n	80109c0 <print_string_ptr+0x124>
 801099a:	d807      	bhi.n	80109ac <print_string_ptr+0x110>
 801099c:	2a09      	cmp	r2, #9
 801099e:	d014      	beq.n	80109ca <print_string_ptr+0x12e>
 80109a0:	2a0a      	cmp	r2, #10
 80109a2:	d010      	beq.n	80109c6 <print_string_ptr+0x12a>
 80109a4:	2a08      	cmp	r2, #8
 80109a6:	d114      	bne.n	80109d2 <print_string_ptr+0x136>
                    break;
                case '\"':
                    *ptr2++ = '\"';
                    break;
                case '\b':
                    *ptr2++ = 'b';
 80109a8:	2362      	movs	r3, #98	; 0x62
 80109aa:	e00f      	b.n	80109cc <print_string_ptr+0x130>
        }
        else
        {
            /* character needs to be escaped */
            *ptr2++ = '\\';
            switch (token = *ptr++)
 80109ac:	2a22      	cmp	r2, #34	; 0x22
 80109ae:	d005      	beq.n	80109bc <print_string_ptr+0x120>
 80109b0:	2a5c      	cmp	r2, #92	; 0x5c
 80109b2:	d003      	beq.n	80109bc <print_string_ptr+0x120>
 80109b4:	2a0d      	cmp	r2, #13
 80109b6:	d10c      	bne.n	80109d2 <print_string_ptr+0x136>
                    break;
                case '\n':
                    *ptr2++ = 'n';
                    break;
                case '\r':
                    *ptr2++ = 'r';
 80109b8:	2372      	movs	r3, #114	; 0x72
 80109ba:	e007      	b.n	80109cc <print_string_ptr+0x130>
            {
                case '\\':
                    *ptr2++ = '\\';
                    break;
                case '\"':
                    *ptr2++ = '\"';
 80109bc:	7062      	strb	r2, [r4, #1]
 80109be:	e006      	b.n	80109ce <print_string_ptr+0x132>
                    break;
                case '\b':
                    *ptr2++ = 'b';
                    break;
                case '\f':
                    *ptr2++ = 'f';
 80109c0:	f884 8001 	strb.w	r8, [r4, #1]
 80109c4:	e003      	b.n	80109ce <print_string_ptr+0x132>
                    break;
                case '\n':
                    *ptr2++ = 'n';
 80109c6:	236e      	movs	r3, #110	; 0x6e
 80109c8:	e000      	b.n	80109cc <print_string_ptr+0x130>
                    break;
                case '\r':
                    *ptr2++ = 'r';
                    break;
                case '\t':
                    *ptr2++ = 't';
 80109ca:	2374      	movs	r3, #116	; 0x74
 80109cc:	7063      	strb	r3, [r4, #1]
 80109ce:	3402      	adds	r4, #2
                    break;
 80109d0:	e7d2      	b.n	8010978 <print_string_ptr+0xdc>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf(ptr2, "u%04x", token);
 80109d2:	1c60      	adds	r0, r4, #1
 80109d4:	4908      	ldr	r1, [pc, #32]	; (80109f8 <print_string_ptr+0x15c>)
 80109d6:	f001 f893 	bl	8011b00 <sprintf>
                    ptr2 += 5;
 80109da:	3406      	adds	r4, #6
                    break;
 80109dc:	e7cc      	b.n	8010978 <print_string_ptr+0xdc>
            }
        }
    }
    *ptr2++ = '\"';
 80109de:	2222      	movs	r2, #34	; 0x22
 80109e0:	7022      	strb	r2, [r4, #0]
    *ptr2++ = '\0';
 80109e2:	7063      	strb	r3, [r4, #1]
    {
        out = (char*)cJSON_malloc(len + 3);
    }
    if (!out)
    {
        return 0;
 80109e4:	4628      	mov	r0, r5
    }
    *ptr2++ = '\"';
    *ptr2++ = '\0';

    return out;
}
 80109e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ea:	bf00      	nop
 80109ec:	20010088 	.word	0x20010088
 80109f0:	0802fc01 	.word	0x0802fc01
 80109f4:	0802fc04 	.word	0x0802fc04
 80109f8:	0802fc0c 	.word	0x0802fc0c
 80109fc:	00000000 	.word	0x00000000

08010a00 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item, const char *value, const char **ep)
{
 8010a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	4605      	mov	r5, r0
 8010a06:	4616      	mov	r6, r2
    if (!value)
 8010a08:	460c      	mov	r4, r1
 8010a0a:	2900      	cmp	r1, #0
 8010a0c:	f000 8193 	beq.w	8010d36 <parse_value+0x336>
        /* Fail on null. */
        return 0;
    }

    /* parse the different types of values */
    if (!strncmp(value, "null", 4))
 8010a10:	2204      	movs	r2, #4
 8010a12:	49c3      	ldr	r1, [pc, #780]	; (8010d20 <parse_value+0x320>)
 8010a14:	4620      	mov	r0, r4
 8010a16:	f001 f8d9 	bl	8011bcc <strncmp>
 8010a1a:	b918      	cbnz	r0, 8010a24 <parse_value+0x24>
    {
        item->type = cJSON_NULL;
 8010a1c:	2304      	movs	r3, #4
 8010a1e:	60eb      	str	r3, [r5, #12]
        return value + 4;
 8010a20:	18e0      	adds	r0, r4, r3
 8010a22:	e189      	b.n	8010d38 <parse_value+0x338>
    }
    if (!strncmp(value, "false", 5))
 8010a24:	2205      	movs	r2, #5
 8010a26:	49bf      	ldr	r1, [pc, #764]	; (8010d24 <parse_value+0x324>)
 8010a28:	4620      	mov	r0, r4
 8010a2a:	f001 f8cf 	bl	8011bcc <strncmp>
 8010a2e:	b918      	cbnz	r0, 8010a38 <parse_value+0x38>
    {
        item->type = cJSON_False;
 8010a30:	2301      	movs	r3, #1
        return value + 5;
 8010a32:	1d60      	adds	r0, r4, #5
        item->type = cJSON_NULL;
        return value + 4;
    }
    if (!strncmp(value, "false", 5))
    {
        item->type = cJSON_False;
 8010a34:	60eb      	str	r3, [r5, #12]
        return value + 5;
 8010a36:	e17f      	b.n	8010d38 <parse_value+0x338>
    }
    if (!strncmp(value, "true", 4))
 8010a38:	2204      	movs	r2, #4
 8010a3a:	49bb      	ldr	r1, [pc, #748]	; (8010d28 <parse_value+0x328>)
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f001 f8c5 	bl	8011bcc <strncmp>
 8010a42:	b928      	cbnz	r0, 8010a50 <parse_value+0x50>
    {
        item->type = cJSON_True;
 8010a44:	2302      	movs	r3, #2
        item->valueint = 1;
        return value + 4;
 8010a46:	1d20      	adds	r0, r4, #4
        item->type = cJSON_False;
        return value + 5;
    }
    if (!strncmp(value, "true", 4))
    {
        item->type = cJSON_True;
 8010a48:	60eb      	str	r3, [r5, #12]
        item->valueint = 1;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	616b      	str	r3, [r5, #20]
        return value + 4;
 8010a4e:	e173      	b.n	8010d38 <parse_value+0x338>
    }
    if (*value == '\"')
 8010a50:	7823      	ldrb	r3, [r4, #0]
 8010a52:	2b22      	cmp	r3, #34	; 0x22
 8010a54:	d107      	bne.n	8010a66 <parse_value+0x66>
    {
        return parse_string(item, value, ep);
 8010a56:	4632      	mov	r2, r6
 8010a58:	4621      	mov	r1, r4
 8010a5a:	4628      	mov	r0, r5
    {
        return parse_object(item, value, ep);
    }

    *ep=value;return 0;	/* failure. */
}
 8010a5c:	b003      	add	sp, #12
 8010a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        item->valueint = 1;
        return value + 4;
    }
    if (*value == '\"')
    {
        return parse_string(item, value, ep);
 8010a62:	f7ff bcfd 	b.w	8010460 <parse_string>
    }
    if ((*value == '-') || ((*value >= '0') && (*value <= '9')))
 8010a66:	2b2d      	cmp	r3, #45	; 0x2d
 8010a68:	d007      	beq.n	8010a7a <parse_value+0x7a>
 8010a6a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010a6e:	2a09      	cmp	r2, #9
 8010a70:	f200 80a1 	bhi.w	8010bb6 <parse_value+0x1b6>

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
 8010a74:	ed9f 7ba4 	vldr	d7, [pc, #656]	; 8010d08 <parse_value+0x308>
 8010a78:	e002      	b.n	8010a80 <parse_value+0x80>
    int signsubscale = 1;

    /* Has sign? */
    if (*num == '-')
    {
        sign = -1;
 8010a7a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 8010d10 <parse_value+0x310>
        num++;
 8010a7e:	3401      	adds	r4, #1
    }
    /* is zero */
    if (*num == '0')
 8010a80:	7823      	ldrb	r3, [r4, #0]
    {
        num++;
    }
    /* Number? */
    if ((*num >= '1') && (*num <= '9'))
 8010a82:	2600      	movs	r6, #0
 8010a84:	2700      	movs	r7, #0
    {
        sign = -1;
        num++;
    }
    /* is zero */
    if (*num == '0')
 8010a86:	2b30      	cmp	r3, #48	; 0x30
    {
        num++;
 8010a88:	bf08      	it	eq
 8010a8a:	3401      	addeq	r4, #1
    }
    /* Number? */
    if ((*num >= '1') && (*num <= '9'))
 8010a8c:	7823      	ldrb	r3, [r4, #0]
 8010a8e:	3b31      	subs	r3, #49	; 0x31
 8010a90:	2b08      	cmp	r3, #8

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
 8010a92:	ed8d 7b00 	vstr	d7, [sp]
    if (*num == '0')
    {
        num++;
    }
    /* Number? */
    if ((*num >= '1') && (*num <= '9'))
 8010a96:	d816      	bhi.n	8010ac6 <parse_value+0xc6>
    {
        do
        {
            n = (n * 10.0) + (*num++ - '0');
 8010a98:	2200      	movs	r2, #0
 8010a9a:	4ba4      	ldr	r3, [pc, #656]	; (8010d2c <parse_value+0x32c>)
 8010a9c:	4630      	mov	r0, r6
 8010a9e:	4639      	mov	r1, r7
 8010aa0:	f7ef fe26 	bl	80006f0 <__aeabi_dmul>
 8010aa4:	4606      	mov	r6, r0
 8010aa6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010aaa:	460f      	mov	r7, r1
 8010aac:	3830      	subs	r0, #48	; 0x30
 8010aae:	f7ef fdb9 	bl	8000624 <__aeabi_i2d>
 8010ab2:	463b      	mov	r3, r7
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	f7ef fc69 	bl	800038c <__adddf3>
        }
        while ((*num >= '0') && (*num<='9'));
 8010aba:	7823      	ldrb	r3, [r4, #0]
    /* Number? */
    if ((*num >= '1') && (*num <= '9'))
    {
        do
        {
            n = (n * 10.0) + (*num++ - '0');
 8010abc:	4606      	mov	r6, r0
 8010abe:	460f      	mov	r7, r1
        }
        while ((*num >= '0') && (*num<='9'));
 8010ac0:	3b30      	subs	r3, #48	; 0x30
 8010ac2:	2b09      	cmp	r3, #9
 8010ac4:	e7e7      	b.n	8010a96 <parse_value+0x96>
    }
    /* Fractional part? */
    if ((*num == '.') && (num[1] >= '0') && (num[1] <= '9'))
 8010ac6:	7823      	ldrb	r3, [r4, #0]
 8010ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8010aca:	d128      	bne.n	8010b1e <parse_value+0x11e>
 8010acc:	7863      	ldrb	r3, [r4, #1]
 8010ace:	3b30      	subs	r3, #48	; 0x30
 8010ad0:	2b09      	cmp	r3, #9
 8010ad2:	d824      	bhi.n	8010b1e <parse_value+0x11e>
    {
        num++;
 8010ad4:	3401      	adds	r4, #1
/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
    double scale = 0;
 8010ad6:	f04f 0800 	mov.w	r8, #0
 8010ada:	f04f 0900 	mov.w	r9, #0
    if ((*num == '.') && (num[1] >= '0') && (num[1] <= '9'))
    {
        num++;
        do
        {
            n = (n  *10.0) + (*num++ - '0');
 8010ade:	2200      	movs	r2, #0
 8010ae0:	4b92      	ldr	r3, [pc, #584]	; (8010d2c <parse_value+0x32c>)
 8010ae2:	4630      	mov	r0, r6
 8010ae4:	4639      	mov	r1, r7
 8010ae6:	f7ef fe03 	bl	80006f0 <__aeabi_dmul>
 8010aea:	4606      	mov	r6, r0
 8010aec:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010af0:	460f      	mov	r7, r1
 8010af2:	3830      	subs	r0, #48	; 0x30
 8010af4:	f7ef fd96 	bl	8000624 <__aeabi_i2d>
 8010af8:	4632      	mov	r2, r6
 8010afa:	463b      	mov	r3, r7
 8010afc:	f7ef fc46 	bl	800038c <__adddf3>
            scale--;
 8010b00:	4b8b      	ldr	r3, [pc, #556]	; (8010d30 <parse_value+0x330>)
    if ((*num == '.') && (num[1] >= '0') && (num[1] <= '9'))
    {
        num++;
        do
        {
            n = (n  *10.0) + (*num++ - '0');
 8010b02:	4606      	mov	r6, r0
 8010b04:	460f      	mov	r7, r1
            scale--;
 8010b06:	4640      	mov	r0, r8
 8010b08:	4649      	mov	r1, r9
 8010b0a:	2200      	movs	r2, #0
 8010b0c:	f7ef fc3c 	bl	8000388 <__aeabi_dsub>
        } while ((*num >= '0') && (*num <= '9'));
 8010b10:	7823      	ldrb	r3, [r4, #0]
    {
        num++;
        do
        {
            n = (n  *10.0) + (*num++ - '0');
            scale--;
 8010b12:	4680      	mov	r8, r0
 8010b14:	4689      	mov	r9, r1
        } while ((*num >= '0') && (*num <= '9'));
 8010b16:	3b30      	subs	r3, #48	; 0x30
 8010b18:	2b09      	cmp	r3, #9
 8010b1a:	d9e0      	bls.n	8010ade <parse_value+0xde>
 8010b1c:	e003      	b.n	8010b26 <parse_value+0x126>
/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
    double scale = 0;
 8010b1e:	f04f 0800 	mov.w	r8, #0
 8010b22:	f04f 0900 	mov.w	r9, #0
            n = (n  *10.0) + (*num++ - '0');
            scale--;
        } while ((*num >= '0') && (*num <= '9'));
    }
    /* Exponent? */
    if ((*num == 'e') || (*num == 'E'))
 8010b26:	7823      	ldrb	r3, [r4, #0]
 8010b28:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010b2c:	2b45      	cmp	r3, #69	; 0x45
 8010b2e:	d11a      	bne.n	8010b66 <parse_value+0x166>
    {
        num++;
        /* With sign? */
        if (*num == '+')
 8010b30:	7863      	ldrb	r3, [r4, #1]
 8010b32:	2b2b      	cmp	r3, #43	; 0x2b
 8010b34:	d101      	bne.n	8010b3a <parse_value+0x13a>
        {
            num++;
 8010b36:	1ca0      	adds	r0, r4, #2
 8010b38:	e002      	b.n	8010b40 <parse_value+0x140>
        }
        else if (*num == '-')
 8010b3a:	2b2d      	cmp	r3, #45	; 0x2d
 8010b3c:	d003      	beq.n	8010b46 <parse_value+0x146>
        } while ((*num >= '0') && (*num <= '9'));
    }
    /* Exponent? */
    if ((*num == 'e') || (*num == 'E'))
    {
        num++;
 8010b3e:	1c60      	adds	r0, r4, #1
{
    double n = 0;
    double sign = 1;
    double scale = 0;
    int subscale = 0;
    int signsubscale = 1;
 8010b40:	f04f 0b01 	mov.w	fp, #1
 8010b44:	e002      	b.n	8010b4c <parse_value+0x14c>
            num++;
        }
        else if (*num == '-')
        {
            signsubscale = -1;
            num++;
 8010b46:	1ca0      	adds	r0, r4, #2
        {
            num++;
        }
        else if (*num == '-')
        {
            signsubscale = -1;
 8010b48:	f04f 3bff 	mov.w	fp, #4294967295
 8010b4c:	f04f 0a00 	mov.w	sl, #0
            num++;
        }
        /* Number? */
        while ((*num>='0') && (*num<='9'))
        {
            subscale = (subscale * 10) + (*num++ - '0');
 8010b50:	210a      	movs	r1, #10
 8010b52:	4604      	mov	r4, r0
        {
            signsubscale = -1;
            num++;
        }
        /* Number? */
        while ((*num>='0') && (*num<='9'))
 8010b54:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010b58:	3b30      	subs	r3, #48	; 0x30
 8010b5a:	b2da      	uxtb	r2, r3
 8010b5c:	2a09      	cmp	r2, #9
 8010b5e:	d806      	bhi.n	8010b6e <parse_value+0x16e>
        {
            subscale = (subscale * 10) + (*num++ - '0');
 8010b60:	fb01 3a0a 	mla	sl, r1, sl, r3
 8010b64:	e7f5      	b.n	8010b52 <parse_value+0x152>
{
    double n = 0;
    double sign = 1;
    double scale = 0;
    int subscale = 0;
    int signsubscale = 1;
 8010b66:	f04f 0b01 	mov.w	fp, #1
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
    double scale = 0;
    int subscale = 0;
 8010b6a:	f04f 0a00 	mov.w	sl, #0
            subscale = (subscale * 10) + (*num++ - '0');
        }
    }

    /* number = +/- number.fraction * 10^+/- exponent */
    n = sign * n * pow(10.0, (scale + subscale * signsubscale));
 8010b6e:	4630      	mov	r0, r6
 8010b70:	4639      	mov	r1, r7
 8010b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010b76:	f7ef fdbb 	bl	80006f0 <__aeabi_dmul>
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	fb0b f00a 	mul.w	r0, fp, sl
 8010b80:	460f      	mov	r7, r1
 8010b82:	f7ef fd4f 	bl	8000624 <__aeabi_i2d>
 8010b86:	4642      	mov	r2, r8
 8010b88:	464b      	mov	r3, r9
 8010b8a:	f7ef fbff 	bl	800038c <__adddf3>
 8010b8e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8010d18 <parse_value+0x318>
 8010b92:	ec41 0b11 	vmov	d1, r0, r1
 8010b96:	f006 f893 	bl	8016cc0 <pow>
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	4639      	mov	r1, r7
 8010b9e:	ec53 2b10 	vmov	r2, r3, d0
 8010ba2:	f7ef fda5 	bl	80006f0 <__aeabi_dmul>

    item->valuedouble = n;
 8010ba6:	e9c5 0106 	strd	r0, r1, [r5, #24]
    item->valueint = (int)n;
 8010baa:	f7f0 f851 	bl	8000c50 <__aeabi_d2iz>
    item->type = cJSON_Number;
 8010bae:	2308      	movs	r3, #8

    /* number = +/- number.fraction * 10^+/- exponent */
    n = sign * n * pow(10.0, (scale + subscale * signsubscale));

    item->valuedouble = n;
    item->valueint = (int)n;
 8010bb0:	6168      	str	r0, [r5, #20]
    item->type = cJSON_Number;
 8010bb2:	60eb      	str	r3, [r5, #12]
 8010bb4:	e064      	b.n	8010c80 <parse_value+0x280>
    }
    if ((*value == '-') || ((*value >= '0') && (*value <= '9')))
    {
        return parse_number(item, value);
    }
    if (*value == '[')
 8010bb6:	2b5b      	cmp	r3, #91	; 0x5b
 8010bb8:	d13b      	bne.n	8010c32 <parse_value+0x232>
        /* not an array! */
        *ep = value;
        return 0;
    }

    item->type = cJSON_Array;
 8010bba:	2320      	movs	r3, #32
    value = skip(value + 1);
 8010bbc:	1c60      	adds	r0, r4, #1
        /* not an array! */
        *ep = value;
        return 0;
    }

    item->type = cJSON_Array;
 8010bbe:	60eb      	str	r3, [r5, #12]
    value = skip(value + 1);
 8010bc0:	f7ff fd2c 	bl	801061c <skip>
    if (*value == ']')
 8010bc4:	7803      	ldrb	r3, [r0, #0]
        *ep = value;
        return 0;
    }

    item->type = cJSON_Array;
    value = skip(value + 1);
 8010bc6:	4604      	mov	r4, r0
    if (*value == ']')
 8010bc8:	2b5d      	cmp	r3, #93	; 0x5d
 8010bca:	d03d      	beq.n	8010c48 <parse_value+0x248>
    {
        /* empty array. */
        return value + 1;
    }

    item->child = child = cJSON_New_Item();
 8010bcc:	f7ff fd30 	bl	8010630 <cJSON_New_Item>
 8010bd0:	4607      	mov	r7, r0
 8010bd2:	60a8      	str	r0, [r5, #8]
    if (!item->child)
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	f000 80ae 	beq.w	8010d36 <parse_value+0x336>
    {
        /* memory fail */
        return 0;
    }
    /* skip any spacing, get the value. */
    value = skip(parse_value(child, skip(value), ep));
 8010bda:	4620      	mov	r0, r4
 8010bdc:	f7ff fd1e 	bl	801061c <skip>
 8010be0:	4632      	mov	r2, r6
 8010be2:	4601      	mov	r1, r0
 8010be4:	4638      	mov	r0, r7
 8010be6:	f7ff ff0b 	bl	8010a00 <parse_value>
 8010bea:	f7ff fd17 	bl	801061c <skip>
    if (!value)
 8010bee:	4604      	mov	r4, r0
 8010bf0:	2800      	cmp	r0, #0
 8010bf2:	f000 80a0 	beq.w	8010d36 <parse_value+0x336>
    {
        return 0;
    }

    /* loop through the comma separated array elements */
    while (*value == ',')
 8010bf6:	7823      	ldrb	r3, [r4, #0]
 8010bf8:	2b2c      	cmp	r3, #44	; 0x2c
 8010bfa:	d117      	bne.n	8010c2c <parse_value+0x22c>
    {
        cJSON *new_item;
        if (!(new_item = cJSON_New_Item()))
 8010bfc:	f7ff fd18 	bl	8010630 <cJSON_New_Item>
 8010c00:	4605      	mov	r5, r0
 8010c02:	2800      	cmp	r0, #0
 8010c04:	f000 8097 	beq.w	8010d36 <parse_value+0x336>
        {
            /* memory fail */
            return 0;
        }
        /* add new item to end of the linked list */
        child->next = new_item;
 8010c08:	6038      	str	r0, [r7, #0]
        new_item->prev = child;
 8010c0a:	6047      	str	r7, [r0, #4]
        child = new_item;

        /* go to the next comma */
        value = skip(parse_value(child, skip(value + 1), ep));
 8010c0c:	1c60      	adds	r0, r4, #1
 8010c0e:	f7ff fd05 	bl	801061c <skip>
 8010c12:	4632      	mov	r2, r6
 8010c14:	4601      	mov	r1, r0
 8010c16:	4628      	mov	r0, r5
 8010c18:	f7ff fef2 	bl	8010a00 <parse_value>
 8010c1c:	f7ff fcfe 	bl	801061c <skip>
        if (!value)
 8010c20:	4604      	mov	r4, r0
 8010c22:	2800      	cmp	r0, #0
 8010c24:	f000 8087 	beq.w	8010d36 <parse_value+0x336>
 8010c28:	462f      	mov	r7, r5
 8010c2a:	e7e4      	b.n	8010bf6 <parse_value+0x1f6>
            /* memory fail */
            return 0;
        }
    }

    if (*value == ']')
 8010c2c:	2b5d      	cmp	r3, #93	; 0x5d
 8010c2e:	d00b      	beq.n	8010c48 <parse_value+0x248>
 8010c30:	e080      	b.n	8010d34 <parse_value+0x334>
    }
    if (*value == '[')
    {
        return parse_array(item, value, ep);
    }
    if (*value == '{')
 8010c32:	2b7b      	cmp	r3, #123	; 0x7b
 8010c34:	d17e      	bne.n	8010d34 <parse_value+0x334>
        /* not an object! */
        *ep = value;
        return 0;
    }

    item->type = cJSON_Object;
 8010c36:	2340      	movs	r3, #64	; 0x40
    value = skip(value + 1);
 8010c38:	1c60      	adds	r0, r4, #1
        /* not an object! */
        *ep = value;
        return 0;
    }

    item->type = cJSON_Object;
 8010c3a:	60eb      	str	r3, [r5, #12]
    value = skip(value + 1);
 8010c3c:	f7ff fcee 	bl	801061c <skip>
    if (*value == '}')
 8010c40:	7803      	ldrb	r3, [r0, #0]
        *ep = value;
        return 0;
    }

    item->type = cJSON_Object;
    value = skip(value + 1);
 8010c42:	4604      	mov	r4, r0
    if (*value == '}')
 8010c44:	2b7d      	cmp	r3, #125	; 0x7d
 8010c46:	d101      	bne.n	8010c4c <parse_value+0x24c>
    {
        /* empty object. */
        return value + 1;
 8010c48:	1c60      	adds	r0, r4, #1
 8010c4a:	e075      	b.n	8010d38 <parse_value+0x338>
    }

    child = cJSON_New_Item();
 8010c4c:	f7ff fcf0 	bl	8010630 <cJSON_New_Item>
 8010c50:	4607      	mov	r7, r0
    item->child = child;
 8010c52:	60a8      	str	r0, [r5, #8]
    if (!item->child)
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d06e      	beq.n	8010d36 <parse_value+0x336>
    {
        return 0;
    }
    /* parse first key */
    value = skip(parse_string(child, skip(value), ep));
 8010c58:	4620      	mov	r0, r4
 8010c5a:	f7ff fcdf 	bl	801061c <skip>
 8010c5e:	4632      	mov	r2, r6
 8010c60:	4601      	mov	r1, r0
 8010c62:	4638      	mov	r0, r7
 8010c64:	f7ff fbfc 	bl	8010460 <parse_string>
 8010c68:	f7ff fcd8 	bl	801061c <skip>
    if (!value)
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d062      	beq.n	8010d36 <parse_value+0x336>
    {
        return 0;
    }
    /* use string as key, not value */
    child->string = child->valuestring;
 8010c70:	693b      	ldr	r3, [r7, #16]
    child->valuestring = 0;
 8010c72:	2400      	movs	r4, #0
    if (!value)
    {
        return 0;
    }
    /* use string as key, not value */
    child->string = child->valuestring;
 8010c74:	623b      	str	r3, [r7, #32]
    child->valuestring = 0;
 8010c76:	613c      	str	r4, [r7, #16]

    if (*value != ':')
 8010c78:	7803      	ldrb	r3, [r0, #0]
 8010c7a:	2b3a      	cmp	r3, #58	; 0x3a
 8010c7c:	d002      	beq.n	8010c84 <parse_value+0x284>
    {
        /* invalid object. */
        *ep = value;
 8010c7e:	6030      	str	r0, [r6, #0]
        return 0;
 8010c80:	4620      	mov	r0, r4
 8010c82:	e059      	b.n	8010d38 <parse_value+0x338>
    }
    /* skip any spacing, get the value. */
    value = skip(parse_value(child, skip(value + 1), ep));
 8010c84:	3001      	adds	r0, #1
 8010c86:	f7ff fcc9 	bl	801061c <skip>
 8010c8a:	4632      	mov	r2, r6
 8010c8c:	4601      	mov	r1, r0
 8010c8e:	4638      	mov	r0, r7
 8010c90:	f7ff feb6 	bl	8010a00 <parse_value>
 8010c94:	f7ff fcc2 	bl	801061c <skip>
    if (!value)
 8010c98:	4680      	mov	r8, r0
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	d04b      	beq.n	8010d36 <parse_value+0x336>
    {
        return 0;
    }

    while (*value == ',')
 8010c9e:	f898 3000 	ldrb.w	r3, [r8]
 8010ca2:	2b2c      	cmp	r3, #44	; 0x2c
 8010ca4:	d128      	bne.n	8010cf8 <parse_value+0x2f8>
    {
        cJSON *new_item;
        if (!(new_item = cJSON_New_Item()))
 8010ca6:	f7ff fcc3 	bl	8010630 <cJSON_New_Item>
 8010caa:	4605      	mov	r5, r0
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d042      	beq.n	8010d36 <parse_value+0x336>
        {
            /* memory fail */
            return 0;
        }
        /* add to linked list */
        child->next = new_item;
 8010cb0:	6038      	str	r0, [r7, #0]
        new_item->prev = child;
 8010cb2:	6047      	str	r7, [r0, #4]

        child = new_item;
        value = skip(parse_string(child, skip(value + 1), ep));
 8010cb4:	f108 0001 	add.w	r0, r8, #1
 8010cb8:	f7ff fcb0 	bl	801061c <skip>
 8010cbc:	4632      	mov	r2, r6
 8010cbe:	4601      	mov	r1, r0
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f7ff fbcd 	bl	8010460 <parse_string>
 8010cc6:	f7ff fca9 	bl	801061c <skip>
        if (!value)
 8010cca:	b3a0      	cbz	r0, 8010d36 <parse_value+0x336>
        {
            return 0;
        }

        /* use string as key, not value */
        child->string = child->valuestring;
 8010ccc:	692b      	ldr	r3, [r5, #16]
        child->valuestring = 0;
 8010cce:	612c      	str	r4, [r5, #16]
        {
            return 0;
        }

        /* use string as key, not value */
        child->string = child->valuestring;
 8010cd0:	622b      	str	r3, [r5, #32]
        child->valuestring = 0;

        if (*value != ':')
 8010cd2:	7803      	ldrb	r3, [r0, #0]
 8010cd4:	2b3a      	cmp	r3, #58	; 0x3a
 8010cd6:	d001      	beq.n	8010cdc <parse_value+0x2dc>
        {
            /* invalid object. */
            *ep = value;
 8010cd8:	6030      	str	r0, [r6, #0]
 8010cda:	e02c      	b.n	8010d36 <parse_value+0x336>
            return 0;
        }
        /* skip any spacing, get the value. */
        value = skip(parse_value(child, skip(value + 1), ep));
 8010cdc:	3001      	adds	r0, #1
 8010cde:	f7ff fc9d 	bl	801061c <skip>
 8010ce2:	4632      	mov	r2, r6
 8010ce4:	4601      	mov	r1, r0
 8010ce6:	4628      	mov	r0, r5
 8010ce8:	f7ff fe8a 	bl	8010a00 <parse_value>
 8010cec:	f7ff fc96 	bl	801061c <skip>
        if (!value)
 8010cf0:	4680      	mov	r8, r0
 8010cf2:	b300      	cbz	r0, 8010d36 <parse_value+0x336>
 8010cf4:	462f      	mov	r7, r5
 8010cf6:	e7d2      	b.n	8010c9e <parse_value+0x29e>
        {
            return 0;
        }
    }
    /* end of object */
    if (*value == '}')
 8010cf8:	2b7d      	cmp	r3, #125	; 0x7d
 8010cfa:	d102      	bne.n	8010d02 <parse_value+0x302>
    {
        return value + 1;
 8010cfc:	f108 0001 	add.w	r0, r8, #1
 8010d00:	e01a      	b.n	8010d38 <parse_value+0x338>
    }

    /* malformed */
    *ep = value;
 8010d02:	f8c6 8000 	str.w	r8, [r6]
 8010d06:	e016      	b.n	8010d36 <parse_value+0x336>
 8010d08:	00000000 	.word	0x00000000
 8010d0c:	3ff00000 	.word	0x3ff00000
 8010d10:	00000000 	.word	0x00000000
 8010d14:	bff00000 	.word	0xbff00000
 8010d18:	00000000 	.word	0x00000000
 8010d1c:	40240000 	.word	0x40240000
 8010d20:	0802fbf1 	.word	0x0802fbf1
 8010d24:	0802fc12 	.word	0x0802fc12
 8010d28:	0802fc18 	.word	0x0802fc18
 8010d2c:	40240000 	.word	0x40240000
 8010d30:	3ff00000 	.word	0x3ff00000
    if (*value == '{')
    {
        return parse_object(item, value, ep);
    }

    *ep=value;return 0;	/* failure. */
 8010d34:	6034      	str	r4, [r6, #0]
 8010d36:	2000      	movs	r0, #0
}
 8010d38:	b003      	add	sp, #12
 8010d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3e:	bf00      	nop

08010d40 <print_array.isra.3>:

    return 0;
}

/* Render an array to text */
static char *print_array(const cJSON *item, int depth, int fmt, printbuffer *p)
 8010d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d44:	4680      	mov	r8, r0
 8010d46:	b085      	sub	sp, #20
 8010d48:	468a      	mov	sl, r1
 8010d4a:	4616      	mov	r6, r2
 8010d4c:	461c      	mov	r4, r3
    char **entries;
    char *out = 0;
    char *ptr;
    char *ret;
    int len = 5;
    cJSON *child = item->child;
 8010d4e:	6807      	ldr	r7, [r0, #0]
    int numentries = 0;
 8010d50:	2500      	movs	r5, #0
    int i = 0;
    int fail = 0;
    size_t tmplen = 0;

    /* How many entries in the array? */
    while (child)
 8010d52:	b117      	cbz	r7, 8010d5a <print_array.isra.3+0x1a>
    {
        numentries++;
 8010d54:	3501      	adds	r5, #1
        child = child->next;
 8010d56:	683f      	ldr	r7, [r7, #0]
 8010d58:	e7fb      	b.n	8010d52 <print_array.isra.3+0x12>
    }

    /* Explicitly handle numentries == 0 */
    if (!numentries)
 8010d5a:	b995      	cbnz	r5, 8010d82 <print_array.isra.3+0x42>
    {
        if (p)
 8010d5c:	b124      	cbz	r4, 8010d68 <print_array.isra.3+0x28>
        {
            out = ensure(p, 3);
 8010d5e:	2103      	movs	r1, #3
 8010d60:	4620      	mov	r0, r4
 8010d62:	f7ff fc75 	bl	8010650 <ensure>
 8010d66:	e003      	b.n	8010d70 <print_array.isra.3+0x30>
        }
        else
        {
            out = (char*)cJSON_malloc(3);
 8010d68:	4b74      	ldr	r3, [pc, #464]	; (8010f3c <print_array.isra.3+0x1fc>)
 8010d6a:	2003      	movs	r0, #3
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	4798      	blx	r3
 8010d70:	4603      	mov	r3, r0
        }
        if (out)
 8010d72:	2800      	cmp	r0, #0
 8010d74:	f000 80de 	beq.w	8010f34 <print_array.isra.3+0x1f4>
        {
            strcpy(out,"[]");
 8010d78:	4971      	ldr	r1, [pc, #452]	; (8010f40 <print_array.isra.3+0x200>)
 8010d7a:	f000 ff1f 	bl	8011bbc <strcpy>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	e0d8      	b.n	8010f34 <print_array.isra.3+0x1f4>
        }

        return out;
    }

    if (p)
 8010d82:	2c00      	cmp	r4, #0
 8010d84:	d049      	beq.n	8010e1a <print_array.isra.3+0xda>
    {
        /* Compose the output array. */
        /* opening square bracket */
        i = p->offset;
 8010d86:	68a3      	ldr	r3, [r4, #8]
        ptr = ensure(p, 1);
 8010d88:	2101      	movs	r1, #1
 8010d8a:	4620      	mov	r0, r4

    if (p)
    {
        /* Compose the output array. */
        /* opening square bracket */
        i = p->offset;
 8010d8c:	9301      	str	r3, [sp, #4]
        ptr = ensure(p, 1);
 8010d8e:	f7ff fc5f 	bl	8010650 <ensure>
        if (!ptr)
 8010d92:	2800      	cmp	r0, #0
 8010d94:	f000 8097 	beq.w	8010ec6 <print_array.isra.3+0x186>
        {
            return 0;
        }
        *ptr = '[';
 8010d98:	235b      	movs	r3, #91	; 0x5b
 8010d9a:	2e00      	cmp	r6, #0
        p->offset++;

        child = item->child;
        while (child && !fail)
        {
            print_value(child, depth + 1, fmt, p);
 8010d9c:	f10a 0a01 	add.w	sl, sl, #1
                ptr = ensure(p, len + 1);
                if (!ptr)
                {
                    return 0;
                }
                *ptr++ = ',';
 8010da0:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
        ptr = ensure(p, 1);
        if (!ptr)
        {
            return 0;
        }
        *ptr = '[';
 8010da4:	7003      	strb	r3, [r0, #0]
        p->offset++;
 8010da6:	68a3      	ldr	r3, [r4, #8]

        child = item->child;
 8010da8:	f8d8 5000 	ldr.w	r5, [r8]
 8010dac:	bf14      	ite	ne
 8010dae:	f04f 0802 	movne.w	r8, #2
 8010db2:	f04f 0801 	moveq.w	r8, #1
        if (!ptr)
        {
            return 0;
        }
        *ptr = '[';
        p->offset++;
 8010db6:	3301      	adds	r3, #1
 8010db8:	f108 0901 	add.w	r9, r8, #1
 8010dbc:	60a3      	str	r3, [r4, #8]

        child = item->child;
        while (child && !fail)
 8010dbe:	b1fd      	cbz	r5, 8010e00 <print_array.isra.3+0xc0>
        {
            print_value(child, depth + 1, fmt, p);
 8010dc0:	4623      	mov	r3, r4
 8010dc2:	4632      	mov	r2, r6
 8010dc4:	4651      	mov	r1, sl
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f000 f8be 	bl	8010f48 <print_value>
            p->offset = update(p);
 8010dcc:	4620      	mov	r0, r4
 8010dce:	f7ff fc8d 	bl	80106ec <update>
            if (child->next)
 8010dd2:	682b      	ldr	r3, [r5, #0]

        child = item->child;
        while (child && !fail)
        {
            print_value(child, depth + 1, fmt, p);
            p->offset = update(p);
 8010dd4:	60a0      	str	r0, [r4, #8]
            if (child->next)
 8010dd6:	b18b      	cbz	r3, 8010dfc <print_array.isra.3+0xbc>
            {
                len = fmt ? 2 : 1;
                ptr = ensure(p, len + 1);
 8010dd8:	4649      	mov	r1, r9
 8010dda:	4620      	mov	r0, r4
 8010ddc:	f7ff fc38 	bl	8010650 <ensure>
                if (!ptr)
 8010de0:	2800      	cmp	r0, #0
 8010de2:	d070      	beq.n	8010ec6 <print_array.isra.3+0x186>
                {
                    return 0;
                }
                *ptr++ = ',';
 8010de4:	f880 b000 	strb.w	fp, [r0]
                if(fmt)
 8010de8:	b90e      	cbnz	r6, 8010dee <print_array.isra.3+0xae>
                ptr = ensure(p, len + 1);
                if (!ptr)
                {
                    return 0;
                }
                *ptr++ = ',';
 8010dea:	1c43      	adds	r3, r0, #1
 8010dec:	e002      	b.n	8010df4 <print_array.isra.3+0xb4>
                if(fmt)
                {
                    *ptr++ = ' ';
 8010dee:	2220      	movs	r2, #32
 8010df0:	1c83      	adds	r3, r0, #2
 8010df2:	7042      	strb	r2, [r0, #1]
                }
                *ptr = 0;
 8010df4:	701f      	strb	r7, [r3, #0]
                p->offset += len;
 8010df6:	68a3      	ldr	r3, [r4, #8]
 8010df8:	4443      	add	r3, r8
 8010dfa:	60a3      	str	r3, [r4, #8]
            }
            child = child->next;
 8010dfc:	682d      	ldr	r5, [r5, #0]
 8010dfe:	e7de      	b.n	8010dbe <print_array.isra.3+0x7e>
        }
        ptr = ensure(p, 2);
 8010e00:	2102      	movs	r1, #2
 8010e02:	4620      	mov	r0, r4
 8010e04:	f7ff fc24 	bl	8010650 <ensure>
        if (!ptr)
 8010e08:	2800      	cmp	r0, #0
 8010e0a:	d05c      	beq.n	8010ec6 <print_array.isra.3+0x186>
        {
            return 0;
        }
        *ptr++ = ']';
 8010e0c:	235d      	movs	r3, #93	; 0x5d
        *ptr = '\0';
 8010e0e:	7045      	strb	r5, [r0, #1]
        ptr = ensure(p, 2);
        if (!ptr)
        {
            return 0;
        }
        *ptr++ = ']';
 8010e10:	7003      	strb	r3, [r0, #0]
        *ptr = '\0';
        out = (p->buffer) + i;
 8010e12:	9b01      	ldr	r3, [sp, #4]
 8010e14:	6820      	ldr	r0, [r4, #0]
 8010e16:	4418      	add	r0, r3
 8010e18:	e08d      	b.n	8010f36 <print_array.isra.3+0x1f6>
    }
    else
    {
        /* Allocate an array to hold the pointers to all printed values */
        entries = (char**)cJSON_malloc(numentries * sizeof(char*));
 8010e1a:	f8df b120 	ldr.w	fp, [pc, #288]	; 8010f3c <print_array.isra.3+0x1fc>
 8010e1e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8010e22:	f8db 3000 	ldr.w	r3, [fp]
 8010e26:	4648      	mov	r0, r9
 8010e28:	4798      	blx	r3
 8010e2a:	f8cd b008 	str.w	fp, [sp, #8]
        if (!entries)
 8010e2e:	4607      	mov	r7, r0
 8010e30:	2800      	cmp	r0, #0
 8010e32:	d048      	beq.n	8010ec6 <print_array.isra.3+0x186>
        {
            return 0;
        }
        memset(entries, 0, numentries * sizeof(char*));
 8010e34:	464a      	mov	r2, r9
 8010e36:	4621      	mov	r1, r4
 8010e38:	f000 fe0e 	bl	8011a58 <memset>
{
    char **entries;
    char *out = 0;
    char *ptr;
    char *ret;
    int len = 5;
 8010e3c:	f04f 0b05 	mov.w	fp, #5
            return 0;
        }
        memset(entries, 0, numentries * sizeof(char*));

        /* Retrieve all the results: */
        child = item->child;
 8010e40:	f8d8 9000 	ldr.w	r9, [r8]
        while (child && !fail)
        {
            ret = print_value(child, depth + 1, fmt, 0);
 8010e44:	f10a 0a01 	add.w	sl, sl, #1
 8010e48:	f1a7 0804 	sub.w	r8, r7, #4
            return 0;
        }
        memset(entries, 0, numentries * sizeof(char*));

        /* Retrieve all the results: */
        child = item->child;
 8010e4c:	f8cd 8004 	str.w	r8, [sp, #4]
        while (child && !fail)
 8010e50:	f1b9 0f00 	cmp.w	r9, #0
 8010e54:	d018      	beq.n	8010e88 <print_array.isra.3+0x148>
 8010e56:	bb44      	cbnz	r4, 8010eaa <print_array.isra.3+0x16a>
        {
            ret = print_value(child, depth + 1, fmt, 0);
 8010e58:	4632      	mov	r2, r6
 8010e5a:	4623      	mov	r3, r4
 8010e5c:	4651      	mov	r1, sl
 8010e5e:	4648      	mov	r0, r9
 8010e60:	f000 f872 	bl	8010f48 <print_value>
            entries[i++] = ret;
 8010e64:	9a01      	ldr	r2, [sp, #4]
 8010e66:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e6a:	9201      	str	r2, [sp, #4]
            if (ret)
 8010e6c:	b140      	cbz	r0, 8010e80 <print_array.isra.3+0x140>
            {
                len += strlen(ret) + 2 + (fmt ? 1 : 0);
 8010e6e:	f7ef fa2f 	bl	80002d0 <strlen>
 8010e72:	1c33      	adds	r3, r6, #0
 8010e74:	bf18      	it	ne
 8010e76:	2301      	movne	r3, #1
 8010e78:	3302      	adds	r3, #2
 8010e7a:	449b      	add	fp, r3
 8010e7c:	4483      	add	fp, r0
 8010e7e:	e000      	b.n	8010e82 <print_array.isra.3+0x142>
            }
            else
            {
                fail = 1;
 8010e80:	2401      	movs	r4, #1
            }
            child = child->next;
 8010e82:	f8d9 9000 	ldr.w	r9, [r9]
 8010e86:	e7e3      	b.n	8010e50 <print_array.isra.3+0x110>
        }

        /* If we didn't fail, try to malloc the output string */
        if (!fail)
 8010e88:	b97c      	cbnz	r4, 8010eaa <print_array.isra.3+0x16a>
        {
            out = (char*)cJSON_malloc(len);
 8010e8a:	9b02      	ldr	r3, [sp, #8]
 8010e8c:	4658      	mov	r0, fp
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4798      	blx	r3
        }
        /* If that fails, we fail. */
        if (!out)
 8010e92:	4681      	mov	r9, r0
 8010e94:	b148      	cbz	r0, 8010eaa <print_array.isra.3+0x16a>
            cJSON_free(entries);
            return 0;
        }

        /* Compose the output array. */
        *out='[';
 8010e96:	235b      	movs	r3, #91	; 0x5b
 8010e98:	4682      	mov	sl, r0
                {
                    *ptr++ = ' ';
                }
                *ptr = 0;
            }
            cJSON_free(entries[i]);
 8010e9a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8010f44 <print_array.isra.3+0x204>
            cJSON_free(entries);
            return 0;
        }

        /* Compose the output array. */
        *out='[';
 8010e9e:	f80a 3b01 	strb.w	r3, [sl], #1
        for (i = 0; i < numentries; i++)
        {
            tmplen = strlen(entries[i]);
            memcpy(ptr, entries[i], tmplen);
            ptr += tmplen;
            if (i != (numentries - 1))
 8010ea2:	1e6b      	subs	r3, r5, #1
        }

        /* Compose the output array. */
        *out='[';
        ptr = out + 1;
        *ptr = '\0';
 8010ea4:	7044      	strb	r4, [r0, #1]
        for (i = 0; i < numentries; i++)
        {
            tmplen = strlen(entries[i]);
            memcpy(ptr, entries[i], tmplen);
            ptr += tmplen;
            if (i != (numentries - 1))
 8010ea6:	9301      	str	r3, [sp, #4]
 8010ea8:	e00f      	b.n	8010eca <print_array.isra.3+0x18a>
{
    char **entries;
    char *out = 0;
    char *ptr;
    char *ret;
    int len = 5;
 8010eaa:	2400      	movs	r4, #0
            /* free all the entries in the array */
            for (i = 0; i < numentries; i++)
            {
                if (entries[i])
                {
                    cJSON_free(entries[i]);
 8010eac:	4e25      	ldr	r6, [pc, #148]	; (8010f44 <print_array.isra.3+0x204>)
        if (fail)
        {
            /* free all the entries in the array */
            for (i = 0; i < numentries; i++)
            {
                if (entries[i])
 8010eae:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8010eb2:	b108      	cbz	r0, 8010eb8 <print_array.isra.3+0x178>
                {
                    cJSON_free(entries[i]);
 8010eb4:	6833      	ldr	r3, [r6, #0]
 8010eb6:	4798      	blx	r3

        /* Handle failure. */
        if (fail)
        {
            /* free all the entries in the array */
            for (i = 0; i < numentries; i++)
 8010eb8:	3401      	adds	r4, #1
 8010eba:	42a5      	cmp	r5, r4
 8010ebc:	dcf7      	bgt.n	8010eae <print_array.isra.3+0x16e>
                if (entries[i])
                {
                    cJSON_free(entries[i]);
                }
            }
            cJSON_free(entries);
 8010ebe:	4b21      	ldr	r3, [pc, #132]	; (8010f44 <print_array.isra.3+0x204>)
 8010ec0:	4638      	mov	r0, r7
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4798      	blx	r3
            return 0;
 8010ec6:	2000      	movs	r0, #0
 8010ec8:	e035      	b.n	8010f36 <print_array.isra.3+0x1f6>
        *out='[';
        ptr = out + 1;
        *ptr = '\0';
        for (i = 0; i < numentries; i++)
        {
            tmplen = strlen(entries[i]);
 8010eca:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8010ece:	4608      	mov	r0, r1
 8010ed0:	9103      	str	r1, [sp, #12]
 8010ed2:	f7ef f9fd 	bl	80002d0 <strlen>
            memcpy(ptr, entries[i], tmplen);
 8010ed6:	9903      	ldr	r1, [sp, #12]
 8010ed8:	4602      	mov	r2, r0
 8010eda:	9002      	str	r0, [sp, #8]
 8010edc:	4650      	mov	r0, sl
 8010ede:	f000 fdb0 	bl	8011a42 <memcpy>
            ptr += tmplen;
 8010ee2:	9b02      	ldr	r3, [sp, #8]
 8010ee4:	449a      	add	sl, r3
            if (i != (numentries - 1))
 8010ee6:	9b01      	ldr	r3, [sp, #4]
 8010ee8:	42a3      	cmp	r3, r4
 8010eea:	d00f      	beq.n	8010f0c <print_array.isra.3+0x1cc>
            {
                *ptr++ = ',';
 8010eec:	f04f 032c 	mov.w	r3, #44	; 0x2c
 8010ef0:	f88a 3000 	strb.w	r3, [sl]
                if(fmt)
 8010ef4:	b916      	cbnz	r6, 8010efc <print_array.isra.3+0x1bc>
            tmplen = strlen(entries[i]);
            memcpy(ptr, entries[i], tmplen);
            ptr += tmplen;
            if (i != (numentries - 1))
            {
                *ptr++ = ',';
 8010ef6:	f10a 0a01 	add.w	sl, sl, #1
 8010efa:	e004      	b.n	8010f06 <print_array.isra.3+0x1c6>
                if(fmt)
                {
                    *ptr++ = ' ';
 8010efc:	2320      	movs	r3, #32
 8010efe:	f10a 0a02 	add.w	sl, sl, #2
 8010f02:	f80a 3c01 	strb.w	r3, [sl, #-1]
                }
                *ptr = 0;
 8010f06:	2300      	movs	r3, #0
 8010f08:	f88a 3000 	strb.w	r3, [sl]

        /* Compose the output array. */
        *out='[';
        ptr = out + 1;
        *ptr = '\0';
        for (i = 0; i < numentries; i++)
 8010f0c:	3401      	adds	r4, #1
                {
                    *ptr++ = ' ';
                }
                *ptr = 0;
            }
            cJSON_free(entries[i]);
 8010f0e:	f8d8 0000 	ldr.w	r0, [r8]
 8010f12:	f8db 3000 	ldr.w	r3, [fp]
 8010f16:	4798      	blx	r3

        /* Compose the output array. */
        *out='[';
        ptr = out + 1;
        *ptr = '\0';
        for (i = 0; i < numentries; i++)
 8010f18:	42a5      	cmp	r5, r4
 8010f1a:	dcd6      	bgt.n	8010eca <print_array.isra.3+0x18a>
                }
                *ptr = 0;
            }
            cJSON_free(entries[i]);
        }
        cJSON_free(entries);
 8010f1c:	4b09      	ldr	r3, [pc, #36]	; (8010f44 <print_array.isra.3+0x204>)
 8010f1e:	4638      	mov	r0, r7
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	4798      	blx	r3
        *ptr++ = ']';
 8010f24:	235d      	movs	r3, #93	; 0x5d
        *ptr++ = '\0';
 8010f26:	4648      	mov	r0, r9
                *ptr = 0;
            }
            cJSON_free(entries[i]);
        }
        cJSON_free(entries);
        *ptr++ = ']';
 8010f28:	f88a 3000 	strb.w	r3, [sl]
        *ptr++ = '\0';
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	f88a 3001 	strb.w	r3, [sl, #1]
 8010f32:	e000      	b.n	8010f36 <print_array.isra.3+0x1f6>
        }
        else
        {
            out = (char*)cJSON_malloc(3);
        }
        if (out)
 8010f34:	4618      	mov	r0, r3
        *ptr++ = ']';
        *ptr++ = '\0';
    }

    return out;
}
 8010f36:	b005      	add	sp, #20
 8010f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f3c:	20010088 	.word	0x20010088
 8010f40:	0802fc1d 	.word	0x0802fc1d
 8010f44:	20010084 	.word	0x20010084

08010f48 <print_value>:
    *ep=value;return 0;	/* failure. */
}

/* Render a value to text. */
static char *print_value(const cJSON *item, int depth, int fmt, printbuffer *p)
{
 8010f48:	b570      	push	{r4, r5, r6, lr}
 8010f4a:	461e      	mov	r6, r3
    char *out = 0;

    if (!item)
 8010f4c:	4604      	mov	r4, r0
 8010f4e:	2800      	cmp	r0, #0
 8010f50:	d057      	beq.n	8011002 <print_value+0xba>
 8010f52:	68c5      	ldr	r5, [r0, #12]
    {
        return 0;
    }
    if (p)
    {
        switch ((item->type) & 0xFF)
 8010f54:	b2ed      	uxtb	r5, r5

    if (!item)
    {
        return 0;
    }
    if (p)
 8010f56:	b32b      	cbz	r3, 8010fa4 <print_value+0x5c>
    {
        switch ((item->type) & 0xFF)
 8010f58:	2d08      	cmp	r5, #8
 8010f5a:	d041      	beq.n	8010fe0 <print_value+0x98>
 8010f5c:	dc2d      	bgt.n	8010fba <print_value+0x72>
 8010f5e:	2d02      	cmp	r5, #2
 8010f60:	d016      	beq.n	8010f90 <print_value+0x48>
 8010f62:	2d04      	cmp	r5, #4
 8010f64:	d002      	beq.n	8010f6c <print_value+0x24>
 8010f66:	2d01      	cmp	r5, #1
 8010f68:	d14d      	bne.n	8011006 <print_value+0xbe>
 8010f6a:	e008      	b.n	8010f7e <print_value+0x36>
        {
            case cJSON_NULL:
                out = ensure(p, 5);
 8010f6c:	2105      	movs	r1, #5
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f7ff fb6e 	bl	8010650 <ensure>
                if (out)
 8010f74:	4604      	mov	r4, r0
 8010f76:	2800      	cmp	r0, #0
 8010f78:	d043      	beq.n	8011002 <print_value+0xba>
                {
                    strcpy(out, "null");
 8010f7a:	4924      	ldr	r1, [pc, #144]	; (801100c <print_value+0xc4>)
 8010f7c:	e00f      	b.n	8010f9e <print_value+0x56>
                }
                break;
            case cJSON_False:
                out = ensure(p, 6);
 8010f7e:	2106      	movs	r1, #6
 8010f80:	4618      	mov	r0, r3
 8010f82:	f7ff fb65 	bl	8010650 <ensure>
                if (out)
 8010f86:	4604      	mov	r4, r0
 8010f88:	2800      	cmp	r0, #0
 8010f8a:	d03a      	beq.n	8011002 <print_value+0xba>
                {
                    strcpy(out, "false");
 8010f8c:	4920      	ldr	r1, [pc, #128]	; (8011010 <print_value+0xc8>)
 8010f8e:	e006      	b.n	8010f9e <print_value+0x56>
                }
                break;
            case cJSON_True:
                out = ensure(p, 5);
 8010f90:	2105      	movs	r1, #5
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7ff fb5c 	bl	8010650 <ensure>
                if (out)
 8010f98:	4604      	mov	r4, r0
 8010f9a:	b390      	cbz	r0, 8011002 <print_value+0xba>
                {
                    strcpy(out, "true");
 8010f9c:	491d      	ldr	r1, [pc, #116]	; (8011014 <print_value+0xcc>)
 8010f9e:	f000 fe0d 	bl	8011bbc <strcpy>
 8010fa2:	e02e      	b.n	8011002 <print_value+0xba>
                break;
        }
    }
    else
    {
        switch ((item->type) & 0xFF)
 8010fa4:	2d08      	cmp	r5, #8
 8010fa6:	d01b      	beq.n	8010fe0 <print_value+0x98>
 8010fa8:	dc07      	bgt.n	8010fba <print_value+0x72>
 8010faa:	2d02      	cmp	r5, #2
 8010fac:	d013      	beq.n	8010fd6 <print_value+0x8e>
 8010fae:	2d04      	cmp	r5, #4
 8010fb0:	d00f      	beq.n	8010fd2 <print_value+0x8a>
 8010fb2:	2d01      	cmp	r5, #1
 8010fb4:	d127      	bne.n	8011006 <print_value+0xbe>
        {
            case cJSON_NULL:
                out = cJSON_strdup("null");
                break;
            case cJSON_False:
                out = cJSON_strdup("false");
 8010fb6:	4816      	ldr	r0, [pc, #88]	; (8011010 <print_value+0xc8>)
 8010fb8:	e00e      	b.n	8010fd8 <print_value+0x90>
                break;
        }
    }
    else
    {
        switch ((item->type) & 0xFF)
 8010fba:	2d20      	cmp	r5, #32
 8010fbc:	d015      	beq.n	8010fea <print_value+0xa2>
 8010fbe:	2d40      	cmp	r5, #64	; 0x40
 8010fc0:	d019      	beq.n	8010ff6 <print_value+0xae>
 8010fc2:	2d10      	cmp	r5, #16
 8010fc4:	d11f      	bne.n	8011006 <print_value+0xbe>
}

/* Invoke print_string_ptr (which is useful) on an item. */
static char *print_string(const cJSON *item, printbuffer *p)
{
    return print_string_ptr(item->valuestring, p);
 8010fc6:	4631      	mov	r1, r6
 8010fc8:	6920      	ldr	r0, [r4, #16]
                break;
        }
    }

    return out;
}
 8010fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

/* Invoke print_string_ptr (which is useful) on an item. */
static char *print_string(const cJSON *item, printbuffer *p)
{
    return print_string_ptr(item->valuestring, p);
 8010fce:	f7ff bc65 	b.w	801089c <print_string_ptr>
    else
    {
        switch ((item->type) & 0xFF)
        {
            case cJSON_NULL:
                out = cJSON_strdup("null");
 8010fd2:	480e      	ldr	r0, [pc, #56]	; (801100c <print_value+0xc4>)
 8010fd4:	e000      	b.n	8010fd8 <print_value+0x90>
                break;
            case cJSON_False:
                out = cJSON_strdup("false");
                break;
            case cJSON_True:
                out = cJSON_strdup("true");
 8010fd6:	480f      	ldr	r0, [pc, #60]	; (8011014 <print_value+0xcc>)
                break;
        }
    }

    return out;
}
 8010fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        {
            case cJSON_NULL:
                out = cJSON_strdup("null");
                break;
            case cJSON_False:
                out = cJSON_strdup("false");
 8010fdc:	f7ff bb72 	b.w	80106c4 <cJSON_strdup>
                break;
            case cJSON_True:
                out = cJSON_strdup("true");
                break;
            case cJSON_Number:
                out = print_number(item, 0);
 8010fe0:	4631      	mov	r1, r6
                break;
        }
    }

    return out;
}
 8010fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                break;
            case cJSON_True:
                out = cJSON_strdup("true");
                break;
            case cJSON_Number:
                out = print_number(item, 0);
 8010fe6:	f7ff bb8f 	b.w	8010708 <print_number>
                break;
            case cJSON_String:
                out = print_string(item, 0);
                break;
            case cJSON_Array:
                out = print_array(item, depth, fmt, 0);
 8010fea:	f104 0008 	add.w	r0, r4, #8
                break;
        }
    }

    return out;
}
 8010fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                break;
            case cJSON_String:
                out = print_string(item, 0);
                break;
            case cJSON_Array:
                out = print_array(item, depth, fmt, 0);
 8010ff2:	f7ff bea5 	b.w	8010d40 <print_array.isra.3>
                break;
            case cJSON_Object:
                out = print_object(item, depth, fmt, 0);
 8010ff6:	f104 0008 	add.w	r0, r4, #8
                break;
        }
    }

    return out;
}
 8010ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                break;
            case cJSON_Array:
                out = print_array(item, depth, fmt, 0);
                break;
            case cJSON_Object:
                out = print_object(item, depth, fmt, 0);
 8010ffe:	f000 b80b 	b.w	8011018 <print_object.isra.2>
 8011002:	4620      	mov	r0, r4
 8011004:	bd70      	pop	{r4, r5, r6, pc}
}

/* Render a value to text. */
static char *print_value(const cJSON *item, int depth, int fmt, printbuffer *p)
{
    char *out = 0;
 8011006:	2000      	movs	r0, #0
                break;
        }
    }

    return out;
}
 8011008:	bd70      	pop	{r4, r5, r6, pc}
 801100a:	bf00      	nop
 801100c:	0802fbf1 	.word	0x0802fbf1
 8011010:	0802fc12 	.word	0x0802fc12
 8011014:	0802fc18 	.word	0x0802fc18

08011018 <print_object.isra.2>:
    *ep = value;
    return 0;
}

/* Render an object to text. */
static char *print_object(const cJSON *item, int depth, int fmt, printbuffer *p)
 8011018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801101c:	4615      	mov	r5, r2
 801101e:	b087      	sub	sp, #28
 8011020:	461c      	mov	r4, r3
    char *str;
    int len = 7;
    int i = 0;
    int j;
    cJSON *child = item->child;
    int numentries = 0;
 8011022:	2200      	movs	r2, #0
    *ep = value;
    return 0;
}

/* Render an object to text. */
static char *print_object(const cJSON *item, int depth, int fmt, printbuffer *p)
 8011024:	4606      	mov	r6, r0
 8011026:	468a      	mov	sl, r1
    char *ret;
    char *str;
    int len = 7;
    int i = 0;
    int j;
    cJSON *child = item->child;
 8011028:	6803      	ldr	r3, [r0, #0]
    int numentries = 0;
 801102a:	9200      	str	r2, [sp, #0]
    int fail = 0;
    size_t tmplen = 0;

    /* Count the number of entries. */
    while (child)
 801102c:	b123      	cbz	r3, 8011038 <print_object.isra.2+0x20>
    {
        numentries++;
 801102e:	9a00      	ldr	r2, [sp, #0]
        child = child->next;
 8011030:	681b      	ldr	r3, [r3, #0]
    size_t tmplen = 0;

    /* Count the number of entries. */
    while (child)
    {
        numentries++;
 8011032:	3201      	adds	r2, #1
 8011034:	9200      	str	r2, [sp, #0]
 8011036:	e7f9      	b.n	801102c <print_object.isra.2+0x14>
        child = child->next;
    }

    /* Explicitly handle empty object case */
    if (!numentries)
 8011038:	9b00      	ldr	r3, [sp, #0]
 801103a:	bb6b      	cbnz	r3, 8011098 <print_object.isra.2+0x80>
    {
        if (p)
 801103c:	b144      	cbz	r4, 8011050 <print_object.isra.2+0x38>
        {
            out = ensure(p, fmt ? depth + 4 : 3);
 801103e:	b115      	cbz	r5, 8011046 <print_object.isra.2+0x2e>
 8011040:	f10a 0104 	add.w	r1, sl, #4
 8011044:	e000      	b.n	8011048 <print_object.isra.2+0x30>
 8011046:	2103      	movs	r1, #3
 8011048:	4620      	mov	r0, r4
 801104a:	f7ff fb01 	bl	8010650 <ensure>
 801104e:	e007      	b.n	8011060 <print_object.isra.2+0x48>
        }
        else
        {
            out = (char*)cJSON_malloc(fmt ? depth + 4 : 3);
 8011050:	4ba3      	ldr	r3, [pc, #652]	; (80112e0 <print_object.isra.2+0x2c8>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	b115      	cbz	r5, 801105c <print_object.isra.2+0x44>
 8011056:	f10a 0004 	add.w	r0, sl, #4
 801105a:	e000      	b.n	801105e <print_object.isra.2+0x46>
 801105c:	2003      	movs	r0, #3
 801105e:	4798      	blx	r3
        }
        if (!out)
 8011060:	2800      	cmp	r0, #0
 8011062:	f000 8135 	beq.w	80112d0 <print_object.isra.2+0x2b8>
        {
            return 0;
        }
        ptr = out;
        *ptr++ = '{';
 8011066:	237b      	movs	r3, #123	; 0x7b
 8011068:	7003      	strb	r3, [r0, #0]
        if (fmt) {
 801106a:	b90d      	cbnz	r5, 8011070 <print_object.isra.2+0x58>
        if (!out)
        {
            return 0;
        }
        ptr = out;
        *ptr++ = '{';
 801106c:	1c43      	adds	r3, r0, #1
 801106e:	e00e      	b.n	801108e <print_object.isra.2+0x76>
        if (fmt) {
            *ptr++ = '\n';
 8011070:	220a      	movs	r2, #10
 8011072:	1c83      	adds	r3, r0, #2
            for (i = 0; i < depth; i++)
            {
                *ptr++ = '\t';
 8011074:	2409      	movs	r4, #9
            return 0;
        }
        ptr = out;
        *ptr++ = '{';
        if (fmt) {
            *ptr++ = '\n';
 8011076:	7042      	strb	r2, [r0, #1]
 8011078:	461a      	mov	r2, r3
            for (i = 0; i < depth; i++)
 801107a:	1ad1      	subs	r1, r2, r3
 801107c:	458a      	cmp	sl, r1
 801107e:	dd02      	ble.n	8011086 <print_object.isra.2+0x6e>
            {
                *ptr++ = '\t';
 8011080:	f802 4b01 	strb.w	r4, [r2], #1
 8011084:	e7f9      	b.n	801107a <print_object.isra.2+0x62>
 8011086:	f1ba 0f00 	cmp.w	sl, #0
 801108a:	bfa8      	it	ge
 801108c:	4453      	addge	r3, sl
            }
        }
        *ptr++ = '}';
 801108e:	227d      	movs	r2, #125	; 0x7d
 8011090:	701a      	strb	r2, [r3, #0]
        *ptr++ = '\0';
 8011092:	2200      	movs	r2, #0
 8011094:	705a      	strb	r2, [r3, #1]
 8011096:	e1a2      	b.n	80113de <print_object.isra.2+0x3c6>

        return out;
    }

    if (p)
 8011098:	2c00      	cmp	r4, #0
 801109a:	f000 809c 	beq.w	80111d6 <print_object.isra.2+0x1be>
    {
        /* Compose the output: */
        i = p->offset;
        len = fmt ? 2 : 1; /* fmt: {\n */
 801109e:	2d00      	cmp	r5, #0
        ptr = ensure(p, len + 1);
 80110a0:	4620      	mov	r0, r4
    }

    if (p)
    {
        /* Compose the output: */
        i = p->offset;
 80110a2:	f8d4 8008 	ldr.w	r8, [r4, #8]
        len = fmt ? 2 : 1; /* fmt: {\n */
 80110a6:	bf14      	ite	ne
 80110a8:	2702      	movne	r7, #2
 80110aa:	2701      	moveq	r7, #1
        ptr = ensure(p, len + 1);
 80110ac:	1c79      	adds	r1, r7, #1
 80110ae:	f7ff facf 	bl	8010650 <ensure>
        if (!ptr)
 80110b2:	2800      	cmp	r0, #0
 80110b4:	f000 810c 	beq.w	80112d0 <print_object.isra.2+0x2b8>
        {
            return 0;
        }

        *ptr++ = '{';
 80110b8:	237b      	movs	r3, #123	; 0x7b
 80110ba:	7003      	strb	r3, [r0, #0]
        if (fmt)
 80110bc:	b90d      	cbnz	r5, 80110c2 <print_object.isra.2+0xaa>
        if (!ptr)
        {
            return 0;
        }

        *ptr++ = '{';
 80110be:	1c43      	adds	r3, r0, #1
 80110c0:	e002      	b.n	80110c8 <print_object.isra.2+0xb0>
        if (fmt)
        {
            *ptr++ = '\n';
 80110c2:	220a      	movs	r2, #10
 80110c4:	1c83      	adds	r3, r0, #2
 80110c6:	7042      	strb	r2, [r0, #1]
        }
        *ptr = '\0';
 80110c8:	2200      	movs	r2, #0
                {
                    return 0;
                }
                for (j = 0; j < depth; j++)
                {
                    *ptr++ = '\t';
 80110ca:	f04f 0b09 	mov.w	fp, #9
        *ptr++ = '{';
        if (fmt)
        {
            *ptr++ = '\n';
        }
        *ptr = '\0';
 80110ce:	701a      	strb	r2, [r3, #0]
 80110d0:	4295      	cmp	r5, r2
        p->offset += len;
 80110d2:	68a3      	ldr	r3, [r4, #8]

        child = item->child;
 80110d4:	6836      	ldr	r6, [r6, #0]
 80110d6:	bf18      	it	ne
 80110d8:	f04f 0902 	movne.w	r9, #2
        if (fmt)
        {
            *ptr++ = '\n';
        }
        *ptr = '\0';
        p->offset += len;
 80110dc:	441f      	add	r7, r3
 80110de:	bf08      	it	eq
 80110e0:	f04f 0901 	moveq.w	r9, #1
 80110e4:	60a7      	str	r7, [r4, #8]

        child = item->child;
        depth++;
 80110e6:	f10a 0701 	add.w	r7, sl, #1
        while (child)
 80110ea:	2e00      	cmp	r6, #0
 80110ec:	d055      	beq.n	801119a <print_object.isra.2+0x182>
        {
            if (fmt)
 80110ee:	b185      	cbz	r5, 8011112 <print_object.isra.2+0xfa>
            {
                ptr = ensure(p, depth);
 80110f0:	4639      	mov	r1, r7
 80110f2:	4620      	mov	r0, r4
 80110f4:	f7ff faac 	bl	8010650 <ensure>
                if (!ptr)
 80110f8:	2800      	cmp	r0, #0
 80110fa:	f000 80e9 	beq.w	80112d0 <print_object.isra.2+0x2b8>
 80110fe:	4603      	mov	r3, r0
                {
                    return 0;
                }
                for (j = 0; j < depth; j++)
 8011100:	1a1a      	subs	r2, r3, r0
 8011102:	4297      	cmp	r7, r2
 8011104:	dd02      	ble.n	801110c <print_object.isra.2+0xf4>
                {
                    *ptr++ = '\t';
 8011106:	f803 bb01 	strb.w	fp, [r3], #1
 801110a:	e7f9      	b.n	8011100 <print_object.isra.2+0xe8>
                }
                p->offset += depth;
 801110c:	68a3      	ldr	r3, [r4, #8]
 801110e:	443b      	add	r3, r7
 8011110:	60a3      	str	r3, [r4, #8]
            }

            /* print key */
            print_string_ptr(child->string, p);
 8011112:	4621      	mov	r1, r4
 8011114:	6a30      	ldr	r0, [r6, #32]
 8011116:	f7ff fbc1 	bl	801089c <print_string_ptr>
            p->offset = update(p);
 801111a:	4620      	mov	r0, r4
 801111c:	f7ff fae6 	bl	80106ec <update>

            len = fmt ? 2 : 1;
            ptr = ensure(p, len);
 8011120:	4649      	mov	r1, r9
                p->offset += depth;
            }

            /* print key */
            print_string_ptr(child->string, p);
            p->offset = update(p);
 8011122:	60a0      	str	r0, [r4, #8]

            len = fmt ? 2 : 1;
            ptr = ensure(p, len);
 8011124:	4620      	mov	r0, r4
 8011126:	f7ff fa93 	bl	8010650 <ensure>
            if (!ptr)
 801112a:	2800      	cmp	r0, #0
 801112c:	f000 80d0 	beq.w	80112d0 <print_object.isra.2+0x2b8>
            {
                return 0;
            }
            *ptr++ = ':';
 8011130:	f04f 033a 	mov.w	r3, #58	; 0x3a
 8011134:	7003      	strb	r3, [r0, #0]
            if (fmt)
 8011136:	b10d      	cbz	r5, 801113c <print_object.isra.2+0x124>
            {
                *ptr++ = '\t';
 8011138:	f880 b001 	strb.w	fp, [r0, #1]
            }
            p->offset+=len;
 801113c:	68a3      	ldr	r3, [r4, #8]

            /* print value */
            print_value(child, depth, fmt, p);
 801113e:	462a      	mov	r2, r5
 8011140:	4639      	mov	r1, r7
 8011142:	4630      	mov	r0, r6
            *ptr++ = ':';
            if (fmt)
            {
                *ptr++ = '\t';
            }
            p->offset+=len;
 8011144:	444b      	add	r3, r9
 8011146:	60a3      	str	r3, [r4, #8]

            /* print value */
            print_value(child, depth, fmt, p);
 8011148:	4623      	mov	r3, r4
 801114a:	f7ff fefd 	bl	8010f48 <print_value>
            p->offset = update(p);
 801114e:	4620      	mov	r0, r4
 8011150:	f7ff facc 	bl	80106ec <update>

            /* print comma if not last */
            len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
 8011154:	1c2b      	adds	r3, r5, #0
 8011156:	6832      	ldr	r2, [r6, #0]
 8011158:	bf18      	it	ne
 801115a:	2301      	movne	r3, #1
            }
            p->offset+=len;

            /* print value */
            print_value(child, depth, fmt, p);
            p->offset = update(p);
 801115c:	60a0      	str	r0, [r4, #8]

            /* print comma if not last */
            len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
            ptr = ensure(p, len + 1);
 801115e:	4620      	mov	r0, r4
            /* print value */
            print_value(child, depth, fmt, p);
            p->offset = update(p);

            /* print comma if not last */
            len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
 8011160:	2a00      	cmp	r2, #0
 8011162:	bf18      	it	ne
 8011164:	3301      	addne	r3, #1
            ptr = ensure(p, len + 1);
 8011166:	1c59      	adds	r1, r3, #1
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	f7ff fa71 	bl	8010650 <ensure>
            if (!ptr)
 801116e:	2800      	cmp	r0, #0
 8011170:	f000 80ae 	beq.w	80112d0 <print_object.isra.2+0x2b8>
            {
                return 0;
            }
            if (child->next)
 8011174:	6832      	ldr	r2, [r6, #0]
 8011176:	9b00      	ldr	r3, [sp, #0]
 8011178:	b11a      	cbz	r2, 8011182 <print_object.isra.2+0x16a>
            {
                *ptr++ = ',';
 801117a:	222c      	movs	r2, #44	; 0x2c
 801117c:	3001      	adds	r0, #1
 801117e:	f800 2c01 	strb.w	r2, [r0, #-1]
            }

            if (fmt)
 8011182:	b11d      	cbz	r5, 801118c <print_object.isra.2+0x174>
            {
                *ptr++ = '\n';
 8011184:	220a      	movs	r2, #10
 8011186:	3001      	adds	r0, #1
 8011188:	f800 2c01 	strb.w	r2, [r0, #-1]
            }
            *ptr = '\0';
 801118c:	2200      	movs	r2, #0
 801118e:	7002      	strb	r2, [r0, #0]
            p->offset += len;
 8011190:	68a2      	ldr	r2, [r4, #8]

            child = child->next;
 8011192:	6836      	ldr	r6, [r6, #0]
            if (fmt)
            {
                *ptr++ = '\n';
            }
            *ptr = '\0';
            p->offset += len;
 8011194:	4413      	add	r3, r2
 8011196:	60a3      	str	r3, [r4, #8]
 8011198:	e7a7      	b.n	80110ea <print_object.isra.2+0xd2>

            child = child->next;
        }

        ptr = ensure(p, fmt ? (depth + 1) : 2);
 801119a:	b115      	cbz	r5, 80111a2 <print_object.isra.2+0x18a>
 801119c:	f10a 0102 	add.w	r1, sl, #2
 80111a0:	e000      	b.n	80111a4 <print_object.isra.2+0x18c>
 80111a2:	2102      	movs	r1, #2
 80111a4:	4620      	mov	r0, r4
 80111a6:	f7ff fa53 	bl	8010650 <ensure>
        if (!ptr)
 80111aa:	2800      	cmp	r0, #0
 80111ac:	f000 8090 	beq.w	80112d0 <print_object.isra.2+0x2b8>
        {
            return 0;
        }
        if (fmt)
 80111b0:	b155      	cbz	r5, 80111c8 <print_object.isra.2+0x1b0>
 80111b2:	4603      	mov	r3, r0
        {
            for (i = 0; i < (depth - 1); i++)
            {
                *ptr++ = '\t';
 80111b4:	2109      	movs	r1, #9
        {
            return 0;
        }
        if (fmt)
        {
            for (i = 0; i < (depth - 1); i++)
 80111b6:	1a1a      	subs	r2, r3, r0
 80111b8:	4592      	cmp	sl, r2
 80111ba:	dd02      	ble.n	80111c2 <print_object.isra.2+0x1aa>
            {
                *ptr++ = '\t';
 80111bc:	f803 1b01 	strb.w	r1, [r3], #1
 80111c0:	e7f9      	b.n	80111b6 <print_object.isra.2+0x19e>
 80111c2:	ea2a 78ea 	bic.w	r8, sl, sl, asr #31
 80111c6:	4440      	add	r0, r8
            }
        }
        *ptr++ = '}';
 80111c8:	237d      	movs	r3, #125	; 0x7d
 80111ca:	7003      	strb	r3, [r0, #0]
        *ptr = '\0';
 80111cc:	2300      	movs	r3, #0
 80111ce:	7043      	strb	r3, [r0, #1]
        out = (p->buffer) + i;
 80111d0:	6820      	ldr	r0, [r4, #0]
 80111d2:	4440      	add	r0, r8
 80111d4:	e103      	b.n	80113de <print_object.isra.2+0x3c6>
    }
    else
    {
        /* Allocate space for the names and the objects */
        entries = (char**)cJSON_malloc(numentries * sizeof(char*));
 80111d6:	9b00      	ldr	r3, [sp, #0]
 80111d8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80112e0 <print_object.isra.2+0x2c8>
 80111dc:	009f      	lsls	r7, r3, #2
 80111de:	f8d8 3000 	ldr.w	r3, [r8]
 80111e2:	4638      	mov	r0, r7
 80111e4:	4798      	blx	r3
        if (!entries)
 80111e6:	4683      	mov	fp, r0
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d071      	beq.n	80112d0 <print_object.isra.2+0x2b8>
        {
            return 0;
        }
        names = (char**)cJSON_malloc(numentries * sizeof(char*));
 80111ec:	f8d8 3000 	ldr.w	r3, [r8]
 80111f0:	4638      	mov	r0, r7
 80111f2:	4798      	blx	r3
        if (!names)
 80111f4:	9001      	str	r0, [sp, #4]
 80111f6:	b920      	cbnz	r0, 8011202 <print_object.isra.2+0x1ea>
        {
            cJSON_free(entries);
 80111f8:	4b3a      	ldr	r3, [pc, #232]	; (80112e4 <print_object.isra.2+0x2cc>)
 80111fa:	4658      	mov	r0, fp
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4798      	blx	r3
 8011200:	e0ec      	b.n	80113dc <print_object.isra.2+0x3c4>
            return 0;
        }
        memset(entries,0, sizeof(char*) * numentries);
 8011202:	463a      	mov	r2, r7
 8011204:	4621      	mov	r1, r4
 8011206:	4658      	mov	r0, fp
 8011208:	f000 fc26 	bl	8011a58 <memset>
        memset(names, 0, sizeof(char*) * numentries);
 801120c:	463a      	mov	r2, r7
 801120e:	4621      	mov	r1, r4
 8011210:	9801      	ldr	r0, [sp, #4]
 8011212:	f000 fc21 	bl	8011a58 <memset>

        /* Collect all the results into our arrays: */
        child = item->child;
        depth++;
 8011216:	f10a 0301 	add.w	r3, sl, #1
        }
        memset(entries,0, sizeof(char*) * numentries);
        memset(names, 0, sizeof(char*) * numentries);

        /* Collect all the results into our arrays: */
        child = item->child;
 801121a:	6837      	ldr	r7, [r6, #0]
        depth++;
 801121c:	9303      	str	r3, [sp, #12]
        if (fmt)
 801121e:	b115      	cbz	r5, 8011226 <print_object.isra.2+0x20e>
        {
            len += depth;
 8011220:	f10a 0408 	add.w	r4, sl, #8
 8011224:	e000      	b.n	8011228 <print_object.isra.2+0x210>
    char **names = 0;
    char *out = 0;
    char *ptr;
    char *ret;
    char *str;
    int len = 7;
 8011226:	2407      	movs	r4, #7
 8011228:	2d00      	cmp	r5, #0
        {
            names[i] = str = print_string_ptr(child->string, 0); /* print key */
            entries[i++] = ret = print_value(child, depth, fmt, 0);
            if (str && ret)
            {
                len += strlen(ret) + strlen(str) + 2 + (fmt ? 2 + depth : 0);
 801122a:	f10a 0303 	add.w	r3, sl, #3
 801122e:	9a01      	ldr	r2, [sp, #4]
 8011230:	f04f 0600 	mov.w	r6, #0
 8011234:	bf08      	it	eq
 8011236:	2300      	moveq	r3, #0
 8011238:	f1a2 0904 	sub.w	r9, r2, #4
 801123c:	f1ab 0204 	sub.w	r2, fp, #4
 8011240:	3302      	adds	r3, #2
 8011242:	9202      	str	r2, [sp, #8]
 8011244:	9304      	str	r3, [sp, #16]
        depth++;
        if (fmt)
        {
            len += depth;
        }
        while (child && !fail)
 8011246:	b327      	cbz	r7, 8011292 <print_object.isra.2+0x27a>
 8011248:	bb56      	cbnz	r6, 80112a0 <print_object.isra.2+0x288>
        {
            names[i] = str = print_string_ptr(child->string, 0); /* print key */
 801124a:	4631      	mov	r1, r6
 801124c:	6a38      	ldr	r0, [r7, #32]
 801124e:	f7ff fb25 	bl	801089c <print_string_ptr>
            entries[i++] = ret = print_value(child, depth, fmt, 0);
 8011252:	462a      	mov	r2, r5
        {
            len += depth;
        }
        while (child && !fail)
        {
            names[i] = str = print_string_ptr(child->string, 0); /* print key */
 8011254:	f849 0f04 	str.w	r0, [r9, #4]!
 8011258:	4680      	mov	r8, r0
            entries[i++] = ret = print_value(child, depth, fmt, 0);
 801125a:	4633      	mov	r3, r6
 801125c:	9903      	ldr	r1, [sp, #12]
 801125e:	4638      	mov	r0, r7
 8011260:	f7ff fe72 	bl	8010f48 <print_value>
 8011264:	9a02      	ldr	r2, [sp, #8]
 8011266:	f842 0f04 	str.w	r0, [r2, #4]!
 801126a:	9202      	str	r2, [sp, #8]
            if (str && ret)
 801126c:	f1b8 0f00 	cmp.w	r8, #0
 8011270:	d00c      	beq.n	801128c <print_object.isra.2+0x274>
 8011272:	b158      	cbz	r0, 801128c <print_object.isra.2+0x274>
            {
                len += strlen(ret) + strlen(str) + 2 + (fmt ? 2 + depth : 0);
 8011274:	f7ef f82c 	bl	80002d0 <strlen>
 8011278:	9005      	str	r0, [sp, #20]
 801127a:	4640      	mov	r0, r8
 801127c:	f7ef f828 	bl	80002d0 <strlen>
 8011280:	9b04      	ldr	r3, [sp, #16]
 8011282:	441c      	add	r4, r3
 8011284:	9b05      	ldr	r3, [sp, #20]
 8011286:	441c      	add	r4, r3
 8011288:	4404      	add	r4, r0
 801128a:	e000      	b.n	801128e <print_object.isra.2+0x276>
            }
            else
            {
                fail = 1;
 801128c:	2601      	movs	r6, #1
            }
            child = child->next;
 801128e:	683f      	ldr	r7, [r7, #0]
 8011290:	e7d9      	b.n	8011246 <print_object.isra.2+0x22e>
        }

        /* Try to allocate the output string */
        if (!fail)
 8011292:	b92e      	cbnz	r6, 80112a0 <print_object.isra.2+0x288>
        {
            out = (char*)cJSON_malloc(len);
 8011294:	4b12      	ldr	r3, [pc, #72]	; (80112e0 <print_object.isra.2+0x2c8>)
 8011296:	4620      	mov	r0, r4
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4798      	blx	r3
        }
        if (!out)
 801129c:	4604      	mov	r4, r0
 801129e:	b9c8      	cbnz	r0, 80112d4 <print_object.isra.2+0x2bc>
        {
            names[i] = str = print_string_ptr(child->string, 0); /* print key */
            entries[i++] = ret = print_value(child, depth, fmt, 0);
            if (str && ret)
            {
                len += strlen(ret) + strlen(str) + 2 + (fmt ? 2 + depth : 0);
 80112a0:	2400      	movs	r4, #0
            /* free all the printed keys and values */
            for (i = 0; i < numentries; i++)
            {
                if (names[i])
                {
                    cJSON_free(names[i]);
 80112a2:	4d10      	ldr	r5, [pc, #64]	; (80112e4 <print_object.isra.2+0x2cc>)
        if (fail)
        {
            /* free all the printed keys and values */
            for (i = 0; i < numentries; i++)
            {
                if (names[i])
 80112a4:	9b01      	ldr	r3, [sp, #4]
 80112a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80112aa:	b108      	cbz	r0, 80112b0 <print_object.isra.2+0x298>
                {
                    cJSON_free(names[i]);
 80112ac:	682b      	ldr	r3, [r5, #0]
 80112ae:	4798      	blx	r3
                }
                if (entries[i])
 80112b0:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 80112b4:	b108      	cbz	r0, 80112ba <print_object.isra.2+0x2a2>
                {
                    cJSON_free(entries[i]);
 80112b6:	682b      	ldr	r3, [r5, #0]
 80112b8:	4798      	blx	r3

        /* Handle failure */
        if (fail)
        {
            /* free all the printed keys and values */
            for (i = 0; i < numentries; i++)
 80112ba:	3401      	adds	r4, #1
 80112bc:	9b00      	ldr	r3, [sp, #0]
 80112be:	42a3      	cmp	r3, r4
 80112c0:	dcf0      	bgt.n	80112a4 <print_object.isra.2+0x28c>
                if (entries[i])
                {
                    cJSON_free(entries[i]);
                }
            }
            cJSON_free(names);
 80112c2:	4c08      	ldr	r4, [pc, #32]	; (80112e4 <print_object.isra.2+0x2cc>)
 80112c4:	9801      	ldr	r0, [sp, #4]
 80112c6:	6823      	ldr	r3, [r4, #0]
 80112c8:	4798      	blx	r3
            cJSON_free(entries);
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	4658      	mov	r0, fp
 80112ce:	4798      	blx	r3
            return 0;
 80112d0:	2000      	movs	r0, #0
 80112d2:	e084      	b.n	80113de <print_object.isra.2+0x3c6>
        }

        /* Compose the output: */
        *out = '{';
 80112d4:	237b      	movs	r3, #123	; 0x7b
 80112d6:	7003      	strb	r3, [r0, #0]
        ptr = out + 1;
        if (fmt)
 80112d8:	b935      	cbnz	r5, 80112e8 <print_object.isra.2+0x2d0>
            return 0;
        }

        /* Compose the output: */
        *out = '{';
        ptr = out + 1;
 80112da:	1c46      	adds	r6, r0, #1
 80112dc:	e007      	b.n	80112ee <print_object.isra.2+0x2d6>
 80112de:	bf00      	nop
 80112e0:	20010088 	.word	0x20010088
 80112e4:	20010084 	.word	0x20010084
        if (fmt)
        {
            *ptr++ = '\n';
 80112e8:	220a      	movs	r2, #10
 80112ea:	1c86      	adds	r6, r0, #2
 80112ec:	7042      	strb	r2, [r0, #1]
        }
        *ptr = 0;
 80112ee:	2200      	movs	r2, #0
 80112f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80112f4:	465f      	mov	r7, fp
 80112f6:	7032      	strb	r2, [r6, #0]
        for (i = 0; i < numentries; i++)
 80112f8:	9202      	str	r2, [sp, #8]
        {
            if (fmt)
 80112fa:	46b0      	mov	r8, r6
 80112fc:	b14d      	cbz	r5, 8011312 <print_object.isra.2+0x2fa>
            {
                for (j = 0; j < depth; j++)
 80112fe:	ebc6 0208 	rsb	r2, r6, r8
 8011302:	9b03      	ldr	r3, [sp, #12]
 8011304:	4293      	cmp	r3, r2
 8011306:	dd04      	ble.n	8011312 <print_object.isra.2+0x2fa>
                {
                    *ptr++='\t';
 8011308:	f04f 0309 	mov.w	r3, #9
 801130c:	f808 3b01 	strb.w	r3, [r8], #1
 8011310:	e7f5      	b.n	80112fe <print_object.isra.2+0x2e6>
                }
            }
            tmplen = strlen(names[i]);
 8011312:	f8d9 1000 	ldr.w	r1, [r9]
 8011316:	f8cd 9010 	str.w	r9, [sp, #16]
 801131a:	4608      	mov	r0, r1
 801131c:	9105      	str	r1, [sp, #20]
 801131e:	f7ee ffd7 	bl	80002d0 <strlen>
            memcpy(ptr, names[i], tmplen);
 8011322:	9905      	ldr	r1, [sp, #20]
                for (j = 0; j < depth; j++)
                {
                    *ptr++='\t';
                }
            }
            tmplen = strlen(names[i]);
 8011324:	4606      	mov	r6, r0
            memcpy(ptr, names[i], tmplen);
 8011326:	4602      	mov	r2, r0
 8011328:	4640      	mov	r0, r8
 801132a:	f000 fb8a 	bl	8011a42 <memcpy>
            ptr += tmplen;
            *ptr++ = ':';
 801132e:	223a      	movs	r2, #58	; 0x3a
                    *ptr++='\t';
                }
            }
            tmplen = strlen(names[i]);
            memcpy(ptr, names[i], tmplen);
            ptr += tmplen;
 8011330:	eb08 0306 	add.w	r3, r8, r6
            *ptr++ = ':';
 8011334:	f808 2006 	strb.w	r2, [r8, r6]
            if (fmt)
 8011338:	b915      	cbnz	r5, 8011340 <print_object.isra.2+0x328>
                }
            }
            tmplen = strlen(names[i]);
            memcpy(ptr, names[i], tmplen);
            ptr += tmplen;
            *ptr++ = ':';
 801133a:	3601      	adds	r6, #1
 801133c:	44b0      	add	r8, r6
 801133e:	e004      	b.n	801134a <print_object.isra.2+0x332>
            if (fmt)
            {
                *ptr++ = '\t';
 8011340:	f04f 0209 	mov.w	r2, #9
 8011344:	f103 0802 	add.w	r8, r3, #2
 8011348:	705a      	strb	r2, [r3, #1]
            }
            strcpy(ptr, entries[i]);
 801134a:	6839      	ldr	r1, [r7, #0]
 801134c:	4640      	mov	r0, r8
 801134e:	9705      	str	r7, [sp, #20]
 8011350:	f000 fc34 	bl	8011bbc <strcpy>
            ptr += strlen(entries[i]);
 8011354:	6838      	ldr	r0, [r7, #0]
 8011356:	f7ee ffbb 	bl	80002d0 <strlen>
            if (i != (numentries - 1))
 801135a:	9b00      	ldr	r3, [sp, #0]
            if (fmt)
            {
                *ptr++ = '\t';
            }
            strcpy(ptr, entries[i]);
            ptr += strlen(entries[i]);
 801135c:	eb08 0600 	add.w	r6, r8, r0
            if (i != (numentries - 1))
 8011360:	1e5a      	subs	r2, r3, #1
 8011362:	9b02      	ldr	r3, [sp, #8]
 8011364:	429a      	cmp	r2, r3
            {
                *ptr++ = ',';
 8011366:	bf1e      	ittt	ne
 8011368:	222c      	movne	r2, #44	; 0x2c
 801136a:	3601      	addne	r6, #1
 801136c:	f808 2000 	strbne.w	r2, [r8, r0]
            }
            if (fmt)
 8011370:	b11d      	cbz	r5, 801137a <print_object.isra.2+0x362>
            {
                *ptr++ = '\n';
 8011372:	220a      	movs	r2, #10
 8011374:	3601      	adds	r6, #1
 8011376:	f806 2c01 	strb.w	r2, [r6, #-1]
            }
            *ptr = 0;
            cJSON_free(names[i]);
 801137a:	9b04      	ldr	r3, [sp, #16]
            }
            if (fmt)
            {
                *ptr++ = '\n';
            }
            *ptr = 0;
 801137c:	2200      	movs	r2, #0
            cJSON_free(names[i]);
 801137e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80113e4 <print_object.isra.2+0x3cc>
 8011382:	f109 0904 	add.w	r9, r9, #4
            }
            if (fmt)
            {
                *ptr++ = '\n';
            }
            *ptr = 0;
 8011386:	7032      	strb	r2, [r6, #0]
 8011388:	3704      	adds	r7, #4
            cJSON_free(names[i]);
 801138a:	6818      	ldr	r0, [r3, #0]
 801138c:	f8d8 2000 	ldr.w	r2, [r8]
 8011390:	4790      	blx	r2
            cJSON_free(entries[i]);
 8011392:	9b05      	ldr	r3, [sp, #20]
 8011394:	f8d8 2000 	ldr.w	r2, [r8]
 8011398:	6818      	ldr	r0, [r3, #0]
 801139a:	4790      	blx	r2
        if (fmt)
        {
            *ptr++ = '\n';
        }
        *ptr = 0;
        for (i = 0; i < numentries; i++)
 801139c:	9b02      	ldr	r3, [sp, #8]
 801139e:	3301      	adds	r3, #1
 80113a0:	9302      	str	r3, [sp, #8]
 80113a2:	9a02      	ldr	r2, [sp, #8]
 80113a4:	9b00      	ldr	r3, [sp, #0]
 80113a6:	4293      	cmp	r3, r2
 80113a8:	dca7      	bgt.n	80112fa <print_object.isra.2+0x2e2>
            *ptr = 0;
            cJSON_free(names[i]);
            cJSON_free(entries[i]);
        }

        cJSON_free(names);
 80113aa:	f8d8 2000 	ldr.w	r2, [r8]
 80113ae:	9801      	ldr	r0, [sp, #4]
 80113b0:	4790      	blx	r2
        cJSON_free(entries);
 80113b2:	f8d8 2000 	ldr.w	r2, [r8]
 80113b6:	4658      	mov	r0, fp
 80113b8:	4790      	blx	r2
        if (fmt)
 80113ba:	b15d      	cbz	r5, 80113d4 <print_object.isra.2+0x3bc>
 80113bc:	4632      	mov	r2, r6
        {
            for (i = 0; i < (depth - 1); i++)
            {
                *ptr++ = '\t';
 80113be:	2009      	movs	r0, #9

        cJSON_free(names);
        cJSON_free(entries);
        if (fmt)
        {
            for (i = 0; i < (depth - 1); i++)
 80113c0:	1b91      	subs	r1, r2, r6
 80113c2:	458a      	cmp	sl, r1
 80113c4:	dd02      	ble.n	80113cc <print_object.isra.2+0x3b4>
            {
                *ptr++ = '\t';
 80113c6:	f802 0b01 	strb.w	r0, [r2], #1
 80113ca:	e7f9      	b.n	80113c0 <print_object.isra.2+0x3a8>
 80113cc:	f1ba 0f00 	cmp.w	sl, #0
 80113d0:	bfa8      	it	ge
 80113d2:	4456      	addge	r6, sl
            }
        }
        *ptr++ = '}';
 80113d4:	227d      	movs	r2, #125	; 0x7d
 80113d6:	7032      	strb	r2, [r6, #0]
        *ptr++ = '\0';
 80113d8:	2200      	movs	r2, #0
 80113da:	7072      	strb	r2, [r6, #1]
 80113dc:	4620      	mov	r0, r4
    }

    return out;
}
 80113de:	b007      	add	sp, #28
 80113e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e4:	20010084 	.word	0x20010084

080113e8 <cJSON_Delete>:
    return node;
}

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80113e8:	b570      	push	{r4, r5, r6, lr}
 80113ea:	4604      	mov	r4, r0
 80113ec:	4d0e      	ldr	r5, [pc, #56]	; (8011428 <cJSON_Delete+0x40>)
    cJSON *next;
    while (c)
 80113ee:	b1d4      	cbz	r4, 8011426 <cJSON_Delete+0x3e>
    {
        next = c->next;
        if (!(c->type & cJSON_IsReference) && c->child)
 80113f0:	68e3      	ldr	r3, [r4, #12]
void cJSON_Delete(cJSON *c)
{
    cJSON *next;
    while (c)
    {
        next = c->next;
 80113f2:	6826      	ldr	r6, [r4, #0]
        if (!(c->type & cJSON_IsReference) && c->child)
 80113f4:	05d9      	lsls	r1, r3, #23
 80113f6:	d403      	bmi.n	8011400 <cJSON_Delete+0x18>
 80113f8:	68a0      	ldr	r0, [r4, #8]
 80113fa:	b108      	cbz	r0, 8011400 <cJSON_Delete+0x18>
        {
            cJSON_Delete(c->child);
 80113fc:	f7ff fff4 	bl	80113e8 <cJSON_Delete>
        }
        if (!(c->type & cJSON_IsReference) && c->valuestring)
 8011400:	68e3      	ldr	r3, [r4, #12]
 8011402:	05da      	lsls	r2, r3, #23
 8011404:	d403      	bmi.n	801140e <cJSON_Delete+0x26>
 8011406:	6920      	ldr	r0, [r4, #16]
 8011408:	b108      	cbz	r0, 801140e <cJSON_Delete+0x26>
        {
            cJSON_free(c->valuestring);
 801140a:	682b      	ldr	r3, [r5, #0]
 801140c:	4798      	blx	r3
        }
        if (!(c->type & cJSON_StringIsConst) && c->string)
 801140e:	68e3      	ldr	r3, [r4, #12]
 8011410:	059b      	lsls	r3, r3, #22
 8011412:	d403      	bmi.n	801141c <cJSON_Delete+0x34>
 8011414:	6a20      	ldr	r0, [r4, #32]
 8011416:	b108      	cbz	r0, 801141c <cJSON_Delete+0x34>
        {
            cJSON_free(c->string);
 8011418:	682b      	ldr	r3, [r5, #0]
 801141a:	4798      	blx	r3
        }
        cJSON_free(c);
 801141c:	4620      	mov	r0, r4
 801141e:	682b      	ldr	r3, [r5, #0]
 8011420:	4798      	blx	r3
        c = next;
 8011422:	4634      	mov	r4, r6
 8011424:	e7e3      	b.n	80113ee <cJSON_Delete+0x6>
    }
}
 8011426:	bd70      	pop	{r4, r5, r6, pc}
 8011428:	20010084 	.word	0x20010084

0801142c <cJSON_ParseWithOpts>:
    return in;
}

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value, const char **return_parse_end, int require_null_terminated)
{
 801142c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const char *end = 0;
    /* use global error pointer if no specific one was given */
    const char **ep = return_parse_end ? return_parse_end : &global_ep;
 8011430:	4e19      	ldr	r6, [pc, #100]	; (8011498 <cJSON_ParseWithOpts+0x6c>)
    cJSON *c = cJSON_New_Item();
    *ep = 0;
 8011432:	f04f 0800 	mov.w	r8, #0
    return in;
}

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value, const char **return_parse_end, int require_null_terminated)
{
 8011436:	4605      	mov	r5, r0
 8011438:	4691      	mov	r9, r2
    const char *end = 0;
    /* use global error pointer if no specific one was given */
    const char **ep = return_parse_end ? return_parse_end : &global_ep;
 801143a:	2900      	cmp	r1, #0
 801143c:	bf18      	it	ne
 801143e:	460e      	movne	r6, r1
 8011440:	460f      	mov	r7, r1
    cJSON *c = cJSON_New_Item();
 8011442:	f7ff f8f5 	bl	8010630 <cJSON_New_Item>
    *ep = 0;
    if (!c) /* memory fail */
 8011446:	4604      	mov	r4, r0
{
    const char *end = 0;
    /* use global error pointer if no specific one was given */
    const char **ep = return_parse_end ? return_parse_end : &global_ep;
    cJSON *c = cJSON_New_Item();
    *ep = 0;
 8011448:	f8c6 8000 	str.w	r8, [r6]
    if (!c) /* memory fail */
 801144c:	b300      	cbz	r0, 8011490 <cJSON_ParseWithOpts+0x64>
    {
        return 0;
    }

    end = parse_value(c, skip(value), ep);
 801144e:	4628      	mov	r0, r5
 8011450:	f7ff f8e4 	bl	801061c <skip>
 8011454:	4632      	mov	r2, r6
 8011456:	4601      	mov	r1, r0
 8011458:	4620      	mov	r0, r4
 801145a:	f7ff fad1 	bl	8010a00 <parse_value>
    if (!end)
 801145e:	4605      	mov	r5, r0
 8011460:	b928      	cbnz	r0, 801146e <cJSON_ParseWithOpts+0x42>
    {
        /* parse failure. ep is set. */
        cJSON_Delete(c);
 8011462:	4620      	mov	r0, r4
 8011464:	f7ff ffc0 	bl	80113e8 <cJSON_Delete>
        return 0;
 8011468:	4628      	mov	r0, r5
 801146a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 801146e:	f1b9 0f00 	cmp.w	r9, #0
 8011472:	d00b      	beq.n	801148c <cJSON_ParseWithOpts+0x60>
    {
        end = skip(end);
 8011474:	f7ff f8d2 	bl	801061c <skip>
        if (*end)
 8011478:	7803      	ldrb	r3, [r0, #0]
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
    {
        end = skip(end);
 801147a:	4605      	mov	r5, r0
        if (*end)
 801147c:	b133      	cbz	r3, 801148c <cJSON_ParseWithOpts+0x60>
        {
            cJSON_Delete(c);
 801147e:	4620      	mov	r0, r4
 8011480:	f7ff ffb2 	bl	80113e8 <cJSON_Delete>
            *ep = end;
 8011484:	6035      	str	r5, [r6, #0]
            return 0;
 8011486:	4640      	mov	r0, r8
 8011488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
    }
    if (return_parse_end)
 801148c:	b107      	cbz	r7, 8011490 <cJSON_ParseWithOpts+0x64>
    {
        *return_parse_end = end;
 801148e:	603d      	str	r5, [r7, #0]
 8011490:	4620      	mov	r0, r4
    }

    return c;
}
 8011492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011496:	bf00      	nop
 8011498:	20042f90 	.word	0x20042f90

0801149c <cJSON_Parse>:

/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value)
{
    return cJSON_ParseWithOpts(value, 0, 0);
 801149c:	2200      	movs	r2, #0
 801149e:	4611      	mov	r1, r2
 80114a0:	f7ff bfc4 	b.w	801142c <cJSON_ParseWithOpts>

080114a4 <cJSON_Print>:
}

/* Render a cJSON item/entity/structure to text. */
char *cJSON_Print(const cJSON *item)
{
    return print_value(item, 0, 1, 0);
 80114a4:	2300      	movs	r3, #0
 80114a6:	2201      	movs	r2, #1
 80114a8:	4619      	mov	r1, r3
 80114aa:	f7ff bd4d 	b.w	8010f48 <print_value>

080114ae <cJSON_GetObjectItem>:

    return c;
}

cJSON *cJSON_GetObjectItem(const cJSON *object, const char *string)
{
 80114ae:	b538      	push	{r3, r4, r5, lr}
 80114b0:	460d      	mov	r5, r1
    cJSON *c = object ? object->child : 0;
 80114b2:	b140      	cbz	r0, 80114c6 <cJSON_GetObjectItem+0x18>
 80114b4:	6884      	ldr	r4, [r0, #8]
    while (c && cJSON_strcasecmp(c->string, string))
 80114b6:	b13c      	cbz	r4, 80114c8 <cJSON_GetObjectItem+0x1a>
 80114b8:	4629      	mov	r1, r5
 80114ba:	6a20      	ldr	r0, [r4, #32]
 80114bc:	f7fe ff44 	bl	8010348 <cJSON_strcasecmp>
 80114c0:	b110      	cbz	r0, 80114c8 <cJSON_GetObjectItem+0x1a>
    {
        c = c->next;
 80114c2:	6824      	ldr	r4, [r4, #0]
 80114c4:	e7f7      	b.n	80114b6 <cJSON_GetObjectItem+0x8>
 80114c6:	4604      	mov	r4, r0
    }
    return c;
}
 80114c8:	4620      	mov	r0, r4
 80114ca:	bd38      	pop	{r3, r4, r5, pc}

080114cc <cJSON_AddItemToArray>:
}

/* Add item to array/object. */
void   cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
    cJSON *c = array->child;
 80114cc:	6883      	ldr	r3, [r0, #8]
    if (!item)
 80114ce:	b141      	cbz	r1, 80114e2 <cJSON_AddItemToArray+0x16>
    {
        return;
    }
    if (!c)
 80114d0:	b90b      	cbnz	r3, 80114d6 <cJSON_AddItemToArray+0xa>
    {
        /* list is empty, start new one */
        array->child = item;
 80114d2:	6081      	str	r1, [r0, #8]
 80114d4:	4770      	bx	lr
    }
    else
    {
        /* append to the end */
        while (c && c->next)
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	b10a      	cbz	r2, 80114de <cJSON_AddItemToArray+0x12>
 80114da:	4613      	mov	r3, r2
 80114dc:	e7fb      	b.n	80114d6 <cJSON_AddItemToArray+0xa>
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
    prev->next = item;
 80114de:	6019      	str	r1, [r3, #0]
    item->prev = prev;
 80114e0:	604b      	str	r3, [r1, #4]
 80114e2:	4770      	bx	lr

080114e4 <cJSON_AddItemToObject>:
        suffix_object(c, item);
    }
}

void   cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 80114e4:	b570      	push	{r4, r5, r6, lr}
 80114e6:	4605      	mov	r5, r0
 80114e8:	460e      	mov	r6, r1
    if (!item)
 80114ea:	4614      	mov	r4, r2
 80114ec:	b172      	cbz	r2, 801150c <cJSON_AddItemToObject+0x28>
    {
        return;
    }

    /* free old key and set new one */
    if (item->string)
 80114ee:	6a10      	ldr	r0, [r2, #32]
 80114f0:	b110      	cbz	r0, 80114f8 <cJSON_AddItemToObject+0x14>
    {
        cJSON_free(item->string);
 80114f2:	4b07      	ldr	r3, [pc, #28]	; (8011510 <cJSON_AddItemToObject+0x2c>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	4798      	blx	r3
    }
    item->string = cJSON_strdup(string);
 80114f8:	4630      	mov	r0, r6
 80114fa:	f7ff f8e3 	bl	80106c4 <cJSON_strdup>

    cJSON_AddItemToArray(object,item);
 80114fe:	4621      	mov	r1, r4
    /* free old key and set new one */
    if (item->string)
    {
        cJSON_free(item->string);
    }
    item->string = cJSON_strdup(string);
 8011500:	6220      	str	r0, [r4, #32]

    cJSON_AddItemToArray(object,item);
 8011502:	4628      	mov	r0, r5
}
 8011504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    {
        cJSON_free(item->string);
    }
    item->string = cJSON_strdup(string);

    cJSON_AddItemToArray(object,item);
 8011508:	f7ff bfe0 	b.w	80114cc <cJSON_AddItemToArray>
 801150c:	bd70      	pop	{r4, r5, r6, pc}
 801150e:	bf00      	nop
 8011510:	20010084 	.word	0x20010084

08011514 <cJSON_CreateNumber>:

    return item;
}

cJSON *cJSON_CreateNumber(double num)
{
 8011514:	b513      	push	{r0, r1, r4, lr}
 8011516:	ed8d 0b00 	vstr	d0, [sp]
    cJSON *item = cJSON_New_Item();
 801151a:	f7ff f889 	bl	8010630 <cJSON_New_Item>
    if(item)
 801151e:	4604      	mov	r4, r0
 8011520:	b150      	cbz	r0, 8011538 <cJSON_CreateNumber+0x24>
    {
        item->type = cJSON_Number;
 8011522:	2308      	movs	r3, #8
        item->valuedouble = num;
 8011524:	ed9d 0b00 	vldr	d0, [sp]
cJSON *cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item();
    if(item)
    {
        item->type = cJSON_Number;
 8011528:	60c3      	str	r3, [r0, #12]
        item->valuedouble = num;
 801152a:	ed80 0b06 	vstr	d0, [r0, #24]
        item->valueint = (int)num;
 801152e:	ec51 0b10 	vmov	r0, r1, d0
 8011532:	f7ef fb8d 	bl	8000c50 <__aeabi_d2iz>
 8011536:	6160      	str	r0, [r4, #20]
    }

    return item;
}
 8011538:	4620      	mov	r0, r4
 801153a:	b002      	add	sp, #8
 801153c:	bd10      	pop	{r4, pc}

0801153e <cJSON_CreateString>:

cJSON *cJSON_CreateString(const char *string)
{
 801153e:	b538      	push	{r3, r4, r5, lr}
 8011540:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item();
 8011542:	f7ff f875 	bl	8010630 <cJSON_New_Item>
    if(item)
 8011546:	4604      	mov	r4, r0
 8011548:	b160      	cbz	r0, 8011564 <cJSON_CreateString+0x26>
    {
        item->type = cJSON_String;
 801154a:	2310      	movs	r3, #16
 801154c:	60c3      	str	r3, [r0, #12]
        item->valuestring = cJSON_strdup(string);
 801154e:	4628      	mov	r0, r5
 8011550:	f7ff f8b8 	bl	80106c4 <cJSON_strdup>
 8011554:	4605      	mov	r5, r0
 8011556:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
        {
            cJSON_Delete(item);
 8011558:	4620      	mov	r0, r4
    cJSON *item = cJSON_New_Item();
    if(item)
    {
        item->type = cJSON_String;
        item->valuestring = cJSON_strdup(string);
        if(!item->valuestring)
 801155a:	b925      	cbnz	r5, 8011566 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
 801155c:	f7ff ff44 	bl	80113e8 <cJSON_Delete>
            return 0;
 8011560:	4628      	mov	r0, r5
 8011562:	bd38      	pop	{r3, r4, r5, pc}
 8011564:	bd38      	pop	{r3, r4, r5, pc}
        }
    }

    return item;
}
 8011566:	bd38      	pop	{r3, r4, r5, pc}

08011568 <cJSON_CreateObject>:

    return item;
}

cJSON *cJSON_CreateObject(void)
{
 8011568:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item();
 801156a:	f7ff f861 	bl	8010630 <cJSON_New_Item>
    if (item)
 801156e:	b108      	cbz	r0, 8011574 <cJSON_CreateObject+0xc>
    {
        item->type = cJSON_Object;
 8011570:	2340      	movs	r3, #64	; 0x40
 8011572:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
 8011574:	bd08      	pop	{r3, pc}
	...

08011578 <__libc_init_array>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	4b0e      	ldr	r3, [pc, #56]	; (80115b4 <__libc_init_array+0x3c>)
 801157c:	4c0e      	ldr	r4, [pc, #56]	; (80115b8 <__libc_init_array+0x40>)
 801157e:	1ae4      	subs	r4, r4, r3
 8011580:	10a4      	asrs	r4, r4, #2
 8011582:	2500      	movs	r5, #0
 8011584:	461e      	mov	r6, r3
 8011586:	42a5      	cmp	r5, r4
 8011588:	d004      	beq.n	8011594 <__libc_init_array+0x1c>
 801158a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801158e:	4798      	blx	r3
 8011590:	3501      	adds	r5, #1
 8011592:	e7f8      	b.n	8011586 <__libc_init_array+0xe>
 8011594:	f006 fca4 	bl	8017ee0 <_init>
 8011598:	4c08      	ldr	r4, [pc, #32]	; (80115bc <__libc_init_array+0x44>)
 801159a:	4b09      	ldr	r3, [pc, #36]	; (80115c0 <__libc_init_array+0x48>)
 801159c:	1ae4      	subs	r4, r4, r3
 801159e:	10a4      	asrs	r4, r4, #2
 80115a0:	2500      	movs	r5, #0
 80115a2:	461e      	mov	r6, r3
 80115a4:	42a5      	cmp	r5, r4
 80115a6:	d004      	beq.n	80115b2 <__libc_init_array+0x3a>
 80115a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80115ac:	4798      	blx	r3
 80115ae:	3501      	adds	r5, #1
 80115b0:	e7f8      	b.n	80115a4 <__libc_init_array+0x2c>
 80115b2:	bd70      	pop	{r4, r5, r6, pc}
 80115b4:	0802ffb8 	.word	0x0802ffb8
 80115b8:	0802ffb8 	.word	0x0802ffb8
 80115bc:	0802ffbc 	.word	0x0802ffbc
 80115c0:	0802ffb8 	.word	0x0802ffb8

080115c4 <malloc>:
 80115c4:	4b02      	ldr	r3, [pc, #8]	; (80115d0 <malloc+0xc>)
 80115c6:	4601      	mov	r1, r0
 80115c8:	6818      	ldr	r0, [r3, #0]
 80115ca:	f000 b80b 	b.w	80115e4 <_malloc_r>
 80115ce:	bf00      	nop
 80115d0:	20010590 	.word	0x20010590

080115d4 <free>:
 80115d4:	4b02      	ldr	r3, [pc, #8]	; (80115e0 <free+0xc>)
 80115d6:	4601      	mov	r1, r0
 80115d8:	6818      	ldr	r0, [r3, #0]
 80115da:	f002 bedf 	b.w	801439c <_free_r>
 80115de:	bf00      	nop
 80115e0:	20010590 	.word	0x20010590

080115e4 <_malloc_r>:
 80115e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e8:	f101 040b 	add.w	r4, r1, #11
 80115ec:	2c16      	cmp	r4, #22
 80115ee:	b085      	sub	sp, #20
 80115f0:	4681      	mov	r9, r0
 80115f2:	d903      	bls.n	80115fc <_malloc_r+0x18>
 80115f4:	f034 0407 	bics.w	r4, r4, #7
 80115f8:	d501      	bpl.n	80115fe <_malloc_r+0x1a>
 80115fa:	e002      	b.n	8011602 <_malloc_r+0x1e>
 80115fc:	2410      	movs	r4, #16
 80115fe:	428c      	cmp	r4, r1
 8011600:	d203      	bcs.n	801160a <_malloc_r+0x26>
 8011602:	230c      	movs	r3, #12
 8011604:	f8c9 3000 	str.w	r3, [r9]
 8011608:	e1ea      	b.n	80119e0 <_malloc_r+0x3fc>
 801160a:	4648      	mov	r0, r9
 801160c:	f000 fa2c 	bl	8011a68 <__malloc_lock>
 8011610:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8011614:	4d9e      	ldr	r5, [pc, #632]	; (8011890 <_malloc_r+0x2ac>)
 8011616:	d217      	bcs.n	8011648 <_malloc_r+0x64>
 8011618:	f104 0208 	add.w	r2, r4, #8
 801161c:	442a      	add	r2, r5
 801161e:	f1a2 0108 	sub.w	r1, r2, #8
 8011622:	6856      	ldr	r6, [r2, #4]
 8011624:	428e      	cmp	r6, r1
 8011626:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 801162a:	d102      	bne.n	8011632 <_malloc_r+0x4e>
 801162c:	68d6      	ldr	r6, [r2, #12]
 801162e:	42b2      	cmp	r2, r6
 8011630:	d008      	beq.n	8011644 <_malloc_r+0x60>
 8011632:	6873      	ldr	r3, [r6, #4]
 8011634:	68f2      	ldr	r2, [r6, #12]
 8011636:	68b1      	ldr	r1, [r6, #8]
 8011638:	f023 0303 	bic.w	r3, r3, #3
 801163c:	60ca      	str	r2, [r1, #12]
 801163e:	4433      	add	r3, r6
 8011640:	6091      	str	r1, [r2, #8]
 8011642:	e02f      	b.n	80116a4 <_malloc_r+0xc0>
 8011644:	3302      	adds	r3, #2
 8011646:	e03d      	b.n	80116c4 <_malloc_r+0xe0>
 8011648:	0a63      	lsrs	r3, r4, #9
 801164a:	d01a      	beq.n	8011682 <_malloc_r+0x9e>
 801164c:	2b04      	cmp	r3, #4
 801164e:	d802      	bhi.n	8011656 <_malloc_r+0x72>
 8011650:	09a3      	lsrs	r3, r4, #6
 8011652:	3338      	adds	r3, #56	; 0x38
 8011654:	e018      	b.n	8011688 <_malloc_r+0xa4>
 8011656:	2b14      	cmp	r3, #20
 8011658:	d801      	bhi.n	801165e <_malloc_r+0x7a>
 801165a:	335b      	adds	r3, #91	; 0x5b
 801165c:	e014      	b.n	8011688 <_malloc_r+0xa4>
 801165e:	2b54      	cmp	r3, #84	; 0x54
 8011660:	d802      	bhi.n	8011668 <_malloc_r+0x84>
 8011662:	0b23      	lsrs	r3, r4, #12
 8011664:	336e      	adds	r3, #110	; 0x6e
 8011666:	e00f      	b.n	8011688 <_malloc_r+0xa4>
 8011668:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 801166c:	d802      	bhi.n	8011674 <_malloc_r+0x90>
 801166e:	0be3      	lsrs	r3, r4, #15
 8011670:	3377      	adds	r3, #119	; 0x77
 8011672:	e009      	b.n	8011688 <_malloc_r+0xa4>
 8011674:	f240 5254 	movw	r2, #1364	; 0x554
 8011678:	4293      	cmp	r3, r2
 801167a:	d804      	bhi.n	8011686 <_malloc_r+0xa2>
 801167c:	0ca3      	lsrs	r3, r4, #18
 801167e:	337c      	adds	r3, #124	; 0x7c
 8011680:	e002      	b.n	8011688 <_malloc_r+0xa4>
 8011682:	233f      	movs	r3, #63	; 0x3f
 8011684:	e000      	b.n	8011688 <_malloc_r+0xa4>
 8011686:	237e      	movs	r3, #126	; 0x7e
 8011688:	1c5a      	adds	r2, r3, #1
 801168a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 801168e:	f1a2 0008 	sub.w	r0, r2, #8
 8011692:	6856      	ldr	r6, [r2, #4]
 8011694:	e00c      	b.n	80116b0 <_malloc_r+0xcc>
 8011696:	2900      	cmp	r1, #0
 8011698:	68f1      	ldr	r1, [r6, #12]
 801169a:	db08      	blt.n	80116ae <_malloc_r+0xca>
 801169c:	68b3      	ldr	r3, [r6, #8]
 801169e:	60d9      	str	r1, [r3, #12]
 80116a0:	608b      	str	r3, [r1, #8]
 80116a2:	18b3      	adds	r3, r6, r2
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	f042 0201 	orr.w	r2, r2, #1
 80116aa:	605a      	str	r2, [r3, #4]
 80116ac:	e1a3      	b.n	80119f6 <_malloc_r+0x412>
 80116ae:	460e      	mov	r6, r1
 80116b0:	4286      	cmp	r6, r0
 80116b2:	d006      	beq.n	80116c2 <_malloc_r+0xde>
 80116b4:	6872      	ldr	r2, [r6, #4]
 80116b6:	f022 0203 	bic.w	r2, r2, #3
 80116ba:	1b11      	subs	r1, r2, r4
 80116bc:	290f      	cmp	r1, #15
 80116be:	ddea      	ble.n	8011696 <_malloc_r+0xb2>
 80116c0:	3b01      	subs	r3, #1
 80116c2:	3301      	adds	r3, #1
 80116c4:	4a72      	ldr	r2, [pc, #456]	; (8011890 <_malloc_r+0x2ac>)
 80116c6:	692e      	ldr	r6, [r5, #16]
 80116c8:	f102 0708 	add.w	r7, r2, #8
 80116cc:	42be      	cmp	r6, r7
 80116ce:	4639      	mov	r1, r7
 80116d0:	d079      	beq.n	80117c6 <_malloc_r+0x1e2>
 80116d2:	6870      	ldr	r0, [r6, #4]
 80116d4:	f020 0003 	bic.w	r0, r0, #3
 80116d8:	ebc4 0e00 	rsb	lr, r4, r0
 80116dc:	f1be 0f0f 	cmp.w	lr, #15
 80116e0:	dd0d      	ble.n	80116fe <_malloc_r+0x11a>
 80116e2:	1933      	adds	r3, r6, r4
 80116e4:	f044 0401 	orr.w	r4, r4, #1
 80116e8:	6074      	str	r4, [r6, #4]
 80116ea:	6153      	str	r3, [r2, #20]
 80116ec:	6113      	str	r3, [r2, #16]
 80116ee:	f04e 0201 	orr.w	r2, lr, #1
 80116f2:	60df      	str	r7, [r3, #12]
 80116f4:	609f      	str	r7, [r3, #8]
 80116f6:	605a      	str	r2, [r3, #4]
 80116f8:	f843 e00e 	str.w	lr, [r3, lr]
 80116fc:	e17b      	b.n	80119f6 <_malloc_r+0x412>
 80116fe:	f1be 0f00 	cmp.w	lr, #0
 8011702:	6157      	str	r7, [r2, #20]
 8011704:	6117      	str	r7, [r2, #16]
 8011706:	db05      	blt.n	8011714 <_malloc_r+0x130>
 8011708:	4430      	add	r0, r6
 801170a:	6843      	ldr	r3, [r0, #4]
 801170c:	f043 0301 	orr.w	r3, r3, #1
 8011710:	6043      	str	r3, [r0, #4]
 8011712:	e170      	b.n	80119f6 <_malloc_r+0x412>
 8011714:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8011718:	d215      	bcs.n	8011746 <_malloc_r+0x162>
 801171a:	08c0      	lsrs	r0, r0, #3
 801171c:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8011720:	2701      	movs	r7, #1
 8011722:	fa07 fe0e 	lsl.w	lr, r7, lr
 8011726:	6857      	ldr	r7, [r2, #4]
 8011728:	3001      	adds	r0, #1
 801172a:	ea4e 0707 	orr.w	r7, lr, r7
 801172e:	6057      	str	r7, [r2, #4]
 8011730:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8011734:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8011738:	f8c6 e008 	str.w	lr, [r6, #8]
 801173c:	3f08      	subs	r7, #8
 801173e:	60f7      	str	r7, [r6, #12]
 8011740:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8011744:	e03d      	b.n	80117c2 <_malloc_r+0x1de>
 8011746:	0a42      	lsrs	r2, r0, #9
 8011748:	2a04      	cmp	r2, #4
 801174a:	d802      	bhi.n	8011752 <_malloc_r+0x16e>
 801174c:	0982      	lsrs	r2, r0, #6
 801174e:	3238      	adds	r2, #56	; 0x38
 8011750:	e015      	b.n	801177e <_malloc_r+0x19a>
 8011752:	2a14      	cmp	r2, #20
 8011754:	d801      	bhi.n	801175a <_malloc_r+0x176>
 8011756:	325b      	adds	r2, #91	; 0x5b
 8011758:	e011      	b.n	801177e <_malloc_r+0x19a>
 801175a:	2a54      	cmp	r2, #84	; 0x54
 801175c:	d802      	bhi.n	8011764 <_malloc_r+0x180>
 801175e:	0b02      	lsrs	r2, r0, #12
 8011760:	326e      	adds	r2, #110	; 0x6e
 8011762:	e00c      	b.n	801177e <_malloc_r+0x19a>
 8011764:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8011768:	d802      	bhi.n	8011770 <_malloc_r+0x18c>
 801176a:	0bc2      	lsrs	r2, r0, #15
 801176c:	3277      	adds	r2, #119	; 0x77
 801176e:	e006      	b.n	801177e <_malloc_r+0x19a>
 8011770:	f240 5754 	movw	r7, #1364	; 0x554
 8011774:	42ba      	cmp	r2, r7
 8011776:	bf9a      	itte	ls
 8011778:	0c82      	lsrls	r2, r0, #18
 801177a:	327c      	addls	r2, #124	; 0x7c
 801177c:	227e      	movhi	r2, #126	; 0x7e
 801177e:	1c57      	adds	r7, r2, #1
 8011780:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8011784:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8011788:	f8df c104 	ldr.w	ip, [pc, #260]	; 8011890 <_malloc_r+0x2ac>
 801178c:	45be      	cmp	lr, r7
 801178e:	d10d      	bne.n	80117ac <_malloc_r+0x1c8>
 8011790:	2001      	movs	r0, #1
 8011792:	1092      	asrs	r2, r2, #2
 8011794:	fa00 f202 	lsl.w	r2, r0, r2
 8011798:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801179c:	4310      	orrs	r0, r2
 801179e:	f8cc 0004 	str.w	r0, [ip, #4]
 80117a2:	4672      	mov	r2, lr
 80117a4:	e009      	b.n	80117ba <_malloc_r+0x1d6>
 80117a6:	68bf      	ldr	r7, [r7, #8]
 80117a8:	45be      	cmp	lr, r7
 80117aa:	d004      	beq.n	80117b6 <_malloc_r+0x1d2>
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	f022 0203 	bic.w	r2, r2, #3
 80117b2:	4290      	cmp	r0, r2
 80117b4:	d3f7      	bcc.n	80117a6 <_malloc_r+0x1c2>
 80117b6:	68fa      	ldr	r2, [r7, #12]
 80117b8:	46be      	mov	lr, r7
 80117ba:	60f2      	str	r2, [r6, #12]
 80117bc:	f8c6 e008 	str.w	lr, [r6, #8]
 80117c0:	6096      	str	r6, [r2, #8]
 80117c2:	f8ce 600c 	str.w	r6, [lr, #12]
 80117c6:	2001      	movs	r0, #1
 80117c8:	109a      	asrs	r2, r3, #2
 80117ca:	fa00 f202 	lsl.w	r2, r0, r2
 80117ce:	6868      	ldr	r0, [r5, #4]
 80117d0:	4282      	cmp	r2, r0
 80117d2:	d85f      	bhi.n	8011894 <_malloc_r+0x2b0>
 80117d4:	4202      	tst	r2, r0
 80117d6:	d106      	bne.n	80117e6 <_malloc_r+0x202>
 80117d8:	f023 0303 	bic.w	r3, r3, #3
 80117dc:	0052      	lsls	r2, r2, #1
 80117de:	4202      	tst	r2, r0
 80117e0:	f103 0304 	add.w	r3, r3, #4
 80117e4:	d0fa      	beq.n	80117dc <_malloc_r+0x1f8>
 80117e6:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80117ea:	46c2      	mov	sl, r8
 80117ec:	469c      	mov	ip, r3
 80117ee:	f8da 600c 	ldr.w	r6, [sl, #12]
 80117f2:	4556      	cmp	r6, sl
 80117f4:	d02c      	beq.n	8011850 <_malloc_r+0x26c>
 80117f6:	6870      	ldr	r0, [r6, #4]
 80117f8:	68f7      	ldr	r7, [r6, #12]
 80117fa:	f020 0003 	bic.w	r0, r0, #3
 80117fe:	ebc4 0e00 	rsb	lr, r4, r0
 8011802:	f1be 0f0f 	cmp.w	lr, #15
 8011806:	dd11      	ble.n	801182c <_malloc_r+0x248>
 8011808:	1933      	adds	r3, r6, r4
 801180a:	f044 0401 	orr.w	r4, r4, #1
 801180e:	6074      	str	r4, [r6, #4]
 8011810:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8011814:	60d7      	str	r7, [r2, #12]
 8011816:	60ba      	str	r2, [r7, #8]
 8011818:	f04e 0201 	orr.w	r2, lr, #1
 801181c:	616b      	str	r3, [r5, #20]
 801181e:	612b      	str	r3, [r5, #16]
 8011820:	60d9      	str	r1, [r3, #12]
 8011822:	6099      	str	r1, [r3, #8]
 8011824:	605a      	str	r2, [r3, #4]
 8011826:	f843 e00e 	str.w	lr, [r3, lr]
 801182a:	e00b      	b.n	8011844 <_malloc_r+0x260>
 801182c:	f1be 0f00 	cmp.w	lr, #0
 8011830:	db0c      	blt.n	801184c <_malloc_r+0x268>
 8011832:	1833      	adds	r3, r6, r0
 8011834:	685a      	ldr	r2, [r3, #4]
 8011836:	f042 0201 	orr.w	r2, r2, #1
 801183a:	605a      	str	r2, [r3, #4]
 801183c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8011840:	60df      	str	r7, [r3, #12]
 8011842:	60bb      	str	r3, [r7, #8]
 8011844:	4648      	mov	r0, r9
 8011846:	f000 f910 	bl	8011a6a <__malloc_unlock>
 801184a:	e0d8      	b.n	80119fe <_malloc_r+0x41a>
 801184c:	463e      	mov	r6, r7
 801184e:	e7d0      	b.n	80117f2 <_malloc_r+0x20e>
 8011850:	f10c 0c01 	add.w	ip, ip, #1
 8011854:	f01c 0f03 	tst.w	ip, #3
 8011858:	f10a 0a08 	add.w	sl, sl, #8
 801185c:	d1c7      	bne.n	80117ee <_malloc_r+0x20a>
 801185e:	0798      	lsls	r0, r3, #30
 8011860:	d104      	bne.n	801186c <_malloc_r+0x288>
 8011862:	686b      	ldr	r3, [r5, #4]
 8011864:	ea23 0302 	bic.w	r3, r3, r2
 8011868:	606b      	str	r3, [r5, #4]
 801186a:	e005      	b.n	8011878 <_malloc_r+0x294>
 801186c:	f858 0908 	ldr.w	r0, [r8], #-8
 8011870:	4580      	cmp	r8, r0
 8011872:	f103 33ff 	add.w	r3, r3, #4294967295
 8011876:	d0f2      	beq.n	801185e <_malloc_r+0x27a>
 8011878:	6868      	ldr	r0, [r5, #4]
 801187a:	0052      	lsls	r2, r2, #1
 801187c:	4282      	cmp	r2, r0
 801187e:	d809      	bhi.n	8011894 <_malloc_r+0x2b0>
 8011880:	b142      	cbz	r2, 8011894 <_malloc_r+0x2b0>
 8011882:	4663      	mov	r3, ip
 8011884:	4202      	tst	r2, r0
 8011886:	d1ae      	bne.n	80117e6 <_malloc_r+0x202>
 8011888:	3304      	adds	r3, #4
 801188a:	0052      	lsls	r2, r2, #1
 801188c:	e7fa      	b.n	8011884 <_malloc_r+0x2a0>
 801188e:	bf00      	nop
 8011890:	20010090 	.word	0x20010090
 8011894:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8011898:	f8db 6004 	ldr.w	r6, [fp, #4]
 801189c:	f026 0603 	bic.w	r6, r6, #3
 80118a0:	42b4      	cmp	r4, r6
 80118a2:	d803      	bhi.n	80118ac <_malloc_r+0x2c8>
 80118a4:	1b33      	subs	r3, r6, r4
 80118a6:	2b0f      	cmp	r3, #15
 80118a8:	f300 809c 	bgt.w	80119e4 <_malloc_r+0x400>
 80118ac:	4a56      	ldr	r2, [pc, #344]	; (8011a08 <_malloc_r+0x424>)
 80118ae:	4957      	ldr	r1, [pc, #348]	; (8011a0c <_malloc_r+0x428>)
 80118b0:	6812      	ldr	r2, [r2, #0]
 80118b2:	6808      	ldr	r0, [r1, #0]
 80118b4:	9101      	str	r1, [sp, #4]
 80118b6:	f102 0810 	add.w	r8, r2, #16
 80118ba:	4a55      	ldr	r2, [pc, #340]	; (8011a10 <_malloc_r+0x42c>)
 80118bc:	9203      	str	r2, [sp, #12]
 80118be:	3001      	adds	r0, #1
 80118c0:	bf18      	it	ne
 80118c2:	f102 31ff 	addne.w	r1, r2, #4294967295
 80118c6:	44a0      	add	r8, r4
 80118c8:	bf1e      	ittt	ne
 80118ca:	4488      	addne	r8, r1
 80118cc:	4251      	negne	r1, r2
 80118ce:	ea01 0808 	andne.w	r8, r1, r8
 80118d2:	eb0b 0306 	add.w	r3, fp, r6
 80118d6:	4641      	mov	r1, r8
 80118d8:	4648      	mov	r0, r9
 80118da:	9302      	str	r3, [sp, #8]
 80118dc:	f000 f900 	bl	8011ae0 <_sbrk_r>
 80118e0:	1c42      	adds	r2, r0, #1
 80118e2:	4607      	mov	r7, r0
 80118e4:	d06f      	beq.n	80119c6 <_malloc_r+0x3e2>
 80118e6:	9b02      	ldr	r3, [sp, #8]
 80118e8:	9a03      	ldr	r2, [sp, #12]
 80118ea:	4283      	cmp	r3, r0
 80118ec:	d901      	bls.n	80118f2 <_malloc_r+0x30e>
 80118ee:	45ab      	cmp	fp, r5
 80118f0:	d169      	bne.n	80119c6 <_malloc_r+0x3e2>
 80118f2:	f8df a128 	ldr.w	sl, [pc, #296]	; 8011a1c <_malloc_r+0x438>
 80118f6:	f8df c128 	ldr.w	ip, [pc, #296]	; 8011a20 <_malloc_r+0x43c>
 80118fa:	f8da 0000 	ldr.w	r0, [sl]
 80118fe:	42bb      	cmp	r3, r7
 8011900:	4440      	add	r0, r8
 8011902:	f8ca 0000 	str.w	r0, [sl]
 8011906:	d108      	bne.n	801191a <_malloc_r+0x336>
 8011908:	ea13 0f0c 	tst.w	r3, ip
 801190c:	d105      	bne.n	801191a <_malloc_r+0x336>
 801190e:	68ab      	ldr	r3, [r5, #8]
 8011910:	4446      	add	r6, r8
 8011912:	f046 0601 	orr.w	r6, r6, #1
 8011916:	605e      	str	r6, [r3, #4]
 8011918:	e049      	b.n	80119ae <_malloc_r+0x3ca>
 801191a:	9901      	ldr	r1, [sp, #4]
 801191c:	f8d1 e000 	ldr.w	lr, [r1]
 8011920:	f1be 3fff 	cmp.w	lr, #4294967295
 8011924:	bf15      	itete	ne
 8011926:	1afb      	subne	r3, r7, r3
 8011928:	4b38      	ldreq	r3, [pc, #224]	; (8011a0c <_malloc_r+0x428>)
 801192a:	181b      	addne	r3, r3, r0
 801192c:	601f      	streq	r7, [r3, #0]
 801192e:	bf18      	it	ne
 8011930:	f8ca 3000 	strne.w	r3, [sl]
 8011934:	f017 0307 	ands.w	r3, r7, #7
 8011938:	bf1c      	itt	ne
 801193a:	f1c3 0308 	rsbne	r3, r3, #8
 801193e:	18ff      	addne	r7, r7, r3
 8011940:	44b8      	add	r8, r7
 8011942:	441a      	add	r2, r3
 8011944:	ea08 080c 	and.w	r8, r8, ip
 8011948:	ebc8 0802 	rsb	r8, r8, r2
 801194c:	4641      	mov	r1, r8
 801194e:	4648      	mov	r0, r9
 8011950:	f000 f8c6 	bl	8011ae0 <_sbrk_r>
 8011954:	1c43      	adds	r3, r0, #1
 8011956:	bf04      	itt	eq
 8011958:	4638      	moveq	r0, r7
 801195a:	f04f 0800 	moveq.w	r8, #0
 801195e:	f8da 3000 	ldr.w	r3, [sl]
 8011962:	60af      	str	r7, [r5, #8]
 8011964:	1bc2      	subs	r2, r0, r7
 8011966:	4442      	add	r2, r8
 8011968:	4443      	add	r3, r8
 801196a:	f042 0201 	orr.w	r2, r2, #1
 801196e:	45ab      	cmp	fp, r5
 8011970:	f8ca 3000 	str.w	r3, [sl]
 8011974:	607a      	str	r2, [r7, #4]
 8011976:	d01a      	beq.n	80119ae <_malloc_r+0x3ca>
 8011978:	2e0f      	cmp	r6, #15
 801197a:	d802      	bhi.n	8011982 <_malloc_r+0x39e>
 801197c:	2301      	movs	r3, #1
 801197e:	607b      	str	r3, [r7, #4]
 8011980:	e021      	b.n	80119c6 <_malloc_r+0x3e2>
 8011982:	f8db 3004 	ldr.w	r3, [fp, #4]
 8011986:	3e0c      	subs	r6, #12
 8011988:	f026 0607 	bic.w	r6, r6, #7
 801198c:	f003 0301 	and.w	r3, r3, #1
 8011990:	4333      	orrs	r3, r6
 8011992:	f8cb 3004 	str.w	r3, [fp, #4]
 8011996:	eb0b 0306 	add.w	r3, fp, r6
 801199a:	2205      	movs	r2, #5
 801199c:	2e0f      	cmp	r6, #15
 801199e:	605a      	str	r2, [r3, #4]
 80119a0:	609a      	str	r2, [r3, #8]
 80119a2:	d904      	bls.n	80119ae <_malloc_r+0x3ca>
 80119a4:	f10b 0108 	add.w	r1, fp, #8
 80119a8:	4648      	mov	r0, r9
 80119aa:	f002 fcf7 	bl	801439c <_free_r>
 80119ae:	4a19      	ldr	r2, [pc, #100]	; (8011a14 <_malloc_r+0x430>)
 80119b0:	f8da 3000 	ldr.w	r3, [sl]
 80119b4:	6811      	ldr	r1, [r2, #0]
 80119b6:	428b      	cmp	r3, r1
 80119b8:	bf88      	it	hi
 80119ba:	6013      	strhi	r3, [r2, #0]
 80119bc:	4a16      	ldr	r2, [pc, #88]	; (8011a18 <_malloc_r+0x434>)
 80119be:	6811      	ldr	r1, [r2, #0]
 80119c0:	428b      	cmp	r3, r1
 80119c2:	bf88      	it	hi
 80119c4:	6013      	strhi	r3, [r2, #0]
 80119c6:	68ab      	ldr	r3, [r5, #8]
 80119c8:	685a      	ldr	r2, [r3, #4]
 80119ca:	f022 0203 	bic.w	r2, r2, #3
 80119ce:	4294      	cmp	r4, r2
 80119d0:	eba2 0304 	sub.w	r3, r2, r4
 80119d4:	d801      	bhi.n	80119da <_malloc_r+0x3f6>
 80119d6:	2b0f      	cmp	r3, #15
 80119d8:	dc04      	bgt.n	80119e4 <_malloc_r+0x400>
 80119da:	4648      	mov	r0, r9
 80119dc:	f000 f845 	bl	8011a6a <__malloc_unlock>
 80119e0:	2600      	movs	r6, #0
 80119e2:	e00c      	b.n	80119fe <_malloc_r+0x41a>
 80119e4:	68ae      	ldr	r6, [r5, #8]
 80119e6:	f044 0201 	orr.w	r2, r4, #1
 80119ea:	4434      	add	r4, r6
 80119ec:	f043 0301 	orr.w	r3, r3, #1
 80119f0:	6072      	str	r2, [r6, #4]
 80119f2:	60ac      	str	r4, [r5, #8]
 80119f4:	6063      	str	r3, [r4, #4]
 80119f6:	4648      	mov	r0, r9
 80119f8:	f000 f837 	bl	8011a6a <__malloc_unlock>
 80119fc:	3608      	adds	r6, #8
 80119fe:	4630      	mov	r0, r6
 8011a00:	b005      	add	sp, #20
 8011a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a06:	bf00      	nop
 8011a08:	20042f9c 	.word	0x20042f9c
 8011a0c:	2001049c 	.word	0x2001049c
 8011a10:	00000080 	.word	0x00000080
 8011a14:	20042f98 	.word	0x20042f98
 8011a18:	20042f94 	.word	0x20042f94
 8011a1c:	20042fa0 	.word	0x20042fa0
 8011a20:	0000007f 	.word	0x0000007f

08011a24 <memcmp>:
 8011a24:	b510      	push	{r4, lr}
 8011a26:	3901      	subs	r1, #1
 8011a28:	4402      	add	r2, r0
 8011a2a:	4290      	cmp	r0, r2
 8011a2c:	d007      	beq.n	8011a3e <memcmp+0x1a>
 8011a2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011a36:	42a3      	cmp	r3, r4
 8011a38:	d0f7      	beq.n	8011a2a <memcmp+0x6>
 8011a3a:	1b18      	subs	r0, r3, r4
 8011a3c:	bd10      	pop	{r4, pc}
 8011a3e:	2000      	movs	r0, #0
 8011a40:	bd10      	pop	{r4, pc}

08011a42 <memcpy>:
 8011a42:	b510      	push	{r4, lr}
 8011a44:	1e43      	subs	r3, r0, #1
 8011a46:	440a      	add	r2, r1
 8011a48:	4291      	cmp	r1, r2
 8011a4a:	d004      	beq.n	8011a56 <memcpy+0x14>
 8011a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a54:	e7f8      	b.n	8011a48 <memcpy+0x6>
 8011a56:	bd10      	pop	{r4, pc}

08011a58 <memset>:
 8011a58:	4402      	add	r2, r0
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	d002      	beq.n	8011a66 <memset+0xe>
 8011a60:	f803 1b01 	strb.w	r1, [r3], #1
 8011a64:	e7fa      	b.n	8011a5c <memset+0x4>
 8011a66:	4770      	bx	lr

08011a68 <__malloc_lock>:
 8011a68:	4770      	bx	lr

08011a6a <__malloc_unlock>:
 8011a6a:	4770      	bx	lr

08011a6c <rand>:
 8011a6c:	4b19      	ldr	r3, [pc, #100]	; (8011ad4 <rand+0x68>)
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	681c      	ldr	r4, [r3, #0]
 8011a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a74:	b9d3      	cbnz	r3, 8011aac <rand+0x40>
 8011a76:	2018      	movs	r0, #24
 8011a78:	f7ff fda4 	bl	80115c4 <malloc>
 8011a7c:	f243 330e 	movw	r3, #13070	; 0x330e
 8011a80:	63a0      	str	r0, [r4, #56]	; 0x38
 8011a82:	8003      	strh	r3, [r0, #0]
 8011a84:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8011a88:	8043      	strh	r3, [r0, #2]
 8011a8a:	f241 2334 	movw	r3, #4660	; 0x1234
 8011a8e:	8083      	strh	r3, [r0, #4]
 8011a90:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8011a94:	80c3      	strh	r3, [r0, #6]
 8011a96:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8011a9a:	8103      	strh	r3, [r0, #8]
 8011a9c:	2305      	movs	r3, #5
 8011a9e:	8143      	strh	r3, [r0, #10]
 8011aa0:	230b      	movs	r3, #11
 8011aa2:	8183      	strh	r3, [r0, #12]
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011aac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011aae:	4c0a      	ldr	r4, [pc, #40]	; (8011ad8 <rand+0x6c>)
 8011ab0:	690b      	ldr	r3, [r1, #16]
 8011ab2:	6948      	ldr	r0, [r1, #20]
 8011ab4:	4a09      	ldr	r2, [pc, #36]	; (8011adc <rand+0x70>)
 8011ab6:	435c      	muls	r4, r3
 8011ab8:	fb02 4000 	mla	r0, r2, r0, r4
 8011abc:	fba3 2302 	umull	r2, r3, r3, r2
 8011ac0:	3201      	adds	r2, #1
 8011ac2:	4403      	add	r3, r0
 8011ac4:	f143 0300 	adc.w	r3, r3, #0
 8011ac8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011acc:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8011ad0:	bd10      	pop	{r4, pc}
 8011ad2:	bf00      	nop
 8011ad4:	20010590 	.word	0x20010590
 8011ad8:	5851f42d 	.word	0x5851f42d
 8011adc:	4c957f2d 	.word	0x4c957f2d

08011ae0 <_sbrk_r>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	4c06      	ldr	r4, [pc, #24]	; (8011afc <_sbrk_r+0x1c>)
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	4605      	mov	r5, r0
 8011ae8:	4608      	mov	r0, r1
 8011aea:	6023      	str	r3, [r4, #0]
 8011aec:	f006 f9ea 	bl	8017ec4 <_sbrk>
 8011af0:	1c43      	adds	r3, r0, #1
 8011af2:	d102      	bne.n	8011afa <_sbrk_r+0x1a>
 8011af4:	6823      	ldr	r3, [r4, #0]
 8011af6:	b103      	cbz	r3, 8011afa <_sbrk_r+0x1a>
 8011af8:	602b      	str	r3, [r5, #0]
 8011afa:	bd38      	pop	{r3, r4, r5, pc}
 8011afc:	20049820 	.word	0x20049820

08011b00 <sprintf>:
 8011b00:	b40e      	push	{r1, r2, r3}
 8011b02:	b500      	push	{lr}
 8011b04:	b09c      	sub	sp, #112	; 0x70
 8011b06:	f44f 7102 	mov.w	r1, #520	; 0x208
 8011b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8011b0c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011b10:	9002      	str	r0, [sp, #8]
 8011b12:	9006      	str	r0, [sp, #24]
 8011b14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b18:	480a      	ldr	r0, [pc, #40]	; (8011b44 <sprintf+0x44>)
 8011b1a:	9104      	str	r1, [sp, #16]
 8011b1c:	9107      	str	r1, [sp, #28]
 8011b1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b26:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011b2a:	6800      	ldr	r0, [r0, #0]
 8011b2c:	9301      	str	r3, [sp, #4]
 8011b2e:	a902      	add	r1, sp, #8
 8011b30:	f000 f87e 	bl	8011c30 <_svfprintf_r>
 8011b34:	9b02      	ldr	r3, [sp, #8]
 8011b36:	2200      	movs	r2, #0
 8011b38:	701a      	strb	r2, [r3, #0]
 8011b3a:	b01c      	add	sp, #112	; 0x70
 8011b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b40:	b003      	add	sp, #12
 8011b42:	4770      	bx	lr
 8011b44:	20010590 	.word	0x20010590

08011b48 <sscanf>:
 8011b48:	b40e      	push	{r1, r2, r3}
 8011b4a:	b530      	push	{r4, r5, lr}
 8011b4c:	b09c      	sub	sp, #112	; 0x70
 8011b4e:	ac1f      	add	r4, sp, #124	; 0x7c
 8011b50:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011b54:	f854 5b04 	ldr.w	r5, [r4], #4
 8011b58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011b5c:	9002      	str	r0, [sp, #8]
 8011b5e:	9006      	str	r0, [sp, #24]
 8011b60:	f7ee fbb6 	bl	80002d0 <strlen>
 8011b64:	4b0b      	ldr	r3, [pc, #44]	; (8011b94 <sscanf+0x4c>)
 8011b66:	9003      	str	r0, [sp, #12]
 8011b68:	9007      	str	r0, [sp, #28]
 8011b6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b6c:	480a      	ldr	r0, [pc, #40]	; (8011b98 <sscanf+0x50>)
 8011b6e:	9401      	str	r4, [sp, #4]
 8011b70:	2300      	movs	r3, #0
 8011b72:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b74:	9314      	str	r3, [sp, #80]	; 0x50
 8011b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011b7e:	462a      	mov	r2, r5
 8011b80:	4623      	mov	r3, r4
 8011b82:	a902      	add	r1, sp, #8
 8011b84:	6800      	ldr	r0, [r0, #0]
 8011b86:	f001 f815 	bl	8012bb4 <__ssvfscanf_r>
 8011b8a:	b01c      	add	sp, #112	; 0x70
 8011b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011b90:	b003      	add	sp, #12
 8011b92:	4770      	bx	lr
 8011b94:	08011b9d 	.word	0x08011b9d
 8011b98:	20010590 	.word	0x20010590

08011b9c <__seofread>:
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	4770      	bx	lr

08011ba0 <strchr>:
 8011ba0:	b2c9      	uxtb	r1, r1
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ba8:	b11a      	cbz	r2, 8011bb2 <strchr+0x12>
 8011baa:	4291      	cmp	r1, r2
 8011bac:	d1f9      	bne.n	8011ba2 <strchr+0x2>
 8011bae:	4618      	mov	r0, r3
 8011bb0:	4770      	bx	lr
 8011bb2:	2900      	cmp	r1, #0
 8011bb4:	bf0c      	ite	eq
 8011bb6:	4618      	moveq	r0, r3
 8011bb8:	2000      	movne	r0, #0
 8011bba:	4770      	bx	lr

08011bbc <strcpy>:
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bc2:	f803 2b01 	strb.w	r2, [r3], #1
 8011bc6:	2a00      	cmp	r2, #0
 8011bc8:	d1f9      	bne.n	8011bbe <strcpy+0x2>
 8011bca:	4770      	bx	lr

08011bcc <strncmp>:
 8011bcc:	b530      	push	{r4, r5, lr}
 8011bce:	b182      	cbz	r2, 8011bf2 <strncmp+0x26>
 8011bd0:	1e45      	subs	r5, r0, #1
 8011bd2:	3901      	subs	r1, #1
 8011bd4:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8011bd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011bdc:	42a3      	cmp	r3, r4
 8011bde:	d106      	bne.n	8011bee <strncmp+0x22>
 8011be0:	43ec      	mvns	r4, r5
 8011be2:	4414      	add	r4, r2
 8011be4:	42e0      	cmn	r0, r4
 8011be6:	d001      	beq.n	8011bec <strncmp+0x20>
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d1f3      	bne.n	8011bd4 <strncmp+0x8>
 8011bec:	461c      	mov	r4, r3
 8011bee:	1b18      	subs	r0, r3, r4
 8011bf0:	bd30      	pop	{r4, r5, pc}
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	bd30      	pop	{r4, r5, pc}

08011bf6 <strstr>:
 8011bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bf8:	7803      	ldrb	r3, [r0, #0]
 8011bfa:	b963      	cbnz	r3, 8011c16 <strstr+0x20>
 8011bfc:	780b      	ldrb	r3, [r1, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	bf18      	it	ne
 8011c02:	2000      	movne	r0, #0
 8011c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c06:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8011c0a:	b162      	cbz	r2, 8011c26 <strstr+0x30>
 8011c0c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 8011c10:	4297      	cmp	r7, r2
 8011c12:	4630      	mov	r0, r6
 8011c14:	d0f7      	beq.n	8011c06 <strstr+0x10>
 8011c16:	4603      	mov	r3, r0
 8011c18:	1c46      	adds	r6, r0, #1
 8011c1a:	7800      	ldrb	r0, [r0, #0]
 8011c1c:	b110      	cbz	r0, 8011c24 <strstr+0x2e>
 8011c1e:	1e4d      	subs	r5, r1, #1
 8011c20:	1e5c      	subs	r4, r3, #1
 8011c22:	e7f0      	b.n	8011c06 <strstr+0x10>
 8011c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c26:	4618      	mov	r0, r3
 8011c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c2a:	0000      	movs	r0, r0
 8011c2c:	0000      	movs	r0, r0
	...

08011c30 <_svfprintf_r>:
 8011c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c34:	b0bd      	sub	sp, #244	; 0xf4
 8011c36:	468b      	mov	fp, r1
 8011c38:	9205      	str	r2, [sp, #20]
 8011c3a:	461f      	mov	r7, r3
 8011c3c:	4682      	mov	sl, r0
 8011c3e:	f002 fc83 	bl	8014548 <_localeconv_r>
 8011c42:	6803      	ldr	r3, [r0, #0]
 8011c44:	930d      	str	r3, [sp, #52]	; 0x34
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7ee fb42 	bl	80002d0 <strlen>
 8011c4c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8011c50:	9008      	str	r0, [sp, #32]
 8011c52:	0619      	lsls	r1, r3, #24
 8011c54:	d515      	bpl.n	8011c82 <_svfprintf_r+0x52>
 8011c56:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011c5a:	b993      	cbnz	r3, 8011c82 <_svfprintf_r+0x52>
 8011c5c:	2140      	movs	r1, #64	; 0x40
 8011c5e:	4650      	mov	r0, sl
 8011c60:	f7ff fcc0 	bl	80115e4 <_malloc_r>
 8011c64:	f8cb 0000 	str.w	r0, [fp]
 8011c68:	f8cb 0010 	str.w	r0, [fp, #16]
 8011c6c:	b930      	cbnz	r0, 8011c7c <_svfprintf_r+0x4c>
 8011c6e:	230c      	movs	r3, #12
 8011c70:	f8ca 3000 	str.w	r3, [sl]
 8011c74:	f04f 30ff 	mov.w	r0, #4294967295
 8011c78:	f000 bf95 	b.w	8012ba6 <_svfprintf_r+0xf76>
 8011c7c:	2340      	movs	r3, #64	; 0x40
 8011c7e:	f8cb 3014 	str.w	r3, [fp, #20]
 8011c82:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8011ee8 <_svfprintf_r+0x2b8>
 8011c86:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	ac2c      	add	r4, sp, #176	; 0xb0
 8011c8e:	941f      	str	r4, [sp, #124]	; 0x7c
 8011c90:	9321      	str	r3, [sp, #132]	; 0x84
 8011c92:	9320      	str	r3, [sp, #128]	; 0x80
 8011c94:	9304      	str	r3, [sp, #16]
 8011c96:	9311      	str	r3, [sp, #68]	; 0x44
 8011c98:	9310      	str	r3, [sp, #64]	; 0x40
 8011c9a:	930a      	str	r3, [sp, #40]	; 0x28
 8011c9c:	9d05      	ldr	r5, [sp, #20]
 8011c9e:	462b      	mov	r3, r5
 8011ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ca4:	b11a      	cbz	r2, 8011cae <_svfprintf_r+0x7e>
 8011ca6:	2a25      	cmp	r2, #37	; 0x25
 8011ca8:	d001      	beq.n	8011cae <_svfprintf_r+0x7e>
 8011caa:	461d      	mov	r5, r3
 8011cac:	e7f7      	b.n	8011c9e <_svfprintf_r+0x6e>
 8011cae:	9b05      	ldr	r3, [sp, #20]
 8011cb0:	1aee      	subs	r6, r5, r3
 8011cb2:	d017      	beq.n	8011ce4 <_svfprintf_r+0xb4>
 8011cb4:	e884 0048 	stmia.w	r4, {r3, r6}
 8011cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011cba:	4433      	add	r3, r6
 8011cbc:	9321      	str	r3, [sp, #132]	; 0x84
 8011cbe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	2b07      	cmp	r3, #7
 8011cc4:	9320      	str	r3, [sp, #128]	; 0x80
 8011cc6:	dc01      	bgt.n	8011ccc <_svfprintf_r+0x9c>
 8011cc8:	3408      	adds	r4, #8
 8011cca:	e008      	b.n	8011cde <_svfprintf_r+0xae>
 8011ccc:	aa1f      	add	r2, sp, #124	; 0x7c
 8011cce:	4659      	mov	r1, fp
 8011cd0:	4650      	mov	r0, sl
 8011cd2:	f004 f917 	bl	8015f04 <__ssprint_r>
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	f040 862c 	bne.w	8012934 <_svfprintf_r+0xd04>
 8011cdc:	ac2c      	add	r4, sp, #176	; 0xb0
 8011cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ce0:	4433      	add	r3, r6
 8011ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ce4:	782b      	ldrb	r3, [r5, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	f000 861d 	beq.w	8012926 <_svfprintf_r+0xcf6>
 8011cec:	2200      	movs	r2, #0
 8011cee:	1c6b      	adds	r3, r5, #1
 8011cf0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011cf4:	4611      	mov	r1, r2
 8011cf6:	f04f 39ff 	mov.w	r9, #4294967295
 8011cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8011cfc:	4615      	mov	r5, r2
 8011cfe:	200a      	movs	r0, #10
 8011d00:	1c5e      	adds	r6, r3, #1
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	9605      	str	r6, [sp, #20]
 8011d06:	9302      	str	r3, [sp, #8]
 8011d08:	9b02      	ldr	r3, [sp, #8]
 8011d0a:	3b20      	subs	r3, #32
 8011d0c:	2b58      	cmp	r3, #88	; 0x58
 8011d0e:	f200 8263 	bhi.w	80121d8 <_svfprintf_r+0x5a8>
 8011d12:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011d16:	005c      	.short	0x005c
 8011d18:	02610261 	.word	0x02610261
 8011d1c:	0261006b 	.word	0x0261006b
 8011d20:	02610261 	.word	0x02610261
 8011d24:	02610261 	.word	0x02610261
 8011d28:	006e0261 	.word	0x006e0261
 8011d2c:	02610059 	.word	0x02610059
 8011d30:	007c0079 	.word	0x007c0079
 8011d34:	00a30261 	.word	0x00a30261
 8011d38:	00a600a6 	.word	0x00a600a6
 8011d3c:	00a600a6 	.word	0x00a600a6
 8011d40:	00a600a6 	.word	0x00a600a6
 8011d44:	00a600a6 	.word	0x00a600a6
 8011d48:	026100a6 	.word	0x026100a6
 8011d4c:	02610261 	.word	0x02610261
 8011d50:	02610261 	.word	0x02610261
 8011d54:	02610261 	.word	0x02610261
 8011d58:	02610261 	.word	0x02610261
 8011d5c:	00d60261 	.word	0x00d60261
 8011d60:	0261010b 	.word	0x0261010b
 8011d64:	0261010b 	.word	0x0261010b
 8011d68:	02610261 	.word	0x02610261
 8011d6c:	00b90261 	.word	0x00b90261
 8011d70:	02610261 	.word	0x02610261
 8011d74:	02610152 	.word	0x02610152
 8011d78:	02610261 	.word	0x02610261
 8011d7c:	02610261 	.word	0x02610261
 8011d80:	02610199 	.word	0x02610199
 8011d84:	00660261 	.word	0x00660261
 8011d88:	02610261 	.word	0x02610261
 8011d8c:	02610261 	.word	0x02610261
 8011d90:	02610261 	.word	0x02610261
 8011d94:	02610261 	.word	0x02610261
 8011d98:	02610261 	.word	0x02610261
 8011d9c:	006100cd 	.word	0x006100cd
 8011da0:	010b010b 	.word	0x010b010b
 8011da4:	00bc010b 	.word	0x00bc010b
 8011da8:	02610061 	.word	0x02610061
 8011dac:	00bf0261 	.word	0x00bf0261
 8011db0:	01340261 	.word	0x01340261
 8011db4:	016f0154 	.word	0x016f0154
 8011db8:	026100ca 	.word	0x026100ca
 8011dbc:	02610180 	.word	0x02610180
 8011dc0:	0261019b 	.word	0x0261019b
 8011dc4:	01b30261 	.word	0x01b30261
 8011dc8:	2201      	movs	r2, #1
 8011dca:	212b      	movs	r1, #43	; 0x2b
 8011dcc:	e002      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011dce:	b909      	cbnz	r1, 8011dd4 <_svfprintf_r+0x1a4>
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	2120      	movs	r1, #32
 8011dd4:	9b05      	ldr	r3, [sp, #20]
 8011dd6:	e793      	b.n	8011d00 <_svfprintf_r+0xd0>
 8011dd8:	2a00      	cmp	r2, #0
 8011dda:	d077      	beq.n	8011ecc <_svfprintf_r+0x29c>
 8011ddc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011de0:	e074      	b.n	8011ecc <_svfprintf_r+0x29c>
 8011de2:	b10a      	cbz	r2, 8011de8 <_svfprintf_r+0x1b8>
 8011de4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011de8:	4b41      	ldr	r3, [pc, #260]	; (8011ef0 <_svfprintf_r+0x2c0>)
 8011dea:	e14b      	b.n	8012084 <_svfprintf_r+0x454>
 8011dec:	f045 0501 	orr.w	r5, r5, #1
 8011df0:	e7f0      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011df2:	683e      	ldr	r6, [r7, #0]
 8011df4:	9609      	str	r6, [sp, #36]	; 0x24
 8011df6:	2e00      	cmp	r6, #0
 8011df8:	f107 0304 	add.w	r3, r7, #4
 8011dfc:	db01      	blt.n	8011e02 <_svfprintf_r+0x1d2>
 8011dfe:	461f      	mov	r7, r3
 8011e00:	e7e8      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011e02:	4276      	negs	r6, r6
 8011e04:	9609      	str	r6, [sp, #36]	; 0x24
 8011e06:	461f      	mov	r7, r3
 8011e08:	f045 0504 	orr.w	r5, r5, #4
 8011e0c:	e7e2      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011e0e:	9e05      	ldr	r6, [sp, #20]
 8011e10:	9b05      	ldr	r3, [sp, #20]
 8011e12:	7836      	ldrb	r6, [r6, #0]
 8011e14:	9602      	str	r6, [sp, #8]
 8011e16:	2e2a      	cmp	r6, #42	; 0x2a
 8011e18:	f103 0301 	add.w	r3, r3, #1
 8011e1c:	d002      	beq.n	8011e24 <_svfprintf_r+0x1f4>
 8011e1e:	f04f 0900 	mov.w	r9, #0
 8011e22:	e00a      	b.n	8011e3a <_svfprintf_r+0x20a>
 8011e24:	f8d7 9000 	ldr.w	r9, [r7]
 8011e28:	9305      	str	r3, [sp, #20]
 8011e2a:	1d3e      	adds	r6, r7, #4
 8011e2c:	f1b9 0f00 	cmp.w	r9, #0
 8011e30:	4637      	mov	r7, r6
 8011e32:	dacf      	bge.n	8011dd4 <_svfprintf_r+0x1a4>
 8011e34:	f04f 39ff 	mov.w	r9, #4294967295
 8011e38:	e7cc      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011e3a:	9305      	str	r3, [sp, #20]
 8011e3c:	9b02      	ldr	r3, [sp, #8]
 8011e3e:	3b30      	subs	r3, #48	; 0x30
 8011e40:	2b09      	cmp	r3, #9
 8011e42:	d808      	bhi.n	8011e56 <_svfprintf_r+0x226>
 8011e44:	fb00 3909 	mla	r9, r0, r9, r3
 8011e48:	9b05      	ldr	r3, [sp, #20]
 8011e4a:	461e      	mov	r6, r3
 8011e4c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8011e50:	9302      	str	r3, [sp, #8]
 8011e52:	4633      	mov	r3, r6
 8011e54:	e7f1      	b.n	8011e3a <_svfprintf_r+0x20a>
 8011e56:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8011e5a:	e755      	b.n	8011d08 <_svfprintf_r+0xd8>
 8011e5c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8011e60:	e7b8      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011e62:	2300      	movs	r3, #0
 8011e64:	9309      	str	r3, [sp, #36]	; 0x24
 8011e66:	9b02      	ldr	r3, [sp, #8]
 8011e68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011e6a:	3b30      	subs	r3, #48	; 0x30
 8011e6c:	fb00 3306 	mla	r3, r0, r6, r3
 8011e70:	9309      	str	r3, [sp, #36]	; 0x24
 8011e72:	9b05      	ldr	r3, [sp, #20]
 8011e74:	461e      	mov	r6, r3
 8011e76:	f816 3b01 	ldrb.w	r3, [r6], #1
 8011e7a:	9302      	str	r3, [sp, #8]
 8011e7c:	9b02      	ldr	r3, [sp, #8]
 8011e7e:	9605      	str	r6, [sp, #20]
 8011e80:	3b30      	subs	r3, #48	; 0x30
 8011e82:	2b09      	cmp	r3, #9
 8011e84:	d9ef      	bls.n	8011e66 <_svfprintf_r+0x236>
 8011e86:	e73f      	b.n	8011d08 <_svfprintf_r+0xd8>
 8011e88:	f045 0508 	orr.w	r5, r5, #8
 8011e8c:	e7a2      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011e8e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8011e92:	e79f      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011e94:	9b05      	ldr	r3, [sp, #20]
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	2b6c      	cmp	r3, #108	; 0x6c
 8011e9a:	d103      	bne.n	8011ea4 <_svfprintf_r+0x274>
 8011e9c:	9b05      	ldr	r3, [sp, #20]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	9305      	str	r3, [sp, #20]
 8011ea2:	e002      	b.n	8011eaa <_svfprintf_r+0x27a>
 8011ea4:	f045 0510 	orr.w	r5, r5, #16
 8011ea8:	e794      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011eaa:	f045 0520 	orr.w	r5, r5, #32
 8011eae:	e791      	b.n	8011dd4 <_svfprintf_r+0x1a4>
 8011eb0:	1d3b      	adds	r3, r7, #4
 8011eb2:	9303      	str	r3, [sp, #12]
 8011eb4:	2600      	movs	r6, #0
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8011ebc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8011ec0:	e199      	b.n	80121f6 <_svfprintf_r+0x5c6>
 8011ec2:	b10a      	cbz	r2, 8011ec8 <_svfprintf_r+0x298>
 8011ec4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011ec8:	f045 0510 	orr.w	r5, r5, #16
 8011ecc:	06aa      	lsls	r2, r5, #26
 8011ece:	d511      	bpl.n	8011ef4 <_svfprintf_r+0x2c4>
 8011ed0:	3707      	adds	r7, #7
 8011ed2:	f027 0707 	bic.w	r7, r7, #7
 8011ed6:	f107 0308 	add.w	r3, r7, #8
 8011eda:	9303      	str	r3, [sp, #12]
 8011edc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011ee0:	e017      	b.n	8011f12 <_svfprintf_r+0x2e2>
 8011ee2:	bf00      	nop
 8011ee4:	f3af 8000 	nop.w
	...
 8011ef0:	0802fd41 	.word	0x0802fd41
 8011ef4:	f015 0f10 	tst.w	r5, #16
 8011ef8:	f107 0304 	add.w	r3, r7, #4
 8011efc:	d002      	beq.n	8011f04 <_svfprintf_r+0x2d4>
 8011efe:	9303      	str	r3, [sp, #12]
 8011f00:	683e      	ldr	r6, [r7, #0]
 8011f02:	e005      	b.n	8011f10 <_svfprintf_r+0x2e0>
 8011f04:	683e      	ldr	r6, [r7, #0]
 8011f06:	9303      	str	r3, [sp, #12]
 8011f08:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011f0c:	bf18      	it	ne
 8011f0e:	b236      	sxthne	r6, r6
 8011f10:	17f7      	asrs	r7, r6, #31
 8011f12:	2e00      	cmp	r6, #0
 8011f14:	f177 0300 	sbcs.w	r3, r7, #0
 8011f18:	f280 80de 	bge.w	80120d8 <_svfprintf_r+0x4a8>
 8011f1c:	4276      	negs	r6, r6
 8011f1e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8011f22:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8011f26:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011f2a:	e0d5      	b.n	80120d8 <_svfprintf_r+0x4a8>
 8011f2c:	b10a      	cbz	r2, 8011f32 <_svfprintf_r+0x302>
 8011f2e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011f32:	3707      	adds	r7, #7
 8011f34:	f027 0707 	bic.w	r7, r7, #7
 8011f38:	f107 0308 	add.w	r3, r7, #8
 8011f3c:	9303      	str	r3, [sp, #12]
 8011f3e:	ed97 7b00 	vldr	d7, [r7]
 8011f42:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f46:	9b06      	ldr	r3, [sp, #24]
 8011f48:	9312      	str	r3, [sp, #72]	; 0x48
 8011f4a:	9b07      	ldr	r3, [sp, #28]
 8011f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f50:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f52:	f04f 32ff 	mov.w	r2, #4294967295
 8011f56:	4bab      	ldr	r3, [pc, #684]	; (8012204 <_svfprintf_r+0x5d4>)
 8011f58:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011f5c:	f7ee fe62 	bl	8000c24 <__aeabi_dcmpun>
 8011f60:	2800      	cmp	r0, #0
 8011f62:	f040 84f1 	bne.w	8012948 <_svfprintf_r+0xd18>
 8011f66:	f04f 32ff 	mov.w	r2, #4294967295
 8011f6a:	4ba6      	ldr	r3, [pc, #664]	; (8012204 <_svfprintf_r+0x5d4>)
 8011f6c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011f70:	f7ee fe3a 	bl	8000be8 <__aeabi_dcmple>
 8011f74:	2800      	cmp	r0, #0
 8011f76:	f040 84e7 	bne.w	8012948 <_svfprintf_r+0xd18>
 8011f7a:	f000 bdfd 	b.w	8012b78 <_svfprintf_r+0xf48>
 8011f7e:	b10a      	cbz	r2, 8011f84 <_svfprintf_r+0x354>
 8011f80:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011f84:	f015 0f20 	tst.w	r5, #32
 8011f88:	f107 0304 	add.w	r3, r7, #4
 8011f8c:	d007      	beq.n	8011f9e <_svfprintf_r+0x36e>
 8011f8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f90:	683a      	ldr	r2, [r7, #0]
 8011f92:	17ce      	asrs	r6, r1, #31
 8011f94:	4608      	mov	r0, r1
 8011f96:	4631      	mov	r1, r6
 8011f98:	e9c2 0100 	strd	r0, r1, [r2]
 8011f9c:	e00b      	b.n	8011fb6 <_svfprintf_r+0x386>
 8011f9e:	06e9      	lsls	r1, r5, #27
 8011fa0:	d406      	bmi.n	8011fb0 <_svfprintf_r+0x380>
 8011fa2:	066a      	lsls	r2, r5, #25
 8011fa4:	d504      	bpl.n	8011fb0 <_svfprintf_r+0x380>
 8011fa6:	683a      	ldr	r2, [r7, #0]
 8011fa8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8011fac:	8011      	strh	r1, [r2, #0]
 8011fae:	e002      	b.n	8011fb6 <_svfprintf_r+0x386>
 8011fb0:	683a      	ldr	r2, [r7, #0]
 8011fb2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011fb4:	6011      	str	r1, [r2, #0]
 8011fb6:	461f      	mov	r7, r3
 8011fb8:	e670      	b.n	8011c9c <_svfprintf_r+0x6c>
 8011fba:	f045 0510 	orr.w	r5, r5, #16
 8011fbe:	f015 0320 	ands.w	r3, r5, #32
 8011fc2:	d009      	beq.n	8011fd8 <_svfprintf_r+0x3a8>
 8011fc4:	3707      	adds	r7, #7
 8011fc6:	f027 0707 	bic.w	r7, r7, #7
 8011fca:	f107 0308 	add.w	r3, r7, #8
 8011fce:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011fd2:	9303      	str	r3, [sp, #12]
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	e07b      	b.n	80120d0 <_svfprintf_r+0x4a0>
 8011fd8:	1d3a      	adds	r2, r7, #4
 8011fda:	f015 0110 	ands.w	r1, r5, #16
 8011fde:	9203      	str	r2, [sp, #12]
 8011fe0:	d105      	bne.n	8011fee <_svfprintf_r+0x3be>
 8011fe2:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8011fe6:	d002      	beq.n	8011fee <_svfprintf_r+0x3be>
 8011fe8:	883e      	ldrh	r6, [r7, #0]
 8011fea:	2700      	movs	r7, #0
 8011fec:	e7f2      	b.n	8011fd4 <_svfprintf_r+0x3a4>
 8011fee:	683e      	ldr	r6, [r7, #0]
 8011ff0:	2700      	movs	r7, #0
 8011ff2:	e06d      	b.n	80120d0 <_svfprintf_r+0x4a0>
 8011ff4:	1d3b      	adds	r3, r7, #4
 8011ff6:	9303      	str	r3, [sp, #12]
 8011ff8:	2330      	movs	r3, #48	; 0x30
 8011ffa:	2278      	movs	r2, #120	; 0x78
 8011ffc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8012000:	4b81      	ldr	r3, [pc, #516]	; (8012208 <_svfprintf_r+0x5d8>)
 8012002:	683e      	ldr	r6, [r7, #0]
 8012004:	9311      	str	r3, [sp, #68]	; 0x44
 8012006:	2700      	movs	r7, #0
 8012008:	f045 0502 	orr.w	r5, r5, #2
 801200c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8012010:	2302      	movs	r3, #2
 8012012:	9202      	str	r2, [sp, #8]
 8012014:	e05c      	b.n	80120d0 <_svfprintf_r+0x4a0>
 8012016:	2600      	movs	r6, #0
 8012018:	1d3b      	adds	r3, r7, #4
 801201a:	45b1      	cmp	r9, r6
 801201c:	9303      	str	r3, [sp, #12]
 801201e:	f8d7 8000 	ldr.w	r8, [r7]
 8012022:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8012026:	db0a      	blt.n	801203e <_svfprintf_r+0x40e>
 8012028:	464a      	mov	r2, r9
 801202a:	4631      	mov	r1, r6
 801202c:	4640      	mov	r0, r8
 801202e:	f7ee f957 	bl	80002e0 <memchr>
 8012032:	2800      	cmp	r0, #0
 8012034:	f000 80ea 	beq.w	801220c <_svfprintf_r+0x5dc>
 8012038:	ebc8 0900 	rsb	r9, r8, r0
 801203c:	e0e7      	b.n	801220e <_svfprintf_r+0x5de>
 801203e:	4640      	mov	r0, r8
 8012040:	f7ee f946 	bl	80002d0 <strlen>
 8012044:	4681      	mov	r9, r0
 8012046:	e0e2      	b.n	801220e <_svfprintf_r+0x5de>
 8012048:	f045 0510 	orr.w	r5, r5, #16
 801204c:	06ae      	lsls	r6, r5, #26
 801204e:	d508      	bpl.n	8012062 <_svfprintf_r+0x432>
 8012050:	3707      	adds	r7, #7
 8012052:	f027 0707 	bic.w	r7, r7, #7
 8012056:	f107 0308 	add.w	r3, r7, #8
 801205a:	9303      	str	r3, [sp, #12]
 801205c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012060:	e00a      	b.n	8012078 <_svfprintf_r+0x448>
 8012062:	1d3b      	adds	r3, r7, #4
 8012064:	f015 0f10 	tst.w	r5, #16
 8012068:	9303      	str	r3, [sp, #12]
 801206a:	d103      	bne.n	8012074 <_svfprintf_r+0x444>
 801206c:	0668      	lsls	r0, r5, #25
 801206e:	d501      	bpl.n	8012074 <_svfprintf_r+0x444>
 8012070:	883e      	ldrh	r6, [r7, #0]
 8012072:	e000      	b.n	8012076 <_svfprintf_r+0x446>
 8012074:	683e      	ldr	r6, [r7, #0]
 8012076:	2700      	movs	r7, #0
 8012078:	2301      	movs	r3, #1
 801207a:	e029      	b.n	80120d0 <_svfprintf_r+0x4a0>
 801207c:	b10a      	cbz	r2, 8012082 <_svfprintf_r+0x452>
 801207e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8012082:	4b61      	ldr	r3, [pc, #388]	; (8012208 <_svfprintf_r+0x5d8>)
 8012084:	9311      	str	r3, [sp, #68]	; 0x44
 8012086:	06a9      	lsls	r1, r5, #26
 8012088:	d508      	bpl.n	801209c <_svfprintf_r+0x46c>
 801208a:	3707      	adds	r7, #7
 801208c:	f027 0707 	bic.w	r7, r7, #7
 8012090:	f107 0308 	add.w	r3, r7, #8
 8012094:	9303      	str	r3, [sp, #12]
 8012096:	e9d7 6700 	ldrd	r6, r7, [r7]
 801209a:	e00a      	b.n	80120b2 <_svfprintf_r+0x482>
 801209c:	1d3b      	adds	r3, r7, #4
 801209e:	f015 0f10 	tst.w	r5, #16
 80120a2:	9303      	str	r3, [sp, #12]
 80120a4:	d103      	bne.n	80120ae <_svfprintf_r+0x47e>
 80120a6:	066a      	lsls	r2, r5, #25
 80120a8:	d501      	bpl.n	80120ae <_svfprintf_r+0x47e>
 80120aa:	883e      	ldrh	r6, [r7, #0]
 80120ac:	e000      	b.n	80120b0 <_svfprintf_r+0x480>
 80120ae:	683e      	ldr	r6, [r7, #0]
 80120b0:	2700      	movs	r7, #0
 80120b2:	07eb      	lsls	r3, r5, #31
 80120b4:	d50b      	bpl.n	80120ce <_svfprintf_r+0x49e>
 80120b6:	ea56 0307 	orrs.w	r3, r6, r7
 80120ba:	d008      	beq.n	80120ce <_svfprintf_r+0x49e>
 80120bc:	2330      	movs	r3, #48	; 0x30
 80120be:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80120c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80120c6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80120ca:	f045 0502 	orr.w	r5, r5, #2
 80120ce:	2302      	movs	r3, #2
 80120d0:	2200      	movs	r2, #0
 80120d2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80120d6:	e000      	b.n	80120da <_svfprintf_r+0x4aa>
 80120d8:	2301      	movs	r3, #1
 80120da:	f1b9 0f00 	cmp.w	r9, #0
 80120de:	f2c0 855c 	blt.w	8012b9a <_svfprintf_r+0xf6a>
 80120e2:	ea56 0207 	orrs.w	r2, r6, r7
 80120e6:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 80120ea:	d103      	bne.n	80120f4 <_svfprintf_r+0x4c4>
 80120ec:	f1b9 0f00 	cmp.w	r9, #0
 80120f0:	d05f      	beq.n	80121b2 <_svfprintf_r+0x582>
 80120f2:	e006      	b.n	8012102 <_svfprintf_r+0x4d2>
 80120f4:	460d      	mov	r5, r1
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d025      	beq.n	8012146 <_svfprintf_r+0x516>
 80120fa:	2b02      	cmp	r3, #2
 80120fc:	d046      	beq.n	801218c <_svfprintf_r+0x55c>
 80120fe:	4629      	mov	r1, r5
 8012100:	e007      	b.n	8012112 <_svfprintf_r+0x4e2>
 8012102:	460d      	mov	r5, r1
 8012104:	2b01      	cmp	r3, #1
 8012106:	d022      	beq.n	801214e <_svfprintf_r+0x51e>
 8012108:	2b02      	cmp	r3, #2
 801210a:	d03d      	beq.n	8012188 <_svfprintf_r+0x558>
 801210c:	4629      	mov	r1, r5
 801210e:	2600      	movs	r6, #0
 8012110:	2700      	movs	r7, #0
 8012112:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8012116:	08f2      	lsrs	r2, r6, #3
 8012118:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 801211c:	08f8      	lsrs	r0, r7, #3
 801211e:	f006 0307 	and.w	r3, r6, #7
 8012122:	4607      	mov	r7, r0
 8012124:	4616      	mov	r6, r2
 8012126:	3330      	adds	r3, #48	; 0x30
 8012128:	ea56 0207 	orrs.w	r2, r6, r7
 801212c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8012130:	d1f1      	bne.n	8012116 <_svfprintf_r+0x4e6>
 8012132:	07e8      	lsls	r0, r5, #31
 8012134:	d548      	bpl.n	80121c8 <_svfprintf_r+0x598>
 8012136:	2b30      	cmp	r3, #48	; 0x30
 8012138:	d046      	beq.n	80121c8 <_svfprintf_r+0x598>
 801213a:	2330      	movs	r3, #48	; 0x30
 801213c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8012140:	f108 38ff 	add.w	r8, r8, #4294967295
 8012144:	e040      	b.n	80121c8 <_svfprintf_r+0x598>
 8012146:	2f00      	cmp	r7, #0
 8012148:	bf08      	it	eq
 801214a:	2e0a      	cmpeq	r6, #10
 801214c:	d205      	bcs.n	801215a <_svfprintf_r+0x52a>
 801214e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8012152:	3630      	adds	r6, #48	; 0x30
 8012154:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8012158:	e029      	b.n	80121ae <_svfprintf_r+0x57e>
 801215a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801215e:	4630      	mov	r0, r6
 8012160:	4639      	mov	r1, r7
 8012162:	220a      	movs	r2, #10
 8012164:	2300      	movs	r3, #0
 8012166:	f7ee fe0b 	bl	8000d80 <__aeabi_uldivmod>
 801216a:	3230      	adds	r2, #48	; 0x30
 801216c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8012170:	2300      	movs	r3, #0
 8012172:	4630      	mov	r0, r6
 8012174:	4639      	mov	r1, r7
 8012176:	220a      	movs	r2, #10
 8012178:	f7ee fe02 	bl	8000d80 <__aeabi_uldivmod>
 801217c:	4606      	mov	r6, r0
 801217e:	460f      	mov	r7, r1
 8012180:	ea56 0307 	orrs.w	r3, r6, r7
 8012184:	d1eb      	bne.n	801215e <_svfprintf_r+0x52e>
 8012186:	e012      	b.n	80121ae <_svfprintf_r+0x57e>
 8012188:	2600      	movs	r6, #0
 801218a:	2700      	movs	r7, #0
 801218c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8012190:	f006 030f 	and.w	r3, r6, #15
 8012194:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012196:	5cd3      	ldrb	r3, [r2, r3]
 8012198:	f808 3d01 	strb.w	r3, [r8, #-1]!
 801219c:	0933      	lsrs	r3, r6, #4
 801219e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80121a2:	093a      	lsrs	r2, r7, #4
 80121a4:	461e      	mov	r6, r3
 80121a6:	4617      	mov	r7, r2
 80121a8:	ea56 0307 	orrs.w	r3, r6, r7
 80121ac:	d1f0      	bne.n	8012190 <_svfprintf_r+0x560>
 80121ae:	4629      	mov	r1, r5
 80121b0:	e00a      	b.n	80121c8 <_svfprintf_r+0x598>
 80121b2:	b93b      	cbnz	r3, 80121c4 <_svfprintf_r+0x594>
 80121b4:	07ea      	lsls	r2, r5, #31
 80121b6:	d505      	bpl.n	80121c4 <_svfprintf_r+0x594>
 80121b8:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80121bc:	2330      	movs	r3, #48	; 0x30
 80121be:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80121c2:	e001      	b.n	80121c8 <_svfprintf_r+0x598>
 80121c4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80121c8:	464e      	mov	r6, r9
 80121ca:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80121ce:	ebc8 0909 	rsb	r9, r8, r9
 80121d2:	460d      	mov	r5, r1
 80121d4:	2700      	movs	r7, #0
 80121d6:	e01b      	b.n	8012210 <_svfprintf_r+0x5e0>
 80121d8:	b10a      	cbz	r2, 80121de <_svfprintf_r+0x5ae>
 80121da:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80121de:	9b02      	ldr	r3, [sp, #8]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	f000 83a0 	beq.w	8012926 <_svfprintf_r+0xcf6>
 80121e6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80121ea:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80121ee:	2600      	movs	r6, #0
 80121f0:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80121f4:	9703      	str	r7, [sp, #12]
 80121f6:	f04f 0901 	mov.w	r9, #1
 80121fa:	4637      	mov	r7, r6
 80121fc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8012200:	e006      	b.n	8012210 <_svfprintf_r+0x5e0>
 8012202:	bf00      	nop
 8012204:	7fefffff 	.word	0x7fefffff
 8012208:	0802fd52 	.word	0x0802fd52
 801220c:	4606      	mov	r6, r0
 801220e:	4637      	mov	r7, r6
 8012210:	454e      	cmp	r6, r9
 8012212:	4633      	mov	r3, r6
 8012214:	bfb8      	it	lt
 8012216:	464b      	movlt	r3, r9
 8012218:	930b      	str	r3, [sp, #44]	; 0x2c
 801221a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801221e:	b113      	cbz	r3, 8012226 <_svfprintf_r+0x5f6>
 8012220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012222:	3301      	adds	r3, #1
 8012224:	930b      	str	r3, [sp, #44]	; 0x2c
 8012226:	f015 0302 	ands.w	r3, r5, #2
 801222a:	9314      	str	r3, [sp, #80]	; 0x50
 801222c:	bf1e      	ittt	ne
 801222e:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8012230:	3302      	addne	r3, #2
 8012232:	930b      	strne	r3, [sp, #44]	; 0x2c
 8012234:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8012238:	9315      	str	r3, [sp, #84]	; 0x54
 801223a:	d139      	bne.n	80122b0 <_svfprintf_r+0x680>
 801223c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801223e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012240:	1a9b      	subs	r3, r3, r2
 8012242:	2b00      	cmp	r3, #0
 8012244:	930c      	str	r3, [sp, #48]	; 0x30
 8012246:	dd33      	ble.n	80122b0 <_svfprintf_r+0x680>
 8012248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801224a:	2b10      	cmp	r3, #16
 801224c:	4ba6      	ldr	r3, [pc, #664]	; (80124e8 <_svfprintf_r+0x8b8>)
 801224e:	6023      	str	r3, [r4, #0]
 8012250:	dd18      	ble.n	8012284 <_svfprintf_r+0x654>
 8012252:	2310      	movs	r3, #16
 8012254:	6063      	str	r3, [r4, #4]
 8012256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012258:	3310      	adds	r3, #16
 801225a:	9321      	str	r3, [sp, #132]	; 0x84
 801225c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801225e:	3301      	adds	r3, #1
 8012260:	2b07      	cmp	r3, #7
 8012262:	9320      	str	r3, [sp, #128]	; 0x80
 8012264:	dc01      	bgt.n	801226a <_svfprintf_r+0x63a>
 8012266:	3408      	adds	r4, #8
 8012268:	e008      	b.n	801227c <_svfprintf_r+0x64c>
 801226a:	aa1f      	add	r2, sp, #124	; 0x7c
 801226c:	4659      	mov	r1, fp
 801226e:	4650      	mov	r0, sl
 8012270:	f003 fe48 	bl	8015f04 <__ssprint_r>
 8012274:	2800      	cmp	r0, #0
 8012276:	f040 835d 	bne.w	8012934 <_svfprintf_r+0xd04>
 801227a:	ac2c      	add	r4, sp, #176	; 0xb0
 801227c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801227e:	3b10      	subs	r3, #16
 8012280:	930c      	str	r3, [sp, #48]	; 0x30
 8012282:	e7e1      	b.n	8012248 <_svfprintf_r+0x618>
 8012284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012286:	6063      	str	r3, [r4, #4]
 8012288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801228a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801228c:	4413      	add	r3, r2
 801228e:	9321      	str	r3, [sp, #132]	; 0x84
 8012290:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012292:	3301      	adds	r3, #1
 8012294:	2b07      	cmp	r3, #7
 8012296:	9320      	str	r3, [sp, #128]	; 0x80
 8012298:	dc01      	bgt.n	801229e <_svfprintf_r+0x66e>
 801229a:	3408      	adds	r4, #8
 801229c:	e008      	b.n	80122b0 <_svfprintf_r+0x680>
 801229e:	aa1f      	add	r2, sp, #124	; 0x7c
 80122a0:	4659      	mov	r1, fp
 80122a2:	4650      	mov	r0, sl
 80122a4:	f003 fe2e 	bl	8015f04 <__ssprint_r>
 80122a8:	2800      	cmp	r0, #0
 80122aa:	f040 8343 	bne.w	8012934 <_svfprintf_r+0xd04>
 80122ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80122b0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80122b4:	b1bb      	cbz	r3, 80122e6 <_svfprintf_r+0x6b6>
 80122b6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80122ba:	6023      	str	r3, [r4, #0]
 80122bc:	2301      	movs	r3, #1
 80122be:	6063      	str	r3, [r4, #4]
 80122c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122c2:	3301      	adds	r3, #1
 80122c4:	9321      	str	r3, [sp, #132]	; 0x84
 80122c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80122c8:	3301      	adds	r3, #1
 80122ca:	2b07      	cmp	r3, #7
 80122cc:	9320      	str	r3, [sp, #128]	; 0x80
 80122ce:	dc01      	bgt.n	80122d4 <_svfprintf_r+0x6a4>
 80122d0:	3408      	adds	r4, #8
 80122d2:	e008      	b.n	80122e6 <_svfprintf_r+0x6b6>
 80122d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80122d6:	4659      	mov	r1, fp
 80122d8:	4650      	mov	r0, sl
 80122da:	f003 fe13 	bl	8015f04 <__ssprint_r>
 80122de:	2800      	cmp	r0, #0
 80122e0:	f040 8328 	bne.w	8012934 <_svfprintf_r+0xd04>
 80122e4:	ac2c      	add	r4, sp, #176	; 0xb0
 80122e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122e8:	b1b3      	cbz	r3, 8012318 <_svfprintf_r+0x6e8>
 80122ea:	ab18      	add	r3, sp, #96	; 0x60
 80122ec:	6023      	str	r3, [r4, #0]
 80122ee:	2302      	movs	r3, #2
 80122f0:	6063      	str	r3, [r4, #4]
 80122f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122f4:	3302      	adds	r3, #2
 80122f6:	9321      	str	r3, [sp, #132]	; 0x84
 80122f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80122fa:	3301      	adds	r3, #1
 80122fc:	2b07      	cmp	r3, #7
 80122fe:	9320      	str	r3, [sp, #128]	; 0x80
 8012300:	dc01      	bgt.n	8012306 <_svfprintf_r+0x6d6>
 8012302:	3408      	adds	r4, #8
 8012304:	e008      	b.n	8012318 <_svfprintf_r+0x6e8>
 8012306:	aa1f      	add	r2, sp, #124	; 0x7c
 8012308:	4659      	mov	r1, fp
 801230a:	4650      	mov	r0, sl
 801230c:	f003 fdfa 	bl	8015f04 <__ssprint_r>
 8012310:	2800      	cmp	r0, #0
 8012312:	f040 830f 	bne.w	8012934 <_svfprintf_r+0xd04>
 8012316:	ac2c      	add	r4, sp, #176	; 0xb0
 8012318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801231a:	2b80      	cmp	r3, #128	; 0x80
 801231c:	d135      	bne.n	801238a <_svfprintf_r+0x75a>
 801231e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012322:	1a9b      	subs	r3, r3, r2
 8012324:	2b00      	cmp	r3, #0
 8012326:	dd30      	ble.n	801238a <_svfprintf_r+0x75a>
 8012328:	4a70      	ldr	r2, [pc, #448]	; (80124ec <_svfprintf_r+0x8bc>)
 801232a:	6022      	str	r2, [r4, #0]
 801232c:	2b10      	cmp	r3, #16
 801232e:	dd18      	ble.n	8012362 <_svfprintf_r+0x732>
 8012330:	2210      	movs	r2, #16
 8012332:	6062      	str	r2, [r4, #4]
 8012334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012336:	3210      	adds	r2, #16
 8012338:	9221      	str	r2, [sp, #132]	; 0x84
 801233a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801233c:	3201      	adds	r2, #1
 801233e:	2a07      	cmp	r2, #7
 8012340:	9220      	str	r2, [sp, #128]	; 0x80
 8012342:	dc01      	bgt.n	8012348 <_svfprintf_r+0x718>
 8012344:	3408      	adds	r4, #8
 8012346:	e00a      	b.n	801235e <_svfprintf_r+0x72e>
 8012348:	aa1f      	add	r2, sp, #124	; 0x7c
 801234a:	4659      	mov	r1, fp
 801234c:	4650      	mov	r0, sl
 801234e:	930c      	str	r3, [sp, #48]	; 0x30
 8012350:	f003 fdd8 	bl	8015f04 <__ssprint_r>
 8012354:	2800      	cmp	r0, #0
 8012356:	f040 82ed 	bne.w	8012934 <_svfprintf_r+0xd04>
 801235a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801235c:	ac2c      	add	r4, sp, #176	; 0xb0
 801235e:	3b10      	subs	r3, #16
 8012360:	e7e2      	b.n	8012328 <_svfprintf_r+0x6f8>
 8012362:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012364:	6063      	str	r3, [r4, #4]
 8012366:	4413      	add	r3, r2
 8012368:	9321      	str	r3, [sp, #132]	; 0x84
 801236a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801236c:	3301      	adds	r3, #1
 801236e:	2b07      	cmp	r3, #7
 8012370:	9320      	str	r3, [sp, #128]	; 0x80
 8012372:	dc01      	bgt.n	8012378 <_svfprintf_r+0x748>
 8012374:	3408      	adds	r4, #8
 8012376:	e008      	b.n	801238a <_svfprintf_r+0x75a>
 8012378:	aa1f      	add	r2, sp, #124	; 0x7c
 801237a:	4659      	mov	r1, fp
 801237c:	4650      	mov	r0, sl
 801237e:	f003 fdc1 	bl	8015f04 <__ssprint_r>
 8012382:	2800      	cmp	r0, #0
 8012384:	f040 82d6 	bne.w	8012934 <_svfprintf_r+0xd04>
 8012388:	ac2c      	add	r4, sp, #176	; 0xb0
 801238a:	ebc9 0606 	rsb	r6, r9, r6
 801238e:	2e00      	cmp	r6, #0
 8012390:	dd2e      	ble.n	80123f0 <_svfprintf_r+0x7c0>
 8012392:	4b56      	ldr	r3, [pc, #344]	; (80124ec <_svfprintf_r+0x8bc>)
 8012394:	6023      	str	r3, [r4, #0]
 8012396:	2e10      	cmp	r6, #16
 8012398:	dd16      	ble.n	80123c8 <_svfprintf_r+0x798>
 801239a:	2310      	movs	r3, #16
 801239c:	6063      	str	r3, [r4, #4]
 801239e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123a0:	3310      	adds	r3, #16
 80123a2:	9321      	str	r3, [sp, #132]	; 0x84
 80123a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80123a6:	3301      	adds	r3, #1
 80123a8:	2b07      	cmp	r3, #7
 80123aa:	9320      	str	r3, [sp, #128]	; 0x80
 80123ac:	dc01      	bgt.n	80123b2 <_svfprintf_r+0x782>
 80123ae:	3408      	adds	r4, #8
 80123b0:	e008      	b.n	80123c4 <_svfprintf_r+0x794>
 80123b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80123b4:	4659      	mov	r1, fp
 80123b6:	4650      	mov	r0, sl
 80123b8:	f003 fda4 	bl	8015f04 <__ssprint_r>
 80123bc:	2800      	cmp	r0, #0
 80123be:	f040 82b9 	bne.w	8012934 <_svfprintf_r+0xd04>
 80123c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80123c4:	3e10      	subs	r6, #16
 80123c6:	e7e4      	b.n	8012392 <_svfprintf_r+0x762>
 80123c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80123ca:	9821      	ldr	r0, [sp, #132]	; 0x84
 80123cc:	6066      	str	r6, [r4, #4]
 80123ce:	3301      	adds	r3, #1
 80123d0:	4406      	add	r6, r0
 80123d2:	2b07      	cmp	r3, #7
 80123d4:	9621      	str	r6, [sp, #132]	; 0x84
 80123d6:	9320      	str	r3, [sp, #128]	; 0x80
 80123d8:	dc01      	bgt.n	80123de <_svfprintf_r+0x7ae>
 80123da:	3408      	adds	r4, #8
 80123dc:	e008      	b.n	80123f0 <_svfprintf_r+0x7c0>
 80123de:	aa1f      	add	r2, sp, #124	; 0x7c
 80123e0:	4659      	mov	r1, fp
 80123e2:	4650      	mov	r0, sl
 80123e4:	f003 fd8e 	bl	8015f04 <__ssprint_r>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	f040 82a3 	bne.w	8012934 <_svfprintf_r+0xd04>
 80123ee:	ac2c      	add	r4, sp, #176	; 0xb0
 80123f0:	05eb      	lsls	r3, r5, #23
 80123f2:	d414      	bmi.n	801241e <_svfprintf_r+0x7ee>
 80123f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123f6:	e884 0300 	stmia.w	r4, {r8, r9}
 80123fa:	444b      	add	r3, r9
 80123fc:	9321      	str	r3, [sp, #132]	; 0x84
 80123fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012400:	3301      	adds	r3, #1
 8012402:	2b07      	cmp	r3, #7
 8012404:	9320      	str	r3, [sp, #128]	; 0x80
 8012406:	f340 8244 	ble.w	8012892 <_svfprintf_r+0xc62>
 801240a:	aa1f      	add	r2, sp, #124	; 0x7c
 801240c:	4659      	mov	r1, fp
 801240e:	4650      	mov	r0, sl
 8012410:	f003 fd78 	bl	8015f04 <__ssprint_r>
 8012414:	2800      	cmp	r0, #0
 8012416:	f040 828d 	bne.w	8012934 <_svfprintf_r+0xd04>
 801241a:	ac2c      	add	r4, sp, #176	; 0xb0
 801241c:	e23a      	b.n	8012894 <_svfprintf_r+0xc64>
 801241e:	9b02      	ldr	r3, [sp, #8]
 8012420:	2b65      	cmp	r3, #101	; 0x65
 8012422:	f340 81ad 	ble.w	8012780 <_svfprintf_r+0xb50>
 8012426:	2200      	movs	r2, #0
 8012428:	2300      	movs	r3, #0
 801242a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801242e:	f7ee fbc7 	bl	8000bc0 <__aeabi_dcmpeq>
 8012432:	2800      	cmp	r0, #0
 8012434:	d05e      	beq.n	80124f4 <_svfprintf_r+0x8c4>
 8012436:	4b2e      	ldr	r3, [pc, #184]	; (80124f0 <_svfprintf_r+0x8c0>)
 8012438:	6023      	str	r3, [r4, #0]
 801243a:	2301      	movs	r3, #1
 801243c:	6063      	str	r3, [r4, #4]
 801243e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012440:	3301      	adds	r3, #1
 8012442:	9321      	str	r3, [sp, #132]	; 0x84
 8012444:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012446:	3301      	adds	r3, #1
 8012448:	2b07      	cmp	r3, #7
 801244a:	9320      	str	r3, [sp, #128]	; 0x80
 801244c:	dc01      	bgt.n	8012452 <_svfprintf_r+0x822>
 801244e:	3408      	adds	r4, #8
 8012450:	e008      	b.n	8012464 <_svfprintf_r+0x834>
 8012452:	aa1f      	add	r2, sp, #124	; 0x7c
 8012454:	4659      	mov	r1, fp
 8012456:	4650      	mov	r0, sl
 8012458:	f003 fd54 	bl	8015f04 <__ssprint_r>
 801245c:	2800      	cmp	r0, #0
 801245e:	f040 8269 	bne.w	8012934 <_svfprintf_r+0xd04>
 8012462:	ac2c      	add	r4, sp, #176	; 0xb0
 8012464:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012466:	9a04      	ldr	r2, [sp, #16]
 8012468:	4293      	cmp	r3, r2
 801246a:	db02      	blt.n	8012472 <_svfprintf_r+0x842>
 801246c:	07ee      	lsls	r6, r5, #31
 801246e:	f140 8211 	bpl.w	8012894 <_svfprintf_r+0xc64>
 8012472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012474:	6023      	str	r3, [r4, #0]
 8012476:	9b08      	ldr	r3, [sp, #32]
 8012478:	6063      	str	r3, [r4, #4]
 801247a:	9a08      	ldr	r2, [sp, #32]
 801247c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801247e:	4413      	add	r3, r2
 8012480:	9321      	str	r3, [sp, #132]	; 0x84
 8012482:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012484:	3301      	adds	r3, #1
 8012486:	2b07      	cmp	r3, #7
 8012488:	9320      	str	r3, [sp, #128]	; 0x80
 801248a:	dc01      	bgt.n	8012490 <_svfprintf_r+0x860>
 801248c:	3408      	adds	r4, #8
 801248e:	e008      	b.n	80124a2 <_svfprintf_r+0x872>
 8012490:	aa1f      	add	r2, sp, #124	; 0x7c
 8012492:	4659      	mov	r1, fp
 8012494:	4650      	mov	r0, sl
 8012496:	f003 fd35 	bl	8015f04 <__ssprint_r>
 801249a:	2800      	cmp	r0, #0
 801249c:	f040 824a 	bne.w	8012934 <_svfprintf_r+0xd04>
 80124a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80124a2:	9b04      	ldr	r3, [sp, #16]
 80124a4:	1e5e      	subs	r6, r3, #1
 80124a6:	2e00      	cmp	r6, #0
 80124a8:	f340 81f4 	ble.w	8012894 <_svfprintf_r+0xc64>
 80124ac:	4f0f      	ldr	r7, [pc, #60]	; (80124ec <_svfprintf_r+0x8bc>)
 80124ae:	f04f 0810 	mov.w	r8, #16
 80124b2:	2e10      	cmp	r6, #16
 80124b4:	f340 8159 	ble.w	801276a <_svfprintf_r+0xb3a>
 80124b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124ba:	3310      	adds	r3, #16
 80124bc:	9321      	str	r3, [sp, #132]	; 0x84
 80124be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80124c0:	3301      	adds	r3, #1
 80124c2:	2b07      	cmp	r3, #7
 80124c4:	e884 0180 	stmia.w	r4, {r7, r8}
 80124c8:	9320      	str	r3, [sp, #128]	; 0x80
 80124ca:	dc01      	bgt.n	80124d0 <_svfprintf_r+0x8a0>
 80124cc:	3408      	adds	r4, #8
 80124ce:	e008      	b.n	80124e2 <_svfprintf_r+0x8b2>
 80124d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80124d2:	4659      	mov	r1, fp
 80124d4:	4650      	mov	r0, sl
 80124d6:	f003 fd15 	bl	8015f04 <__ssprint_r>
 80124da:	2800      	cmp	r0, #0
 80124dc:	f040 822a 	bne.w	8012934 <_svfprintf_r+0xd04>
 80124e0:	ac2c      	add	r4, sp, #176	; 0xb0
 80124e2:	3e10      	subs	r6, #16
 80124e4:	e7e5      	b.n	80124b2 <_svfprintf_r+0x882>
 80124e6:	bf00      	nop
 80124e8:	0802fd63 	.word	0x0802fd63
 80124ec:	0802fd21 	.word	0x0802fd21
 80124f0:	0802fbef 	.word	0x0802fbef
 80124f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	dc7c      	bgt.n	80125f4 <_svfprintf_r+0x9c4>
 80124fa:	4b9f      	ldr	r3, [pc, #636]	; (8012778 <_svfprintf_r+0xb48>)
 80124fc:	6023      	str	r3, [r4, #0]
 80124fe:	2301      	movs	r3, #1
 8012500:	6063      	str	r3, [r4, #4]
 8012502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012504:	3301      	adds	r3, #1
 8012506:	9321      	str	r3, [sp, #132]	; 0x84
 8012508:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801250a:	3301      	adds	r3, #1
 801250c:	2b07      	cmp	r3, #7
 801250e:	9320      	str	r3, [sp, #128]	; 0x80
 8012510:	dc01      	bgt.n	8012516 <_svfprintf_r+0x8e6>
 8012512:	3408      	adds	r4, #8
 8012514:	e008      	b.n	8012528 <_svfprintf_r+0x8f8>
 8012516:	aa1f      	add	r2, sp, #124	; 0x7c
 8012518:	4659      	mov	r1, fp
 801251a:	4650      	mov	r0, sl
 801251c:	f003 fcf2 	bl	8015f04 <__ssprint_r>
 8012520:	2800      	cmp	r0, #0
 8012522:	f040 8207 	bne.w	8012934 <_svfprintf_r+0xd04>
 8012526:	ac2c      	add	r4, sp, #176	; 0xb0
 8012528:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801252a:	b923      	cbnz	r3, 8012536 <_svfprintf_r+0x906>
 801252c:	9b04      	ldr	r3, [sp, #16]
 801252e:	b913      	cbnz	r3, 8012536 <_svfprintf_r+0x906>
 8012530:	07e8      	lsls	r0, r5, #31
 8012532:	f140 81af 	bpl.w	8012894 <_svfprintf_r+0xc64>
 8012536:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012538:	6023      	str	r3, [r4, #0]
 801253a:	9b08      	ldr	r3, [sp, #32]
 801253c:	6063      	str	r3, [r4, #4]
 801253e:	9a08      	ldr	r2, [sp, #32]
 8012540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012542:	4413      	add	r3, r2
 8012544:	9321      	str	r3, [sp, #132]	; 0x84
 8012546:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012548:	3301      	adds	r3, #1
 801254a:	2b07      	cmp	r3, #7
 801254c:	9320      	str	r3, [sp, #128]	; 0x80
 801254e:	dc02      	bgt.n	8012556 <_svfprintf_r+0x926>
 8012550:	f104 0308 	add.w	r3, r4, #8
 8012554:	e008      	b.n	8012568 <_svfprintf_r+0x938>
 8012556:	aa1f      	add	r2, sp, #124	; 0x7c
 8012558:	4659      	mov	r1, fp
 801255a:	4650      	mov	r0, sl
 801255c:	f003 fcd2 	bl	8015f04 <__ssprint_r>
 8012560:	2800      	cmp	r0, #0
 8012562:	f040 81e7 	bne.w	8012934 <_svfprintf_r+0xd04>
 8012566:	ab2c      	add	r3, sp, #176	; 0xb0
 8012568:	9e19      	ldr	r6, [sp, #100]	; 0x64
 801256a:	4276      	negs	r6, r6
 801256c:	2e00      	cmp	r6, #0
 801256e:	dd30      	ble.n	80125d2 <_svfprintf_r+0x9a2>
 8012570:	4f82      	ldr	r7, [pc, #520]	; (801277c <_svfprintf_r+0xb4c>)
 8012572:	2410      	movs	r4, #16
 8012574:	2e10      	cmp	r6, #16
 8012576:	dd16      	ble.n	80125a6 <_svfprintf_r+0x976>
 8012578:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801257a:	601f      	str	r7, [r3, #0]
 801257c:	3210      	adds	r2, #16
 801257e:	9221      	str	r2, [sp, #132]	; 0x84
 8012580:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012582:	605c      	str	r4, [r3, #4]
 8012584:	3201      	adds	r2, #1
 8012586:	2a07      	cmp	r2, #7
 8012588:	9220      	str	r2, [sp, #128]	; 0x80
 801258a:	dc01      	bgt.n	8012590 <_svfprintf_r+0x960>
 801258c:	3308      	adds	r3, #8
 801258e:	e008      	b.n	80125a2 <_svfprintf_r+0x972>
 8012590:	aa1f      	add	r2, sp, #124	; 0x7c
 8012592:	4659      	mov	r1, fp
 8012594:	4650      	mov	r0, sl
 8012596:	f003 fcb5 	bl	8015f04 <__ssprint_r>
 801259a:	2800      	cmp	r0, #0
 801259c:	f040 81ca 	bne.w	8012934 <_svfprintf_r+0xd04>
 80125a0:	ab2c      	add	r3, sp, #176	; 0xb0
 80125a2:	3e10      	subs	r6, #16
 80125a4:	e7e6      	b.n	8012574 <_svfprintf_r+0x944>
 80125a6:	4a75      	ldr	r2, [pc, #468]	; (801277c <_svfprintf_r+0xb4c>)
 80125a8:	e883 0044 	stmia.w	r3, {r2, r6}
 80125ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80125ae:	4416      	add	r6, r2
 80125b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80125b2:	9621      	str	r6, [sp, #132]	; 0x84
 80125b4:	3201      	adds	r2, #1
 80125b6:	2a07      	cmp	r2, #7
 80125b8:	9220      	str	r2, [sp, #128]	; 0x80
 80125ba:	dc01      	bgt.n	80125c0 <_svfprintf_r+0x990>
 80125bc:	3308      	adds	r3, #8
 80125be:	e008      	b.n	80125d2 <_svfprintf_r+0x9a2>
 80125c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80125c2:	4659      	mov	r1, fp
 80125c4:	4650      	mov	r0, sl
 80125c6:	f003 fc9d 	bl	8015f04 <__ssprint_r>
 80125ca:	2800      	cmp	r0, #0
 80125cc:	f040 81b2 	bne.w	8012934 <_svfprintf_r+0xd04>
 80125d0:	ab2c      	add	r3, sp, #176	; 0xb0
 80125d2:	9a04      	ldr	r2, [sp, #16]
 80125d4:	605a      	str	r2, [r3, #4]
 80125d6:	9904      	ldr	r1, [sp, #16]
 80125d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80125da:	f8c3 8000 	str.w	r8, [r3]
 80125de:	440a      	add	r2, r1
 80125e0:	9221      	str	r2, [sp, #132]	; 0x84
 80125e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80125e4:	3201      	adds	r2, #1
 80125e6:	2a07      	cmp	r2, #7
 80125e8:	9220      	str	r2, [sp, #128]	; 0x80
 80125ea:	f73f af0e 	bgt.w	801240a <_svfprintf_r+0x7da>
 80125ee:	f103 0408 	add.w	r4, r3, #8
 80125f2:	e14f      	b.n	8012894 <_svfprintf_r+0xc64>
 80125f4:	9b04      	ldr	r3, [sp, #16]
 80125f6:	42bb      	cmp	r3, r7
 80125f8:	bfa8      	it	ge
 80125fa:	463b      	movge	r3, r7
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	461e      	mov	r6, r3
 8012600:	dd15      	ble.n	801262e <_svfprintf_r+0x9fe>
 8012602:	6063      	str	r3, [r4, #4]
 8012604:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012606:	f8c4 8000 	str.w	r8, [r4]
 801260a:	4433      	add	r3, r6
 801260c:	9321      	str	r3, [sp, #132]	; 0x84
 801260e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012610:	3301      	adds	r3, #1
 8012612:	2b07      	cmp	r3, #7
 8012614:	9320      	str	r3, [sp, #128]	; 0x80
 8012616:	dc01      	bgt.n	801261c <_svfprintf_r+0x9ec>
 8012618:	3408      	adds	r4, #8
 801261a:	e008      	b.n	801262e <_svfprintf_r+0x9fe>
 801261c:	aa1f      	add	r2, sp, #124	; 0x7c
 801261e:	4659      	mov	r1, fp
 8012620:	4650      	mov	r0, sl
 8012622:	f003 fc6f 	bl	8015f04 <__ssprint_r>
 8012626:	2800      	cmp	r0, #0
 8012628:	f040 8184 	bne.w	8012934 <_svfprintf_r+0xd04>
 801262c:	ac2c      	add	r4, sp, #176	; 0xb0
 801262e:	2e00      	cmp	r6, #0
 8012630:	bfac      	ite	ge
 8012632:	1bbe      	subge	r6, r7, r6
 8012634:	463e      	movlt	r6, r7
 8012636:	2e00      	cmp	r6, #0
 8012638:	dd30      	ble.n	801269c <_svfprintf_r+0xa6c>
 801263a:	f04f 0910 	mov.w	r9, #16
 801263e:	4b4f      	ldr	r3, [pc, #316]	; (801277c <_svfprintf_r+0xb4c>)
 8012640:	6023      	str	r3, [r4, #0]
 8012642:	2e10      	cmp	r6, #16
 8012644:	dd16      	ble.n	8012674 <_svfprintf_r+0xa44>
 8012646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012648:	f8c4 9004 	str.w	r9, [r4, #4]
 801264c:	3310      	adds	r3, #16
 801264e:	9321      	str	r3, [sp, #132]	; 0x84
 8012650:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012652:	3301      	adds	r3, #1
 8012654:	2b07      	cmp	r3, #7
 8012656:	9320      	str	r3, [sp, #128]	; 0x80
 8012658:	dc01      	bgt.n	801265e <_svfprintf_r+0xa2e>
 801265a:	3408      	adds	r4, #8
 801265c:	e008      	b.n	8012670 <_svfprintf_r+0xa40>
 801265e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012660:	4659      	mov	r1, fp
 8012662:	4650      	mov	r0, sl
 8012664:	f003 fc4e 	bl	8015f04 <__ssprint_r>
 8012668:	2800      	cmp	r0, #0
 801266a:	f040 8163 	bne.w	8012934 <_svfprintf_r+0xd04>
 801266e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012670:	3e10      	subs	r6, #16
 8012672:	e7e4      	b.n	801263e <_svfprintf_r+0xa0e>
 8012674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012676:	6066      	str	r6, [r4, #4]
 8012678:	441e      	add	r6, r3
 801267a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801267c:	9621      	str	r6, [sp, #132]	; 0x84
 801267e:	3301      	adds	r3, #1
 8012680:	2b07      	cmp	r3, #7
 8012682:	9320      	str	r3, [sp, #128]	; 0x80
 8012684:	dc01      	bgt.n	801268a <_svfprintf_r+0xa5a>
 8012686:	3408      	adds	r4, #8
 8012688:	e008      	b.n	801269c <_svfprintf_r+0xa6c>
 801268a:	aa1f      	add	r2, sp, #124	; 0x7c
 801268c:	4659      	mov	r1, fp
 801268e:	4650      	mov	r0, sl
 8012690:	f003 fc38 	bl	8015f04 <__ssprint_r>
 8012694:	2800      	cmp	r0, #0
 8012696:	f040 814d 	bne.w	8012934 <_svfprintf_r+0xd04>
 801269a:	ac2c      	add	r4, sp, #176	; 0xb0
 801269c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801269e:	9a04      	ldr	r2, [sp, #16]
 80126a0:	4293      	cmp	r3, r2
 80126a2:	4447      	add	r7, r8
 80126a4:	db01      	blt.n	80126aa <_svfprintf_r+0xa7a>
 80126a6:	07e9      	lsls	r1, r5, #31
 80126a8:	d517      	bpl.n	80126da <_svfprintf_r+0xaaa>
 80126aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126ac:	6023      	str	r3, [r4, #0]
 80126ae:	9b08      	ldr	r3, [sp, #32]
 80126b0:	6063      	str	r3, [r4, #4]
 80126b2:	9a08      	ldr	r2, [sp, #32]
 80126b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126b6:	4413      	add	r3, r2
 80126b8:	9321      	str	r3, [sp, #132]	; 0x84
 80126ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126bc:	3301      	adds	r3, #1
 80126be:	2b07      	cmp	r3, #7
 80126c0:	9320      	str	r3, [sp, #128]	; 0x80
 80126c2:	dc01      	bgt.n	80126c8 <_svfprintf_r+0xa98>
 80126c4:	3408      	adds	r4, #8
 80126c6:	e008      	b.n	80126da <_svfprintf_r+0xaaa>
 80126c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80126ca:	4659      	mov	r1, fp
 80126cc:	4650      	mov	r0, sl
 80126ce:	f003 fc19 	bl	8015f04 <__ssprint_r>
 80126d2:	2800      	cmp	r0, #0
 80126d4:	f040 812e 	bne.w	8012934 <_svfprintf_r+0xd04>
 80126d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80126da:	9b04      	ldr	r3, [sp, #16]
 80126dc:	9a04      	ldr	r2, [sp, #16]
 80126de:	eb08 0603 	add.w	r6, r8, r3
 80126e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126e4:	1bf6      	subs	r6, r6, r7
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	429e      	cmp	r6, r3
 80126ea:	bfa8      	it	ge
 80126ec:	461e      	movge	r6, r3
 80126ee:	2e00      	cmp	r6, #0
 80126f0:	dd14      	ble.n	801271c <_svfprintf_r+0xaec>
 80126f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126f4:	6027      	str	r7, [r4, #0]
 80126f6:	4433      	add	r3, r6
 80126f8:	9321      	str	r3, [sp, #132]	; 0x84
 80126fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126fc:	6066      	str	r6, [r4, #4]
 80126fe:	3301      	adds	r3, #1
 8012700:	2b07      	cmp	r3, #7
 8012702:	9320      	str	r3, [sp, #128]	; 0x80
 8012704:	dc01      	bgt.n	801270a <_svfprintf_r+0xada>
 8012706:	3408      	adds	r4, #8
 8012708:	e008      	b.n	801271c <_svfprintf_r+0xaec>
 801270a:	aa1f      	add	r2, sp, #124	; 0x7c
 801270c:	4659      	mov	r1, fp
 801270e:	4650      	mov	r0, sl
 8012710:	f003 fbf8 	bl	8015f04 <__ssprint_r>
 8012714:	2800      	cmp	r0, #0
 8012716:	f040 810d 	bne.w	8012934 <_svfprintf_r+0xd04>
 801271a:	ac2c      	add	r4, sp, #176	; 0xb0
 801271c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801271e:	9a04      	ldr	r2, [sp, #16]
 8012720:	2e00      	cmp	r6, #0
 8012722:	eba2 0303 	sub.w	r3, r2, r3
 8012726:	bfac      	ite	ge
 8012728:	1b9e      	subge	r6, r3, r6
 801272a:	461e      	movlt	r6, r3
 801272c:	2e00      	cmp	r6, #0
 801272e:	f340 80b1 	ble.w	8012894 <_svfprintf_r+0xc64>
 8012732:	4f12      	ldr	r7, [pc, #72]	; (801277c <_svfprintf_r+0xb4c>)
 8012734:	f04f 0810 	mov.w	r8, #16
 8012738:	2e10      	cmp	r6, #16
 801273a:	dd16      	ble.n	801276a <_svfprintf_r+0xb3a>
 801273c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801273e:	3310      	adds	r3, #16
 8012740:	9321      	str	r3, [sp, #132]	; 0x84
 8012742:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012744:	3301      	adds	r3, #1
 8012746:	2b07      	cmp	r3, #7
 8012748:	e884 0180 	stmia.w	r4, {r7, r8}
 801274c:	9320      	str	r3, [sp, #128]	; 0x80
 801274e:	dc01      	bgt.n	8012754 <_svfprintf_r+0xb24>
 8012750:	3408      	adds	r4, #8
 8012752:	e008      	b.n	8012766 <_svfprintf_r+0xb36>
 8012754:	aa1f      	add	r2, sp, #124	; 0x7c
 8012756:	4659      	mov	r1, fp
 8012758:	4650      	mov	r0, sl
 801275a:	f003 fbd3 	bl	8015f04 <__ssprint_r>
 801275e:	2800      	cmp	r0, #0
 8012760:	f040 80e8 	bne.w	8012934 <_svfprintf_r+0xd04>
 8012764:	ac2c      	add	r4, sp, #176	; 0xb0
 8012766:	3e10      	subs	r6, #16
 8012768:	e7e6      	b.n	8012738 <_svfprintf_r+0xb08>
 801276a:	4b04      	ldr	r3, [pc, #16]	; (801277c <_svfprintf_r+0xb4c>)
 801276c:	e884 0048 	stmia.w	r4, {r3, r6}
 8012770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012772:	441e      	add	r6, r3
 8012774:	9621      	str	r6, [sp, #132]	; 0x84
 8012776:	e642      	b.n	80123fe <_svfprintf_r+0x7ce>
 8012778:	0802fbef 	.word	0x0802fbef
 801277c:	0802fd21 	.word	0x0802fd21
 8012780:	9b04      	ldr	r3, [sp, #16]
 8012782:	2b01      	cmp	r3, #1
 8012784:	dc01      	bgt.n	801278a <_svfprintf_r+0xb5a>
 8012786:	07ea      	lsls	r2, r5, #31
 8012788:	d573      	bpl.n	8012872 <_svfprintf_r+0xc42>
 801278a:	2301      	movs	r3, #1
 801278c:	6063      	str	r3, [r4, #4]
 801278e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012790:	f8c4 8000 	str.w	r8, [r4]
 8012794:	3301      	adds	r3, #1
 8012796:	9321      	str	r3, [sp, #132]	; 0x84
 8012798:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801279a:	3301      	adds	r3, #1
 801279c:	2b07      	cmp	r3, #7
 801279e:	9320      	str	r3, [sp, #128]	; 0x80
 80127a0:	dc01      	bgt.n	80127a6 <_svfprintf_r+0xb76>
 80127a2:	3408      	adds	r4, #8
 80127a4:	e008      	b.n	80127b8 <_svfprintf_r+0xb88>
 80127a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80127a8:	4659      	mov	r1, fp
 80127aa:	4650      	mov	r0, sl
 80127ac:	f003 fbaa 	bl	8015f04 <__ssprint_r>
 80127b0:	2800      	cmp	r0, #0
 80127b2:	f040 80bf 	bne.w	8012934 <_svfprintf_r+0xd04>
 80127b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80127b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80127ba:	6023      	str	r3, [r4, #0]
 80127bc:	9b08      	ldr	r3, [sp, #32]
 80127be:	6063      	str	r3, [r4, #4]
 80127c0:	9a08      	ldr	r2, [sp, #32]
 80127c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127c4:	4413      	add	r3, r2
 80127c6:	9321      	str	r3, [sp, #132]	; 0x84
 80127c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80127ca:	3301      	adds	r3, #1
 80127cc:	2b07      	cmp	r3, #7
 80127ce:	9320      	str	r3, [sp, #128]	; 0x80
 80127d0:	dc01      	bgt.n	80127d6 <_svfprintf_r+0xba6>
 80127d2:	3408      	adds	r4, #8
 80127d4:	e008      	b.n	80127e8 <_svfprintf_r+0xbb8>
 80127d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80127d8:	4659      	mov	r1, fp
 80127da:	4650      	mov	r0, sl
 80127dc:	f003 fb92 	bl	8015f04 <__ssprint_r>
 80127e0:	2800      	cmp	r0, #0
 80127e2:	f040 80a7 	bne.w	8012934 <_svfprintf_r+0xd04>
 80127e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80127e8:	2300      	movs	r3, #0
 80127ea:	2200      	movs	r2, #0
 80127ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127f0:	f7ee f9e6 	bl	8000bc0 <__aeabi_dcmpeq>
 80127f4:	9b04      	ldr	r3, [sp, #16]
 80127f6:	1e5e      	subs	r6, r3, #1
 80127f8:	b9b8      	cbnz	r0, 801282a <_svfprintf_r+0xbfa>
 80127fa:	f108 0301 	add.w	r3, r8, #1
 80127fe:	e884 0048 	stmia.w	r4, {r3, r6}
 8012802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012804:	9a04      	ldr	r2, [sp, #16]
 8012806:	3b01      	subs	r3, #1
 8012808:	4413      	add	r3, r2
 801280a:	9321      	str	r3, [sp, #132]	; 0x84
 801280c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801280e:	3301      	adds	r3, #1
 8012810:	2b07      	cmp	r3, #7
 8012812:	9320      	str	r3, [sp, #128]	; 0x80
 8012814:	dd34      	ble.n	8012880 <_svfprintf_r+0xc50>
 8012816:	aa1f      	add	r2, sp, #124	; 0x7c
 8012818:	4659      	mov	r1, fp
 801281a:	4650      	mov	r0, sl
 801281c:	f003 fb72 	bl	8015f04 <__ssprint_r>
 8012820:	2800      	cmp	r0, #0
 8012822:	f040 8087 	bne.w	8012934 <_svfprintf_r+0xd04>
 8012826:	ac2c      	add	r4, sp, #176	; 0xb0
 8012828:	e02b      	b.n	8012882 <_svfprintf_r+0xc52>
 801282a:	2e00      	cmp	r6, #0
 801282c:	dd29      	ble.n	8012882 <_svfprintf_r+0xc52>
 801282e:	4fa7      	ldr	r7, [pc, #668]	; (8012acc <_svfprintf_r+0xe9c>)
 8012830:	f04f 0810 	mov.w	r8, #16
 8012834:	2e10      	cmp	r6, #16
 8012836:	dd15      	ble.n	8012864 <_svfprintf_r+0xc34>
 8012838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801283a:	3310      	adds	r3, #16
 801283c:	9321      	str	r3, [sp, #132]	; 0x84
 801283e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012840:	3301      	adds	r3, #1
 8012842:	2b07      	cmp	r3, #7
 8012844:	e884 0180 	stmia.w	r4, {r7, r8}
 8012848:	9320      	str	r3, [sp, #128]	; 0x80
 801284a:	dc01      	bgt.n	8012850 <_svfprintf_r+0xc20>
 801284c:	3408      	adds	r4, #8
 801284e:	e007      	b.n	8012860 <_svfprintf_r+0xc30>
 8012850:	aa1f      	add	r2, sp, #124	; 0x7c
 8012852:	4659      	mov	r1, fp
 8012854:	4650      	mov	r0, sl
 8012856:	f003 fb55 	bl	8015f04 <__ssprint_r>
 801285a:	2800      	cmp	r0, #0
 801285c:	d16a      	bne.n	8012934 <_svfprintf_r+0xd04>
 801285e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012860:	3e10      	subs	r6, #16
 8012862:	e7e7      	b.n	8012834 <_svfprintf_r+0xc04>
 8012864:	4b99      	ldr	r3, [pc, #612]	; (8012acc <_svfprintf_r+0xe9c>)
 8012866:	e884 0048 	stmia.w	r4, {r3, r6}
 801286a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801286c:	441e      	add	r6, r3
 801286e:	9621      	str	r6, [sp, #132]	; 0x84
 8012870:	e7cc      	b.n	801280c <_svfprintf_r+0xbdc>
 8012872:	2301      	movs	r3, #1
 8012874:	6063      	str	r3, [r4, #4]
 8012876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012878:	f8c4 8000 	str.w	r8, [r4]
 801287c:	3301      	adds	r3, #1
 801287e:	e7c4      	b.n	801280a <_svfprintf_r+0xbda>
 8012880:	3408      	adds	r4, #8
 8012882:	ab1b      	add	r3, sp, #108	; 0x6c
 8012884:	6023      	str	r3, [r4, #0]
 8012886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012888:	6063      	str	r3, [r4, #4]
 801288a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801288c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801288e:	4413      	add	r3, r2
 8012890:	e5b4      	b.n	80123fc <_svfprintf_r+0x7cc>
 8012892:	3408      	adds	r4, #8
 8012894:	076b      	lsls	r3, r5, #29
 8012896:	d40b      	bmi.n	80128b0 <_svfprintf_r+0xc80>
 8012898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801289a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801289c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801289e:	428a      	cmp	r2, r1
 80128a0:	bfac      	ite	ge
 80128a2:	189b      	addge	r3, r3, r2
 80128a4:	185b      	addlt	r3, r3, r1
 80128a6:	930a      	str	r3, [sp, #40]	; 0x28
 80128a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d035      	beq.n	801291a <_svfprintf_r+0xcea>
 80128ae:	e02e      	b.n	801290e <_svfprintf_r+0xcde>
 80128b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80128b4:	1a9d      	subs	r5, r3, r2
 80128b6:	2d00      	cmp	r5, #0
 80128b8:	ddee      	ble.n	8012898 <_svfprintf_r+0xc68>
 80128ba:	2610      	movs	r6, #16
 80128bc:	4b84      	ldr	r3, [pc, #528]	; (8012ad0 <_svfprintf_r+0xea0>)
 80128be:	6023      	str	r3, [r4, #0]
 80128c0:	2d10      	cmp	r5, #16
 80128c2:	dd13      	ble.n	80128ec <_svfprintf_r+0xcbc>
 80128c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128c6:	6066      	str	r6, [r4, #4]
 80128c8:	3310      	adds	r3, #16
 80128ca:	9321      	str	r3, [sp, #132]	; 0x84
 80128cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80128ce:	3301      	adds	r3, #1
 80128d0:	2b07      	cmp	r3, #7
 80128d2:	9320      	str	r3, [sp, #128]	; 0x80
 80128d4:	dc01      	bgt.n	80128da <_svfprintf_r+0xcaa>
 80128d6:	3408      	adds	r4, #8
 80128d8:	e006      	b.n	80128e8 <_svfprintf_r+0xcb8>
 80128da:	aa1f      	add	r2, sp, #124	; 0x7c
 80128dc:	4659      	mov	r1, fp
 80128de:	4650      	mov	r0, sl
 80128e0:	f003 fb10 	bl	8015f04 <__ssprint_r>
 80128e4:	bb30      	cbnz	r0, 8012934 <_svfprintf_r+0xd04>
 80128e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80128e8:	3d10      	subs	r5, #16
 80128ea:	e7e7      	b.n	80128bc <_svfprintf_r+0xc8c>
 80128ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128ee:	6065      	str	r5, [r4, #4]
 80128f0:	441d      	add	r5, r3
 80128f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80128f4:	9521      	str	r5, [sp, #132]	; 0x84
 80128f6:	3301      	adds	r3, #1
 80128f8:	2b07      	cmp	r3, #7
 80128fa:	9320      	str	r3, [sp, #128]	; 0x80
 80128fc:	ddcc      	ble.n	8012898 <_svfprintf_r+0xc68>
 80128fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8012900:	4659      	mov	r1, fp
 8012902:	4650      	mov	r0, sl
 8012904:	f003 fafe 	bl	8015f04 <__ssprint_r>
 8012908:	2800      	cmp	r0, #0
 801290a:	d0c5      	beq.n	8012898 <_svfprintf_r+0xc68>
 801290c:	e012      	b.n	8012934 <_svfprintf_r+0xd04>
 801290e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012910:	4659      	mov	r1, fp
 8012912:	4650      	mov	r0, sl
 8012914:	f003 faf6 	bl	8015f04 <__ssprint_r>
 8012918:	b960      	cbnz	r0, 8012934 <_svfprintf_r+0xd04>
 801291a:	2300      	movs	r3, #0
 801291c:	9320      	str	r3, [sp, #128]	; 0x80
 801291e:	9f03      	ldr	r7, [sp, #12]
 8012920:	ac2c      	add	r4, sp, #176	; 0xb0
 8012922:	f7ff b9bb 	b.w	8011c9c <_svfprintf_r+0x6c>
 8012926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012928:	b123      	cbz	r3, 8012934 <_svfprintf_r+0xd04>
 801292a:	aa1f      	add	r2, sp, #124	; 0x7c
 801292c:	4659      	mov	r1, fp
 801292e:	4650      	mov	r0, sl
 8012930:	f003 fae8 	bl	8015f04 <__ssprint_r>
 8012934:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8012938:	f013 0f40 	tst.w	r3, #64	; 0x40
 801293c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801293e:	bf18      	it	ne
 8012940:	f04f 33ff 	movne.w	r3, #4294967295
 8012944:	4618      	mov	r0, r3
 8012946:	e12e      	b.n	8012ba6 <_svfprintf_r+0xf76>
 8012948:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801294c:	4610      	mov	r0, r2
 801294e:	4619      	mov	r1, r3
 8012950:	f7ee f968 	bl	8000c24 <__aeabi_dcmpun>
 8012954:	b160      	cbz	r0, 8012970 <_svfprintf_r+0xd40>
 8012956:	4b5f      	ldr	r3, [pc, #380]	; (8012ad4 <_svfprintf_r+0xea4>)
 8012958:	4a5f      	ldr	r2, [pc, #380]	; (8012ad8 <_svfprintf_r+0xea8>)
 801295a:	9902      	ldr	r1, [sp, #8]
 801295c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8012960:	2947      	cmp	r1, #71	; 0x47
 8012962:	bfcc      	ite	gt
 8012964:	4690      	movgt	r8, r2
 8012966:	4698      	movle	r8, r3
 8012968:	f04f 0903 	mov.w	r9, #3
 801296c:	2600      	movs	r6, #0
 801296e:	e44e      	b.n	801220e <_svfprintf_r+0x5de>
 8012970:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012974:	d00a      	beq.n	801298c <_svfprintf_r+0xd5c>
 8012976:	9b02      	ldr	r3, [sp, #8]
 8012978:	f023 0320 	bic.w	r3, r3, #32
 801297c:	2b47      	cmp	r3, #71	; 0x47
 801297e:	d107      	bne.n	8012990 <_svfprintf_r+0xd60>
 8012980:	f1b9 0f00 	cmp.w	r9, #0
 8012984:	bf08      	it	eq
 8012986:	f04f 0901 	moveq.w	r9, #1
 801298a:	e001      	b.n	8012990 <_svfprintf_r+0xd60>
 801298c:	f04f 0906 	mov.w	r9, #6
 8012990:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8012994:	930c      	str	r3, [sp, #48]	; 0x30
 8012996:	9b07      	ldr	r3, [sp, #28]
 8012998:	2b00      	cmp	r3, #0
 801299a:	da07      	bge.n	80129ac <_svfprintf_r+0xd7c>
 801299c:	9b06      	ldr	r3, [sp, #24]
 801299e:	930e      	str	r3, [sp, #56]	; 0x38
 80129a0:	9b07      	ldr	r3, [sp, #28]
 80129a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80129a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80129a8:	232d      	movs	r3, #45	; 0x2d
 80129aa:	e004      	b.n	80129b6 <_svfprintf_r+0xd86>
 80129ac:	ed9d 7b06 	vldr	d7, [sp, #24]
 80129b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80129b4:	2300      	movs	r3, #0
 80129b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80129b8:	9b02      	ldr	r3, [sp, #8]
 80129ba:	f023 0720 	bic.w	r7, r3, #32
 80129be:	2f46      	cmp	r7, #70	; 0x46
 80129c0:	d004      	beq.n	80129cc <_svfprintf_r+0xd9c>
 80129c2:	2f45      	cmp	r7, #69	; 0x45
 80129c4:	d105      	bne.n	80129d2 <_svfprintf_r+0xda2>
 80129c6:	f109 0601 	add.w	r6, r9, #1
 80129ca:	e003      	b.n	80129d4 <_svfprintf_r+0xda4>
 80129cc:	464e      	mov	r6, r9
 80129ce:	2103      	movs	r1, #3
 80129d0:	e001      	b.n	80129d6 <_svfprintf_r+0xda6>
 80129d2:	464e      	mov	r6, r9
 80129d4:	2102      	movs	r1, #2
 80129d6:	ab1d      	add	r3, sp, #116	; 0x74
 80129d8:	9301      	str	r3, [sp, #4]
 80129da:	ab1a      	add	r3, sp, #104	; 0x68
 80129dc:	9300      	str	r3, [sp, #0]
 80129de:	4632      	mov	r2, r6
 80129e0:	ab19      	add	r3, sp, #100	; 0x64
 80129e2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80129e6:	4650      	mov	r0, sl
 80129e8:	f000 fee2 	bl	80137b0 <_dtoa_r>
 80129ec:	2f47      	cmp	r7, #71	; 0x47
 80129ee:	4680      	mov	r8, r0
 80129f0:	d102      	bne.n	80129f8 <_svfprintf_r+0xdc8>
 80129f2:	07eb      	lsls	r3, r5, #31
 80129f4:	f140 80cd 	bpl.w	8012b92 <_svfprintf_r+0xf62>
 80129f8:	eb08 0306 	add.w	r3, r8, r6
 80129fc:	2f46      	cmp	r7, #70	; 0x46
 80129fe:	9304      	str	r3, [sp, #16]
 8012a00:	d111      	bne.n	8012a26 <_svfprintf_r+0xdf6>
 8012a02:	f898 3000 	ldrb.w	r3, [r8]
 8012a06:	2b30      	cmp	r3, #48	; 0x30
 8012a08:	d109      	bne.n	8012a1e <_svfprintf_r+0xdee>
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012a12:	f7ee f8d5 	bl	8000bc0 <__aeabi_dcmpeq>
 8012a16:	b910      	cbnz	r0, 8012a1e <_svfprintf_r+0xdee>
 8012a18:	f1c6 0601 	rsb	r6, r6, #1
 8012a1c:	9619      	str	r6, [sp, #100]	; 0x64
 8012a1e:	9a04      	ldr	r2, [sp, #16]
 8012a20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a22:	441a      	add	r2, r3
 8012a24:	9204      	str	r2, [sp, #16]
 8012a26:	2200      	movs	r2, #0
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012a2e:	f7ee f8c7 	bl	8000bc0 <__aeabi_dcmpeq>
 8012a32:	b908      	cbnz	r0, 8012a38 <_svfprintf_r+0xe08>
 8012a34:	2230      	movs	r2, #48	; 0x30
 8012a36:	e002      	b.n	8012a3e <_svfprintf_r+0xe0e>
 8012a38:	9b04      	ldr	r3, [sp, #16]
 8012a3a:	931d      	str	r3, [sp, #116]	; 0x74
 8012a3c:	e007      	b.n	8012a4e <_svfprintf_r+0xe1e>
 8012a3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a40:	9904      	ldr	r1, [sp, #16]
 8012a42:	4299      	cmp	r1, r3
 8012a44:	d903      	bls.n	8012a4e <_svfprintf_r+0xe1e>
 8012a46:	1c59      	adds	r1, r3, #1
 8012a48:	911d      	str	r1, [sp, #116]	; 0x74
 8012a4a:	701a      	strb	r2, [r3, #0]
 8012a4c:	e7f7      	b.n	8012a3e <_svfprintf_r+0xe0e>
 8012a4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012a50:	2f47      	cmp	r7, #71	; 0x47
 8012a52:	ebc8 0303 	rsb	r3, r8, r3
 8012a56:	9304      	str	r3, [sp, #16]
 8012a58:	d108      	bne.n	8012a6c <_svfprintf_r+0xe3c>
 8012a5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a5c:	1cdf      	adds	r7, r3, #3
 8012a5e:	db01      	blt.n	8012a64 <_svfprintf_r+0xe34>
 8012a60:	4599      	cmp	r9, r3
 8012a62:	da68      	bge.n	8012b36 <_svfprintf_r+0xf06>
 8012a64:	9b02      	ldr	r3, [sp, #8]
 8012a66:	3b02      	subs	r3, #2
 8012a68:	9302      	str	r3, [sp, #8]
 8012a6a:	e002      	b.n	8012a72 <_svfprintf_r+0xe42>
 8012a6c:	9b02      	ldr	r3, [sp, #8]
 8012a6e:	2b65      	cmp	r3, #101	; 0x65
 8012a70:	dc4a      	bgt.n	8012b08 <_svfprintf_r+0xed8>
 8012a72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a74:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012a78:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8012a7c:	3b01      	subs	r3, #1
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	9319      	str	r3, [sp, #100]	; 0x64
 8012a82:	bfba      	itte	lt
 8012a84:	425b      	neglt	r3, r3
 8012a86:	222d      	movlt	r2, #45	; 0x2d
 8012a88:	222b      	movge	r2, #43	; 0x2b
 8012a8a:	2b09      	cmp	r3, #9
 8012a8c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8012a90:	dd24      	ble.n	8012adc <_svfprintf_r+0xeac>
 8012a92:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8012a96:	200a      	movs	r0, #10
 8012a98:	fb93 f1f0 	sdiv	r1, r3, r0
 8012a9c:	fb00 3311 	mls	r3, r0, r1, r3
 8012aa0:	3330      	adds	r3, #48	; 0x30
 8012aa2:	2909      	cmp	r1, #9
 8012aa4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8012aa8:	460b      	mov	r3, r1
 8012aaa:	dcf5      	bgt.n	8012a98 <_svfprintf_r+0xe68>
 8012aac:	3330      	adds	r3, #48	; 0x30
 8012aae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012ab2:	1e51      	subs	r1, r2, #1
 8012ab4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8012ab8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8012abc:	4281      	cmp	r1, r0
 8012abe:	461a      	mov	r2, r3
 8012ac0:	d213      	bcs.n	8012aea <_svfprintf_r+0xeba>
 8012ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012ac6:	f803 2b01 	strb.w	r2, [r3], #1
 8012aca:	e7f7      	b.n	8012abc <_svfprintf_r+0xe8c>
 8012acc:	0802fd21 	.word	0x0802fd21
 8012ad0:	0802fd63 	.word	0x0802fd63
 8012ad4:	0802fd39 	.word	0x0802fd39
 8012ad8:	0802fd3d 	.word	0x0802fd3d
 8012adc:	2230      	movs	r2, #48	; 0x30
 8012ade:	4413      	add	r3, r2
 8012ae0:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8012ae4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8012ae8:	aa1c      	add	r2, sp, #112	; 0x70
 8012aea:	ab1b      	add	r3, sp, #108	; 0x6c
 8012aec:	1ad3      	subs	r3, r2, r3
 8012aee:	9a04      	ldr	r2, [sp, #16]
 8012af0:	9310      	str	r3, [sp, #64]	; 0x40
 8012af2:	2a01      	cmp	r2, #1
 8012af4:	eb03 0902 	add.w	r9, r3, r2
 8012af8:	dc02      	bgt.n	8012b00 <_svfprintf_r+0xed0>
 8012afa:	f015 0701 	ands.w	r7, r5, #1
 8012afe:	d032      	beq.n	8012b66 <_svfprintf_r+0xf36>
 8012b00:	9b08      	ldr	r3, [sp, #32]
 8012b02:	2700      	movs	r7, #0
 8012b04:	4499      	add	r9, r3
 8012b06:	e02e      	b.n	8012b66 <_svfprintf_r+0xf36>
 8012b08:	9b02      	ldr	r3, [sp, #8]
 8012b0a:	2b66      	cmp	r3, #102	; 0x66
 8012b0c:	d113      	bne.n	8012b36 <_svfprintf_r+0xf06>
 8012b0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	dd07      	ble.n	8012b24 <_svfprintf_r+0xef4>
 8012b14:	f1b9 0f00 	cmp.w	r9, #0
 8012b18:	d101      	bne.n	8012b1e <_svfprintf_r+0xeee>
 8012b1a:	07ee      	lsls	r6, r5, #31
 8012b1c:	d521      	bpl.n	8012b62 <_svfprintf_r+0xf32>
 8012b1e:	9a08      	ldr	r2, [sp, #32]
 8012b20:	4413      	add	r3, r2
 8012b22:	e006      	b.n	8012b32 <_svfprintf_r+0xf02>
 8012b24:	f1b9 0f00 	cmp.w	r9, #0
 8012b28:	d101      	bne.n	8012b2e <_svfprintf_r+0xefe>
 8012b2a:	07ed      	lsls	r5, r5, #31
 8012b2c:	d514      	bpl.n	8012b58 <_svfprintf_r+0xf28>
 8012b2e:	9b08      	ldr	r3, [sp, #32]
 8012b30:	3301      	adds	r3, #1
 8012b32:	444b      	add	r3, r9
 8012b34:	e015      	b.n	8012b62 <_svfprintf_r+0xf32>
 8012b36:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012b38:	9a04      	ldr	r2, [sp, #16]
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	db03      	blt.n	8012b46 <_svfprintf_r+0xf16>
 8012b3e:	07e8      	lsls	r0, r5, #31
 8012b40:	d50d      	bpl.n	8012b5e <_svfprintf_r+0xf2e>
 8012b42:	9a08      	ldr	r2, [sp, #32]
 8012b44:	e006      	b.n	8012b54 <_svfprintf_r+0xf24>
 8012b46:	9a04      	ldr	r2, [sp, #16]
 8012b48:	9908      	ldr	r1, [sp, #32]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	440a      	add	r2, r1
 8012b4e:	dc05      	bgt.n	8012b5c <_svfprintf_r+0xf2c>
 8012b50:	f1c3 0301 	rsb	r3, r3, #1
 8012b54:	4413      	add	r3, r2
 8012b56:	e002      	b.n	8012b5e <_svfprintf_r+0xf2e>
 8012b58:	2301      	movs	r3, #1
 8012b5a:	e002      	b.n	8012b62 <_svfprintf_r+0xf32>
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	2267      	movs	r2, #103	; 0x67
 8012b60:	9202      	str	r2, [sp, #8]
 8012b62:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8012b64:	4699      	mov	r9, r3
 8012b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b68:	b113      	cbz	r3, 8012b70 <_svfprintf_r+0xf40>
 8012b6a:	232d      	movs	r3, #45	; 0x2d
 8012b6c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8012b70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b72:	2600      	movs	r6, #0
 8012b74:	f7ff bb4c 	b.w	8012210 <_svfprintf_r+0x5e0>
 8012b78:	2200      	movs	r2, #0
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b80:	f7ee f828 	bl	8000bd4 <__aeabi_dcmplt>
 8012b84:	b110      	cbz	r0, 8012b8c <_svfprintf_r+0xf5c>
 8012b86:	232d      	movs	r3, #45	; 0x2d
 8012b88:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8012b8c:	4b07      	ldr	r3, [pc, #28]	; (8012bac <_svfprintf_r+0xf7c>)
 8012b8e:	4a08      	ldr	r2, [pc, #32]	; (8012bb0 <_svfprintf_r+0xf80>)
 8012b90:	e6e3      	b.n	801295a <_svfprintf_r+0xd2a>
 8012b92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012b94:	1a1b      	subs	r3, r3, r0
 8012b96:	9304      	str	r3, [sp, #16]
 8012b98:	e75f      	b.n	8012a5a <_svfprintf_r+0xe2a>
 8012b9a:	ea56 0207 	orrs.w	r2, r6, r7
 8012b9e:	f47f aaaa 	bne.w	80120f6 <_svfprintf_r+0x4c6>
 8012ba2:	f7ff baaf 	b.w	8012104 <_svfprintf_r+0x4d4>
 8012ba6:	b03d      	add	sp, #244	; 0xf4
 8012ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bac:	0802fd31 	.word	0x0802fd31
 8012bb0:	0802fd35 	.word	0x0802fd35

08012bb4 <__ssvfscanf_r>:
 8012bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bb8:	461f      	mov	r7, r3
 8012bba:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8012bbe:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
 8012bc2:	460d      	mov	r5, r1
 8012bc4:	0499      	lsls	r1, r3, #18
 8012bc6:	4681      	mov	r9, r0
 8012bc8:	9206      	str	r2, [sp, #24]
 8012bca:	d406      	bmi.n	8012bda <__ssvfscanf_r+0x26>
 8012bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012bd0:	81ab      	strh	r3, [r5, #12]
 8012bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012bd8:	666b      	str	r3, [r5, #100]	; 0x64
 8012bda:	2300      	movs	r3, #0
 8012bdc:	9305      	str	r3, [sp, #20]
 8012bde:	9304      	str	r3, [sp, #16]
 8012be0:	4698      	mov	r8, r3
 8012be2:	9303      	str	r3, [sp, #12]
 8012be4:	9b06      	ldr	r3, [sp, #24]
 8012be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bea:	9306      	str	r3, [sp, #24]
 8012bec:	920f      	str	r2, [sp, #60]	; 0x3c
 8012bee:	2a00      	cmp	r2, #0
 8012bf0:	f000 853f 	beq.w	8013672 <__ssvfscanf_r+0xabe>
 8012bf4:	4b9a      	ldr	r3, [pc, #616]	; (8012e60 <__ssvfscanf_r+0x2ac>)
 8012bf6:	6819      	ldr	r1, [r3, #0]
 8012bf8:	188b      	adds	r3, r1, r2
 8012bfa:	785b      	ldrb	r3, [r3, #1]
 8012bfc:	f003 0308 	and.w	r3, r3, #8
 8012c00:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8012c04:	b1cb      	cbz	r3, 8012c3a <__ssvfscanf_r+0x86>
 8012c06:	686b      	ldr	r3, [r5, #4]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	dd0f      	ble.n	8012c2c <__ssvfscanf_r+0x78>
 8012c0c:	682b      	ldr	r3, [r5, #0]
 8012c0e:	4994      	ldr	r1, [pc, #592]	; (8012e60 <__ssvfscanf_r+0x2ac>)
 8012c10:	781a      	ldrb	r2, [r3, #0]
 8012c12:	6809      	ldr	r1, [r1, #0]
 8012c14:	440a      	add	r2, r1
 8012c16:	7852      	ldrb	r2, [r2, #1]
 8012c18:	0712      	lsls	r2, r2, #28
 8012c1a:	d5e3      	bpl.n	8012be4 <__ssvfscanf_r+0x30>
 8012c1c:	686a      	ldr	r2, [r5, #4]
 8012c1e:	3301      	adds	r3, #1
 8012c20:	3a01      	subs	r2, #1
 8012c22:	f108 0801 	add.w	r8, r8, #1
 8012c26:	606a      	str	r2, [r5, #4]
 8012c28:	602b      	str	r3, [r5, #0]
 8012c2a:	e7ec      	b.n	8012c06 <__ssvfscanf_r+0x52>
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	4648      	mov	r0, r9
 8012c30:	f003 fa25 	bl	801607e <__ssrefill_r>
 8012c34:	2800      	cmp	r0, #0
 8012c36:	d0e9      	beq.n	8012c0c <__ssvfscanf_r+0x58>
 8012c38:	e7d4      	b.n	8012be4 <__ssvfscanf_r+0x30>
 8012c3a:	2a25      	cmp	r2, #37	; 0x25
 8012c3c:	d155      	bne.n	8012cea <__ssvfscanf_r+0x136>
 8012c3e:	9a06      	ldr	r2, [sp, #24]
 8012c40:	4626      	mov	r6, r4
 8012c42:	200a      	movs	r0, #10
 8012c44:	9b06      	ldr	r3, [sp, #24]
 8012c46:	3301      	adds	r3, #1
 8012c48:	9306      	str	r3, [sp, #24]
 8012c4a:	7813      	ldrb	r3, [r2, #0]
 8012c4c:	2b63      	cmp	r3, #99	; 0x63
 8012c4e:	f000 808f 	beq.w	8012d70 <__ssvfscanf_r+0x1bc>
 8012c52:	d828      	bhi.n	8012ca6 <__ssvfscanf_r+0xf2>
 8012c54:	2b44      	cmp	r3, #68	; 0x44
 8012c56:	f000 80b5 	beq.w	8012dc4 <__ssvfscanf_r+0x210>
 8012c5a:	d812      	bhi.n	8012c82 <__ssvfscanf_r+0xce>
 8012c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8012c5e:	d05f      	beq.n	8012d20 <__ssvfscanf_r+0x16c>
 8012c60:	d805      	bhi.n	8012c6e <__ssvfscanf_r+0xba>
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	f000 8507 	beq.w	8013676 <__ssvfscanf_r+0xac2>
 8012c68:	2b25      	cmp	r3, #37	; 0x25
 8012c6a:	d03e      	beq.n	8012cea <__ssvfscanf_r+0x136>
 8012c6c:	e0a4      	b.n	8012db8 <__ssvfscanf_r+0x204>
 8012c6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012c72:	2a09      	cmp	r2, #9
 8012c74:	f200 80a0 	bhi.w	8012db8 <__ssvfscanf_r+0x204>
 8012c78:	fb00 3606 	mla	r6, r0, r6, r3
 8012c7c:	3e30      	subs	r6, #48	; 0x30
 8012c7e:	9a06      	ldr	r2, [sp, #24]
 8012c80:	e7e0      	b.n	8012c44 <__ssvfscanf_r+0x90>
 8012c82:	2b4c      	cmp	r3, #76	; 0x4c
 8012c84:	d058      	beq.n	8012d38 <__ssvfscanf_r+0x184>
 8012c86:	d804      	bhi.n	8012c92 <__ssvfscanf_r+0xde>
 8012c88:	2b45      	cmp	r3, #69	; 0x45
 8012c8a:	d064      	beq.n	8012d56 <__ssvfscanf_r+0x1a2>
 8012c8c:	2b47      	cmp	r3, #71	; 0x47
 8012c8e:	d062      	beq.n	8012d56 <__ssvfscanf_r+0x1a2>
 8012c90:	e092      	b.n	8012db8 <__ssvfscanf_r+0x204>
 8012c92:	2b58      	cmp	r3, #88	; 0x58
 8012c94:	d05c      	beq.n	8012d50 <__ssvfscanf_r+0x19c>
 8012c96:	2b5b      	cmp	r3, #91	; 0x5b
 8012c98:	d060      	beq.n	8012d5c <__ssvfscanf_r+0x1a8>
 8012c9a:	2b4f      	cmp	r3, #79	; 0x4f
 8012c9c:	f040 808c 	bne.w	8012db8 <__ssvfscanf_r+0x204>
 8012ca0:	f044 0401 	orr.w	r4, r4, #1
 8012ca4:	e04e      	b.n	8012d44 <__ssvfscanf_r+0x190>
 8012ca6:	2b6c      	cmp	r3, #108	; 0x6c
 8012ca8:	d03d      	beq.n	8012d26 <__ssvfscanf_r+0x172>
 8012caa:	d80d      	bhi.n	8012cc8 <__ssvfscanf_r+0x114>
 8012cac:	2b67      	cmp	r3, #103	; 0x67
 8012cae:	d803      	bhi.n	8012cb8 <__ssvfscanf_r+0x104>
 8012cb0:	2b65      	cmp	r3, #101	; 0x65
 8012cb2:	f0c0 8089 	bcc.w	8012dc8 <__ssvfscanf_r+0x214>
 8012cb6:	e04e      	b.n	8012d56 <__ssvfscanf_r+0x1a2>
 8012cb8:	2b68      	cmp	r3, #104	; 0x68
 8012cba:	d040      	beq.n	8012d3e <__ssvfscanf_r+0x18a>
 8012cbc:	2b69      	cmp	r3, #105	; 0x69
 8012cbe:	d17b      	bne.n	8012db8 <__ssvfscanf_r+0x204>
 8012cc0:	4b68      	ldr	r3, [pc, #416]	; (8012e64 <__ssvfscanf_r+0x2b0>)
 8012cc2:	9305      	str	r3, [sp, #20]
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	e082      	b.n	8012dce <__ssvfscanf_r+0x21a>
 8012cc8:	2b70      	cmp	r3, #112	; 0x70
 8012cca:	d056      	beq.n	8012d7a <__ssvfscanf_r+0x1c6>
 8012ccc:	d804      	bhi.n	8012cd8 <__ssvfscanf_r+0x124>
 8012cce:	2b6e      	cmp	r3, #110	; 0x6e
 8012cd0:	d059      	beq.n	8012d86 <__ssvfscanf_r+0x1d2>
 8012cd2:	2b6f      	cmp	r3, #111	; 0x6f
 8012cd4:	d036      	beq.n	8012d44 <__ssvfscanf_r+0x190>
 8012cd6:	e06f      	b.n	8012db8 <__ssvfscanf_r+0x204>
 8012cd8:	2b75      	cmp	r3, #117	; 0x75
 8012cda:	d037      	beq.n	8012d4c <__ssvfscanf_r+0x198>
 8012cdc:	2b78      	cmp	r3, #120	; 0x78
 8012cde:	d037      	beq.n	8012d50 <__ssvfscanf_r+0x19c>
 8012ce0:	2b73      	cmp	r3, #115	; 0x73
 8012ce2:	d169      	bne.n	8012db8 <__ssvfscanf_r+0x204>
 8012ce4:	f04f 0a02 	mov.w	sl, #2
 8012ce8:	e074      	b.n	8012dd4 <__ssvfscanf_r+0x220>
 8012cea:	686b      	ldr	r3, [r5, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	dd0f      	ble.n	8012d10 <__ssvfscanf_r+0x15c>
 8012cf0:	682b      	ldr	r3, [r5, #0]
 8012cf2:	9a06      	ldr	r2, [sp, #24]
 8012cf4:	7819      	ldrb	r1, [r3, #0]
 8012cf6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8012cfa:	4291      	cmp	r1, r2
 8012cfc:	f040 84b9 	bne.w	8013672 <__ssvfscanf_r+0xabe>
 8012d00:	686a      	ldr	r2, [r5, #4]
 8012d02:	3301      	adds	r3, #1
 8012d04:	3a01      	subs	r2, #1
 8012d06:	606a      	str	r2, [r5, #4]
 8012d08:	602b      	str	r3, [r5, #0]
 8012d0a:	f108 0801 	add.w	r8, r8, #1
 8012d0e:	e769      	b.n	8012be4 <__ssvfscanf_r+0x30>
 8012d10:	4629      	mov	r1, r5
 8012d12:	4648      	mov	r0, r9
 8012d14:	f003 f9b3 	bl	801607e <__ssrefill_r>
 8012d18:	2800      	cmp	r0, #0
 8012d1a:	d0e9      	beq.n	8012cf0 <__ssvfscanf_r+0x13c>
 8012d1c:	f000 bc9e 	b.w	801365c <__ssvfscanf_r+0xaa8>
 8012d20:	f044 0410 	orr.w	r4, r4, #16
 8012d24:	e7ab      	b.n	8012c7e <__ssvfscanf_r+0xca>
 8012d26:	7853      	ldrb	r3, [r2, #1]
 8012d28:	2b6c      	cmp	r3, #108	; 0x6c
 8012d2a:	d102      	bne.n	8012d32 <__ssvfscanf_r+0x17e>
 8012d2c:	1c93      	adds	r3, r2, #2
 8012d2e:	9306      	str	r3, [sp, #24]
 8012d30:	e002      	b.n	8012d38 <__ssvfscanf_r+0x184>
 8012d32:	f044 0401 	orr.w	r4, r4, #1
 8012d36:	e7a2      	b.n	8012c7e <__ssvfscanf_r+0xca>
 8012d38:	f044 0402 	orr.w	r4, r4, #2
 8012d3c:	e79f      	b.n	8012c7e <__ssvfscanf_r+0xca>
 8012d3e:	f044 0404 	orr.w	r4, r4, #4
 8012d42:	e79c      	b.n	8012c7e <__ssvfscanf_r+0xca>
 8012d44:	4b48      	ldr	r3, [pc, #288]	; (8012e68 <__ssvfscanf_r+0x2b4>)
 8012d46:	9305      	str	r3, [sp, #20]
 8012d48:	2308      	movs	r3, #8
 8012d4a:	e040      	b.n	8012dce <__ssvfscanf_r+0x21a>
 8012d4c:	4b46      	ldr	r3, [pc, #280]	; (8012e68 <__ssvfscanf_r+0x2b4>)
 8012d4e:	e03c      	b.n	8012dca <__ssvfscanf_r+0x216>
 8012d50:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8012d54:	e013      	b.n	8012d7e <__ssvfscanf_r+0x1ca>
 8012d56:	f04f 0a04 	mov.w	sl, #4
 8012d5a:	e03b      	b.n	8012dd4 <__ssvfscanf_r+0x220>
 8012d5c:	9906      	ldr	r1, [sp, #24]
 8012d5e:	a812      	add	r0, sp, #72	; 0x48
 8012d60:	f002 f81f 	bl	8014da2 <__sccl>
 8012d64:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8012d68:	9006      	str	r0, [sp, #24]
 8012d6a:	f04f 0a01 	mov.w	sl, #1
 8012d6e:	e031      	b.n	8012dd4 <__ssvfscanf_r+0x220>
 8012d70:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8012d74:	f04f 0a00 	mov.w	sl, #0
 8012d78:	e02c      	b.n	8012dd4 <__ssvfscanf_r+0x220>
 8012d7a:	f444 7408 	orr.w	r4, r4, #544	; 0x220
 8012d7e:	4b3a      	ldr	r3, [pc, #232]	; (8012e68 <__ssvfscanf_r+0x2b4>)
 8012d80:	9305      	str	r3, [sp, #20]
 8012d82:	2310      	movs	r3, #16
 8012d84:	e023      	b.n	8012dce <__ssvfscanf_r+0x21a>
 8012d86:	06e6      	lsls	r6, r4, #27
 8012d88:	f53f af2c 	bmi.w	8012be4 <__ssvfscanf_r+0x30>
 8012d8c:	f014 0f04 	tst.w	r4, #4
 8012d90:	683a      	ldr	r2, [r7, #0]
 8012d92:	f107 0304 	add.w	r3, r7, #4
 8012d96:	d002      	beq.n	8012d9e <__ssvfscanf_r+0x1ea>
 8012d98:	f8a2 8000 	strh.w	r8, [r2]
 8012d9c:	e003      	b.n	8012da6 <__ssvfscanf_r+0x1f2>
 8012d9e:	07e0      	lsls	r0, r4, #31
 8012da0:	d503      	bpl.n	8012daa <__ssvfscanf_r+0x1f6>
 8012da2:	f8c2 8000 	str.w	r8, [r2]
 8012da6:	461f      	mov	r7, r3
 8012da8:	e71c      	b.n	8012be4 <__ssvfscanf_r+0x30>
 8012daa:	07a1      	lsls	r1, r4, #30
 8012dac:	d5f9      	bpl.n	8012da2 <__ssvfscanf_r+0x1ee>
 8012dae:	4640      	mov	r0, r8
 8012db0:	17c1      	asrs	r1, r0, #31
 8012db2:	e9c2 0100 	strd	r0, r1, [r2]
 8012db6:	e7f6      	b.n	8012da6 <__ssvfscanf_r+0x1f2>
 8012db8:	440b      	add	r3, r1
 8012dba:	785b      	ldrb	r3, [r3, #1]
 8012dbc:	f003 0303 	and.w	r3, r3, #3
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d101      	bne.n	8012dc8 <__ssvfscanf_r+0x214>
 8012dc4:	f044 0401 	orr.w	r4, r4, #1
 8012dc8:	4b26      	ldr	r3, [pc, #152]	; (8012e64 <__ssvfscanf_r+0x2b0>)
 8012dca:	9305      	str	r3, [sp, #20]
 8012dcc:	230a      	movs	r3, #10
 8012dce:	9304      	str	r3, [sp, #16]
 8012dd0:	f04f 0a03 	mov.w	sl, #3
 8012dd4:	686b      	ldr	r3, [r5, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	dd02      	ble.n	8012de0 <__ssvfscanf_r+0x22c>
 8012dda:	0663      	lsls	r3, r4, #25
 8012ddc:	d422      	bmi.n	8012e24 <__ssvfscanf_r+0x270>
 8012dde:	e010      	b.n	8012e02 <__ssvfscanf_r+0x24e>
 8012de0:	4629      	mov	r1, r5
 8012de2:	4648      	mov	r0, r9
 8012de4:	f003 f94b 	bl	801607e <__ssrefill_r>
 8012de8:	2800      	cmp	r0, #0
 8012dea:	d0f6      	beq.n	8012dda <__ssvfscanf_r+0x226>
 8012dec:	f000 bc36 	b.w	801365c <__ssvfscanf_r+0xaa8>
 8012df0:	686a      	ldr	r2, [r5, #4]
 8012df2:	3a01      	subs	r2, #1
 8012df4:	2a00      	cmp	r2, #0
 8012df6:	f108 0801 	add.w	r8, r8, #1
 8012dfa:	606a      	str	r2, [r5, #4]
 8012dfc:	dd0a      	ble.n	8012e14 <__ssvfscanf_r+0x260>
 8012dfe:	3301      	adds	r3, #1
 8012e00:	602b      	str	r3, [r5, #0]
 8012e02:	682b      	ldr	r3, [r5, #0]
 8012e04:	4a16      	ldr	r2, [pc, #88]	; (8012e60 <__ssvfscanf_r+0x2ac>)
 8012e06:	7819      	ldrb	r1, [r3, #0]
 8012e08:	6812      	ldr	r2, [r2, #0]
 8012e0a:	440a      	add	r2, r1
 8012e0c:	7852      	ldrb	r2, [r2, #1]
 8012e0e:	0710      	lsls	r0, r2, #28
 8012e10:	d4ee      	bmi.n	8012df0 <__ssvfscanf_r+0x23c>
 8012e12:	e007      	b.n	8012e24 <__ssvfscanf_r+0x270>
 8012e14:	4629      	mov	r1, r5
 8012e16:	4648      	mov	r0, r9
 8012e18:	f003 f931 	bl	801607e <__ssrefill_r>
 8012e1c:	2800      	cmp	r0, #0
 8012e1e:	d0f0      	beq.n	8012e02 <__ssvfscanf_r+0x24e>
 8012e20:	f000 bc1c 	b.w	801365c <__ssvfscanf_r+0xaa8>
 8012e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012e28:	f1ba 0f03 	cmp.w	sl, #3
 8012e2c:	d805      	bhi.n	8012e3a <__ssvfscanf_r+0x286>
 8012e2e:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8012e32:	008a      	.short	0x008a
 8012e34:	019800dd 	.word	0x019800dd
 8012e38:	0265      	.short	0x0265
 8012e3a:	2e00      	cmp	r6, #0
 8012e3c:	bf08      	it	eq
 8012e3e:	2601      	moveq	r6, #1
 8012e40:	f014 0301 	ands.w	r3, r4, #1
 8012e44:	f004 0410 	and.w	r4, r4, #16
 8012e48:	d056      	beq.n	8012ef8 <__ssvfscanf_r+0x344>
 8012e4a:	2208      	movs	r2, #8
 8012e4c:	2100      	movs	r1, #0
 8012e4e:	a810      	add	r0, sp, #64	; 0x40
 8012e50:	f7fe fe02 	bl	8011a58 <memset>
 8012e54:	b954      	cbnz	r4, 8012e6c <__ssvfscanf_r+0x2b8>
 8012e56:	f8d7 b000 	ldr.w	fp, [r7]
 8012e5a:	3704      	adds	r7, #4
 8012e5c:	e008      	b.n	8012e70 <__ssvfscanf_r+0x2bc>
 8012e5e:	bf00      	nop
 8012e60:	2001008c 	.word	0x2001008c
 8012e64:	08015a49 	.word	0x08015a49
 8012e68:	08015cb5 	.word	0x08015cb5
 8012e6c:	f04f 0b00 	mov.w	fp, #0
 8012e70:	2300      	movs	r3, #0
 8012e72:	9307      	str	r3, [sp, #28]
 8012e74:	f001 fb62 	bl	801453c <__locale_mb_cur_max>
 8012e78:	9b07      	ldr	r3, [sp, #28]
 8012e7a:	4298      	cmp	r0, r3
 8012e7c:	f000 83ee 	beq.w	801365c <__ssvfscanf_r+0xaa8>
 8012e80:	682a      	ldr	r2, [r5, #0]
 8012e82:	a852      	add	r0, sp, #328	; 0x148
 8012e84:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012e88:	54c1      	strb	r1, [r0, r3]
 8012e8a:	f103 0a01 	add.w	sl, r3, #1
 8012e8e:	686b      	ldr	r3, [r5, #4]
 8012e90:	3b01      	subs	r3, #1
 8012e92:	e885 000c 	stmia.w	r5, {r2, r3}
 8012e96:	ab10      	add	r3, sp, #64	; 0x40
 8012e98:	9300      	str	r3, [sp, #0]
 8012e9a:	4602      	mov	r2, r0
 8012e9c:	4659      	mov	r1, fp
 8012e9e:	4653      	mov	r3, sl
 8012ea0:	4648      	mov	r0, r9
 8012ea2:	f001 fb55 	bl	8014550 <_mbrtowc_r>
 8012ea6:	1c41      	adds	r1, r0, #1
 8012ea8:	f000 83d8 	beq.w	801365c <__ssvfscanf_r+0xaa8>
 8012eac:	b938      	cbnz	r0, 8012ebe <__ssvfscanf_r+0x30a>
 8012eae:	44d0      	add	r8, sl
 8012eb0:	3e01      	subs	r6, #1
 8012eb2:	2c00      	cmp	r4, #0
 8012eb4:	f040 83e2 	bne.w	801367c <__ssvfscanf_r+0xac8>
 8012eb8:	f8cb 4000 	str.w	r4, [fp]
 8012ebc:	e004      	b.n	8012ec8 <__ssvfscanf_r+0x314>
 8012ebe:	3002      	adds	r0, #2
 8012ec0:	d006      	beq.n	8012ed0 <__ssvfscanf_r+0x31c>
 8012ec2:	44d0      	add	r8, sl
 8012ec4:	3e01      	subs	r6, #1
 8012ec6:	b90c      	cbnz	r4, 8012ecc <__ssvfscanf_r+0x318>
 8012ec8:	f10b 0b04 	add.w	fp, fp, #4
 8012ecc:	f04f 0a00 	mov.w	sl, #0
 8012ed0:	686b      	ldr	r3, [r5, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	dc0c      	bgt.n	8012ef0 <__ssvfscanf_r+0x33c>
 8012ed6:	4629      	mov	r1, r5
 8012ed8:	4648      	mov	r0, r9
 8012eda:	f003 f8d0 	bl	801607e <__ssrefill_r>
 8012ede:	b138      	cbz	r0, 8012ef0 <__ssvfscanf_r+0x33c>
 8012ee0:	f1ba 0f00 	cmp.w	sl, #0
 8012ee4:	f040 83ba 	bne.w	801365c <__ssvfscanf_r+0xaa8>
 8012ee8:	2c00      	cmp	r4, #0
 8012eea:	f000 80f0 	beq.w	80130ce <__ssvfscanf_r+0x51a>
 8012eee:	e679      	b.n	8012be4 <__ssvfscanf_r+0x30>
 8012ef0:	2e00      	cmp	r6, #0
 8012ef2:	d0f9      	beq.n	8012ee8 <__ssvfscanf_r+0x334>
 8012ef4:	4653      	mov	r3, sl
 8012ef6:	e7bc      	b.n	8012e72 <__ssvfscanf_r+0x2be>
 8012ef8:	b1c4      	cbz	r4, 8012f2c <__ssvfscanf_r+0x378>
 8012efa:	461c      	mov	r4, r3
 8012efc:	686b      	ldr	r3, [r5, #4]
 8012efe:	682a      	ldr	r2, [r5, #0]
 8012f00:	42b3      	cmp	r3, r6
 8012f02:	da0d      	bge.n	8012f20 <__ssvfscanf_r+0x36c>
 8012f04:	441c      	add	r4, r3
 8012f06:	1af6      	subs	r6, r6, r3
 8012f08:	4413      	add	r3, r2
 8012f0a:	602b      	str	r3, [r5, #0]
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	4648      	mov	r0, r9
 8012f10:	f003 f8b5 	bl	801607e <__ssrefill_r>
 8012f14:	2800      	cmp	r0, #0
 8012f16:	d0f1      	beq.n	8012efc <__ssvfscanf_r+0x348>
 8012f18:	2c00      	cmp	r4, #0
 8012f1a:	f040 80f7 	bne.w	801310c <__ssvfscanf_r+0x558>
 8012f1e:	e39d      	b.n	801365c <__ssvfscanf_r+0xaa8>
 8012f20:	1b9b      	subs	r3, r3, r6
 8012f22:	606b      	str	r3, [r5, #4]
 8012f24:	1993      	adds	r3, r2, r6
 8012f26:	4434      	add	r4, r6
 8012f28:	602b      	str	r3, [r5, #0]
 8012f2a:	e0ef      	b.n	801310c <__ssvfscanf_r+0x558>
 8012f2c:	9500      	str	r5, [sp, #0]
 8012f2e:	4633      	mov	r3, r6
 8012f30:	2201      	movs	r2, #1
 8012f32:	6839      	ldr	r1, [r7, #0]
 8012f34:	4648      	mov	r0, r9
 8012f36:	1d3c      	adds	r4, r7, #4
 8012f38:	f003 f8be 	bl	80160b8 <_sfread_r>
 8012f3c:	2800      	cmp	r0, #0
 8012f3e:	f000 838d 	beq.w	801365c <__ssvfscanf_r+0xaa8>
 8012f42:	4480      	add	r8, r0
 8012f44:	e108      	b.n	8013158 <__ssvfscanf_r+0x5a4>
 8012f46:	2e00      	cmp	r6, #0
 8012f48:	bf08      	it	eq
 8012f4a:	f04f 36ff 	moveq.w	r6, #4294967295
 8012f4e:	06e2      	lsls	r2, r4, #27
 8012f50:	d51f      	bpl.n	8012f92 <__ssvfscanf_r+0x3de>
 8012f52:	46b2      	mov	sl, r6
 8012f54:	2400      	movs	r4, #0
 8012f56:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8012f5a:	682b      	ldr	r3, [r5, #0]
 8012f5c:	781a      	ldrb	r2, [r3, #0]
 8012f5e:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8012f62:	b192      	cbz	r2, 8012f8a <__ssvfscanf_r+0x3d6>
 8012f64:	686a      	ldr	r2, [r5, #4]
 8012f66:	3401      	adds	r4, #1
 8012f68:	3a01      	subs	r2, #1
 8012f6a:	3301      	adds	r3, #1
 8012f6c:	42a6      	cmp	r6, r4
 8012f6e:	606a      	str	r2, [r5, #4]
 8012f70:	602b      	str	r3, [r5, #0]
 8012f72:	f000 80ca 	beq.w	801310a <__ssvfscanf_r+0x556>
 8012f76:	2a00      	cmp	r2, #0
 8012f78:	dcef      	bgt.n	8012f5a <__ssvfscanf_r+0x3a6>
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	4648      	mov	r0, r9
 8012f7e:	f003 f87e 	bl	801607e <__ssrefill_r>
 8012f82:	2800      	cmp	r0, #0
 8012f84:	d0e9      	beq.n	8012f5a <__ssvfscanf_r+0x3a6>
 8012f86:	46a2      	mov	sl, r4
 8012f88:	e0bf      	b.n	801310a <__ssvfscanf_r+0x556>
 8012f8a:	2c00      	cmp	r4, #0
 8012f8c:	f040 80be 	bne.w	801310c <__ssvfscanf_r+0x558>
 8012f90:	e36f      	b.n	8013672 <__ssvfscanf_r+0xabe>
 8012f92:	683c      	ldr	r4, [r7, #0]
 8012f94:	f107 0a04 	add.w	sl, r7, #4
 8012f98:	4426      	add	r6, r4
 8012f9a:	4627      	mov	r7, r4
 8012f9c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8012fa0:	682b      	ldr	r3, [r5, #0]
 8012fa2:	781a      	ldrb	r2, [r3, #0]
 8012fa4:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8012fa8:	b1aa      	cbz	r2, 8012fd6 <__ssvfscanf_r+0x422>
 8012faa:	686a      	ldr	r2, [r5, #4]
 8012fac:	3a01      	subs	r2, #1
 8012fae:	606a      	str	r2, [r5, #4]
 8012fb0:	1c5a      	adds	r2, r3, #1
 8012fb2:	602a      	str	r2, [r5, #0]
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	f807 3b01 	strb.w	r3, [r7], #1
 8012fba:	42be      	cmp	r6, r7
 8012fbc:	d00c      	beq.n	8012fd8 <__ssvfscanf_r+0x424>
 8012fbe:	686b      	ldr	r3, [r5, #4]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	dced      	bgt.n	8012fa0 <__ssvfscanf_r+0x3ec>
 8012fc4:	4629      	mov	r1, r5
 8012fc6:	4648      	mov	r0, r9
 8012fc8:	f003 f859 	bl	801607e <__ssrefill_r>
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d0e7      	beq.n	8012fa0 <__ssvfscanf_r+0x3ec>
 8012fd0:	42bc      	cmp	r4, r7
 8012fd2:	f000 8343 	beq.w	801365c <__ssvfscanf_r+0xaa8>
 8012fd6:	463e      	mov	r6, r7
 8012fd8:	1b34      	subs	r4, r6, r4
 8012fda:	f000 834a 	beq.w	8013672 <__ssvfscanf_r+0xabe>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	7033      	strb	r3, [r6, #0]
 8012fe2:	9b03      	ldr	r3, [sp, #12]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	9303      	str	r3, [sp, #12]
 8012fe8:	4657      	mov	r7, sl
 8012fea:	e08f      	b.n	801310c <__ssvfscanf_r+0x558>
 8012fec:	2e00      	cmp	r6, #0
 8012fee:	bf08      	it	eq
 8012ff0:	f04f 36ff 	moveq.w	r6, #4294967295
 8012ff4:	f014 0301 	ands.w	r3, r4, #1
 8012ff8:	f004 0410 	and.w	r4, r4, #16
 8012ffc:	d06a      	beq.n	80130d4 <__ssvfscanf_r+0x520>
 8012ffe:	2208      	movs	r2, #8
 8013000:	2100      	movs	r1, #0
 8013002:	a810      	add	r0, sp, #64	; 0x40
 8013004:	f7fe fd28 	bl	8011a58 <memset>
 8013008:	b91c      	cbnz	r4, 8013012 <__ssvfscanf_r+0x45e>
 801300a:	f8d7 b000 	ldr.w	fp, [r7]
 801300e:	3704      	adds	r7, #4
 8013010:	e001      	b.n	8013016 <__ssvfscanf_r+0x462>
 8013012:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 8013016:	2300      	movs	r3, #0
 8013018:	682a      	ldr	r2, [r5, #0]
 801301a:	49a5      	ldr	r1, [pc, #660]	; (80132b0 <__ssvfscanf_r+0x6fc>)
 801301c:	7812      	ldrb	r2, [r2, #0]
 801301e:	6809      	ldr	r1, [r1, #0]
 8013020:	440a      	add	r2, r1
 8013022:	7852      	ldrb	r2, [r2, #1]
 8013024:	0711      	lsls	r1, r2, #28
 8013026:	d44d      	bmi.n	80130c4 <__ssvfscanf_r+0x510>
 8013028:	2e00      	cmp	r6, #0
 801302a:	d04b      	beq.n	80130c4 <__ssvfscanf_r+0x510>
 801302c:	9307      	str	r3, [sp, #28]
 801302e:	f001 fa85 	bl	801453c <__locale_mb_cur_max>
 8013032:	9b07      	ldr	r3, [sp, #28]
 8013034:	4283      	cmp	r3, r0
 8013036:	f000 8311 	beq.w	801365c <__ssvfscanf_r+0xaa8>
 801303a:	682a      	ldr	r2, [r5, #0]
 801303c:	a852      	add	r0, sp, #328	; 0x148
 801303e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013042:	54c1      	strb	r1, [r0, r3]
 8013044:	f103 0a01 	add.w	sl, r3, #1
 8013048:	686b      	ldr	r3, [r5, #4]
 801304a:	3b01      	subs	r3, #1
 801304c:	e885 000c 	stmia.w	r5, {r2, r3}
 8013050:	ab10      	add	r3, sp, #64	; 0x40
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	4602      	mov	r2, r0
 8013056:	4653      	mov	r3, sl
 8013058:	4659      	mov	r1, fp
 801305a:	4648      	mov	r0, r9
 801305c:	f001 fa78 	bl	8014550 <_mbrtowc_r>
 8013060:	1c43      	adds	r3, r0, #1
 8013062:	f000 82fb 	beq.w	801365c <__ssvfscanf_r+0xaa8>
 8013066:	b910      	cbnz	r0, 801306e <__ssvfscanf_r+0x4ba>
 8013068:	f8cb 0000 	str.w	r0, [fp]
 801306c:	e001      	b.n	8013072 <__ssvfscanf_r+0x4be>
 801306e:	3002      	adds	r0, #2
 8013070:	d019      	beq.n	80130a6 <__ssvfscanf_r+0x4f2>
 8013072:	f8db 0000 	ldr.w	r0, [fp]
 8013076:	f001 fa4f 	bl	8014518 <iswspace>
 801307a:	b160      	cbz	r0, 8013096 <__ssvfscanf_r+0x4e2>
 801307c:	ae52      	add	r6, sp, #328	; 0x148
 801307e:	f1ba 0f00 	cmp.w	sl, #0
 8013082:	d01f      	beq.n	80130c4 <__ssvfscanf_r+0x510>
 8013084:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013088:	462a      	mov	r2, r5
 801308a:	f816 100a 	ldrb.w	r1, [r6, sl]
 801308e:	4648      	mov	r0, r9
 8013090:	f002 ffb7 	bl	8016002 <_sungetc_r>
 8013094:	e7f3      	b.n	801307e <__ssvfscanf_r+0x4ca>
 8013096:	44d0      	add	r8, sl
 8013098:	3e01      	subs	r6, #1
 801309a:	b91c      	cbnz	r4, 80130a4 <__ssvfscanf_r+0x4f0>
 801309c:	f10b 0b04 	add.w	fp, fp, #4
 80130a0:	46a2      	mov	sl, r4
 80130a2:	e000      	b.n	80130a6 <__ssvfscanf_r+0x4f2>
 80130a4:	4682      	mov	sl, r0
 80130a6:	686b      	ldr	r3, [r5, #4]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	dc09      	bgt.n	80130c0 <__ssvfscanf_r+0x50c>
 80130ac:	4629      	mov	r1, r5
 80130ae:	4648      	mov	r0, r9
 80130b0:	f002 ffe5 	bl	801607e <__ssrefill_r>
 80130b4:	b120      	cbz	r0, 80130c0 <__ssvfscanf_r+0x50c>
 80130b6:	f1ba 0f00 	cmp.w	sl, #0
 80130ba:	f040 82cf 	bne.w	801365c <__ssvfscanf_r+0xaa8>
 80130be:	e001      	b.n	80130c4 <__ssvfscanf_r+0x510>
 80130c0:	4653      	mov	r3, sl
 80130c2:	e7a9      	b.n	8013018 <__ssvfscanf_r+0x464>
 80130c4:	2c00      	cmp	r4, #0
 80130c6:	f47f ad8d 	bne.w	8012be4 <__ssvfscanf_r+0x30>
 80130ca:	f8cb 4000 	str.w	r4, [fp]
 80130ce:	9b03      	ldr	r3, [sp, #12]
 80130d0:	3301      	adds	r3, #1
 80130d2:	e586      	b.n	8012be2 <__ssvfscanf_r+0x2e>
 80130d4:	b1e4      	cbz	r4, 8013110 <__ssvfscanf_r+0x55c>
 80130d6:	461c      	mov	r4, r3
 80130d8:	682b      	ldr	r3, [r5, #0]
 80130da:	4975      	ldr	r1, [pc, #468]	; (80132b0 <__ssvfscanf_r+0x6fc>)
 80130dc:	781a      	ldrb	r2, [r3, #0]
 80130de:	6809      	ldr	r1, [r1, #0]
 80130e0:	440a      	add	r2, r1
 80130e2:	7852      	ldrb	r2, [r2, #1]
 80130e4:	0712      	lsls	r2, r2, #28
 80130e6:	d411      	bmi.n	801310c <__ssvfscanf_r+0x558>
 80130e8:	686a      	ldr	r2, [r5, #4]
 80130ea:	3401      	adds	r4, #1
 80130ec:	3a01      	subs	r2, #1
 80130ee:	3301      	adds	r3, #1
 80130f0:	42b4      	cmp	r4, r6
 80130f2:	606a      	str	r2, [r5, #4]
 80130f4:	602b      	str	r3, [r5, #0]
 80130f6:	d009      	beq.n	801310c <__ssvfscanf_r+0x558>
 80130f8:	2a00      	cmp	r2, #0
 80130fa:	dced      	bgt.n	80130d8 <__ssvfscanf_r+0x524>
 80130fc:	4629      	mov	r1, r5
 80130fe:	4648      	mov	r0, r9
 8013100:	f002 ffbd 	bl	801607e <__ssrefill_r>
 8013104:	2800      	cmp	r0, #0
 8013106:	d0e7      	beq.n	80130d8 <__ssvfscanf_r+0x524>
 8013108:	e000      	b.n	801310c <__ssvfscanf_r+0x558>
 801310a:	4654      	mov	r4, sl
 801310c:	44a0      	add	r8, r4
 801310e:	e569      	b.n	8012be4 <__ssvfscanf_r+0x30>
 8013110:	1d3c      	adds	r4, r7, #4
 8013112:	683f      	ldr	r7, [r7, #0]
 8013114:	443e      	add	r6, r7
 8013116:	46ba      	mov	sl, r7
 8013118:	6829      	ldr	r1, [r5, #0]
 801311a:	4a65      	ldr	r2, [pc, #404]	; (80132b0 <__ssvfscanf_r+0x6fc>)
 801311c:	780b      	ldrb	r3, [r1, #0]
 801311e:	6812      	ldr	r2, [r2, #0]
 8013120:	4413      	add	r3, r2
 8013122:	785b      	ldrb	r3, [r3, #1]
 8013124:	071b      	lsls	r3, r3, #28
 8013126:	d412      	bmi.n	801314e <__ssvfscanf_r+0x59a>
 8013128:	686b      	ldr	r3, [r5, #4]
 801312a:	3b01      	subs	r3, #1
 801312c:	606b      	str	r3, [r5, #4]
 801312e:	1c4b      	adds	r3, r1, #1
 8013130:	602b      	str	r3, [r5, #0]
 8013132:	780b      	ldrb	r3, [r1, #0]
 8013134:	f80a 3b01 	strb.w	r3, [sl], #1
 8013138:	4556      	cmp	r6, sl
 801313a:	d009      	beq.n	8013150 <__ssvfscanf_r+0x59c>
 801313c:	686b      	ldr	r3, [r5, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	dcea      	bgt.n	8013118 <__ssvfscanf_r+0x564>
 8013142:	4629      	mov	r1, r5
 8013144:	4648      	mov	r0, r9
 8013146:	f002 ff9a 	bl	801607e <__ssrefill_r>
 801314a:	2800      	cmp	r0, #0
 801314c:	d0e4      	beq.n	8013118 <__ssvfscanf_r+0x564>
 801314e:	4656      	mov	r6, sl
 8013150:	2300      	movs	r3, #0
 8013152:	7033      	strb	r3, [r6, #0]
 8013154:	1bf6      	subs	r6, r6, r7
 8013156:	44b0      	add	r8, r6
 8013158:	9b03      	ldr	r3, [sp, #12]
 801315a:	3301      	adds	r3, #1
 801315c:	9303      	str	r3, [sp, #12]
 801315e:	4627      	mov	r7, r4
 8013160:	e540      	b.n	8012be4 <__ssvfscanf_r+0x30>
 8013162:	1e73      	subs	r3, r6, #1
 8013164:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8013168:	bf88      	it	hi
 801316a:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 801316e:	4a51      	ldr	r2, [pc, #324]	; (80132b4 <__ssvfscanf_r+0x700>)
 8013170:	bf8a      	itet	hi
 8013172:	eb06 030c 	addhi.w	r3, r6, ip
 8013176:	2300      	movls	r3, #0
 8013178:	f240 165d 	movwhi	r6, #349	; 0x15d
 801317c:	f444 6458 	orr.w	r4, r4, #3456	; 0xd80
 8013180:	f04f 0b00 	mov.w	fp, #0
 8013184:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8013188:	f8d5 c000 	ldr.w	ip, [r5]
 801318c:	f89c 1000 	ldrb.w	r1, [ip]
 8013190:	2939      	cmp	r1, #57	; 0x39
 8013192:	d809      	bhi.n	80131a8 <__ssvfscanf_r+0x5f4>
 8013194:	2938      	cmp	r1, #56	; 0x38
 8013196:	d231      	bcs.n	80131fc <__ssvfscanf_r+0x648>
 8013198:	2930      	cmp	r1, #48	; 0x30
 801319a:	d015      	beq.n	80131c8 <__ssvfscanf_r+0x614>
 801319c:	d829      	bhi.n	80131f2 <__ssvfscanf_r+0x63e>
 801319e:	292b      	cmp	r1, #43	; 0x2b
 80131a0:	d038      	beq.n	8013214 <__ssvfscanf_r+0x660>
 80131a2:	292d      	cmp	r1, #45	; 0x2d
 80131a4:	d036      	beq.n	8013214 <__ssvfscanf_r+0x660>
 80131a6:	e05d      	b.n	8013264 <__ssvfscanf_r+0x6b0>
 80131a8:	2958      	cmp	r1, #88	; 0x58
 80131aa:	d038      	beq.n	801321e <__ssvfscanf_r+0x66a>
 80131ac:	d805      	bhi.n	80131ba <__ssvfscanf_r+0x606>
 80131ae:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 80131b2:	f1be 0f05 	cmp.w	lr, #5
 80131b6:	d927      	bls.n	8013208 <__ssvfscanf_r+0x654>
 80131b8:	e054      	b.n	8013264 <__ssvfscanf_r+0x6b0>
 80131ba:	2961      	cmp	r1, #97	; 0x61
 80131bc:	d352      	bcc.n	8013264 <__ssvfscanf_r+0x6b0>
 80131be:	2966      	cmp	r1, #102	; 0x66
 80131c0:	d922      	bls.n	8013208 <__ssvfscanf_r+0x654>
 80131c2:	2978      	cmp	r1, #120	; 0x78
 80131c4:	d02b      	beq.n	801321e <__ssvfscanf_r+0x66a>
 80131c6:	e04d      	b.n	8013264 <__ssvfscanf_r+0x6b0>
 80131c8:	0520      	lsls	r0, r4, #20
 80131ca:	d533      	bpl.n	8013234 <__ssvfscanf_r+0x680>
 80131cc:	9804      	ldr	r0, [sp, #16]
 80131ce:	b918      	cbnz	r0, 80131d8 <__ssvfscanf_r+0x624>
 80131d0:	2008      	movs	r0, #8
 80131d2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80131d6:	9004      	str	r0, [sp, #16]
 80131d8:	0560      	lsls	r0, r4, #21
 80131da:	d502      	bpl.n	80131e2 <__ssvfscanf_r+0x62e>
 80131dc:	f424 64b0 	bic.w	r4, r4, #1408	; 0x580
 80131e0:	e028      	b.n	8013234 <__ssvfscanf_r+0x680>
 80131e2:	f424 7460 	bic.w	r4, r4, #896	; 0x380
 80131e6:	b10b      	cbz	r3, 80131ec <__ssvfscanf_r+0x638>
 80131e8:	3b01      	subs	r3, #1
 80131ea:	3601      	adds	r6, #1
 80131ec:	f10b 0b01 	add.w	fp, fp, #1
 80131f0:	e024      	b.n	801323c <__ssvfscanf_r+0x688>
 80131f2:	9804      	ldr	r0, [sp, #16]
 80131f4:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 80131f8:	9004      	str	r0, [sp, #16]
 80131fa:	e008      	b.n	801320e <__ssvfscanf_r+0x65a>
 80131fc:	9804      	ldr	r0, [sp, #16]
 80131fe:	f932 0010 	ldrsh.w	r0, [r2, r0, lsl #1]
 8013202:	9004      	str	r0, [sp, #16]
 8013204:	2808      	cmp	r0, #8
 8013206:	e001      	b.n	801320c <__ssvfscanf_r+0x658>
 8013208:	9804      	ldr	r0, [sp, #16]
 801320a:	280a      	cmp	r0, #10
 801320c:	dd2a      	ble.n	8013264 <__ssvfscanf_r+0x6b0>
 801320e:	f424 6438 	bic.w	r4, r4, #2944	; 0xb80
 8013212:	e00f      	b.n	8013234 <__ssvfscanf_r+0x680>
 8013214:	0620      	lsls	r0, r4, #24
 8013216:	d525      	bpl.n	8013264 <__ssvfscanf_r+0x6b0>
 8013218:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 801321c:	e00a      	b.n	8013234 <__ssvfscanf_r+0x680>
 801321e:	f404 6ec0 	and.w	lr, r4, #1536	; 0x600
 8013222:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 8013226:	d11d      	bne.n	8013264 <__ssvfscanf_r+0x6b0>
 8013228:	f424 7400 	bic.w	r4, r4, #512	; 0x200
 801322c:	2010      	movs	r0, #16
 801322e:	f444 64a0 	orr.w	r4, r4, #1280	; 0x500
 8013232:	9004      	str	r0, [sp, #16]
 8013234:	f88a 1000 	strb.w	r1, [sl]
 8013238:	f10a 0a01 	add.w	sl, sl, #1
 801323c:	6869      	ldr	r1, [r5, #4]
 801323e:	3901      	subs	r1, #1
 8013240:	2900      	cmp	r1, #0
 8013242:	6069      	str	r1, [r5, #4]
 8013244:	dd03      	ble.n	801324e <__ssvfscanf_r+0x69a>
 8013246:	f10c 0001 	add.w	r0, ip, #1
 801324a:	6028      	str	r0, [r5, #0]
 801324c:	e008      	b.n	8013260 <__ssvfscanf_r+0x6ac>
 801324e:	4629      	mov	r1, r5
 8013250:	4648      	mov	r0, r9
 8013252:	9208      	str	r2, [sp, #32]
 8013254:	9307      	str	r3, [sp, #28]
 8013256:	f002 ff12 	bl	801607e <__ssrefill_r>
 801325a:	9b07      	ldr	r3, [sp, #28]
 801325c:	9a08      	ldr	r2, [sp, #32]
 801325e:	b908      	cbnz	r0, 8013264 <__ssvfscanf_r+0x6b0>
 8013260:	3e01      	subs	r6, #1
 8013262:	d191      	bne.n	8013188 <__ssvfscanf_r+0x5d4>
 8013264:	05e3      	lsls	r3, r4, #23
 8013266:	d50f      	bpl.n	8013288 <__ssvfscanf_r+0x6d4>
 8013268:	ab52      	add	r3, sp, #328	; 0x148
 801326a:	459a      	cmp	sl, r3
 801326c:	d908      	bls.n	8013280 <__ssvfscanf_r+0x6cc>
 801326e:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
 8013272:	462a      	mov	r2, r5
 8013274:	4648      	mov	r0, r9
 8013276:	f002 fec4 	bl	8016002 <_sungetc_r>
 801327a:	f10a 36ff 	add.w	r6, sl, #4294967295
 801327e:	46b2      	mov	sl, r6
 8013280:	ab52      	add	r3, sp, #328	; 0x148
 8013282:	459a      	cmp	sl, r3
 8013284:	f000 81f5 	beq.w	8013672 <__ssvfscanf_r+0xabe>
 8013288:	f014 0210 	ands.w	r2, r4, #16
 801328c:	d130      	bne.n	80132f0 <__ssvfscanf_r+0x73c>
 801328e:	9b04      	ldr	r3, [sp, #16]
 8013290:	9e05      	ldr	r6, [sp, #20]
 8013292:	f88a 2000 	strb.w	r2, [sl]
 8013296:	a952      	add	r1, sp, #328	; 0x148
 8013298:	4648      	mov	r0, r9
 801329a:	47b0      	blx	r6
 801329c:	f014 0f20 	tst.w	r4, #32
 80132a0:	f107 0304 	add.w	r3, r7, #4
 80132a4:	d11e      	bne.n	80132e4 <__ssvfscanf_r+0x730>
 80132a6:	0766      	lsls	r6, r4, #29
 80132a8:	d506      	bpl.n	80132b8 <__ssvfscanf_r+0x704>
 80132aa:	683a      	ldr	r2, [r7, #0]
 80132ac:	8010      	strh	r0, [r2, #0]
 80132ae:	e01b      	b.n	80132e8 <__ssvfscanf_r+0x734>
 80132b0:	2001008c 	.word	0x2001008c
 80132b4:	0802fd74 	.word	0x0802fd74
 80132b8:	f014 0201 	ands.w	r2, r4, #1
 80132bc:	d112      	bne.n	80132e4 <__ssvfscanf_r+0x730>
 80132be:	07a1      	lsls	r1, r4, #30
 80132c0:	d510      	bpl.n	80132e4 <__ssvfscanf_r+0x730>
 80132c2:	4bac      	ldr	r3, [pc, #688]	; (8013574 <__ssvfscanf_r+0x9c0>)
 80132c4:	9905      	ldr	r1, [sp, #20]
 80132c6:	4299      	cmp	r1, r3
 80132c8:	4648      	mov	r0, r9
 80132ca:	9b04      	ldr	r3, [sp, #16]
 80132cc:	a952      	add	r1, sp, #328	; 0x148
 80132ce:	d102      	bne.n	80132d6 <__ssvfscanf_r+0x722>
 80132d0:	f002 fd6e 	bl	8015db0 <_strtoull_r>
 80132d4:	e001      	b.n	80132da <__ssvfscanf_r+0x726>
 80132d6:	f002 fc3d 	bl	8015b54 <_strtoll_r>
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	3704      	adds	r7, #4
 80132de:	e9c3 0100 	strd	r0, r1, [r3]
 80132e2:	e002      	b.n	80132ea <__ssvfscanf_r+0x736>
 80132e4:	683a      	ldr	r2, [r7, #0]
 80132e6:	6010      	str	r0, [r2, #0]
 80132e8:	461f      	mov	r7, r3
 80132ea:	9b03      	ldr	r3, [sp, #12]
 80132ec:	3301      	adds	r3, #1
 80132ee:	9303      	str	r3, [sp, #12]
 80132f0:	ab52      	add	r3, sp, #328	; 0x148
 80132f2:	ebc3 0a0a 	rsb	sl, r3, sl
 80132f6:	44da      	add	sl, fp
 80132f8:	44d0      	add	r8, sl
 80132fa:	e473      	b.n	8012be4 <__ssvfscanf_r+0x30>
 80132fc:	4648      	mov	r0, r9
 80132fe:	f001 f923 	bl	8014548 <_localeconv_r>
 8013302:	6803      	ldr	r3, [r0, #0]
 8013304:	930b      	str	r3, [sp, #44]	; 0x2c
 8013306:	1e73      	subs	r3, r6, #1
 8013308:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801330c:	bf88      	it	hi
 801330e:	f46f 7cae 	mvnhi.w	ip, #348	; 0x15c
 8013312:	f04f 0a00 	mov.w	sl, #0
 8013316:	bf8b      	itete	hi
 8013318:	eb06 030c 	addhi.w	r3, r6, ip
 801331c:	2300      	movls	r3, #0
 801331e:	9307      	strhi	r3, [sp, #28]
 8013320:	9307      	strls	r3, [sp, #28]
 8013322:	bf88      	it	hi
 8013324:	f240 165d 	movwhi	r6, #349	; 0x15d
 8013328:	f444 64f0 	orr.w	r4, r4, #1920	; 0x780
 801332c:	4652      	mov	r2, sl
 801332e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8013332:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8013336:	4653      	mov	r3, sl
 8013338:	f8cd a020 	str.w	sl, [sp, #32]
 801333c:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8013340:	f8d5 c000 	ldr.w	ip, [r5]
 8013344:	f89c 1000 	ldrb.w	r1, [ip]
 8013348:	294e      	cmp	r1, #78	; 0x4e
 801334a:	d048      	beq.n	80133de <__ssvfscanf_r+0x82a>
 801334c:	d815      	bhi.n	801337a <__ssvfscanf_r+0x7c6>
 801334e:	2939      	cmp	r1, #57	; 0x39
 8013350:	d809      	bhi.n	8013366 <__ssvfscanf_r+0x7b2>
 8013352:	2931      	cmp	r1, #49	; 0x31
 8013354:	d236      	bcs.n	80133c4 <__ssvfscanf_r+0x810>
 8013356:	292d      	cmp	r1, #45	; 0x2d
 8013358:	d03b      	beq.n	80133d2 <__ssvfscanf_r+0x81e>
 801335a:	2930      	cmp	r1, #48	; 0x30
 801335c:	d026      	beq.n	80133ac <__ssvfscanf_r+0x7f8>
 801335e:	292b      	cmp	r1, #43	; 0x2b
 8013360:	f040 8097 	bne.w	8013492 <__ssvfscanf_r+0x8de>
 8013364:	e035      	b.n	80133d2 <__ssvfscanf_r+0x81e>
 8013366:	2945      	cmp	r1, #69	; 0x45
 8013368:	d07c      	beq.n	8013464 <__ssvfscanf_r+0x8b0>
 801336a:	d802      	bhi.n	8013372 <__ssvfscanf_r+0x7be>
 801336c:	2941      	cmp	r1, #65	; 0x41
 801336e:	d049      	beq.n	8013404 <__ssvfscanf_r+0x850>
 8013370:	e08f      	b.n	8013492 <__ssvfscanf_r+0x8de>
 8013372:	2946      	cmp	r1, #70	; 0x46
 8013374:	d064      	beq.n	8013440 <__ssvfscanf_r+0x88c>
 8013376:	2949      	cmp	r1, #73	; 0x49
 8013378:	e011      	b.n	801339e <__ssvfscanf_r+0x7ea>
 801337a:	2966      	cmp	r1, #102	; 0x66
 801337c:	d060      	beq.n	8013440 <__ssvfscanf_r+0x88c>
 801337e:	d80a      	bhi.n	8013396 <__ssvfscanf_r+0x7e2>
 8013380:	2959      	cmp	r1, #89	; 0x59
 8013382:	d069      	beq.n	8013458 <__ssvfscanf_r+0x8a4>
 8013384:	d802      	bhi.n	801338c <__ssvfscanf_r+0x7d8>
 8013386:	2954      	cmp	r1, #84	; 0x54
 8013388:	d060      	beq.n	801344c <__ssvfscanf_r+0x898>
 801338a:	e082      	b.n	8013492 <__ssvfscanf_r+0x8de>
 801338c:	2961      	cmp	r1, #97	; 0x61
 801338e:	d039      	beq.n	8013404 <__ssvfscanf_r+0x850>
 8013390:	2965      	cmp	r1, #101	; 0x65
 8013392:	d067      	beq.n	8013464 <__ssvfscanf_r+0x8b0>
 8013394:	e07d      	b.n	8013492 <__ssvfscanf_r+0x8de>
 8013396:	296e      	cmp	r1, #110	; 0x6e
 8013398:	d021      	beq.n	80133de <__ssvfscanf_r+0x82a>
 801339a:	d802      	bhi.n	80133a2 <__ssvfscanf_r+0x7ee>
 801339c:	2969      	cmp	r1, #105	; 0x69
 801339e:	d035      	beq.n	801340c <__ssvfscanf_r+0x858>
 80133a0:	e077      	b.n	8013492 <__ssvfscanf_r+0x8de>
 80133a2:	2974      	cmp	r1, #116	; 0x74
 80133a4:	d052      	beq.n	801344c <__ssvfscanf_r+0x898>
 80133a6:	2979      	cmp	r1, #121	; 0x79
 80133a8:	d056      	beq.n	8013458 <__ssvfscanf_r+0x8a4>
 80133aa:	e072      	b.n	8013492 <__ssvfscanf_r+0x8de>
 80133ac:	05e0      	lsls	r0, r4, #23
 80133ae:	d509      	bpl.n	80133c4 <__ssvfscanf_r+0x810>
 80133b0:	9907      	ldr	r1, [sp, #28]
 80133b2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80133b6:	3301      	adds	r3, #1
 80133b8:	2900      	cmp	r1, #0
 80133ba:	d07a      	beq.n	80134b2 <__ssvfscanf_r+0x8fe>
 80133bc:	3901      	subs	r1, #1
 80133be:	9107      	str	r1, [sp, #28]
 80133c0:	3601      	adds	r6, #1
 80133c2:	e076      	b.n	80134b2 <__ssvfscanf_r+0x8fe>
 80133c4:	eb12 0f0a 	cmn.w	r2, sl
 80133c8:	f040 808c 	bne.w	80134e4 <__ssvfscanf_r+0x930>
 80133cc:	f424 74c0 	bic.w	r4, r4, #384	; 0x180
 80133d0:	e06b      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 80133d2:	0620      	lsls	r0, r4, #24
 80133d4:	f140 8086 	bpl.w	80134e4 <__ssvfscanf_r+0x930>
 80133d8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80133dc:	e065      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 80133de:	b94a      	cbnz	r2, 80133f4 <__ssvfscanf_r+0x840>
 80133e0:	b953      	cbnz	r3, 80133f8 <__ssvfscanf_r+0x844>
 80133e2:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 80133e6:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 80133ea:	d105      	bne.n	80133f8 <__ssvfscanf_r+0x844>
 80133ec:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 80133f0:	2201      	movs	r2, #1
 80133f2:	e05a      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 80133f4:	2a02      	cmp	r2, #2
 80133f6:	d057      	beq.n	80134a8 <__ssvfscanf_r+0x8f4>
 80133f8:	f1ba 0f01 	cmp.w	sl, #1
 80133fc:	d01b      	beq.n	8013436 <__ssvfscanf_r+0x882>
 80133fe:	f1ba 0f04 	cmp.w	sl, #4
 8013402:	e017      	b.n	8013434 <__ssvfscanf_r+0x880>
 8013404:	2a01      	cmp	r2, #1
 8013406:	d16d      	bne.n	80134e4 <__ssvfscanf_r+0x930>
 8013408:	2202      	movs	r2, #2
 801340a:	e04e      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 801340c:	f1ba 0f00 	cmp.w	sl, #0
 8013410:	d10b      	bne.n	801342a <__ssvfscanf_r+0x876>
 8013412:	2b00      	cmp	r3, #0
 8013414:	d167      	bne.n	80134e6 <__ssvfscanf_r+0x932>
 8013416:	f404 6ee0 	and.w	lr, r4, #1792	; 0x700
 801341a:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
 801341e:	d164      	bne.n	80134ea <__ssvfscanf_r+0x936>
 8013420:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 8013424:	f04f 0a01 	mov.w	sl, #1
 8013428:	e03f      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 801342a:	f1ba 0f03 	cmp.w	sl, #3
 801342e:	d002      	beq.n	8013436 <__ssvfscanf_r+0x882>
 8013430:	f1ba 0f05 	cmp.w	sl, #5
 8013434:	d156      	bne.n	80134e4 <__ssvfscanf_r+0x930>
 8013436:	f10a 0a01 	add.w	sl, sl, #1
 801343a:	fa5f fa8a 	uxtb.w	sl, sl
 801343e:	e034      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 8013440:	f1ba 0f02 	cmp.w	sl, #2
 8013444:	d14e      	bne.n	80134e4 <__ssvfscanf_r+0x930>
 8013446:	f04f 0a03 	mov.w	sl, #3
 801344a:	e02e      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 801344c:	f1ba 0f06 	cmp.w	sl, #6
 8013450:	d148      	bne.n	80134e4 <__ssvfscanf_r+0x930>
 8013452:	f04f 0a07 	mov.w	sl, #7
 8013456:	e028      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 8013458:	f1ba 0f07 	cmp.w	sl, #7
 801345c:	d142      	bne.n	80134e4 <__ssvfscanf_r+0x930>
 801345e:	f04f 0a08 	mov.w	sl, #8
 8013462:	e022      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 8013464:	f404 6ea0 	and.w	lr, r4, #1280	; 0x500
 8013468:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 801346c:	d003      	beq.n	8013476 <__ssvfscanf_r+0x8c2>
 801346e:	0560      	lsls	r0, r4, #21
 8013470:	d538      	bpl.n	80134e4 <__ssvfscanf_r+0x930>
 8013472:	2b00      	cmp	r3, #0
 8013474:	d039      	beq.n	80134ea <__ssvfscanf_r+0x936>
 8013476:	05a0      	lsls	r0, r4, #22
 8013478:	bf5e      	ittt	pl
 801347a:	9808      	ldrpl	r0, [sp, #32]
 801347c:	f8cd b028 	strpl.w	fp, [sp, #40]	; 0x28
 8013480:	1a1b      	subpl	r3, r3, r0
 8013482:	f424 64f0 	bic.w	r4, r4, #1920	; 0x780
 8013486:	bf58      	it	pl
 8013488:	9309      	strpl	r3, [sp, #36]	; 0x24
 801348a:	f444 74c0 	orr.w	r4, r4, #384	; 0x180
 801348e:	2300      	movs	r3, #0
 8013490:	e00b      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 8013492:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013494:	f890 e000 	ldrb.w	lr, [r0]
 8013498:	4571      	cmp	r1, lr
 801349a:	d123      	bne.n	80134e4 <__ssvfscanf_r+0x930>
 801349c:	05a0      	lsls	r0, r4, #22
 801349e:	d521      	bpl.n	80134e4 <__ssvfscanf_r+0x930>
 80134a0:	f424 7420 	bic.w	r4, r4, #640	; 0x280
 80134a4:	9308      	str	r3, [sp, #32]
 80134a6:	e000      	b.n	80134aa <__ssvfscanf_r+0x8f6>
 80134a8:	2203      	movs	r2, #3
 80134aa:	f88b 1000 	strb.w	r1, [fp]
 80134ae:	f10b 0b01 	add.w	fp, fp, #1
 80134b2:	6869      	ldr	r1, [r5, #4]
 80134b4:	3901      	subs	r1, #1
 80134b6:	2900      	cmp	r1, #0
 80134b8:	f106 36ff 	add.w	r6, r6, #4294967295
 80134bc:	f108 0801 	add.w	r8, r8, #1
 80134c0:	6069      	str	r1, [r5, #4]
 80134c2:	dd03      	ble.n	80134cc <__ssvfscanf_r+0x918>
 80134c4:	f10c 0001 	add.w	r0, ip, #1
 80134c8:	6028      	str	r0, [r5, #0]
 80134ca:	e008      	b.n	80134de <__ssvfscanf_r+0x92a>
 80134cc:	4629      	mov	r1, r5
 80134ce:	4648      	mov	r0, r9
 80134d0:	920d      	str	r2, [sp, #52]	; 0x34
 80134d2:	930c      	str	r3, [sp, #48]	; 0x30
 80134d4:	f002 fdd3 	bl	801607e <__ssrefill_r>
 80134d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80134da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134dc:	b910      	cbnz	r0, 80134e4 <__ssvfscanf_r+0x930>
 80134de:	2e00      	cmp	r6, #0
 80134e0:	f47f af2e 	bne.w	8013340 <__ssvfscanf_r+0x78c>
 80134e4:	b10b      	cbz	r3, 80134ea <__ssvfscanf_r+0x936>
 80134e6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 80134ea:	3a01      	subs	r2, #1
 80134ec:	2a01      	cmp	r2, #1
 80134ee:	d80a      	bhi.n	8013506 <__ssvfscanf_r+0x952>
 80134f0:	ac52      	add	r4, sp, #328	; 0x148
 80134f2:	45a3      	cmp	fp, r4
 80134f4:	f240 80bd 	bls.w	8013672 <__ssvfscanf_r+0xabe>
 80134f8:	462a      	mov	r2, r5
 80134fa:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80134fe:	4648      	mov	r0, r9
 8013500:	f002 fd7f 	bl	8016002 <_sungetc_r>
 8013504:	e7f5      	b.n	80134f2 <__ssvfscanf_r+0x93e>
 8013506:	f10a 32ff 	add.w	r2, sl, #4294967295
 801350a:	2a06      	cmp	r2, #6
 801350c:	d822      	bhi.n	8013554 <__ssvfscanf_r+0x9a0>
 801350e:	f1ba 0f02 	cmp.w	sl, #2
 8013512:	d801      	bhi.n	8013518 <__ssvfscanf_r+0x964>
 8013514:	ac52      	add	r4, sp, #328	; 0x148
 8013516:	e013      	b.n	8013540 <__ssvfscanf_r+0x98c>
 8013518:	f1aa 0a03 	sub.w	sl, sl, #3
 801351c:	fa5f fa8a 	uxtb.w	sl, sl
 8013520:	ebca 060b 	rsb	r6, sl, fp
 8013524:	45b3      	cmp	fp, r6
 8013526:	d008      	beq.n	801353a <__ssvfscanf_r+0x986>
 8013528:	462a      	mov	r2, r5
 801352a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801352e:	9307      	str	r3, [sp, #28]
 8013530:	4648      	mov	r0, r9
 8013532:	f002 fd66 	bl	8016002 <_sungetc_r>
 8013536:	9b07      	ldr	r3, [sp, #28]
 8013538:	e7f4      	b.n	8013524 <__ssvfscanf_r+0x970>
 801353a:	ebca 0808 	rsb	r8, sl, r8
 801353e:	e009      	b.n	8013554 <__ssvfscanf_r+0x9a0>
 8013540:	45a3      	cmp	fp, r4
 8013542:	f240 8096 	bls.w	8013672 <__ssvfscanf_r+0xabe>
 8013546:	462a      	mov	r2, r5
 8013548:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801354c:	4648      	mov	r0, r9
 801354e:	f002 fd58 	bl	8016002 <_sungetc_r>
 8013552:	e7f5      	b.n	8013540 <__ssvfscanf_r+0x98c>
 8013554:	05e1      	lsls	r1, r4, #23
 8013556:	d52d      	bpl.n	80135b4 <__ssvfscanf_r+0xa00>
 8013558:	0562      	lsls	r2, r4, #21
 801355a:	d50d      	bpl.n	8013578 <__ssvfscanf_r+0x9c4>
 801355c:	ac52      	add	r4, sp, #328	; 0x148
 801355e:	45a3      	cmp	fp, r4
 8013560:	f240 8087 	bls.w	8013672 <__ssvfscanf_r+0xabe>
 8013564:	462a      	mov	r2, r5
 8013566:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801356a:	4648      	mov	r0, r9
 801356c:	f002 fd49 	bl	8016002 <_sungetc_r>
 8013570:	e7f5      	b.n	801355e <__ssvfscanf_r+0x9aa>
 8013572:	bf00      	nop
 8013574:	08015cb5 	.word	0x08015cb5
 8013578:	f81b 1c01 	ldrb.w	r1, [fp, #-1]
 801357c:	2965      	cmp	r1, #101	; 0x65
 801357e:	f10b 36ff 	add.w	r6, fp, #4294967295
 8013582:	f108 3aff 	add.w	sl, r8, #4294967295
 8013586:	d00d      	beq.n	80135a4 <__ssvfscanf_r+0x9f0>
 8013588:	2945      	cmp	r1, #69	; 0x45
 801358a:	d00b      	beq.n	80135a4 <__ssvfscanf_r+0x9f0>
 801358c:	462a      	mov	r2, r5
 801358e:	4648      	mov	r0, r9
 8013590:	9307      	str	r3, [sp, #28]
 8013592:	f002 fd36 	bl	8016002 <_sungetc_r>
 8013596:	f81b 1c02 	ldrb.w	r1, [fp, #-2]
 801359a:	9b07      	ldr	r3, [sp, #28]
 801359c:	f1ab 0602 	sub.w	r6, fp, #2
 80135a0:	f1a8 0a02 	sub.w	sl, r8, #2
 80135a4:	462a      	mov	r2, r5
 80135a6:	4648      	mov	r0, r9
 80135a8:	9307      	str	r3, [sp, #28]
 80135aa:	f002 fd2a 	bl	8016002 <_sungetc_r>
 80135ae:	9b07      	ldr	r3, [sp, #28]
 80135b0:	46d0      	mov	r8, sl
 80135b2:	46b3      	mov	fp, r6
 80135b4:	f014 0210 	ands.w	r2, r4, #16
 80135b8:	f47f ab14 	bne.w	8012be4 <__ssvfscanf_r+0x30>
 80135bc:	f404 61c0 	and.w	r1, r4, #1536	; 0x600
 80135c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80135c4:	f88b 2000 	strb.w	r2, [fp]
 80135c8:	d104      	bne.n	80135d4 <__ssvfscanf_r+0xa20>
 80135ca:	9a08      	ldr	r2, [sp, #32]
 80135cc:	1a9b      	subs	r3, r3, r2
 80135ce:	425a      	negs	r2, r3
 80135d0:	b963      	cbnz	r3, 80135ec <__ssvfscanf_r+0xa38>
 80135d2:	e015      	b.n	8013600 <__ssvfscanf_r+0xa4c>
 80135d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135d6:	b19b      	cbz	r3, 8013600 <__ssvfscanf_r+0xa4c>
 80135d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80135da:	230a      	movs	r3, #10
 80135dc:	3101      	adds	r1, #1
 80135de:	4648      	mov	r0, r9
 80135e0:	f002 fa32 	bl	8015a48 <_strtol_r>
 80135e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135e6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80135ea:	1ac2      	subs	r2, r0, r3
 80135ec:	f20d 239b 	addw	r3, sp, #667	; 0x29b
 80135f0:	459b      	cmp	fp, r3
 80135f2:	bf28      	it	cs
 80135f4:	f20d 2b9a 	addwcs	fp, sp, #666	; 0x29a
 80135f8:	4923      	ldr	r1, [pc, #140]	; (8013688 <__ssvfscanf_r+0xad4>)
 80135fa:	4658      	mov	r0, fp
 80135fc:	f7fe fa80 	bl	8011b00 <sprintf>
 8013600:	2200      	movs	r2, #0
 8013602:	a952      	add	r1, sp, #328	; 0x148
 8013604:	4648      	mov	r0, r9
 8013606:	f001 fc1f 	bl	8014e48 <_strtod_r>
 801360a:	f014 0f01 	tst.w	r4, #1
 801360e:	ec5b ab10 	vmov	sl, fp, d0
 8013612:	f107 0604 	add.w	r6, r7, #4
 8013616:	d102      	bne.n	801361e <__ssvfscanf_r+0xa6a>
 8013618:	f014 0402 	ands.w	r4, r4, #2
 801361c:	d003      	beq.n	8013626 <__ssvfscanf_r+0xa72>
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	e9c3 ab00 	strd	sl, fp, [r3]
 8013624:	e014      	b.n	8013650 <__ssvfscanf_r+0xa9c>
 8013626:	ee10 2a10 	vmov	r2, s0
 801362a:	465b      	mov	r3, fp
 801362c:	ee10 0a10 	vmov	r0, s0
 8013630:	4659      	mov	r1, fp
 8013632:	683f      	ldr	r7, [r7, #0]
 8013634:	f7ed faf6 	bl	8000c24 <__aeabi_dcmpun>
 8013638:	b128      	cbz	r0, 8013646 <__ssvfscanf_r+0xa92>
 801363a:	4620      	mov	r0, r4
 801363c:	f001 fbe2 	bl	8014e04 <nanf>
 8013640:	ed87 0a00 	vstr	s0, [r7]
 8013644:	e004      	b.n	8013650 <__ssvfscanf_r+0xa9c>
 8013646:	4650      	mov	r0, sl
 8013648:	4659      	mov	r1, fp
 801364a:	f7ed fb49 	bl	8000ce0 <__aeabi_d2f>
 801364e:	6038      	str	r0, [r7, #0]
 8013650:	9b03      	ldr	r3, [sp, #12]
 8013652:	3301      	adds	r3, #1
 8013654:	9303      	str	r3, [sp, #12]
 8013656:	4637      	mov	r7, r6
 8013658:	f7ff bac4 	b.w	8012be4 <__ssvfscanf_r+0x30>
 801365c:	9b03      	ldr	r3, [sp, #12]
 801365e:	b153      	cbz	r3, 8013676 <__ssvfscanf_r+0xac2>
 8013660:	89ab      	ldrh	r3, [r5, #12]
 8013662:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013666:	9b03      	ldr	r3, [sp, #12]
 8013668:	bf18      	it	ne
 801366a:	f04f 33ff 	movne.w	r3, #4294967295
 801366e:	4618      	mov	r0, r3
 8013670:	e006      	b.n	8013680 <__ssvfscanf_r+0xacc>
 8013672:	9803      	ldr	r0, [sp, #12]
 8013674:	e004      	b.n	8013680 <__ssvfscanf_r+0xacc>
 8013676:	f04f 30ff 	mov.w	r0, #4294967295
 801367a:	e001      	b.n	8013680 <__ssvfscanf_r+0xacc>
 801367c:	4682      	mov	sl, r0
 801367e:	e427      	b.n	8012ed0 <__ssvfscanf_r+0x31c>
 8013680:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 8013684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013688:	0802fd96 	.word	0x0802fd96

0801368c <quorem>:
 801368c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013690:	6903      	ldr	r3, [r0, #16]
 8013692:	690c      	ldr	r4, [r1, #16]
 8013694:	429c      	cmp	r4, r3
 8013696:	4680      	mov	r8, r0
 8013698:	f300 8083 	bgt.w	80137a2 <quorem+0x116>
 801369c:	3c01      	subs	r4, #1
 801369e:	f101 0714 	add.w	r7, r1, #20
 80136a2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80136a6:	f100 0614 	add.w	r6, r0, #20
 80136aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80136ae:	eb06 030e 	add.w	r3, r6, lr
 80136b2:	9301      	str	r3, [sp, #4]
 80136b4:	3501      	adds	r5, #1
 80136b6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80136ba:	fbb3 f5f5 	udiv	r5, r3, r5
 80136be:	eb07 090e 	add.w	r9, r7, lr
 80136c2:	2d00      	cmp	r5, #0
 80136c4:	d039      	beq.n	801373a <quorem+0xae>
 80136c6:	f04f 0a00 	mov.w	sl, #0
 80136ca:	4638      	mov	r0, r7
 80136cc:	46b4      	mov	ip, r6
 80136ce:	46d3      	mov	fp, sl
 80136d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80136d4:	b293      	uxth	r3, r2
 80136d6:	fb05 a303 	mla	r3, r5, r3, sl
 80136da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80136de:	b29b      	uxth	r3, r3
 80136e0:	ebc3 030b 	rsb	r3, r3, fp
 80136e4:	0c12      	lsrs	r2, r2, #16
 80136e6:	f8bc b000 	ldrh.w	fp, [ip]
 80136ea:	fb05 a202 	mla	r2, r5, r2, sl
 80136ee:	fa13 f38b 	uxtah	r3, r3, fp
 80136f2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80136f6:	fa1f fb82 	uxth.w	fp, r2
 80136fa:	f8dc 2000 	ldr.w	r2, [ip]
 80136fe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013702:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013706:	b29b      	uxth	r3, r3
 8013708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801370c:	4581      	cmp	r9, r0
 801370e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013712:	f84c 3b04 	str.w	r3, [ip], #4
 8013716:	d2db      	bcs.n	80136d0 <quorem+0x44>
 8013718:	f856 300e 	ldr.w	r3, [r6, lr]
 801371c:	b96b      	cbnz	r3, 801373a <quorem+0xae>
 801371e:	9b01      	ldr	r3, [sp, #4]
 8013720:	3b04      	subs	r3, #4
 8013722:	429e      	cmp	r6, r3
 8013724:	461a      	mov	r2, r3
 8013726:	d302      	bcc.n	801372e <quorem+0xa2>
 8013728:	f8c8 4010 	str.w	r4, [r8, #16]
 801372c:	e005      	b.n	801373a <quorem+0xae>
 801372e:	6812      	ldr	r2, [r2, #0]
 8013730:	3b04      	subs	r3, #4
 8013732:	2a00      	cmp	r2, #0
 8013734:	d1f8      	bne.n	8013728 <quorem+0x9c>
 8013736:	3c01      	subs	r4, #1
 8013738:	e7f3      	b.n	8013722 <quorem+0x96>
 801373a:	4640      	mov	r0, r8
 801373c:	f001 f98d 	bl	8014a5a <__mcmp>
 8013740:	2800      	cmp	r0, #0
 8013742:	db2c      	blt.n	801379e <quorem+0x112>
 8013744:	3501      	adds	r5, #1
 8013746:	4630      	mov	r0, r6
 8013748:	f04f 0e00 	mov.w	lr, #0
 801374c:	f857 1b04 	ldr.w	r1, [r7], #4
 8013750:	f8d0 c000 	ldr.w	ip, [r0]
 8013754:	b28a      	uxth	r2, r1
 8013756:	ebc2 030e 	rsb	r3, r2, lr
 801375a:	0c09      	lsrs	r1, r1, #16
 801375c:	fa13 f38c 	uxtah	r3, r3, ip
 8013760:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8013764:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013768:	b29b      	uxth	r3, r3
 801376a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801376e:	45b9      	cmp	r9, r7
 8013770:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013774:	f840 3b04 	str.w	r3, [r0], #4
 8013778:	d2e8      	bcs.n	801374c <quorem+0xc0>
 801377a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801377e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013782:	b962      	cbnz	r2, 801379e <quorem+0x112>
 8013784:	3b04      	subs	r3, #4
 8013786:	429e      	cmp	r6, r3
 8013788:	461a      	mov	r2, r3
 801378a:	d302      	bcc.n	8013792 <quorem+0x106>
 801378c:	f8c8 4010 	str.w	r4, [r8, #16]
 8013790:	e005      	b.n	801379e <quorem+0x112>
 8013792:	6812      	ldr	r2, [r2, #0]
 8013794:	3b04      	subs	r3, #4
 8013796:	2a00      	cmp	r2, #0
 8013798:	d1f8      	bne.n	801378c <quorem+0x100>
 801379a:	3c01      	subs	r4, #1
 801379c:	e7f3      	b.n	8013786 <quorem+0xfa>
 801379e:	4628      	mov	r0, r5
 80137a0:	e000      	b.n	80137a4 <quorem+0x118>
 80137a2:	2000      	movs	r0, #0
 80137a4:	b003      	add	sp, #12
 80137a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137aa:	0000      	movs	r0, r0
 80137ac:	0000      	movs	r0, r0
	...

080137b0 <_dtoa_r>:
 80137b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b4:	ec59 8b10 	vmov	r8, r9, d0
 80137b8:	b097      	sub	sp, #92	; 0x5c
 80137ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80137bc:	9106      	str	r1, [sp, #24]
 80137be:	4682      	mov	sl, r0
 80137c0:	9209      	str	r2, [sp, #36]	; 0x24
 80137c2:	9310      	str	r3, [sp, #64]	; 0x40
 80137c4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80137c6:	e9cd 8900 	strd	r8, r9, [sp]
 80137ca:	b945      	cbnz	r5, 80137de <_dtoa_r+0x2e>
 80137cc:	2010      	movs	r0, #16
 80137ce:	f7fd fef9 	bl	80115c4 <malloc>
 80137d2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80137d6:	6045      	str	r5, [r0, #4]
 80137d8:	6085      	str	r5, [r0, #8]
 80137da:	6005      	str	r5, [r0, #0]
 80137dc:	60c5      	str	r5, [r0, #12]
 80137de:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80137e2:	6819      	ldr	r1, [r3, #0]
 80137e4:	b159      	cbz	r1, 80137fe <_dtoa_r+0x4e>
 80137e6:	685a      	ldr	r2, [r3, #4]
 80137e8:	604a      	str	r2, [r1, #4]
 80137ea:	2301      	movs	r3, #1
 80137ec:	4093      	lsls	r3, r2
 80137ee:	608b      	str	r3, [r1, #8]
 80137f0:	4650      	mov	r0, sl
 80137f2:	f000 ff1c 	bl	801462e <_Bfree>
 80137f6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80137fa:	2200      	movs	r2, #0
 80137fc:	601a      	str	r2, [r3, #0]
 80137fe:	9b01      	ldr	r3, [sp, #4]
 8013800:	4a9f      	ldr	r2, [pc, #636]	; (8013a80 <_dtoa_r+0x2d0>)
 8013802:	2b00      	cmp	r3, #0
 8013804:	bfbf      	itttt	lt
 8013806:	2301      	movlt	r3, #1
 8013808:	6023      	strlt	r3, [r4, #0]
 801380a:	9b01      	ldrlt	r3, [sp, #4]
 801380c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013810:	bfb8      	it	lt
 8013812:	9301      	strlt	r3, [sp, #4]
 8013814:	9f01      	ldr	r7, [sp, #4]
 8013816:	bfa4      	itt	ge
 8013818:	2300      	movge	r3, #0
 801381a:	6023      	strge	r3, [r4, #0]
 801381c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8013820:	0d1b      	lsrs	r3, r3, #20
 8013822:	051b      	lsls	r3, r3, #20
 8013824:	4293      	cmp	r3, r2
 8013826:	d11d      	bne.n	8013864 <_dtoa_r+0xb4>
 8013828:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801382a:	f242 730f 	movw	r3, #9999	; 0x270f
 801382e:	6013      	str	r3, [r2, #0]
 8013830:	9b00      	ldr	r3, [sp, #0]
 8013832:	b943      	cbnz	r3, 8013846 <_dtoa_r+0x96>
 8013834:	4a93      	ldr	r2, [pc, #588]	; (8013a84 <_dtoa_r+0x2d4>)
 8013836:	4b94      	ldr	r3, [pc, #592]	; (8013a88 <_dtoa_r+0x2d8>)
 8013838:	f3c7 0013 	ubfx	r0, r7, #0, #20
 801383c:	2800      	cmp	r0, #0
 801383e:	bf14      	ite	ne
 8013840:	4618      	movne	r0, r3
 8013842:	4610      	moveq	r0, r2
 8013844:	e000      	b.n	8013848 <_dtoa_r+0x98>
 8013846:	4890      	ldr	r0, [pc, #576]	; (8013a88 <_dtoa_r+0x2d8>)
 8013848:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801384a:	2b00      	cmp	r3, #0
 801384c:	f000 854a 	beq.w	80142e4 <_dtoa_r+0xb34>
 8013850:	78c3      	ldrb	r3, [r0, #3]
 8013852:	b113      	cbz	r3, 801385a <_dtoa_r+0xaa>
 8013854:	f100 0308 	add.w	r3, r0, #8
 8013858:	e000      	b.n	801385c <_dtoa_r+0xac>
 801385a:	1cc3      	adds	r3, r0, #3
 801385c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801385e:	6013      	str	r3, [r2, #0]
 8013860:	f000 bd40 	b.w	80142e4 <_dtoa_r+0xb34>
 8013864:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013868:	2200      	movs	r2, #0
 801386a:	2300      	movs	r3, #0
 801386c:	4620      	mov	r0, r4
 801386e:	4629      	mov	r1, r5
 8013870:	f7ed f9a6 	bl	8000bc0 <__aeabi_dcmpeq>
 8013874:	4680      	mov	r8, r0
 8013876:	b158      	cbz	r0, 8013890 <_dtoa_r+0xe0>
 8013878:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801387a:	2301      	movs	r3, #1
 801387c:	6013      	str	r3, [r2, #0]
 801387e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013880:	2b00      	cmp	r3, #0
 8013882:	f000 8522 	beq.w	80142ca <_dtoa_r+0xb1a>
 8013886:	4881      	ldr	r0, [pc, #516]	; (8013a8c <_dtoa_r+0x2dc>)
 8013888:	6018      	str	r0, [r3, #0]
 801388a:	3801      	subs	r0, #1
 801388c:	f000 bd2a 	b.w	80142e4 <_dtoa_r+0xb34>
 8013890:	aa14      	add	r2, sp, #80	; 0x50
 8013892:	a915      	add	r1, sp, #84	; 0x54
 8013894:	ec45 4b10 	vmov	d0, r4, r5
 8013898:	4650      	mov	r0, sl
 801389a:	f001 f9ce 	bl	8014c3a <__d2b>
 801389e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80138a2:	9002      	str	r0, [sp, #8]
 80138a4:	b15e      	cbz	r6, 80138be <_dtoa_r+0x10e>
 80138a6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80138aa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80138ae:	4620      	mov	r0, r4
 80138b0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80138b4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80138b8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80138bc:	e01d      	b.n	80138fa <_dtoa_r+0x14a>
 80138be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80138c0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80138c2:	441e      	add	r6, r3
 80138c4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80138c8:	2b20      	cmp	r3, #32
 80138ca:	dd0a      	ble.n	80138e2 <_dtoa_r+0x132>
 80138cc:	9a00      	ldr	r2, [sp, #0]
 80138ce:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80138d2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80138d6:	fa22 f000 	lsr.w	r0, r2, r0
 80138da:	fa07 f303 	lsl.w	r3, r7, r3
 80138de:	4318      	orrs	r0, r3
 80138e0:	e004      	b.n	80138ec <_dtoa_r+0x13c>
 80138e2:	f1c3 0020 	rsb	r0, r3, #32
 80138e6:	9b00      	ldr	r3, [sp, #0]
 80138e8:	fa03 f000 	lsl.w	r0, r3, r0
 80138ec:	f7ec fe8a 	bl	8000604 <__aeabi_ui2d>
 80138f0:	2301      	movs	r3, #1
 80138f2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80138f6:	3e01      	subs	r6, #1
 80138f8:	9311      	str	r3, [sp, #68]	; 0x44
 80138fa:	2200      	movs	r2, #0
 80138fc:	4b64      	ldr	r3, [pc, #400]	; (8013a90 <_dtoa_r+0x2e0>)
 80138fe:	f7ec fd43 	bl	8000388 <__aeabi_dsub>
 8013902:	a359      	add	r3, pc, #356	; (adr r3, 8013a68 <_dtoa_r+0x2b8>)
 8013904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013908:	f7ec fef2 	bl	80006f0 <__aeabi_dmul>
 801390c:	a358      	add	r3, pc, #352	; (adr r3, 8013a70 <_dtoa_r+0x2c0>)
 801390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013912:	f7ec fd3b 	bl	800038c <__adddf3>
 8013916:	4604      	mov	r4, r0
 8013918:	4630      	mov	r0, r6
 801391a:	460d      	mov	r5, r1
 801391c:	f7ec fe82 	bl	8000624 <__aeabi_i2d>
 8013920:	a355      	add	r3, pc, #340	; (adr r3, 8013a78 <_dtoa_r+0x2c8>)
 8013922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013926:	f7ec fee3 	bl	80006f0 <__aeabi_dmul>
 801392a:	4602      	mov	r2, r0
 801392c:	460b      	mov	r3, r1
 801392e:	4620      	mov	r0, r4
 8013930:	4629      	mov	r1, r5
 8013932:	f7ec fd2b 	bl	800038c <__adddf3>
 8013936:	4604      	mov	r4, r0
 8013938:	460d      	mov	r5, r1
 801393a:	f7ed f989 	bl	8000c50 <__aeabi_d2iz>
 801393e:	2200      	movs	r2, #0
 8013940:	4683      	mov	fp, r0
 8013942:	2300      	movs	r3, #0
 8013944:	4620      	mov	r0, r4
 8013946:	4629      	mov	r1, r5
 8013948:	f7ed f944 	bl	8000bd4 <__aeabi_dcmplt>
 801394c:	b158      	cbz	r0, 8013966 <_dtoa_r+0x1b6>
 801394e:	4658      	mov	r0, fp
 8013950:	f7ec fe68 	bl	8000624 <__aeabi_i2d>
 8013954:	4602      	mov	r2, r0
 8013956:	460b      	mov	r3, r1
 8013958:	4620      	mov	r0, r4
 801395a:	4629      	mov	r1, r5
 801395c:	f7ed f930 	bl	8000bc0 <__aeabi_dcmpeq>
 8013960:	b908      	cbnz	r0, 8013966 <_dtoa_r+0x1b6>
 8013962:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013966:	f1bb 0f16 	cmp.w	fp, #22
 801396a:	d80d      	bhi.n	8013988 <_dtoa_r+0x1d8>
 801396c:	4949      	ldr	r1, [pc, #292]	; (8013a94 <_dtoa_r+0x2e4>)
 801396e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8013972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013976:	e9d1 0100 	ldrd	r0, r1, [r1]
 801397a:	f7ed f949 	bl	8000c10 <__aeabi_dcmpgt>
 801397e:	b130      	cbz	r0, 801398e <_dtoa_r+0x1de>
 8013980:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013984:	2300      	movs	r3, #0
 8013986:	e000      	b.n	801398a <_dtoa_r+0x1da>
 8013988:	2301      	movs	r3, #1
 801398a:	930d      	str	r3, [sp, #52]	; 0x34
 801398c:	e000      	b.n	8013990 <_dtoa_r+0x1e0>
 801398e:	900d      	str	r0, [sp, #52]	; 0x34
 8013990:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013992:	1b9e      	subs	r6, r3, r6
 8013994:	1e73      	subs	r3, r6, #1
 8013996:	9305      	str	r3, [sp, #20]
 8013998:	bf43      	ittte	mi
 801399a:	f1c3 0900 	rsbmi	r9, r3, #0
 801399e:	2300      	movmi	r3, #0
 80139a0:	9305      	strmi	r3, [sp, #20]
 80139a2:	f04f 0900 	movpl.w	r9, #0
 80139a6:	f1bb 0f00 	cmp.w	fp, #0
 80139aa:	db07      	blt.n	80139bc <_dtoa_r+0x20c>
 80139ac:	9b05      	ldr	r3, [sp, #20]
 80139ae:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80139b2:	445b      	add	r3, fp
 80139b4:	9305      	str	r3, [sp, #20]
 80139b6:	2300      	movs	r3, #0
 80139b8:	9307      	str	r3, [sp, #28]
 80139ba:	e006      	b.n	80139ca <_dtoa_r+0x21a>
 80139bc:	f1cb 0300 	rsb	r3, fp, #0
 80139c0:	9307      	str	r3, [sp, #28]
 80139c2:	2300      	movs	r3, #0
 80139c4:	ebcb 0909 	rsb	r9, fp, r9
 80139c8:	930c      	str	r3, [sp, #48]	; 0x30
 80139ca:	9b06      	ldr	r3, [sp, #24]
 80139cc:	2b09      	cmp	r3, #9
 80139ce:	d827      	bhi.n	8013a20 <_dtoa_r+0x270>
 80139d0:	2b05      	cmp	r3, #5
 80139d2:	bfc4      	itt	gt
 80139d4:	3b04      	subgt	r3, #4
 80139d6:	9306      	strgt	r3, [sp, #24]
 80139d8:	9b06      	ldr	r3, [sp, #24]
 80139da:	f1a3 0302 	sub.w	r3, r3, #2
 80139de:	bfcc      	ite	gt
 80139e0:	2500      	movgt	r5, #0
 80139e2:	2501      	movle	r5, #1
 80139e4:	2b03      	cmp	r3, #3
 80139e6:	d820      	bhi.n	8013a2a <_dtoa_r+0x27a>
 80139e8:	e8df f003 	tbb	[pc, r3]
 80139ec:	04020e06 	.word	0x04020e06
 80139f0:	2301      	movs	r3, #1
 80139f2:	e002      	b.n	80139fa <_dtoa_r+0x24a>
 80139f4:	2301      	movs	r3, #1
 80139f6:	e008      	b.n	8013a0a <_dtoa_r+0x25a>
 80139f8:	2300      	movs	r3, #0
 80139fa:	9308      	str	r3, [sp, #32]
 80139fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	dd1c      	ble.n	8013a3c <_dtoa_r+0x28c>
 8013a02:	9303      	str	r3, [sp, #12]
 8013a04:	4698      	mov	r8, r3
 8013a06:	e01e      	b.n	8013a46 <_dtoa_r+0x296>
 8013a08:	2300      	movs	r3, #0
 8013a0a:	9308      	str	r3, [sp, #32]
 8013a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a0e:	445b      	add	r3, fp
 8013a10:	f103 0801 	add.w	r8, r3, #1
 8013a14:	9303      	str	r3, [sp, #12]
 8013a16:	4643      	mov	r3, r8
 8013a18:	2b01      	cmp	r3, #1
 8013a1a:	bfb8      	it	lt
 8013a1c:	2301      	movlt	r3, #1
 8013a1e:	e012      	b.n	8013a46 <_dtoa_r+0x296>
 8013a20:	2501      	movs	r5, #1
 8013a22:	2300      	movs	r3, #0
 8013a24:	9306      	str	r3, [sp, #24]
 8013a26:	9508      	str	r5, [sp, #32]
 8013a28:	e001      	b.n	8013a2e <_dtoa_r+0x27e>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	9308      	str	r3, [sp, #32]
 8013a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8013a32:	9303      	str	r3, [sp, #12]
 8013a34:	4698      	mov	r8, r3
 8013a36:	2200      	movs	r2, #0
 8013a38:	2312      	movs	r3, #18
 8013a3a:	e003      	b.n	8013a44 <_dtoa_r+0x294>
 8013a3c:	2301      	movs	r3, #1
 8013a3e:	9303      	str	r3, [sp, #12]
 8013a40:	4698      	mov	r8, r3
 8013a42:	461a      	mov	r2, r3
 8013a44:	9209      	str	r2, [sp, #36]	; 0x24
 8013a46:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	6062      	str	r2, [r4, #4]
 8013a4e:	2104      	movs	r1, #4
 8013a50:	f101 0214 	add.w	r2, r1, #20
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d81f      	bhi.n	8013a98 <_dtoa_r+0x2e8>
 8013a58:	6862      	ldr	r2, [r4, #4]
 8013a5a:	3201      	adds	r2, #1
 8013a5c:	6062      	str	r2, [r4, #4]
 8013a5e:	0049      	lsls	r1, r1, #1
 8013a60:	e7f6      	b.n	8013a50 <_dtoa_r+0x2a0>
 8013a62:	bf00      	nop
 8013a64:	f3af 8000 	nop.w
 8013a68:	636f4361 	.word	0x636f4361
 8013a6c:	3fd287a7 	.word	0x3fd287a7
 8013a70:	8b60c8b3 	.word	0x8b60c8b3
 8013a74:	3fc68a28 	.word	0x3fc68a28
 8013a78:	509f79fb 	.word	0x509f79fb
 8013a7c:	3fd34413 	.word	0x3fd34413
 8013a80:	7ff00000 	.word	0x7ff00000
 8013a84:	0802fd9b 	.word	0x0802fd9b
 8013a88:	0802fda4 	.word	0x0802fda4
 8013a8c:	0802fbf0 	.word	0x0802fbf0
 8013a90:	3ff80000 	.word	0x3ff80000
 8013a94:	0802fdb0 	.word	0x0802fdb0
 8013a98:	6861      	ldr	r1, [r4, #4]
 8013a9a:	4650      	mov	r0, sl
 8013a9c:	f000 fd92 	bl	80145c4 <_Balloc>
 8013aa0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8013aa4:	6020      	str	r0, [r4, #0]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	9304      	str	r3, [sp, #16]
 8013aaa:	f1b8 0f0e 	cmp.w	r8, #14
 8013aae:	f200 815d 	bhi.w	8013d6c <_dtoa_r+0x5bc>
 8013ab2:	2d00      	cmp	r5, #0
 8013ab4:	f000 815a 	beq.w	8013d6c <_dtoa_r+0x5bc>
 8013ab8:	ed9d 7b00 	vldr	d7, [sp]
 8013abc:	f1bb 0f00 	cmp.w	fp, #0
 8013ac0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8013ac4:	dd31      	ble.n	8013b2a <_dtoa_r+0x37a>
 8013ac6:	4aa0      	ldr	r2, [pc, #640]	; (8013d48 <_dtoa_r+0x598>)
 8013ac8:	f00b 030f 	and.w	r3, fp, #15
 8013acc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013ad0:	ed93 7b00 	vldr	d7, [r3]
 8013ad4:	ea4f 142b 	mov.w	r4, fp, asr #4
 8013ad8:	06e2      	lsls	r2, r4, #27
 8013ada:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013ade:	d50c      	bpl.n	8013afa <_dtoa_r+0x34a>
 8013ae0:	4b9a      	ldr	r3, [pc, #616]	; (8013d4c <_dtoa_r+0x59c>)
 8013ae2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013ae6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013aea:	f7ec ff2b 	bl	8000944 <__aeabi_ddiv>
 8013aee:	f004 040f 	and.w	r4, r4, #15
 8013af2:	e9cd 0100 	strd	r0, r1, [sp]
 8013af6:	2603      	movs	r6, #3
 8013af8:	e000      	b.n	8013afc <_dtoa_r+0x34c>
 8013afa:	2602      	movs	r6, #2
 8013afc:	4d93      	ldr	r5, [pc, #588]	; (8013d4c <_dtoa_r+0x59c>)
 8013afe:	b16c      	cbz	r4, 8013b1c <_dtoa_r+0x36c>
 8013b00:	07e3      	lsls	r3, r4, #31
 8013b02:	d508      	bpl.n	8013b16 <_dtoa_r+0x366>
 8013b04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013b08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b0c:	f7ec fdf0 	bl	80006f0 <__aeabi_dmul>
 8013b10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b14:	3601      	adds	r6, #1
 8013b16:	1064      	asrs	r4, r4, #1
 8013b18:	3508      	adds	r5, #8
 8013b1a:	e7f0      	b.n	8013afe <_dtoa_r+0x34e>
 8013b1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b24:	f7ec ff0e 	bl	8000944 <__aeabi_ddiv>
 8013b28:	e020      	b.n	8013b6c <_dtoa_r+0x3bc>
 8013b2a:	f1cb 0400 	rsb	r4, fp, #0
 8013b2e:	b304      	cbz	r4, 8013b72 <_dtoa_r+0x3c2>
 8013b30:	4b85      	ldr	r3, [pc, #532]	; (8013d48 <_dtoa_r+0x598>)
 8013b32:	4d86      	ldr	r5, [pc, #536]	; (8013d4c <_dtoa_r+0x59c>)
 8013b34:	f004 020f 	and.w	r2, r4, #15
 8013b38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013b44:	f7ec fdd4 	bl	80006f0 <__aeabi_dmul>
 8013b48:	e9cd 0100 	strd	r0, r1, [sp]
 8013b4c:	1124      	asrs	r4, r4, #4
 8013b4e:	2300      	movs	r3, #0
 8013b50:	2602      	movs	r6, #2
 8013b52:	b154      	cbz	r4, 8013b6a <_dtoa_r+0x3ba>
 8013b54:	07e7      	lsls	r7, r4, #31
 8013b56:	d505      	bpl.n	8013b64 <_dtoa_r+0x3b4>
 8013b58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013b5c:	f7ec fdc8 	bl	80006f0 <__aeabi_dmul>
 8013b60:	3601      	adds	r6, #1
 8013b62:	2301      	movs	r3, #1
 8013b64:	1064      	asrs	r4, r4, #1
 8013b66:	3508      	adds	r5, #8
 8013b68:	e7f3      	b.n	8013b52 <_dtoa_r+0x3a2>
 8013b6a:	b11b      	cbz	r3, 8013b74 <_dtoa_r+0x3c4>
 8013b6c:	e9cd 0100 	strd	r0, r1, [sp]
 8013b70:	e000      	b.n	8013b74 <_dtoa_r+0x3c4>
 8013b72:	2602      	movs	r6, #2
 8013b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b76:	b1eb      	cbz	r3, 8013bb4 <_dtoa_r+0x404>
 8013b78:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	4b74      	ldr	r3, [pc, #464]	; (8013d50 <_dtoa_r+0x5a0>)
 8013b80:	4620      	mov	r0, r4
 8013b82:	4629      	mov	r1, r5
 8013b84:	f7ed f826 	bl	8000bd4 <__aeabi_dcmplt>
 8013b88:	b1a0      	cbz	r0, 8013bb4 <_dtoa_r+0x404>
 8013b8a:	f1b8 0f00 	cmp.w	r8, #0
 8013b8e:	d011      	beq.n	8013bb4 <_dtoa_r+0x404>
 8013b90:	9b03      	ldr	r3, [sp, #12]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	f340 80e6 	ble.w	8013d64 <_dtoa_r+0x5b4>
 8013b98:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	4b6c      	ldr	r3, [pc, #432]	; (8013d54 <_dtoa_r+0x5a4>)
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	4629      	mov	r1, r5
 8013ba6:	f7ec fda3 	bl	80006f0 <__aeabi_dmul>
 8013baa:	3601      	adds	r6, #1
 8013bac:	e9cd 0100 	strd	r0, r1, [sp]
 8013bb0:	9f03      	ldr	r7, [sp, #12]
 8013bb2:	e002      	b.n	8013bba <_dtoa_r+0x40a>
 8013bb4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8013bb8:	4647      	mov	r7, r8
 8013bba:	4630      	mov	r0, r6
 8013bbc:	f7ec fd32 	bl	8000624 <__aeabi_i2d>
 8013bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013bc4:	f7ec fd94 	bl	80006f0 <__aeabi_dmul>
 8013bc8:	2200      	movs	r2, #0
 8013bca:	4b63      	ldr	r3, [pc, #396]	; (8013d58 <_dtoa_r+0x5a8>)
 8013bcc:	f7ec fbde 	bl	800038c <__adddf3>
 8013bd0:	4604      	mov	r4, r0
 8013bd2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8013bd6:	b9cf      	cbnz	r7, 8013c0c <_dtoa_r+0x45c>
 8013bd8:	2200      	movs	r2, #0
 8013bda:	4b60      	ldr	r3, [pc, #384]	; (8013d5c <_dtoa_r+0x5ac>)
 8013bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013be0:	f7ec fbd2 	bl	8000388 <__aeabi_dsub>
 8013be4:	4622      	mov	r2, r4
 8013be6:	462b      	mov	r3, r5
 8013be8:	e9cd 0100 	strd	r0, r1, [sp]
 8013bec:	f7ed f810 	bl	8000c10 <__aeabi_dcmpgt>
 8013bf0:	2800      	cmp	r0, #0
 8013bf2:	f040 8241 	bne.w	8014078 <_dtoa_r+0x8c8>
 8013bf6:	4622      	mov	r2, r4
 8013bf8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8013bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c00:	f7ec ffe8 	bl	8000bd4 <__aeabi_dcmplt>
 8013c04:	2800      	cmp	r0, #0
 8013c06:	f040 822e 	bne.w	8014066 <_dtoa_r+0x8b6>
 8013c0a:	e0ab      	b.n	8013d64 <_dtoa_r+0x5b4>
 8013c0c:	9a08      	ldr	r2, [sp, #32]
 8013c0e:	4b4e      	ldr	r3, [pc, #312]	; (8013d48 <_dtoa_r+0x598>)
 8013c10:	1e79      	subs	r1, r7, #1
 8013c12:	2a00      	cmp	r2, #0
 8013c14:	d04a      	beq.n	8013cac <_dtoa_r+0x4fc>
 8013c16:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1e:	2000      	movs	r0, #0
 8013c20:	494f      	ldr	r1, [pc, #316]	; (8013d60 <_dtoa_r+0x5b0>)
 8013c22:	f7ec fe8f 	bl	8000944 <__aeabi_ddiv>
 8013c26:	4622      	mov	r2, r4
 8013c28:	462b      	mov	r3, r5
 8013c2a:	f7ec fbad 	bl	8000388 <__aeabi_dsub>
 8013c2e:	9c04      	ldr	r4, [sp, #16]
 8013c30:	4605      	mov	r5, r0
 8013c32:	460e      	mov	r6, r1
 8013c34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c38:	f7ed f80a 	bl	8000c50 <__aeabi_d2iz>
 8013c3c:	9012      	str	r0, [sp, #72]	; 0x48
 8013c3e:	f7ec fcf1 	bl	8000624 <__aeabi_i2d>
 8013c42:	4602      	mov	r2, r0
 8013c44:	460b      	mov	r3, r1
 8013c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c4a:	f7ec fb9d 	bl	8000388 <__aeabi_dsub>
 8013c4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c50:	3330      	adds	r3, #48	; 0x30
 8013c52:	f804 3b01 	strb.w	r3, [r4], #1
 8013c56:	462a      	mov	r2, r5
 8013c58:	4633      	mov	r3, r6
 8013c5a:	e9cd 0100 	strd	r0, r1, [sp]
 8013c5e:	f7ec ffb9 	bl	8000bd4 <__aeabi_dcmplt>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f040 8321 	bne.w	80142aa <_dtoa_r+0xafa>
 8013c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c6c:	2000      	movs	r0, #0
 8013c6e:	4938      	ldr	r1, [pc, #224]	; (8013d50 <_dtoa_r+0x5a0>)
 8013c70:	f7ec fb8a 	bl	8000388 <__aeabi_dsub>
 8013c74:	462a      	mov	r2, r5
 8013c76:	4633      	mov	r3, r6
 8013c78:	f7ec ffac 	bl	8000bd4 <__aeabi_dcmplt>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	f040 80d2 	bne.w	8013e26 <_dtoa_r+0x676>
 8013c82:	9b04      	ldr	r3, [sp, #16]
 8013c84:	1ae3      	subs	r3, r4, r3
 8013c86:	42bb      	cmp	r3, r7
 8013c88:	da6c      	bge.n	8013d64 <_dtoa_r+0x5b4>
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	4b31      	ldr	r3, [pc, #196]	; (8013d54 <_dtoa_r+0x5a4>)
 8013c8e:	4628      	mov	r0, r5
 8013c90:	4631      	mov	r1, r6
 8013c92:	f7ec fd2d 	bl	80006f0 <__aeabi_dmul>
 8013c96:	2200      	movs	r2, #0
 8013c98:	4605      	mov	r5, r0
 8013c9a:	460e      	mov	r6, r1
 8013c9c:	4b2d      	ldr	r3, [pc, #180]	; (8013d54 <_dtoa_r+0x5a4>)
 8013c9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ca2:	f7ec fd25 	bl	80006f0 <__aeabi_dmul>
 8013ca6:	e9cd 0100 	strd	r0, r1, [sp]
 8013caa:	e7c3      	b.n	8013c34 <_dtoa_r+0x484>
 8013cac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8013cb0:	4622      	mov	r2, r4
 8013cb2:	462b      	mov	r3, r5
 8013cb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cb8:	f7ec fd1a 	bl	80006f0 <__aeabi_dmul>
 8013cbc:	9b04      	ldr	r3, [sp, #16]
 8013cbe:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8013cc2:	19dc      	adds	r4, r3, r7
 8013cc4:	461d      	mov	r5, r3
 8013cc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cca:	f7ec ffc1 	bl	8000c50 <__aeabi_d2iz>
 8013cce:	4606      	mov	r6, r0
 8013cd0:	f7ec fca8 	bl	8000624 <__aeabi_i2d>
 8013cd4:	3630      	adds	r6, #48	; 0x30
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	460b      	mov	r3, r1
 8013cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cde:	f7ec fb53 	bl	8000388 <__aeabi_dsub>
 8013ce2:	f805 6b01 	strb.w	r6, [r5], #1
 8013ce6:	42ac      	cmp	r4, r5
 8013ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8013cec:	f04f 0200 	mov.w	r2, #0
 8013cf0:	d123      	bne.n	8013d3a <_dtoa_r+0x58a>
 8013cf2:	4b1b      	ldr	r3, [pc, #108]	; (8013d60 <_dtoa_r+0x5b0>)
 8013cf4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8013cf8:	f7ec fb48 	bl	800038c <__adddf3>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	460b      	mov	r3, r1
 8013d00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d04:	f7ec ff84 	bl	8000c10 <__aeabi_dcmpgt>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	f040 808c 	bne.w	8013e26 <_dtoa_r+0x676>
 8013d0e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8013d12:	2000      	movs	r0, #0
 8013d14:	4912      	ldr	r1, [pc, #72]	; (8013d60 <_dtoa_r+0x5b0>)
 8013d16:	f7ec fb37 	bl	8000388 <__aeabi_dsub>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d22:	f7ec ff57 	bl	8000bd4 <__aeabi_dcmplt>
 8013d26:	b1e8      	cbz	r0, 8013d64 <_dtoa_r+0x5b4>
 8013d28:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8013d2c:	2b30      	cmp	r3, #48	; 0x30
 8013d2e:	f104 32ff 	add.w	r2, r4, #4294967295
 8013d32:	f040 82ba 	bne.w	80142aa <_dtoa_r+0xafa>
 8013d36:	4614      	mov	r4, r2
 8013d38:	e7f6      	b.n	8013d28 <_dtoa_r+0x578>
 8013d3a:	4b06      	ldr	r3, [pc, #24]	; (8013d54 <_dtoa_r+0x5a4>)
 8013d3c:	f7ec fcd8 	bl	80006f0 <__aeabi_dmul>
 8013d40:	e9cd 0100 	strd	r0, r1, [sp]
 8013d44:	e7bf      	b.n	8013cc6 <_dtoa_r+0x516>
 8013d46:	bf00      	nop
 8013d48:	0802fdb0 	.word	0x0802fdb0
 8013d4c:	0802fe78 	.word	0x0802fe78
 8013d50:	3ff00000 	.word	0x3ff00000
 8013d54:	40240000 	.word	0x40240000
 8013d58:	401c0000 	.word	0x401c0000
 8013d5c:	40140000 	.word	0x40140000
 8013d60:	3fe00000 	.word	0x3fe00000
 8013d64:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8013d68:	e88d 0018 	stmia.w	sp, {r3, r4}
 8013d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	db7c      	blt.n	8013e6c <_dtoa_r+0x6bc>
 8013d72:	f1bb 0f0e 	cmp.w	fp, #14
 8013d76:	dc79      	bgt.n	8013e6c <_dtoa_r+0x6bc>
 8013d78:	4b8f      	ldr	r3, [pc, #572]	; (8013fb8 <_dtoa_r+0x808>)
 8013d7a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013d7e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	da14      	bge.n	8013db2 <_dtoa_r+0x602>
 8013d88:	f1b8 0f00 	cmp.w	r8, #0
 8013d8c:	dc11      	bgt.n	8013db2 <_dtoa_r+0x602>
 8013d8e:	f040 816c 	bne.w	801406a <_dtoa_r+0x8ba>
 8013d92:	2200      	movs	r2, #0
 8013d94:	4b89      	ldr	r3, [pc, #548]	; (8013fbc <_dtoa_r+0x80c>)
 8013d96:	4630      	mov	r0, r6
 8013d98:	4639      	mov	r1, r7
 8013d9a:	f7ec fca9 	bl	80006f0 <__aeabi_dmul>
 8013d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013da2:	f7ec ff2b 	bl	8000bfc <__aeabi_dcmpge>
 8013da6:	4645      	mov	r5, r8
 8013da8:	4646      	mov	r6, r8
 8013daa:	2800      	cmp	r0, #0
 8013dac:	f040 815f 	bne.w	801406e <_dtoa_r+0x8be>
 8013db0:	e166      	b.n	8014080 <_dtoa_r+0x8d0>
 8013db2:	9c04      	ldr	r4, [sp, #16]
 8013db4:	4632      	mov	r2, r6
 8013db6:	463b      	mov	r3, r7
 8013db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013dbc:	f7ec fdc2 	bl	8000944 <__aeabi_ddiv>
 8013dc0:	f7ec ff46 	bl	8000c50 <__aeabi_d2iz>
 8013dc4:	4605      	mov	r5, r0
 8013dc6:	f7ec fc2d 	bl	8000624 <__aeabi_i2d>
 8013dca:	4632      	mov	r2, r6
 8013dcc:	463b      	mov	r3, r7
 8013dce:	f7ec fc8f 	bl	80006f0 <__aeabi_dmul>
 8013dd2:	460b      	mov	r3, r1
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013dda:	f7ec fad5 	bl	8000388 <__aeabi_dsub>
 8013dde:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8013de2:	f804 eb01 	strb.w	lr, [r4], #1
 8013de6:	9b04      	ldr	r3, [sp, #16]
 8013de8:	ebc3 0e04 	rsb	lr, r3, r4
 8013dec:	45f0      	cmp	r8, lr
 8013dee:	e9cd 0100 	strd	r0, r1, [sp]
 8013df2:	d12e      	bne.n	8013e52 <_dtoa_r+0x6a2>
 8013df4:	4602      	mov	r2, r0
 8013df6:	460b      	mov	r3, r1
 8013df8:	f7ec fac8 	bl	800038c <__adddf3>
 8013dfc:	4680      	mov	r8, r0
 8013dfe:	4689      	mov	r9, r1
 8013e00:	4602      	mov	r2, r0
 8013e02:	460b      	mov	r3, r1
 8013e04:	4630      	mov	r0, r6
 8013e06:	4639      	mov	r1, r7
 8013e08:	f7ec fee4 	bl	8000bd4 <__aeabi_dcmplt>
 8013e0c:	b978      	cbnz	r0, 8013e2e <_dtoa_r+0x67e>
 8013e0e:	4642      	mov	r2, r8
 8013e10:	464b      	mov	r3, r9
 8013e12:	4630      	mov	r0, r6
 8013e14:	4639      	mov	r1, r7
 8013e16:	f7ec fed3 	bl	8000bc0 <__aeabi_dcmpeq>
 8013e1a:	2800      	cmp	r0, #0
 8013e1c:	f000 8247 	beq.w	80142ae <_dtoa_r+0xafe>
 8013e20:	07e9      	lsls	r1, r5, #31
 8013e22:	d404      	bmi.n	8013e2e <_dtoa_r+0x67e>
 8013e24:	e243      	b.n	80142ae <_dtoa_r+0xafe>
 8013e26:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8013e2a:	e000      	b.n	8013e2e <_dtoa_r+0x67e>
 8013e2c:	461c      	mov	r4, r3
 8013e2e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8013e32:	2a39      	cmp	r2, #57	; 0x39
 8013e34:	f104 33ff 	add.w	r3, r4, #4294967295
 8013e38:	d107      	bne.n	8013e4a <_dtoa_r+0x69a>
 8013e3a:	9a04      	ldr	r2, [sp, #16]
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d1f5      	bne.n	8013e2c <_dtoa_r+0x67c>
 8013e40:	9904      	ldr	r1, [sp, #16]
 8013e42:	2230      	movs	r2, #48	; 0x30
 8013e44:	f10b 0b01 	add.w	fp, fp, #1
 8013e48:	700a      	strb	r2, [r1, #0]
 8013e4a:	781a      	ldrb	r2, [r3, #0]
 8013e4c:	3201      	adds	r2, #1
 8013e4e:	701a      	strb	r2, [r3, #0]
 8013e50:	e22d      	b.n	80142ae <_dtoa_r+0xafe>
 8013e52:	2200      	movs	r2, #0
 8013e54:	4b5a      	ldr	r3, [pc, #360]	; (8013fc0 <_dtoa_r+0x810>)
 8013e56:	f7ec fc4b 	bl	80006f0 <__aeabi_dmul>
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8013e62:	f7ec fead 	bl	8000bc0 <__aeabi_dcmpeq>
 8013e66:	2800      	cmp	r0, #0
 8013e68:	d0a4      	beq.n	8013db4 <_dtoa_r+0x604>
 8013e6a:	e220      	b.n	80142ae <_dtoa_r+0xafe>
 8013e6c:	9a08      	ldr	r2, [sp, #32]
 8013e6e:	2a00      	cmp	r2, #0
 8013e70:	d02d      	beq.n	8013ece <_dtoa_r+0x71e>
 8013e72:	9a06      	ldr	r2, [sp, #24]
 8013e74:	2a01      	cmp	r2, #1
 8013e76:	dc0a      	bgt.n	8013e8e <_dtoa_r+0x6de>
 8013e78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e7a:	b112      	cbz	r2, 8013e82 <_dtoa_r+0x6d2>
 8013e7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013e80:	e002      	b.n	8013e88 <_dtoa_r+0x6d8>
 8013e82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e84:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013e88:	9d07      	ldr	r5, [sp, #28]
 8013e8a:	464c      	mov	r4, r9
 8013e8c:	e015      	b.n	8013eba <_dtoa_r+0x70a>
 8013e8e:	9b07      	ldr	r3, [sp, #28]
 8013e90:	f108 35ff 	add.w	r5, r8, #4294967295
 8013e94:	42ab      	cmp	r3, r5
 8013e96:	bfbf      	itttt	lt
 8013e98:	9b07      	ldrlt	r3, [sp, #28]
 8013e9a:	9507      	strlt	r5, [sp, #28]
 8013e9c:	1aea      	sublt	r2, r5, r3
 8013e9e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8013ea0:	bfb7      	itett	lt
 8013ea2:	189b      	addlt	r3, r3, r2
 8013ea4:	1b5d      	subge	r5, r3, r5
 8013ea6:	930c      	strlt	r3, [sp, #48]	; 0x30
 8013ea8:	2500      	movlt	r5, #0
 8013eaa:	f1b8 0f00 	cmp.w	r8, #0
 8013eae:	bfb9      	ittee	lt
 8013eb0:	ebc8 0409 	rsblt	r4, r8, r9
 8013eb4:	2300      	movlt	r3, #0
 8013eb6:	464c      	movge	r4, r9
 8013eb8:	4643      	movge	r3, r8
 8013eba:	9a05      	ldr	r2, [sp, #20]
 8013ebc:	2101      	movs	r1, #1
 8013ebe:	441a      	add	r2, r3
 8013ec0:	4650      	mov	r0, sl
 8013ec2:	4499      	add	r9, r3
 8013ec4:	9205      	str	r2, [sp, #20]
 8013ec6:	f000 fc8f 	bl	80147e8 <__i2b>
 8013eca:	4606      	mov	r6, r0
 8013ecc:	e002      	b.n	8013ed4 <_dtoa_r+0x724>
 8013ece:	9d07      	ldr	r5, [sp, #28]
 8013ed0:	9e08      	ldr	r6, [sp, #32]
 8013ed2:	464c      	mov	r4, r9
 8013ed4:	b15c      	cbz	r4, 8013eee <_dtoa_r+0x73e>
 8013ed6:	9b05      	ldr	r3, [sp, #20]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	dd08      	ble.n	8013eee <_dtoa_r+0x73e>
 8013edc:	42a3      	cmp	r3, r4
 8013ede:	9a05      	ldr	r2, [sp, #20]
 8013ee0:	bfa8      	it	ge
 8013ee2:	4623      	movge	r3, r4
 8013ee4:	ebc3 0909 	rsb	r9, r3, r9
 8013ee8:	1ae4      	subs	r4, r4, r3
 8013eea:	1ad3      	subs	r3, r2, r3
 8013eec:	9305      	str	r3, [sp, #20]
 8013eee:	9b07      	ldr	r3, [sp, #28]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	dd1d      	ble.n	8013f30 <_dtoa_r+0x780>
 8013ef4:	9b08      	ldr	r3, [sp, #32]
 8013ef6:	b1ab      	cbz	r3, 8013f24 <_dtoa_r+0x774>
 8013ef8:	b185      	cbz	r5, 8013f1c <_dtoa_r+0x76c>
 8013efa:	4631      	mov	r1, r6
 8013efc:	462a      	mov	r2, r5
 8013efe:	4650      	mov	r0, sl
 8013f00:	f000 fd0c 	bl	801491c <__pow5mult>
 8013f04:	9a02      	ldr	r2, [sp, #8]
 8013f06:	4601      	mov	r1, r0
 8013f08:	4606      	mov	r6, r0
 8013f0a:	4650      	mov	r0, sl
 8013f0c:	f000 fc75 	bl	80147fa <__multiply>
 8013f10:	9902      	ldr	r1, [sp, #8]
 8013f12:	4607      	mov	r7, r0
 8013f14:	4650      	mov	r0, sl
 8013f16:	f000 fb8a 	bl	801462e <_Bfree>
 8013f1a:	9702      	str	r7, [sp, #8]
 8013f1c:	9b07      	ldr	r3, [sp, #28]
 8013f1e:	1b5a      	subs	r2, r3, r5
 8013f20:	d006      	beq.n	8013f30 <_dtoa_r+0x780>
 8013f22:	e000      	b.n	8013f26 <_dtoa_r+0x776>
 8013f24:	9a07      	ldr	r2, [sp, #28]
 8013f26:	9902      	ldr	r1, [sp, #8]
 8013f28:	4650      	mov	r0, sl
 8013f2a:	f000 fcf7 	bl	801491c <__pow5mult>
 8013f2e:	9002      	str	r0, [sp, #8]
 8013f30:	2101      	movs	r1, #1
 8013f32:	4650      	mov	r0, sl
 8013f34:	f000 fc58 	bl	80147e8 <__i2b>
 8013f38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f3a:	4605      	mov	r5, r0
 8013f3c:	b35b      	cbz	r3, 8013f96 <_dtoa_r+0x7e6>
 8013f3e:	461a      	mov	r2, r3
 8013f40:	4601      	mov	r1, r0
 8013f42:	4650      	mov	r0, sl
 8013f44:	f000 fcea 	bl	801491c <__pow5mult>
 8013f48:	9b06      	ldr	r3, [sp, #24]
 8013f4a:	2b01      	cmp	r3, #1
 8013f4c:	4605      	mov	r5, r0
 8013f4e:	dc18      	bgt.n	8013f82 <_dtoa_r+0x7d2>
 8013f50:	9b00      	ldr	r3, [sp, #0]
 8013f52:	b983      	cbnz	r3, 8013f76 <_dtoa_r+0x7c6>
 8013f54:	9b01      	ldr	r3, [sp, #4]
 8013f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f5a:	b973      	cbnz	r3, 8013f7a <_dtoa_r+0x7ca>
 8013f5c:	9b01      	ldr	r3, [sp, #4]
 8013f5e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8013f62:	0d3f      	lsrs	r7, r7, #20
 8013f64:	053f      	lsls	r7, r7, #20
 8013f66:	b14f      	cbz	r7, 8013f7c <_dtoa_r+0x7cc>
 8013f68:	9b05      	ldr	r3, [sp, #20]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	f109 0901 	add.w	r9, r9, #1
 8013f70:	9305      	str	r3, [sp, #20]
 8013f72:	2701      	movs	r7, #1
 8013f74:	e002      	b.n	8013f7c <_dtoa_r+0x7cc>
 8013f76:	2700      	movs	r7, #0
 8013f78:	e000      	b.n	8013f7c <_dtoa_r+0x7cc>
 8013f7a:	9f00      	ldr	r7, [sp, #0]
 8013f7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f7e:	b173      	cbz	r3, 8013f9e <_dtoa_r+0x7ee>
 8013f80:	e000      	b.n	8013f84 <_dtoa_r+0x7d4>
 8013f82:	2700      	movs	r7, #0
 8013f84:	692b      	ldr	r3, [r5, #16]
 8013f86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013f8a:	6918      	ldr	r0, [r3, #16]
 8013f8c:	f000 fbdf 	bl	801474e <__hi0bits>
 8013f90:	f1c0 0020 	rsb	r0, r0, #32
 8013f94:	e004      	b.n	8013fa0 <_dtoa_r+0x7f0>
 8013f96:	9b06      	ldr	r3, [sp, #24]
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	ddd9      	ble.n	8013f50 <_dtoa_r+0x7a0>
 8013f9c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8013f9e:	2001      	movs	r0, #1
 8013fa0:	9b05      	ldr	r3, [sp, #20]
 8013fa2:	4418      	add	r0, r3
 8013fa4:	f010 001f 	ands.w	r0, r0, #31
 8013fa8:	d00e      	beq.n	8013fc8 <_dtoa_r+0x818>
 8013faa:	f1c0 0320 	rsb	r3, r0, #32
 8013fae:	2b04      	cmp	r3, #4
 8013fb0:	dd08      	ble.n	8013fc4 <_dtoa_r+0x814>
 8013fb2:	f1c0 001c 	rsb	r0, r0, #28
 8013fb6:	e008      	b.n	8013fca <_dtoa_r+0x81a>
 8013fb8:	0802fdb0 	.word	0x0802fdb0
 8013fbc:	40140000 	.word	0x40140000
 8013fc0:	40240000 	.word	0x40240000
 8013fc4:	d006      	beq.n	8013fd4 <_dtoa_r+0x824>
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	301c      	adds	r0, #28
 8013fca:	9b05      	ldr	r3, [sp, #20]
 8013fcc:	4403      	add	r3, r0
 8013fce:	4481      	add	r9, r0
 8013fd0:	4404      	add	r4, r0
 8013fd2:	9305      	str	r3, [sp, #20]
 8013fd4:	f1b9 0f00 	cmp.w	r9, #0
 8013fd8:	dd05      	ble.n	8013fe6 <_dtoa_r+0x836>
 8013fda:	464a      	mov	r2, r9
 8013fdc:	9902      	ldr	r1, [sp, #8]
 8013fde:	4650      	mov	r0, sl
 8013fe0:	f000 fcea 	bl	80149b8 <__lshift>
 8013fe4:	9002      	str	r0, [sp, #8]
 8013fe6:	9b05      	ldr	r3, [sp, #20]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	dd05      	ble.n	8013ff8 <_dtoa_r+0x848>
 8013fec:	4629      	mov	r1, r5
 8013fee:	461a      	mov	r2, r3
 8013ff0:	4650      	mov	r0, sl
 8013ff2:	f000 fce1 	bl	80149b8 <__lshift>
 8013ff6:	4605      	mov	r5, r0
 8013ff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ffa:	b1eb      	cbz	r3, 8014038 <_dtoa_r+0x888>
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	9802      	ldr	r0, [sp, #8]
 8014000:	f000 fd2b 	bl	8014a5a <__mcmp>
 8014004:	2800      	cmp	r0, #0
 8014006:	da17      	bge.n	8014038 <_dtoa_r+0x888>
 8014008:	2300      	movs	r3, #0
 801400a:	220a      	movs	r2, #10
 801400c:	9902      	ldr	r1, [sp, #8]
 801400e:	4650      	mov	r0, sl
 8014010:	f000 fb24 	bl	801465c <__multadd>
 8014014:	9b08      	ldr	r3, [sp, #32]
 8014016:	9002      	str	r0, [sp, #8]
 8014018:	f10b 3bff 	add.w	fp, fp, #4294967295
 801401c:	2b00      	cmp	r3, #0
 801401e:	f000 8158 	beq.w	80142d2 <_dtoa_r+0xb22>
 8014022:	2300      	movs	r3, #0
 8014024:	4631      	mov	r1, r6
 8014026:	220a      	movs	r2, #10
 8014028:	4650      	mov	r0, sl
 801402a:	f000 fb17 	bl	801465c <__multadd>
 801402e:	9b03      	ldr	r3, [sp, #12]
 8014030:	2b00      	cmp	r3, #0
 8014032:	4606      	mov	r6, r0
 8014034:	dc37      	bgt.n	80140a6 <_dtoa_r+0x8f6>
 8014036:	e033      	b.n	80140a0 <_dtoa_r+0x8f0>
 8014038:	f1b8 0f00 	cmp.w	r8, #0
 801403c:	dc2a      	bgt.n	8014094 <_dtoa_r+0x8e4>
 801403e:	9b06      	ldr	r3, [sp, #24]
 8014040:	2b02      	cmp	r3, #2
 8014042:	dd27      	ble.n	8014094 <_dtoa_r+0x8e4>
 8014044:	f8cd 800c 	str.w	r8, [sp, #12]
 8014048:	9b03      	ldr	r3, [sp, #12]
 801404a:	b983      	cbnz	r3, 801406e <_dtoa_r+0x8be>
 801404c:	4629      	mov	r1, r5
 801404e:	2205      	movs	r2, #5
 8014050:	4650      	mov	r0, sl
 8014052:	f000 fb03 	bl	801465c <__multadd>
 8014056:	4601      	mov	r1, r0
 8014058:	4605      	mov	r5, r0
 801405a:	9802      	ldr	r0, [sp, #8]
 801405c:	f000 fcfd 	bl	8014a5a <__mcmp>
 8014060:	2800      	cmp	r0, #0
 8014062:	dc0d      	bgt.n	8014080 <_dtoa_r+0x8d0>
 8014064:	e003      	b.n	801406e <_dtoa_r+0x8be>
 8014066:	463d      	mov	r5, r7
 8014068:	e000      	b.n	801406c <_dtoa_r+0x8bc>
 801406a:	2500      	movs	r5, #0
 801406c:	462e      	mov	r6, r5
 801406e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014070:	9c04      	ldr	r4, [sp, #16]
 8014072:	ea6f 0b03 	mvn.w	fp, r3
 8014076:	e00a      	b.n	801408e <_dtoa_r+0x8de>
 8014078:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801407c:	463d      	mov	r5, r7
 801407e:	463e      	mov	r6, r7
 8014080:	9b04      	ldr	r3, [sp, #16]
 8014082:	9a04      	ldr	r2, [sp, #16]
 8014084:	1c5c      	adds	r4, r3, #1
 8014086:	2331      	movs	r3, #49	; 0x31
 8014088:	7013      	strb	r3, [r2, #0]
 801408a:	f10b 0b01 	add.w	fp, fp, #1
 801408e:	46b0      	mov	r8, r6
 8014090:	2600      	movs	r6, #0
 8014092:	e0f7      	b.n	8014284 <_dtoa_r+0xad4>
 8014094:	9b08      	ldr	r3, [sp, #32]
 8014096:	f8cd 800c 	str.w	r8, [sp, #12]
 801409a:	b923      	cbnz	r3, 80140a6 <_dtoa_r+0x8f6>
 801409c:	9c04      	ldr	r4, [sp, #16]
 801409e:	e0b1      	b.n	8014204 <_dtoa_r+0xa54>
 80140a0:	9b06      	ldr	r3, [sp, #24]
 80140a2:	2b02      	cmp	r3, #2
 80140a4:	dcd0      	bgt.n	8014048 <_dtoa_r+0x898>
 80140a6:	2c00      	cmp	r4, #0
 80140a8:	dd05      	ble.n	80140b6 <_dtoa_r+0x906>
 80140aa:	4631      	mov	r1, r6
 80140ac:	4622      	mov	r2, r4
 80140ae:	4650      	mov	r0, sl
 80140b0:	f000 fc82 	bl	80149b8 <__lshift>
 80140b4:	4606      	mov	r6, r0
 80140b6:	b19f      	cbz	r7, 80140e0 <_dtoa_r+0x930>
 80140b8:	6871      	ldr	r1, [r6, #4]
 80140ba:	4650      	mov	r0, sl
 80140bc:	f000 fa82 	bl	80145c4 <_Balloc>
 80140c0:	6932      	ldr	r2, [r6, #16]
 80140c2:	3202      	adds	r2, #2
 80140c4:	4604      	mov	r4, r0
 80140c6:	0092      	lsls	r2, r2, #2
 80140c8:	f106 010c 	add.w	r1, r6, #12
 80140cc:	300c      	adds	r0, #12
 80140ce:	f7fd fcb8 	bl	8011a42 <memcpy>
 80140d2:	2201      	movs	r2, #1
 80140d4:	4621      	mov	r1, r4
 80140d6:	4650      	mov	r0, sl
 80140d8:	f000 fc6e 	bl	80149b8 <__lshift>
 80140dc:	4680      	mov	r8, r0
 80140de:	e000      	b.n	80140e2 <_dtoa_r+0x932>
 80140e0:	46b0      	mov	r8, r6
 80140e2:	9b00      	ldr	r3, [sp, #0]
 80140e4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80140e8:	f003 0301 	and.w	r3, r3, #1
 80140ec:	9305      	str	r3, [sp, #20]
 80140ee:	4629      	mov	r1, r5
 80140f0:	9802      	ldr	r0, [sp, #8]
 80140f2:	f7ff facb 	bl	801368c <quorem>
 80140f6:	4631      	mov	r1, r6
 80140f8:	4604      	mov	r4, r0
 80140fa:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80140fe:	9802      	ldr	r0, [sp, #8]
 8014100:	f000 fcab 	bl	8014a5a <__mcmp>
 8014104:	4642      	mov	r2, r8
 8014106:	9000      	str	r0, [sp, #0]
 8014108:	4629      	mov	r1, r5
 801410a:	4650      	mov	r0, sl
 801410c:	f000 fcc1 	bl	8014a92 <__mdiff>
 8014110:	68c3      	ldr	r3, [r0, #12]
 8014112:	4602      	mov	r2, r0
 8014114:	b93b      	cbnz	r3, 8014126 <_dtoa_r+0x976>
 8014116:	4601      	mov	r1, r0
 8014118:	9007      	str	r0, [sp, #28]
 801411a:	9802      	ldr	r0, [sp, #8]
 801411c:	f000 fc9d 	bl	8014a5a <__mcmp>
 8014120:	9a07      	ldr	r2, [sp, #28]
 8014122:	4603      	mov	r3, r0
 8014124:	e000      	b.n	8014128 <_dtoa_r+0x978>
 8014126:	2301      	movs	r3, #1
 8014128:	4611      	mov	r1, r2
 801412a:	4650      	mov	r0, sl
 801412c:	9307      	str	r3, [sp, #28]
 801412e:	f000 fa7e 	bl	801462e <_Bfree>
 8014132:	9b07      	ldr	r3, [sp, #28]
 8014134:	b94b      	cbnz	r3, 801414a <_dtoa_r+0x99a>
 8014136:	9a06      	ldr	r2, [sp, #24]
 8014138:	b93a      	cbnz	r2, 801414a <_dtoa_r+0x99a>
 801413a:	9a05      	ldr	r2, [sp, #20]
 801413c:	b92a      	cbnz	r2, 801414a <_dtoa_r+0x99a>
 801413e:	2f39      	cmp	r7, #57	; 0x39
 8014140:	d028      	beq.n	8014194 <_dtoa_r+0x9e4>
 8014142:	9b00      	ldr	r3, [sp, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	dc1a      	bgt.n	801417e <_dtoa_r+0x9ce>
 8014148:	e01b      	b.n	8014182 <_dtoa_r+0x9d2>
 801414a:	9a00      	ldr	r2, [sp, #0]
 801414c:	2a00      	cmp	r2, #0
 801414e:	db04      	blt.n	801415a <_dtoa_r+0x9aa>
 8014150:	d11a      	bne.n	8014188 <_dtoa_r+0x9d8>
 8014152:	9a06      	ldr	r2, [sp, #24]
 8014154:	b9c2      	cbnz	r2, 8014188 <_dtoa_r+0x9d8>
 8014156:	9a05      	ldr	r2, [sp, #20]
 8014158:	b9b2      	cbnz	r2, 8014188 <_dtoa_r+0x9d8>
 801415a:	2b00      	cmp	r3, #0
 801415c:	dd11      	ble.n	8014182 <_dtoa_r+0x9d2>
 801415e:	2201      	movs	r2, #1
 8014160:	9902      	ldr	r1, [sp, #8]
 8014162:	4650      	mov	r0, sl
 8014164:	f000 fc28 	bl	80149b8 <__lshift>
 8014168:	4629      	mov	r1, r5
 801416a:	9002      	str	r0, [sp, #8]
 801416c:	f000 fc75 	bl	8014a5a <__mcmp>
 8014170:	2800      	cmp	r0, #0
 8014172:	dc02      	bgt.n	801417a <_dtoa_r+0x9ca>
 8014174:	d105      	bne.n	8014182 <_dtoa_r+0x9d2>
 8014176:	07fa      	lsls	r2, r7, #31
 8014178:	d503      	bpl.n	8014182 <_dtoa_r+0x9d2>
 801417a:	2f39      	cmp	r7, #57	; 0x39
 801417c:	d00a      	beq.n	8014194 <_dtoa_r+0x9e4>
 801417e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8014182:	f109 0401 	add.w	r4, r9, #1
 8014186:	e00c      	b.n	80141a2 <_dtoa_r+0x9f2>
 8014188:	2b00      	cmp	r3, #0
 801418a:	f109 0401 	add.w	r4, r9, #1
 801418e:	dd0b      	ble.n	80141a8 <_dtoa_r+0x9f8>
 8014190:	2f39      	cmp	r7, #57	; 0x39
 8014192:	d105      	bne.n	80141a0 <_dtoa_r+0x9f0>
 8014194:	2339      	movs	r3, #57	; 0x39
 8014196:	f889 3000 	strb.w	r3, [r9]
 801419a:	f109 0901 	add.w	r9, r9, #1
 801419e:	e054      	b.n	801424a <_dtoa_r+0xa9a>
 80141a0:	3701      	adds	r7, #1
 80141a2:	f889 7000 	strb.w	r7, [r9]
 80141a6:	e06d      	b.n	8014284 <_dtoa_r+0xad4>
 80141a8:	9b04      	ldr	r3, [sp, #16]
 80141aa:	9a03      	ldr	r2, [sp, #12]
 80141ac:	f804 7c01 	strb.w	r7, [r4, #-1]
 80141b0:	1ae3      	subs	r3, r4, r3
 80141b2:	4293      	cmp	r3, r2
 80141b4:	46a1      	mov	r9, r4
 80141b6:	d03a      	beq.n	801422e <_dtoa_r+0xa7e>
 80141b8:	2300      	movs	r3, #0
 80141ba:	220a      	movs	r2, #10
 80141bc:	9902      	ldr	r1, [sp, #8]
 80141be:	4650      	mov	r0, sl
 80141c0:	f000 fa4c 	bl	801465c <__multadd>
 80141c4:	4546      	cmp	r6, r8
 80141c6:	9002      	str	r0, [sp, #8]
 80141c8:	f04f 0300 	mov.w	r3, #0
 80141cc:	f04f 020a 	mov.w	r2, #10
 80141d0:	4631      	mov	r1, r6
 80141d2:	4650      	mov	r0, sl
 80141d4:	d104      	bne.n	80141e0 <_dtoa_r+0xa30>
 80141d6:	f000 fa41 	bl	801465c <__multadd>
 80141da:	4606      	mov	r6, r0
 80141dc:	4680      	mov	r8, r0
 80141de:	e786      	b.n	80140ee <_dtoa_r+0x93e>
 80141e0:	f000 fa3c 	bl	801465c <__multadd>
 80141e4:	4641      	mov	r1, r8
 80141e6:	4606      	mov	r6, r0
 80141e8:	2300      	movs	r3, #0
 80141ea:	220a      	movs	r2, #10
 80141ec:	4650      	mov	r0, sl
 80141ee:	f000 fa35 	bl	801465c <__multadd>
 80141f2:	4680      	mov	r8, r0
 80141f4:	e77b      	b.n	80140ee <_dtoa_r+0x93e>
 80141f6:	2300      	movs	r3, #0
 80141f8:	220a      	movs	r2, #10
 80141fa:	9902      	ldr	r1, [sp, #8]
 80141fc:	4650      	mov	r0, sl
 80141fe:	f000 fa2d 	bl	801465c <__multadd>
 8014202:	9002      	str	r0, [sp, #8]
 8014204:	4629      	mov	r1, r5
 8014206:	9802      	ldr	r0, [sp, #8]
 8014208:	f7ff fa40 	bl	801368c <quorem>
 801420c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8014210:	f804 7b01 	strb.w	r7, [r4], #1
 8014214:	9b04      	ldr	r3, [sp, #16]
 8014216:	9a03      	ldr	r2, [sp, #12]
 8014218:	1ae3      	subs	r3, r4, r3
 801421a:	4293      	cmp	r3, r2
 801421c:	dbeb      	blt.n	80141f6 <_dtoa_r+0xa46>
 801421e:	9b04      	ldr	r3, [sp, #16]
 8014220:	2a01      	cmp	r2, #1
 8014222:	bfac      	ite	ge
 8014224:	189b      	addge	r3, r3, r2
 8014226:	3301      	addlt	r3, #1
 8014228:	46b0      	mov	r8, r6
 801422a:	4699      	mov	r9, r3
 801422c:	2600      	movs	r6, #0
 801422e:	2201      	movs	r2, #1
 8014230:	9902      	ldr	r1, [sp, #8]
 8014232:	4650      	mov	r0, sl
 8014234:	f000 fbc0 	bl	80149b8 <__lshift>
 8014238:	4629      	mov	r1, r5
 801423a:	9002      	str	r0, [sp, #8]
 801423c:	f000 fc0d 	bl	8014a5a <__mcmp>
 8014240:	2800      	cmp	r0, #0
 8014242:	dc02      	bgt.n	801424a <_dtoa_r+0xa9a>
 8014244:	d115      	bne.n	8014272 <_dtoa_r+0xac2>
 8014246:	07fb      	lsls	r3, r7, #31
 8014248:	d513      	bpl.n	8014272 <_dtoa_r+0xac2>
 801424a:	464c      	mov	r4, r9
 801424c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8014250:	2b39      	cmp	r3, #57	; 0x39
 8014252:	f104 32ff 	add.w	r2, r4, #4294967295
 8014256:	d109      	bne.n	801426c <_dtoa_r+0xabc>
 8014258:	9b04      	ldr	r3, [sp, #16]
 801425a:	4293      	cmp	r3, r2
 801425c:	d104      	bne.n	8014268 <_dtoa_r+0xab8>
 801425e:	f10b 0b01 	add.w	fp, fp, #1
 8014262:	2331      	movs	r3, #49	; 0x31
 8014264:	9a04      	ldr	r2, [sp, #16]
 8014266:	e002      	b.n	801426e <_dtoa_r+0xabe>
 8014268:	4614      	mov	r4, r2
 801426a:	e7ef      	b.n	801424c <_dtoa_r+0xa9c>
 801426c:	3301      	adds	r3, #1
 801426e:	7013      	strb	r3, [r2, #0]
 8014270:	e008      	b.n	8014284 <_dtoa_r+0xad4>
 8014272:	464c      	mov	r4, r9
 8014274:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8014278:	2b30      	cmp	r3, #48	; 0x30
 801427a:	f104 32ff 	add.w	r2, r4, #4294967295
 801427e:	d101      	bne.n	8014284 <_dtoa_r+0xad4>
 8014280:	4614      	mov	r4, r2
 8014282:	e7f7      	b.n	8014274 <_dtoa_r+0xac4>
 8014284:	4629      	mov	r1, r5
 8014286:	4650      	mov	r0, sl
 8014288:	f000 f9d1 	bl	801462e <_Bfree>
 801428c:	f1b8 0f00 	cmp.w	r8, #0
 8014290:	d00d      	beq.n	80142ae <_dtoa_r+0xafe>
 8014292:	b12e      	cbz	r6, 80142a0 <_dtoa_r+0xaf0>
 8014294:	4546      	cmp	r6, r8
 8014296:	d003      	beq.n	80142a0 <_dtoa_r+0xaf0>
 8014298:	4631      	mov	r1, r6
 801429a:	4650      	mov	r0, sl
 801429c:	f000 f9c7 	bl	801462e <_Bfree>
 80142a0:	4641      	mov	r1, r8
 80142a2:	4650      	mov	r0, sl
 80142a4:	f000 f9c3 	bl	801462e <_Bfree>
 80142a8:	e001      	b.n	80142ae <_dtoa_r+0xafe>
 80142aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80142ae:	9902      	ldr	r1, [sp, #8]
 80142b0:	4650      	mov	r0, sl
 80142b2:	f000 f9bc 	bl	801462e <_Bfree>
 80142b6:	2300      	movs	r3, #0
 80142b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142ba:	7023      	strb	r3, [r4, #0]
 80142bc:	f10b 0301 	add.w	r3, fp, #1
 80142c0:	6013      	str	r3, [r2, #0]
 80142c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142c4:	b11b      	cbz	r3, 80142ce <_dtoa_r+0xb1e>
 80142c6:	601c      	str	r4, [r3, #0]
 80142c8:	e001      	b.n	80142ce <_dtoa_r+0xb1e>
 80142ca:	4808      	ldr	r0, [pc, #32]	; (80142ec <_dtoa_r+0xb3c>)
 80142cc:	e00a      	b.n	80142e4 <_dtoa_r+0xb34>
 80142ce:	9804      	ldr	r0, [sp, #16]
 80142d0:	e008      	b.n	80142e4 <_dtoa_r+0xb34>
 80142d2:	9b03      	ldr	r3, [sp, #12]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	f73f aee1 	bgt.w	801409c <_dtoa_r+0x8ec>
 80142da:	9b06      	ldr	r3, [sp, #24]
 80142dc:	2b02      	cmp	r3, #2
 80142de:	f77f aedd 	ble.w	801409c <_dtoa_r+0x8ec>
 80142e2:	e6b1      	b.n	8014048 <_dtoa_r+0x898>
 80142e4:	b017      	add	sp, #92	; 0x5c
 80142e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ea:	bf00      	nop
 80142ec:	0802fbef 	.word	0x0802fbef

080142f0 <_malloc_trim_r>:
 80142f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142f4:	4f25      	ldr	r7, [pc, #148]	; (801438c <_malloc_trim_r+0x9c>)
 80142f6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8014398 <_malloc_trim_r+0xa8>
 80142fa:	4689      	mov	r9, r1
 80142fc:	4606      	mov	r6, r0
 80142fe:	f7fd fbb3 	bl	8011a68 <__malloc_lock>
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	685d      	ldr	r5, [r3, #4]
 8014306:	f1a8 0411 	sub.w	r4, r8, #17
 801430a:	f025 0503 	bic.w	r5, r5, #3
 801430e:	442c      	add	r4, r5
 8014310:	ebc9 0404 	rsb	r4, r9, r4
 8014314:	fbb4 f4f8 	udiv	r4, r4, r8
 8014318:	3c01      	subs	r4, #1
 801431a:	fb08 f404 	mul.w	r4, r8, r4
 801431e:	4544      	cmp	r4, r8
 8014320:	da05      	bge.n	801432e <_malloc_trim_r+0x3e>
 8014322:	4630      	mov	r0, r6
 8014324:	f7fd fba1 	bl	8011a6a <__malloc_unlock>
 8014328:	2000      	movs	r0, #0
 801432a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801432e:	2100      	movs	r1, #0
 8014330:	4630      	mov	r0, r6
 8014332:	f7fd fbd5 	bl	8011ae0 <_sbrk_r>
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	442b      	add	r3, r5
 801433a:	4298      	cmp	r0, r3
 801433c:	d1f1      	bne.n	8014322 <_malloc_trim_r+0x32>
 801433e:	4261      	negs	r1, r4
 8014340:	4630      	mov	r0, r6
 8014342:	f7fd fbcd 	bl	8011ae0 <_sbrk_r>
 8014346:	3001      	adds	r0, #1
 8014348:	d110      	bne.n	801436c <_malloc_trim_r+0x7c>
 801434a:	2100      	movs	r1, #0
 801434c:	4630      	mov	r0, r6
 801434e:	f7fd fbc7 	bl	8011ae0 <_sbrk_r>
 8014352:	68ba      	ldr	r2, [r7, #8]
 8014354:	1a83      	subs	r3, r0, r2
 8014356:	2b0f      	cmp	r3, #15
 8014358:	dde3      	ble.n	8014322 <_malloc_trim_r+0x32>
 801435a:	490d      	ldr	r1, [pc, #52]	; (8014390 <_malloc_trim_r+0xa0>)
 801435c:	6809      	ldr	r1, [r1, #0]
 801435e:	1a40      	subs	r0, r0, r1
 8014360:	490c      	ldr	r1, [pc, #48]	; (8014394 <_malloc_trim_r+0xa4>)
 8014362:	f043 0301 	orr.w	r3, r3, #1
 8014366:	6008      	str	r0, [r1, #0]
 8014368:	6053      	str	r3, [r2, #4]
 801436a:	e7da      	b.n	8014322 <_malloc_trim_r+0x32>
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	4a09      	ldr	r2, [pc, #36]	; (8014394 <_malloc_trim_r+0xa4>)
 8014370:	1b2d      	subs	r5, r5, r4
 8014372:	f045 0501 	orr.w	r5, r5, #1
 8014376:	605d      	str	r5, [r3, #4]
 8014378:	6813      	ldr	r3, [r2, #0]
 801437a:	4630      	mov	r0, r6
 801437c:	1b1c      	subs	r4, r3, r4
 801437e:	6014      	str	r4, [r2, #0]
 8014380:	f7fd fb73 	bl	8011a6a <__malloc_unlock>
 8014384:	2001      	movs	r0, #1
 8014386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801438a:	bf00      	nop
 801438c:	20010090 	.word	0x20010090
 8014390:	2001049c 	.word	0x2001049c
 8014394:	20042fa0 	.word	0x20042fa0
 8014398:	00000080 	.word	0x00000080

0801439c <_free_r>:
 801439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a0:	4604      	mov	r4, r0
 80143a2:	4688      	mov	r8, r1
 80143a4:	2900      	cmp	r1, #0
 80143a6:	f000 80ad 	beq.w	8014504 <_free_r+0x168>
 80143aa:	f7fd fb5d 	bl	8011a68 <__malloc_lock>
 80143ae:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80143b2:	4d55      	ldr	r5, [pc, #340]	; (8014508 <_free_r+0x16c>)
 80143b4:	f022 0001 	bic.w	r0, r2, #1
 80143b8:	f1a8 0308 	sub.w	r3, r8, #8
 80143bc:	181f      	adds	r7, r3, r0
 80143be:	68a9      	ldr	r1, [r5, #8]
 80143c0:	687e      	ldr	r6, [r7, #4]
 80143c2:	428f      	cmp	r7, r1
 80143c4:	f026 0603 	bic.w	r6, r6, #3
 80143c8:	f002 0201 	and.w	r2, r2, #1
 80143cc:	d11b      	bne.n	8014406 <_free_r+0x6a>
 80143ce:	4430      	add	r0, r6
 80143d0:	b93a      	cbnz	r2, 80143e2 <_free_r+0x46>
 80143d2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80143d6:	1a9b      	subs	r3, r3, r2
 80143d8:	4410      	add	r0, r2
 80143da:	6899      	ldr	r1, [r3, #8]
 80143dc:	68da      	ldr	r2, [r3, #12]
 80143de:	60ca      	str	r2, [r1, #12]
 80143e0:	6091      	str	r1, [r2, #8]
 80143e2:	f040 0201 	orr.w	r2, r0, #1
 80143e6:	605a      	str	r2, [r3, #4]
 80143e8:	60ab      	str	r3, [r5, #8]
 80143ea:	4b48      	ldr	r3, [pc, #288]	; (801450c <_free_r+0x170>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	4298      	cmp	r0, r3
 80143f0:	d304      	bcc.n	80143fc <_free_r+0x60>
 80143f2:	4b47      	ldr	r3, [pc, #284]	; (8014510 <_free_r+0x174>)
 80143f4:	4620      	mov	r0, r4
 80143f6:	6819      	ldr	r1, [r3, #0]
 80143f8:	f7ff ff7a 	bl	80142f0 <_malloc_trim_r>
 80143fc:	4620      	mov	r0, r4
 80143fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014402:	f7fd bb32 	b.w	8011a6a <__malloc_unlock>
 8014406:	607e      	str	r6, [r7, #4]
 8014408:	b97a      	cbnz	r2, 801442a <_free_r+0x8e>
 801440a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801440e:	1a5b      	subs	r3, r3, r1
 8014410:	4408      	add	r0, r1
 8014412:	6899      	ldr	r1, [r3, #8]
 8014414:	f105 0e08 	add.w	lr, r5, #8
 8014418:	4571      	cmp	r1, lr
 801441a:	d008      	beq.n	801442e <_free_r+0x92>
 801441c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8014420:	f8c1 e00c 	str.w	lr, [r1, #12]
 8014424:	f8ce 1008 	str.w	r1, [lr, #8]
 8014428:	e002      	b.n	8014430 <_free_r+0x94>
 801442a:	2200      	movs	r2, #0
 801442c:	e000      	b.n	8014430 <_free_r+0x94>
 801442e:	2201      	movs	r2, #1
 8014430:	19b9      	adds	r1, r7, r6
 8014432:	6849      	ldr	r1, [r1, #4]
 8014434:	07c9      	lsls	r1, r1, #31
 8014436:	d40e      	bmi.n	8014456 <_free_r+0xba>
 8014438:	4430      	add	r0, r6
 801443a:	68b9      	ldr	r1, [r7, #8]
 801443c:	b942      	cbnz	r2, 8014450 <_free_r+0xb4>
 801443e:	4e35      	ldr	r6, [pc, #212]	; (8014514 <_free_r+0x178>)
 8014440:	42b1      	cmp	r1, r6
 8014442:	d105      	bne.n	8014450 <_free_r+0xb4>
 8014444:	616b      	str	r3, [r5, #20]
 8014446:	612b      	str	r3, [r5, #16]
 8014448:	2201      	movs	r2, #1
 801444a:	60d9      	str	r1, [r3, #12]
 801444c:	6099      	str	r1, [r3, #8]
 801444e:	e002      	b.n	8014456 <_free_r+0xba>
 8014450:	68fe      	ldr	r6, [r7, #12]
 8014452:	60ce      	str	r6, [r1, #12]
 8014454:	60b1      	str	r1, [r6, #8]
 8014456:	f040 0101 	orr.w	r1, r0, #1
 801445a:	6059      	str	r1, [r3, #4]
 801445c:	5018      	str	r0, [r3, r0]
 801445e:	2a00      	cmp	r2, #0
 8014460:	d1cc      	bne.n	80143fc <_free_r+0x60>
 8014462:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8014466:	d212      	bcs.n	801448e <_free_r+0xf2>
 8014468:	08c0      	lsrs	r0, r0, #3
 801446a:	1081      	asrs	r1, r0, #2
 801446c:	2201      	movs	r2, #1
 801446e:	fa02 f101 	lsl.w	r1, r2, r1
 8014472:	686a      	ldr	r2, [r5, #4]
 8014474:	3001      	adds	r0, #1
 8014476:	430a      	orrs	r2, r1
 8014478:	606a      	str	r2, [r5, #4]
 801447a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801447e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8014482:	6099      	str	r1, [r3, #8]
 8014484:	3a08      	subs	r2, #8
 8014486:	60da      	str	r2, [r3, #12]
 8014488:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801448c:	e038      	b.n	8014500 <_free_r+0x164>
 801448e:	0a42      	lsrs	r2, r0, #9
 8014490:	2a04      	cmp	r2, #4
 8014492:	d802      	bhi.n	801449a <_free_r+0xfe>
 8014494:	0982      	lsrs	r2, r0, #6
 8014496:	3238      	adds	r2, #56	; 0x38
 8014498:	e015      	b.n	80144c6 <_free_r+0x12a>
 801449a:	2a14      	cmp	r2, #20
 801449c:	d801      	bhi.n	80144a2 <_free_r+0x106>
 801449e:	325b      	adds	r2, #91	; 0x5b
 80144a0:	e011      	b.n	80144c6 <_free_r+0x12a>
 80144a2:	2a54      	cmp	r2, #84	; 0x54
 80144a4:	d802      	bhi.n	80144ac <_free_r+0x110>
 80144a6:	0b02      	lsrs	r2, r0, #12
 80144a8:	326e      	adds	r2, #110	; 0x6e
 80144aa:	e00c      	b.n	80144c6 <_free_r+0x12a>
 80144ac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80144b0:	d802      	bhi.n	80144b8 <_free_r+0x11c>
 80144b2:	0bc2      	lsrs	r2, r0, #15
 80144b4:	3277      	adds	r2, #119	; 0x77
 80144b6:	e006      	b.n	80144c6 <_free_r+0x12a>
 80144b8:	f240 5154 	movw	r1, #1364	; 0x554
 80144bc:	428a      	cmp	r2, r1
 80144be:	bf9a      	itte	ls
 80144c0:	0c82      	lsrls	r2, r0, #18
 80144c2:	327c      	addls	r2, #124	; 0x7c
 80144c4:	227e      	movhi	r2, #126	; 0x7e
 80144c6:	1c51      	adds	r1, r2, #1
 80144c8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80144cc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80144d0:	4f0d      	ldr	r7, [pc, #52]	; (8014508 <_free_r+0x16c>)
 80144d2:	428e      	cmp	r6, r1
 80144d4:	d10b      	bne.n	80144ee <_free_r+0x152>
 80144d6:	2101      	movs	r1, #1
 80144d8:	1092      	asrs	r2, r2, #2
 80144da:	fa01 f202 	lsl.w	r2, r1, r2
 80144de:	6879      	ldr	r1, [r7, #4]
 80144e0:	4311      	orrs	r1, r2
 80144e2:	6079      	str	r1, [r7, #4]
 80144e4:	4631      	mov	r1, r6
 80144e6:	e008      	b.n	80144fa <_free_r+0x15e>
 80144e8:	6889      	ldr	r1, [r1, #8]
 80144ea:	428e      	cmp	r6, r1
 80144ec:	d004      	beq.n	80144f8 <_free_r+0x15c>
 80144ee:	684a      	ldr	r2, [r1, #4]
 80144f0:	f022 0203 	bic.w	r2, r2, #3
 80144f4:	4290      	cmp	r0, r2
 80144f6:	d3f7      	bcc.n	80144e8 <_free_r+0x14c>
 80144f8:	68ce      	ldr	r6, [r1, #12]
 80144fa:	60de      	str	r6, [r3, #12]
 80144fc:	6099      	str	r1, [r3, #8]
 80144fe:	60b3      	str	r3, [r6, #8]
 8014500:	60cb      	str	r3, [r1, #12]
 8014502:	e77b      	b.n	80143fc <_free_r+0x60>
 8014504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014508:	20010090 	.word	0x20010090
 801450c:	20010498 	.word	0x20010498
 8014510:	20042f9c 	.word	0x20042f9c
 8014514:	20010098 	.word	0x20010098

08014518 <iswspace>:
 8014518:	28ff      	cmp	r0, #255	; 0xff
 801451a:	bf9f      	itttt	ls
 801451c:	4b04      	ldrls	r3, [pc, #16]	; (8014530 <iswspace+0x18>)
 801451e:	681b      	ldrls	r3, [r3, #0]
 8014520:	18c0      	addls	r0, r0, r3
 8014522:	7840      	ldrbls	r0, [r0, #1]
 8014524:	bf9a      	itte	ls
 8014526:	f000 0008 	andls.w	r0, r0, #8
 801452a:	b2c0      	uxtbls	r0, r0
 801452c:	2000      	movhi	r0, #0
 801452e:	4770      	bx	lr
 8014530:	2001008c 	.word	0x2001008c

08014534 <__locale_charset>:
 8014534:	4800      	ldr	r0, [pc, #0]	; (8014538 <__locale_charset+0x4>)
 8014536:	4770      	bx	lr
 8014538:	200105cc 	.word	0x200105cc

0801453c <__locale_mb_cur_max>:
 801453c:	4b01      	ldr	r3, [pc, #4]	; (8014544 <__locale_mb_cur_max+0x8>)
 801453e:	6818      	ldr	r0, [r3, #0]
 8014540:	4770      	bx	lr
 8014542:	bf00      	nop
 8014544:	200105ec 	.word	0x200105ec

08014548 <_localeconv_r>:
 8014548:	4800      	ldr	r0, [pc, #0]	; (801454c <_localeconv_r+0x4>)
 801454a:	4770      	bx	lr
 801454c:	20010594 	.word	0x20010594

08014550 <_mbrtowc_r>:
 8014550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014554:	4616      	mov	r6, r2
 8014556:	4a10      	ldr	r2, [pc, #64]	; (8014598 <_mbrtowc_r+0x48>)
 8014558:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801455a:	6817      	ldr	r7, [r2, #0]
 801455c:	4604      	mov	r4, r0
 801455e:	4688      	mov	r8, r1
 8014560:	4699      	mov	r9, r3
 8014562:	b93e      	cbnz	r6, 8014574 <_mbrtowc_r+0x24>
 8014564:	f7ff ffe6 	bl	8014534 <__locale_charset>
 8014568:	2301      	movs	r3, #1
 801456a:	e88d 0021 	stmia.w	sp, {r0, r5}
 801456e:	4a0b      	ldr	r2, [pc, #44]	; (801459c <_mbrtowc_r+0x4c>)
 8014570:	4631      	mov	r1, r6
 8014572:	e006      	b.n	8014582 <_mbrtowc_r+0x32>
 8014574:	f7ff ffde 	bl	8014534 <__locale_charset>
 8014578:	e88d 0021 	stmia.w	sp, {r0, r5}
 801457c:	464b      	mov	r3, r9
 801457e:	4632      	mov	r2, r6
 8014580:	4641      	mov	r1, r8
 8014582:	4620      	mov	r0, r4
 8014584:	47b8      	blx	r7
 8014586:	1c43      	adds	r3, r0, #1
 8014588:	bf01      	itttt	eq
 801458a:	2300      	moveq	r3, #0
 801458c:	602b      	streq	r3, [r5, #0]
 801458e:	238a      	moveq	r3, #138	; 0x8a
 8014590:	6023      	streq	r3, [r4, #0]
 8014592:	b003      	add	sp, #12
 8014594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014598:	200105f0 	.word	0x200105f0
 801459c:	0802fc0b 	.word	0x0802fc0b

080145a0 <__ascii_mbtowc>:
 80145a0:	b082      	sub	sp, #8
 80145a2:	b901      	cbnz	r1, 80145a6 <__ascii_mbtowc+0x6>
 80145a4:	a901      	add	r1, sp, #4
 80145a6:	b13a      	cbz	r2, 80145b8 <__ascii_mbtowc+0x18>
 80145a8:	b143      	cbz	r3, 80145bc <__ascii_mbtowc+0x1c>
 80145aa:	7813      	ldrb	r3, [r2, #0]
 80145ac:	600b      	str	r3, [r1, #0]
 80145ae:	7812      	ldrb	r2, [r2, #0]
 80145b0:	1c10      	adds	r0, r2, #0
 80145b2:	bf18      	it	ne
 80145b4:	2001      	movne	r0, #1
 80145b6:	e003      	b.n	80145c0 <__ascii_mbtowc+0x20>
 80145b8:	4610      	mov	r0, r2
 80145ba:	e001      	b.n	80145c0 <__ascii_mbtowc+0x20>
 80145bc:	f06f 0001 	mvn.w	r0, #1
 80145c0:	b002      	add	sp, #8
 80145c2:	4770      	bx	lr

080145c4 <_Balloc>:
 80145c4:	b570      	push	{r4, r5, r6, lr}
 80145c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80145c8:	4604      	mov	r4, r0
 80145ca:	460e      	mov	r6, r1
 80145cc:	b93d      	cbnz	r5, 80145de <_Balloc+0x1a>
 80145ce:	2010      	movs	r0, #16
 80145d0:	f7fc fff8 	bl	80115c4 <malloc>
 80145d4:	6260      	str	r0, [r4, #36]	; 0x24
 80145d6:	6045      	str	r5, [r0, #4]
 80145d8:	6085      	str	r5, [r0, #8]
 80145da:	6005      	str	r5, [r0, #0]
 80145dc:	60c5      	str	r5, [r0, #12]
 80145de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80145e0:	68eb      	ldr	r3, [r5, #12]
 80145e2:	b143      	cbz	r3, 80145f6 <_Balloc+0x32>
 80145e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80145e6:	68db      	ldr	r3, [r3, #12]
 80145e8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80145ec:	b178      	cbz	r0, 801460e <_Balloc+0x4a>
 80145ee:	6802      	ldr	r2, [r0, #0]
 80145f0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80145f4:	e017      	b.n	8014626 <_Balloc+0x62>
 80145f6:	2221      	movs	r2, #33	; 0x21
 80145f8:	2104      	movs	r1, #4
 80145fa:	4620      	mov	r0, r4
 80145fc:	f001 fdcf 	bl	801619e <_calloc_r>
 8014600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014602:	60e8      	str	r0, [r5, #12]
 8014604:	68db      	ldr	r3, [r3, #12]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d1ec      	bne.n	80145e4 <_Balloc+0x20>
 801460a:	2000      	movs	r0, #0
 801460c:	bd70      	pop	{r4, r5, r6, pc}
 801460e:	2101      	movs	r1, #1
 8014610:	fa01 f506 	lsl.w	r5, r1, r6
 8014614:	1d6a      	adds	r2, r5, #5
 8014616:	0092      	lsls	r2, r2, #2
 8014618:	4620      	mov	r0, r4
 801461a:	f001 fdc0 	bl	801619e <_calloc_r>
 801461e:	2800      	cmp	r0, #0
 8014620:	d0f3      	beq.n	801460a <_Balloc+0x46>
 8014622:	6046      	str	r6, [r0, #4]
 8014624:	6085      	str	r5, [r0, #8]
 8014626:	2300      	movs	r3, #0
 8014628:	6103      	str	r3, [r0, #16]
 801462a:	60c3      	str	r3, [r0, #12]
 801462c:	bd70      	pop	{r4, r5, r6, pc}

0801462e <_Bfree>:
 801462e:	b570      	push	{r4, r5, r6, lr}
 8014630:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014632:	4606      	mov	r6, r0
 8014634:	460d      	mov	r5, r1
 8014636:	b93c      	cbnz	r4, 8014648 <_Bfree+0x1a>
 8014638:	2010      	movs	r0, #16
 801463a:	f7fc ffc3 	bl	80115c4 <malloc>
 801463e:	6270      	str	r0, [r6, #36]	; 0x24
 8014640:	6044      	str	r4, [r0, #4]
 8014642:	6084      	str	r4, [r0, #8]
 8014644:	6004      	str	r4, [r0, #0]
 8014646:	60c4      	str	r4, [r0, #12]
 8014648:	b13d      	cbz	r5, 801465a <_Bfree+0x2c>
 801464a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801464c:	686a      	ldr	r2, [r5, #4]
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014654:	6029      	str	r1, [r5, #0]
 8014656:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801465a:	bd70      	pop	{r4, r5, r6, pc}

0801465c <__multadd>:
 801465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014660:	690d      	ldr	r5, [r1, #16]
 8014662:	461f      	mov	r7, r3
 8014664:	4606      	mov	r6, r0
 8014666:	460c      	mov	r4, r1
 8014668:	f101 0e14 	add.w	lr, r1, #20
 801466c:	2300      	movs	r3, #0
 801466e:	f8de 0000 	ldr.w	r0, [lr]
 8014672:	b281      	uxth	r1, r0
 8014674:	fb02 7101 	mla	r1, r2, r1, r7
 8014678:	0c0f      	lsrs	r7, r1, #16
 801467a:	0c00      	lsrs	r0, r0, #16
 801467c:	fb02 7000 	mla	r0, r2, r0, r7
 8014680:	b289      	uxth	r1, r1
 8014682:	3301      	adds	r3, #1
 8014684:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014688:	429d      	cmp	r5, r3
 801468a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801468e:	f84e 1b04 	str.w	r1, [lr], #4
 8014692:	dcec      	bgt.n	801466e <__multadd+0x12>
 8014694:	b1d7      	cbz	r7, 80146cc <__multadd+0x70>
 8014696:	68a3      	ldr	r3, [r4, #8]
 8014698:	429d      	cmp	r5, r3
 801469a:	db12      	blt.n	80146c2 <__multadd+0x66>
 801469c:	6861      	ldr	r1, [r4, #4]
 801469e:	4630      	mov	r0, r6
 80146a0:	3101      	adds	r1, #1
 80146a2:	f7ff ff8f 	bl	80145c4 <_Balloc>
 80146a6:	6922      	ldr	r2, [r4, #16]
 80146a8:	3202      	adds	r2, #2
 80146aa:	f104 010c 	add.w	r1, r4, #12
 80146ae:	4680      	mov	r8, r0
 80146b0:	0092      	lsls	r2, r2, #2
 80146b2:	300c      	adds	r0, #12
 80146b4:	f7fd f9c5 	bl	8011a42 <memcpy>
 80146b8:	4621      	mov	r1, r4
 80146ba:	4630      	mov	r0, r6
 80146bc:	f7ff ffb7 	bl	801462e <_Bfree>
 80146c0:	4644      	mov	r4, r8
 80146c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80146c6:	3501      	adds	r5, #1
 80146c8:	615f      	str	r7, [r3, #20]
 80146ca:	6125      	str	r5, [r4, #16]
 80146cc:	4620      	mov	r0, r4
 80146ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080146d2 <__s2b>:
 80146d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146d6:	460c      	mov	r4, r1
 80146d8:	4615      	mov	r5, r2
 80146da:	461f      	mov	r7, r3
 80146dc:	2209      	movs	r2, #9
 80146de:	3308      	adds	r3, #8
 80146e0:	4606      	mov	r6, r0
 80146e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80146e6:	2100      	movs	r1, #0
 80146e8:	2201      	movs	r2, #1
 80146ea:	429a      	cmp	r2, r3
 80146ec:	da02      	bge.n	80146f4 <__s2b+0x22>
 80146ee:	0052      	lsls	r2, r2, #1
 80146f0:	3101      	adds	r1, #1
 80146f2:	e7fa      	b.n	80146ea <__s2b+0x18>
 80146f4:	4630      	mov	r0, r6
 80146f6:	f7ff ff65 	bl	80145c4 <_Balloc>
 80146fa:	9b08      	ldr	r3, [sp, #32]
 80146fc:	6143      	str	r3, [r0, #20]
 80146fe:	2d09      	cmp	r5, #9
 8014700:	f04f 0301 	mov.w	r3, #1
 8014704:	6103      	str	r3, [r0, #16]
 8014706:	dd11      	ble.n	801472c <__s2b+0x5a>
 8014708:	f104 0809 	add.w	r8, r4, #9
 801470c:	46c1      	mov	r9, r8
 801470e:	442c      	add	r4, r5
 8014710:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014714:	4601      	mov	r1, r0
 8014716:	3b30      	subs	r3, #48	; 0x30
 8014718:	220a      	movs	r2, #10
 801471a:	4630      	mov	r0, r6
 801471c:	f7ff ff9e 	bl	801465c <__multadd>
 8014720:	45a1      	cmp	r9, r4
 8014722:	d1f5      	bne.n	8014710 <__s2b+0x3e>
 8014724:	eb08 0405 	add.w	r4, r8, r5
 8014728:	3c08      	subs	r4, #8
 801472a:	e001      	b.n	8014730 <__s2b+0x5e>
 801472c:	340a      	adds	r4, #10
 801472e:	2509      	movs	r5, #9
 8014730:	1b2d      	subs	r5, r5, r4
 8014732:	1963      	adds	r3, r4, r5
 8014734:	429f      	cmp	r7, r3
 8014736:	dd08      	ble.n	801474a <__s2b+0x78>
 8014738:	f814 3b01 	ldrb.w	r3, [r4], #1
 801473c:	4601      	mov	r1, r0
 801473e:	3b30      	subs	r3, #48	; 0x30
 8014740:	220a      	movs	r2, #10
 8014742:	4630      	mov	r0, r6
 8014744:	f7ff ff8a 	bl	801465c <__multadd>
 8014748:	e7f3      	b.n	8014732 <__s2b+0x60>
 801474a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801474e <__hi0bits>:
 801474e:	0c03      	lsrs	r3, r0, #16
 8014750:	041b      	lsls	r3, r3, #16
 8014752:	b913      	cbnz	r3, 801475a <__hi0bits+0xc>
 8014754:	0400      	lsls	r0, r0, #16
 8014756:	2310      	movs	r3, #16
 8014758:	e000      	b.n	801475c <__hi0bits+0xe>
 801475a:	2300      	movs	r3, #0
 801475c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014760:	bf04      	itt	eq
 8014762:	0200      	lsleq	r0, r0, #8
 8014764:	3308      	addeq	r3, #8
 8014766:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801476a:	bf04      	itt	eq
 801476c:	0100      	lsleq	r0, r0, #4
 801476e:	3304      	addeq	r3, #4
 8014770:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014774:	bf04      	itt	eq
 8014776:	0080      	lsleq	r0, r0, #2
 8014778:	3302      	addeq	r3, #2
 801477a:	2800      	cmp	r0, #0
 801477c:	db03      	blt.n	8014786 <__hi0bits+0x38>
 801477e:	0042      	lsls	r2, r0, #1
 8014780:	d503      	bpl.n	801478a <__hi0bits+0x3c>
 8014782:	1c58      	adds	r0, r3, #1
 8014784:	4770      	bx	lr
 8014786:	4618      	mov	r0, r3
 8014788:	4770      	bx	lr
 801478a:	2020      	movs	r0, #32
 801478c:	4770      	bx	lr

0801478e <__lo0bits>:
 801478e:	6803      	ldr	r3, [r0, #0]
 8014790:	f013 0207 	ands.w	r2, r3, #7
 8014794:	d00b      	beq.n	80147ae <__lo0bits+0x20>
 8014796:	07d9      	lsls	r1, r3, #31
 8014798:	d422      	bmi.n	80147e0 <__lo0bits+0x52>
 801479a:	079a      	lsls	r2, r3, #30
 801479c:	bf4b      	itete	mi
 801479e:	085b      	lsrmi	r3, r3, #1
 80147a0:	089b      	lsrpl	r3, r3, #2
 80147a2:	6003      	strmi	r3, [r0, #0]
 80147a4:	6003      	strpl	r3, [r0, #0]
 80147a6:	bf4c      	ite	mi
 80147a8:	2001      	movmi	r0, #1
 80147aa:	2002      	movpl	r0, #2
 80147ac:	4770      	bx	lr
 80147ae:	b299      	uxth	r1, r3
 80147b0:	b909      	cbnz	r1, 80147b6 <__lo0bits+0x28>
 80147b2:	0c1b      	lsrs	r3, r3, #16
 80147b4:	2210      	movs	r2, #16
 80147b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80147ba:	bf04      	itt	eq
 80147bc:	0a1b      	lsreq	r3, r3, #8
 80147be:	3208      	addeq	r2, #8
 80147c0:	0719      	lsls	r1, r3, #28
 80147c2:	bf04      	itt	eq
 80147c4:	091b      	lsreq	r3, r3, #4
 80147c6:	3204      	addeq	r2, #4
 80147c8:	0799      	lsls	r1, r3, #30
 80147ca:	bf04      	itt	eq
 80147cc:	089b      	lsreq	r3, r3, #2
 80147ce:	3202      	addeq	r2, #2
 80147d0:	07d9      	lsls	r1, r3, #31
 80147d2:	d402      	bmi.n	80147da <__lo0bits+0x4c>
 80147d4:	085b      	lsrs	r3, r3, #1
 80147d6:	d005      	beq.n	80147e4 <__lo0bits+0x56>
 80147d8:	3201      	adds	r2, #1
 80147da:	6003      	str	r3, [r0, #0]
 80147dc:	4610      	mov	r0, r2
 80147de:	4770      	bx	lr
 80147e0:	2000      	movs	r0, #0
 80147e2:	4770      	bx	lr
 80147e4:	2020      	movs	r0, #32
 80147e6:	4770      	bx	lr

080147e8 <__i2b>:
 80147e8:	b510      	push	{r4, lr}
 80147ea:	460c      	mov	r4, r1
 80147ec:	2101      	movs	r1, #1
 80147ee:	f7ff fee9 	bl	80145c4 <_Balloc>
 80147f2:	2201      	movs	r2, #1
 80147f4:	6144      	str	r4, [r0, #20]
 80147f6:	6102      	str	r2, [r0, #16]
 80147f8:	bd10      	pop	{r4, pc}

080147fa <__multiply>:
 80147fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147fe:	4614      	mov	r4, r2
 8014800:	690a      	ldr	r2, [r1, #16]
 8014802:	6923      	ldr	r3, [r4, #16]
 8014804:	429a      	cmp	r2, r3
 8014806:	bfb8      	it	lt
 8014808:	460b      	movlt	r3, r1
 801480a:	4688      	mov	r8, r1
 801480c:	bfbc      	itt	lt
 801480e:	46a0      	movlt	r8, r4
 8014810:	461c      	movlt	r4, r3
 8014812:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014816:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801481a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801481e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014822:	eb07 0609 	add.w	r6, r7, r9
 8014826:	429e      	cmp	r6, r3
 8014828:	bfc8      	it	gt
 801482a:	3101      	addgt	r1, #1
 801482c:	f7ff feca 	bl	80145c4 <_Balloc>
 8014830:	f100 0514 	add.w	r5, r0, #20
 8014834:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8014838:	462b      	mov	r3, r5
 801483a:	2200      	movs	r2, #0
 801483c:	4563      	cmp	r3, ip
 801483e:	d202      	bcs.n	8014846 <__multiply+0x4c>
 8014840:	f843 2b04 	str.w	r2, [r3], #4
 8014844:	e7fa      	b.n	801483c <__multiply+0x42>
 8014846:	f104 0214 	add.w	r2, r4, #20
 801484a:	f108 0114 	add.w	r1, r8, #20
 801484e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014852:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014856:	9300      	str	r3, [sp, #0]
 8014858:	9b00      	ldr	r3, [sp, #0]
 801485a:	9201      	str	r2, [sp, #4]
 801485c:	4293      	cmp	r3, r2
 801485e:	d957      	bls.n	8014910 <__multiply+0x116>
 8014860:	f8b2 b000 	ldrh.w	fp, [r2]
 8014864:	f1bb 0f00 	cmp.w	fp, #0
 8014868:	d023      	beq.n	80148b2 <__multiply+0xb8>
 801486a:	4689      	mov	r9, r1
 801486c:	46ae      	mov	lr, r5
 801486e:	f04f 0800 	mov.w	r8, #0
 8014872:	f859 4b04 	ldr.w	r4, [r9], #4
 8014876:	f8be a000 	ldrh.w	sl, [lr]
 801487a:	b2a3      	uxth	r3, r4
 801487c:	fb0b a303 	mla	r3, fp, r3, sl
 8014880:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014884:	f8de 4000 	ldr.w	r4, [lr]
 8014888:	4443      	add	r3, r8
 801488a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801488e:	fb0b 840a 	mla	r4, fp, sl, r8
 8014892:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014896:	46f2      	mov	sl, lr
 8014898:	b29b      	uxth	r3, r3
 801489a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801489e:	454f      	cmp	r7, r9
 80148a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80148a4:	f84a 3b04 	str.w	r3, [sl], #4
 80148a8:	d901      	bls.n	80148ae <__multiply+0xb4>
 80148aa:	46d6      	mov	lr, sl
 80148ac:	e7e1      	b.n	8014872 <__multiply+0x78>
 80148ae:	f8ce 8004 	str.w	r8, [lr, #4]
 80148b2:	9b01      	ldr	r3, [sp, #4]
 80148b4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80148b8:	3204      	adds	r2, #4
 80148ba:	f1ba 0f00 	cmp.w	sl, #0
 80148be:	d021      	beq.n	8014904 <__multiply+0x10a>
 80148c0:	682b      	ldr	r3, [r5, #0]
 80148c2:	462c      	mov	r4, r5
 80148c4:	4689      	mov	r9, r1
 80148c6:	f04f 0800 	mov.w	r8, #0
 80148ca:	f8b9 e000 	ldrh.w	lr, [r9]
 80148ce:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80148d2:	fb0a be0e 	mla	lr, sl, lr, fp
 80148d6:	44f0      	add	r8, lr
 80148d8:	46a3      	mov	fp, r4
 80148da:	b29b      	uxth	r3, r3
 80148dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80148e0:	f84b 3b04 	str.w	r3, [fp], #4
 80148e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80148e8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80148ec:	0c1b      	lsrs	r3, r3, #16
 80148ee:	fb0a e303 	mla	r3, sl, r3, lr
 80148f2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80148f6:	454f      	cmp	r7, r9
 80148f8:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80148fc:	d901      	bls.n	8014902 <__multiply+0x108>
 80148fe:	465c      	mov	r4, fp
 8014900:	e7e3      	b.n	80148ca <__multiply+0xd0>
 8014902:	6063      	str	r3, [r4, #4]
 8014904:	3504      	adds	r5, #4
 8014906:	e7a7      	b.n	8014858 <__multiply+0x5e>
 8014908:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 801490c:	b913      	cbnz	r3, 8014914 <__multiply+0x11a>
 801490e:	3e01      	subs	r6, #1
 8014910:	2e00      	cmp	r6, #0
 8014912:	dcf9      	bgt.n	8014908 <__multiply+0x10e>
 8014914:	6106      	str	r6, [r0, #16]
 8014916:	b003      	add	sp, #12
 8014918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801491c <__pow5mult>:
 801491c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014920:	4615      	mov	r5, r2
 8014922:	f012 0203 	ands.w	r2, r2, #3
 8014926:	4606      	mov	r6, r0
 8014928:	460f      	mov	r7, r1
 801492a:	d007      	beq.n	801493c <__pow5mult+0x20>
 801492c:	3a01      	subs	r2, #1
 801492e:	4c21      	ldr	r4, [pc, #132]	; (80149b4 <__pow5mult+0x98>)
 8014930:	2300      	movs	r3, #0
 8014932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014936:	f7ff fe91 	bl	801465c <__multadd>
 801493a:	4607      	mov	r7, r0
 801493c:	10ad      	asrs	r5, r5, #2
 801493e:	d036      	beq.n	80149ae <__pow5mult+0x92>
 8014940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014942:	b93c      	cbnz	r4, 8014954 <__pow5mult+0x38>
 8014944:	2010      	movs	r0, #16
 8014946:	f7fc fe3d 	bl	80115c4 <malloc>
 801494a:	6270      	str	r0, [r6, #36]	; 0x24
 801494c:	6044      	str	r4, [r0, #4]
 801494e:	6084      	str	r4, [r0, #8]
 8014950:	6004      	str	r4, [r0, #0]
 8014952:	60c4      	str	r4, [r0, #12]
 8014954:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801495c:	b94c      	cbnz	r4, 8014972 <__pow5mult+0x56>
 801495e:	f240 2171 	movw	r1, #625	; 0x271
 8014962:	4630      	mov	r0, r6
 8014964:	f7ff ff40 	bl	80147e8 <__i2b>
 8014968:	2300      	movs	r3, #0
 801496a:	f8c8 0008 	str.w	r0, [r8, #8]
 801496e:	4604      	mov	r4, r0
 8014970:	6003      	str	r3, [r0, #0]
 8014972:	f04f 0800 	mov.w	r8, #0
 8014976:	07eb      	lsls	r3, r5, #31
 8014978:	d50a      	bpl.n	8014990 <__pow5mult+0x74>
 801497a:	4639      	mov	r1, r7
 801497c:	4622      	mov	r2, r4
 801497e:	4630      	mov	r0, r6
 8014980:	f7ff ff3b 	bl	80147fa <__multiply>
 8014984:	4639      	mov	r1, r7
 8014986:	4681      	mov	r9, r0
 8014988:	4630      	mov	r0, r6
 801498a:	f7ff fe50 	bl	801462e <_Bfree>
 801498e:	464f      	mov	r7, r9
 8014990:	106d      	asrs	r5, r5, #1
 8014992:	d00c      	beq.n	80149ae <__pow5mult+0x92>
 8014994:	6820      	ldr	r0, [r4, #0]
 8014996:	b108      	cbz	r0, 801499c <__pow5mult+0x80>
 8014998:	4604      	mov	r4, r0
 801499a:	e7ec      	b.n	8014976 <__pow5mult+0x5a>
 801499c:	4622      	mov	r2, r4
 801499e:	4621      	mov	r1, r4
 80149a0:	4630      	mov	r0, r6
 80149a2:	f7ff ff2a 	bl	80147fa <__multiply>
 80149a6:	6020      	str	r0, [r4, #0]
 80149a8:	f8c0 8000 	str.w	r8, [r0]
 80149ac:	e7f4      	b.n	8014998 <__pow5mult+0x7c>
 80149ae:	4638      	mov	r0, r7
 80149b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b4:	0802fea0 	.word	0x0802fea0

080149b8 <__lshift>:
 80149b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149bc:	460c      	mov	r4, r1
 80149be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80149c2:	6926      	ldr	r6, [r4, #16]
 80149c4:	6849      	ldr	r1, [r1, #4]
 80149c6:	68a3      	ldr	r3, [r4, #8]
 80149c8:	4456      	add	r6, sl
 80149ca:	4607      	mov	r7, r0
 80149cc:	4691      	mov	r9, r2
 80149ce:	1c75      	adds	r5, r6, #1
 80149d0:	42ab      	cmp	r3, r5
 80149d2:	da02      	bge.n	80149da <__lshift+0x22>
 80149d4:	3101      	adds	r1, #1
 80149d6:	005b      	lsls	r3, r3, #1
 80149d8:	e7fa      	b.n	80149d0 <__lshift+0x18>
 80149da:	4638      	mov	r0, r7
 80149dc:	f7ff fdf2 	bl	80145c4 <_Balloc>
 80149e0:	2300      	movs	r3, #0
 80149e2:	4680      	mov	r8, r0
 80149e4:	f100 0114 	add.w	r1, r0, #20
 80149e8:	461a      	mov	r2, r3
 80149ea:	4553      	cmp	r3, sl
 80149ec:	da03      	bge.n	80149f6 <__lshift+0x3e>
 80149ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80149f2:	3301      	adds	r3, #1
 80149f4:	e7f9      	b.n	80149ea <__lshift+0x32>
 80149f6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80149fa:	6920      	ldr	r0, [r4, #16]
 80149fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014a00:	f019 091f 	ands.w	r9, r9, #31
 8014a04:	f104 0114 	add.w	r1, r4, #20
 8014a08:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8014a0c:	d014      	beq.n	8014a38 <__lshift+0x80>
 8014a0e:	f1c9 0c20 	rsb	ip, r9, #32
 8014a12:	2200      	movs	r2, #0
 8014a14:	6808      	ldr	r0, [r1, #0]
 8014a16:	fa00 f009 	lsl.w	r0, r0, r9
 8014a1a:	4302      	orrs	r2, r0
 8014a1c:	469a      	mov	sl, r3
 8014a1e:	f843 2b04 	str.w	r2, [r3], #4
 8014a22:	f851 2b04 	ldr.w	r2, [r1], #4
 8014a26:	458e      	cmp	lr, r1
 8014a28:	fa22 f20c 	lsr.w	r2, r2, ip
 8014a2c:	d8f2      	bhi.n	8014a14 <__lshift+0x5c>
 8014a2e:	f8ca 2004 	str.w	r2, [sl, #4]
 8014a32:	b142      	cbz	r2, 8014a46 <__lshift+0x8e>
 8014a34:	1cb5      	adds	r5, r6, #2
 8014a36:	e006      	b.n	8014a46 <__lshift+0x8e>
 8014a38:	3b04      	subs	r3, #4
 8014a3a:	f851 2b04 	ldr.w	r2, [r1], #4
 8014a3e:	f843 2f04 	str.w	r2, [r3, #4]!
 8014a42:	458e      	cmp	lr, r1
 8014a44:	d8f9      	bhi.n	8014a3a <__lshift+0x82>
 8014a46:	3d01      	subs	r5, #1
 8014a48:	4638      	mov	r0, r7
 8014a4a:	f8c8 5010 	str.w	r5, [r8, #16]
 8014a4e:	4621      	mov	r1, r4
 8014a50:	f7ff fded 	bl	801462e <_Bfree>
 8014a54:	4640      	mov	r0, r8
 8014a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014a5a <__mcmp>:
 8014a5a:	6903      	ldr	r3, [r0, #16]
 8014a5c:	690a      	ldr	r2, [r1, #16]
 8014a5e:	1a9b      	subs	r3, r3, r2
 8014a60:	b510      	push	{r4, lr}
 8014a62:	d111      	bne.n	8014a88 <__mcmp+0x2e>
 8014a64:	0092      	lsls	r2, r2, #2
 8014a66:	3014      	adds	r0, #20
 8014a68:	3114      	adds	r1, #20
 8014a6a:	1883      	adds	r3, r0, r2
 8014a6c:	440a      	add	r2, r1
 8014a6e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8014a72:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014a76:	428c      	cmp	r4, r1
 8014a78:	d002      	beq.n	8014a80 <__mcmp+0x26>
 8014a7a:	d307      	bcc.n	8014a8c <__mcmp+0x32>
 8014a7c:	2001      	movs	r0, #1
 8014a7e:	bd10      	pop	{r4, pc}
 8014a80:	4298      	cmp	r0, r3
 8014a82:	d3f4      	bcc.n	8014a6e <__mcmp+0x14>
 8014a84:	2000      	movs	r0, #0
 8014a86:	bd10      	pop	{r4, pc}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	bd10      	pop	{r4, pc}
 8014a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a90:	bd10      	pop	{r4, pc}

08014a92 <__mdiff>:
 8014a92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a96:	460c      	mov	r4, r1
 8014a98:	4607      	mov	r7, r0
 8014a9a:	4611      	mov	r1, r2
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	4615      	mov	r5, r2
 8014aa0:	f7ff ffdb 	bl	8014a5a <__mcmp>
 8014aa4:	1e06      	subs	r6, r0, #0
 8014aa6:	d108      	bne.n	8014aba <__mdiff+0x28>
 8014aa8:	4631      	mov	r1, r6
 8014aaa:	4638      	mov	r0, r7
 8014aac:	f7ff fd8a 	bl	80145c4 <_Balloc>
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	6103      	str	r3, [r0, #16]
 8014ab4:	6146      	str	r6, [r0, #20]
 8014ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aba:	bfbc      	itt	lt
 8014abc:	4623      	movlt	r3, r4
 8014abe:	462c      	movlt	r4, r5
 8014ac0:	4638      	mov	r0, r7
 8014ac2:	6861      	ldr	r1, [r4, #4]
 8014ac4:	bfba      	itte	lt
 8014ac6:	461d      	movlt	r5, r3
 8014ac8:	2601      	movlt	r6, #1
 8014aca:	2600      	movge	r6, #0
 8014acc:	f7ff fd7a 	bl	80145c4 <_Balloc>
 8014ad0:	692b      	ldr	r3, [r5, #16]
 8014ad2:	60c6      	str	r6, [r0, #12]
 8014ad4:	6926      	ldr	r6, [r4, #16]
 8014ad6:	f105 0914 	add.w	r9, r5, #20
 8014ada:	3414      	adds	r4, #20
 8014adc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8014ae0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014ae4:	f100 0514 	add.w	r5, r0, #20
 8014ae8:	f04f 0c00 	mov.w	ip, #0
 8014aec:	f854 3b04 	ldr.w	r3, [r4], #4
 8014af0:	f859 2b04 	ldr.w	r2, [r9], #4
 8014af4:	fa1c f183 	uxtah	r1, ip, r3
 8014af8:	fa1f fe82 	uxth.w	lr, r2
 8014afc:	0c12      	lsrs	r2, r2, #16
 8014afe:	ebce 0101 	rsb	r1, lr, r1
 8014b02:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8014b06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014b0a:	b289      	uxth	r1, r1
 8014b0c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014b10:	45c8      	cmp	r8, r9
 8014b12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014b16:	46a6      	mov	lr, r4
 8014b18:	f845 3b04 	str.w	r3, [r5], #4
 8014b1c:	d8e6      	bhi.n	8014aec <__mdiff+0x5a>
 8014b1e:	45be      	cmp	lr, r7
 8014b20:	d20e      	bcs.n	8014b40 <__mdiff+0xae>
 8014b22:	f85e 1b04 	ldr.w	r1, [lr], #4
 8014b26:	fa1c f281 	uxtah	r2, ip, r1
 8014b2a:	1413      	asrs	r3, r2, #16
 8014b2c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8014b30:	b292      	uxth	r2, r2
 8014b32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014b36:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014b3a:	f845 2b04 	str.w	r2, [r5], #4
 8014b3e:	e7ee      	b.n	8014b1e <__mdiff+0x8c>
 8014b40:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014b44:	b90b      	cbnz	r3, 8014b4a <__mdiff+0xb8>
 8014b46:	3e01      	subs	r6, #1
 8014b48:	e7fa      	b.n	8014b40 <__mdiff+0xae>
 8014b4a:	6106      	str	r6, [r0, #16]
 8014b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08014b50 <__ulp>:
 8014b50:	4b12      	ldr	r3, [pc, #72]	; (8014b9c <__ulp+0x4c>)
 8014b52:	ee10 2a90 	vmov	r2, s1
 8014b56:	401a      	ands	r2, r3
 8014b58:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	dd02      	ble.n	8014b66 <__ulp+0x16>
 8014b60:	2000      	movs	r0, #0
 8014b62:	4619      	mov	r1, r3
 8014b64:	e017      	b.n	8014b96 <__ulp+0x46>
 8014b66:	425b      	negs	r3, r3
 8014b68:	151b      	asrs	r3, r3, #20
 8014b6a:	2b13      	cmp	r3, #19
 8014b6c:	f04f 0000 	mov.w	r0, #0
 8014b70:	f04f 0100 	mov.w	r1, #0
 8014b74:	dc04      	bgt.n	8014b80 <__ulp+0x30>
 8014b76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014b7a:	fa42 f103 	asr.w	r1, r2, r3
 8014b7e:	e00a      	b.n	8014b96 <__ulp+0x46>
 8014b80:	3b14      	subs	r3, #20
 8014b82:	2b1e      	cmp	r3, #30
 8014b84:	f04f 0201 	mov.w	r2, #1
 8014b88:	bfda      	itte	le
 8014b8a:	f1c3 031f 	rsble	r3, r3, #31
 8014b8e:	fa02 f303 	lslle.w	r3, r2, r3
 8014b92:	4613      	movgt	r3, r2
 8014b94:	4618      	mov	r0, r3
 8014b96:	ec41 0b10 	vmov	d0, r0, r1
 8014b9a:	4770      	bx	lr
 8014b9c:	7ff00000 	.word	0x7ff00000

08014ba0 <__b2d>:
 8014ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ba2:	6905      	ldr	r5, [r0, #16]
 8014ba4:	f100 0614 	add.w	r6, r0, #20
 8014ba8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8014bac:	1f2f      	subs	r7, r5, #4
 8014bae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014bb2:	4620      	mov	r0, r4
 8014bb4:	f7ff fdcb 	bl	801474e <__hi0bits>
 8014bb8:	f1c0 0320 	rsb	r3, r0, #32
 8014bbc:	280a      	cmp	r0, #10
 8014bbe:	600b      	str	r3, [r1, #0]
 8014bc0:	dc14      	bgt.n	8014bec <__b2d+0x4c>
 8014bc2:	f1c0 0e0b 	rsb	lr, r0, #11
 8014bc6:	fa24 f10e 	lsr.w	r1, r4, lr
 8014bca:	42be      	cmp	r6, r7
 8014bcc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8014bd0:	bf34      	ite	cc
 8014bd2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014bd6:	2100      	movcs	r1, #0
 8014bd8:	3015      	adds	r0, #21
 8014bda:	fa04 f000 	lsl.w	r0, r4, r0
 8014bde:	fa21 f10e 	lsr.w	r1, r1, lr
 8014be2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014be6:	ea40 0201 	orr.w	r2, r0, r1
 8014bea:	e023      	b.n	8014c34 <__b2d+0x94>
 8014bec:	42be      	cmp	r6, r7
 8014bee:	bf3a      	itte	cc
 8014bf0:	f1a5 0708 	subcc.w	r7, r5, #8
 8014bf4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014bf8:	2100      	movcs	r1, #0
 8014bfa:	380b      	subs	r0, #11
 8014bfc:	d015      	beq.n	8014c2a <__b2d+0x8a>
 8014bfe:	4084      	lsls	r4, r0
 8014c00:	f1c0 0520 	rsb	r5, r0, #32
 8014c04:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8014c08:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014c0c:	42b7      	cmp	r7, r6
 8014c0e:	fa21 fe05 	lsr.w	lr, r1, r5
 8014c12:	ea44 030e 	orr.w	r3, r4, lr
 8014c16:	bf8c      	ite	hi
 8014c18:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8014c1c:	2400      	movls	r4, #0
 8014c1e:	fa01 f000 	lsl.w	r0, r1, r0
 8014c22:	40ec      	lsrs	r4, r5
 8014c24:	ea40 0204 	orr.w	r2, r0, r4
 8014c28:	e004      	b.n	8014c34 <__b2d+0x94>
 8014c2a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8014c2e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014c32:	460a      	mov	r2, r1
 8014c34:	ec43 2b10 	vmov	d0, r2, r3
 8014c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014c3a <__d2b>:
 8014c3a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014c3e:	460e      	mov	r6, r1
 8014c40:	2101      	movs	r1, #1
 8014c42:	ec59 8b10 	vmov	r8, r9, d0
 8014c46:	4615      	mov	r5, r2
 8014c48:	f7ff fcbc 	bl	80145c4 <_Balloc>
 8014c4c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014c50:	4607      	mov	r7, r0
 8014c52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014c56:	b10c      	cbz	r4, 8014c5c <__d2b+0x22>
 8014c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	f1b8 0f00 	cmp.w	r8, #0
 8014c62:	d019      	beq.n	8014c98 <__d2b+0x5e>
 8014c64:	a802      	add	r0, sp, #8
 8014c66:	f840 8d08 	str.w	r8, [r0, #-8]!
 8014c6a:	f7ff fd90 	bl	801478e <__lo0bits>
 8014c6e:	9b00      	ldr	r3, [sp, #0]
 8014c70:	b148      	cbz	r0, 8014c86 <__d2b+0x4c>
 8014c72:	9a01      	ldr	r2, [sp, #4]
 8014c74:	f1c0 0120 	rsb	r1, r0, #32
 8014c78:	fa02 f101 	lsl.w	r1, r2, r1
 8014c7c:	430b      	orrs	r3, r1
 8014c7e:	40c2      	lsrs	r2, r0
 8014c80:	617b      	str	r3, [r7, #20]
 8014c82:	9201      	str	r2, [sp, #4]
 8014c84:	e000      	b.n	8014c88 <__d2b+0x4e>
 8014c86:	617b      	str	r3, [r7, #20]
 8014c88:	9b01      	ldr	r3, [sp, #4]
 8014c8a:	61bb      	str	r3, [r7, #24]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	bf14      	ite	ne
 8014c90:	2102      	movne	r1, #2
 8014c92:	2101      	moveq	r1, #1
 8014c94:	6139      	str	r1, [r7, #16]
 8014c96:	e007      	b.n	8014ca8 <__d2b+0x6e>
 8014c98:	a801      	add	r0, sp, #4
 8014c9a:	f7ff fd78 	bl	801478e <__lo0bits>
 8014c9e:	9b01      	ldr	r3, [sp, #4]
 8014ca0:	617b      	str	r3, [r7, #20]
 8014ca2:	2101      	movs	r1, #1
 8014ca4:	6139      	str	r1, [r7, #16]
 8014ca6:	3020      	adds	r0, #32
 8014ca8:	b134      	cbz	r4, 8014cb8 <__d2b+0x7e>
 8014caa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014cae:	4404      	add	r4, r0
 8014cb0:	6034      	str	r4, [r6, #0]
 8014cb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014cb6:	e009      	b.n	8014ccc <__d2b+0x92>
 8014cb8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014cbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014cc0:	6030      	str	r0, [r6, #0]
 8014cc2:	6918      	ldr	r0, [r3, #16]
 8014cc4:	f7ff fd43 	bl	801474e <__hi0bits>
 8014cc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014ccc:	6028      	str	r0, [r5, #0]
 8014cce:	4638      	mov	r0, r7
 8014cd0:	b003      	add	sp, #12
 8014cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014cd6 <__ratio>:
 8014cd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014cda:	4688      	mov	r8, r1
 8014cdc:	4669      	mov	r1, sp
 8014cde:	4681      	mov	r9, r0
 8014ce0:	f7ff ff5e 	bl	8014ba0 <__b2d>
 8014ce4:	a901      	add	r1, sp, #4
 8014ce6:	4640      	mov	r0, r8
 8014ce8:	ec55 4b10 	vmov	r4, r5, d0
 8014cec:	f7ff ff58 	bl	8014ba0 <__b2d>
 8014cf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014cf4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014cf8:	1a9a      	subs	r2, r3, r2
 8014cfa:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8014cfe:	1ac9      	subs	r1, r1, r3
 8014d00:	ec57 6b10 	vmov	r6, r7, d0
 8014d04:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	bfcc      	ite	gt
 8014d0c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8014d10:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8014d14:	4632      	mov	r2, r6
 8014d16:	463b      	mov	r3, r7
 8014d18:	4620      	mov	r0, r4
 8014d1a:	4629      	mov	r1, r5
 8014d1c:	f7eb fe12 	bl	8000944 <__aeabi_ddiv>
 8014d20:	ec41 0b10 	vmov	d0, r0, r1
 8014d24:	b003      	add	sp, #12
 8014d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014d2a <__copybits>:
 8014d2a:	3901      	subs	r1, #1
 8014d2c:	b510      	push	{r4, lr}
 8014d2e:	1149      	asrs	r1, r1, #5
 8014d30:	6914      	ldr	r4, [r2, #16]
 8014d32:	3101      	adds	r1, #1
 8014d34:	f102 0314 	add.w	r3, r2, #20
 8014d38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014d3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014d40:	42a3      	cmp	r3, r4
 8014d42:	4602      	mov	r2, r0
 8014d44:	d204      	bcs.n	8014d50 <__copybits+0x26>
 8014d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d4a:	f840 2b04 	str.w	r2, [r0], #4
 8014d4e:	e7f7      	b.n	8014d40 <__copybits+0x16>
 8014d50:	2300      	movs	r3, #0
 8014d52:	428a      	cmp	r2, r1
 8014d54:	d202      	bcs.n	8014d5c <__copybits+0x32>
 8014d56:	f842 3b04 	str.w	r3, [r2], #4
 8014d5a:	e7fa      	b.n	8014d52 <__copybits+0x28>
 8014d5c:	bd10      	pop	{r4, pc}

08014d5e <__any_on>:
 8014d5e:	f100 0214 	add.w	r2, r0, #20
 8014d62:	6900      	ldr	r0, [r0, #16]
 8014d64:	114b      	asrs	r3, r1, #5
 8014d66:	4298      	cmp	r0, r3
 8014d68:	b510      	push	{r4, lr}
 8014d6a:	db0c      	blt.n	8014d86 <__any_on+0x28>
 8014d6c:	dd0c      	ble.n	8014d88 <__any_on+0x2a>
 8014d6e:	f011 011f 	ands.w	r1, r1, #31
 8014d72:	d009      	beq.n	8014d88 <__any_on+0x2a>
 8014d74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014d78:	fa24 f001 	lsr.w	r0, r4, r1
 8014d7c:	fa00 f101 	lsl.w	r1, r0, r1
 8014d80:	428c      	cmp	r4, r1
 8014d82:	d10c      	bne.n	8014d9e <__any_on+0x40>
 8014d84:	e000      	b.n	8014d88 <__any_on+0x2a>
 8014d86:	4603      	mov	r3, r0
 8014d88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014d8c:	4293      	cmp	r3, r2
 8014d8e:	d904      	bls.n	8014d9a <__any_on+0x3c>
 8014d90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014d94:	2900      	cmp	r1, #0
 8014d96:	d0f9      	beq.n	8014d8c <__any_on+0x2e>
 8014d98:	e001      	b.n	8014d9e <__any_on+0x40>
 8014d9a:	2000      	movs	r0, #0
 8014d9c:	bd10      	pop	{r4, pc}
 8014d9e:	2001      	movs	r0, #1
 8014da0:	bd10      	pop	{r4, pc}

08014da2 <__sccl>:
 8014da2:	b570      	push	{r4, r5, r6, lr}
 8014da4:	780b      	ldrb	r3, [r1, #0]
 8014da6:	2b5e      	cmp	r3, #94	; 0x5e
 8014da8:	bf13      	iteet	ne
 8014daa:	1c4a      	addne	r2, r1, #1
 8014dac:	1c8a      	addeq	r2, r1, #2
 8014dae:	784b      	ldrbeq	r3, [r1, #1]
 8014db0:	2100      	movne	r1, #0
 8014db2:	bf08      	it	eq
 8014db4:	2101      	moveq	r1, #1
 8014db6:	1e44      	subs	r4, r0, #1
 8014db8:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8014dbc:	f804 1f01 	strb.w	r1, [r4, #1]!
 8014dc0:	42ac      	cmp	r4, r5
 8014dc2:	d1fb      	bne.n	8014dbc <__sccl+0x1a>
 8014dc4:	b90b      	cbnz	r3, 8014dca <__sccl+0x28>
 8014dc6:	1e50      	subs	r0, r2, #1
 8014dc8:	bd70      	pop	{r4, r5, r6, pc}
 8014dca:	f081 0401 	eor.w	r4, r1, #1
 8014dce:	54c4      	strb	r4, [r0, r3]
 8014dd0:	4611      	mov	r1, r2
 8014dd2:	780d      	ldrb	r5, [r1, #0]
 8014dd4:	2d2d      	cmp	r5, #45	; 0x2d
 8014dd6:	f101 0201 	add.w	r2, r1, #1
 8014dda:	d006      	beq.n	8014dea <__sccl+0x48>
 8014ddc:	2d5d      	cmp	r5, #93	; 0x5d
 8014dde:	d00f      	beq.n	8014e00 <__sccl+0x5e>
 8014de0:	b10d      	cbz	r5, 8014de6 <__sccl+0x44>
 8014de2:	462b      	mov	r3, r5
 8014de4:	e7f3      	b.n	8014dce <__sccl+0x2c>
 8014de6:	4608      	mov	r0, r1
 8014de8:	bd70      	pop	{r4, r5, r6, pc}
 8014dea:	784e      	ldrb	r6, [r1, #1]
 8014dec:	2e5d      	cmp	r6, #93	; 0x5d
 8014dee:	d0f8      	beq.n	8014de2 <__sccl+0x40>
 8014df0:	42b3      	cmp	r3, r6
 8014df2:	dcf6      	bgt.n	8014de2 <__sccl+0x40>
 8014df4:	3102      	adds	r1, #2
 8014df6:	3301      	adds	r3, #1
 8014df8:	429e      	cmp	r6, r3
 8014dfa:	54c4      	strb	r4, [r0, r3]
 8014dfc:	dcfb      	bgt.n	8014df6 <__sccl+0x54>
 8014dfe:	e7e8      	b.n	8014dd2 <__sccl+0x30>
 8014e00:	4610      	mov	r0, r2
 8014e02:	bd70      	pop	{r4, r5, r6, pc}

08014e04 <nanf>:
 8014e04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014e0c <nanf+0x8>
 8014e08:	4770      	bx	lr
 8014e0a:	bf00      	nop
 8014e0c:	7fc00000 	.word	0x7fc00000

08014e10 <sulp>:
 8014e10:	b570      	push	{r4, r5, r6, lr}
 8014e12:	4604      	mov	r4, r0
 8014e14:	460d      	mov	r5, r1
 8014e16:	ec45 4b10 	vmov	d0, r4, r5
 8014e1a:	4616      	mov	r6, r2
 8014e1c:	f7ff fe98 	bl	8014b50 <__ulp>
 8014e20:	ec51 0b10 	vmov	r0, r1, d0
 8014e24:	b17e      	cbz	r6, 8014e46 <sulp+0x36>
 8014e26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014e2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	dd09      	ble.n	8014e46 <sulp+0x36>
 8014e32:	051b      	lsls	r3, r3, #20
 8014e34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014e38:	2400      	movs	r4, #0
 8014e3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014e3e:	4622      	mov	r2, r4
 8014e40:	462b      	mov	r3, r5
 8014e42:	f7eb fc55 	bl	80006f0 <__aeabi_dmul>
 8014e46:	bd70      	pop	{r4, r5, r6, pc}

08014e48 <_strtod_r>:
 8014e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e4c:	b09d      	sub	sp, #116	; 0x74
 8014e4e:	2300      	movs	r3, #0
 8014e50:	9002      	str	r0, [sp, #8]
 8014e52:	460c      	mov	r4, r1
 8014e54:	9213      	str	r2, [sp, #76]	; 0x4c
 8014e56:	9318      	str	r3, [sp, #96]	; 0x60
 8014e58:	f04f 0a00 	mov.w	sl, #0
 8014e5c:	f04f 0b00 	mov.w	fp, #0
 8014e60:	9117      	str	r1, [sp, #92]	; 0x5c
 8014e62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014e64:	781a      	ldrb	r2, [r3, #0]
 8014e66:	2a0d      	cmp	r2, #13
 8014e68:	d805      	bhi.n	8014e76 <_strtod_r+0x2e>
 8014e6a:	2a09      	cmp	r2, #9
 8014e6c:	d213      	bcs.n	8014e96 <_strtod_r+0x4e>
 8014e6e:	2a00      	cmp	r2, #0
 8014e70:	f000 81ac 	beq.w	80151cc <_strtod_r+0x384>
 8014e74:	e012      	b.n	8014e9c <_strtod_r+0x54>
 8014e76:	2a2b      	cmp	r2, #43	; 0x2b
 8014e78:	d004      	beq.n	8014e84 <_strtod_r+0x3c>
 8014e7a:	2a2d      	cmp	r2, #45	; 0x2d
 8014e7c:	d004      	beq.n	8014e88 <_strtod_r+0x40>
 8014e7e:	2a20      	cmp	r2, #32
 8014e80:	d10c      	bne.n	8014e9c <_strtod_r+0x54>
 8014e82:	e008      	b.n	8014e96 <_strtod_r+0x4e>
 8014e84:	2200      	movs	r2, #0
 8014e86:	e000      	b.n	8014e8a <_strtod_r+0x42>
 8014e88:	2201      	movs	r2, #1
 8014e8a:	920c      	str	r2, [sp, #48]	; 0x30
 8014e8c:	1c5a      	adds	r2, r3, #1
 8014e8e:	9217      	str	r2, [sp, #92]	; 0x5c
 8014e90:	785b      	ldrb	r3, [r3, #1]
 8014e92:	b92b      	cbnz	r3, 8014ea0 <_strtod_r+0x58>
 8014e94:	e19a      	b.n	80151cc <_strtod_r+0x384>
 8014e96:	3301      	adds	r3, #1
 8014e98:	9317      	str	r3, [sp, #92]	; 0x5c
 8014e9a:	e7e2      	b.n	8014e62 <_strtod_r+0x1a>
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	930c      	str	r3, [sp, #48]	; 0x30
 8014ea0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014ea2:	782b      	ldrb	r3, [r5, #0]
 8014ea4:	2b30      	cmp	r3, #48	; 0x30
 8014ea6:	d15c      	bne.n	8014f62 <_strtod_r+0x11a>
 8014ea8:	786b      	ldrb	r3, [r5, #1]
 8014eaa:	2b58      	cmp	r3, #88	; 0x58
 8014eac:	d001      	beq.n	8014eb2 <_strtod_r+0x6a>
 8014eae:	2b78      	cmp	r3, #120	; 0x78
 8014eb0:	d14c      	bne.n	8014f4c <_strtod_r+0x104>
 8014eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014eb4:	9301      	str	r3, [sp, #4]
 8014eb6:	ab18      	add	r3, sp, #96	; 0x60
 8014eb8:	9300      	str	r3, [sp, #0]
 8014eba:	4aa9      	ldr	r2, [pc, #676]	; (8015160 <_strtod_r+0x318>)
 8014ebc:	9802      	ldr	r0, [sp, #8]
 8014ebe:	ab19      	add	r3, sp, #100	; 0x64
 8014ec0:	a917      	add	r1, sp, #92	; 0x5c
 8014ec2:	f001 f9e4 	bl	801628e <__gethex>
 8014ec6:	f010 0607 	ands.w	r6, r0, #7
 8014eca:	4604      	mov	r4, r0
 8014ecc:	f000 8587 	beq.w	80159de <_strtod_r+0xb96>
 8014ed0:	2e06      	cmp	r6, #6
 8014ed2:	d105      	bne.n	8014ee0 <_strtod_r+0x98>
 8014ed4:	3501      	adds	r5, #1
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	9517      	str	r5, [sp, #92]	; 0x5c
 8014eda:	930c      	str	r3, [sp, #48]	; 0x30
 8014edc:	f000 bd7f 	b.w	80159de <_strtod_r+0xb96>
 8014ee0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014ee2:	b13a      	cbz	r2, 8014ef4 <_strtod_r+0xac>
 8014ee4:	2135      	movs	r1, #53	; 0x35
 8014ee6:	a81a      	add	r0, sp, #104	; 0x68
 8014ee8:	f7ff ff1f 	bl	8014d2a <__copybits>
 8014eec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014eee:	9802      	ldr	r0, [sp, #8]
 8014ef0:	f7ff fb9d 	bl	801462e <_Bfree>
 8014ef4:	2e06      	cmp	r6, #6
 8014ef6:	d822      	bhi.n	8014f3e <_strtod_r+0xf6>
 8014ef8:	e8df f006 	tbb	[pc, r6]
 8014efc:	18080d04 	.word	0x18080d04
 8014f00:	0d1d      	.short	0x0d1d
 8014f02:	04          	.byte	0x04
 8014f03:	00          	.byte	0x00
 8014f04:	f04f 0b00 	mov.w	fp, #0
 8014f08:	46da      	mov	sl, fp
 8014f0a:	e018      	b.n	8014f3e <_strtod_r+0xf6>
 8014f0c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014f10:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8014f14:	e013      	b.n	8014f3e <_strtod_r+0xf6>
 8014f16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014f1a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8014f1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014f22:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014f26:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014f2a:	e008      	b.n	8014f3e <_strtod_r+0xf6>
 8014f2c:	f8df b234 	ldr.w	fp, [pc, #564]	; 8015164 <_strtod_r+0x31c>
 8014f30:	f04f 0a00 	mov.w	sl, #0
 8014f34:	e003      	b.n	8014f3e <_strtod_r+0xf6>
 8014f36:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014f3a:	f04f 3aff 	mov.w	sl, #4294967295
 8014f3e:	0721      	lsls	r1, r4, #28
 8014f40:	f140 854d 	bpl.w	80159de <_strtod_r+0xb96>
 8014f44:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014f48:	f000 bd49 	b.w	80159de <_strtod_r+0xb96>
 8014f4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f4e:	1c5a      	adds	r2, r3, #1
 8014f50:	9217      	str	r2, [sp, #92]	; 0x5c
 8014f52:	785b      	ldrb	r3, [r3, #1]
 8014f54:	2b30      	cmp	r3, #48	; 0x30
 8014f56:	d0f9      	beq.n	8014f4c <_strtod_r+0x104>
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	f000 8540 	beq.w	80159de <_strtod_r+0xb96>
 8014f5e:	2301      	movs	r3, #1
 8014f60:	e000      	b.n	8014f64 <_strtod_r+0x11c>
 8014f62:	2300      	movs	r3, #0
 8014f64:	f04f 0800 	mov.w	r8, #0
 8014f68:	9306      	str	r3, [sp, #24]
 8014f6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f6c:	9307      	str	r3, [sp, #28]
 8014f6e:	f8cd 8014 	str.w	r8, [sp, #20]
 8014f72:	f8cd 8010 	str.w	r8, [sp, #16]
 8014f76:	220a      	movs	r2, #10
 8014f78:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8014f7a:	782e      	ldrb	r6, [r5, #0]
 8014f7c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014f80:	b2d9      	uxtb	r1, r3
 8014f82:	2909      	cmp	r1, #9
 8014f84:	d80e      	bhi.n	8014fa4 <_strtod_r+0x15c>
 8014f86:	9904      	ldr	r1, [sp, #16]
 8014f88:	2908      	cmp	r1, #8
 8014f8a:	bfdd      	ittte	le
 8014f8c:	9905      	ldrle	r1, [sp, #20]
 8014f8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8014f92:	9305      	strle	r3, [sp, #20]
 8014f94:	fb02 3808 	mlagt	r8, r2, r8, r3
 8014f98:	9b04      	ldr	r3, [sp, #16]
 8014f9a:	3501      	adds	r5, #1
 8014f9c:	3301      	adds	r3, #1
 8014f9e:	9304      	str	r3, [sp, #16]
 8014fa0:	9517      	str	r5, [sp, #92]	; 0x5c
 8014fa2:	e7e9      	b.n	8014f78 <_strtod_r+0x130>
 8014fa4:	9802      	ldr	r0, [sp, #8]
 8014fa6:	f7ff facf 	bl	8014548 <_localeconv_r>
 8014faa:	6807      	ldr	r7, [r0, #0]
 8014fac:	9802      	ldr	r0, [sp, #8]
 8014fae:	f7ff facb 	bl	8014548 <_localeconv_r>
 8014fb2:	6800      	ldr	r0, [r0, #0]
 8014fb4:	f7eb f98c 	bl	80002d0 <strlen>
 8014fb8:	4639      	mov	r1, r7
 8014fba:	4602      	mov	r2, r0
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	f7fc fe05 	bl	8011bcc <strncmp>
 8014fc2:	4607      	mov	r7, r0
 8014fc4:	b128      	cbz	r0, 8014fd2 <_strtod_r+0x18a>
 8014fc6:	2000      	movs	r0, #0
 8014fc8:	4633      	mov	r3, r6
 8014fca:	9d04      	ldr	r5, [sp, #16]
 8014fcc:	4602      	mov	r2, r0
 8014fce:	4601      	mov	r1, r0
 8014fd0:	e057      	b.n	8015082 <_strtod_r+0x23a>
 8014fd2:	9802      	ldr	r0, [sp, #8]
 8014fd4:	f7ff fab8 	bl	8014548 <_localeconv_r>
 8014fd8:	6800      	ldr	r0, [r0, #0]
 8014fda:	f7eb f979 	bl	80002d0 <strlen>
 8014fde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014fe0:	181a      	adds	r2, r3, r0
 8014fe2:	9217      	str	r2, [sp, #92]	; 0x5c
 8014fe4:	9a04      	ldr	r2, [sp, #16]
 8014fe6:	5c1b      	ldrb	r3, [r3, r0]
 8014fe8:	2a00      	cmp	r2, #0
 8014fea:	d142      	bne.n	8015072 <_strtod_r+0x22a>
 8014fec:	4610      	mov	r0, r2
 8014fee:	2b30      	cmp	r3, #48	; 0x30
 8014ff0:	d105      	bne.n	8014ffe <_strtod_r+0x1b6>
 8014ff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014ff4:	1c5a      	adds	r2, r3, #1
 8014ff6:	9217      	str	r2, [sp, #92]	; 0x5c
 8014ff8:	3001      	adds	r0, #1
 8014ffa:	785b      	ldrb	r3, [r3, #1]
 8014ffc:	e7f7      	b.n	8014fee <_strtod_r+0x1a6>
 8014ffe:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015002:	2a08      	cmp	r2, #8
 8015004:	d843      	bhi.n	801508e <_strtod_r+0x246>
 8015006:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015008:	9207      	str	r2, [sp, #28]
 801500a:	4602      	mov	r2, r0
 801500c:	2000      	movs	r0, #0
 801500e:	4605      	mov	r5, r0
 8015010:	3b30      	subs	r3, #48	; 0x30
 8015012:	f100 0101 	add.w	r1, r0, #1
 8015016:	d026      	beq.n	8015066 <_strtod_r+0x21e>
 8015018:	440a      	add	r2, r1
 801501a:	eb05 0c00 	add.w	ip, r5, r0
 801501e:	4629      	mov	r1, r5
 8015020:	260a      	movs	r6, #10
 8015022:	4561      	cmp	r1, ip
 8015024:	d00e      	beq.n	8015044 <_strtod_r+0x1fc>
 8015026:	3101      	adds	r1, #1
 8015028:	f101 3eff 	add.w	lr, r1, #4294967295
 801502c:	f1be 0f08 	cmp.w	lr, #8
 8015030:	dc03      	bgt.n	801503a <_strtod_r+0x1f2>
 8015032:	9f05      	ldr	r7, [sp, #20]
 8015034:	4377      	muls	r7, r6
 8015036:	9705      	str	r7, [sp, #20]
 8015038:	e7f3      	b.n	8015022 <_strtod_r+0x1da>
 801503a:	2910      	cmp	r1, #16
 801503c:	bfd8      	it	le
 801503e:	fb06 f808 	mulle.w	r8, r6, r8
 8015042:	e7ee      	b.n	8015022 <_strtod_r+0x1da>
 8015044:	4428      	add	r0, r5
 8015046:	2808      	cmp	r0, #8
 8015048:	f100 0501 	add.w	r5, r0, #1
 801504c:	dc05      	bgt.n	801505a <_strtod_r+0x212>
 801504e:	9805      	ldr	r0, [sp, #20]
 8015050:	210a      	movs	r1, #10
 8015052:	fb01 3300 	mla	r3, r1, r0, r3
 8015056:	9305      	str	r3, [sp, #20]
 8015058:	e004      	b.n	8015064 <_strtod_r+0x21c>
 801505a:	2d10      	cmp	r5, #16
 801505c:	bfdc      	itt	le
 801505e:	210a      	movle	r1, #10
 8015060:	fb01 3808 	mlale	r8, r1, r8, r3
 8015064:	2100      	movs	r1, #0
 8015066:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015068:	1c58      	adds	r0, r3, #1
 801506a:	9017      	str	r0, [sp, #92]	; 0x5c
 801506c:	785b      	ldrb	r3, [r3, #1]
 801506e:	4608      	mov	r0, r1
 8015070:	e002      	b.n	8015078 <_strtod_r+0x230>
 8015072:	9d04      	ldr	r5, [sp, #16]
 8015074:	4638      	mov	r0, r7
 8015076:	463a      	mov	r2, r7
 8015078:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801507c:	2909      	cmp	r1, #9
 801507e:	d9c7      	bls.n	8015010 <_strtod_r+0x1c8>
 8015080:	2101      	movs	r1, #1
 8015082:	2b65      	cmp	r3, #101	; 0x65
 8015084:	d001      	beq.n	801508a <_strtod_r+0x242>
 8015086:	2b45      	cmp	r3, #69	; 0x45
 8015088:	d151      	bne.n	801512e <_strtod_r+0x2e6>
 801508a:	b96d      	cbnz	r5, 80150a8 <_strtod_r+0x260>
 801508c:	e004      	b.n	8015098 <_strtod_r+0x250>
 801508e:	2b65      	cmp	r3, #101	; 0x65
 8015090:	f040 84b3 	bne.w	80159fa <_strtod_r+0xbb2>
 8015094:	2200      	movs	r2, #0
 8015096:	2101      	movs	r1, #1
 8015098:	b928      	cbnz	r0, 80150a6 <_strtod_r+0x25e>
 801509a:	9b06      	ldr	r3, [sp, #24]
 801509c:	2b00      	cmp	r3, #0
 801509e:	f000 8095 	beq.w	80151cc <_strtod_r+0x384>
 80150a2:	4605      	mov	r5, r0
 80150a4:	e000      	b.n	80150a8 <_strtod_r+0x260>
 80150a6:	2500      	movs	r5, #0
 80150a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80150aa:	1c63      	adds	r3, r4, #1
 80150ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80150ae:	7863      	ldrb	r3, [r4, #1]
 80150b0:	2b2b      	cmp	r3, #43	; 0x2b
 80150b2:	d006      	beq.n	80150c2 <_strtod_r+0x27a>
 80150b4:	2b2d      	cmp	r3, #45	; 0x2d
 80150b6:	d002      	beq.n	80150be <_strtod_r+0x276>
 80150b8:	2600      	movs	r6, #0
 80150ba:	9603      	str	r6, [sp, #12]
 80150bc:	e006      	b.n	80150cc <_strtod_r+0x284>
 80150be:	2301      	movs	r3, #1
 80150c0:	e000      	b.n	80150c4 <_strtod_r+0x27c>
 80150c2:	2300      	movs	r3, #0
 80150c4:	9303      	str	r3, [sp, #12]
 80150c6:	1ca3      	adds	r3, r4, #2
 80150c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80150ca:	78a3      	ldrb	r3, [r4, #2]
 80150cc:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80150d0:	2e09      	cmp	r6, #9
 80150d2:	d82b      	bhi.n	801512c <_strtod_r+0x2e4>
 80150d4:	2b30      	cmp	r3, #48	; 0x30
 80150d6:	d104      	bne.n	80150e2 <_strtod_r+0x29a>
 80150d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80150da:	1c5e      	adds	r6, r3, #1
 80150dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80150de:	785b      	ldrb	r3, [r3, #1]
 80150e0:	e7f8      	b.n	80150d4 <_strtod_r+0x28c>
 80150e2:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80150e6:	2e08      	cmp	r6, #8
 80150e8:	d821      	bhi.n	801512e <_strtod_r+0x2e6>
 80150ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80150ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80150f0:	f04f 0c0a 	mov.w	ip, #10
 80150f4:	461f      	mov	r7, r3
 80150f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80150f8:	1c5e      	adds	r6, r3, #1
 80150fa:	9617      	str	r6, [sp, #92]	; 0x5c
 80150fc:	785b      	ldrb	r3, [r3, #1]
 80150fe:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 8015102:	f1b9 0f09 	cmp.w	r9, #9
 8015106:	d804      	bhi.n	8015112 <_strtod_r+0x2ca>
 8015108:	fb0c 3e0e 	mla	lr, ip, lr, r3
 801510c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015110:	e7f1      	b.n	80150f6 <_strtod_r+0x2ae>
 8015112:	1bf6      	subs	r6, r6, r7
 8015114:	2e08      	cmp	r6, #8
 8015116:	f644 691f 	movw	r9, #19999	; 0x4e1f
 801511a:	dc02      	bgt.n	8015122 <_strtod_r+0x2da>
 801511c:	45f1      	cmp	r9, lr
 801511e:	bfa8      	it	ge
 8015120:	46f1      	movge	r9, lr
 8015122:	9e03      	ldr	r6, [sp, #12]
 8015124:	b12e      	cbz	r6, 8015132 <_strtod_r+0x2ea>
 8015126:	f1c9 0900 	rsb	r9, r9, #0
 801512a:	e002      	b.n	8015132 <_strtod_r+0x2ea>
 801512c:	9417      	str	r4, [sp, #92]	; 0x5c
 801512e:	f04f 0900 	mov.w	r9, #0
 8015132:	2d00      	cmp	r5, #0
 8015134:	d153      	bne.n	80151de <_strtod_r+0x396>
 8015136:	2800      	cmp	r0, #0
 8015138:	f040 8451 	bne.w	80159de <_strtod_r+0xb96>
 801513c:	9a06      	ldr	r2, [sp, #24]
 801513e:	2a00      	cmp	r2, #0
 8015140:	f040 844d 	bne.w	80159de <_strtod_r+0xb96>
 8015144:	2900      	cmp	r1, #0
 8015146:	d141      	bne.n	80151cc <_strtod_r+0x384>
 8015148:	2b4e      	cmp	r3, #78	; 0x4e
 801514a:	d020      	beq.n	801518e <_strtod_r+0x346>
 801514c:	dc02      	bgt.n	8015154 <_strtod_r+0x30c>
 801514e:	2b49      	cmp	r3, #73	; 0x49
 8015150:	d00a      	beq.n	8015168 <_strtod_r+0x320>
 8015152:	e03b      	b.n	80151cc <_strtod_r+0x384>
 8015154:	2b69      	cmp	r3, #105	; 0x69
 8015156:	d007      	beq.n	8015168 <_strtod_r+0x320>
 8015158:	2b6e      	cmp	r3, #110	; 0x6e
 801515a:	d018      	beq.n	801518e <_strtod_r+0x346>
 801515c:	e036      	b.n	80151cc <_strtod_r+0x384>
 801515e:	bf00      	nop
 8015160:	0802feac 	.word	0x0802feac
 8015164:	7ff00000 	.word	0x7ff00000
 8015168:	49a8      	ldr	r1, [pc, #672]	; (801540c <_strtod_r+0x5c4>)
 801516a:	a817      	add	r0, sp, #92	; 0x5c
 801516c:	f001 fac0 	bl	80166f0 <__match>
 8015170:	b360      	cbz	r0, 80151cc <_strtod_r+0x384>
 8015172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015174:	49a6      	ldr	r1, [pc, #664]	; (8015410 <_strtod_r+0x5c8>)
 8015176:	3b01      	subs	r3, #1
 8015178:	a817      	add	r0, sp, #92	; 0x5c
 801517a:	9317      	str	r3, [sp, #92]	; 0x5c
 801517c:	f001 fab8 	bl	80166f0 <__match>
 8015180:	b910      	cbnz	r0, 8015188 <_strtod_r+0x340>
 8015182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015184:	3301      	adds	r3, #1
 8015186:	9317      	str	r3, [sp, #92]	; 0x5c
 8015188:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 801542c <_strtod_r+0x5e4>
 801518c:	e01a      	b.n	80151c4 <_strtod_r+0x37c>
 801518e:	49a1      	ldr	r1, [pc, #644]	; (8015414 <_strtod_r+0x5cc>)
 8015190:	a817      	add	r0, sp, #92	; 0x5c
 8015192:	f001 faad 	bl	80166f0 <__match>
 8015196:	b1c8      	cbz	r0, 80151cc <_strtod_r+0x384>
 8015198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	2b28      	cmp	r3, #40	; 0x28
 801519e:	d10f      	bne.n	80151c0 <_strtod_r+0x378>
 80151a0:	aa1a      	add	r2, sp, #104	; 0x68
 80151a2:	499d      	ldr	r1, [pc, #628]	; (8015418 <_strtod_r+0x5d0>)
 80151a4:	a817      	add	r0, sp, #92	; 0x5c
 80151a6:	f001 fab6 	bl	8016716 <__hexnan>
 80151aa:	2805      	cmp	r0, #5
 80151ac:	d108      	bne.n	80151c0 <_strtod_r+0x378>
 80151ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80151b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80151b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80151b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80151bc:	f000 bc0f 	b.w	80159de <_strtod_r+0xb96>
 80151c0:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8015430 <_strtod_r+0x5e8>
 80151c4:	f04f 0a00 	mov.w	sl, #0
 80151c8:	f000 bc09 	b.w	80159de <_strtod_r+0xb96>
 80151cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80151ce:	9417      	str	r4, [sp, #92]	; 0x5c
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	f000 840f 	beq.w	80159f4 <_strtod_r+0xbac>
 80151d6:	2300      	movs	r3, #0
 80151d8:	930c      	str	r3, [sp, #48]	; 0x30
 80151da:	f000 bc02 	b.w	80159e2 <_strtod_r+0xb9a>
 80151de:	9b04      	ldr	r3, [sp, #16]
 80151e0:	9805      	ldr	r0, [sp, #20]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	bf08      	it	eq
 80151e6:	462b      	moveq	r3, r5
 80151e8:	2d10      	cmp	r5, #16
 80151ea:	462c      	mov	r4, r5
 80151ec:	ebc2 0909 	rsb	r9, r2, r9
 80151f0:	bfa8      	it	ge
 80151f2:	2410      	movge	r4, #16
 80151f4:	9304      	str	r3, [sp, #16]
 80151f6:	f7eb fa05 	bl	8000604 <__aeabi_ui2d>
 80151fa:	2c09      	cmp	r4, #9
 80151fc:	4682      	mov	sl, r0
 80151fe:	468b      	mov	fp, r1
 8015200:	dd13      	ble.n	801522a <_strtod_r+0x3e2>
 8015202:	4b86      	ldr	r3, [pc, #536]	; (801541c <_strtod_r+0x5d4>)
 8015204:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015208:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801520c:	f7eb fa70 	bl	80006f0 <__aeabi_dmul>
 8015210:	4606      	mov	r6, r0
 8015212:	4640      	mov	r0, r8
 8015214:	460f      	mov	r7, r1
 8015216:	f7eb f9f5 	bl	8000604 <__aeabi_ui2d>
 801521a:	4602      	mov	r2, r0
 801521c:	460b      	mov	r3, r1
 801521e:	4630      	mov	r0, r6
 8015220:	4639      	mov	r1, r7
 8015222:	f7eb f8b3 	bl	800038c <__adddf3>
 8015226:	4682      	mov	sl, r0
 8015228:	468b      	mov	fp, r1
 801522a:	2d0f      	cmp	r5, #15
 801522c:	dc36      	bgt.n	801529c <_strtod_r+0x454>
 801522e:	f1b9 0f00 	cmp.w	r9, #0
 8015232:	f000 83d4 	beq.w	80159de <_strtod_r+0xb96>
 8015236:	dd24      	ble.n	8015282 <_strtod_r+0x43a>
 8015238:	f1b9 0f16 	cmp.w	r9, #22
 801523c:	dc07      	bgt.n	801524e <_strtod_r+0x406>
 801523e:	4d77      	ldr	r5, [pc, #476]	; (801541c <_strtod_r+0x5d4>)
 8015240:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8015244:	4652      	mov	r2, sl
 8015246:	465b      	mov	r3, fp
 8015248:	e9d9 0100 	ldrd	r0, r1, [r9]
 801524c:	e014      	b.n	8015278 <_strtod_r+0x430>
 801524e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015252:	4599      	cmp	r9, r3
 8015254:	dc22      	bgt.n	801529c <_strtod_r+0x454>
 8015256:	4c71      	ldr	r4, [pc, #452]	; (801541c <_strtod_r+0x5d4>)
 8015258:	f1c5 050f 	rsb	r5, r5, #15
 801525c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015260:	ebc5 0509 	rsb	r5, r5, r9
 8015264:	4652      	mov	r2, sl
 8015266:	465b      	mov	r3, fp
 8015268:	e9d1 0100 	ldrd	r0, r1, [r1]
 801526c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015270:	f7eb fa3e 	bl	80006f0 <__aeabi_dmul>
 8015274:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015278:	f7eb fa3a 	bl	80006f0 <__aeabi_dmul>
 801527c:	4682      	mov	sl, r0
 801527e:	468b      	mov	fp, r1
 8015280:	e3ad      	b.n	80159de <_strtod_r+0xb96>
 8015282:	f119 0f16 	cmn.w	r9, #22
 8015286:	db09      	blt.n	801529c <_strtod_r+0x454>
 8015288:	4d64      	ldr	r5, [pc, #400]	; (801541c <_strtod_r+0x5d4>)
 801528a:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 801528e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015292:	4650      	mov	r0, sl
 8015294:	4659      	mov	r1, fp
 8015296:	f7eb fb55 	bl	8000944 <__aeabi_ddiv>
 801529a:	e7ef      	b.n	801527c <_strtod_r+0x434>
 801529c:	1b2c      	subs	r4, r5, r4
 801529e:	444c      	add	r4, r9
 80152a0:	2c00      	cmp	r4, #0
 80152a2:	dd57      	ble.n	8015354 <_strtod_r+0x50c>
 80152a4:	f014 010f 	ands.w	r1, r4, #15
 80152a8:	d00a      	beq.n	80152c0 <_strtod_r+0x478>
 80152aa:	4b5c      	ldr	r3, [pc, #368]	; (801541c <_strtod_r+0x5d4>)
 80152ac:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80152b0:	4652      	mov	r2, sl
 80152b2:	465b      	mov	r3, fp
 80152b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152b8:	f7eb fa1a 	bl	80006f0 <__aeabi_dmul>
 80152bc:	4682      	mov	sl, r0
 80152be:	468b      	mov	fp, r1
 80152c0:	f034 040f 	bics.w	r4, r4, #15
 80152c4:	f000 80b8 	beq.w	8015438 <_strtod_r+0x5f0>
 80152c8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80152cc:	dd0b      	ble.n	80152e6 <_strtod_r+0x49e>
 80152ce:	2400      	movs	r4, #0
 80152d0:	4625      	mov	r5, r4
 80152d2:	9405      	str	r4, [sp, #20]
 80152d4:	9404      	str	r4, [sp, #16]
 80152d6:	9a02      	ldr	r2, [sp, #8]
 80152d8:	f8df b150 	ldr.w	fp, [pc, #336]	; 801542c <_strtod_r+0x5e4>
 80152dc:	2322      	movs	r3, #34	; 0x22
 80152de:	6013      	str	r3, [r2, #0]
 80152e0:	f04f 0a00 	mov.w	sl, #0
 80152e4:	e187      	b.n	80155f6 <_strtod_r+0x7ae>
 80152e6:	4e4e      	ldr	r6, [pc, #312]	; (8015420 <_strtod_r+0x5d8>)
 80152e8:	2300      	movs	r3, #0
 80152ea:	1124      	asrs	r4, r4, #4
 80152ec:	4650      	mov	r0, sl
 80152ee:	4659      	mov	r1, fp
 80152f0:	4698      	mov	r8, r3
 80152f2:	4637      	mov	r7, r6
 80152f4:	2c01      	cmp	r4, #1
 80152f6:	dd0b      	ble.n	8015310 <_strtod_r+0x4c8>
 80152f8:	07e2      	lsls	r2, r4, #31
 80152fa:	d504      	bpl.n	8015306 <_strtod_r+0x4be>
 80152fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015300:	f7eb f9f6 	bl	80006f0 <__aeabi_dmul>
 8015304:	2301      	movs	r3, #1
 8015306:	f108 0801 	add.w	r8, r8, #1
 801530a:	1064      	asrs	r4, r4, #1
 801530c:	3608      	adds	r6, #8
 801530e:	e7f1      	b.n	80152f4 <_strtod_r+0x4ac>
 8015310:	b10b      	cbz	r3, 8015316 <_strtod_r+0x4ce>
 8015312:	4682      	mov	sl, r0
 8015314:	468b      	mov	fp, r1
 8015316:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801531a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 801531e:	4652      	mov	r2, sl
 8015320:	465b      	mov	r3, fp
 8015322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015326:	f7eb f9e3 	bl	80006f0 <__aeabi_dmul>
 801532a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801532e:	468b      	mov	fp, r1
 8015330:	460a      	mov	r2, r1
 8015332:	0d1b      	lsrs	r3, r3, #20
 8015334:	493b      	ldr	r1, [pc, #236]	; (8015424 <_strtod_r+0x5dc>)
 8015336:	051b      	lsls	r3, r3, #20
 8015338:	428b      	cmp	r3, r1
 801533a:	4682      	mov	sl, r0
 801533c:	d8c7      	bhi.n	80152ce <_strtod_r+0x486>
 801533e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015342:	428b      	cmp	r3, r1
 8015344:	bf86      	itte	hi
 8015346:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; 8015434 <_strtod_r+0x5ec>
 801534a:	f04f 3aff 	movhi.w	sl, #4294967295
 801534e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015352:	e071      	b.n	8015438 <_strtod_r+0x5f0>
 8015354:	d070      	beq.n	8015438 <_strtod_r+0x5f0>
 8015356:	4264      	negs	r4, r4
 8015358:	f014 020f 	ands.w	r2, r4, #15
 801535c:	d00a      	beq.n	8015374 <_strtod_r+0x52c>
 801535e:	4b2f      	ldr	r3, [pc, #188]	; (801541c <_strtod_r+0x5d4>)
 8015360:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015364:	4650      	mov	r0, sl
 8015366:	4659      	mov	r1, fp
 8015368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536c:	f7eb faea 	bl	8000944 <__aeabi_ddiv>
 8015370:	4682      	mov	sl, r0
 8015372:	468b      	mov	fp, r1
 8015374:	1124      	asrs	r4, r4, #4
 8015376:	d05f      	beq.n	8015438 <_strtod_r+0x5f0>
 8015378:	2c1f      	cmp	r4, #31
 801537a:	dd04      	ble.n	8015386 <_strtod_r+0x53e>
 801537c:	2400      	movs	r4, #0
 801537e:	4625      	mov	r5, r4
 8015380:	9405      	str	r4, [sp, #20]
 8015382:	9404      	str	r4, [sp, #16]
 8015384:	e130      	b.n	80155e8 <_strtod_r+0x7a0>
 8015386:	f014 0f10 	tst.w	r4, #16
 801538a:	bf0c      	ite	eq
 801538c:	2300      	moveq	r3, #0
 801538e:	236a      	movne	r3, #106	; 0x6a
 8015390:	4e25      	ldr	r6, [pc, #148]	; (8015428 <_strtod_r+0x5e0>)
 8015392:	9303      	str	r3, [sp, #12]
 8015394:	4650      	mov	r0, sl
 8015396:	4659      	mov	r1, fp
 8015398:	2300      	movs	r3, #0
 801539a:	2c00      	cmp	r4, #0
 801539c:	dd09      	ble.n	80153b2 <_strtod_r+0x56a>
 801539e:	07e2      	lsls	r2, r4, #31
 80153a0:	d504      	bpl.n	80153ac <_strtod_r+0x564>
 80153a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80153a6:	f7eb f9a3 	bl	80006f0 <__aeabi_dmul>
 80153aa:	2301      	movs	r3, #1
 80153ac:	1064      	asrs	r4, r4, #1
 80153ae:	3608      	adds	r6, #8
 80153b0:	e7f3      	b.n	801539a <_strtod_r+0x552>
 80153b2:	b10b      	cbz	r3, 80153b8 <_strtod_r+0x570>
 80153b4:	4682      	mov	sl, r0
 80153b6:	468b      	mov	fp, r1
 80153b8:	9b03      	ldr	r3, [sp, #12]
 80153ba:	b1eb      	cbz	r3, 80153f8 <_strtod_r+0x5b0>
 80153bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80153c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	4659      	mov	r1, fp
 80153c8:	dd16      	ble.n	80153f8 <_strtod_r+0x5b0>
 80153ca:	2b1f      	cmp	r3, #31
 80153cc:	dd0e      	ble.n	80153ec <_strtod_r+0x5a4>
 80153ce:	2b34      	cmp	r3, #52	; 0x34
 80153d0:	bfde      	ittt	le
 80153d2:	3b20      	suble	r3, #32
 80153d4:	f04f 32ff 	movle.w	r2, #4294967295
 80153d8:	fa02 f303 	lslle.w	r3, r2, r3
 80153dc:	f04f 0a00 	mov.w	sl, #0
 80153e0:	bfcc      	ite	gt
 80153e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80153e6:	ea03 0b01 	andle.w	fp, r3, r1
 80153ea:	e005      	b.n	80153f8 <_strtod_r+0x5b0>
 80153ec:	f04f 32ff 	mov.w	r2, #4294967295
 80153f0:	fa02 f303 	lsl.w	r3, r2, r3
 80153f4:	ea03 0a0a 	and.w	sl, r3, sl
 80153f8:	2200      	movs	r2, #0
 80153fa:	2300      	movs	r3, #0
 80153fc:	4650      	mov	r0, sl
 80153fe:	4659      	mov	r1, fp
 8015400:	f7eb fbde 	bl	8000bc0 <__aeabi_dcmpeq>
 8015404:	2800      	cmp	r0, #0
 8015406:	d1b9      	bne.n	801537c <_strtod_r+0x534>
 8015408:	e018      	b.n	801543c <_strtod_r+0x5f4>
 801540a:	bf00      	nop
 801540c:	0802fd36 	.word	0x0802fd36
 8015410:	0802fd9e 	.word	0x0802fd9e
 8015414:	0802fd3e 	.word	0x0802fd3e
 8015418:	0802fec0 	.word	0x0802fec0
 801541c:	0802fdb0 	.word	0x0802fdb0
 8015420:	0802fe78 	.word	0x0802fe78
 8015424:	7ca00000 	.word	0x7ca00000
 8015428:	0802fed8 	.word	0x0802fed8
 801542c:	7ff00000 	.word	0x7ff00000
 8015430:	fff80000 	.word	0xfff80000
 8015434:	7fefffff 	.word	0x7fefffff
 8015438:	2300      	movs	r3, #0
 801543a:	9303      	str	r3, [sp, #12]
 801543c:	9b05      	ldr	r3, [sp, #20]
 801543e:	9300      	str	r3, [sp, #0]
 8015440:	9a04      	ldr	r2, [sp, #16]
 8015442:	9907      	ldr	r1, [sp, #28]
 8015444:	9802      	ldr	r0, [sp, #8]
 8015446:	462b      	mov	r3, r5
 8015448:	f7ff f943 	bl	80146d2 <__s2b>
 801544c:	9005      	str	r0, [sp, #20]
 801544e:	2800      	cmp	r0, #0
 8015450:	f43f af3d 	beq.w	80152ce <_strtod_r+0x486>
 8015454:	f1b9 0f00 	cmp.w	r9, #0
 8015458:	f1c9 0300 	rsb	r3, r9, #0
 801545c:	bfa8      	it	ge
 801545e:	2300      	movge	r3, #0
 8015460:	930d      	str	r3, [sp, #52]	; 0x34
 8015462:	2400      	movs	r4, #0
 8015464:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8015468:	9312      	str	r3, [sp, #72]	; 0x48
 801546a:	4625      	mov	r5, r4
 801546c:	9b05      	ldr	r3, [sp, #20]
 801546e:	9802      	ldr	r0, [sp, #8]
 8015470:	6859      	ldr	r1, [r3, #4]
 8015472:	f7ff f8a7 	bl	80145c4 <_Balloc>
 8015476:	9004      	str	r0, [sp, #16]
 8015478:	2800      	cmp	r0, #0
 801547a:	f43f af2c 	beq.w	80152d6 <_strtod_r+0x48e>
 801547e:	9b05      	ldr	r3, [sp, #20]
 8015480:	691a      	ldr	r2, [r3, #16]
 8015482:	3202      	adds	r2, #2
 8015484:	f103 010c 	add.w	r1, r3, #12
 8015488:	0092      	lsls	r2, r2, #2
 801548a:	300c      	adds	r0, #12
 801548c:	f7fc fad9 	bl	8011a42 <memcpy>
 8015490:	aa1a      	add	r2, sp, #104	; 0x68
 8015492:	a919      	add	r1, sp, #100	; 0x64
 8015494:	ec4b ab10 	vmov	d0, sl, fp
 8015498:	9802      	ldr	r0, [sp, #8]
 801549a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801549e:	f7ff fbcc 	bl	8014c3a <__d2b>
 80154a2:	9018      	str	r0, [sp, #96]	; 0x60
 80154a4:	2800      	cmp	r0, #0
 80154a6:	f43f af16 	beq.w	80152d6 <_strtod_r+0x48e>
 80154aa:	2101      	movs	r1, #1
 80154ac:	9802      	ldr	r0, [sp, #8]
 80154ae:	f7ff f99b 	bl	80147e8 <__i2b>
 80154b2:	4605      	mov	r5, r0
 80154b4:	2800      	cmp	r0, #0
 80154b6:	f43f af0e 	beq.w	80152d6 <_strtod_r+0x48e>
 80154ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80154bc:	9903      	ldr	r1, [sp, #12]
 80154be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	bfad      	iteet	ge
 80154c4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80154c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80154c8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
 80154cc:	eb02 0803 	addge.w	r8, r2, r3
 80154d0:	bfb8      	it	lt
 80154d2:	1ad2      	sublt	r2, r2, r3
 80154d4:	eba3 0301 	sub.w	r3, r3, r1
 80154d8:	4433      	add	r3, r6
 80154da:	49b5      	ldr	r1, [pc, #724]	; (80157b0 <_strtod_r+0x968>)
 80154dc:	bfa8      	it	ge
 80154de:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80154e0:	3b01      	subs	r3, #1
 80154e2:	428b      	cmp	r3, r1
 80154e4:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
 80154e8:	f280 808a 	bge.w	8015600 <_strtod_r+0x7b8>
 80154ec:	1ac9      	subs	r1, r1, r3
 80154ee:	291f      	cmp	r1, #31
 80154f0:	bfc8      	it	gt
 80154f2:	4fb0      	ldrgt	r7, [pc, #704]	; (80157b4 <_strtod_r+0x96c>)
 80154f4:	f04f 0901 	mov.w	r9, #1
 80154f8:	bfd4      	ite	le
 80154fa:	fa09 f301 	lslle.w	r3, r9, r1
 80154fe:	1aff      	subgt	r7, r7, r3
 8015500:	eba6 0601 	sub.w	r6, r6, r1
 8015504:	bfd9      	ittee	le
 8015506:	9306      	strle	r3, [sp, #24]
 8015508:	2700      	movle	r7, #0
 801550a:	fa09 f707 	lslgt.w	r7, r9, r7
 801550e:	f8cd 9018 	strgt.w	r9, [sp, #24]
 8015512:	eb08 0906 	add.w	r9, r8, r6
 8015516:	9b03      	ldr	r3, [sp, #12]
 8015518:	45c8      	cmp	r8, r9
 801551a:	4416      	add	r6, r2
 801551c:	441e      	add	r6, r3
 801551e:	4643      	mov	r3, r8
 8015520:	bfa8      	it	ge
 8015522:	464b      	movge	r3, r9
 8015524:	42b3      	cmp	r3, r6
 8015526:	bfa8      	it	ge
 8015528:	4633      	movge	r3, r6
 801552a:	2b00      	cmp	r3, #0
 801552c:	bfc2      	ittt	gt
 801552e:	ebc3 0909 	rsbgt	r9, r3, r9
 8015532:	1af6      	subgt	r6, r6, r3
 8015534:	ebc3 0808 	rsbgt	r8, r3, r8
 8015538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801553a:	2b00      	cmp	r3, #0
 801553c:	d164      	bne.n	8015608 <_strtod_r+0x7c0>
 801553e:	f1b9 0f00 	cmp.w	r9, #0
 8015542:	dc7a      	bgt.n	801563a <_strtod_r+0x7f2>
 8015544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015546:	2b00      	cmp	r3, #0
 8015548:	f040 8081 	bne.w	801564e <_strtod_r+0x806>
 801554c:	2e00      	cmp	r6, #0
 801554e:	f300 8088 	bgt.w	8015662 <_strtod_r+0x81a>
 8015552:	f1b8 0f00 	cmp.w	r8, #0
 8015556:	f300 808e 	bgt.w	8015676 <_strtod_r+0x82e>
 801555a:	9a04      	ldr	r2, [sp, #16]
 801555c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801555e:	9802      	ldr	r0, [sp, #8]
 8015560:	f7ff fa97 	bl	8014a92 <__mdiff>
 8015564:	4604      	mov	r4, r0
 8015566:	2800      	cmp	r0, #0
 8015568:	f43f aeb5 	beq.w	80152d6 <_strtod_r+0x48e>
 801556c:	68c3      	ldr	r3, [r0, #12]
 801556e:	9307      	str	r3, [sp, #28]
 8015570:	2300      	movs	r3, #0
 8015572:	60c3      	str	r3, [r0, #12]
 8015574:	4629      	mov	r1, r5
 8015576:	f7ff fa70 	bl	8014a5a <__mcmp>
 801557a:	2800      	cmp	r0, #0
 801557c:	f280 8089 	bge.w	8015692 <_strtod_r+0x84a>
 8015580:	9b07      	ldr	r3, [sp, #28]
 8015582:	2b00      	cmp	r3, #0
 8015584:	f040 8204 	bne.w	8015990 <_strtod_r+0xb48>
 8015588:	f1ba 0f00 	cmp.w	sl, #0
 801558c:	f040 8200 	bne.w	8015990 <_strtod_r+0xb48>
 8015590:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015594:	2b00      	cmp	r3, #0
 8015596:	f040 81fb 	bne.w	8015990 <_strtod_r+0xb48>
 801559a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801559e:	0d1b      	lsrs	r3, r3, #20
 80155a0:	051b      	lsls	r3, r3, #20
 80155a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80155a6:	f240 81f3 	bls.w	8015990 <_strtod_r+0xb48>
 80155aa:	6963      	ldr	r3, [r4, #20]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d06c      	beq.n	801568a <_strtod_r+0x842>
 80155b0:	4621      	mov	r1, r4
 80155b2:	2201      	movs	r2, #1
 80155b4:	9802      	ldr	r0, [sp, #8]
 80155b6:	f7ff f9ff 	bl	80149b8 <__lshift>
 80155ba:	4629      	mov	r1, r5
 80155bc:	4604      	mov	r4, r0
 80155be:	f7ff fa4c 	bl	8014a5a <__mcmp>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	f340 81e4 	ble.w	8015990 <_strtod_r+0xb48>
 80155c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80155cc:	9a03      	ldr	r2, [sp, #12]
 80155ce:	0d1b      	lsrs	r3, r3, #20
 80155d0:	051b      	lsls	r3, r3, #20
 80155d2:	2a00      	cmp	r2, #0
 80155d4:	f000 808c 	beq.w	80156f0 <_strtod_r+0x8a8>
 80155d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80155dc:	f300 8088 	bgt.w	80156f0 <_strtod_r+0x8a8>
 80155e0:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80155e4:	f300 81d6 	bgt.w	8015994 <_strtod_r+0xb4c>
 80155e8:	9a02      	ldr	r2, [sp, #8]
 80155ea:	2322      	movs	r3, #34	; 0x22
 80155ec:	f04f 0a00 	mov.w	sl, #0
 80155f0:	f04f 0b00 	mov.w	fp, #0
 80155f4:	6013      	str	r3, [r2, #0]
 80155f6:	9b05      	ldr	r3, [sp, #20]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	f040 81dc 	bne.w	80159b6 <_strtod_r+0xb6e>
 80155fe:	e1ee      	b.n	80159de <_strtod_r+0xb96>
 8015600:	2301      	movs	r3, #1
 8015602:	2700      	movs	r7, #0
 8015604:	9306      	str	r3, [sp, #24]
 8015606:	e784      	b.n	8015512 <_strtod_r+0x6ca>
 8015608:	4629      	mov	r1, r5
 801560a:	461a      	mov	r2, r3
 801560c:	9802      	ldr	r0, [sp, #8]
 801560e:	f7ff f985 	bl	801491c <__pow5mult>
 8015612:	4605      	mov	r5, r0
 8015614:	2800      	cmp	r0, #0
 8015616:	f43f ae5e 	beq.w	80152d6 <_strtod_r+0x48e>
 801561a:	4601      	mov	r1, r0
 801561c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801561e:	9802      	ldr	r0, [sp, #8]
 8015620:	f7ff f8eb 	bl	80147fa <__multiply>
 8015624:	9007      	str	r0, [sp, #28]
 8015626:	2800      	cmp	r0, #0
 8015628:	f43f ae55 	beq.w	80152d6 <_strtod_r+0x48e>
 801562c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801562e:	9802      	ldr	r0, [sp, #8]
 8015630:	f7fe fffd 	bl	801462e <_Bfree>
 8015634:	9b07      	ldr	r3, [sp, #28]
 8015636:	9318      	str	r3, [sp, #96]	; 0x60
 8015638:	e781      	b.n	801553e <_strtod_r+0x6f6>
 801563a:	464a      	mov	r2, r9
 801563c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801563e:	9802      	ldr	r0, [sp, #8]
 8015640:	f7ff f9ba 	bl	80149b8 <__lshift>
 8015644:	9018      	str	r0, [sp, #96]	; 0x60
 8015646:	2800      	cmp	r0, #0
 8015648:	f47f af7c 	bne.w	8015544 <_strtod_r+0x6fc>
 801564c:	e643      	b.n	80152d6 <_strtod_r+0x48e>
 801564e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015650:	9904      	ldr	r1, [sp, #16]
 8015652:	9802      	ldr	r0, [sp, #8]
 8015654:	f7ff f962 	bl	801491c <__pow5mult>
 8015658:	9004      	str	r0, [sp, #16]
 801565a:	2800      	cmp	r0, #0
 801565c:	f47f af76 	bne.w	801554c <_strtod_r+0x704>
 8015660:	e639      	b.n	80152d6 <_strtod_r+0x48e>
 8015662:	4632      	mov	r2, r6
 8015664:	9904      	ldr	r1, [sp, #16]
 8015666:	9802      	ldr	r0, [sp, #8]
 8015668:	f7ff f9a6 	bl	80149b8 <__lshift>
 801566c:	9004      	str	r0, [sp, #16]
 801566e:	2800      	cmp	r0, #0
 8015670:	f47f af6f 	bne.w	8015552 <_strtod_r+0x70a>
 8015674:	e62f      	b.n	80152d6 <_strtod_r+0x48e>
 8015676:	4629      	mov	r1, r5
 8015678:	4642      	mov	r2, r8
 801567a:	9802      	ldr	r0, [sp, #8]
 801567c:	f7ff f99c 	bl	80149b8 <__lshift>
 8015680:	4605      	mov	r5, r0
 8015682:	2800      	cmp	r0, #0
 8015684:	f47f af69 	bne.w	801555a <_strtod_r+0x712>
 8015688:	e625      	b.n	80152d6 <_strtod_r+0x48e>
 801568a:	6923      	ldr	r3, [r4, #16]
 801568c:	2b01      	cmp	r3, #1
 801568e:	dc8f      	bgt.n	80155b0 <_strtod_r+0x768>
 8015690:	e17e      	b.n	8015990 <_strtod_r+0xb48>
 8015692:	d161      	bne.n	8015758 <_strtod_r+0x910>
 8015694:	9a07      	ldr	r2, [sp, #28]
 8015696:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801569a:	b322      	cbz	r2, 80156e6 <_strtod_r+0x89e>
 801569c:	4946      	ldr	r1, [pc, #280]	; (80157b8 <_strtod_r+0x970>)
 801569e:	428b      	cmp	r3, r1
 80156a0:	465a      	mov	r2, fp
 80156a2:	d12e      	bne.n	8015702 <_strtod_r+0x8ba>
 80156a4:	9b03      	ldr	r3, [sp, #12]
 80156a6:	4651      	mov	r1, sl
 80156a8:	b163      	cbz	r3, 80156c4 <_strtod_r+0x87c>
 80156aa:	4b44      	ldr	r3, [pc, #272]	; (80157bc <_strtod_r+0x974>)
 80156ac:	4013      	ands	r3, r2
 80156ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80156b2:	d807      	bhi.n	80156c4 <_strtod_r+0x87c>
 80156b4:	0d1b      	lsrs	r3, r3, #20
 80156b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80156ba:	f04f 30ff 	mov.w	r0, #4294967295
 80156be:	fa00 f303 	lsl.w	r3, r0, r3
 80156c2:	e001      	b.n	80156c8 <_strtod_r+0x880>
 80156c4:	f04f 33ff 	mov.w	r3, #4294967295
 80156c8:	428b      	cmp	r3, r1
 80156ca:	d11a      	bne.n	8015702 <_strtod_r+0x8ba>
 80156cc:	493c      	ldr	r1, [pc, #240]	; (80157c0 <_strtod_r+0x978>)
 80156ce:	428a      	cmp	r2, r1
 80156d0:	d102      	bne.n	80156d8 <_strtod_r+0x890>
 80156d2:	3301      	adds	r3, #1
 80156d4:	f43f adff 	beq.w	80152d6 <_strtod_r+0x48e>
 80156d8:	4b38      	ldr	r3, [pc, #224]	; (80157bc <_strtod_r+0x974>)
 80156da:	4013      	ands	r3, r2
 80156dc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80156e0:	f04f 0a00 	mov.w	sl, #0
 80156e4:	e154      	b.n	8015990 <_strtod_r+0xb48>
 80156e6:	b963      	cbnz	r3, 8015702 <_strtod_r+0x8ba>
 80156e8:	f1ba 0f00 	cmp.w	sl, #0
 80156ec:	d109      	bne.n	8015702 <_strtod_r+0x8ba>
 80156ee:	e76b      	b.n	80155c8 <_strtod_r+0x780>
 80156f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80156f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80156f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80156fc:	f04f 3aff 	mov.w	sl, #4294967295
 8015700:	e146      	b.n	8015990 <_strtod_r+0xb48>
 8015702:	b117      	cbz	r7, 801570a <_strtod_r+0x8c2>
 8015704:	ea17 0f0b 	tst.w	r7, fp
 8015708:	e002      	b.n	8015710 <_strtod_r+0x8c8>
 801570a:	9b06      	ldr	r3, [sp, #24]
 801570c:	ea13 0f0a 	tst.w	r3, sl
 8015710:	f000 813e 	beq.w	8015990 <_strtod_r+0xb48>
 8015714:	9b07      	ldr	r3, [sp, #28]
 8015716:	9a03      	ldr	r2, [sp, #12]
 8015718:	4650      	mov	r0, sl
 801571a:	4659      	mov	r1, fp
 801571c:	b153      	cbz	r3, 8015734 <_strtod_r+0x8ec>
 801571e:	f7ff fb77 	bl	8014e10 <sulp>
 8015722:	4602      	mov	r2, r0
 8015724:	460b      	mov	r3, r1
 8015726:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801572a:	f7ea fe2f 	bl	800038c <__adddf3>
 801572e:	4682      	mov	sl, r0
 8015730:	468b      	mov	fp, r1
 8015732:	e12d      	b.n	8015990 <_strtod_r+0xb48>
 8015734:	f7ff fb6c 	bl	8014e10 <sulp>
 8015738:	4602      	mov	r2, r0
 801573a:	460b      	mov	r3, r1
 801573c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015740:	f7ea fe22 	bl	8000388 <__aeabi_dsub>
 8015744:	2200      	movs	r2, #0
 8015746:	2300      	movs	r3, #0
 8015748:	4682      	mov	sl, r0
 801574a:	468b      	mov	fp, r1
 801574c:	f7eb fa38 	bl	8000bc0 <__aeabi_dcmpeq>
 8015750:	2800      	cmp	r0, #0
 8015752:	f47f af49 	bne.w	80155e8 <_strtod_r+0x7a0>
 8015756:	e11b      	b.n	8015990 <_strtod_r+0xb48>
 8015758:	4629      	mov	r1, r5
 801575a:	4620      	mov	r0, r4
 801575c:	f7ff fabb 	bl	8014cd6 <__ratio>
 8015760:	ec57 6b10 	vmov	r6, r7, d0
 8015764:	2200      	movs	r2, #0
 8015766:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801576a:	ee10 0a10 	vmov	r0, s0
 801576e:	4639      	mov	r1, r7
 8015770:	f7eb fa3a 	bl	8000be8 <__aeabi_dcmple>
 8015774:	2800      	cmp	r0, #0
 8015776:	d042      	beq.n	80157fe <_strtod_r+0x9b6>
 8015778:	9b07      	ldr	r3, [sp, #28]
 801577a:	b123      	cbz	r3, 8015786 <_strtod_r+0x93e>
 801577c:	f04f 0800 	mov.w	r8, #0
 8015780:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80157c4 <_strtod_r+0x97c>
 8015784:	e011      	b.n	80157aa <_strtod_r+0x962>
 8015786:	f1ba 0f00 	cmp.w	sl, #0
 801578a:	d103      	bne.n	8015794 <_strtod_r+0x94c>
 801578c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015790:	b93b      	cbnz	r3, 80157a2 <_strtod_r+0x95a>
 8015792:	e01b      	b.n	80157cc <_strtod_r+0x984>
 8015794:	f1ba 0f01 	cmp.w	sl, #1
 8015798:	d103      	bne.n	80157a2 <_strtod_r+0x95a>
 801579a:	f1bb 0f00 	cmp.w	fp, #0
 801579e:	f43f af23 	beq.w	80155e8 <_strtod_r+0x7a0>
 80157a2:	f8df 9024 	ldr.w	r9, [pc, #36]	; 80157c8 <_strtod_r+0x980>
 80157a6:	f04f 0800 	mov.w	r8, #0
 80157aa:	2600      	movs	r6, #0
 80157ac:	4f05      	ldr	r7, [pc, #20]	; (80157c4 <_strtod_r+0x97c>)
 80157ae:	e039      	b.n	8015824 <_strtod_r+0x9dc>
 80157b0:	fffffc02 	.word	0xfffffc02
 80157b4:	fffffbe2 	.word	0xfffffbe2
 80157b8:	000fffff 	.word	0x000fffff
 80157bc:	7ff00000 	.word	0x7ff00000
 80157c0:	7fefffff 	.word	0x7fefffff
 80157c4:	3ff00000 	.word	0x3ff00000
 80157c8:	bff00000 	.word	0xbff00000
 80157cc:	2200      	movs	r2, #0
 80157ce:	4b98      	ldr	r3, [pc, #608]	; (8015a30 <_strtod_r+0xbe8>)
 80157d0:	4630      	mov	r0, r6
 80157d2:	4639      	mov	r1, r7
 80157d4:	f7eb f9fe 	bl	8000bd4 <__aeabi_dcmplt>
 80157d8:	b940      	cbnz	r0, 80157ec <_strtod_r+0x9a4>
 80157da:	4630      	mov	r0, r6
 80157dc:	4639      	mov	r1, r7
 80157de:	2200      	movs	r2, #0
 80157e0:	4b94      	ldr	r3, [pc, #592]	; (8015a34 <_strtod_r+0xbec>)
 80157e2:	f7ea ff85 	bl	80006f0 <__aeabi_dmul>
 80157e6:	4606      	mov	r6, r0
 80157e8:	460f      	mov	r7, r1
 80157ea:	e001      	b.n	80157f0 <_strtod_r+0x9a8>
 80157ec:	4f91      	ldr	r7, [pc, #580]	; (8015a34 <_strtod_r+0xbec>)
 80157ee:	2600      	movs	r6, #0
 80157f0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80157f4:	9614      	str	r6, [sp, #80]	; 0x50
 80157f6:	9315      	str	r3, [sp, #84]	; 0x54
 80157f8:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80157fc:	e012      	b.n	8015824 <_strtod_r+0x9dc>
 80157fe:	4b8d      	ldr	r3, [pc, #564]	; (8015a34 <_strtod_r+0xbec>)
 8015800:	4630      	mov	r0, r6
 8015802:	4639      	mov	r1, r7
 8015804:	2200      	movs	r2, #0
 8015806:	f7ea ff73 	bl	80006f0 <__aeabi_dmul>
 801580a:	9b07      	ldr	r3, [sp, #28]
 801580c:	4606      	mov	r6, r0
 801580e:	460f      	mov	r7, r1
 8015810:	b923      	cbnz	r3, 801581c <_strtod_r+0x9d4>
 8015812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015816:	900e      	str	r0, [sp, #56]	; 0x38
 8015818:	930f      	str	r3, [sp, #60]	; 0x3c
 801581a:	e001      	b.n	8015820 <_strtod_r+0x9d8>
 801581c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8015820:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8015824:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015828:	0d1b      	lsrs	r3, r3, #20
 801582a:	051b      	lsls	r3, r3, #20
 801582c:	9306      	str	r3, [sp, #24]
 801582e:	9a06      	ldr	r2, [sp, #24]
 8015830:	4b81      	ldr	r3, [pc, #516]	; (8015a38 <_strtod_r+0xbf0>)
 8015832:	429a      	cmp	r2, r3
 8015834:	d12b      	bne.n	801588e <_strtod_r+0xa46>
 8015836:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801583a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801583e:	ec4b ab10 	vmov	d0, sl, fp
 8015842:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015846:	f7ff f983 	bl	8014b50 <__ulp>
 801584a:	4640      	mov	r0, r8
 801584c:	ec53 2b10 	vmov	r2, r3, d0
 8015850:	4649      	mov	r1, r9
 8015852:	f7ea ff4d 	bl	80006f0 <__aeabi_dmul>
 8015856:	4652      	mov	r2, sl
 8015858:	465b      	mov	r3, fp
 801585a:	f7ea fd97 	bl	800038c <__adddf3>
 801585e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015862:	0d1b      	lsrs	r3, r3, #20
 8015864:	4a75      	ldr	r2, [pc, #468]	; (8015a3c <_strtod_r+0xbf4>)
 8015866:	051b      	lsls	r3, r3, #20
 8015868:	4293      	cmp	r3, r2
 801586a:	4682      	mov	sl, r0
 801586c:	d90c      	bls.n	8015888 <_strtod_r+0xa40>
 801586e:	4b74      	ldr	r3, [pc, #464]	; (8015a40 <_strtod_r+0xbf8>)
 8015870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015872:	429a      	cmp	r2, r3
 8015874:	d103      	bne.n	801587e <_strtod_r+0xa36>
 8015876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015878:	3301      	adds	r3, #1
 801587a:	f43f ad2c 	beq.w	80152d6 <_strtod_r+0x48e>
 801587e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8015a40 <_strtod_r+0xbf8>
 8015882:	f04f 3aff 	mov.w	sl, #4294967295
 8015886:	e072      	b.n	801596e <_strtod_r+0xb26>
 8015888:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 801588c:	e038      	b.n	8015900 <_strtod_r+0xab8>
 801588e:	9b03      	ldr	r3, [sp, #12]
 8015890:	b333      	cbz	r3, 80158e0 <_strtod_r+0xa98>
 8015892:	9b06      	ldr	r3, [sp, #24]
 8015894:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015898:	d822      	bhi.n	80158e0 <_strtod_r+0xa98>
 801589a:	a35d      	add	r3, pc, #372	; (adr r3, 8015a10 <_strtod_r+0xbc8>)
 801589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158a0:	4630      	mov	r0, r6
 80158a2:	4639      	mov	r1, r7
 80158a4:	f7eb f9a0 	bl	8000be8 <__aeabi_dcmple>
 80158a8:	b1a8      	cbz	r0, 80158d6 <_strtod_r+0xa8e>
 80158aa:	4639      	mov	r1, r7
 80158ac:	4630      	mov	r0, r6
 80158ae:	f7eb f9f7 	bl	8000ca0 <__aeabi_d2uiz>
 80158b2:	2800      	cmp	r0, #0
 80158b4:	bf08      	it	eq
 80158b6:	2001      	moveq	r0, #1
 80158b8:	f7ea fea4 	bl	8000604 <__aeabi_ui2d>
 80158bc:	9b07      	ldr	r3, [sp, #28]
 80158be:	4606      	mov	r6, r0
 80158c0:	460f      	mov	r7, r1
 80158c2:	b923      	cbnz	r3, 80158ce <_strtod_r+0xa86>
 80158c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80158c8:	9010      	str	r0, [sp, #64]	; 0x40
 80158ca:	9311      	str	r3, [sp, #68]	; 0x44
 80158cc:	e001      	b.n	80158d2 <_strtod_r+0xa8a>
 80158ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80158d2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80158d6:	9a06      	ldr	r2, [sp, #24]
 80158d8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
 80158dc:	ebc2 0903 	rsb	r9, r2, r3
 80158e0:	ed9d 0b08 	vldr	d0, [sp, #32]
 80158e4:	f7ff f934 	bl	8014b50 <__ulp>
 80158e8:	4640      	mov	r0, r8
 80158ea:	ec53 2b10 	vmov	r2, r3, d0
 80158ee:	4649      	mov	r1, r9
 80158f0:	f7ea fefe 	bl	80006f0 <__aeabi_dmul>
 80158f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80158f8:	f7ea fd48 	bl	800038c <__adddf3>
 80158fc:	4682      	mov	sl, r0
 80158fe:	468b      	mov	fp, r1
 8015900:	9b03      	ldr	r3, [sp, #12]
 8015902:	bba3      	cbnz	r3, 801596e <_strtod_r+0xb26>
 8015904:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015908:	0d1b      	lsrs	r3, r3, #20
 801590a:	9a06      	ldr	r2, [sp, #24]
 801590c:	051b      	lsls	r3, r3, #20
 801590e:	429a      	cmp	r2, r3
 8015910:	46d8      	mov	r8, fp
 8015912:	d12c      	bne.n	801596e <_strtod_r+0xb26>
 8015914:	4639      	mov	r1, r7
 8015916:	4630      	mov	r0, r6
 8015918:	f7eb f99a 	bl	8000c50 <__aeabi_d2iz>
 801591c:	f7ea fe82 	bl	8000624 <__aeabi_i2d>
 8015920:	460b      	mov	r3, r1
 8015922:	4602      	mov	r2, r0
 8015924:	4639      	mov	r1, r7
 8015926:	4630      	mov	r0, r6
 8015928:	f7ea fd2e 	bl	8000388 <__aeabi_dsub>
 801592c:	9b07      	ldr	r3, [sp, #28]
 801592e:	4606      	mov	r6, r0
 8015930:	460f      	mov	r7, r1
 8015932:	b92b      	cbnz	r3, 8015940 <_strtod_r+0xaf8>
 8015934:	f1ba 0f00 	cmp.w	sl, #0
 8015938:	d102      	bne.n	8015940 <_strtod_r+0xaf8>
 801593a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801593e:	b183      	cbz	r3, 8015962 <_strtod_r+0xb1a>
 8015940:	a335      	add	r3, pc, #212	; (adr r3, 8015a18 <_strtod_r+0xbd0>)
 8015942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015946:	4630      	mov	r0, r6
 8015948:	4639      	mov	r1, r7
 801594a:	f7eb f943 	bl	8000bd4 <__aeabi_dcmplt>
 801594e:	2800      	cmp	r0, #0
 8015950:	d131      	bne.n	80159b6 <_strtod_r+0xb6e>
 8015952:	a333      	add	r3, pc, #204	; (adr r3, 8015a20 <_strtod_r+0xbd8>)
 8015954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015958:	4630      	mov	r0, r6
 801595a:	4639      	mov	r1, r7
 801595c:	f7eb f958 	bl	8000c10 <__aeabi_dcmpgt>
 8015960:	e004      	b.n	801596c <_strtod_r+0xb24>
 8015962:	a331      	add	r3, pc, #196	; (adr r3, 8015a28 <_strtod_r+0xbe0>)
 8015964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015968:	f7eb f934 	bl	8000bd4 <__aeabi_dcmplt>
 801596c:	bb18      	cbnz	r0, 80159b6 <_strtod_r+0xb6e>
 801596e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015970:	9802      	ldr	r0, [sp, #8]
 8015972:	f7fe fe5c 	bl	801462e <_Bfree>
 8015976:	9904      	ldr	r1, [sp, #16]
 8015978:	9802      	ldr	r0, [sp, #8]
 801597a:	f7fe fe58 	bl	801462e <_Bfree>
 801597e:	4629      	mov	r1, r5
 8015980:	9802      	ldr	r0, [sp, #8]
 8015982:	f7fe fe54 	bl	801462e <_Bfree>
 8015986:	4621      	mov	r1, r4
 8015988:	9802      	ldr	r0, [sp, #8]
 801598a:	f7fe fe50 	bl	801462e <_Bfree>
 801598e:	e56d      	b.n	801546c <_strtod_r+0x624>
 8015990:	9b03      	ldr	r3, [sp, #12]
 8015992:	b183      	cbz	r3, 80159b6 <_strtod_r+0xb6e>
 8015994:	4b2b      	ldr	r3, [pc, #172]	; (8015a44 <_strtod_r+0xbfc>)
 8015996:	930b      	str	r3, [sp, #44]	; 0x2c
 8015998:	2300      	movs	r3, #0
 801599a:	930a      	str	r3, [sp, #40]	; 0x28
 801599c:	4650      	mov	r0, sl
 801599e:	4659      	mov	r1, fp
 80159a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80159a4:	f7ea fea4 	bl	80006f0 <__aeabi_dmul>
 80159a8:	4682      	mov	sl, r0
 80159aa:	468b      	mov	fp, r1
 80159ac:	b919      	cbnz	r1, 80159b6 <_strtod_r+0xb6e>
 80159ae:	b910      	cbnz	r0, 80159b6 <_strtod_r+0xb6e>
 80159b0:	9a02      	ldr	r2, [sp, #8]
 80159b2:	2322      	movs	r3, #34	; 0x22
 80159b4:	6013      	str	r3, [r2, #0]
 80159b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80159b8:	9802      	ldr	r0, [sp, #8]
 80159ba:	f7fe fe38 	bl	801462e <_Bfree>
 80159be:	9904      	ldr	r1, [sp, #16]
 80159c0:	9802      	ldr	r0, [sp, #8]
 80159c2:	f7fe fe34 	bl	801462e <_Bfree>
 80159c6:	4629      	mov	r1, r5
 80159c8:	9802      	ldr	r0, [sp, #8]
 80159ca:	f7fe fe30 	bl	801462e <_Bfree>
 80159ce:	9905      	ldr	r1, [sp, #20]
 80159d0:	9802      	ldr	r0, [sp, #8]
 80159d2:	f7fe fe2c 	bl	801462e <_Bfree>
 80159d6:	4621      	mov	r1, r4
 80159d8:	9802      	ldr	r0, [sp, #8]
 80159da:	f7fe fe28 	bl	801462e <_Bfree>
 80159de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80159e0:	b113      	cbz	r3, 80159e8 <_strtod_r+0xba0>
 80159e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80159e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80159e6:	6013      	str	r3, [r2, #0]
 80159e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159ea:	b11b      	cbz	r3, 80159f4 <_strtod_r+0xbac>
 80159ec:	4652      	mov	r2, sl
 80159ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80159f2:	e007      	b.n	8015a04 <_strtod_r+0xbbc>
 80159f4:	4652      	mov	r2, sl
 80159f6:	465b      	mov	r3, fp
 80159f8:	e004      	b.n	8015a04 <_strtod_r+0xbbc>
 80159fa:	2500      	movs	r5, #0
 80159fc:	462a      	mov	r2, r5
 80159fe:	2101      	movs	r1, #1
 8015a00:	f7ff bb41 	b.w	8015086 <_strtod_r+0x23e>
 8015a04:	ec43 2b10 	vmov	d0, r2, r3
 8015a08:	b01d      	add	sp, #116	; 0x74
 8015a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a0e:	bf00      	nop
 8015a10:	ffc00000 	.word	0xffc00000
 8015a14:	41dfffff 	.word	0x41dfffff
 8015a18:	94a03595 	.word	0x94a03595
 8015a1c:	3fdfffff 	.word	0x3fdfffff
 8015a20:	35afe535 	.word	0x35afe535
 8015a24:	3fe00000 	.word	0x3fe00000
 8015a28:	94a03595 	.word	0x94a03595
 8015a2c:	3fcfffff 	.word	0x3fcfffff
 8015a30:	3ff00000 	.word	0x3ff00000
 8015a34:	3fe00000 	.word	0x3fe00000
 8015a38:	7fe00000 	.word	0x7fe00000
 8015a3c:	7c9fffff 	.word	0x7c9fffff
 8015a40:	7fefffff 	.word	0x7fefffff
 8015a44:	39500000 	.word	0x39500000

08015a48 <_strtol_r>:
 8015a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a4c:	4680      	mov	r8, r0
 8015a4e:	4840      	ldr	r0, [pc, #256]	; (8015b50 <_strtol_r+0x108>)
 8015a50:	f8d0 9000 	ldr.w	r9, [r0]
 8015a54:	460f      	mov	r7, r1
 8015a56:	463d      	mov	r5, r7
 8015a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a5c:	eb09 0004 	add.w	r0, r9, r4
 8015a60:	7840      	ldrb	r0, [r0, #1]
 8015a62:	f000 0008 	and.w	r0, r0, #8
 8015a66:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8015a6a:	b108      	cbz	r0, 8015a70 <_strtol_r+0x28>
 8015a6c:	462f      	mov	r7, r5
 8015a6e:	e7f2      	b.n	8015a56 <_strtol_r+0xe>
 8015a70:	2c2d      	cmp	r4, #45	; 0x2d
 8015a72:	d103      	bne.n	8015a7c <_strtol_r+0x34>
 8015a74:	1cbd      	adds	r5, r7, #2
 8015a76:	787c      	ldrb	r4, [r7, #1]
 8015a78:	2601      	movs	r6, #1
 8015a7a:	e003      	b.n	8015a84 <_strtol_r+0x3c>
 8015a7c:	2c2b      	cmp	r4, #43	; 0x2b
 8015a7e:	bf04      	itt	eq
 8015a80:	787c      	ldrbeq	r4, [r7, #1]
 8015a82:	1cbd      	addeq	r5, r7, #2
 8015a84:	b113      	cbz	r3, 8015a8c <_strtol_r+0x44>
 8015a86:	2b10      	cmp	r3, #16
 8015a88:	d10a      	bne.n	8015aa0 <_strtol_r+0x58>
 8015a8a:	e05b      	b.n	8015b44 <_strtol_r+0xfc>
 8015a8c:	2c30      	cmp	r4, #48	; 0x30
 8015a8e:	d157      	bne.n	8015b40 <_strtol_r+0xf8>
 8015a90:	7828      	ldrb	r0, [r5, #0]
 8015a92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015a96:	2858      	cmp	r0, #88	; 0x58
 8015a98:	d14d      	bne.n	8015b36 <_strtol_r+0xee>
 8015a9a:	786c      	ldrb	r4, [r5, #1]
 8015a9c:	2310      	movs	r3, #16
 8015a9e:	3502      	adds	r5, #2
 8015aa0:	2e00      	cmp	r6, #0
 8015aa2:	bf14      	ite	ne
 8015aa4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8015aa8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8015aac:	2700      	movs	r7, #0
 8015aae:	fbbc faf3 	udiv	sl, ip, r3
 8015ab2:	4638      	mov	r0, r7
 8015ab4:	fb03 cc1a 	mls	ip, r3, sl, ip
 8015ab8:	eb09 0e04 	add.w	lr, r9, r4
 8015abc:	f89e e001 	ldrb.w	lr, [lr, #1]
 8015ac0:	f01e 0f04 	tst.w	lr, #4
 8015ac4:	d001      	beq.n	8015aca <_strtol_r+0x82>
 8015ac6:	3c30      	subs	r4, #48	; 0x30
 8015ac8:	e00b      	b.n	8015ae2 <_strtol_r+0x9a>
 8015aca:	f01e 0e03 	ands.w	lr, lr, #3
 8015ace:	d01b      	beq.n	8015b08 <_strtol_r+0xc0>
 8015ad0:	f1be 0f01 	cmp.w	lr, #1
 8015ad4:	bf0c      	ite	eq
 8015ad6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8015ada:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8015ade:	ebce 0404 	rsb	r4, lr, r4
 8015ae2:	42a3      	cmp	r3, r4
 8015ae4:	dd10      	ble.n	8015b08 <_strtol_r+0xc0>
 8015ae6:	f1b7 3fff 	cmp.w	r7, #4294967295
 8015aea:	d00a      	beq.n	8015b02 <_strtol_r+0xba>
 8015aec:	4550      	cmp	r0, sl
 8015aee:	d806      	bhi.n	8015afe <_strtol_r+0xb6>
 8015af0:	d101      	bne.n	8015af6 <_strtol_r+0xae>
 8015af2:	4564      	cmp	r4, ip
 8015af4:	dc03      	bgt.n	8015afe <_strtol_r+0xb6>
 8015af6:	fb03 4000 	mla	r0, r3, r0, r4
 8015afa:	2701      	movs	r7, #1
 8015afc:	e001      	b.n	8015b02 <_strtol_r+0xba>
 8015afe:	f04f 37ff 	mov.w	r7, #4294967295
 8015b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015b06:	e7d7      	b.n	8015ab8 <_strtol_r+0x70>
 8015b08:	1c7b      	adds	r3, r7, #1
 8015b0a:	d10c      	bne.n	8015b26 <_strtol_r+0xde>
 8015b0c:	2e00      	cmp	r6, #0
 8015b0e:	f04f 0322 	mov.w	r3, #34	; 0x22
 8015b12:	bf14      	ite	ne
 8015b14:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8015b18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8015b1c:	f8c8 3000 	str.w	r3, [r8]
 8015b20:	b92a      	cbnz	r2, 8015b2e <_strtol_r+0xe6>
 8015b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b26:	b106      	cbz	r6, 8015b2a <_strtol_r+0xe2>
 8015b28:	4240      	negs	r0, r0
 8015b2a:	b172      	cbz	r2, 8015b4a <_strtol_r+0x102>
 8015b2c:	b107      	cbz	r7, 8015b30 <_strtol_r+0xe8>
 8015b2e:	1e69      	subs	r1, r5, #1
 8015b30:	6011      	str	r1, [r2, #0]
 8015b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b36:	2430      	movs	r4, #48	; 0x30
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d1b1      	bne.n	8015aa0 <_strtol_r+0x58>
 8015b3c:	2308      	movs	r3, #8
 8015b3e:	e7af      	b.n	8015aa0 <_strtol_r+0x58>
 8015b40:	230a      	movs	r3, #10
 8015b42:	e7ad      	b.n	8015aa0 <_strtol_r+0x58>
 8015b44:	2c30      	cmp	r4, #48	; 0x30
 8015b46:	d0a3      	beq.n	8015a90 <_strtol_r+0x48>
 8015b48:	e7aa      	b.n	8015aa0 <_strtol_r+0x58>
 8015b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b4e:	bf00      	nop
 8015b50:	2001008c 	.word	0x2001008c

08015b54 <_strtoll_r>:
 8015b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b58:	461f      	mov	r7, r3
 8015b5a:	4b55      	ldr	r3, [pc, #340]	; (8015cb0 <_strtoll_r+0x15c>)
 8015b5c:	b087      	sub	sp, #28
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	9303      	str	r3, [sp, #12]
 8015b62:	9005      	str	r0, [sp, #20]
 8015b64:	468a      	mov	sl, r1
 8015b66:	4693      	mov	fp, r2
 8015b68:	460b      	mov	r3, r1
 8015b6a:	461d      	mov	r5, r3
 8015b6c:	9a03      	ldr	r2, [sp, #12]
 8015b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015b72:	4422      	add	r2, r4
 8015b74:	7852      	ldrb	r2, [r2, #1]
 8015b76:	f002 0208 	and.w	r2, r2, #8
 8015b7a:	f002 06ff 	and.w	r6, r2, #255	; 0xff
 8015b7e:	b10a      	cbz	r2, 8015b84 <_strtoll_r+0x30>
 8015b80:	462b      	mov	r3, r5
 8015b82:	e7f2      	b.n	8015b6a <_strtoll_r+0x16>
 8015b84:	2c2d      	cmp	r4, #45	; 0x2d
 8015b86:	d103      	bne.n	8015b90 <_strtoll_r+0x3c>
 8015b88:	1c9d      	adds	r5, r3, #2
 8015b8a:	785c      	ldrb	r4, [r3, #1]
 8015b8c:	2601      	movs	r6, #1
 8015b8e:	e003      	b.n	8015b98 <_strtoll_r+0x44>
 8015b90:	2c2b      	cmp	r4, #43	; 0x2b
 8015b92:	bf04      	itt	eq
 8015b94:	785c      	ldrbeq	r4, [r3, #1]
 8015b96:	1c9d      	addeq	r5, r3, #2
 8015b98:	b117      	cbz	r7, 8015ba0 <_strtoll_r+0x4c>
 8015b9a:	2f10      	cmp	r7, #16
 8015b9c:	d10a      	bne.n	8015bb4 <_strtoll_r+0x60>
 8015b9e:	e07f      	b.n	8015ca0 <_strtoll_r+0x14c>
 8015ba0:	2c30      	cmp	r4, #48	; 0x30
 8015ba2:	d17b      	bne.n	8015c9c <_strtoll_r+0x148>
 8015ba4:	782b      	ldrb	r3, [r5, #0]
 8015ba6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015baa:	2b58      	cmp	r3, #88	; 0x58
 8015bac:	d171      	bne.n	8015c92 <_strtoll_r+0x13e>
 8015bae:	786c      	ldrb	r4, [r5, #1]
 8015bb0:	2710      	movs	r7, #16
 8015bb2:	3502      	adds	r5, #2
 8015bb4:	b926      	cbnz	r6, 8015bc0 <_strtoll_r+0x6c>
 8015bb6:	f04f 38ff 	mov.w	r8, #4294967295
 8015bba:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015bbe:	e003      	b.n	8015bc8 <_strtoll_r+0x74>
 8015bc0:	f04f 0800 	mov.w	r8, #0
 8015bc4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8015bc8:	463a      	mov	r2, r7
 8015bca:	17fb      	asrs	r3, r7, #31
 8015bcc:	4640      	mov	r0, r8
 8015bce:	4649      	mov	r1, r9
 8015bd0:	e9cd 2300 	strd	r2, r3, [sp]
 8015bd4:	f7eb f8d4 	bl	8000d80 <__aeabi_uldivmod>
 8015bd8:	17fb      	asrs	r3, r7, #31
 8015bda:	9204      	str	r2, [sp, #16]
 8015bdc:	4640      	mov	r0, r8
 8015bde:	4649      	mov	r1, r9
 8015be0:	463a      	mov	r2, r7
 8015be2:	f7eb f8cd 	bl	8000d80 <__aeabi_uldivmod>
 8015be6:	2300      	movs	r3, #0
 8015be8:	4680      	mov	r8, r0
 8015bea:	4689      	mov	r9, r1
 8015bec:	2000      	movs	r0, #0
 8015bee:	2100      	movs	r1, #0
 8015bf0:	9a03      	ldr	r2, [sp, #12]
 8015bf2:	4422      	add	r2, r4
 8015bf4:	7852      	ldrb	r2, [r2, #1]
 8015bf6:	f012 0f04 	tst.w	r2, #4
 8015bfa:	d001      	beq.n	8015c00 <_strtoll_r+0xac>
 8015bfc:	3c30      	subs	r4, #48	; 0x30
 8015bfe:	e007      	b.n	8015c10 <_strtoll_r+0xbc>
 8015c00:	f012 0203 	ands.w	r2, r2, #3
 8015c04:	d025      	beq.n	8015c52 <_strtoll_r+0xfe>
 8015c06:	2a01      	cmp	r2, #1
 8015c08:	bf0c      	ite	eq
 8015c0a:	2237      	moveq	r2, #55	; 0x37
 8015c0c:	2257      	movne	r2, #87	; 0x57
 8015c0e:	1aa4      	subs	r4, r4, r2
 8015c10:	42a7      	cmp	r7, r4
 8015c12:	dd1e      	ble.n	8015c52 <_strtoll_r+0xfe>
 8015c14:	1c5a      	adds	r2, r3, #1
 8015c16:	d019      	beq.n	8015c4c <_strtoll_r+0xf8>
 8015c18:	4589      	cmp	r9, r1
 8015c1a:	bf08      	it	eq
 8015c1c:	4580      	cmpeq	r8, r0
 8015c1e:	d313      	bcc.n	8015c48 <_strtoll_r+0xf4>
 8015c20:	4549      	cmp	r1, r9
 8015c22:	bf08      	it	eq
 8015c24:	4540      	cmpeq	r0, r8
 8015c26:	d102      	bne.n	8015c2e <_strtoll_r+0xda>
 8015c28:	9b04      	ldr	r3, [sp, #16]
 8015c2a:	429c      	cmp	r4, r3
 8015c2c:	dc0c      	bgt.n	8015c48 <_strtoll_r+0xf4>
 8015c2e:	9b01      	ldr	r3, [sp, #4]
 8015c30:	9a00      	ldr	r2, [sp, #0]
 8015c32:	4343      	muls	r3, r0
 8015c34:	fb02 3301 	mla	r3, r2, r1, r3
 8015c38:	fba0 0102 	umull	r0, r1, r0, r2
 8015c3c:	4419      	add	r1, r3
 8015c3e:	1900      	adds	r0, r0, r4
 8015c40:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015c44:	2301      	movs	r3, #1
 8015c46:	e001      	b.n	8015c4c <_strtoll_r+0xf8>
 8015c48:	f04f 33ff 	mov.w	r3, #4294967295
 8015c4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015c50:	e7ce      	b.n	8015bf0 <_strtoll_r+0x9c>
 8015c52:	1c5a      	adds	r2, r3, #1
 8015c54:	d10f      	bne.n	8015c76 <_strtoll_r+0x122>
 8015c56:	b926      	cbnz	r6, 8015c62 <_strtoll_r+0x10e>
 8015c58:	f04f 30ff 	mov.w	r0, #4294967295
 8015c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015c60:	e002      	b.n	8015c68 <_strtoll_r+0x114>
 8015c62:	2000      	movs	r0, #0
 8015c64:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8015c68:	9a05      	ldr	r2, [sp, #20]
 8015c6a:	2322      	movs	r3, #34	; 0x22
 8015c6c:	6013      	str	r3, [r2, #0]
 8015c6e:	f1bb 0f00 	cmp.w	fp, #0
 8015c72:	d108      	bne.n	8015c86 <_strtoll_r+0x132>
 8015c74:	e018      	b.n	8015ca8 <_strtoll_r+0x154>
 8015c76:	b116      	cbz	r6, 8015c7e <_strtoll_r+0x12a>
 8015c78:	4240      	negs	r0, r0
 8015c7a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8015c7e:	f1bb 0f00 	cmp.w	fp, #0
 8015c82:	d011      	beq.n	8015ca8 <_strtoll_r+0x154>
 8015c84:	b10b      	cbz	r3, 8015c8a <_strtoll_r+0x136>
 8015c86:	3d01      	subs	r5, #1
 8015c88:	e000      	b.n	8015c8c <_strtoll_r+0x138>
 8015c8a:	4655      	mov	r5, sl
 8015c8c:	f8cb 5000 	str.w	r5, [fp]
 8015c90:	e00a      	b.n	8015ca8 <_strtoll_r+0x154>
 8015c92:	2430      	movs	r4, #48	; 0x30
 8015c94:	2f00      	cmp	r7, #0
 8015c96:	d18d      	bne.n	8015bb4 <_strtoll_r+0x60>
 8015c98:	2708      	movs	r7, #8
 8015c9a:	e78b      	b.n	8015bb4 <_strtoll_r+0x60>
 8015c9c:	270a      	movs	r7, #10
 8015c9e:	e789      	b.n	8015bb4 <_strtoll_r+0x60>
 8015ca0:	2c30      	cmp	r4, #48	; 0x30
 8015ca2:	f43f af7f 	beq.w	8015ba4 <_strtoll_r+0x50>
 8015ca6:	e785      	b.n	8015bb4 <_strtoll_r+0x60>
 8015ca8:	b007      	add	sp, #28
 8015caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cae:	bf00      	nop
 8015cb0:	2001008c 	.word	0x2001008c

08015cb4 <_strtoul_r>:
 8015cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb8:	4680      	mov	r8, r0
 8015cba:	483c      	ldr	r0, [pc, #240]	; (8015dac <_strtoul_r+0xf8>)
 8015cbc:	f8d0 9000 	ldr.w	r9, [r0]
 8015cc0:	460e      	mov	r6, r1
 8015cc2:	4635      	mov	r5, r6
 8015cc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015cc8:	eb09 0004 	add.w	r0, r9, r4
 8015ccc:	7840      	ldrb	r0, [r0, #1]
 8015cce:	f000 0008 	and.w	r0, r0, #8
 8015cd2:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8015cd6:	b108      	cbz	r0, 8015cdc <_strtoul_r+0x28>
 8015cd8:	462e      	mov	r6, r5
 8015cda:	e7f2      	b.n	8015cc2 <_strtoul_r+0xe>
 8015cdc:	2c2d      	cmp	r4, #45	; 0x2d
 8015cde:	d103      	bne.n	8015ce8 <_strtoul_r+0x34>
 8015ce0:	1cb5      	adds	r5, r6, #2
 8015ce2:	7874      	ldrb	r4, [r6, #1]
 8015ce4:	2701      	movs	r7, #1
 8015ce6:	e003      	b.n	8015cf0 <_strtoul_r+0x3c>
 8015ce8:	2c2b      	cmp	r4, #43	; 0x2b
 8015cea:	bf04      	itt	eq
 8015cec:	7874      	ldrbeq	r4, [r6, #1]
 8015cee:	1cb5      	addeq	r5, r6, #2
 8015cf0:	b113      	cbz	r3, 8015cf8 <_strtoul_r+0x44>
 8015cf2:	2b10      	cmp	r3, #16
 8015cf4:	d10a      	bne.n	8015d0c <_strtoul_r+0x58>
 8015cf6:	e053      	b.n	8015da0 <_strtoul_r+0xec>
 8015cf8:	2c30      	cmp	r4, #48	; 0x30
 8015cfa:	d14f      	bne.n	8015d9c <_strtoul_r+0xe8>
 8015cfc:	7828      	ldrb	r0, [r5, #0]
 8015cfe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015d02:	2858      	cmp	r0, #88	; 0x58
 8015d04:	d145      	bne.n	8015d92 <_strtoul_r+0xde>
 8015d06:	786c      	ldrb	r4, [r5, #1]
 8015d08:	2310      	movs	r3, #16
 8015d0a:	3502      	adds	r5, #2
 8015d0c:	f04f 3cff 	mov.w	ip, #4294967295
 8015d10:	2600      	movs	r6, #0
 8015d12:	fbbc fcf3 	udiv	ip, ip, r3
 8015d16:	fb03 fa0c 	mul.w	sl, r3, ip
 8015d1a:	ea6f 0a0a 	mvn.w	sl, sl
 8015d1e:	4630      	mov	r0, r6
 8015d20:	eb09 0e04 	add.w	lr, r9, r4
 8015d24:	f89e e001 	ldrb.w	lr, [lr, #1]
 8015d28:	f01e 0f04 	tst.w	lr, #4
 8015d2c:	d001      	beq.n	8015d32 <_strtoul_r+0x7e>
 8015d2e:	3c30      	subs	r4, #48	; 0x30
 8015d30:	e00b      	b.n	8015d4a <_strtoul_r+0x96>
 8015d32:	f01e 0e03 	ands.w	lr, lr, #3
 8015d36:	d01a      	beq.n	8015d6e <_strtoul_r+0xba>
 8015d38:	f1be 0f01 	cmp.w	lr, #1
 8015d3c:	bf0c      	ite	eq
 8015d3e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8015d42:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8015d46:	ebce 0404 	rsb	r4, lr, r4
 8015d4a:	42a3      	cmp	r3, r4
 8015d4c:	dd0f      	ble.n	8015d6e <_strtoul_r+0xba>
 8015d4e:	2e00      	cmp	r6, #0
 8015d50:	db08      	blt.n	8015d64 <_strtoul_r+0xb0>
 8015d52:	4560      	cmp	r0, ip
 8015d54:	d806      	bhi.n	8015d64 <_strtoul_r+0xb0>
 8015d56:	d101      	bne.n	8015d5c <_strtoul_r+0xa8>
 8015d58:	4554      	cmp	r4, sl
 8015d5a:	dc03      	bgt.n	8015d64 <_strtoul_r+0xb0>
 8015d5c:	fb03 4000 	mla	r0, r3, r0, r4
 8015d60:	2601      	movs	r6, #1
 8015d62:	e001      	b.n	8015d68 <_strtoul_r+0xb4>
 8015d64:	f04f 36ff 	mov.w	r6, #4294967295
 8015d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015d6c:	e7d8      	b.n	8015d20 <_strtoul_r+0x6c>
 8015d6e:	2e00      	cmp	r6, #0
 8015d70:	da07      	bge.n	8015d82 <_strtoul_r+0xce>
 8015d72:	2322      	movs	r3, #34	; 0x22
 8015d74:	f8c8 3000 	str.w	r3, [r8]
 8015d78:	f04f 30ff 	mov.w	r0, #4294967295
 8015d7c:	b92a      	cbnz	r2, 8015d8a <_strtoul_r+0xd6>
 8015d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d82:	b107      	cbz	r7, 8015d86 <_strtoul_r+0xd2>
 8015d84:	4240      	negs	r0, r0
 8015d86:	b172      	cbz	r2, 8015da6 <_strtoul_r+0xf2>
 8015d88:	b106      	cbz	r6, 8015d8c <_strtoul_r+0xd8>
 8015d8a:	1e69      	subs	r1, r5, #1
 8015d8c:	6011      	str	r1, [r2, #0]
 8015d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d92:	2430      	movs	r4, #48	; 0x30
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d1b9      	bne.n	8015d0c <_strtoul_r+0x58>
 8015d98:	2308      	movs	r3, #8
 8015d9a:	e7b7      	b.n	8015d0c <_strtoul_r+0x58>
 8015d9c:	230a      	movs	r3, #10
 8015d9e:	e7b5      	b.n	8015d0c <_strtoul_r+0x58>
 8015da0:	2c30      	cmp	r4, #48	; 0x30
 8015da2:	d0ab      	beq.n	8015cfc <_strtoul_r+0x48>
 8015da4:	e7b2      	b.n	8015d0c <_strtoul_r+0x58>
 8015da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015daa:	bf00      	nop
 8015dac:	2001008c 	.word	0x2001008c

08015db0 <_strtoull_r>:
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db4:	461e      	mov	r6, r3
 8015db6:	4b52      	ldr	r3, [pc, #328]	; (8015f00 <_strtoull_r+0x150>)
 8015db8:	b085      	sub	sp, #20
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	9302      	str	r3, [sp, #8]
 8015dbe:	9003      	str	r0, [sp, #12]
 8015dc0:	4688      	mov	r8, r1
 8015dc2:	4691      	mov	r9, r2
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	461d      	mov	r5, r3
 8015dc8:	9a02      	ldr	r2, [sp, #8]
 8015dca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015dce:	4422      	add	r2, r4
 8015dd0:	7852      	ldrb	r2, [r2, #1]
 8015dd2:	f002 0208 	and.w	r2, r2, #8
 8015dd6:	f002 07ff 	and.w	r7, r2, #255	; 0xff
 8015dda:	b10a      	cbz	r2, 8015de0 <_strtoull_r+0x30>
 8015ddc:	462b      	mov	r3, r5
 8015dde:	e7f2      	b.n	8015dc6 <_strtoull_r+0x16>
 8015de0:	2c2d      	cmp	r4, #45	; 0x2d
 8015de2:	d103      	bne.n	8015dec <_strtoull_r+0x3c>
 8015de4:	1c9d      	adds	r5, r3, #2
 8015de6:	785c      	ldrb	r4, [r3, #1]
 8015de8:	2701      	movs	r7, #1
 8015dea:	e003      	b.n	8015df4 <_strtoull_r+0x44>
 8015dec:	2c2b      	cmp	r4, #43	; 0x2b
 8015dee:	bf04      	itt	eq
 8015df0:	785c      	ldrbeq	r4, [r3, #1]
 8015df2:	1c9d      	addeq	r5, r3, #2
 8015df4:	b116      	cbz	r6, 8015dfc <_strtoull_r+0x4c>
 8015df6:	2e10      	cmp	r6, #16
 8015df8:	d10a      	bne.n	8015e10 <_strtoull_r+0x60>
 8015dfa:	e07b      	b.n	8015ef4 <_strtoull_r+0x144>
 8015dfc:	2c30      	cmp	r4, #48	; 0x30
 8015dfe:	d177      	bne.n	8015ef0 <_strtoull_r+0x140>
 8015e00:	782b      	ldrb	r3, [r5, #0]
 8015e02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015e06:	2b58      	cmp	r3, #88	; 0x58
 8015e08:	d16d      	bne.n	8015ee6 <_strtoull_r+0x136>
 8015e0a:	786c      	ldrb	r4, [r5, #1]
 8015e0c:	2610      	movs	r6, #16
 8015e0e:	3502      	adds	r5, #2
 8015e10:	ea4f 7be6 	mov.w	fp, r6, asr #31
 8015e14:	4632      	mov	r2, r6
 8015e16:	465b      	mov	r3, fp
 8015e18:	f04f 30ff 	mov.w	r0, #4294967295
 8015e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8015e20:	f7ea ffae 	bl	8000d80 <__aeabi_uldivmod>
 8015e24:	4632      	mov	r2, r6
 8015e26:	e9cd 0100 	strd	r0, r1, [sp]
 8015e2a:	465b      	mov	r3, fp
 8015e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015e30:	f04f 31ff 	mov.w	r1, #4294967295
 8015e34:	f7ea ffa4 	bl	8000d80 <__aeabi_uldivmod>
 8015e38:	46b2      	mov	sl, r6
 8015e3a:	4694      	mov	ip, r2
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	2000      	movs	r0, #0
 8015e40:	2100      	movs	r1, #0
 8015e42:	9a02      	ldr	r2, [sp, #8]
 8015e44:	eb02 0e04 	add.w	lr, r2, r4
 8015e48:	f89e e001 	ldrb.w	lr, [lr, #1]
 8015e4c:	f01e 0f04 	tst.w	lr, #4
 8015e50:	d001      	beq.n	8015e56 <_strtoull_r+0xa6>
 8015e52:	3c30      	subs	r4, #48	; 0x30
 8015e54:	e00b      	b.n	8015e6e <_strtoull_r+0xbe>
 8015e56:	f01e 0e03 	ands.w	lr, lr, #3
 8015e5a:	d029      	beq.n	8015eb0 <_strtoull_r+0x100>
 8015e5c:	f1be 0f01 	cmp.w	lr, #1
 8015e60:	bf0c      	ite	eq
 8015e62:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8015e66:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8015e6a:	ebce 0404 	rsb	r4, lr, r4
 8015e6e:	42a6      	cmp	r6, r4
 8015e70:	dd1e      	ble.n	8015eb0 <_strtoull_r+0x100>
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	db17      	blt.n	8015ea6 <_strtoull_r+0xf6>
 8015e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e7a:	428b      	cmp	r3, r1
 8015e7c:	bf08      	it	eq
 8015e7e:	4282      	cmpeq	r2, r0
 8015e80:	d311      	bcc.n	8015ea6 <_strtoull_r+0xf6>
 8015e82:	4299      	cmp	r1, r3
 8015e84:	bf08      	it	eq
 8015e86:	4290      	cmpeq	r0, r2
 8015e88:	d101      	bne.n	8015e8e <_strtoull_r+0xde>
 8015e8a:	4564      	cmp	r4, ip
 8015e8c:	dc0b      	bgt.n	8015ea6 <_strtoull_r+0xf6>
 8015e8e:	fb00 f30b 	mul.w	r3, r0, fp
 8015e92:	fb0a 3301 	mla	r3, sl, r1, r3
 8015e96:	fba0 010a 	umull	r0, r1, r0, sl
 8015e9a:	4419      	add	r1, r3
 8015e9c:	1900      	adds	r0, r0, r4
 8015e9e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	e001      	b.n	8015eaa <_strtoull_r+0xfa>
 8015ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8015eaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015eae:	e7c8      	b.n	8015e42 <_strtoull_r+0x92>
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	da0a      	bge.n	8015eca <_strtoull_r+0x11a>
 8015eb4:	9a03      	ldr	r2, [sp, #12]
 8015eb6:	2322      	movs	r3, #34	; 0x22
 8015eb8:	6013      	str	r3, [r2, #0]
 8015eba:	f04f 30ff 	mov.w	r0, #4294967295
 8015ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8015ec2:	f1b9 0f00 	cmp.w	r9, #0
 8015ec6:	d108      	bne.n	8015eda <_strtoull_r+0x12a>
 8015ec8:	e017      	b.n	8015efa <_strtoull_r+0x14a>
 8015eca:	b117      	cbz	r7, 8015ed2 <_strtoull_r+0x122>
 8015ecc:	4240      	negs	r0, r0
 8015ece:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8015ed2:	f1b9 0f00 	cmp.w	r9, #0
 8015ed6:	d010      	beq.n	8015efa <_strtoull_r+0x14a>
 8015ed8:	b10b      	cbz	r3, 8015ede <_strtoull_r+0x12e>
 8015eda:	3d01      	subs	r5, #1
 8015edc:	e000      	b.n	8015ee0 <_strtoull_r+0x130>
 8015ede:	4645      	mov	r5, r8
 8015ee0:	f8c9 5000 	str.w	r5, [r9]
 8015ee4:	e009      	b.n	8015efa <_strtoull_r+0x14a>
 8015ee6:	2430      	movs	r4, #48	; 0x30
 8015ee8:	2e00      	cmp	r6, #0
 8015eea:	d191      	bne.n	8015e10 <_strtoull_r+0x60>
 8015eec:	2608      	movs	r6, #8
 8015eee:	e78f      	b.n	8015e10 <_strtoull_r+0x60>
 8015ef0:	260a      	movs	r6, #10
 8015ef2:	e78d      	b.n	8015e10 <_strtoull_r+0x60>
 8015ef4:	2c30      	cmp	r4, #48	; 0x30
 8015ef6:	d083      	beq.n	8015e00 <_strtoull_r+0x50>
 8015ef8:	e78a      	b.n	8015e10 <_strtoull_r+0x60>
 8015efa:	b005      	add	sp, #20
 8015efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f00:	2001008c 	.word	0x2001008c

08015f04 <__ssprint_r>:
 8015f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f08:	4693      	mov	fp, r2
 8015f0a:	6892      	ldr	r2, [r2, #8]
 8015f0c:	4681      	mov	r9, r0
 8015f0e:	460c      	mov	r4, r1
 8015f10:	b34a      	cbz	r2, 8015f66 <__ssprint_r+0x62>
 8015f12:	2300      	movs	r3, #0
 8015f14:	f8db a000 	ldr.w	sl, [fp]
 8015f18:	9301      	str	r3, [sp, #4]
 8015f1a:	461f      	mov	r7, r3
 8015f1c:	e006      	b.n	8015f2c <__ssprint_r+0x28>
 8015f1e:	f8da 3000 	ldr.w	r3, [sl]
 8015f22:	f8da 7004 	ldr.w	r7, [sl, #4]
 8015f26:	9301      	str	r3, [sp, #4]
 8015f28:	f10a 0a08 	add.w	sl, sl, #8
 8015f2c:	2f00      	cmp	r7, #0
 8015f2e:	d0f6      	beq.n	8015f1e <__ssprint_r+0x1a>
 8015f30:	68a6      	ldr	r6, [r4, #8]
 8015f32:	42b7      	cmp	r7, r6
 8015f34:	d360      	bcc.n	8015ff8 <__ssprint_r+0xf4>
 8015f36:	89a0      	ldrh	r0, [r4, #12]
 8015f38:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8015f3c:	d117      	bne.n	8015f6e <__ssprint_r+0x6a>
 8015f3e:	42b7      	cmp	r7, r6
 8015f40:	d35a      	bcc.n	8015ff8 <__ssprint_r+0xf4>
 8015f42:	4632      	mov	r2, r6
 8015f44:	9901      	ldr	r1, [sp, #4]
 8015f46:	6820      	ldr	r0, [r4, #0]
 8015f48:	f000 fc73 	bl	8016832 <memmove>
 8015f4c:	68a2      	ldr	r2, [r4, #8]
 8015f4e:	1b92      	subs	r2, r2, r6
 8015f50:	60a2      	str	r2, [r4, #8]
 8015f52:	6822      	ldr	r2, [r4, #0]
 8015f54:	4416      	add	r6, r2
 8015f56:	f8db 2008 	ldr.w	r2, [fp, #8]
 8015f5a:	6026      	str	r6, [r4, #0]
 8015f5c:	1bd7      	subs	r7, r2, r7
 8015f5e:	f8cb 7008 	str.w	r7, [fp, #8]
 8015f62:	2f00      	cmp	r7, #0
 8015f64:	d1db      	bne.n	8015f1e <__ssprint_r+0x1a>
 8015f66:	2000      	movs	r0, #0
 8015f68:	f8cb 0004 	str.w	r0, [fp, #4]
 8015f6c:	e046      	b.n	8015ffc <__ssprint_r+0xf8>
 8015f6e:	6825      	ldr	r5, [r4, #0]
 8015f70:	6921      	ldr	r1, [r4, #16]
 8015f72:	ebc1 0805 	rsb	r8, r1, r5
 8015f76:	f108 0201 	add.w	r2, r8, #1
 8015f7a:	6965      	ldr	r5, [r4, #20]
 8015f7c:	443a      	add	r2, r7
 8015f7e:	2302      	movs	r3, #2
 8015f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f84:	fb95 f5f3 	sdiv	r5, r5, r3
 8015f88:	4295      	cmp	r5, r2
 8015f8a:	bf38      	it	cc
 8015f8c:	4615      	movcc	r5, r2
 8015f8e:	0543      	lsls	r3, r0, #21
 8015f90:	d510      	bpl.n	8015fb4 <__ssprint_r+0xb0>
 8015f92:	4629      	mov	r1, r5
 8015f94:	4648      	mov	r0, r9
 8015f96:	f7fb fb25 	bl	80115e4 <_malloc_r>
 8015f9a:	4606      	mov	r6, r0
 8015f9c:	b1a0      	cbz	r0, 8015fc8 <__ssprint_r+0xc4>
 8015f9e:	4642      	mov	r2, r8
 8015fa0:	6921      	ldr	r1, [r4, #16]
 8015fa2:	f7fb fd4e 	bl	8011a42 <memcpy>
 8015fa6:	89a2      	ldrh	r2, [r4, #12]
 8015fa8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8015fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015fb0:	81a2      	strh	r2, [r4, #12]
 8015fb2:	e018      	b.n	8015fe6 <__ssprint_r+0xe2>
 8015fb4:	462a      	mov	r2, r5
 8015fb6:	4648      	mov	r0, r9
 8015fb8:	f000 fc56 	bl	8016868 <_realloc_r>
 8015fbc:	4606      	mov	r6, r0
 8015fbe:	b990      	cbnz	r0, 8015fe6 <__ssprint_r+0xe2>
 8015fc0:	6921      	ldr	r1, [r4, #16]
 8015fc2:	4648      	mov	r0, r9
 8015fc4:	f7fe f9ea 	bl	801439c <_free_r>
 8015fc8:	220c      	movs	r2, #12
 8015fca:	f8c9 2000 	str.w	r2, [r9]
 8015fce:	89a2      	ldrh	r2, [r4, #12]
 8015fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015fd4:	81a2      	strh	r2, [r4, #12]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	f8cb 2008 	str.w	r2, [fp, #8]
 8015fdc:	f8cb 2004 	str.w	r2, [fp, #4]
 8015fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8015fe4:	e00a      	b.n	8015ffc <__ssprint_r+0xf8>
 8015fe6:	6126      	str	r6, [r4, #16]
 8015fe8:	6165      	str	r5, [r4, #20]
 8015fea:	4446      	add	r6, r8
 8015fec:	ebc8 0505 	rsb	r5, r8, r5
 8015ff0:	6026      	str	r6, [r4, #0]
 8015ff2:	60a5      	str	r5, [r4, #8]
 8015ff4:	463e      	mov	r6, r7
 8015ff6:	e7a2      	b.n	8015f3e <__ssprint_r+0x3a>
 8015ff8:	463e      	mov	r6, r7
 8015ffa:	e7a2      	b.n	8015f42 <__ssprint_r+0x3e>
 8015ffc:	b003      	add	sp, #12
 8015ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016002 <_sungetc_r>:
 8016002:	1c4b      	adds	r3, r1, #1
 8016004:	b570      	push	{r4, r5, r6, lr}
 8016006:	460e      	mov	r6, r1
 8016008:	4614      	mov	r4, r2
 801600a:	d102      	bne.n	8016012 <_sungetc_r+0x10>
 801600c:	f04f 30ff 	mov.w	r0, #4294967295
 8016010:	bd70      	pop	{r4, r5, r6, pc}
 8016012:	8993      	ldrh	r3, [r2, #12]
 8016014:	f023 0320 	bic.w	r3, r3, #32
 8016018:	8193      	strh	r3, [r2, #12]
 801601a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801601c:	6852      	ldr	r2, [r2, #4]
 801601e:	b2cd      	uxtb	r5, r1
 8016020:	b183      	cbz	r3, 8016044 <_sungetc_r+0x42>
 8016022:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016024:	429a      	cmp	r2, r3
 8016026:	da07      	bge.n	8016038 <_sungetc_r+0x36>
 8016028:	6823      	ldr	r3, [r4, #0]
 801602a:	1e5a      	subs	r2, r3, #1
 801602c:	6022      	str	r2, [r4, #0]
 801602e:	f803 6c01 	strb.w	r6, [r3, #-1]
 8016032:	6863      	ldr	r3, [r4, #4]
 8016034:	3301      	adds	r3, #1
 8016036:	e01f      	b.n	8016078 <_sungetc_r+0x76>
 8016038:	4621      	mov	r1, r4
 801603a:	f000 f875 	bl	8016128 <__submore>
 801603e:	2800      	cmp	r0, #0
 8016040:	d0f2      	beq.n	8016028 <_sungetc_r+0x26>
 8016042:	e7e3      	b.n	801600c <_sungetc_r+0xa>
 8016044:	6921      	ldr	r1, [r4, #16]
 8016046:	6823      	ldr	r3, [r4, #0]
 8016048:	b151      	cbz	r1, 8016060 <_sungetc_r+0x5e>
 801604a:	4299      	cmp	r1, r3
 801604c:	d208      	bcs.n	8016060 <_sungetc_r+0x5e>
 801604e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016052:	428d      	cmp	r5, r1
 8016054:	d104      	bne.n	8016060 <_sungetc_r+0x5e>
 8016056:	3b01      	subs	r3, #1
 8016058:	3201      	adds	r2, #1
 801605a:	6023      	str	r3, [r4, #0]
 801605c:	6062      	str	r2, [r4, #4]
 801605e:	e00c      	b.n	801607a <_sungetc_r+0x78>
 8016060:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016062:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016066:	6363      	str	r3, [r4, #52]	; 0x34
 8016068:	2303      	movs	r3, #3
 801606a:	63a3      	str	r3, [r4, #56]	; 0x38
 801606c:	4623      	mov	r3, r4
 801606e:	6422      	str	r2, [r4, #64]	; 0x40
 8016070:	f803 6f46 	strb.w	r6, [r3, #70]!
 8016074:	6023      	str	r3, [r4, #0]
 8016076:	2301      	movs	r3, #1
 8016078:	6063      	str	r3, [r4, #4]
 801607a:	4628      	mov	r0, r5
 801607c:	bd70      	pop	{r4, r5, r6, pc}

0801607e <__ssrefill_r>:
 801607e:	b510      	push	{r4, lr}
 8016080:	460c      	mov	r4, r1
 8016082:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016084:	b169      	cbz	r1, 80160a2 <__ssrefill_r+0x24>
 8016086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801608a:	4299      	cmp	r1, r3
 801608c:	d001      	beq.n	8016092 <__ssrefill_r+0x14>
 801608e:	f7fe f985 	bl	801439c <_free_r>
 8016092:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016094:	6063      	str	r3, [r4, #4]
 8016096:	2000      	movs	r0, #0
 8016098:	6360      	str	r0, [r4, #52]	; 0x34
 801609a:	b113      	cbz	r3, 80160a2 <__ssrefill_r+0x24>
 801609c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801609e:	6023      	str	r3, [r4, #0]
 80160a0:	bd10      	pop	{r4, pc}
 80160a2:	6923      	ldr	r3, [r4, #16]
 80160a4:	6023      	str	r3, [r4, #0]
 80160a6:	2300      	movs	r3, #0
 80160a8:	6063      	str	r3, [r4, #4]
 80160aa:	89a3      	ldrh	r3, [r4, #12]
 80160ac:	f043 0320 	orr.w	r3, r3, #32
 80160b0:	81a3      	strh	r3, [r4, #12]
 80160b2:	f04f 30ff 	mov.w	r0, #4294967295
 80160b6:	bd10      	pop	{r4, pc}

080160b8 <_sfread_r>:
 80160b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160bc:	4615      	mov	r5, r2
 80160be:	435d      	muls	r5, r3
 80160c0:	4682      	mov	sl, r0
 80160c2:	460f      	mov	r7, r1
 80160c4:	4691      	mov	r9, r2
 80160c6:	4698      	mov	r8, r3
 80160c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80160ca:	d029      	beq.n	8016120 <_sfread_r+0x68>
 80160cc:	462e      	mov	r6, r5
 80160ce:	f04f 0b00 	mov.w	fp, #0
 80160d2:	6863      	ldr	r3, [r4, #4]
 80160d4:	429e      	cmp	r6, r3
 80160d6:	d916      	bls.n	8016106 <_sfread_r+0x4e>
 80160d8:	461a      	mov	r2, r3
 80160da:	6821      	ldr	r1, [r4, #0]
 80160dc:	9301      	str	r3, [sp, #4]
 80160de:	4638      	mov	r0, r7
 80160e0:	f7fb fcaf 	bl	8011a42 <memcpy>
 80160e4:	9b01      	ldr	r3, [sp, #4]
 80160e6:	6822      	ldr	r2, [r4, #0]
 80160e8:	441a      	add	r2, r3
 80160ea:	e884 0804 	stmia.w	r4, {r2, fp}
 80160ee:	4621      	mov	r1, r4
 80160f0:	4650      	mov	r0, sl
 80160f2:	441f      	add	r7, r3
 80160f4:	1af6      	subs	r6, r6, r3
 80160f6:	f7ff ffc2 	bl	801607e <__ssrefill_r>
 80160fa:	2800      	cmp	r0, #0
 80160fc:	d0e9      	beq.n	80160d2 <_sfread_r+0x1a>
 80160fe:	1ba8      	subs	r0, r5, r6
 8016100:	fbb0 f0f9 	udiv	r0, r0, r9
 8016104:	e00d      	b.n	8016122 <_sfread_r+0x6a>
 8016106:	4632      	mov	r2, r6
 8016108:	6821      	ldr	r1, [r4, #0]
 801610a:	4638      	mov	r0, r7
 801610c:	f7fb fc99 	bl	8011a42 <memcpy>
 8016110:	6863      	ldr	r3, [r4, #4]
 8016112:	6820      	ldr	r0, [r4, #0]
 8016114:	1b9b      	subs	r3, r3, r6
 8016116:	4430      	add	r0, r6
 8016118:	6020      	str	r0, [r4, #0]
 801611a:	6063      	str	r3, [r4, #4]
 801611c:	4640      	mov	r0, r8
 801611e:	e000      	b.n	8016122 <_sfread_r+0x6a>
 8016120:	4628      	mov	r0, r5
 8016122:	b003      	add	sp, #12
 8016124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016128 <__submore>:
 8016128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801612c:	460c      	mov	r4, r1
 801612e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016134:	4299      	cmp	r1, r3
 8016136:	d11c      	bne.n	8016172 <__submore+0x4a>
 8016138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801613c:	f7fb fa52 	bl	80115e4 <_malloc_r>
 8016140:	b918      	cbnz	r0, 801614a <__submore+0x22>
 8016142:	f04f 30ff 	mov.w	r0, #4294967295
 8016146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801614a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801614e:	63a3      	str	r3, [r4, #56]	; 0x38
 8016150:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016154:	6360      	str	r0, [r4, #52]	; 0x34
 8016156:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801615a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801615e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016162:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016166:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801616a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801616e:	6020      	str	r0, [r4, #0]
 8016170:	e012      	b.n	8016198 <__submore+0x70>
 8016172:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016174:	0077      	lsls	r7, r6, #1
 8016176:	463a      	mov	r2, r7
 8016178:	f000 fb76 	bl	8016868 <_realloc_r>
 801617c:	4605      	mov	r5, r0
 801617e:	2800      	cmp	r0, #0
 8016180:	d0df      	beq.n	8016142 <__submore+0x1a>
 8016182:	eb00 0806 	add.w	r8, r0, r6
 8016186:	4601      	mov	r1, r0
 8016188:	4632      	mov	r2, r6
 801618a:	4640      	mov	r0, r8
 801618c:	f7fb fc59 	bl	8011a42 <memcpy>
 8016190:	f8c4 8000 	str.w	r8, [r4]
 8016194:	6365      	str	r5, [r4, #52]	; 0x34
 8016196:	63a7      	str	r7, [r4, #56]	; 0x38
 8016198:	2000      	movs	r0, #0
 801619a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801619e <_calloc_r>:
 801619e:	b510      	push	{r4, lr}
 80161a0:	4351      	muls	r1, r2
 80161a2:	f7fb fa1f 	bl	80115e4 <_malloc_r>
 80161a6:	4604      	mov	r4, r0
 80161a8:	b320      	cbz	r0, 80161f4 <_calloc_r+0x56>
 80161aa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80161ae:	f022 0203 	bic.w	r2, r2, #3
 80161b2:	3a04      	subs	r2, #4
 80161b4:	2a24      	cmp	r2, #36	; 0x24
 80161b6:	d81a      	bhi.n	80161ee <_calloc_r+0x50>
 80161b8:	2a13      	cmp	r2, #19
 80161ba:	d912      	bls.n	80161e2 <_calloc_r+0x44>
 80161bc:	2100      	movs	r1, #0
 80161be:	2a1b      	cmp	r2, #27
 80161c0:	6001      	str	r1, [r0, #0]
 80161c2:	6041      	str	r1, [r0, #4]
 80161c4:	d802      	bhi.n	80161cc <_calloc_r+0x2e>
 80161c6:	f100 0308 	add.w	r3, r0, #8
 80161ca:	e00b      	b.n	80161e4 <_calloc_r+0x46>
 80161cc:	2a24      	cmp	r2, #36	; 0x24
 80161ce:	6081      	str	r1, [r0, #8]
 80161d0:	60c1      	str	r1, [r0, #12]
 80161d2:	bf11      	iteee	ne
 80161d4:	f100 0310 	addne.w	r3, r0, #16
 80161d8:	6101      	streq	r1, [r0, #16]
 80161da:	f100 0318 	addeq.w	r3, r0, #24
 80161de:	6141      	streq	r1, [r0, #20]
 80161e0:	e000      	b.n	80161e4 <_calloc_r+0x46>
 80161e2:	4603      	mov	r3, r0
 80161e4:	2200      	movs	r2, #0
 80161e6:	601a      	str	r2, [r3, #0]
 80161e8:	605a      	str	r2, [r3, #4]
 80161ea:	609a      	str	r2, [r3, #8]
 80161ec:	e002      	b.n	80161f4 <_calloc_r+0x56>
 80161ee:	2100      	movs	r1, #0
 80161f0:	f7fb fc32 	bl	8011a58 <memset>
 80161f4:	4620      	mov	r0, r4
 80161f6:	bd10      	pop	{r4, pc}

080161f8 <rshift>:
 80161f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161fa:	6906      	ldr	r6, [r0, #16]
 80161fc:	114b      	asrs	r3, r1, #5
 80161fe:	42b3      	cmp	r3, r6
 8016200:	f100 0514 	add.w	r5, r0, #20
 8016204:	da27      	bge.n	8016256 <rshift+0x5e>
 8016206:	f011 011f 	ands.w	r1, r1, #31
 801620a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 801620e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8016212:	d101      	bne.n	8016218 <rshift+0x20>
 8016214:	4629      	mov	r1, r5
 8016216:	e016      	b.n	8016246 <rshift+0x4e>
 8016218:	1d14      	adds	r4, r2, #4
 801621a:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 801621e:	f1c1 0e20 	rsb	lr, r1, #32
 8016222:	40ca      	lsrs	r2, r1
 8016224:	462b      	mov	r3, r5
 8016226:	42b4      	cmp	r4, r6
 8016228:	d209      	bcs.n	801623e <rshift+0x46>
 801622a:	6827      	ldr	r7, [r4, #0]
 801622c:	fa07 f70e 	lsl.w	r7, r7, lr
 8016230:	433a      	orrs	r2, r7
 8016232:	f843 2b04 	str.w	r2, [r3], #4
 8016236:	f854 2b04 	ldr.w	r2, [r4], #4
 801623a:	40ca      	lsrs	r2, r1
 801623c:	e7f3      	b.n	8016226 <rshift+0x2e>
 801623e:	601a      	str	r2, [r3, #0]
 8016240:	b152      	cbz	r2, 8016258 <rshift+0x60>
 8016242:	3304      	adds	r3, #4
 8016244:	e008      	b.n	8016258 <rshift+0x60>
 8016246:	42b2      	cmp	r2, r6
 8016248:	460b      	mov	r3, r1
 801624a:	d205      	bcs.n	8016258 <rshift+0x60>
 801624c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016250:	f841 3b04 	str.w	r3, [r1], #4
 8016254:	e7f7      	b.n	8016246 <rshift+0x4e>
 8016256:	462b      	mov	r3, r5
 8016258:	1b5b      	subs	r3, r3, r5
 801625a:	109b      	asrs	r3, r3, #2
 801625c:	6103      	str	r3, [r0, #16]
 801625e:	b903      	cbnz	r3, 8016262 <rshift+0x6a>
 8016260:	6143      	str	r3, [r0, #20]
 8016262:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016264 <__hexdig_fun>:
 8016264:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016268:	2b09      	cmp	r3, #9
 801626a:	d801      	bhi.n	8016270 <__hexdig_fun+0xc>
 801626c:	3820      	subs	r0, #32
 801626e:	e00a      	b.n	8016286 <__hexdig_fun+0x22>
 8016270:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016274:	2b05      	cmp	r3, #5
 8016276:	d801      	bhi.n	801627c <__hexdig_fun+0x18>
 8016278:	3847      	subs	r0, #71	; 0x47
 801627a:	e004      	b.n	8016286 <__hexdig_fun+0x22>
 801627c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016280:	2b05      	cmp	r3, #5
 8016282:	d802      	bhi.n	801628a <__hexdig_fun+0x26>
 8016284:	3827      	subs	r0, #39	; 0x27
 8016286:	b2c0      	uxtb	r0, r0
 8016288:	4770      	bx	lr
 801628a:	2000      	movs	r0, #0
 801628c:	4770      	bx	lr

0801628e <__gethex>:
 801628e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016292:	b08b      	sub	sp, #44	; 0x2c
 8016294:	468a      	mov	sl, r1
 8016296:	4690      	mov	r8, r2
 8016298:	9306      	str	r3, [sp, #24]
 801629a:	9002      	str	r0, [sp, #8]
 801629c:	f7fe f954 	bl	8014548 <_localeconv_r>
 80162a0:	6803      	ldr	r3, [r0, #0]
 80162a2:	9303      	str	r3, [sp, #12]
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7ea f813 	bl	80002d0 <strlen>
 80162aa:	9b03      	ldr	r3, [sp, #12]
 80162ac:	9001      	str	r0, [sp, #4]
 80162ae:	4403      	add	r3, r0
 80162b0:	f04f 0b00 	mov.w	fp, #0
 80162b4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80162b8:	9307      	str	r3, [sp, #28]
 80162ba:	f8da 3000 	ldr.w	r3, [sl]
 80162be:	3302      	adds	r3, #2
 80162c0:	461f      	mov	r7, r3
 80162c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80162c6:	2830      	cmp	r0, #48	; 0x30
 80162c8:	d102      	bne.n	80162d0 <__gethex+0x42>
 80162ca:	f10b 0b01 	add.w	fp, fp, #1
 80162ce:	e7f7      	b.n	80162c0 <__gethex+0x32>
 80162d0:	f7ff ffc8 	bl	8016264 <__hexdig_fun>
 80162d4:	4604      	mov	r4, r0
 80162d6:	b9e0      	cbnz	r0, 8016312 <__gethex+0x84>
 80162d8:	9a01      	ldr	r2, [sp, #4]
 80162da:	9903      	ldr	r1, [sp, #12]
 80162dc:	4638      	mov	r0, r7
 80162de:	f7fb fc75 	bl	8011bcc <strncmp>
 80162e2:	2800      	cmp	r0, #0
 80162e4:	d134      	bne.n	8016350 <__gethex+0xc2>
 80162e6:	9b01      	ldr	r3, [sp, #4]
 80162e8:	5cf8      	ldrb	r0, [r7, r3]
 80162ea:	18fe      	adds	r6, r7, r3
 80162ec:	f7ff ffba 	bl	8016264 <__hexdig_fun>
 80162f0:	b380      	cbz	r0, 8016354 <__gethex+0xc6>
 80162f2:	4633      	mov	r3, r6
 80162f4:	7818      	ldrb	r0, [r3, #0]
 80162f6:	2830      	cmp	r0, #48	; 0x30
 80162f8:	461f      	mov	r7, r3
 80162fa:	f103 0301 	add.w	r3, r3, #1
 80162fe:	d0f9      	beq.n	80162f4 <__gethex+0x66>
 8016300:	f7ff ffb0 	bl	8016264 <__hexdig_fun>
 8016304:	fab0 f580 	clz	r5, r0
 8016308:	096d      	lsrs	r5, r5, #5
 801630a:	4634      	mov	r4, r6
 801630c:	f04f 0b01 	mov.w	fp, #1
 8016310:	e001      	b.n	8016316 <__gethex+0x88>
 8016312:	2500      	movs	r5, #0
 8016314:	462c      	mov	r4, r5
 8016316:	463a      	mov	r2, r7
 8016318:	4616      	mov	r6, r2
 801631a:	3201      	adds	r2, #1
 801631c:	7830      	ldrb	r0, [r6, #0]
 801631e:	f7ff ffa1 	bl	8016264 <__hexdig_fun>
 8016322:	2800      	cmp	r0, #0
 8016324:	d1f8      	bne.n	8016318 <__gethex+0x8a>
 8016326:	9a01      	ldr	r2, [sp, #4]
 8016328:	9903      	ldr	r1, [sp, #12]
 801632a:	4630      	mov	r0, r6
 801632c:	f7fb fc4e 	bl	8011bcc <strncmp>
 8016330:	b950      	cbnz	r0, 8016348 <__gethex+0xba>
 8016332:	b954      	cbnz	r4, 801634a <__gethex+0xbc>
 8016334:	9b01      	ldr	r3, [sp, #4]
 8016336:	18f4      	adds	r4, r6, r3
 8016338:	4622      	mov	r2, r4
 801633a:	4616      	mov	r6, r2
 801633c:	3201      	adds	r2, #1
 801633e:	7830      	ldrb	r0, [r6, #0]
 8016340:	f7ff ff90 	bl	8016264 <__hexdig_fun>
 8016344:	2800      	cmp	r0, #0
 8016346:	d1f8      	bne.n	801633a <__gethex+0xac>
 8016348:	b134      	cbz	r4, 8016358 <__gethex+0xca>
 801634a:	1ba4      	subs	r4, r4, r6
 801634c:	00a4      	lsls	r4, r4, #2
 801634e:	e003      	b.n	8016358 <__gethex+0xca>
 8016350:	463e      	mov	r6, r7
 8016352:	e000      	b.n	8016356 <__gethex+0xc8>
 8016354:	4604      	mov	r4, r0
 8016356:	2501      	movs	r5, #1
 8016358:	7833      	ldrb	r3, [r6, #0]
 801635a:	2b50      	cmp	r3, #80	; 0x50
 801635c:	d001      	beq.n	8016362 <__gethex+0xd4>
 801635e:	2b70      	cmp	r3, #112	; 0x70
 8016360:	d12a      	bne.n	80163b8 <__gethex+0x12a>
 8016362:	7873      	ldrb	r3, [r6, #1]
 8016364:	2b2b      	cmp	r3, #43	; 0x2b
 8016366:	d008      	beq.n	801637a <__gethex+0xec>
 8016368:	2b2d      	cmp	r3, #45	; 0x2d
 801636a:	d003      	beq.n	8016374 <__gethex+0xe6>
 801636c:	1c71      	adds	r1, r6, #1
 801636e:	f04f 0900 	mov.w	r9, #0
 8016372:	e005      	b.n	8016380 <__gethex+0xf2>
 8016374:	f04f 0901 	mov.w	r9, #1
 8016378:	e001      	b.n	801637e <__gethex+0xf0>
 801637a:	f04f 0900 	mov.w	r9, #0
 801637e:	1cb1      	adds	r1, r6, #2
 8016380:	7808      	ldrb	r0, [r1, #0]
 8016382:	f7ff ff6f 	bl	8016264 <__hexdig_fun>
 8016386:	1e43      	subs	r3, r0, #1
 8016388:	b2db      	uxtb	r3, r3
 801638a:	2b18      	cmp	r3, #24
 801638c:	d814      	bhi.n	80163b8 <__gethex+0x12a>
 801638e:	f1a0 0210 	sub.w	r2, r0, #16
 8016392:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016396:	f7ff ff65 	bl	8016264 <__hexdig_fun>
 801639a:	1e43      	subs	r3, r0, #1
 801639c:	b2db      	uxtb	r3, r3
 801639e:	2b18      	cmp	r3, #24
 80163a0:	d804      	bhi.n	80163ac <__gethex+0x11e>
 80163a2:	230a      	movs	r3, #10
 80163a4:	fb03 0202 	mla	r2, r3, r2, r0
 80163a8:	3a10      	subs	r2, #16
 80163aa:	e7f2      	b.n	8016392 <__gethex+0x104>
 80163ac:	f1b9 0f00 	cmp.w	r9, #0
 80163b0:	d000      	beq.n	80163b4 <__gethex+0x126>
 80163b2:	4252      	negs	r2, r2
 80163b4:	4414      	add	r4, r2
 80163b6:	e000      	b.n	80163ba <__gethex+0x12c>
 80163b8:	4631      	mov	r1, r6
 80163ba:	f8ca 1000 	str.w	r1, [sl]
 80163be:	b12d      	cbz	r5, 80163cc <__gethex+0x13e>
 80163c0:	f1bb 0f00 	cmp.w	fp, #0
 80163c4:	bf14      	ite	ne
 80163c6:	2000      	movne	r0, #0
 80163c8:	2006      	moveq	r0, #6
 80163ca:	e17c      	b.n	80166c6 <__gethex+0x438>
 80163cc:	1bf3      	subs	r3, r6, r7
 80163ce:	3b01      	subs	r3, #1
 80163d0:	4629      	mov	r1, r5
 80163d2:	2b07      	cmp	r3, #7
 80163d4:	dd02      	ble.n	80163dc <__gethex+0x14e>
 80163d6:	3101      	adds	r1, #1
 80163d8:	105b      	asrs	r3, r3, #1
 80163da:	e7fa      	b.n	80163d2 <__gethex+0x144>
 80163dc:	9802      	ldr	r0, [sp, #8]
 80163de:	f7fe f8f1 	bl	80145c4 <_Balloc>
 80163e2:	9b01      	ldr	r3, [sp, #4]
 80163e4:	f100 0a14 	add.w	sl, r0, #20
 80163e8:	f04f 0900 	mov.w	r9, #0
 80163ec:	f1c3 0301 	rsb	r3, r3, #1
 80163f0:	4605      	mov	r5, r0
 80163f2:	f8cd a010 	str.w	sl, [sp, #16]
 80163f6:	46cb      	mov	fp, r9
 80163f8:	9308      	str	r3, [sp, #32]
 80163fa:	42b7      	cmp	r7, r6
 80163fc:	d22f      	bcs.n	801645e <__gethex+0x1d0>
 80163fe:	1e73      	subs	r3, r6, #1
 8016400:	9305      	str	r3, [sp, #20]
 8016402:	9a07      	ldr	r2, [sp, #28]
 8016404:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016408:	4293      	cmp	r3, r2
 801640a:	d00b      	beq.n	8016424 <__gethex+0x196>
 801640c:	f1bb 0f20 	cmp.w	fp, #32
 8016410:	d116      	bne.n	8016440 <__gethex+0x1b2>
 8016412:	9b04      	ldr	r3, [sp, #16]
 8016414:	f8c3 9000 	str.w	r9, [r3]
 8016418:	3304      	adds	r3, #4
 801641a:	f04f 0900 	mov.w	r9, #0
 801641e:	9304      	str	r3, [sp, #16]
 8016420:	46cb      	mov	fp, r9
 8016422:	e00d      	b.n	8016440 <__gethex+0x1b2>
 8016424:	9b05      	ldr	r3, [sp, #20]
 8016426:	9a08      	ldr	r2, [sp, #32]
 8016428:	4413      	add	r3, r2
 801642a:	429f      	cmp	r7, r3
 801642c:	d8ee      	bhi.n	801640c <__gethex+0x17e>
 801642e:	4618      	mov	r0, r3
 8016430:	9a01      	ldr	r2, [sp, #4]
 8016432:	9903      	ldr	r1, [sp, #12]
 8016434:	9309      	str	r3, [sp, #36]	; 0x24
 8016436:	f7fb fbc9 	bl	8011bcc <strncmp>
 801643a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801643c:	b168      	cbz	r0, 801645a <__gethex+0x1cc>
 801643e:	e7e5      	b.n	801640c <__gethex+0x17e>
 8016440:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016444:	f7ff ff0e 	bl	8016264 <__hexdig_fun>
 8016448:	f000 000f 	and.w	r0, r0, #15
 801644c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016450:	9b05      	ldr	r3, [sp, #20]
 8016452:	ea49 0900 	orr.w	r9, r9, r0
 8016456:	f10b 0b04 	add.w	fp, fp, #4
 801645a:	461e      	mov	r6, r3
 801645c:	e7cd      	b.n	80163fa <__gethex+0x16c>
 801645e:	9804      	ldr	r0, [sp, #16]
 8016460:	f840 9b04 	str.w	r9, [r0], #4
 8016464:	ebca 0000 	rsb	r0, sl, r0
 8016468:	1080      	asrs	r0, r0, #2
 801646a:	6128      	str	r0, [r5, #16]
 801646c:	0147      	lsls	r7, r0, #5
 801646e:	4648      	mov	r0, r9
 8016470:	f7fe f96d 	bl	801474e <__hi0bits>
 8016474:	f8d8 6000 	ldr.w	r6, [r8]
 8016478:	1a38      	subs	r0, r7, r0
 801647a:	42b0      	cmp	r0, r6
 801647c:	dd26      	ble.n	80164cc <__gethex+0x23e>
 801647e:	1b87      	subs	r7, r0, r6
 8016480:	4639      	mov	r1, r7
 8016482:	4628      	mov	r0, r5
 8016484:	f7fe fc6b 	bl	8014d5e <__any_on>
 8016488:	b1c8      	cbz	r0, 80164be <__gethex+0x230>
 801648a:	1e7b      	subs	r3, r7, #1
 801648c:	1159      	asrs	r1, r3, #5
 801648e:	f003 021f 	and.w	r2, r3, #31
 8016492:	f04f 0901 	mov.w	r9, #1
 8016496:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801649a:	fa09 f202 	lsl.w	r2, r9, r2
 801649e:	420a      	tst	r2, r1
 80164a0:	d00e      	beq.n	80164c0 <__gethex+0x232>
 80164a2:	454b      	cmp	r3, r9
 80164a4:	dc02      	bgt.n	80164ac <__gethex+0x21e>
 80164a6:	f04f 0902 	mov.w	r9, #2
 80164aa:	e009      	b.n	80164c0 <__gethex+0x232>
 80164ac:	1eb9      	subs	r1, r7, #2
 80164ae:	4628      	mov	r0, r5
 80164b0:	f7fe fc55 	bl	8014d5e <__any_on>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	d0f6      	beq.n	80164a6 <__gethex+0x218>
 80164b8:	f04f 0903 	mov.w	r9, #3
 80164bc:	e000      	b.n	80164c0 <__gethex+0x232>
 80164be:	4681      	mov	r9, r0
 80164c0:	4639      	mov	r1, r7
 80164c2:	4628      	mov	r0, r5
 80164c4:	f7ff fe98 	bl	80161f8 <rshift>
 80164c8:	443c      	add	r4, r7
 80164ca:	e00c      	b.n	80164e6 <__gethex+0x258>
 80164cc:	da09      	bge.n	80164e2 <__gethex+0x254>
 80164ce:	1a37      	subs	r7, r6, r0
 80164d0:	4629      	mov	r1, r5
 80164d2:	463a      	mov	r2, r7
 80164d4:	9802      	ldr	r0, [sp, #8]
 80164d6:	f7fe fa6f 	bl	80149b8 <__lshift>
 80164da:	1be4      	subs	r4, r4, r7
 80164dc:	4605      	mov	r5, r0
 80164de:	f100 0a14 	add.w	sl, r0, #20
 80164e2:	f04f 0900 	mov.w	r9, #0
 80164e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80164ea:	429c      	cmp	r4, r3
 80164ec:	dd08      	ble.n	8016500 <__gethex+0x272>
 80164ee:	9802      	ldr	r0, [sp, #8]
 80164f0:	4629      	mov	r1, r5
 80164f2:	f7fe f89c 	bl	801462e <_Bfree>
 80164f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80164f8:	2300      	movs	r3, #0
 80164fa:	6013      	str	r3, [r2, #0]
 80164fc:	20a3      	movs	r0, #163	; 0xa3
 80164fe:	e0e2      	b.n	80166c6 <__gethex+0x438>
 8016500:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016504:	4284      	cmp	r4, r0
 8016506:	da53      	bge.n	80165b0 <__gethex+0x322>
 8016508:	1b04      	subs	r4, r0, r4
 801650a:	42a6      	cmp	r6, r4
 801650c:	dc2e      	bgt.n	801656c <__gethex+0x2de>
 801650e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016512:	2b02      	cmp	r3, #2
 8016514:	d01a      	beq.n	801654c <__gethex+0x2be>
 8016516:	2b03      	cmp	r3, #3
 8016518:	d01c      	beq.n	8016554 <__gethex+0x2c6>
 801651a:	2b01      	cmp	r3, #1
 801651c:	d11d      	bne.n	801655a <__gethex+0x2cc>
 801651e:	42a6      	cmp	r6, r4
 8016520:	d11b      	bne.n	801655a <__gethex+0x2cc>
 8016522:	2e01      	cmp	r6, #1
 8016524:	dc0b      	bgt.n	801653e <__gethex+0x2b0>
 8016526:	9a06      	ldr	r2, [sp, #24]
 8016528:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801652c:	6013      	str	r3, [r2, #0]
 801652e:	2301      	movs	r3, #1
 8016530:	612b      	str	r3, [r5, #16]
 8016532:	f8ca 3000 	str.w	r3, [sl]
 8016536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016538:	2062      	movs	r0, #98	; 0x62
 801653a:	601d      	str	r5, [r3, #0]
 801653c:	e0c3      	b.n	80166c6 <__gethex+0x438>
 801653e:	1e71      	subs	r1, r6, #1
 8016540:	4628      	mov	r0, r5
 8016542:	f7fe fc0c 	bl	8014d5e <__any_on>
 8016546:	2800      	cmp	r0, #0
 8016548:	d1ed      	bne.n	8016526 <__gethex+0x298>
 801654a:	e006      	b.n	801655a <__gethex+0x2cc>
 801654c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801654e:	2b00      	cmp	r3, #0
 8016550:	d0e9      	beq.n	8016526 <__gethex+0x298>
 8016552:	e002      	b.n	801655a <__gethex+0x2cc>
 8016554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016556:	2b00      	cmp	r3, #0
 8016558:	d1e5      	bne.n	8016526 <__gethex+0x298>
 801655a:	9802      	ldr	r0, [sp, #8]
 801655c:	4629      	mov	r1, r5
 801655e:	f7fe f866 	bl	801462e <_Bfree>
 8016562:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016564:	2300      	movs	r3, #0
 8016566:	6013      	str	r3, [r2, #0]
 8016568:	2050      	movs	r0, #80	; 0x50
 801656a:	e0ac      	b.n	80166c6 <__gethex+0x438>
 801656c:	1e67      	subs	r7, r4, #1
 801656e:	f1b9 0f00 	cmp.w	r9, #0
 8016572:	d106      	bne.n	8016582 <__gethex+0x2f4>
 8016574:	b13f      	cbz	r7, 8016586 <__gethex+0x2f8>
 8016576:	4639      	mov	r1, r7
 8016578:	4628      	mov	r0, r5
 801657a:	f7fe fbf0 	bl	8014d5e <__any_on>
 801657e:	4681      	mov	r9, r0
 8016580:	e001      	b.n	8016586 <__gethex+0x2f8>
 8016582:	f04f 0901 	mov.w	r9, #1
 8016586:	117a      	asrs	r2, r7, #5
 8016588:	2301      	movs	r3, #1
 801658a:	f007 071f 	and.w	r7, r7, #31
 801658e:	fa03 f707 	lsl.w	r7, r3, r7
 8016592:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 8016596:	4621      	mov	r1, r4
 8016598:	421f      	tst	r7, r3
 801659a:	4628      	mov	r0, r5
 801659c:	bf18      	it	ne
 801659e:	f049 0902 	orrne.w	r9, r9, #2
 80165a2:	1b36      	subs	r6, r6, r4
 80165a4:	f7ff fe28 	bl	80161f8 <rshift>
 80165a8:	2702      	movs	r7, #2
 80165aa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80165ae:	e000      	b.n	80165b2 <__gethex+0x324>
 80165b0:	2701      	movs	r7, #1
 80165b2:	f1b9 0f00 	cmp.w	r9, #0
 80165b6:	f000 8081 	beq.w	80166bc <__gethex+0x42e>
 80165ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80165be:	2b02      	cmp	r3, #2
 80165c0:	d00e      	beq.n	80165e0 <__gethex+0x352>
 80165c2:	2b03      	cmp	r3, #3
 80165c4:	d010      	beq.n	80165e8 <__gethex+0x35a>
 80165c6:	2b01      	cmp	r3, #1
 80165c8:	d176      	bne.n	80166b8 <__gethex+0x42a>
 80165ca:	f019 0f02 	tst.w	r9, #2
 80165ce:	d073      	beq.n	80166b8 <__gethex+0x42a>
 80165d0:	f8da 0000 	ldr.w	r0, [sl]
 80165d4:	ea49 0900 	orr.w	r9, r9, r0
 80165d8:	f019 0f01 	tst.w	r9, #1
 80165dc:	d107      	bne.n	80165ee <__gethex+0x360>
 80165de:	e06b      	b.n	80166b8 <__gethex+0x42a>
 80165e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165e2:	f1c3 0301 	rsb	r3, r3, #1
 80165e6:	9315      	str	r3, [sp, #84]	; 0x54
 80165e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d064      	beq.n	80166b8 <__gethex+0x42a>
 80165ee:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80165f2:	f105 0314 	add.w	r3, r5, #20
 80165f6:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80165fa:	eb03 0109 	add.w	r1, r3, r9
 80165fe:	2000      	movs	r0, #0
 8016600:	681a      	ldr	r2, [r3, #0]
 8016602:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016606:	d002      	beq.n	801660e <__gethex+0x380>
 8016608:	3201      	adds	r2, #1
 801660a:	601a      	str	r2, [r3, #0]
 801660c:	e020      	b.n	8016650 <__gethex+0x3c2>
 801660e:	f843 0b04 	str.w	r0, [r3], #4
 8016612:	4299      	cmp	r1, r3
 8016614:	d8f4      	bhi.n	8016600 <__gethex+0x372>
 8016616:	68ab      	ldr	r3, [r5, #8]
 8016618:	459a      	cmp	sl, r3
 801661a:	db12      	blt.n	8016642 <__gethex+0x3b4>
 801661c:	6869      	ldr	r1, [r5, #4]
 801661e:	9802      	ldr	r0, [sp, #8]
 8016620:	3101      	adds	r1, #1
 8016622:	f7fd ffcf 	bl	80145c4 <_Balloc>
 8016626:	692a      	ldr	r2, [r5, #16]
 8016628:	3202      	adds	r2, #2
 801662a:	f105 010c 	add.w	r1, r5, #12
 801662e:	4683      	mov	fp, r0
 8016630:	0092      	lsls	r2, r2, #2
 8016632:	300c      	adds	r0, #12
 8016634:	f7fb fa05 	bl	8011a42 <memcpy>
 8016638:	4629      	mov	r1, r5
 801663a:	9802      	ldr	r0, [sp, #8]
 801663c:	f7fd fff7 	bl	801462e <_Bfree>
 8016640:	465d      	mov	r5, fp
 8016642:	692b      	ldr	r3, [r5, #16]
 8016644:	1c5a      	adds	r2, r3, #1
 8016646:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801664a:	612a      	str	r2, [r5, #16]
 801664c:	2201      	movs	r2, #1
 801664e:	615a      	str	r2, [r3, #20]
 8016650:	2f02      	cmp	r7, #2
 8016652:	f105 0214 	add.w	r2, r5, #20
 8016656:	d111      	bne.n	801667c <__gethex+0x3ee>
 8016658:	f8d8 3000 	ldr.w	r3, [r8]
 801665c:	3b01      	subs	r3, #1
 801665e:	429e      	cmp	r6, r3
 8016660:	d127      	bne.n	80166b2 <__gethex+0x424>
 8016662:	1171      	asrs	r1, r6, #5
 8016664:	2301      	movs	r3, #1
 8016666:	f006 061f 	and.w	r6, r6, #31
 801666a:	fa03 f606 	lsl.w	r6, r3, r6
 801666e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016672:	421e      	tst	r6, r3
 8016674:	bf0c      	ite	eq
 8016676:	2702      	moveq	r7, #2
 8016678:	2701      	movne	r7, #1
 801667a:	e01a      	b.n	80166b2 <__gethex+0x424>
 801667c:	692b      	ldr	r3, [r5, #16]
 801667e:	459a      	cmp	sl, r3
 8016680:	da0a      	bge.n	8016698 <__gethex+0x40a>
 8016682:	2101      	movs	r1, #1
 8016684:	4628      	mov	r0, r5
 8016686:	f7ff fdb7 	bl	80161f8 <rshift>
 801668a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801668e:	3401      	adds	r4, #1
 8016690:	429c      	cmp	r4, r3
 8016692:	f73f af2c 	bgt.w	80164ee <__gethex+0x260>
 8016696:	e00b      	b.n	80166b0 <__gethex+0x422>
 8016698:	f016 061f 	ands.w	r6, r6, #31
 801669c:	d008      	beq.n	80166b0 <__gethex+0x422>
 801669e:	4491      	add	r9, r2
 80166a0:	f1c6 0620 	rsb	r6, r6, #32
 80166a4:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80166a8:	f7fe f851 	bl	801474e <__hi0bits>
 80166ac:	42b0      	cmp	r0, r6
 80166ae:	dbe8      	blt.n	8016682 <__gethex+0x3f4>
 80166b0:	2701      	movs	r7, #1
 80166b2:	f047 0720 	orr.w	r7, r7, #32
 80166b6:	e001      	b.n	80166bc <__gethex+0x42e>
 80166b8:	f047 0710 	orr.w	r7, r7, #16
 80166bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166be:	601d      	str	r5, [r3, #0]
 80166c0:	9b06      	ldr	r3, [sp, #24]
 80166c2:	4638      	mov	r0, r7
 80166c4:	601c      	str	r4, [r3, #0]
 80166c6:	b00b      	add	sp, #44	; 0x2c
 80166c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166cc <L_shift>:
 80166cc:	f1c2 0208 	rsb	r2, r2, #8
 80166d0:	0092      	lsls	r2, r2, #2
 80166d2:	b570      	push	{r4, r5, r6, lr}
 80166d4:	f1c2 0620 	rsb	r6, r2, #32
 80166d8:	6843      	ldr	r3, [r0, #4]
 80166da:	6805      	ldr	r5, [r0, #0]
 80166dc:	fa03 f406 	lsl.w	r4, r3, r6
 80166e0:	432c      	orrs	r4, r5
 80166e2:	40d3      	lsrs	r3, r2
 80166e4:	6004      	str	r4, [r0, #0]
 80166e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80166ea:	4288      	cmp	r0, r1
 80166ec:	d3f4      	bcc.n	80166d8 <L_shift+0xc>
 80166ee:	bd70      	pop	{r4, r5, r6, pc}

080166f0 <__match>:
 80166f0:	b530      	push	{r4, r5, lr}
 80166f2:	6803      	ldr	r3, [r0, #0]
 80166f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166f8:	3301      	adds	r3, #1
 80166fa:	b14c      	cbz	r4, 8016710 <__match+0x20>
 80166fc:	781a      	ldrb	r2, [r3, #0]
 80166fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016702:	2d19      	cmp	r5, #25
 8016704:	bf98      	it	ls
 8016706:	3220      	addls	r2, #32
 8016708:	42a2      	cmp	r2, r4
 801670a:	d0f3      	beq.n	80166f4 <__match+0x4>
 801670c:	2000      	movs	r0, #0
 801670e:	bd30      	pop	{r4, r5, pc}
 8016710:	6003      	str	r3, [r0, #0]
 8016712:	2001      	movs	r0, #1
 8016714:	bd30      	pop	{r4, r5, pc}

08016716 <__hexnan>:
 8016716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801671a:	680b      	ldr	r3, [r1, #0]
 801671c:	f8d0 b000 	ldr.w	fp, [r0]
 8016720:	115e      	asrs	r6, r3, #5
 8016722:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016726:	f013 031f 	ands.w	r3, r3, #31
 801672a:	b085      	sub	sp, #20
 801672c:	bf18      	it	ne
 801672e:	3604      	addne	r6, #4
 8016730:	1f35      	subs	r5, r6, #4
 8016732:	4617      	mov	r7, r2
 8016734:	2200      	movs	r2, #0
 8016736:	4682      	mov	sl, r0
 8016738:	9301      	str	r3, [sp, #4]
 801673a:	f846 2c04 	str.w	r2, [r6, #-4]
 801673e:	46a8      	mov	r8, r5
 8016740:	462c      	mov	r4, r5
 8016742:	9200      	str	r2, [sp, #0]
 8016744:	4691      	mov	r9, r2
 8016746:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 801674a:	2900      	cmp	r1, #0
 801674c:	d03c      	beq.n	80167c8 <__hexnan+0xb2>
 801674e:	4608      	mov	r0, r1
 8016750:	9203      	str	r2, [sp, #12]
 8016752:	9102      	str	r1, [sp, #8]
 8016754:	f7ff fd86 	bl	8016264 <__hexdig_fun>
 8016758:	9a03      	ldr	r2, [sp, #12]
 801675a:	bb00      	cbnz	r0, 801679e <__hexnan+0x88>
 801675c:	9902      	ldr	r1, [sp, #8]
 801675e:	2920      	cmp	r1, #32
 8016760:	d816      	bhi.n	8016790 <__hexnan+0x7a>
 8016762:	9b00      	ldr	r3, [sp, #0]
 8016764:	4599      	cmp	r9, r3
 8016766:	ddee      	ble.n	8016746 <__hexnan+0x30>
 8016768:	4544      	cmp	r4, r8
 801676a:	d205      	bcs.n	8016778 <__hexnan+0x62>
 801676c:	2a07      	cmp	r2, #7
 801676e:	dc03      	bgt.n	8016778 <__hexnan+0x62>
 8016770:	4641      	mov	r1, r8
 8016772:	4620      	mov	r0, r4
 8016774:	f7ff ffaa 	bl	80166cc <L_shift>
 8016778:	42bc      	cmp	r4, r7
 801677a:	d923      	bls.n	80167c4 <__hexnan+0xae>
 801677c:	2300      	movs	r3, #0
 801677e:	f1a4 0804 	sub.w	r8, r4, #4
 8016782:	f844 3c04 	str.w	r3, [r4, #-4]
 8016786:	f8cd 9000 	str.w	r9, [sp]
 801678a:	4644      	mov	r4, r8
 801678c:	461a      	mov	r2, r3
 801678e:	e7da      	b.n	8016746 <__hexnan+0x30>
 8016790:	2929      	cmp	r1, #41	; 0x29
 8016792:	d148      	bne.n	8016826 <__hexnan+0x110>
 8016794:	f10b 0301 	add.w	r3, fp, #1
 8016798:	f8ca 3000 	str.w	r3, [sl]
 801679c:	e014      	b.n	80167c8 <__hexnan+0xb2>
 801679e:	3201      	adds	r2, #1
 80167a0:	2a08      	cmp	r2, #8
 80167a2:	f109 0901 	add.w	r9, r9, #1
 80167a6:	dd06      	ble.n	80167b6 <__hexnan+0xa0>
 80167a8:	42bc      	cmp	r4, r7
 80167aa:	d9cc      	bls.n	8016746 <__hexnan+0x30>
 80167ac:	2300      	movs	r3, #0
 80167ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80167b2:	2201      	movs	r2, #1
 80167b4:	3c04      	subs	r4, #4
 80167b6:	6821      	ldr	r1, [r4, #0]
 80167b8:	f000 000f 	and.w	r0, r0, #15
 80167bc:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80167c0:	6020      	str	r0, [r4, #0]
 80167c2:	e7c0      	b.n	8016746 <__hexnan+0x30>
 80167c4:	2208      	movs	r2, #8
 80167c6:	e7be      	b.n	8016746 <__hexnan+0x30>
 80167c8:	f1b9 0f00 	cmp.w	r9, #0
 80167cc:	d02b      	beq.n	8016826 <__hexnan+0x110>
 80167ce:	4544      	cmp	r4, r8
 80167d0:	d205      	bcs.n	80167de <__hexnan+0xc8>
 80167d2:	2a07      	cmp	r2, #7
 80167d4:	dc03      	bgt.n	80167de <__hexnan+0xc8>
 80167d6:	4641      	mov	r1, r8
 80167d8:	4620      	mov	r0, r4
 80167da:	f7ff ff77 	bl	80166cc <L_shift>
 80167de:	42bc      	cmp	r4, r7
 80167e0:	d90c      	bls.n	80167fc <__hexnan+0xe6>
 80167e2:	463b      	mov	r3, r7
 80167e4:	f854 2b04 	ldr.w	r2, [r4], #4
 80167e8:	f843 2b04 	str.w	r2, [r3], #4
 80167ec:	42a5      	cmp	r5, r4
 80167ee:	d2f9      	bcs.n	80167e4 <__hexnan+0xce>
 80167f0:	2200      	movs	r2, #0
 80167f2:	f843 2b04 	str.w	r2, [r3], #4
 80167f6:	429d      	cmp	r5, r3
 80167f8:	d2fb      	bcs.n	80167f2 <__hexnan+0xdc>
 80167fa:	e00b      	b.n	8016814 <__hexnan+0xfe>
 80167fc:	9b01      	ldr	r3, [sp, #4]
 80167fe:	b14b      	cbz	r3, 8016814 <__hexnan+0xfe>
 8016800:	f1c3 0220 	rsb	r2, r3, #32
 8016804:	f04f 33ff 	mov.w	r3, #4294967295
 8016808:	40d3      	lsrs	r3, r2
 801680a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801680e:	4013      	ands	r3, r2
 8016810:	f846 3c04 	str.w	r3, [r6, #-4]
 8016814:	682b      	ldr	r3, [r5, #0]
 8016816:	b943      	cbnz	r3, 801682a <__hexnan+0x114>
 8016818:	42bd      	cmp	r5, r7
 801681a:	d102      	bne.n	8016822 <__hexnan+0x10c>
 801681c:	2301      	movs	r3, #1
 801681e:	602b      	str	r3, [r5, #0]
 8016820:	e003      	b.n	801682a <__hexnan+0x114>
 8016822:	3d04      	subs	r5, #4
 8016824:	e7f6      	b.n	8016814 <__hexnan+0xfe>
 8016826:	2004      	movs	r0, #4
 8016828:	e000      	b.n	801682c <__hexnan+0x116>
 801682a:	2005      	movs	r0, #5
 801682c:	b005      	add	sp, #20
 801682e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016832 <memmove>:
 8016832:	4288      	cmp	r0, r1
 8016834:	b510      	push	{r4, lr}
 8016836:	eb01 0302 	add.w	r3, r1, r2
 801683a:	d801      	bhi.n	8016840 <memmove+0xe>
 801683c:	1e42      	subs	r2, r0, #1
 801683e:	e00b      	b.n	8016858 <memmove+0x26>
 8016840:	4298      	cmp	r0, r3
 8016842:	d2fb      	bcs.n	801683c <memmove+0xa>
 8016844:	1881      	adds	r1, r0, r2
 8016846:	1ad2      	subs	r2, r2, r3
 8016848:	42d3      	cmn	r3, r2
 801684a:	d004      	beq.n	8016856 <memmove+0x24>
 801684c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016850:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016854:	e7f8      	b.n	8016848 <memmove+0x16>
 8016856:	bd10      	pop	{r4, pc}
 8016858:	4299      	cmp	r1, r3
 801685a:	d004      	beq.n	8016866 <memmove+0x34>
 801685c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016860:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016864:	e7f8      	b.n	8016858 <memmove+0x26>
 8016866:	bd10      	pop	{r4, pc}

08016868 <_realloc_r>:
 8016868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801686c:	4681      	mov	r9, r0
 801686e:	460c      	mov	r4, r1
 8016870:	b929      	cbnz	r1, 801687e <_realloc_r+0x16>
 8016872:	4611      	mov	r1, r2
 8016874:	b003      	add	sp, #12
 8016876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801687a:	f7fa beb3 	b.w	80115e4 <_malloc_r>
 801687e:	9201      	str	r2, [sp, #4]
 8016880:	f7fb f8f2 	bl	8011a68 <__malloc_lock>
 8016884:	9a01      	ldr	r2, [sp, #4]
 8016886:	f854 ec04 	ldr.w	lr, [r4, #-4]
 801688a:	f102 080b 	add.w	r8, r2, #11
 801688e:	f1b8 0f16 	cmp.w	r8, #22
 8016892:	f1a4 0b08 	sub.w	fp, r4, #8
 8016896:	f02e 0503 	bic.w	r5, lr, #3
 801689a:	d903      	bls.n	80168a4 <_realloc_r+0x3c>
 801689c:	f038 0807 	bics.w	r8, r8, #7
 80168a0:	d502      	bpl.n	80168a8 <_realloc_r+0x40>
 80168a2:	e003      	b.n	80168ac <_realloc_r+0x44>
 80168a4:	f04f 0810 	mov.w	r8, #16
 80168a8:	4590      	cmp	r8, r2
 80168aa:	d204      	bcs.n	80168b6 <_realloc_r+0x4e>
 80168ac:	230c      	movs	r3, #12
 80168ae:	f8c9 3000 	str.w	r3, [r9]
 80168b2:	2000      	movs	r0, #0
 80168b4:	e17d      	b.n	8016bb2 <_realloc_r+0x34a>
 80168b6:	45a8      	cmp	r8, r5
 80168b8:	f340 8150 	ble.w	8016b5c <_realloc_r+0x2f4>
 80168bc:	4ba6      	ldr	r3, [pc, #664]	; (8016b58 <_realloc_r+0x2f0>)
 80168be:	6898      	ldr	r0, [r3, #8]
 80168c0:	eb0b 0105 	add.w	r1, fp, r5
 80168c4:	4281      	cmp	r1, r0
 80168c6:	684f      	ldr	r7, [r1, #4]
 80168c8:	d005      	beq.n	80168d6 <_realloc_r+0x6e>
 80168ca:	f027 0601 	bic.w	r6, r7, #1
 80168ce:	440e      	add	r6, r1
 80168d0:	6876      	ldr	r6, [r6, #4]
 80168d2:	07f6      	lsls	r6, r6, #31
 80168d4:	d426      	bmi.n	8016924 <_realloc_r+0xbc>
 80168d6:	f027 0a03 	bic.w	sl, r7, #3
 80168da:	4281      	cmp	r1, r0
 80168dc:	eb05 070a 	add.w	r7, r5, sl
 80168e0:	d118      	bne.n	8016914 <_realloc_r+0xac>
 80168e2:	f108 0610 	add.w	r6, r8, #16
 80168e6:	42b7      	cmp	r7, r6
 80168e8:	db1f      	blt.n	801692a <_realloc_r+0xc2>
 80168ea:	eb0b 0008 	add.w	r0, fp, r8
 80168ee:	ebc8 0707 	rsb	r7, r8, r7
 80168f2:	f047 0701 	orr.w	r7, r7, #1
 80168f6:	6098      	str	r0, [r3, #8]
 80168f8:	6047      	str	r7, [r0, #4]
 80168fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80168fe:	f003 0301 	and.w	r3, r3, #1
 8016902:	ea43 0308 	orr.w	r3, r3, r8
 8016906:	4648      	mov	r0, r9
 8016908:	f844 3c04 	str.w	r3, [r4, #-4]
 801690c:	f7fb f8ad 	bl	8011a6a <__malloc_unlock>
 8016910:	4620      	mov	r0, r4
 8016912:	e14e      	b.n	8016bb2 <_realloc_r+0x34a>
 8016914:	45b8      	cmp	r8, r7
 8016916:	dc08      	bgt.n	801692a <_realloc_r+0xc2>
 8016918:	68cb      	ldr	r3, [r1, #12]
 801691a:	688a      	ldr	r2, [r1, #8]
 801691c:	463d      	mov	r5, r7
 801691e:	60d3      	str	r3, [r2, #12]
 8016920:	609a      	str	r2, [r3, #8]
 8016922:	e11b      	b.n	8016b5c <_realloc_r+0x2f4>
 8016924:	f04f 0a00 	mov.w	sl, #0
 8016928:	4651      	mov	r1, sl
 801692a:	f01e 0f01 	tst.w	lr, #1
 801692e:	f040 80c3 	bne.w	8016ab8 <_realloc_r+0x250>
 8016932:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8016936:	ebc7 070b 	rsb	r7, r7, fp
 801693a:	687e      	ldr	r6, [r7, #4]
 801693c:	f026 0603 	bic.w	r6, r6, #3
 8016940:	442e      	add	r6, r5
 8016942:	2900      	cmp	r1, #0
 8016944:	f000 8083 	beq.w	8016a4e <_realloc_r+0x1e6>
 8016948:	4281      	cmp	r1, r0
 801694a:	44b2      	add	sl, r6
 801694c:	d147      	bne.n	80169de <_realloc_r+0x176>
 801694e:	f108 0110 	add.w	r1, r8, #16
 8016952:	458a      	cmp	sl, r1
 8016954:	db7b      	blt.n	8016a4e <_realloc_r+0x1e6>
 8016956:	463e      	mov	r6, r7
 8016958:	68fa      	ldr	r2, [r7, #12]
 801695a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 801695e:	60ca      	str	r2, [r1, #12]
 8016960:	6091      	str	r1, [r2, #8]
 8016962:	1f2a      	subs	r2, r5, #4
 8016964:	2a24      	cmp	r2, #36	; 0x24
 8016966:	d825      	bhi.n	80169b4 <_realloc_r+0x14c>
 8016968:	2a13      	cmp	r2, #19
 801696a:	d91b      	bls.n	80169a4 <_realloc_r+0x13c>
 801696c:	6821      	ldr	r1, [r4, #0]
 801696e:	60b9      	str	r1, [r7, #8]
 8016970:	6861      	ldr	r1, [r4, #4]
 8016972:	60f9      	str	r1, [r7, #12]
 8016974:	2a1b      	cmp	r2, #27
 8016976:	d803      	bhi.n	8016980 <_realloc_r+0x118>
 8016978:	f107 0210 	add.w	r2, r7, #16
 801697c:	3408      	adds	r4, #8
 801697e:	e012      	b.n	80169a6 <_realloc_r+0x13e>
 8016980:	68a1      	ldr	r1, [r4, #8]
 8016982:	6139      	str	r1, [r7, #16]
 8016984:	68e1      	ldr	r1, [r4, #12]
 8016986:	6179      	str	r1, [r7, #20]
 8016988:	2a24      	cmp	r2, #36	; 0x24
 801698a:	bf01      	itttt	eq
 801698c:	6922      	ldreq	r2, [r4, #16]
 801698e:	61ba      	streq	r2, [r7, #24]
 8016990:	6961      	ldreq	r1, [r4, #20]
 8016992:	61f9      	streq	r1, [r7, #28]
 8016994:	bf19      	ittee	ne
 8016996:	f107 0218 	addne.w	r2, r7, #24
 801699a:	3410      	addne	r4, #16
 801699c:	f107 0220 	addeq.w	r2, r7, #32
 80169a0:	3418      	addeq	r4, #24
 80169a2:	e000      	b.n	80169a6 <_realloc_r+0x13e>
 80169a4:	4632      	mov	r2, r6
 80169a6:	6821      	ldr	r1, [r4, #0]
 80169a8:	6011      	str	r1, [r2, #0]
 80169aa:	6861      	ldr	r1, [r4, #4]
 80169ac:	6051      	str	r1, [r2, #4]
 80169ae:	68a1      	ldr	r1, [r4, #8]
 80169b0:	6091      	str	r1, [r2, #8]
 80169b2:	e005      	b.n	80169c0 <_realloc_r+0x158>
 80169b4:	4621      	mov	r1, r4
 80169b6:	4630      	mov	r0, r6
 80169b8:	9301      	str	r3, [sp, #4]
 80169ba:	f7ff ff3a 	bl	8016832 <memmove>
 80169be:	9b01      	ldr	r3, [sp, #4]
 80169c0:	eb07 0208 	add.w	r2, r7, r8
 80169c4:	ebc8 0a0a 	rsb	sl, r8, sl
 80169c8:	609a      	str	r2, [r3, #8]
 80169ca:	f04a 0301 	orr.w	r3, sl, #1
 80169ce:	6053      	str	r3, [r2, #4]
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	f003 0301 	and.w	r3, r3, #1
 80169d6:	ea43 0308 	orr.w	r3, r3, r8
 80169da:	607b      	str	r3, [r7, #4]
 80169dc:	e0b6      	b.n	8016b4c <_realloc_r+0x2e4>
 80169de:	45d0      	cmp	r8, sl
 80169e0:	dc35      	bgt.n	8016a4e <_realloc_r+0x1e6>
 80169e2:	68cb      	ldr	r3, [r1, #12]
 80169e4:	688a      	ldr	r2, [r1, #8]
 80169e6:	4638      	mov	r0, r7
 80169e8:	60d3      	str	r3, [r2, #12]
 80169ea:	609a      	str	r2, [r3, #8]
 80169ec:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	60d3      	str	r3, [r2, #12]
 80169f4:	609a      	str	r2, [r3, #8]
 80169f6:	1f2a      	subs	r2, r5, #4
 80169f8:	2a24      	cmp	r2, #36	; 0x24
 80169fa:	d823      	bhi.n	8016a44 <_realloc_r+0x1dc>
 80169fc:	2a13      	cmp	r2, #19
 80169fe:	d91a      	bls.n	8016a36 <_realloc_r+0x1ce>
 8016a00:	6823      	ldr	r3, [r4, #0]
 8016a02:	60bb      	str	r3, [r7, #8]
 8016a04:	6863      	ldr	r3, [r4, #4]
 8016a06:	60fb      	str	r3, [r7, #12]
 8016a08:	2a1b      	cmp	r2, #27
 8016a0a:	d803      	bhi.n	8016a14 <_realloc_r+0x1ac>
 8016a0c:	f107 0010 	add.w	r0, r7, #16
 8016a10:	3408      	adds	r4, #8
 8016a12:	e010      	b.n	8016a36 <_realloc_r+0x1ce>
 8016a14:	68a3      	ldr	r3, [r4, #8]
 8016a16:	613b      	str	r3, [r7, #16]
 8016a18:	68e3      	ldr	r3, [r4, #12]
 8016a1a:	617b      	str	r3, [r7, #20]
 8016a1c:	2a24      	cmp	r2, #36	; 0x24
 8016a1e:	bf01      	itttt	eq
 8016a20:	6923      	ldreq	r3, [r4, #16]
 8016a22:	61bb      	streq	r3, [r7, #24]
 8016a24:	6963      	ldreq	r3, [r4, #20]
 8016a26:	61fb      	streq	r3, [r7, #28]
 8016a28:	bf19      	ittee	ne
 8016a2a:	f107 0018 	addne.w	r0, r7, #24
 8016a2e:	3410      	addne	r4, #16
 8016a30:	f107 0020 	addeq.w	r0, r7, #32
 8016a34:	3418      	addeq	r4, #24
 8016a36:	6823      	ldr	r3, [r4, #0]
 8016a38:	6003      	str	r3, [r0, #0]
 8016a3a:	6863      	ldr	r3, [r4, #4]
 8016a3c:	6043      	str	r3, [r0, #4]
 8016a3e:	68a3      	ldr	r3, [r4, #8]
 8016a40:	6083      	str	r3, [r0, #8]
 8016a42:	e002      	b.n	8016a4a <_realloc_r+0x1e2>
 8016a44:	4621      	mov	r1, r4
 8016a46:	f7ff fef4 	bl	8016832 <memmove>
 8016a4a:	4655      	mov	r5, sl
 8016a4c:	e02e      	b.n	8016aac <_realloc_r+0x244>
 8016a4e:	45b0      	cmp	r8, r6
 8016a50:	dc32      	bgt.n	8016ab8 <_realloc_r+0x250>
 8016a52:	4638      	mov	r0, r7
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8016a5a:	60d3      	str	r3, [r2, #12]
 8016a5c:	609a      	str	r2, [r3, #8]
 8016a5e:	1f2a      	subs	r2, r5, #4
 8016a60:	2a24      	cmp	r2, #36	; 0x24
 8016a62:	d825      	bhi.n	8016ab0 <_realloc_r+0x248>
 8016a64:	2a13      	cmp	r2, #19
 8016a66:	d91a      	bls.n	8016a9e <_realloc_r+0x236>
 8016a68:	6823      	ldr	r3, [r4, #0]
 8016a6a:	60bb      	str	r3, [r7, #8]
 8016a6c:	6863      	ldr	r3, [r4, #4]
 8016a6e:	60fb      	str	r3, [r7, #12]
 8016a70:	2a1b      	cmp	r2, #27
 8016a72:	d803      	bhi.n	8016a7c <_realloc_r+0x214>
 8016a74:	f107 0010 	add.w	r0, r7, #16
 8016a78:	3408      	adds	r4, #8
 8016a7a:	e010      	b.n	8016a9e <_realloc_r+0x236>
 8016a7c:	68a3      	ldr	r3, [r4, #8]
 8016a7e:	613b      	str	r3, [r7, #16]
 8016a80:	68e3      	ldr	r3, [r4, #12]
 8016a82:	617b      	str	r3, [r7, #20]
 8016a84:	2a24      	cmp	r2, #36	; 0x24
 8016a86:	bf01      	itttt	eq
 8016a88:	6923      	ldreq	r3, [r4, #16]
 8016a8a:	61bb      	streq	r3, [r7, #24]
 8016a8c:	6963      	ldreq	r3, [r4, #20]
 8016a8e:	61fb      	streq	r3, [r7, #28]
 8016a90:	bf19      	ittee	ne
 8016a92:	f107 0018 	addne.w	r0, r7, #24
 8016a96:	3410      	addne	r4, #16
 8016a98:	f107 0020 	addeq.w	r0, r7, #32
 8016a9c:	3418      	addeq	r4, #24
 8016a9e:	6823      	ldr	r3, [r4, #0]
 8016aa0:	6003      	str	r3, [r0, #0]
 8016aa2:	6863      	ldr	r3, [r4, #4]
 8016aa4:	6043      	str	r3, [r0, #4]
 8016aa6:	68a3      	ldr	r3, [r4, #8]
 8016aa8:	6083      	str	r3, [r0, #8]
 8016aaa:	4635      	mov	r5, r6
 8016aac:	46bb      	mov	fp, r7
 8016aae:	e055      	b.n	8016b5c <_realloc_r+0x2f4>
 8016ab0:	4621      	mov	r1, r4
 8016ab2:	f7ff febe 	bl	8016832 <memmove>
 8016ab6:	e7f8      	b.n	8016aaa <_realloc_r+0x242>
 8016ab8:	4611      	mov	r1, r2
 8016aba:	4648      	mov	r0, r9
 8016abc:	f7fa fd92 	bl	80115e4 <_malloc_r>
 8016ac0:	4606      	mov	r6, r0
 8016ac2:	2800      	cmp	r0, #0
 8016ac4:	d042      	beq.n	8016b4c <_realloc_r+0x2e4>
 8016ac6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016aca:	f023 0301 	bic.w	r3, r3, #1
 8016ace:	f1a0 0208 	sub.w	r2, r0, #8
 8016ad2:	445b      	add	r3, fp
 8016ad4:	429a      	cmp	r2, r3
 8016ad6:	d105      	bne.n	8016ae4 <_realloc_r+0x27c>
 8016ad8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016adc:	f023 0303 	bic.w	r3, r3, #3
 8016ae0:	441d      	add	r5, r3
 8016ae2:	e03b      	b.n	8016b5c <_realloc_r+0x2f4>
 8016ae4:	1f2a      	subs	r2, r5, #4
 8016ae6:	2a24      	cmp	r2, #36	; 0x24
 8016ae8:	d829      	bhi.n	8016b3e <_realloc_r+0x2d6>
 8016aea:	2a13      	cmp	r2, #19
 8016aec:	d91e      	bls.n	8016b2c <_realloc_r+0x2c4>
 8016aee:	6823      	ldr	r3, [r4, #0]
 8016af0:	6003      	str	r3, [r0, #0]
 8016af2:	6863      	ldr	r3, [r4, #4]
 8016af4:	6043      	str	r3, [r0, #4]
 8016af6:	2a1b      	cmp	r2, #27
 8016af8:	d804      	bhi.n	8016b04 <_realloc_r+0x29c>
 8016afa:	f100 0308 	add.w	r3, r0, #8
 8016afe:	f104 0208 	add.w	r2, r4, #8
 8016b02:	e015      	b.n	8016b30 <_realloc_r+0x2c8>
 8016b04:	68a3      	ldr	r3, [r4, #8]
 8016b06:	6083      	str	r3, [r0, #8]
 8016b08:	68e3      	ldr	r3, [r4, #12]
 8016b0a:	60c3      	str	r3, [r0, #12]
 8016b0c:	2a24      	cmp	r2, #36	; 0x24
 8016b0e:	bf01      	itttt	eq
 8016b10:	6923      	ldreq	r3, [r4, #16]
 8016b12:	6103      	streq	r3, [r0, #16]
 8016b14:	6961      	ldreq	r1, [r4, #20]
 8016b16:	6141      	streq	r1, [r0, #20]
 8016b18:	bf19      	ittee	ne
 8016b1a:	f100 0310 	addne.w	r3, r0, #16
 8016b1e:	f104 0210 	addne.w	r2, r4, #16
 8016b22:	f100 0318 	addeq.w	r3, r0, #24
 8016b26:	f104 0218 	addeq.w	r2, r4, #24
 8016b2a:	e001      	b.n	8016b30 <_realloc_r+0x2c8>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	4622      	mov	r2, r4
 8016b30:	6811      	ldr	r1, [r2, #0]
 8016b32:	6019      	str	r1, [r3, #0]
 8016b34:	6851      	ldr	r1, [r2, #4]
 8016b36:	6059      	str	r1, [r3, #4]
 8016b38:	6892      	ldr	r2, [r2, #8]
 8016b3a:	609a      	str	r2, [r3, #8]
 8016b3c:	e002      	b.n	8016b44 <_realloc_r+0x2dc>
 8016b3e:	4621      	mov	r1, r4
 8016b40:	f7ff fe77 	bl	8016832 <memmove>
 8016b44:	4621      	mov	r1, r4
 8016b46:	4648      	mov	r0, r9
 8016b48:	f7fd fc28 	bl	801439c <_free_r>
 8016b4c:	4648      	mov	r0, r9
 8016b4e:	f7fa ff8c 	bl	8011a6a <__malloc_unlock>
 8016b52:	4630      	mov	r0, r6
 8016b54:	e02d      	b.n	8016bb2 <_realloc_r+0x34a>
 8016b56:	bf00      	nop
 8016b58:	20010090 	.word	0x20010090
 8016b5c:	ebc8 0205 	rsb	r2, r8, r5
 8016b60:	2a0f      	cmp	r2, #15
 8016b62:	f8db 3004 	ldr.w	r3, [fp, #4]
 8016b66:	d914      	bls.n	8016b92 <_realloc_r+0x32a>
 8016b68:	f003 0301 	and.w	r3, r3, #1
 8016b6c:	eb0b 0108 	add.w	r1, fp, r8
 8016b70:	ea43 0308 	orr.w	r3, r3, r8
 8016b74:	f8cb 3004 	str.w	r3, [fp, #4]
 8016b78:	f042 0301 	orr.w	r3, r2, #1
 8016b7c:	440a      	add	r2, r1
 8016b7e:	604b      	str	r3, [r1, #4]
 8016b80:	6853      	ldr	r3, [r2, #4]
 8016b82:	f043 0301 	orr.w	r3, r3, #1
 8016b86:	6053      	str	r3, [r2, #4]
 8016b88:	3108      	adds	r1, #8
 8016b8a:	4648      	mov	r0, r9
 8016b8c:	f7fd fc06 	bl	801439c <_free_r>
 8016b90:	e00a      	b.n	8016ba8 <_realloc_r+0x340>
 8016b92:	f003 0301 	and.w	r3, r3, #1
 8016b96:	432b      	orrs	r3, r5
 8016b98:	eb0b 0205 	add.w	r2, fp, r5
 8016b9c:	f8cb 3004 	str.w	r3, [fp, #4]
 8016ba0:	6853      	ldr	r3, [r2, #4]
 8016ba2:	f043 0301 	orr.w	r3, r3, #1
 8016ba6:	6053      	str	r3, [r2, #4]
 8016ba8:	4648      	mov	r0, r9
 8016baa:	f7fa ff5e 	bl	8011a6a <__malloc_unlock>
 8016bae:	f10b 0008 	add.w	r0, fp, #8
 8016bb2:	b003      	add	sp, #12
 8016bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bb8 <floor>:
 8016bb8:	ec51 0b10 	vmov	r0, r1, d0
 8016bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016bc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016bc8:	2e13      	cmp	r6, #19
 8016bca:	ee10 8a10 	vmov	r8, s0
 8016bce:	460c      	mov	r4, r1
 8016bd0:	ee10 5a10 	vmov	r5, s0
 8016bd4:	dc33      	bgt.n	8016c3e <floor+0x86>
 8016bd6:	2e00      	cmp	r6, #0
 8016bd8:	da16      	bge.n	8016c08 <floor+0x50>
 8016bda:	a335      	add	r3, pc, #212	; (adr r3, 8016cb0 <floor+0xf8>)
 8016bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be0:	f7e9 fbd4 	bl	800038c <__adddf3>
 8016be4:	2200      	movs	r2, #0
 8016be6:	2300      	movs	r3, #0
 8016be8:	f7ea f812 	bl	8000c10 <__aeabi_dcmpgt>
 8016bec:	2800      	cmp	r0, #0
 8016bee:	d057      	beq.n	8016ca0 <floor+0xe8>
 8016bf0:	2c00      	cmp	r4, #0
 8016bf2:	da53      	bge.n	8016c9c <floor+0xe4>
 8016bf4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016bf8:	ea53 0308 	orrs.w	r3, r3, r8
 8016bfc:	4b2e      	ldr	r3, [pc, #184]	; (8016cb8 <floor+0x100>)
 8016bfe:	f04f 0500 	mov.w	r5, #0
 8016c02:	bf18      	it	ne
 8016c04:	461c      	movne	r4, r3
 8016c06:	e04b      	b.n	8016ca0 <floor+0xe8>
 8016c08:	4f2c      	ldr	r7, [pc, #176]	; (8016cbc <floor+0x104>)
 8016c0a:	4137      	asrs	r7, r6
 8016c0c:	ea01 0307 	and.w	r3, r1, r7
 8016c10:	4303      	orrs	r3, r0
 8016c12:	d047      	beq.n	8016ca4 <floor+0xec>
 8016c14:	a326      	add	r3, pc, #152	; (adr r3, 8016cb0 <floor+0xf8>)
 8016c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c1a:	f7e9 fbb7 	bl	800038c <__adddf3>
 8016c1e:	2200      	movs	r2, #0
 8016c20:	2300      	movs	r3, #0
 8016c22:	f7e9 fff5 	bl	8000c10 <__aeabi_dcmpgt>
 8016c26:	b3d8      	cbz	r0, 8016ca0 <floor+0xe8>
 8016c28:	2c00      	cmp	r4, #0
 8016c2a:	bfbe      	ittt	lt
 8016c2c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016c30:	fa43 f606 	asrlt.w	r6, r3, r6
 8016c34:	19a4      	addlt	r4, r4, r6
 8016c36:	ea24 0407 	bic.w	r4, r4, r7
 8016c3a:	2500      	movs	r5, #0
 8016c3c:	e030      	b.n	8016ca0 <floor+0xe8>
 8016c3e:	2e33      	cmp	r6, #51	; 0x33
 8016c40:	dd08      	ble.n	8016c54 <floor+0x9c>
 8016c42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016c46:	d12d      	bne.n	8016ca4 <floor+0xec>
 8016c48:	ee10 2a10 	vmov	r2, s0
 8016c4c:	460b      	mov	r3, r1
 8016c4e:	f7e9 fb9d 	bl	800038c <__adddf3>
 8016c52:	e027      	b.n	8016ca4 <floor+0xec>
 8016c54:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016c58:	f04f 33ff 	mov.w	r3, #4294967295
 8016c5c:	fa23 f707 	lsr.w	r7, r3, r7
 8016c60:	4238      	tst	r0, r7
 8016c62:	d01f      	beq.n	8016ca4 <floor+0xec>
 8016c64:	a312      	add	r3, pc, #72	; (adr r3, 8016cb0 <floor+0xf8>)
 8016c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c6a:	f7e9 fb8f 	bl	800038c <__adddf3>
 8016c6e:	2200      	movs	r2, #0
 8016c70:	2300      	movs	r3, #0
 8016c72:	f7e9 ffcd 	bl	8000c10 <__aeabi_dcmpgt>
 8016c76:	b198      	cbz	r0, 8016ca0 <floor+0xe8>
 8016c78:	2c00      	cmp	r4, #0
 8016c7a:	da0c      	bge.n	8016c96 <floor+0xde>
 8016c7c:	2e14      	cmp	r6, #20
 8016c7e:	d101      	bne.n	8016c84 <floor+0xcc>
 8016c80:	3401      	adds	r4, #1
 8016c82:	e008      	b.n	8016c96 <floor+0xde>
 8016c84:	2301      	movs	r3, #1
 8016c86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016c8a:	fa03 f606 	lsl.w	r6, r3, r6
 8016c8e:	4435      	add	r5, r6
 8016c90:	45a8      	cmp	r8, r5
 8016c92:	bf88      	it	hi
 8016c94:	18e4      	addhi	r4, r4, r3
 8016c96:	ea25 0507 	bic.w	r5, r5, r7
 8016c9a:	e001      	b.n	8016ca0 <floor+0xe8>
 8016c9c:	2500      	movs	r5, #0
 8016c9e:	462c      	mov	r4, r5
 8016ca0:	4621      	mov	r1, r4
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	ec41 0b10 	vmov	d0, r0, r1
 8016ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cac:	f3af 8000 	nop.w
 8016cb0:	8800759c 	.word	0x8800759c
 8016cb4:	7e37e43c 	.word	0x7e37e43c
 8016cb8:	bff00000 	.word	0xbff00000
 8016cbc:	000fffff 	.word	0x000fffff

08016cc0 <pow>:
 8016cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc4:	ed2d 8b02 	vpush	{d8}
 8016cc8:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8016fa8 <pow+0x2e8>
 8016ccc:	b08d      	sub	sp, #52	; 0x34
 8016cce:	ec57 6b10 	vmov	r6, r7, d0
 8016cd2:	ec55 4b11 	vmov	r4, r5, d1
 8016cd6:	f000 f9c3 	bl	8017060 <__ieee754_pow>
 8016cda:	f998 9000 	ldrsb.w	r9, [r8]
 8016cde:	eeb0 8a40 	vmov.f32	s16, s0
 8016ce2:	eef0 8a60 	vmov.f32	s17, s1
 8016ce6:	f1b9 3fff 	cmp.w	r9, #4294967295
 8016cea:	f000 814d 	beq.w	8016f88 <pow+0x2c8>
 8016cee:	4622      	mov	r2, r4
 8016cf0:	462b      	mov	r3, r5
 8016cf2:	4620      	mov	r0, r4
 8016cf4:	4629      	mov	r1, r5
 8016cf6:	f7e9 ff95 	bl	8000c24 <__aeabi_dcmpun>
 8016cfa:	4683      	mov	fp, r0
 8016cfc:	2800      	cmp	r0, #0
 8016cfe:	f040 8143 	bne.w	8016f88 <pow+0x2c8>
 8016d02:	4632      	mov	r2, r6
 8016d04:	463b      	mov	r3, r7
 8016d06:	4630      	mov	r0, r6
 8016d08:	4639      	mov	r1, r7
 8016d0a:	f7e9 ff8b 	bl	8000c24 <__aeabi_dcmpun>
 8016d0e:	9000      	str	r0, [sp, #0]
 8016d10:	b1d8      	cbz	r0, 8016d4a <pow+0x8a>
 8016d12:	2200      	movs	r2, #0
 8016d14:	2300      	movs	r3, #0
 8016d16:	4620      	mov	r0, r4
 8016d18:	4629      	mov	r1, r5
 8016d1a:	f7e9 ff51 	bl	8000bc0 <__aeabi_dcmpeq>
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	f000 8132 	beq.w	8016f88 <pow+0x2c8>
 8016d24:	2301      	movs	r3, #1
 8016d26:	9302      	str	r3, [sp, #8]
 8016d28:	4b9c      	ldr	r3, [pc, #624]	; (8016f9c <pow+0x2dc>)
 8016d2a:	9303      	str	r3, [sp, #12]
 8016d2c:	4b9c      	ldr	r3, [pc, #624]	; (8016fa0 <pow+0x2e0>)
 8016d2e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8016d32:	2200      	movs	r2, #0
 8016d34:	f1b9 0f02 	cmp.w	r9, #2
 8016d38:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016d3c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016d40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016d44:	f040 808b 	bne.w	8016e5e <pow+0x19e>
 8016d48:	e11b      	b.n	8016f82 <pow+0x2c2>
 8016d4a:	f04f 0a00 	mov.w	sl, #0
 8016d4e:	f04f 0b00 	mov.w	fp, #0
 8016d52:	4652      	mov	r2, sl
 8016d54:	465b      	mov	r3, fp
 8016d56:	4630      	mov	r0, r6
 8016d58:	4639      	mov	r1, r7
 8016d5a:	f7e9 ff31 	bl	8000bc0 <__aeabi_dcmpeq>
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	d03f      	beq.n	8016de2 <pow+0x122>
 8016d62:	4652      	mov	r2, sl
 8016d64:	465b      	mov	r3, fp
 8016d66:	4620      	mov	r0, r4
 8016d68:	4629      	mov	r1, r5
 8016d6a:	f7e9 ff29 	bl	8000bc0 <__aeabi_dcmpeq>
 8016d6e:	9001      	str	r0, [sp, #4]
 8016d70:	b198      	cbz	r0, 8016d9a <pow+0xda>
 8016d72:	2301      	movs	r3, #1
 8016d74:	9302      	str	r3, [sp, #8]
 8016d76:	4b89      	ldr	r3, [pc, #548]	; (8016f9c <pow+0x2dc>)
 8016d78:	9303      	str	r3, [sp, #12]
 8016d7a:	9b00      	ldr	r3, [sp, #0]
 8016d7c:	930a      	str	r3, [sp, #40]	; 0x28
 8016d7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016d82:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016d86:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016d8a:	f1b9 0f00 	cmp.w	r9, #0
 8016d8e:	d066      	beq.n	8016e5e <pow+0x19e>
 8016d90:	4b83      	ldr	r3, [pc, #524]	; (8016fa0 <pow+0x2e0>)
 8016d92:	2200      	movs	r2, #0
 8016d94:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016d98:	e0ed      	b.n	8016f76 <pow+0x2b6>
 8016d9a:	ec45 4b10 	vmov	d0, r4, r5
 8016d9e:	f000 ff62 	bl	8017c66 <finite>
 8016da2:	2800      	cmp	r0, #0
 8016da4:	f000 80f0 	beq.w	8016f88 <pow+0x2c8>
 8016da8:	4652      	mov	r2, sl
 8016daa:	465b      	mov	r3, fp
 8016dac:	4620      	mov	r0, r4
 8016dae:	4629      	mov	r1, r5
 8016db0:	f7e9 ff10 	bl	8000bd4 <__aeabi_dcmplt>
 8016db4:	2800      	cmp	r0, #0
 8016db6:	f000 80e7 	beq.w	8016f88 <pow+0x2c8>
 8016dba:	2301      	movs	r3, #1
 8016dbc:	9302      	str	r3, [sp, #8]
 8016dbe:	4b77      	ldr	r3, [pc, #476]	; (8016f9c <pow+0x2dc>)
 8016dc0:	9303      	str	r3, [sp, #12]
 8016dc2:	9b01      	ldr	r3, [sp, #4]
 8016dc4:	930a      	str	r3, [sp, #40]	; 0x28
 8016dc6:	f998 3000 	ldrsb.w	r3, [r8]
 8016dca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016dce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d035      	beq.n	8016e42 <pow+0x182>
 8016dd6:	4973      	ldr	r1, [pc, #460]	; (8016fa4 <pow+0x2e4>)
 8016dd8:	2000      	movs	r0, #0
 8016dda:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016dde:	2b02      	cmp	r3, #2
 8016de0:	e03c      	b.n	8016e5c <pow+0x19c>
 8016de2:	eeb0 0a48 	vmov.f32	s0, s16
 8016de6:	eef0 0a68 	vmov.f32	s1, s17
 8016dea:	f000 ff3c 	bl	8017c66 <finite>
 8016dee:	4681      	mov	r9, r0
 8016df0:	2800      	cmp	r0, #0
 8016df2:	f040 8092 	bne.w	8016f1a <pow+0x25a>
 8016df6:	ec47 6b10 	vmov	d0, r6, r7
 8016dfa:	f000 ff34 	bl	8017c66 <finite>
 8016dfe:	2800      	cmp	r0, #0
 8016e00:	f000 808b 	beq.w	8016f1a <pow+0x25a>
 8016e04:	ec45 4b10 	vmov	d0, r4, r5
 8016e08:	f000 ff2d 	bl	8017c66 <finite>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	f000 8084 	beq.w	8016f1a <pow+0x25a>
 8016e12:	ec53 2b18 	vmov	r2, r3, d8
 8016e16:	ee18 0a10 	vmov	r0, s16
 8016e1a:	4619      	mov	r1, r3
 8016e1c:	f7e9 ff02 	bl	8000c24 <__aeabi_dcmpun>
 8016e20:	4b61      	ldr	r3, [pc, #388]	; (8016fa8 <pow+0x2e8>)
 8016e22:	f993 8000 	ldrsb.w	r8, [r3]
 8016e26:	4b5d      	ldr	r3, [pc, #372]	; (8016f9c <pow+0x2dc>)
 8016e28:	b318      	cbz	r0, 8016e72 <pow+0x1b2>
 8016e2a:	2201      	movs	r2, #1
 8016e2c:	9202      	str	r2, [sp, #8]
 8016e2e:	9303      	str	r3, [sp, #12]
 8016e30:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8016e34:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016e38:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016e3c:	f1b8 0f00 	cmp.w	r8, #0
 8016e40:	d102      	bne.n	8016e48 <pow+0x188>
 8016e42:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016e46:	e00a      	b.n	8016e5e <pow+0x19e>
 8016e48:	4652      	mov	r2, sl
 8016e4a:	465b      	mov	r3, fp
 8016e4c:	4650      	mov	r0, sl
 8016e4e:	4659      	mov	r1, fp
 8016e50:	f7e9 fd78 	bl	8000944 <__aeabi_ddiv>
 8016e54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016e58:	f1b8 0f02 	cmp.w	r8, #2
 8016e5c:	d005      	beq.n	8016e6a <pow+0x1aa>
 8016e5e:	a802      	add	r0, sp, #8
 8016e60:	f000 ff09 	bl	8017c76 <matherr>
 8016e64:	2800      	cmp	r0, #0
 8016e66:	f040 8086 	bne.w	8016f76 <pow+0x2b6>
 8016e6a:	f001 f825 	bl	8017eb8 <__errno>
 8016e6e:	2321      	movs	r3, #33	; 0x21
 8016e70:	e080      	b.n	8016f74 <pow+0x2b4>
 8016e72:	2203      	movs	r2, #3
 8016e74:	9202      	str	r2, [sp, #8]
 8016e76:	9303      	str	r3, [sp, #12]
 8016e78:	900a      	str	r0, [sp, #40]	; 0x28
 8016e7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016e7e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016e82:	f1b8 0f00 	cmp.w	r8, #0
 8016e86:	d124      	bne.n	8016ed2 <pow+0x212>
 8016e88:	4b48      	ldr	r3, [pc, #288]	; (8016fac <pow+0x2ec>)
 8016e8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016e8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016e92:	4630      	mov	r0, r6
 8016e94:	4652      	mov	r2, sl
 8016e96:	465b      	mov	r3, fp
 8016e98:	4639      	mov	r1, r7
 8016e9a:	f7e9 fe9b 	bl	8000bd4 <__aeabi_dcmplt>
 8016e9e:	2800      	cmp	r0, #0
 8016ea0:	d061      	beq.n	8016f66 <pow+0x2a6>
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	4b42      	ldr	r3, [pc, #264]	; (8016fb0 <pow+0x2f0>)
 8016ea6:	4620      	mov	r0, r4
 8016ea8:	4629      	mov	r1, r5
 8016eaa:	f7e9 fc21 	bl	80006f0 <__aeabi_dmul>
 8016eae:	4604      	mov	r4, r0
 8016eb0:	460d      	mov	r5, r1
 8016eb2:	ec45 4b10 	vmov	d0, r4, r5
 8016eb6:	f000 feeb 	bl	8017c90 <rint>
 8016eba:	4620      	mov	r0, r4
 8016ebc:	ec53 2b10 	vmov	r2, r3, d0
 8016ec0:	4629      	mov	r1, r5
 8016ec2:	f7e9 fe7d 	bl	8000bc0 <__aeabi_dcmpeq>
 8016ec6:	2800      	cmp	r0, #0
 8016ec8:	d148      	bne.n	8016f5c <pow+0x29c>
 8016eca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016ece:	4b39      	ldr	r3, [pc, #228]	; (8016fb4 <pow+0x2f4>)
 8016ed0:	e020      	b.n	8016f14 <pow+0x254>
 8016ed2:	4b39      	ldr	r3, [pc, #228]	; (8016fb8 <pow+0x2f8>)
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016eda:	4630      	mov	r0, r6
 8016edc:	4652      	mov	r2, sl
 8016ede:	465b      	mov	r3, fp
 8016ee0:	4639      	mov	r1, r7
 8016ee2:	f7e9 fe77 	bl	8000bd4 <__aeabi_dcmplt>
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d038      	beq.n	8016f5c <pow+0x29c>
 8016eea:	2200      	movs	r2, #0
 8016eec:	4b30      	ldr	r3, [pc, #192]	; (8016fb0 <pow+0x2f0>)
 8016eee:	4620      	mov	r0, r4
 8016ef0:	4629      	mov	r1, r5
 8016ef2:	f7e9 fbfd 	bl	80006f0 <__aeabi_dmul>
 8016ef6:	4604      	mov	r4, r0
 8016ef8:	460d      	mov	r5, r1
 8016efa:	ec45 4b10 	vmov	d0, r4, r5
 8016efe:	f000 fec7 	bl	8017c90 <rint>
 8016f02:	4620      	mov	r0, r4
 8016f04:	ec53 2b10 	vmov	r2, r3, d0
 8016f08:	4629      	mov	r1, r5
 8016f0a:	f7e9 fe59 	bl	8000bc0 <__aeabi_dcmpeq>
 8016f0e:	bb28      	cbnz	r0, 8016f5c <pow+0x29c>
 8016f10:	4b24      	ldr	r3, [pc, #144]	; (8016fa4 <pow+0x2e4>)
 8016f12:	2200      	movs	r2, #0
 8016f14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016f18:	e020      	b.n	8016f5c <pow+0x29c>
 8016f1a:	f04f 0800 	mov.w	r8, #0
 8016f1e:	f04f 0900 	mov.w	r9, #0
 8016f22:	4642      	mov	r2, r8
 8016f24:	464b      	mov	r3, r9
 8016f26:	ec51 0b18 	vmov	r0, r1, d8
 8016f2a:	f7e9 fe49 	bl	8000bc0 <__aeabi_dcmpeq>
 8016f2e:	b358      	cbz	r0, 8016f88 <pow+0x2c8>
 8016f30:	ec47 6b10 	vmov	d0, r6, r7
 8016f34:	f000 fe97 	bl	8017c66 <finite>
 8016f38:	b330      	cbz	r0, 8016f88 <pow+0x2c8>
 8016f3a:	ec45 4b10 	vmov	d0, r4, r5
 8016f3e:	f000 fe92 	bl	8017c66 <finite>
 8016f42:	b308      	cbz	r0, 8016f88 <pow+0x2c8>
 8016f44:	2304      	movs	r3, #4
 8016f46:	9302      	str	r3, [sp, #8]
 8016f48:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016f4c:	4b13      	ldr	r3, [pc, #76]	; (8016f9c <pow+0x2dc>)
 8016f4e:	9303      	str	r3, [sp, #12]
 8016f50:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016f54:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8016f58:	2300      	movs	r3, #0
 8016f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8016f5c:	4b12      	ldr	r3, [pc, #72]	; (8016fa8 <pow+0x2e8>)
 8016f5e:	f993 3000 	ldrsb.w	r3, [r3]
 8016f62:	2b02      	cmp	r3, #2
 8016f64:	d003      	beq.n	8016f6e <pow+0x2ae>
 8016f66:	a802      	add	r0, sp, #8
 8016f68:	f000 fe85 	bl	8017c76 <matherr>
 8016f6c:	b918      	cbnz	r0, 8016f76 <pow+0x2b6>
 8016f6e:	f000 ffa3 	bl	8017eb8 <__errno>
 8016f72:	2322      	movs	r3, #34	; 0x22
 8016f74:	6003      	str	r3, [r0, #0]
 8016f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f78:	b11b      	cbz	r3, 8016f82 <pow+0x2c2>
 8016f7a:	f000 ff9d 	bl	8017eb8 <__errno>
 8016f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f80:	6003      	str	r3, [r0, #0]
 8016f82:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016f86:	e003      	b.n	8016f90 <pow+0x2d0>
 8016f88:	eeb0 0a48 	vmov.f32	s0, s16
 8016f8c:	eef0 0a68 	vmov.f32	s1, s17
 8016f90:	b00d      	add	sp, #52	; 0x34
 8016f92:	ecbd 8b02 	vpop	{d8}
 8016f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f9a:	bf00      	nop
 8016f9c:	0802ff60 	.word	0x0802ff60
 8016fa0:	3ff00000 	.word	0x3ff00000
 8016fa4:	fff00000 	.word	0xfff00000
 8016fa8:	200105f4 	.word	0x200105f4
 8016fac:	47efffff 	.word	0x47efffff
 8016fb0:	3fe00000 	.word	0x3fe00000
 8016fb4:	c7efffff 	.word	0xc7efffff
 8016fb8:	7ff00000 	.word	0x7ff00000

08016fbc <sqrtf>:
 8016fbc:	b510      	push	{r4, lr}
 8016fbe:	ed2d 8b02 	vpush	{d8}
 8016fc2:	b08a      	sub	sp, #40	; 0x28
 8016fc4:	eeb0 8a40 	vmov.f32	s16, s0
 8016fc8:	f000 fdfe 	bl	8017bc8 <__ieee754_sqrtf>
 8016fcc:	4b21      	ldr	r3, [pc, #132]	; (8017054 <sqrtf+0x98>)
 8016fce:	f993 4000 	ldrsb.w	r4, [r3]
 8016fd2:	1c63      	adds	r3, r4, #1
 8016fd4:	d039      	beq.n	801704a <sqrtf+0x8e>
 8016fd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8016fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fde:	d634      	bvs.n	801704a <sqrtf+0x8e>
 8016fe0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fe8:	d52f      	bpl.n	801704a <sqrtf+0x8e>
 8016fea:	2301      	movs	r3, #1
 8016fec:	9300      	str	r3, [sp, #0]
 8016fee:	4b1a      	ldr	r3, [pc, #104]	; (8017058 <sqrtf+0x9c>)
 8016ff0:	9301      	str	r3, [sp, #4]
 8016ff2:	ee18 0a10 	vmov	r0, s16
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	9308      	str	r3, [sp, #32]
 8016ffa:	f7e9 fb25 	bl	8000648 <__aeabi_f2d>
 8016ffe:	2200      	movs	r2, #0
 8017000:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017008:	2300      	movs	r3, #0
 801700a:	b914      	cbnz	r4, 8017012 <sqrtf+0x56>
 801700c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017010:	e007      	b.n	8017022 <sqrtf+0x66>
 8017012:	4610      	mov	r0, r2
 8017014:	4619      	mov	r1, r3
 8017016:	f7e9 fc95 	bl	8000944 <__aeabi_ddiv>
 801701a:	2c02      	cmp	r4, #2
 801701c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017020:	d003      	beq.n	801702a <sqrtf+0x6e>
 8017022:	4668      	mov	r0, sp
 8017024:	f000 fe27 	bl	8017c76 <matherr>
 8017028:	b918      	cbnz	r0, 8017032 <sqrtf+0x76>
 801702a:	f000 ff45 	bl	8017eb8 <__errno>
 801702e:	2321      	movs	r3, #33	; 0x21
 8017030:	6003      	str	r3, [r0, #0]
 8017032:	9b08      	ldr	r3, [sp, #32]
 8017034:	b11b      	cbz	r3, 801703e <sqrtf+0x82>
 8017036:	f000 ff3f 	bl	8017eb8 <__errno>
 801703a:	9b08      	ldr	r3, [sp, #32]
 801703c:	6003      	str	r3, [r0, #0]
 801703e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017042:	f7e9 fe4d 	bl	8000ce0 <__aeabi_d2f>
 8017046:	ee00 0a10 	vmov	s0, r0
 801704a:	b00a      	add	sp, #40	; 0x28
 801704c:	ecbd 8b02 	vpop	{d8}
 8017050:	bd10      	pop	{r4, pc}
 8017052:	bf00      	nop
 8017054:	200105f4 	.word	0x200105f4
 8017058:	0802ff64 	.word	0x0802ff64
 801705c:	00000000 	.word	0x00000000

08017060 <__ieee754_pow>:
 8017060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017064:	b091      	sub	sp, #68	; 0x44
 8017066:	ed8d 1b00 	vstr	d1, [sp]
 801706a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 801706e:	ec57 6b10 	vmov	r6, r7, d0
 8017072:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017076:	ea58 0302 	orrs.w	r3, r8, r2
 801707a:	ee10 aa10 	vmov	sl, s0
 801707e:	463d      	mov	r5, r7
 8017080:	f000 849e 	beq.w	80179c0 <__ieee754_pow+0x960>
 8017084:	4bbc      	ldr	r3, [pc, #752]	; (8017378 <__ieee754_pow+0x318>)
 8017086:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801708a:	429c      	cmp	r4, r3
 801708c:	dc08      	bgt.n	80170a0 <__ieee754_pow+0x40>
 801708e:	d102      	bne.n	8017096 <__ieee754_pow+0x36>
 8017090:	b936      	cbnz	r6, 80170a0 <__ieee754_pow+0x40>
 8017092:	f000 bc9e 	b.w	80179d2 <__ieee754_pow+0x972>
 8017096:	4598      	cmp	r8, r3
 8017098:	dc02      	bgt.n	80170a0 <__ieee754_pow+0x40>
 801709a:	4598      	cmp	r8, r3
 801709c:	d10e      	bne.n	80170bc <__ieee754_pow+0x5c>
 801709e:	b16a      	cbz	r2, 80170bc <__ieee754_pow+0x5c>
 80170a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80170a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80170a8:	ea54 030a 	orrs.w	r3, r4, sl
 80170ac:	f000 8488 	beq.w	80179c0 <__ieee754_pow+0x960>
 80170b0:	48b2      	ldr	r0, [pc, #712]	; (801737c <__ieee754_pow+0x31c>)
 80170b2:	b011      	add	sp, #68	; 0x44
 80170b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170b8:	f000 bde2 	b.w	8017c80 <nan>
 80170bc:	2d00      	cmp	r5, #0
 80170be:	da2b      	bge.n	8017118 <__ieee754_pow+0xb8>
 80170c0:	4baf      	ldr	r3, [pc, #700]	; (8017380 <__ieee754_pow+0x320>)
 80170c2:	4598      	cmp	r8, r3
 80170c4:	dc25      	bgt.n	8017112 <__ieee754_pow+0xb2>
 80170c6:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80170ca:	4598      	cmp	r8, r3
 80170cc:	dd24      	ble.n	8017118 <__ieee754_pow+0xb8>
 80170ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80170d2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80170d6:	2b14      	cmp	r3, #20
 80170d8:	dd0c      	ble.n	80170f4 <__ieee754_pow+0x94>
 80170da:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80170de:	fa22 f103 	lsr.w	r1, r2, r3
 80170e2:	fa01 f303 	lsl.w	r3, r1, r3
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d116      	bne.n	8017118 <__ieee754_pow+0xb8>
 80170ea:	f001 0101 	and.w	r1, r1, #1
 80170ee:	f1c1 0b02 	rsb	fp, r1, #2
 80170f2:	e013      	b.n	801711c <__ieee754_pow+0xbc>
 80170f4:	2a00      	cmp	r2, #0
 80170f6:	d151      	bne.n	801719c <__ieee754_pow+0x13c>
 80170f8:	f1c3 0314 	rsb	r3, r3, #20
 80170fc:	fa48 f103 	asr.w	r1, r8, r3
 8017100:	fa01 f303 	lsl.w	r3, r1, r3
 8017104:	4598      	cmp	r8, r3
 8017106:	d12a      	bne.n	801715e <__ieee754_pow+0xfe>
 8017108:	f001 0101 	and.w	r1, r1, #1
 801710c:	f1c1 0b02 	rsb	fp, r1, #2
 8017110:	e026      	b.n	8017160 <__ieee754_pow+0x100>
 8017112:	f04f 0b02 	mov.w	fp, #2
 8017116:	e001      	b.n	801711c <__ieee754_pow+0xbc>
 8017118:	f04f 0b00 	mov.w	fp, #0
 801711c:	2a00      	cmp	r2, #0
 801711e:	d13f      	bne.n	80171a0 <__ieee754_pow+0x140>
 8017120:	4b95      	ldr	r3, [pc, #596]	; (8017378 <__ieee754_pow+0x318>)
 8017122:	4598      	cmp	r8, r3
 8017124:	d11c      	bne.n	8017160 <__ieee754_pow+0x100>
 8017126:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801712a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801712e:	ea53 030a 	orrs.w	r3, r3, sl
 8017132:	f000 8445 	beq.w	80179c0 <__ieee754_pow+0x960>
 8017136:	4b93      	ldr	r3, [pc, #588]	; (8017384 <__ieee754_pow+0x324>)
 8017138:	429c      	cmp	r4, r3
 801713a:	dd07      	ble.n	801714c <__ieee754_pow+0xec>
 801713c:	f1b9 0f00 	cmp.w	r9, #0
 8017140:	f280 8441 	bge.w	80179c6 <__ieee754_pow+0x966>
 8017144:	2000      	movs	r0, #0
 8017146:	2100      	movs	r1, #0
 8017148:	f000 bc48 	b.w	80179dc <__ieee754_pow+0x97c>
 801714c:	f1b9 0f00 	cmp.w	r9, #0
 8017150:	daf8      	bge.n	8017144 <__ieee754_pow+0xe4>
 8017152:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8017156:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801715a:	f000 bc3f 	b.w	80179dc <__ieee754_pow+0x97c>
 801715e:	4693      	mov	fp, r2
 8017160:	4b89      	ldr	r3, [pc, #548]	; (8017388 <__ieee754_pow+0x328>)
 8017162:	4598      	cmp	r8, r3
 8017164:	d108      	bne.n	8017178 <__ieee754_pow+0x118>
 8017166:	f1b9 0f00 	cmp.w	r9, #0
 801716a:	f280 842f 	bge.w	80179cc <__ieee754_pow+0x96c>
 801716e:	4632      	mov	r2, r6
 8017170:	463b      	mov	r3, r7
 8017172:	2000      	movs	r0, #0
 8017174:	4984      	ldr	r1, [pc, #528]	; (8017388 <__ieee754_pow+0x328>)
 8017176:	e03d      	b.n	80171f4 <__ieee754_pow+0x194>
 8017178:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801717c:	d102      	bne.n	8017184 <__ieee754_pow+0x124>
 801717e:	4632      	mov	r2, r6
 8017180:	463b      	mov	r3, r7
 8017182:	e05b      	b.n	801723c <__ieee754_pow+0x1dc>
 8017184:	4b81      	ldr	r3, [pc, #516]	; (801738c <__ieee754_pow+0x32c>)
 8017186:	4599      	cmp	r9, r3
 8017188:	d10a      	bne.n	80171a0 <__ieee754_pow+0x140>
 801718a:	2d00      	cmp	r5, #0
 801718c:	db08      	blt.n	80171a0 <__ieee754_pow+0x140>
 801718e:	ec47 6b10 	vmov	d0, r6, r7
 8017192:	b011      	add	sp, #68	; 0x44
 8017194:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017198:	f000 bc62 	b.w	8017a60 <__ieee754_sqrt>
 801719c:	f04f 0b00 	mov.w	fp, #0
 80171a0:	ec47 6b10 	vmov	d0, r6, r7
 80171a4:	f000 fd58 	bl	8017c58 <fabs>
 80171a8:	ec51 0b10 	vmov	r0, r1, d0
 80171ac:	f1ba 0f00 	cmp.w	sl, #0
 80171b0:	d12b      	bne.n	801720a <__ieee754_pow+0x1aa>
 80171b2:	b124      	cbz	r4, 80171be <__ieee754_pow+0x15e>
 80171b4:	4b74      	ldr	r3, [pc, #464]	; (8017388 <__ieee754_pow+0x328>)
 80171b6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d125      	bne.n	801720a <__ieee754_pow+0x1aa>
 80171be:	f1b9 0f00 	cmp.w	r9, #0
 80171c2:	da05      	bge.n	80171d0 <__ieee754_pow+0x170>
 80171c4:	4602      	mov	r2, r0
 80171c6:	460b      	mov	r3, r1
 80171c8:	2000      	movs	r0, #0
 80171ca:	496f      	ldr	r1, [pc, #444]	; (8017388 <__ieee754_pow+0x328>)
 80171cc:	f7e9 fbba 	bl	8000944 <__aeabi_ddiv>
 80171d0:	2d00      	cmp	r5, #0
 80171d2:	f280 8403 	bge.w	80179dc <__ieee754_pow+0x97c>
 80171d6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80171da:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80171de:	ea54 030b 	orrs.w	r3, r4, fp
 80171e2:	d10a      	bne.n	80171fa <__ieee754_pow+0x19a>
 80171e4:	4602      	mov	r2, r0
 80171e6:	460b      	mov	r3, r1
 80171e8:	4610      	mov	r0, r2
 80171ea:	4619      	mov	r1, r3
 80171ec:	f7e9 f8cc 	bl	8000388 <__aeabi_dsub>
 80171f0:	4602      	mov	r2, r0
 80171f2:	460b      	mov	r3, r1
 80171f4:	f7e9 fba6 	bl	8000944 <__aeabi_ddiv>
 80171f8:	e3f0      	b.n	80179dc <__ieee754_pow+0x97c>
 80171fa:	f1bb 0f01 	cmp.w	fp, #1
 80171fe:	f040 83ed 	bne.w	80179dc <__ieee754_pow+0x97c>
 8017202:	4606      	mov	r6, r0
 8017204:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 8017208:	e3e0      	b.n	80179cc <__ieee754_pow+0x96c>
 801720a:	0fed      	lsrs	r5, r5, #31
 801720c:	1e6b      	subs	r3, r5, #1
 801720e:	930d      	str	r3, [sp, #52]	; 0x34
 8017210:	ea5b 0303 	orrs.w	r3, fp, r3
 8017214:	d102      	bne.n	801721c <__ieee754_pow+0x1bc>
 8017216:	4632      	mov	r2, r6
 8017218:	463b      	mov	r3, r7
 801721a:	e7e5      	b.n	80171e8 <__ieee754_pow+0x188>
 801721c:	4b5c      	ldr	r3, [pc, #368]	; (8017390 <__ieee754_pow+0x330>)
 801721e:	4598      	cmp	r8, r3
 8017220:	dd6f      	ble.n	8017302 <__ieee754_pow+0x2a2>
 8017222:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017226:	4598      	cmp	r8, r3
 8017228:	dd0d      	ble.n	8017246 <__ieee754_pow+0x1e6>
 801722a:	4b56      	ldr	r3, [pc, #344]	; (8017384 <__ieee754_pow+0x324>)
 801722c:	429c      	cmp	r4, r3
 801722e:	dc10      	bgt.n	8017252 <__ieee754_pow+0x1f2>
 8017230:	f1b9 0f00 	cmp.w	r9, #0
 8017234:	da86      	bge.n	8017144 <__ieee754_pow+0xe4>
 8017236:	a346      	add	r3, pc, #280	; (adr r3, 8017350 <__ieee754_pow+0x2f0>)
 8017238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723c:	4610      	mov	r0, r2
 801723e:	4619      	mov	r1, r3
 8017240:	f7e9 fa56 	bl	80006f0 <__aeabi_dmul>
 8017244:	e3ca      	b.n	80179dc <__ieee754_pow+0x97c>
 8017246:	4b53      	ldr	r3, [pc, #332]	; (8017394 <__ieee754_pow+0x334>)
 8017248:	429c      	cmp	r4, r3
 801724a:	ddf1      	ble.n	8017230 <__ieee754_pow+0x1d0>
 801724c:	4b4e      	ldr	r3, [pc, #312]	; (8017388 <__ieee754_pow+0x328>)
 801724e:	429c      	cmp	r4, r3
 8017250:	dd03      	ble.n	801725a <__ieee754_pow+0x1fa>
 8017252:	f1b9 0f00 	cmp.w	r9, #0
 8017256:	dcee      	bgt.n	8017236 <__ieee754_pow+0x1d6>
 8017258:	e774      	b.n	8017144 <__ieee754_pow+0xe4>
 801725a:	2200      	movs	r2, #0
 801725c:	4b4a      	ldr	r3, [pc, #296]	; (8017388 <__ieee754_pow+0x328>)
 801725e:	f7e9 f893 	bl	8000388 <__aeabi_dsub>
 8017262:	a33d      	add	r3, pc, #244	; (adr r3, 8017358 <__ieee754_pow+0x2f8>)
 8017264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017268:	4604      	mov	r4, r0
 801726a:	460d      	mov	r5, r1
 801726c:	f7e9 fa40 	bl	80006f0 <__aeabi_dmul>
 8017270:	a33b      	add	r3, pc, #236	; (adr r3, 8017360 <__ieee754_pow+0x300>)
 8017272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017276:	4606      	mov	r6, r0
 8017278:	460f      	mov	r7, r1
 801727a:	4620      	mov	r0, r4
 801727c:	4629      	mov	r1, r5
 801727e:	f7e9 fa37 	bl	80006f0 <__aeabi_dmul>
 8017282:	2200      	movs	r2, #0
 8017284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017288:	4b43      	ldr	r3, [pc, #268]	; (8017398 <__ieee754_pow+0x338>)
 801728a:	4620      	mov	r0, r4
 801728c:	4629      	mov	r1, r5
 801728e:	f7e9 fa2f 	bl	80006f0 <__aeabi_dmul>
 8017292:	4602      	mov	r2, r0
 8017294:	460b      	mov	r3, r1
 8017296:	a134      	add	r1, pc, #208	; (adr r1, 8017368 <__ieee754_pow+0x308>)
 8017298:	e9d1 0100 	ldrd	r0, r1, [r1]
 801729c:	f7e9 f874 	bl	8000388 <__aeabi_dsub>
 80172a0:	4622      	mov	r2, r4
 80172a2:	462b      	mov	r3, r5
 80172a4:	f7e9 fa24 	bl	80006f0 <__aeabi_dmul>
 80172a8:	4602      	mov	r2, r0
 80172aa:	460b      	mov	r3, r1
 80172ac:	2000      	movs	r0, #0
 80172ae:	4937      	ldr	r1, [pc, #220]	; (801738c <__ieee754_pow+0x32c>)
 80172b0:	f7e9 f86a 	bl	8000388 <__aeabi_dsub>
 80172b4:	4622      	mov	r2, r4
 80172b6:	462b      	mov	r3, r5
 80172b8:	4680      	mov	r8, r0
 80172ba:	4689      	mov	r9, r1
 80172bc:	4620      	mov	r0, r4
 80172be:	4629      	mov	r1, r5
 80172c0:	f7e9 fa16 	bl	80006f0 <__aeabi_dmul>
 80172c4:	4602      	mov	r2, r0
 80172c6:	460b      	mov	r3, r1
 80172c8:	4640      	mov	r0, r8
 80172ca:	4649      	mov	r1, r9
 80172cc:	f7e9 fa10 	bl	80006f0 <__aeabi_dmul>
 80172d0:	a327      	add	r3, pc, #156	; (adr r3, 8017370 <__ieee754_pow+0x310>)
 80172d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d6:	f7e9 fa0b 	bl	80006f0 <__aeabi_dmul>
 80172da:	4602      	mov	r2, r0
 80172dc:	460b      	mov	r3, r1
 80172de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80172e2:	f7e9 f851 	bl	8000388 <__aeabi_dsub>
 80172e6:	4602      	mov	r2, r0
 80172e8:	460b      	mov	r3, r1
 80172ea:	4604      	mov	r4, r0
 80172ec:	460d      	mov	r5, r1
 80172ee:	4630      	mov	r0, r6
 80172f0:	4639      	mov	r1, r7
 80172f2:	f7e9 f84b 	bl	800038c <__adddf3>
 80172f6:	2000      	movs	r0, #0
 80172f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80172fc:	4632      	mov	r2, r6
 80172fe:	463b      	mov	r3, r7
 8017300:	e1aa      	b.n	8017658 <__ieee754_pow+0x5f8>
 8017302:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017306:	f04f 0200 	mov.w	r2, #0
 801730a:	da05      	bge.n	8017318 <__ieee754_pow+0x2b8>
 801730c:	4b23      	ldr	r3, [pc, #140]	; (801739c <__ieee754_pow+0x33c>)
 801730e:	f7e9 f9ef 	bl	80006f0 <__aeabi_dmul>
 8017312:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017316:	460c      	mov	r4, r1
 8017318:	1523      	asrs	r3, r4, #20
 801731a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801731e:	4413      	add	r3, r2
 8017320:	9307      	str	r3, [sp, #28]
 8017322:	4b1f      	ldr	r3, [pc, #124]	; (80173a0 <__ieee754_pow+0x340>)
 8017324:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017328:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801732c:	429c      	cmp	r4, r3
 801732e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017332:	dd07      	ble.n	8017344 <__ieee754_pow+0x2e4>
 8017334:	4b1b      	ldr	r3, [pc, #108]	; (80173a4 <__ieee754_pow+0x344>)
 8017336:	429c      	cmp	r4, r3
 8017338:	dd36      	ble.n	80173a8 <__ieee754_pow+0x348>
 801733a:	9b07      	ldr	r3, [sp, #28]
 801733c:	3301      	adds	r3, #1
 801733e:	9307      	str	r3, [sp, #28]
 8017340:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017344:	f04f 0a00 	mov.w	sl, #0
 8017348:	e030      	b.n	80173ac <__ieee754_pow+0x34c>
 801734a:	bf00      	nop
 801734c:	f3af 8000 	nop.w
 8017350:	8800759c 	.word	0x8800759c
 8017354:	7e37e43c 	.word	0x7e37e43c
 8017358:	60000000 	.word	0x60000000
 801735c:	3ff71547 	.word	0x3ff71547
 8017360:	f85ddf44 	.word	0xf85ddf44
 8017364:	3e54ae0b 	.word	0x3e54ae0b
 8017368:	55555555 	.word	0x55555555
 801736c:	3fd55555 	.word	0x3fd55555
 8017370:	652b82fe 	.word	0x652b82fe
 8017374:	3ff71547 	.word	0x3ff71547
 8017378:	7ff00000 	.word	0x7ff00000
 801737c:	0802fc0b 	.word	0x0802fc0b
 8017380:	433fffff 	.word	0x433fffff
 8017384:	3fefffff 	.word	0x3fefffff
 8017388:	3ff00000 	.word	0x3ff00000
 801738c:	3fe00000 	.word	0x3fe00000
 8017390:	41e00000 	.word	0x41e00000
 8017394:	3feffffe 	.word	0x3feffffe
 8017398:	3fd00000 	.word	0x3fd00000
 801739c:	43400000 	.word	0x43400000
 80173a0:	0003988e 	.word	0x0003988e
 80173a4:	000bb679 	.word	0x000bb679
 80173a8:	f04f 0a01 	mov.w	sl, #1
 80173ac:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80173b0:	930c      	str	r3, [sp, #48]	; 0x30
 80173b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173b4:	4bc6      	ldr	r3, [pc, #792]	; (80176d0 <__ieee754_pow+0x670>)
 80173b6:	4413      	add	r3, r2
 80173b8:	ed93 7b00 	vldr	d7, [r3]
 80173bc:	4629      	mov	r1, r5
 80173be:	ec53 2b17 	vmov	r2, r3, d7
 80173c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80173c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80173ca:	f7e8 ffdd 	bl	8000388 <__aeabi_dsub>
 80173ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80173d2:	4606      	mov	r6, r0
 80173d4:	460f      	mov	r7, r1
 80173d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80173da:	f7e8 ffd7 	bl	800038c <__adddf3>
 80173de:	4602      	mov	r2, r0
 80173e0:	460b      	mov	r3, r1
 80173e2:	2000      	movs	r0, #0
 80173e4:	49bb      	ldr	r1, [pc, #748]	; (80176d4 <__ieee754_pow+0x674>)
 80173e6:	f7e9 faad 	bl	8000944 <__aeabi_ddiv>
 80173ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80173ee:	4602      	mov	r2, r0
 80173f0:	460b      	mov	r3, r1
 80173f2:	4630      	mov	r0, r6
 80173f4:	4639      	mov	r1, r7
 80173f6:	f7e9 f97b 	bl	80006f0 <__aeabi_dmul>
 80173fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80173fe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017402:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017406:	2300      	movs	r3, #0
 8017408:	9302      	str	r3, [sp, #8]
 801740a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801740e:	106d      	asrs	r5, r5, #1
 8017410:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017414:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017418:	2200      	movs	r2, #0
 801741a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801741e:	4640      	mov	r0, r8
 8017420:	4649      	mov	r1, r9
 8017422:	4614      	mov	r4, r2
 8017424:	461d      	mov	r5, r3
 8017426:	f7e9 f963 	bl	80006f0 <__aeabi_dmul>
 801742a:	4602      	mov	r2, r0
 801742c:	460b      	mov	r3, r1
 801742e:	4630      	mov	r0, r6
 8017430:	4639      	mov	r1, r7
 8017432:	f7e8 ffa9 	bl	8000388 <__aeabi_dsub>
 8017436:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801743a:	4606      	mov	r6, r0
 801743c:	460f      	mov	r7, r1
 801743e:	4620      	mov	r0, r4
 8017440:	4629      	mov	r1, r5
 8017442:	f7e8 ffa1 	bl	8000388 <__aeabi_dsub>
 8017446:	4602      	mov	r2, r0
 8017448:	460b      	mov	r3, r1
 801744a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801744e:	f7e8 ff9b 	bl	8000388 <__aeabi_dsub>
 8017452:	4642      	mov	r2, r8
 8017454:	464b      	mov	r3, r9
 8017456:	f7e9 f94b 	bl	80006f0 <__aeabi_dmul>
 801745a:	4602      	mov	r2, r0
 801745c:	460b      	mov	r3, r1
 801745e:	4630      	mov	r0, r6
 8017460:	4639      	mov	r1, r7
 8017462:	f7e8 ff91 	bl	8000388 <__aeabi_dsub>
 8017466:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801746a:	f7e9 f941 	bl	80006f0 <__aeabi_dmul>
 801746e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017472:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017476:	4610      	mov	r0, r2
 8017478:	4619      	mov	r1, r3
 801747a:	f7e9 f939 	bl	80006f0 <__aeabi_dmul>
 801747e:	a380      	add	r3, pc, #512	; (adr r3, 8017680 <__ieee754_pow+0x620>)
 8017480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017484:	4604      	mov	r4, r0
 8017486:	460d      	mov	r5, r1
 8017488:	f7e9 f932 	bl	80006f0 <__aeabi_dmul>
 801748c:	a37e      	add	r3, pc, #504	; (adr r3, 8017688 <__ieee754_pow+0x628>)
 801748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017492:	f7e8 ff7b 	bl	800038c <__adddf3>
 8017496:	4622      	mov	r2, r4
 8017498:	462b      	mov	r3, r5
 801749a:	f7e9 f929 	bl	80006f0 <__aeabi_dmul>
 801749e:	a37c      	add	r3, pc, #496	; (adr r3, 8017690 <__ieee754_pow+0x630>)
 80174a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a4:	f7e8 ff72 	bl	800038c <__adddf3>
 80174a8:	4622      	mov	r2, r4
 80174aa:	462b      	mov	r3, r5
 80174ac:	f7e9 f920 	bl	80006f0 <__aeabi_dmul>
 80174b0:	a379      	add	r3, pc, #484	; (adr r3, 8017698 <__ieee754_pow+0x638>)
 80174b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174b6:	f7e8 ff69 	bl	800038c <__adddf3>
 80174ba:	4622      	mov	r2, r4
 80174bc:	462b      	mov	r3, r5
 80174be:	f7e9 f917 	bl	80006f0 <__aeabi_dmul>
 80174c2:	a377      	add	r3, pc, #476	; (adr r3, 80176a0 <__ieee754_pow+0x640>)
 80174c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c8:	f7e8 ff60 	bl	800038c <__adddf3>
 80174cc:	4622      	mov	r2, r4
 80174ce:	462b      	mov	r3, r5
 80174d0:	f7e9 f90e 	bl	80006f0 <__aeabi_dmul>
 80174d4:	a374      	add	r3, pc, #464	; (adr r3, 80176a8 <__ieee754_pow+0x648>)
 80174d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174da:	f7e8 ff57 	bl	800038c <__adddf3>
 80174de:	4622      	mov	r2, r4
 80174e0:	4606      	mov	r6, r0
 80174e2:	460f      	mov	r7, r1
 80174e4:	462b      	mov	r3, r5
 80174e6:	4620      	mov	r0, r4
 80174e8:	4629      	mov	r1, r5
 80174ea:	f7e9 f901 	bl	80006f0 <__aeabi_dmul>
 80174ee:	4602      	mov	r2, r0
 80174f0:	460b      	mov	r3, r1
 80174f2:	4630      	mov	r0, r6
 80174f4:	4639      	mov	r1, r7
 80174f6:	f7e9 f8fb 	bl	80006f0 <__aeabi_dmul>
 80174fa:	4642      	mov	r2, r8
 80174fc:	4604      	mov	r4, r0
 80174fe:	460d      	mov	r5, r1
 8017500:	464b      	mov	r3, r9
 8017502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017506:	f7e8 ff41 	bl	800038c <__adddf3>
 801750a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801750e:	f7e9 f8ef 	bl	80006f0 <__aeabi_dmul>
 8017512:	4622      	mov	r2, r4
 8017514:	462b      	mov	r3, r5
 8017516:	f7e8 ff39 	bl	800038c <__adddf3>
 801751a:	4642      	mov	r2, r8
 801751c:	4606      	mov	r6, r0
 801751e:	460f      	mov	r7, r1
 8017520:	464b      	mov	r3, r9
 8017522:	4640      	mov	r0, r8
 8017524:	4649      	mov	r1, r9
 8017526:	f7e9 f8e3 	bl	80006f0 <__aeabi_dmul>
 801752a:	2200      	movs	r2, #0
 801752c:	4b6a      	ldr	r3, [pc, #424]	; (80176d8 <__ieee754_pow+0x678>)
 801752e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017532:	f7e8 ff2b 	bl	800038c <__adddf3>
 8017536:	4632      	mov	r2, r6
 8017538:	463b      	mov	r3, r7
 801753a:	f7e8 ff27 	bl	800038c <__adddf3>
 801753e:	9802      	ldr	r0, [sp, #8]
 8017540:	460d      	mov	r5, r1
 8017542:	4604      	mov	r4, r0
 8017544:	4602      	mov	r2, r0
 8017546:	460b      	mov	r3, r1
 8017548:	4640      	mov	r0, r8
 801754a:	4649      	mov	r1, r9
 801754c:	f7e9 f8d0 	bl	80006f0 <__aeabi_dmul>
 8017550:	2200      	movs	r2, #0
 8017552:	4680      	mov	r8, r0
 8017554:	4689      	mov	r9, r1
 8017556:	4b60      	ldr	r3, [pc, #384]	; (80176d8 <__ieee754_pow+0x678>)
 8017558:	4620      	mov	r0, r4
 801755a:	4629      	mov	r1, r5
 801755c:	f7e8 ff14 	bl	8000388 <__aeabi_dsub>
 8017560:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017564:	f7e8 ff10 	bl	8000388 <__aeabi_dsub>
 8017568:	4602      	mov	r2, r0
 801756a:	460b      	mov	r3, r1
 801756c:	4630      	mov	r0, r6
 801756e:	4639      	mov	r1, r7
 8017570:	f7e8 ff0a 	bl	8000388 <__aeabi_dsub>
 8017574:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017578:	f7e9 f8ba 	bl	80006f0 <__aeabi_dmul>
 801757c:	4622      	mov	r2, r4
 801757e:	4606      	mov	r6, r0
 8017580:	460f      	mov	r7, r1
 8017582:	462b      	mov	r3, r5
 8017584:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017588:	f7e9 f8b2 	bl	80006f0 <__aeabi_dmul>
 801758c:	4602      	mov	r2, r0
 801758e:	460b      	mov	r3, r1
 8017590:	4630      	mov	r0, r6
 8017592:	4639      	mov	r1, r7
 8017594:	f7e8 fefa 	bl	800038c <__adddf3>
 8017598:	4606      	mov	r6, r0
 801759a:	460f      	mov	r7, r1
 801759c:	4602      	mov	r2, r0
 801759e:	460b      	mov	r3, r1
 80175a0:	4640      	mov	r0, r8
 80175a2:	4649      	mov	r1, r9
 80175a4:	f7e8 fef2 	bl	800038c <__adddf3>
 80175a8:	9802      	ldr	r0, [sp, #8]
 80175aa:	a341      	add	r3, pc, #260	; (adr r3, 80176b0 <__ieee754_pow+0x650>)
 80175ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b0:	4604      	mov	r4, r0
 80175b2:	460d      	mov	r5, r1
 80175b4:	f7e9 f89c 	bl	80006f0 <__aeabi_dmul>
 80175b8:	4642      	mov	r2, r8
 80175ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80175be:	464b      	mov	r3, r9
 80175c0:	4620      	mov	r0, r4
 80175c2:	4629      	mov	r1, r5
 80175c4:	f7e8 fee0 	bl	8000388 <__aeabi_dsub>
 80175c8:	4602      	mov	r2, r0
 80175ca:	460b      	mov	r3, r1
 80175cc:	4630      	mov	r0, r6
 80175ce:	4639      	mov	r1, r7
 80175d0:	f7e8 feda 	bl	8000388 <__aeabi_dsub>
 80175d4:	a338      	add	r3, pc, #224	; (adr r3, 80176b8 <__ieee754_pow+0x658>)
 80175d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175da:	f7e9 f889 	bl	80006f0 <__aeabi_dmul>
 80175de:	a338      	add	r3, pc, #224	; (adr r3, 80176c0 <__ieee754_pow+0x660>)
 80175e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e4:	4606      	mov	r6, r0
 80175e6:	460f      	mov	r7, r1
 80175e8:	4620      	mov	r0, r4
 80175ea:	4629      	mov	r1, r5
 80175ec:	f7e9 f880 	bl	80006f0 <__aeabi_dmul>
 80175f0:	4602      	mov	r2, r0
 80175f2:	460b      	mov	r3, r1
 80175f4:	4630      	mov	r0, r6
 80175f6:	4639      	mov	r1, r7
 80175f8:	f7e8 fec8 	bl	800038c <__adddf3>
 80175fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80175fe:	4b37      	ldr	r3, [pc, #220]	; (80176dc <__ieee754_pow+0x67c>)
 8017600:	4413      	add	r3, r2
 8017602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017606:	f7e8 fec1 	bl	800038c <__adddf3>
 801760a:	4604      	mov	r4, r0
 801760c:	9807      	ldr	r0, [sp, #28]
 801760e:	460d      	mov	r5, r1
 8017610:	f7e9 f808 	bl	8000624 <__aeabi_i2d>
 8017614:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017616:	4b32      	ldr	r3, [pc, #200]	; (80176e0 <__ieee754_pow+0x680>)
 8017618:	4413      	add	r3, r2
 801761a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801761e:	4606      	mov	r6, r0
 8017620:	460f      	mov	r7, r1
 8017622:	4622      	mov	r2, r4
 8017624:	462b      	mov	r3, r5
 8017626:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801762a:	f7e8 feaf 	bl	800038c <__adddf3>
 801762e:	4642      	mov	r2, r8
 8017630:	464b      	mov	r3, r9
 8017632:	f7e8 feab 	bl	800038c <__adddf3>
 8017636:	4632      	mov	r2, r6
 8017638:	463b      	mov	r3, r7
 801763a:	f7e8 fea7 	bl	800038c <__adddf3>
 801763e:	9802      	ldr	r0, [sp, #8]
 8017640:	4632      	mov	r2, r6
 8017642:	463b      	mov	r3, r7
 8017644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017648:	f7e8 fe9e 	bl	8000388 <__aeabi_dsub>
 801764c:	4642      	mov	r2, r8
 801764e:	464b      	mov	r3, r9
 8017650:	f7e8 fe9a 	bl	8000388 <__aeabi_dsub>
 8017654:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017658:	f7e8 fe96 	bl	8000388 <__aeabi_dsub>
 801765c:	4602      	mov	r2, r0
 801765e:	460b      	mov	r3, r1
 8017660:	4620      	mov	r0, r4
 8017662:	4629      	mov	r1, r5
 8017664:	f7e8 fe90 	bl	8000388 <__aeabi_dsub>
 8017668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801766a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801766e:	4313      	orrs	r3, r2
 8017670:	4606      	mov	r6, r0
 8017672:	460f      	mov	r7, r1
 8017674:	d136      	bne.n	80176e4 <__ieee754_pow+0x684>
 8017676:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80176c8 <__ieee754_pow+0x668>
 801767a:	e035      	b.n	80176e8 <__ieee754_pow+0x688>
 801767c:	f3af 8000 	nop.w
 8017680:	4a454eef 	.word	0x4a454eef
 8017684:	3fca7e28 	.word	0x3fca7e28
 8017688:	93c9db65 	.word	0x93c9db65
 801768c:	3fcd864a 	.word	0x3fcd864a
 8017690:	a91d4101 	.word	0xa91d4101
 8017694:	3fd17460 	.word	0x3fd17460
 8017698:	518f264d 	.word	0x518f264d
 801769c:	3fd55555 	.word	0x3fd55555
 80176a0:	db6fabff 	.word	0xdb6fabff
 80176a4:	3fdb6db6 	.word	0x3fdb6db6
 80176a8:	33333303 	.word	0x33333303
 80176ac:	3fe33333 	.word	0x3fe33333
 80176b0:	e0000000 	.word	0xe0000000
 80176b4:	3feec709 	.word	0x3feec709
 80176b8:	dc3a03fd 	.word	0xdc3a03fd
 80176bc:	3feec709 	.word	0x3feec709
 80176c0:	145b01f5 	.word	0x145b01f5
 80176c4:	be3e2fe0 	.word	0xbe3e2fe0
 80176c8:	00000000 	.word	0x00000000
 80176cc:	bff00000 	.word	0xbff00000
 80176d0:	0802ff90 	.word	0x0802ff90
 80176d4:	3ff00000 	.word	0x3ff00000
 80176d8:	40080000 	.word	0x40080000
 80176dc:	0802ff80 	.word	0x0802ff80
 80176e0:	0802ff70 	.word	0x0802ff70
 80176e4:	ed9f 7bc0 	vldr	d7, [pc, #768]	; 80179e8 <__ieee754_pow+0x988>
 80176e8:	e9dd 4500 	ldrd	r4, r5, [sp]
 80176ec:	2400      	movs	r4, #0
 80176ee:	4622      	mov	r2, r4
 80176f0:	462b      	mov	r3, r5
 80176f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80176fa:	f7e8 fe45 	bl	8000388 <__aeabi_dsub>
 80176fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017702:	f7e8 fff5 	bl	80006f0 <__aeabi_dmul>
 8017706:	e9dd 2300 	ldrd	r2, r3, [sp]
 801770a:	4680      	mov	r8, r0
 801770c:	4689      	mov	r9, r1
 801770e:	4630      	mov	r0, r6
 8017710:	4639      	mov	r1, r7
 8017712:	f7e8 ffed 	bl	80006f0 <__aeabi_dmul>
 8017716:	4602      	mov	r2, r0
 8017718:	460b      	mov	r3, r1
 801771a:	4640      	mov	r0, r8
 801771c:	4649      	mov	r1, r9
 801771e:	f7e8 fe35 	bl	800038c <__adddf3>
 8017722:	4622      	mov	r2, r4
 8017724:	462b      	mov	r3, r5
 8017726:	4680      	mov	r8, r0
 8017728:	4689      	mov	r9, r1
 801772a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801772e:	f7e8 ffdf 	bl	80006f0 <__aeabi_dmul>
 8017732:	460b      	mov	r3, r1
 8017734:	4604      	mov	r4, r0
 8017736:	460d      	mov	r5, r1
 8017738:	4602      	mov	r2, r0
 801773a:	4649      	mov	r1, r9
 801773c:	4640      	mov	r0, r8
 801773e:	e9cd 4500 	strd	r4, r5, [sp]
 8017742:	f7e8 fe23 	bl	800038c <__adddf3>
 8017746:	4bc0      	ldr	r3, [pc, #768]	; (8017a48 <__ieee754_pow+0x9e8>)
 8017748:	4299      	cmp	r1, r3
 801774a:	4606      	mov	r6, r0
 801774c:	460f      	mov	r7, r1
 801774e:	468b      	mov	fp, r1
 8017750:	dd26      	ble.n	80177a0 <__ieee754_pow+0x740>
 8017752:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017756:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801775a:	4303      	orrs	r3, r0
 801775c:	d115      	bne.n	801778a <__ieee754_pow+0x72a>
 801775e:	a3a4      	add	r3, pc, #656	; (adr r3, 80179f0 <__ieee754_pow+0x990>)
 8017760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017764:	4640      	mov	r0, r8
 8017766:	4649      	mov	r1, r9
 8017768:	f7e8 fe10 	bl	800038c <__adddf3>
 801776c:	4622      	mov	r2, r4
 801776e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017772:	462b      	mov	r3, r5
 8017774:	4630      	mov	r0, r6
 8017776:	4639      	mov	r1, r7
 8017778:	f7e8 fe06 	bl	8000388 <__aeabi_dsub>
 801777c:	4602      	mov	r2, r0
 801777e:	460b      	mov	r3, r1
 8017780:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017784:	f7e9 fa44 	bl	8000c10 <__aeabi_dcmpgt>
 8017788:	b348      	cbz	r0, 80177de <__ieee754_pow+0x77e>
 801778a:	a39b      	add	r3, pc, #620	; (adr r3, 80179f8 <__ieee754_pow+0x998>)
 801778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017794:	f7e8 ffac 	bl	80006f0 <__aeabi_dmul>
 8017798:	a397      	add	r3, pc, #604	; (adr r3, 80179f8 <__ieee754_pow+0x998>)
 801779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801779e:	e54f      	b.n	8017240 <__ieee754_pow+0x1e0>
 80177a0:	4baa      	ldr	r3, [pc, #680]	; (8017a4c <__ieee754_pow+0x9ec>)
 80177a2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80177a6:	429e      	cmp	r6, r3
 80177a8:	dd19      	ble.n	80177de <__ieee754_pow+0x77e>
 80177aa:	4ba9      	ldr	r3, [pc, #676]	; (8017a50 <__ieee754_pow+0x9f0>)
 80177ac:	440b      	add	r3, r1
 80177ae:	4303      	orrs	r3, r0
 80177b0:	d10a      	bne.n	80177c8 <__ieee754_pow+0x768>
 80177b2:	4622      	mov	r2, r4
 80177b4:	462b      	mov	r3, r5
 80177b6:	f7e8 fde7 	bl	8000388 <__aeabi_dsub>
 80177ba:	4602      	mov	r2, r0
 80177bc:	460b      	mov	r3, r1
 80177be:	4640      	mov	r0, r8
 80177c0:	4649      	mov	r1, r9
 80177c2:	f7e9 fa11 	bl	8000be8 <__aeabi_dcmple>
 80177c6:	b150      	cbz	r0, 80177de <__ieee754_pow+0x77e>
 80177c8:	a38d      	add	r3, pc, #564	; (adr r3, 8017a00 <__ieee754_pow+0x9a0>)
 80177ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80177d2:	f7e8 ff8d 	bl	80006f0 <__aeabi_dmul>
 80177d6:	a38a      	add	r3, pc, #552	; (adr r3, 8017a00 <__ieee754_pow+0x9a0>)
 80177d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177dc:	e530      	b.n	8017240 <__ieee754_pow+0x1e0>
 80177de:	4a9d      	ldr	r2, [pc, #628]	; (8017a54 <__ieee754_pow+0x9f4>)
 80177e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80177e4:	4293      	cmp	r3, r2
 80177e6:	dd26      	ble.n	8017836 <__ieee754_pow+0x7d6>
 80177e8:	151b      	asrs	r3, r3, #20
 80177ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80177ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80177f2:	fa4a f303 	asr.w	r3, sl, r3
 80177f6:	445b      	add	r3, fp
 80177f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80177fc:	4e96      	ldr	r6, [pc, #600]	; (8017a58 <__ieee754_pow+0x9f8>)
 80177fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017802:	4116      	asrs	r6, r2
 8017804:	ea23 0106 	bic.w	r1, r3, r6
 8017808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801780c:	ea43 030a 	orr.w	r3, r3, sl
 8017810:	2000      	movs	r0, #0
 8017812:	f1c2 0a14 	rsb	sl, r2, #20
 8017816:	fa43 fa0a 	asr.w	sl, r3, sl
 801781a:	f1bb 0f00 	cmp.w	fp, #0
 801781e:	4602      	mov	r2, r0
 8017820:	460b      	mov	r3, r1
 8017822:	4620      	mov	r0, r4
 8017824:	4629      	mov	r1, r5
 8017826:	bfb8      	it	lt
 8017828:	f1ca 0a00 	rsblt	sl, sl, #0
 801782c:	f7e8 fdac 	bl	8000388 <__aeabi_dsub>
 8017830:	e9cd 0100 	strd	r0, r1, [sp]
 8017834:	e001      	b.n	801783a <__ieee754_pow+0x7da>
 8017836:	f04f 0a00 	mov.w	sl, #0
 801783a:	4642      	mov	r2, r8
 801783c:	464b      	mov	r3, r9
 801783e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017842:	f7e8 fda3 	bl	800038c <__adddf3>
 8017846:	2000      	movs	r0, #0
 8017848:	a36f      	add	r3, pc, #444	; (adr r3, 8017a08 <__ieee754_pow+0x9a8>)
 801784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801784e:	4604      	mov	r4, r0
 8017850:	460d      	mov	r5, r1
 8017852:	f7e8 ff4d 	bl	80006f0 <__aeabi_dmul>
 8017856:	e9dd 2300 	ldrd	r2, r3, [sp]
 801785a:	4606      	mov	r6, r0
 801785c:	460f      	mov	r7, r1
 801785e:	4620      	mov	r0, r4
 8017860:	4629      	mov	r1, r5
 8017862:	f7e8 fd91 	bl	8000388 <__aeabi_dsub>
 8017866:	4602      	mov	r2, r0
 8017868:	460b      	mov	r3, r1
 801786a:	4640      	mov	r0, r8
 801786c:	4649      	mov	r1, r9
 801786e:	f7e8 fd8b 	bl	8000388 <__aeabi_dsub>
 8017872:	a367      	add	r3, pc, #412	; (adr r3, 8017a10 <__ieee754_pow+0x9b0>)
 8017874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017878:	f7e8 ff3a 	bl	80006f0 <__aeabi_dmul>
 801787c:	a366      	add	r3, pc, #408	; (adr r3, 8017a18 <__ieee754_pow+0x9b8>)
 801787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017882:	4680      	mov	r8, r0
 8017884:	4689      	mov	r9, r1
 8017886:	4620      	mov	r0, r4
 8017888:	4629      	mov	r1, r5
 801788a:	f7e8 ff31 	bl	80006f0 <__aeabi_dmul>
 801788e:	4602      	mov	r2, r0
 8017890:	460b      	mov	r3, r1
 8017892:	4640      	mov	r0, r8
 8017894:	4649      	mov	r1, r9
 8017896:	f7e8 fd79 	bl	800038c <__adddf3>
 801789a:	4604      	mov	r4, r0
 801789c:	460d      	mov	r5, r1
 801789e:	4602      	mov	r2, r0
 80178a0:	460b      	mov	r3, r1
 80178a2:	4630      	mov	r0, r6
 80178a4:	4639      	mov	r1, r7
 80178a6:	f7e8 fd71 	bl	800038c <__adddf3>
 80178aa:	4632      	mov	r2, r6
 80178ac:	463b      	mov	r3, r7
 80178ae:	4680      	mov	r8, r0
 80178b0:	4689      	mov	r9, r1
 80178b2:	f7e8 fd69 	bl	8000388 <__aeabi_dsub>
 80178b6:	4602      	mov	r2, r0
 80178b8:	460b      	mov	r3, r1
 80178ba:	4620      	mov	r0, r4
 80178bc:	4629      	mov	r1, r5
 80178be:	f7e8 fd63 	bl	8000388 <__aeabi_dsub>
 80178c2:	4642      	mov	r2, r8
 80178c4:	4606      	mov	r6, r0
 80178c6:	460f      	mov	r7, r1
 80178c8:	464b      	mov	r3, r9
 80178ca:	4640      	mov	r0, r8
 80178cc:	4649      	mov	r1, r9
 80178ce:	f7e8 ff0f 	bl	80006f0 <__aeabi_dmul>
 80178d2:	a353      	add	r3, pc, #332	; (adr r3, 8017a20 <__ieee754_pow+0x9c0>)
 80178d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d8:	4604      	mov	r4, r0
 80178da:	460d      	mov	r5, r1
 80178dc:	f7e8 ff08 	bl	80006f0 <__aeabi_dmul>
 80178e0:	a351      	add	r3, pc, #324	; (adr r3, 8017a28 <__ieee754_pow+0x9c8>)
 80178e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e6:	f7e8 fd4f 	bl	8000388 <__aeabi_dsub>
 80178ea:	4622      	mov	r2, r4
 80178ec:	462b      	mov	r3, r5
 80178ee:	f7e8 feff 	bl	80006f0 <__aeabi_dmul>
 80178f2:	a34f      	add	r3, pc, #316	; (adr r3, 8017a30 <__ieee754_pow+0x9d0>)
 80178f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f8:	f7e8 fd48 	bl	800038c <__adddf3>
 80178fc:	4622      	mov	r2, r4
 80178fe:	462b      	mov	r3, r5
 8017900:	f7e8 fef6 	bl	80006f0 <__aeabi_dmul>
 8017904:	a34c      	add	r3, pc, #304	; (adr r3, 8017a38 <__ieee754_pow+0x9d8>)
 8017906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801790a:	f7e8 fd3d 	bl	8000388 <__aeabi_dsub>
 801790e:	4622      	mov	r2, r4
 8017910:	462b      	mov	r3, r5
 8017912:	f7e8 feed 	bl	80006f0 <__aeabi_dmul>
 8017916:	a34a      	add	r3, pc, #296	; (adr r3, 8017a40 <__ieee754_pow+0x9e0>)
 8017918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801791c:	f7e8 fd36 	bl	800038c <__adddf3>
 8017920:	4622      	mov	r2, r4
 8017922:	462b      	mov	r3, r5
 8017924:	f7e8 fee4 	bl	80006f0 <__aeabi_dmul>
 8017928:	4602      	mov	r2, r0
 801792a:	460b      	mov	r3, r1
 801792c:	4640      	mov	r0, r8
 801792e:	4649      	mov	r1, r9
 8017930:	f7e8 fd2a 	bl	8000388 <__aeabi_dsub>
 8017934:	4604      	mov	r4, r0
 8017936:	460d      	mov	r5, r1
 8017938:	4602      	mov	r2, r0
 801793a:	460b      	mov	r3, r1
 801793c:	4640      	mov	r0, r8
 801793e:	4649      	mov	r1, r9
 8017940:	f7e8 fed6 	bl	80006f0 <__aeabi_dmul>
 8017944:	2200      	movs	r2, #0
 8017946:	e9cd 0100 	strd	r0, r1, [sp]
 801794a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801794e:	4620      	mov	r0, r4
 8017950:	4629      	mov	r1, r5
 8017952:	f7e8 fd19 	bl	8000388 <__aeabi_dsub>
 8017956:	4602      	mov	r2, r0
 8017958:	460b      	mov	r3, r1
 801795a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801795e:	f7e8 fff1 	bl	8000944 <__aeabi_ddiv>
 8017962:	4632      	mov	r2, r6
 8017964:	4604      	mov	r4, r0
 8017966:	460d      	mov	r5, r1
 8017968:	463b      	mov	r3, r7
 801796a:	4640      	mov	r0, r8
 801796c:	4649      	mov	r1, r9
 801796e:	f7e8 febf 	bl	80006f0 <__aeabi_dmul>
 8017972:	4632      	mov	r2, r6
 8017974:	463b      	mov	r3, r7
 8017976:	f7e8 fd09 	bl	800038c <__adddf3>
 801797a:	4602      	mov	r2, r0
 801797c:	460b      	mov	r3, r1
 801797e:	4620      	mov	r0, r4
 8017980:	4629      	mov	r1, r5
 8017982:	f7e8 fd01 	bl	8000388 <__aeabi_dsub>
 8017986:	4642      	mov	r2, r8
 8017988:	464b      	mov	r3, r9
 801798a:	f7e8 fcfd 	bl	8000388 <__aeabi_dsub>
 801798e:	4602      	mov	r2, r0
 8017990:	460b      	mov	r3, r1
 8017992:	2000      	movs	r0, #0
 8017994:	4931      	ldr	r1, [pc, #196]	; (8017a5c <__ieee754_pow+0x9fc>)
 8017996:	f7e8 fcf7 	bl	8000388 <__aeabi_dsub>
 801799a:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801799e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80179a2:	4602      	mov	r2, r0
 80179a4:	460b      	mov	r3, r1
 80179a6:	da07      	bge.n	80179b8 <__ieee754_pow+0x958>
 80179a8:	4650      	mov	r0, sl
 80179aa:	ec43 2b10 	vmov	d0, r2, r3
 80179ae:	f000 f9fb 	bl	8017da8 <scalbn>
 80179b2:	ec51 0b10 	vmov	r0, r1, d0
 80179b6:	e000      	b.n	80179ba <__ieee754_pow+0x95a>
 80179b8:	4621      	mov	r1, r4
 80179ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80179be:	e43f      	b.n	8017240 <__ieee754_pow+0x1e0>
 80179c0:	2000      	movs	r0, #0
 80179c2:	4926      	ldr	r1, [pc, #152]	; (8017a5c <__ieee754_pow+0x9fc>)
 80179c4:	e00a      	b.n	80179dc <__ieee754_pow+0x97c>
 80179c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179ca:	e007      	b.n	80179dc <__ieee754_pow+0x97c>
 80179cc:	4630      	mov	r0, r6
 80179ce:	4639      	mov	r1, r7
 80179d0:	e004      	b.n	80179dc <__ieee754_pow+0x97c>
 80179d2:	45a0      	cmp	r8, r4
 80179d4:	f73f ab6c 	bgt.w	80170b0 <__ieee754_pow+0x50>
 80179d8:	f7ff bb5f 	b.w	801709a <__ieee754_pow+0x3a>
 80179dc:	ec41 0b10 	vmov	d0, r0, r1
 80179e0:	b011      	add	sp, #68	; 0x44
 80179e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179e6:	bf00      	nop
 80179e8:	00000000 	.word	0x00000000
 80179ec:	3ff00000 	.word	0x3ff00000
 80179f0:	652b82fe 	.word	0x652b82fe
 80179f4:	3c971547 	.word	0x3c971547
 80179f8:	8800759c 	.word	0x8800759c
 80179fc:	7e37e43c 	.word	0x7e37e43c
 8017a00:	c2f8f359 	.word	0xc2f8f359
 8017a04:	01a56e1f 	.word	0x01a56e1f
 8017a08:	00000000 	.word	0x00000000
 8017a0c:	3fe62e43 	.word	0x3fe62e43
 8017a10:	fefa39ef 	.word	0xfefa39ef
 8017a14:	3fe62e42 	.word	0x3fe62e42
 8017a18:	0ca86c39 	.word	0x0ca86c39
 8017a1c:	be205c61 	.word	0xbe205c61
 8017a20:	72bea4d0 	.word	0x72bea4d0
 8017a24:	3e663769 	.word	0x3e663769
 8017a28:	c5d26bf1 	.word	0xc5d26bf1
 8017a2c:	3ebbbd41 	.word	0x3ebbbd41
 8017a30:	af25de2c 	.word	0xaf25de2c
 8017a34:	3f11566a 	.word	0x3f11566a
 8017a38:	16bebd93 	.word	0x16bebd93
 8017a3c:	3f66c16c 	.word	0x3f66c16c
 8017a40:	5555553e 	.word	0x5555553e
 8017a44:	3fc55555 	.word	0x3fc55555
 8017a48:	408fffff 	.word	0x408fffff
 8017a4c:	4090cbff 	.word	0x4090cbff
 8017a50:	3f6f3400 	.word	0x3f6f3400
 8017a54:	3fe00000 	.word	0x3fe00000
 8017a58:	000fffff 	.word	0x000fffff
 8017a5c:	3ff00000 	.word	0x3ff00000

08017a60 <__ieee754_sqrt>:
 8017a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a64:	4957      	ldr	r1, [pc, #348]	; (8017bc4 <__ieee754_sqrt+0x164>)
 8017a66:	4f57      	ldr	r7, [pc, #348]	; (8017bc4 <__ieee754_sqrt+0x164>)
 8017a68:	ec55 4b10 	vmov	r4, r5, d0
 8017a6c:	4029      	ands	r1, r5
 8017a6e:	42b9      	cmp	r1, r7
 8017a70:	462a      	mov	r2, r5
 8017a72:	462b      	mov	r3, r5
 8017a74:	4626      	mov	r6, r4
 8017a76:	d10c      	bne.n	8017a92 <__ieee754_sqrt+0x32>
 8017a78:	ee10 2a10 	vmov	r2, s0
 8017a7c:	462b      	mov	r3, r5
 8017a7e:	ee10 0a10 	vmov	r0, s0
 8017a82:	4629      	mov	r1, r5
 8017a84:	f7e8 fe34 	bl	80006f0 <__aeabi_dmul>
 8017a88:	4622      	mov	r2, r4
 8017a8a:	462b      	mov	r3, r5
 8017a8c:	f7e8 fc7e 	bl	800038c <__adddf3>
 8017a90:	e094      	b.n	8017bbc <__ieee754_sqrt+0x15c>
 8017a92:	2d00      	cmp	r5, #0
 8017a94:	dc11      	bgt.n	8017aba <__ieee754_sqrt+0x5a>
 8017a96:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8017a9a:	4321      	orrs	r1, r4
 8017a9c:	f000 808b 	beq.w	8017bb6 <__ieee754_sqrt+0x156>
 8017aa0:	b15d      	cbz	r5, 8017aba <__ieee754_sqrt+0x5a>
 8017aa2:	ee10 2a10 	vmov	r2, s0
 8017aa6:	462b      	mov	r3, r5
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	4629      	mov	r1, r5
 8017aac:	f7e8 fc6c 	bl	8000388 <__aeabi_dsub>
 8017ab0:	4602      	mov	r2, r0
 8017ab2:	460b      	mov	r3, r1
 8017ab4:	f7e8 ff46 	bl	8000944 <__aeabi_ddiv>
 8017ab8:	e080      	b.n	8017bbc <__ieee754_sqrt+0x15c>
 8017aba:	1512      	asrs	r2, r2, #20
 8017abc:	d112      	bne.n	8017ae4 <__ieee754_sqrt+0x84>
 8017abe:	b91b      	cbnz	r3, 8017ac8 <__ieee754_sqrt+0x68>
 8017ac0:	0af3      	lsrs	r3, r6, #11
 8017ac2:	3a15      	subs	r2, #21
 8017ac4:	0576      	lsls	r6, r6, #21
 8017ac6:	e7fa      	b.n	8017abe <__ieee754_sqrt+0x5e>
 8017ac8:	2100      	movs	r1, #0
 8017aca:	02d8      	lsls	r0, r3, #11
 8017acc:	d402      	bmi.n	8017ad4 <__ieee754_sqrt+0x74>
 8017ace:	005b      	lsls	r3, r3, #1
 8017ad0:	3101      	adds	r1, #1
 8017ad2:	e7fa      	b.n	8017aca <__ieee754_sqrt+0x6a>
 8017ad4:	1e48      	subs	r0, r1, #1
 8017ad6:	1a12      	subs	r2, r2, r0
 8017ad8:	f1c1 0020 	rsb	r0, r1, #32
 8017adc:	fa26 f000 	lsr.w	r0, r6, r0
 8017ae0:	4303      	orrs	r3, r0
 8017ae2:	408e      	lsls	r6, r1
 8017ae4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017aec:	07d1      	lsls	r1, r2, #31
 8017aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017af2:	bf42      	ittt	mi
 8017af4:	005b      	lslmi	r3, r3, #1
 8017af6:	eb03 73d6 	addmi.w	r3, r3, r6, lsr #31
 8017afa:	0076      	lslmi	r6, r6, #1
 8017afc:	1055      	asrs	r5, r2, #1
 8017afe:	f04f 0e00 	mov.w	lr, #0
 8017b02:	eb03 72d6 	add.w	r2, r3, r6, lsr #31
 8017b06:	4413      	add	r3, r2
 8017b08:	0076      	lsls	r6, r6, #1
 8017b0a:	2216      	movs	r2, #22
 8017b0c:	4677      	mov	r7, lr
 8017b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8017b12:	1878      	adds	r0, r7, r1
 8017b14:	4298      	cmp	r0, r3
 8017b16:	bfde      	ittt	le
 8017b18:	1a1b      	suble	r3, r3, r0
 8017b1a:	1847      	addle	r7, r0, r1
 8017b1c:	448e      	addle	lr, r1
 8017b1e:	005b      	lsls	r3, r3, #1
 8017b20:	3a01      	subs	r2, #1
 8017b22:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 8017b26:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8017b2a:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8017b2e:	d1f0      	bne.n	8017b12 <__ieee754_sqrt+0xb2>
 8017b30:	2420      	movs	r4, #32
 8017b32:	4694      	mov	ip, r2
 8017b34:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8017b38:	429f      	cmp	r7, r3
 8017b3a:	eb01 000c 	add.w	r0, r1, ip
 8017b3e:	db02      	blt.n	8017b46 <__ieee754_sqrt+0xe6>
 8017b40:	d116      	bne.n	8017b70 <__ieee754_sqrt+0x110>
 8017b42:	42b0      	cmp	r0, r6
 8017b44:	d813      	bhi.n	8017b6e <__ieee754_sqrt+0x10e>
 8017b46:	2800      	cmp	r0, #0
 8017b48:	eb00 0c01 	add.w	ip, r0, r1
 8017b4c:	da05      	bge.n	8017b5a <__ieee754_sqrt+0xfa>
 8017b4e:	f1bc 0f00 	cmp.w	ip, #0
 8017b52:	db02      	blt.n	8017b5a <__ieee754_sqrt+0xfa>
 8017b54:	f107 0801 	add.w	r8, r7, #1
 8017b58:	e000      	b.n	8017b5c <__ieee754_sqrt+0xfc>
 8017b5a:	46b8      	mov	r8, r7
 8017b5c:	1bdb      	subs	r3, r3, r7
 8017b5e:	42b0      	cmp	r0, r6
 8017b60:	bf88      	it	hi
 8017b62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8017b66:	1a36      	subs	r6, r6, r0
 8017b68:	440a      	add	r2, r1
 8017b6a:	4647      	mov	r7, r8
 8017b6c:	e000      	b.n	8017b70 <__ieee754_sqrt+0x110>
 8017b6e:	463b      	mov	r3, r7
 8017b70:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 8017b74:	3c01      	subs	r4, #1
 8017b76:	4403      	add	r3, r0
 8017b78:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8017b7c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8017b80:	d1da      	bne.n	8017b38 <__ieee754_sqrt+0xd8>
 8017b82:	4333      	orrs	r3, r6
 8017b84:	d007      	beq.n	8017b96 <__ieee754_sqrt+0x136>
 8017b86:	1c53      	adds	r3, r2, #1
 8017b88:	bf13      	iteet	ne
 8017b8a:	f002 0301 	andne.w	r3, r2, #1
 8017b8e:	f10e 0e01 	addeq.w	lr, lr, #1
 8017b92:	4622      	moveq	r2, r4
 8017b94:	18d2      	addne	r2, r2, r3
 8017b96:	ea4f 046e 	mov.w	r4, lr, asr #1
 8017b9a:	0853      	lsrs	r3, r2, #1
 8017b9c:	f104 547f 	add.w	r4, r4, #1069547520	; 0x3fc00000
 8017ba0:	f01e 0f01 	tst.w	lr, #1
 8017ba4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
 8017ba8:	bf18      	it	ne
 8017baa:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
 8017bae:	eb04 5105 	add.w	r1, r4, r5, lsl #20
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	e002      	b.n	8017bbc <__ieee754_sqrt+0x15c>
 8017bb6:	ee10 0a10 	vmov	r0, s0
 8017bba:	4629      	mov	r1, r5
 8017bbc:	ec41 0b10 	vmov	d0, r0, r1
 8017bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bc4:	7ff00000 	.word	0x7ff00000

08017bc8 <__ieee754_sqrtf>:
 8017bc8:	ee10 2a10 	vmov	r2, s0
 8017bcc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8017bd0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017bd4:	b570      	push	{r4, r5, r6, lr}
 8017bd6:	d302      	bcc.n	8017bde <__ieee754_sqrtf+0x16>
 8017bd8:	eea0 0a00 	vfma.f32	s0, s0, s0
 8017bdc:	bd70      	pop	{r4, r5, r6, pc}
 8017bde:	2900      	cmp	r1, #0
 8017be0:	d039      	beq.n	8017c56 <__ieee754_sqrtf+0x8e>
 8017be2:	2a00      	cmp	r2, #0
 8017be4:	da04      	bge.n	8017bf0 <__ieee754_sqrtf+0x28>
 8017be6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017bea:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8017bee:	bd70      	pop	{r4, r5, r6, pc}
 8017bf0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8017bf4:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8017bf8:	d207      	bcs.n	8017c0a <__ieee754_sqrtf+0x42>
 8017bfa:	2100      	movs	r1, #0
 8017bfc:	0210      	lsls	r0, r2, #8
 8017bfe:	d402      	bmi.n	8017c06 <__ieee754_sqrtf+0x3e>
 8017c00:	0052      	lsls	r2, r2, #1
 8017c02:	3101      	adds	r1, #1
 8017c04:	e7fa      	b.n	8017bfc <__ieee754_sqrtf+0x34>
 8017c06:	3901      	subs	r1, #1
 8017c08:	1a5b      	subs	r3, r3, r1
 8017c0a:	3b7f      	subs	r3, #127	; 0x7f
 8017c0c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017c10:	07d9      	lsls	r1, r3, #31
 8017c12:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8017c16:	bf48      	it	mi
 8017c18:	0052      	lslmi	r2, r2, #1
 8017c1a:	1059      	asrs	r1, r3, #1
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	0052      	lsls	r2, r2, #1
 8017c20:	2419      	movs	r4, #25
 8017c22:	461e      	mov	r6, r3
 8017c24:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8017c28:	1835      	adds	r5, r6, r0
 8017c2a:	4295      	cmp	r5, r2
 8017c2c:	bfde      	ittt	le
 8017c2e:	182e      	addle	r6, r5, r0
 8017c30:	1b52      	suble	r2, r2, r5
 8017c32:	181b      	addle	r3, r3, r0
 8017c34:	3c01      	subs	r4, #1
 8017c36:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8017c3a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8017c3e:	d1f3      	bne.n	8017c28 <__ieee754_sqrtf+0x60>
 8017c40:	b112      	cbz	r2, 8017c48 <__ieee754_sqrtf+0x80>
 8017c42:	f003 0201 	and.w	r2, r3, #1
 8017c46:	4413      	add	r3, r2
 8017c48:	105b      	asrs	r3, r3, #1
 8017c4a:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8017c4e:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8017c52:	ee00 3a10 	vmov	s0, r3
 8017c56:	bd70      	pop	{r4, r5, r6, pc}

08017c58 <fabs>:
 8017c58:	ec53 2b10 	vmov	r2, r3, d0
 8017c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c60:	ec43 2b10 	vmov	d0, r2, r3
 8017c64:	4770      	bx	lr

08017c66 <finite>:
 8017c66:	ee10 3a90 	vmov	r3, s1
 8017c6a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017c6e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017c72:	0fc0      	lsrs	r0, r0, #31
 8017c74:	4770      	bx	lr

08017c76 <matherr>:
 8017c76:	2000      	movs	r0, #0
 8017c78:	4770      	bx	lr
 8017c7a:	0000      	movs	r0, r0
 8017c7c:	0000      	movs	r0, r0
	...

08017c80 <nan>:
 8017c80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017c88 <nan+0x8>
 8017c84:	4770      	bx	lr
 8017c86:	bf00      	nop
 8017c88:	00000000 	.word	0x00000000
 8017c8c:	7ff80000 	.word	0x7ff80000

08017c90 <rint>:
 8017c90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c92:	ec53 2b10 	vmov	r2, r3, d0
 8017c96:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8017c9a:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8017c9e:	2e13      	cmp	r6, #19
 8017ca0:	461d      	mov	r5, r3
 8017ca2:	4611      	mov	r1, r2
 8017ca4:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8017ca8:	dc42      	bgt.n	8017d30 <rint+0xa0>
 8017caa:	2e00      	cmp	r6, #0
 8017cac:	da28      	bge.n	8017d00 <rint+0x70>
 8017cae:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017cb2:	4311      	orrs	r1, r2
 8017cb4:	d06b      	beq.n	8017d8e <rint+0xfe>
 8017cb6:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8017cba:	4316      	orrs	r6, r2
 8017cbc:	4273      	negs	r3, r6
 8017cbe:	431e      	orrs	r6, r3
 8017cc0:	4b36      	ldr	r3, [pc, #216]	; (8017d9c <rint+0x10c>)
 8017cc2:	0b36      	lsrs	r6, r6, #12
 8017cc4:	0c6d      	lsrs	r5, r5, #17
 8017cc6:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8017cca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017cce:	046d      	lsls	r5, r5, #17
 8017cd0:	ea46 0105 	orr.w	r1, r6, r5
 8017cd4:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017cd8:	ee10 0a10 	vmov	r0, s0
 8017cdc:	4632      	mov	r2, r6
 8017cde:	463b      	mov	r3, r7
 8017ce0:	f7e8 fb54 	bl	800038c <__adddf3>
 8017ce4:	e9cd 0100 	strd	r0, r1, [sp]
 8017ce8:	4632      	mov	r2, r6
 8017cea:	463b      	mov	r3, r7
 8017cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017cf0:	f7e8 fb4a 	bl	8000388 <__aeabi_dsub>
 8017cf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017cf8:	4602      	mov	r2, r0
 8017cfa:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 8017cfe:	e046      	b.n	8017d8e <rint+0xfe>
 8017d00:	4827      	ldr	r0, [pc, #156]	; (8017da0 <rint+0x110>)
 8017d02:	4130      	asrs	r0, r6
 8017d04:	ea03 0700 	and.w	r7, r3, r0
 8017d08:	4317      	orrs	r7, r2
 8017d0a:	d040      	beq.n	8017d8e <rint+0xfe>
 8017d0c:	0843      	lsrs	r3, r0, #1
 8017d0e:	ea05 0203 	and.w	r2, r5, r3
 8017d12:	4311      	orrs	r1, r2
 8017d14:	d027      	beq.n	8017d66 <rint+0xd6>
 8017d16:	ea25 0303 	bic.w	r3, r5, r3
 8017d1a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8017d1e:	2e13      	cmp	r6, #19
 8017d20:	fa45 f506 	asr.w	r5, r5, r6
 8017d24:	bf0c      	ite	eq
 8017d26:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
 8017d2a:	2100      	movne	r1, #0
 8017d2c:	431d      	orrs	r5, r3
 8017d2e:	e01a      	b.n	8017d66 <rint+0xd6>
 8017d30:	2e33      	cmp	r6, #51	; 0x33
 8017d32:	dd08      	ble.n	8017d46 <rint+0xb6>
 8017d34:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017d38:	ee10 0a10 	vmov	r0, s0
 8017d3c:	4619      	mov	r1, r3
 8017d3e:	d128      	bne.n	8017d92 <rint+0x102>
 8017d40:	f7e8 fb24 	bl	800038c <__adddf3>
 8017d44:	e025      	b.n	8017d92 <rint+0x102>
 8017d46:	f2a7 4613 	subw	r6, r7, #1043	; 0x413
 8017d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8017d4e:	40f0      	lsrs	r0, r6
 8017d50:	4202      	tst	r2, r0
 8017d52:	d01c      	beq.n	8017d8e <rint+0xfe>
 8017d54:	0843      	lsrs	r3, r0, #1
 8017d56:	4219      	tst	r1, r3
 8017d58:	bf1f      	itttt	ne
 8017d5a:	ea21 0303 	bicne.w	r3, r1, r3
 8017d5e:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
 8017d62:	4131      	asrne	r1, r6
 8017d64:	4319      	orrne	r1, r3
 8017d66:	4b0d      	ldr	r3, [pc, #52]	; (8017d9c <rint+0x10c>)
 8017d68:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8017d6c:	4608      	mov	r0, r1
 8017d6e:	4629      	mov	r1, r5
 8017d70:	e9d4 4500 	ldrd	r4, r5, [r4]
 8017d74:	4622      	mov	r2, r4
 8017d76:	462b      	mov	r3, r5
 8017d78:	f7e8 fb08 	bl	800038c <__adddf3>
 8017d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8017d80:	4622      	mov	r2, r4
 8017d82:	462b      	mov	r3, r5
 8017d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017d88:	f7e8 fafe 	bl	8000388 <__aeabi_dsub>
 8017d8c:	e001      	b.n	8017d92 <rint+0x102>
 8017d8e:	4610      	mov	r0, r2
 8017d90:	4619      	mov	r1, r3
 8017d92:	ec41 0b10 	vmov	d0, r0, r1
 8017d96:	b003      	add	sp, #12
 8017d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	0802ffa0 	.word	0x0802ffa0
 8017da0:	000fffff 	.word	0x000fffff
 8017da4:	00000000 	.word	0x00000000

08017da8 <scalbn>:
 8017da8:	b570      	push	{r4, r5, r6, lr}
 8017daa:	ec55 4b10 	vmov	r4, r5, d0
 8017dae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017db2:	4606      	mov	r6, r0
 8017db4:	462b      	mov	r3, r5
 8017db6:	b9a2      	cbnz	r2, 8017de2 <scalbn+0x3a>
 8017db8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017dbc:	4323      	orrs	r3, r4
 8017dbe:	d059      	beq.n	8017e74 <scalbn+0xcc>
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	4b33      	ldr	r3, [pc, #204]	; (8017e90 <scalbn+0xe8>)
 8017dc4:	4629      	mov	r1, r5
 8017dc6:	ee10 0a10 	vmov	r0, s0
 8017dca:	f7e8 fc91 	bl	80006f0 <__aeabi_dmul>
 8017dce:	4a31      	ldr	r2, [pc, #196]	; (8017e94 <scalbn+0xec>)
 8017dd0:	4296      	cmp	r6, r2
 8017dd2:	4604      	mov	r4, r0
 8017dd4:	460d      	mov	r5, r1
 8017dd6:	460b      	mov	r3, r1
 8017dd8:	da0f      	bge.n	8017dfa <scalbn+0x52>
 8017dda:	a329      	add	r3, pc, #164	; (adr r3, 8017e80 <scalbn+0xd8>)
 8017ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017de0:	e045      	b.n	8017e6e <scalbn+0xc6>
 8017de2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017de6:	428a      	cmp	r2, r1
 8017de8:	d10a      	bne.n	8017e00 <scalbn+0x58>
 8017dea:	ee10 2a10 	vmov	r2, s0
 8017dee:	462b      	mov	r3, r5
 8017df0:	4620      	mov	r0, r4
 8017df2:	4629      	mov	r1, r5
 8017df4:	f7e8 faca 	bl	800038c <__adddf3>
 8017df8:	e03e      	b.n	8017e78 <scalbn+0xd0>
 8017dfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017dfe:	3a36      	subs	r2, #54	; 0x36
 8017e00:	4432      	add	r2, r6
 8017e02:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017e06:	428a      	cmp	r2, r1
 8017e08:	dd02      	ble.n	8017e10 <scalbn+0x68>
 8017e0a:	ec45 4b11 	vmov	d1, r4, r5
 8017e0e:	e011      	b.n	8017e34 <scalbn+0x8c>
 8017e10:	2a00      	cmp	r2, #0
 8017e12:	dd06      	ble.n	8017e22 <scalbn+0x7a>
 8017e14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017e18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017e1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017e20:	e028      	b.n	8017e74 <scalbn+0xcc>
 8017e22:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017e26:	da17      	bge.n	8017e58 <scalbn+0xb0>
 8017e28:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017e2c:	429e      	cmp	r6, r3
 8017e2e:	ec45 4b11 	vmov	d1, r4, r5
 8017e32:	dd07      	ble.n	8017e44 <scalbn+0x9c>
 8017e34:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8017e88 <scalbn+0xe0>
 8017e38:	f000 f830 	bl	8017e9c <copysign>
 8017e3c:	a312      	add	r3, pc, #72	; (adr r3, 8017e88 <scalbn+0xe0>)
 8017e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e42:	e006      	b.n	8017e52 <scalbn+0xaa>
 8017e44:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8017e80 <scalbn+0xd8>
 8017e48:	f000 f828 	bl	8017e9c <copysign>
 8017e4c:	a30c      	add	r3, pc, #48	; (adr r3, 8017e80 <scalbn+0xd8>)
 8017e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e52:	ec51 0b10 	vmov	r0, r1, d0
 8017e56:	e00a      	b.n	8017e6e <scalbn+0xc6>
 8017e58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017e5c:	3236      	adds	r2, #54	; 0x36
 8017e5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017e62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017e66:	4b0c      	ldr	r3, [pc, #48]	; (8017e98 <scalbn+0xf0>)
 8017e68:	4620      	mov	r0, r4
 8017e6a:	4629      	mov	r1, r5
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	f7e8 fc3f 	bl	80006f0 <__aeabi_dmul>
 8017e72:	e001      	b.n	8017e78 <scalbn+0xd0>
 8017e74:	4620      	mov	r0, r4
 8017e76:	4629      	mov	r1, r5
 8017e78:	ec41 0b10 	vmov	d0, r0, r1
 8017e7c:	bd70      	pop	{r4, r5, r6, pc}
 8017e7e:	bf00      	nop
 8017e80:	c2f8f359 	.word	0xc2f8f359
 8017e84:	01a56e1f 	.word	0x01a56e1f
 8017e88:	8800759c 	.word	0x8800759c
 8017e8c:	7e37e43c 	.word	0x7e37e43c
 8017e90:	43500000 	.word	0x43500000
 8017e94:	ffff3cb0 	.word	0xffff3cb0
 8017e98:	3c900000 	.word	0x3c900000

08017e9c <copysign>:
 8017e9c:	ec53 2b10 	vmov	r2, r3, d0
 8017ea0:	ee11 0a90 	vmov	r0, s3
 8017ea4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017eac:	ea41 0300 	orr.w	r3, r1, r0
 8017eb0:	ec43 2b10 	vmov	d0, r2, r3
 8017eb4:	4770      	bx	lr
	...

08017eb8 <__errno>:
 8017eb8:	4b01      	ldr	r3, [pc, #4]	; (8017ec0 <__errno+0x8>)
 8017eba:	6818      	ldr	r0, [r3, #0]
 8017ebc:	4770      	bx	lr
 8017ebe:	bf00      	nop
 8017ec0:	20010590 	.word	0x20010590

08017ec4 <_sbrk>:
 8017ec4:	4b04      	ldr	r3, [pc, #16]	; (8017ed8 <_sbrk+0x14>)
 8017ec6:	6819      	ldr	r1, [r3, #0]
 8017ec8:	4602      	mov	r2, r0
 8017eca:	b909      	cbnz	r1, 8017ed0 <_sbrk+0xc>
 8017ecc:	4903      	ldr	r1, [pc, #12]	; (8017edc <_sbrk+0x18>)
 8017ece:	6019      	str	r1, [r3, #0]
 8017ed0:	6818      	ldr	r0, [r3, #0]
 8017ed2:	4402      	add	r2, r0
 8017ed4:	601a      	str	r2, [r3, #0]
 8017ed6:	4770      	bx	lr
 8017ed8:	20042fc8 	.word	0x20042fc8
 8017edc:	20049824 	.word	0x20049824

08017ee0 <_init>:
 8017ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee2:	bf00      	nop
 8017ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ee6:	bc08      	pop	{r3}
 8017ee8:	469e      	mov	lr, r3
 8017eea:	4770      	bx	lr

08017eec <_fini>:
 8017eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eee:	bf00      	nop
 8017ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ef2:	bc08      	pop	{r3}
 8017ef4:	469e      	mov	lr, r3
 8017ef6:	4770      	bx	lr
