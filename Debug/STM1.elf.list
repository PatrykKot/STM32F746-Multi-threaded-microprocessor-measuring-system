
STM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017eb8  08015580  08015580  00025580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802d438  0802d438  0003d438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802d440  0802d440  0003d440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802d444  0802d444  0003d444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005d0  20010000  0802d448  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 000000a0  200105d0  0802da18  000405d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxBUF        00001dc4  20010670  0802dab8  00040670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxBUF        00001dc4  20012434  0802f87c  00042434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDescripSection 000000a0  200141f8  08031640  000441f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .dtcmram      00000000  20000000  20000000  00044298  2**0
                  CONTENTS
 12 .sram2        00000000  2004c000  2004c000  00044298  2**0
                  CONTENTS
 13 .bss          0003555c  20014298  20014298  00044298  2**2
                  ALLOC
 14 ._user_heap_stack 00000400  200497f4  200497f4  00044298  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00044298  2**0
                  CONTENTS, READONLY
 16 .debug_info   0004c93c  00000000  00000000  000442c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000a7a2  00000000  00000000  00090c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00029b7c  00000000  00000000  0009b3a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 000028e0  00000000  00000000  000c4f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00003ae8  00000000  00000000  000c7808  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00017285  00000000  00000000  000cb2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0000db64  00000000  00000000  000e2575  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007e  00000000  00000000  000f00d9  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000085a8  00000000  00000000  000f0158  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20014298 	.word	0x20014298
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015568 	.word	0x08015568

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2001429c 	.word	0x2001429c
 800020c:	08015568 	.word	0x08015568

08000210 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8000210:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8000212:	2b01      	cmp	r3, #1
	IT       LS
 8000214:	bf98      	it	ls
	BXLS     lr
 8000216:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 800021c:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000228:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800022e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000230:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000232:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000234:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800023e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000244:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000248:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800024c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000250:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800025a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800026c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800026e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000270:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800027a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800027c:	2b01      	cmp	r3, #1
	IT       LS
 800027e:	bf98      	it	ls
	BXLS     lr
 8000280:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000286:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000292:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80002b0:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 80002be:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002c2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002c4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002c6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f092 0f00 	teq	r2, #0
 800066a:	bf14      	ite	ne
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000678:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	e720      	b.n	80004c4 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_ul2d>:
 8000684:	ea50 0201 	orrs.w	r2, r0, r1
 8000688:	bf08      	it	eq
 800068a:	4770      	bxeq	lr
 800068c:	b530      	push	{r4, r5, lr}
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	e00a      	b.n	80006aa <__aeabi_l2d+0x16>

08000694 <__aeabi_l2d>:
 8000694:	ea50 0201 	orrs.w	r2, r0, r1
 8000698:	bf08      	it	eq
 800069a:	4770      	bxeq	lr
 800069c:	b530      	push	{r4, r5, lr}
 800069e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006a2:	d502      	bpl.n	80006aa <__aeabi_l2d+0x16>
 80006a4:	4240      	negs	r0, r0
 80006a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006b6:	f43f aedc 	beq.w	8000472 <__adddf3+0xe6>
 80006ba:	f04f 0203 	mov.w	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006d2:	f1c2 0320 	rsb	r3, r2, #32
 80006d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 fe03 	lsl.w	lr, r1, r3
 80006e2:	ea40 000e 	orr.w	r0, r0, lr
 80006e6:	fa21 f102 	lsr.w	r1, r1, r2
 80006ea:	4414      	add	r4, r2
 80006ec:	e6c1      	b.n	8000472 <__adddf3+0xe6>
 80006ee:	bf00      	nop

080006f0 <__aeabi_dmul>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006fe:	bf1d      	ittte	ne
 8000700:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000704:	ea94 0f0c 	teqne	r4, ip
 8000708:	ea95 0f0c 	teqne	r5, ip
 800070c:	f000 f8de 	bleq	80008cc <__aeabi_dmul+0x1dc>
 8000710:	442c      	add	r4, r5
 8000712:	ea81 0603 	eor.w	r6, r1, r3
 8000716:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800071a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800071e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000722:	bf18      	it	ne
 8000724:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000730:	d038      	beq.n	80007a4 <__aeabi_dmul+0xb4>
 8000732:	fba0 ce02 	umull	ip, lr, r0, r2
 8000736:	f04f 0500 	mov.w	r5, #0
 800073a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800073e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000742:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000746:	f04f 0600 	mov.w	r6, #0
 800074a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800074e:	f09c 0f00 	teq	ip, #0
 8000752:	bf18      	it	ne
 8000754:	f04e 0e01 	orrne.w	lr, lr, #1
 8000758:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800075c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000760:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000764:	d204      	bcs.n	8000770 <__aeabi_dmul+0x80>
 8000766:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800076a:	416d      	adcs	r5, r5
 800076c:	eb46 0606 	adc.w	r6, r6, r6
 8000770:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000774:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000778:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800077c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000780:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000784:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000788:	bf88      	it	hi
 800078a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800078e:	d81e      	bhi.n	80007ce <__aeabi_dmul+0xde>
 8000790:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000794:	bf08      	it	eq
 8000796:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800079a:	f150 0000 	adcs.w	r0, r0, #0
 800079e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a8:	ea46 0101 	orr.w	r1, r6, r1
 80007ac:	ea40 0002 	orr.w	r0, r0, r2
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b8:	bfc2      	ittt	gt
 80007ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007c2:	bd70      	popgt	{r4, r5, r6, pc}
 80007c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c8:	f04f 0e00 	mov.w	lr, #0
 80007cc:	3c01      	subs	r4, #1
 80007ce:	f300 80ab 	bgt.w	8000928 <__aeabi_dmul+0x238>
 80007d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007d6:	bfde      	ittt	le
 80007d8:	2000      	movle	r0, #0
 80007da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007de:	bd70      	pople	{r4, r5, r6, pc}
 80007e0:	f1c4 0400 	rsb	r4, r4, #0
 80007e4:	3c20      	subs	r4, #32
 80007e6:	da35      	bge.n	8000854 <__aeabi_dmul+0x164>
 80007e8:	340c      	adds	r4, #12
 80007ea:	dc1b      	bgt.n	8000824 <__aeabi_dmul+0x134>
 80007ec:	f104 0414 	add.w	r4, r4, #20
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f305 	lsl.w	r3, r0, r5
 80007f8:	fa20 f004 	lsr.w	r0, r0, r4
 80007fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000810:	fa21 f604 	lsr.w	r6, r1, r4
 8000814:	eb42 0106 	adc.w	r1, r2, r6
 8000818:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800081c:	bf08      	it	eq
 800081e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f1c4 040c 	rsb	r4, r4, #12
 8000828:	f1c4 0520 	rsb	r5, r4, #32
 800082c:	fa00 f304 	lsl.w	r3, r0, r4
 8000830:	fa20 f005 	lsr.w	r0, r0, r5
 8000834:	fa01 f204 	lsl.w	r2, r1, r4
 8000838:	ea40 0002 	orr.w	r0, r0, r2
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000844:	f141 0100 	adc.w	r1, r1, #0
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f1c4 0520 	rsb	r5, r4, #32
 8000858:	fa00 f205 	lsl.w	r2, r0, r5
 800085c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000860:	fa20 f304 	lsr.w	r3, r0, r4
 8000864:	fa01 f205 	lsl.w	r2, r1, r5
 8000868:	ea43 0302 	orr.w	r3, r3, r2
 800086c:	fa21 f004 	lsr.w	r0, r1, r4
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	fa21 f204 	lsr.w	r2, r1, r4
 8000878:	ea20 0002 	bic.w	r0, r0, r2
 800087c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000880:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000884:	bf08      	it	eq
 8000886:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f094 0f00 	teq	r4, #0
 8000890:	d10f      	bne.n	80008b2 <__aeabi_dmul+0x1c2>
 8000892:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000896:	0040      	lsls	r0, r0, #1
 8000898:	eb41 0101 	adc.w	r1, r1, r1
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	bf08      	it	eq
 80008a2:	3c01      	subeq	r4, #1
 80008a4:	d0f7      	beq.n	8000896 <__aeabi_dmul+0x1a6>
 80008a6:	ea41 0106 	orr.w	r1, r1, r6
 80008aa:	f095 0f00 	teq	r5, #0
 80008ae:	bf18      	it	ne
 80008b0:	4770      	bxne	lr
 80008b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008b6:	0052      	lsls	r2, r2, #1
 80008b8:	eb43 0303 	adc.w	r3, r3, r3
 80008bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c0:	bf08      	it	eq
 80008c2:	3d01      	subeq	r5, #1
 80008c4:	d0f7      	beq.n	80008b6 <__aeabi_dmul+0x1c6>
 80008c6:	ea43 0306 	orr.w	r3, r3, r6
 80008ca:	4770      	bx	lr
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d4:	bf18      	it	ne
 80008d6:	ea95 0f0c 	teqne	r5, ip
 80008da:	d00c      	beq.n	80008f6 <__aeabi_dmul+0x206>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	d1d1      	bne.n	800088c <__aeabi_dmul+0x19c>
 80008e8:	ea81 0103 	eor.w	r1, r1, r3
 80008ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f0:	f04f 0000 	mov.w	r0, #0
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
 80008f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fa:	bf06      	itte	eq
 80008fc:	4610      	moveq	r0, r2
 80008fe:	4619      	moveq	r1, r3
 8000900:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000904:	d019      	beq.n	800093a <__aeabi_dmul+0x24a>
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	d102      	bne.n	8000912 <__aeabi_dmul+0x222>
 800090c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000910:	d113      	bne.n	800093a <__aeabi_dmul+0x24a>
 8000912:	ea95 0f0c 	teq	r5, ip
 8000916:	d105      	bne.n	8000924 <__aeabi_dmul+0x234>
 8000918:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800091c:	bf1c      	itt	ne
 800091e:	4610      	movne	r0, r2
 8000920:	4619      	movne	r1, r3
 8000922:	d10a      	bne.n	800093a <__aeabi_dmul+0x24a>
 8000924:	ea81 0103 	eor.w	r1, r1, r3
 8000928:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800092c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000930:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	bd70      	pop	{r4, r5, r6, pc}
 800093a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800093e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000942:	bd70      	pop	{r4, r5, r6, pc}

08000944 <__aeabi_ddiv>:
 8000944:	b570      	push	{r4, r5, r6, lr}
 8000946:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800094a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800094e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000952:	bf1d      	ittte	ne
 8000954:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000958:	ea94 0f0c 	teqne	r4, ip
 800095c:	ea95 0f0c 	teqne	r5, ip
 8000960:	f000 f8a7 	bleq	8000ab2 <__aeabi_ddiv+0x16e>
 8000964:	eba4 0405 	sub.w	r4, r4, r5
 8000968:	ea81 0e03 	eor.w	lr, r1, r3
 800096c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000970:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000974:	f000 8088 	beq.w	8000a88 <__aeabi_ddiv+0x144>
 8000978:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800097c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000980:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000984:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000988:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800098c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000990:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000994:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000998:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800099c:	429d      	cmp	r5, r3
 800099e:	bf08      	it	eq
 80009a0:	4296      	cmpeq	r6, r2
 80009a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009aa:	d202      	bcs.n	80009b2 <__aeabi_ddiv+0x6e>
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b2:	1ab6      	subs	r6, r6, r2
 80009b4:	eb65 0503 	sbc.w	r5, r5, r3
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a20:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a24:	d018      	beq.n	8000a58 <__aeabi_ddiv+0x114>
 8000a26:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a2a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a2e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a36:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a3a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a3e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a42:	d1c0      	bne.n	80009c6 <__aeabi_ddiv+0x82>
 8000a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a48:	d10b      	bne.n	8000a62 <__aeabi_ddiv+0x11e>
 8000a4a:	ea41 0100 	orr.w	r1, r1, r0
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a56:	e7b6      	b.n	80009c6 <__aeabi_ddiv+0x82>
 8000a58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a5c:	bf04      	itt	eq
 8000a5e:	4301      	orreq	r1, r0
 8000a60:	2000      	moveq	r0, #0
 8000a62:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a66:	bf88      	it	hi
 8000a68:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a6c:	f63f aeaf 	bhi.w	80007ce <__aeabi_dmul+0xde>
 8000a70:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a74:	bf04      	itt	eq
 8000a76:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a7a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a7e:	f150 0000 	adcs.w	r0, r0, #0
 8000a82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
 8000a88:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a8c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a90:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a94:	bfc2      	ittt	gt
 8000a96:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa4:	f04f 0e00 	mov.w	lr, #0
 8000aa8:	3c01      	subs	r4, #1
 8000aaa:	e690      	b.n	80007ce <__aeabi_dmul+0xde>
 8000aac:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab0:	e68d      	b.n	80007ce <__aeabi_dmul+0xde>
 8000ab2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ab6:	ea94 0f0c 	teq	r4, ip
 8000aba:	bf08      	it	eq
 8000abc:	ea95 0f0c 	teqeq	r5, ip
 8000ac0:	f43f af3b 	beq.w	800093a <__aeabi_dmul+0x24a>
 8000ac4:	ea94 0f0c 	teq	r4, ip
 8000ac8:	d10a      	bne.n	8000ae0 <__aeabi_ddiv+0x19c>
 8000aca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ace:	f47f af34 	bne.w	800093a <__aeabi_dmul+0x24a>
 8000ad2:	ea95 0f0c 	teq	r5, ip
 8000ad6:	f47f af25 	bne.w	8000924 <__aeabi_dmul+0x234>
 8000ada:	4610      	mov	r0, r2
 8000adc:	4619      	mov	r1, r3
 8000ade:	e72c      	b.n	800093a <__aeabi_dmul+0x24a>
 8000ae0:	ea95 0f0c 	teq	r5, ip
 8000ae4:	d106      	bne.n	8000af4 <__aeabi_ddiv+0x1b0>
 8000ae6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aea:	f43f aefd 	beq.w	80008e8 <__aeabi_dmul+0x1f8>
 8000aee:	4610      	mov	r0, r2
 8000af0:	4619      	mov	r1, r3
 8000af2:	e722      	b.n	800093a <__aeabi_dmul+0x24a>
 8000af4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af8:	bf18      	it	ne
 8000afa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000afe:	f47f aec5 	bne.w	800088c <__aeabi_dmul+0x19c>
 8000b02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b06:	f47f af0d 	bne.w	8000924 <__aeabi_dmul+0x234>
 8000b0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b0e:	f47f aeeb 	bne.w	80008e8 <__aeabi_dmul+0x1f8>
 8000b12:	e712      	b.n	800093a <__aeabi_dmul+0x24a>

08000b14 <__gedf2>:
 8000b14:	f04f 3cff 	mov.w	ip, #4294967295
 8000b18:	e006      	b.n	8000b28 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__ledf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	e002      	b.n	8000b28 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__cmpdf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	bf18      	it	ne
 8000b3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b3e:	d01b      	beq.n	8000b78 <__cmpdf2+0x54>
 8000b40:	b001      	add	sp, #4
 8000b42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b46:	bf0c      	ite	eq
 8000b48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b4c:	ea91 0f03 	teqne	r1, r3
 8000b50:	bf02      	ittt	eq
 8000b52:	ea90 0f02 	teqeq	r0, r2
 8000b56:	2000      	moveq	r0, #0
 8000b58:	4770      	bxeq	lr
 8000b5a:	f110 0f00 	cmn.w	r0, #0
 8000b5e:	ea91 0f03 	teq	r1, r3
 8000b62:	bf58      	it	pl
 8000b64:	4299      	cmppl	r1, r3
 8000b66:	bf08      	it	eq
 8000b68:	4290      	cmpeq	r0, r2
 8000b6a:	bf2c      	ite	cs
 8000b6c:	17d8      	asrcs	r0, r3, #31
 8000b6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b72:	f040 0001 	orr.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b80:	d102      	bne.n	8000b88 <__cmpdf2+0x64>
 8000b82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b86:	d107      	bne.n	8000b98 <__cmpdf2+0x74>
 8000b88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d1d6      	bne.n	8000b40 <__cmpdf2+0x1c>
 8000b92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b96:	d0d3      	beq.n	8000b40 <__cmpdf2+0x1c>
 8000b98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_cdrcmple>:
 8000ba0:	4684      	mov	ip, r0
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	4662      	mov	r2, ip
 8000ba6:	468c      	mov	ip, r1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4663      	mov	r3, ip
 8000bac:	e000      	b.n	8000bb0 <__aeabi_cdcmpeq>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_cdcmpeq>:
 8000bb0:	b501      	push	{r0, lr}
 8000bb2:	f7ff ffb7 	bl	8000b24 <__cmpdf2>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	bf48      	it	mi
 8000bba:	f110 0f00 	cmnmi.w	r0, #0
 8000bbe:	bd01      	pop	{r0, pc}

08000bc0 <__aeabi_dcmpeq>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff fff4 	bl	8000bb0 <__aeabi_cdcmpeq>
 8000bc8:	bf0c      	ite	eq
 8000bca:	2001      	moveq	r0, #1
 8000bcc:	2000      	movne	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmplt>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffea 	bl	8000bb0 <__aeabi_cdcmpeq>
 8000bdc:	bf34      	ite	cc
 8000bde:	2001      	movcc	r0, #1
 8000be0:	2000      	movcs	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmple>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffe0 	bl	8000bb0 <__aeabi_cdcmpeq>
 8000bf0:	bf94      	ite	ls
 8000bf2:	2001      	movls	r0, #1
 8000bf4:	2000      	movhi	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpge>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffce 	bl	8000ba0 <__aeabi_cdrcmple>
 8000c04:	bf94      	ite	ls
 8000c06:	2001      	movls	r0, #1
 8000c08:	2000      	movhi	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmpgt>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffc4 	bl	8000ba0 <__aeabi_cdrcmple>
 8000c18:	bf34      	ite	cc
 8000c1a:	2001      	movcc	r0, #1
 8000c1c:	2000      	movcs	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpun>:
 8000c24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c2c:	d102      	bne.n	8000c34 <__aeabi_dcmpun+0x10>
 8000c2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c32:	d10a      	bne.n	8000c4a <__aeabi_dcmpun+0x26>
 8000c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c3c:	d102      	bne.n	8000c44 <__aeabi_dcmpun+0x20>
 8000c3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c42:	d102      	bne.n	8000c4a <__aeabi_dcmpun+0x26>
 8000c44:	f04f 0000 	mov.w	r0, #0
 8000c48:	4770      	bx	lr
 8000c4a:	f04f 0001 	mov.w	r0, #1
 8000c4e:	4770      	bx	lr

08000c50 <__aeabi_d2iz>:
 8000c50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c58:	d215      	bcs.n	8000c86 <__aeabi_d2iz+0x36>
 8000c5a:	d511      	bpl.n	8000c80 <__aeabi_d2iz+0x30>
 8000c5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c64:	d912      	bls.n	8000c8c <__aeabi_d2iz+0x3c>
 8000c66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c76:	fa23 f002 	lsr.w	r0, r3, r2
 8000c7a:	bf18      	it	ne
 8000c7c:	4240      	negne	r0, r0
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c8a:	d105      	bne.n	8000c98 <__aeabi_d2iz+0x48>
 8000c8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	bf08      	it	eq
 8000c92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c96:	4770      	bx	lr
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_d2f>:
 8000ca0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ca4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca8:	bf24      	itt	cs
 8000caa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cb2:	d90d      	bls.n	8000cd0 <__aeabi_d2f+0x30>
 8000cb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc8:	bf08      	it	eq
 8000cca:	f020 0001 	biceq.w	r0, r0, #1
 8000cce:	4770      	bx	lr
 8000cd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cd4:	d121      	bne.n	8000d1a <__aeabi_d2f+0x7a>
 8000cd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cda:	bfbc      	itt	lt
 8000cdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce0:	4770      	bxlt	lr
 8000ce2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ce6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cea:	f1c2 0218 	rsb	r2, r2, #24
 8000cee:	f1c2 0c20 	rsb	ip, r2, #32
 8000cf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000cfa:	bf18      	it	ne
 8000cfc:	f040 0001 	orrne.w	r0, r0, #1
 8000d00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d0c:	ea40 000c 	orr.w	r0, r0, ip
 8000d10:	fa23 f302 	lsr.w	r3, r3, r2
 8000d14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d18:	e7cc      	b.n	8000cb4 <__aeabi_d2f+0x14>
 8000d1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d1e:	d107      	bne.n	8000d30 <__aeabi_d2f+0x90>
 8000d20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d24:	bf1e      	ittt	ne
 8000d26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d2e:	4770      	bxne	lr
 8000d30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <__aeabi_uldivmod>:
 8000d40:	b953      	cbnz	r3, 8000d58 <__aeabi_uldivmod+0x18>
 8000d42:	b94a      	cbnz	r2, 8000d58 <__aeabi_uldivmod+0x18>
 8000d44:	2900      	cmp	r1, #0
 8000d46:	bf08      	it	eq
 8000d48:	2800      	cmpeq	r0, #0
 8000d4a:	bf1c      	itt	ne
 8000d4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d50:	f04f 30ff 	movne.w	r0, #4294967295
 8000d54:	f000 b97e 	b.w	8001054 <__aeabi_idiv0>
 8000d58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d60:	f000 f806 	bl	8000d70 <__udivmoddi4>
 8000d64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr

08000d70 <__udivmoddi4>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	468c      	mov	ip, r1
 8000d76:	460e      	mov	r6, r1
 8000d78:	4604      	mov	r4, r0
 8000d7a:	9d08      	ldr	r5, [sp, #32]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d150      	bne.n	8000e22 <__udivmoddi4+0xb2>
 8000d80:	428a      	cmp	r2, r1
 8000d82:	4617      	mov	r7, r2
 8000d84:	d96c      	bls.n	8000e60 <__udivmoddi4+0xf0>
 8000d86:	fab2 fe82 	clz	lr, r2
 8000d8a:	f1be 0f00 	cmp.w	lr, #0
 8000d8e:	d00b      	beq.n	8000da8 <__udivmoddi4+0x38>
 8000d90:	f1ce 0420 	rsb	r4, lr, #32
 8000d94:	fa20 f404 	lsr.w	r4, r0, r4
 8000d98:	fa01 f60e 	lsl.w	r6, r1, lr
 8000d9c:	ea44 0c06 	orr.w	ip, r4, r6
 8000da0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000da4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000da8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	fbbc f0f9 	udiv	r0, ip, r9
 8000db2:	fa1f f887 	uxth.w	r8, r7
 8000db6:	fb09 c610 	mls	r6, r9, r0, ip
 8000dba:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000dbe:	fb00 f308 	mul.w	r3, r0, r8
 8000dc2:	42b3      	cmp	r3, r6
 8000dc4:	d909      	bls.n	8000dda <__udivmoddi4+0x6a>
 8000dc6:	19f6      	adds	r6, r6, r7
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	f080 8122 	bcs.w	8001014 <__udivmoddi4+0x2a4>
 8000dd0:	42b3      	cmp	r3, r6
 8000dd2:	f240 811f 	bls.w	8001014 <__udivmoddi4+0x2a4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	443e      	add	r6, r7
 8000dda:	1af6      	subs	r6, r6, r3
 8000ddc:	b2a2      	uxth	r2, r4
 8000dde:	fbb6 f3f9 	udiv	r3, r6, r9
 8000de2:	fb09 6613 	mls	r6, r9, r3, r6
 8000de6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000dea:	fb03 f808 	mul.w	r8, r3, r8
 8000dee:	45a0      	cmp	r8, r4
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x96>
 8000df2:	19e4      	adds	r4, r4, r7
 8000df4:	f103 32ff 	add.w	r2, r3, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x2a0>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x2a0>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ebc8 0404 	rsb	r4, r8, r4
 8000e0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2d00      	cmp	r5, #0
 8000e12:	d062      	beq.n	8000eda <__udivmoddi4+0x16a>
 8000e14:	fa24 f40e 	lsr.w	r4, r4, lr
 8000e18:	2300      	movs	r3, #0
 8000e1a:	602c      	str	r4, [r5, #0]
 8000e1c:	606b      	str	r3, [r5, #4]
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0xc6>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d055      	beq.n	8000ed6 <__udivmoddi4+0x166>
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000e30:	4608      	mov	r0, r1
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f183 	clz	r1, r3
 8000e3a:	2900      	cmp	r1, #0
 8000e3c:	f040 8090 	bne.w	8000f60 <__udivmoddi4+0x1f0>
 8000e40:	42b3      	cmp	r3, r6
 8000e42:	d302      	bcc.n	8000e4a <__udivmoddi4+0xda>
 8000e44:	4282      	cmp	r2, r0
 8000e46:	f200 80f8 	bhi.w	800103a <__udivmoddi4+0x2ca>
 8000e4a:	1a84      	subs	r4, r0, r2
 8000e4c:	eb66 0603 	sbc.w	r6, r6, r3
 8000e50:	2001      	movs	r0, #1
 8000e52:	46b4      	mov	ip, r6
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	d040      	beq.n	8000eda <__udivmoddi4+0x16a>
 8000e58:	e885 1010 	stmia.w	r5, {r4, ip}
 8000e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e60:	b912      	cbnz	r2, 8000e68 <__udivmoddi4+0xf8>
 8000e62:	2701      	movs	r7, #1
 8000e64:	fbb7 f7f2 	udiv	r7, r7, r2
 8000e68:	fab7 fe87 	clz	lr, r7
 8000e6c:	f1be 0f00 	cmp.w	lr, #0
 8000e70:	d135      	bne.n	8000ede <__udivmoddi4+0x16e>
 8000e72:	1bf3      	subs	r3, r6, r7
 8000e74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e78:	fa1f fc87 	uxth.w	ip, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e82:	0c22      	lsrs	r2, r4, #16
 8000e84:	fb08 3610 	mls	r6, r8, r0, r3
 8000e88:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000e8c:	fb0c f300 	mul.w	r3, ip, r0
 8000e90:	42b3      	cmp	r3, r6
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x134>
 8000e94:	19f6      	adds	r6, r6, r7
 8000e96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x132>
 8000e9c:	42b3      	cmp	r3, r6
 8000e9e:	f200 80ce 	bhi.w	800103e <__udivmoddi4+0x2ce>
 8000ea2:	4610      	mov	r0, r2
 8000ea4:	1af6      	subs	r6, r6, r3
 8000ea6:	b2a2      	uxth	r2, r4
 8000ea8:	fbb6 f3f8 	udiv	r3, r6, r8
 8000eac:	fb08 6613 	mls	r6, r8, r3, r6
 8000eb0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000eb4:	fb0c fc03 	mul.w	ip, ip, r3
 8000eb8:	45a4      	cmp	ip, r4
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x15c>
 8000ebc:	19e4      	adds	r4, r4, r7
 8000ebe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x15a>
 8000ec4:	45a4      	cmp	ip, r4
 8000ec6:	f200 80b5 	bhi.w	8001034 <__udivmoddi4+0x2c4>
 8000eca:	4613      	mov	r3, r2
 8000ecc:	ebcc 0404 	rsb	r4, ip, r4
 8000ed0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ed4:	e79c      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	4628      	mov	r0, r5
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	f1ce 0120 	rsb	r1, lr, #32
 8000ee2:	fa06 f30e 	lsl.w	r3, r6, lr
 8000ee6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eea:	fa20 f901 	lsr.w	r9, r0, r1
 8000eee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ef2:	40ce      	lsrs	r6, r1
 8000ef4:	ea49 0903 	orr.w	r9, r9, r3
 8000ef8:	fbb6 faf8 	udiv	sl, r6, r8
 8000efc:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000f00:	fb08 661a 	mls	r6, r8, sl, r6
 8000f04:	fa1f fc87 	uxth.w	ip, r7
 8000f08:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000f0c:	fb0a f20c 	mul.w	r2, sl, ip
 8000f10:	429a      	cmp	r2, r3
 8000f12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000f16:	d90a      	bls.n	8000f2e <__udivmoddi4+0x1be>
 8000f18:	19db      	adds	r3, r3, r7
 8000f1a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000f1e:	f080 8087 	bcs.w	8001030 <__udivmoddi4+0x2c0>
 8000f22:	429a      	cmp	r2, r3
 8000f24:	f240 8084 	bls.w	8001030 <__udivmoddi4+0x2c0>
 8000f28:	f1aa 0a02 	sub.w	sl, sl, #2
 8000f2c:	443b      	add	r3, r7
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	fa1f f989 	uxth.w	r9, r9
 8000f34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f38:	fb08 3311 	mls	r3, r8, r1, r3
 8000f3c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000f40:	fb01 f60c 	mul.w	r6, r1, ip
 8000f44:	429e      	cmp	r6, r3
 8000f46:	d907      	bls.n	8000f58 <__udivmoddi4+0x1e8>
 8000f48:	19db      	adds	r3, r3, r7
 8000f4a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000f4e:	d26b      	bcs.n	8001028 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d969      	bls.n	8001028 <__udivmoddi4+0x2b8>
 8000f54:	3902      	subs	r1, #2
 8000f56:	443b      	add	r3, r7
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000f5e:	e78e      	b.n	8000e7e <__udivmoddi4+0x10e>
 8000f60:	f1c1 0e20 	rsb	lr, r1, #32
 8000f64:	fa22 f40e 	lsr.w	r4, r2, lr
 8000f68:	408b      	lsls	r3, r1
 8000f6a:	4323      	orrs	r3, r4
 8000f6c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000f70:	fa06 f401 	lsl.w	r4, r6, r1
 8000f74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000f78:	fa26 f60e 	lsr.w	r6, r6, lr
 8000f7c:	433c      	orrs	r4, r7
 8000f7e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000f82:	0c27      	lsrs	r7, r4, #16
 8000f84:	fb0c 6619 	mls	r6, ip, r9, r6
 8000f88:	fa1f f883 	uxth.w	r8, r3
 8000f8c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000f90:	fb09 f708 	mul.w	r7, r9, r8
 8000f94:	42b7      	cmp	r7, r6
 8000f96:	fa02 f201 	lsl.w	r2, r2, r1
 8000f9a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f9e:	d908      	bls.n	8000fb2 <__udivmoddi4+0x242>
 8000fa0:	18f6      	adds	r6, r6, r3
 8000fa2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fa6:	d241      	bcs.n	800102c <__udivmoddi4+0x2bc>
 8000fa8:	42b7      	cmp	r7, r6
 8000faa:	d93f      	bls.n	800102c <__udivmoddi4+0x2bc>
 8000fac:	f1a9 0902 	sub.w	r9, r9, #2
 8000fb0:	441e      	add	r6, r3
 8000fb2:	1bf6      	subs	r6, r6, r7
 8000fb4:	b2a0      	uxth	r0, r4
 8000fb6:	fbb6 f4fc 	udiv	r4, r6, ip
 8000fba:	fb0c 6614 	mls	r6, ip, r4, r6
 8000fbe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000fc2:	fb04 f808 	mul.w	r8, r4, r8
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d907      	bls.n	8000fda <__udivmoddi4+0x26a>
 8000fca:	18ff      	adds	r7, r7, r3
 8000fcc:	f104 30ff 	add.w	r0, r4, #4294967295
 8000fd0:	d228      	bcs.n	8001024 <__udivmoddi4+0x2b4>
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d926      	bls.n	8001024 <__udivmoddi4+0x2b4>
 8000fd6:	3c02      	subs	r4, #2
 8000fd8:	441f      	add	r7, r3
 8000fda:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000fde:	ebc8 0707 	rsb	r7, r8, r7
 8000fe2:	fba0 8902 	umull	r8, r9, r0, r2
 8000fe6:	454f      	cmp	r7, r9
 8000fe8:	4644      	mov	r4, r8
 8000fea:	464e      	mov	r6, r9
 8000fec:	d314      	bcc.n	8001018 <__udivmoddi4+0x2a8>
 8000fee:	d029      	beq.n	8001044 <__udivmoddi4+0x2d4>
 8000ff0:	b365      	cbz	r5, 800104c <__udivmoddi4+0x2dc>
 8000ff2:	ebba 0304 	subs.w	r3, sl, r4
 8000ff6:	eb67 0706 	sbc.w	r7, r7, r6
 8000ffa:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000ffe:	40cb      	lsrs	r3, r1
 8001000:	40cf      	lsrs	r7, r1
 8001002:	ea4e 0303 	orr.w	r3, lr, r3
 8001006:	e885 0088 	stmia.w	r5, {r3, r7}
 800100a:	2100      	movs	r1, #0
 800100c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001010:	4613      	mov	r3, r2
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x96>
 8001014:	4610      	mov	r0, r2
 8001016:	e6e0      	b.n	8000dda <__udivmoddi4+0x6a>
 8001018:	ebb8 0402 	subs.w	r4, r8, r2
 800101c:	eb69 0603 	sbc.w	r6, r9, r3
 8001020:	3801      	subs	r0, #1
 8001022:	e7e5      	b.n	8000ff0 <__udivmoddi4+0x280>
 8001024:	4604      	mov	r4, r0
 8001026:	e7d8      	b.n	8000fda <__udivmoddi4+0x26a>
 8001028:	4611      	mov	r1, r2
 800102a:	e795      	b.n	8000f58 <__udivmoddi4+0x1e8>
 800102c:	4681      	mov	r9, r0
 800102e:	e7c0      	b.n	8000fb2 <__udivmoddi4+0x242>
 8001030:	468a      	mov	sl, r1
 8001032:	e77c      	b.n	8000f2e <__udivmoddi4+0x1be>
 8001034:	3b02      	subs	r3, #2
 8001036:	443c      	add	r4, r7
 8001038:	e748      	b.n	8000ecc <__udivmoddi4+0x15c>
 800103a:	4608      	mov	r0, r1
 800103c:	e70a      	b.n	8000e54 <__udivmoddi4+0xe4>
 800103e:	3802      	subs	r0, #2
 8001040:	443e      	add	r6, r7
 8001042:	e72f      	b.n	8000ea4 <__udivmoddi4+0x134>
 8001044:	45c2      	cmp	sl, r8
 8001046:	d3e7      	bcc.n	8001018 <__udivmoddi4+0x2a8>
 8001048:	463e      	mov	r6, r7
 800104a:	e7d1      	b.n	8000ff0 <__udivmoddi4+0x280>
 800104c:	4629      	mov	r1, r5
 800104e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_idiv0>:
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop

08001058 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 8001058:	2902      	cmp	r1, #2
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800105a:	b510      	push	{r4, lr}
 800105c:	b2c4      	uxtb	r4, r0
  uint32_t counter = 0; 
  
  switch (Output) 
 800105e:	d02b      	beq.n	80010b8 <wm8994_SetOutputMode+0x60>
 8001060:	2903      	cmp	r1, #3
 8001062:	d00f      	beq.n	8001084 <wm8994_SetOutputMode+0x2c>
 8001064:	2901      	cmp	r1, #1
 8001066:	d127      	bne.n	80010b8 <wm8994_SetOutputMode+0x60>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001068:	f640 420c 	movw	r2, #3084	; 0xc0c
 800106c:	2105      	movs	r1, #5
 800106e:	4620      	mov	r0, r4
 8001070:	f000 fcd0 	bl	8001a14 <AUDIO_IO_Write>
 8001074:	2200      	movs	r2, #0
 8001076:	f240 6101 	movw	r1, #1537	; 0x601
 800107a:	4620      	mov	r0, r4
 800107c:	f000 fcca 	bl	8001a14 <AUDIO_IO_Write>
 8001080:	2200      	movs	r2, #0
 8001082:	e00c      	b.n	800109e <wm8994_SetOutputMode+0x46>
 8001084:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001088:	2105      	movs	r1, #5
 800108a:	4620      	mov	r0, r4
 800108c:	f000 fcc2 	bl	8001a14 <AUDIO_IO_Write>
 8001090:	2201      	movs	r2, #1
 8001092:	f240 6101 	movw	r1, #1537	; 0x601
 8001096:	4620      	mov	r0, r4
 8001098:	f000 fcbc 	bl	8001a14 <AUDIO_IO_Write>
 800109c:	2201      	movs	r2, #1
 800109e:	f240 6102 	movw	r1, #1538	; 0x602
 80010a2:	4620      	mov	r0, r4
 80010a4:	f000 fcb6 	bl	8001a14 <AUDIO_IO_Write>
 80010a8:	2202      	movs	r2, #2
 80010aa:	f240 6104 	movw	r1, #1540	; 0x604
 80010ae:	4620      	mov	r0, r4
 80010b0:	f000 fcb0 	bl	8001a14 <AUDIO_IO_Write>
 80010b4:	2202      	movs	r2, #2
 80010b6:	e018      	b.n	80010ea <wm8994_SetOutputMode+0x92>
 80010b8:	f240 3203 	movw	r2, #771	; 0x303
 80010bc:	2105      	movs	r1, #5
 80010be:	4620      	mov	r0, r4
 80010c0:	f000 fca8 	bl	8001a14 <AUDIO_IO_Write>
 80010c4:	2201      	movs	r2, #1
 80010c6:	f240 6101 	movw	r1, #1537	; 0x601
 80010ca:	4620      	mov	r0, r4
 80010cc:	f000 fca2 	bl	8001a14 <AUDIO_IO_Write>
 80010d0:	2201      	movs	r2, #1
 80010d2:	f240 6102 	movw	r1, #1538	; 0x602
 80010d6:	4620      	mov	r0, r4
 80010d8:	f000 fc9c 	bl	8001a14 <AUDIO_IO_Write>
 80010dc:	2200      	movs	r2, #0
 80010de:	f240 6104 	movw	r1, #1540	; 0x604
 80010e2:	4620      	mov	r0, r4
 80010e4:	f000 fc96 	bl	8001a14 <AUDIO_IO_Write>
 80010e8:	2200      	movs	r2, #0
 80010ea:	4620      	mov	r0, r4
 80010ec:	f240 6105 	movw	r1, #1541	; 0x605
 80010f0:	f000 fc90 	bl	8001a14 <AUDIO_IO_Write>
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
    break;    
  }  
  return counter;
}
 80010f4:	2000      	movs	r0, #0
 80010f6:	bd10      	pop	{r4, pc}

080010f8 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80010f8:	b508      	push	{r3, lr}
  uint32_t counter = 0;
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80010fa:	f245 6322 	movw	r3, #22050	; 0x5622
 80010fe:	b2c0      	uxtb	r0, r0
 8001100:	4299      	cmp	r1, r3
 8001102:	d01f      	beq.n	8001144 <wm8994_SetFrequency+0x4c>
 8001104:	d80b      	bhi.n	800111e <wm8994_SetFrequency+0x26>
 8001106:	f642 3311 	movw	r3, #11025	; 0x2b11
 800110a:	4299      	cmp	r1, r3
 800110c:	d018      	beq.n	8001140 <wm8994_SetFrequency+0x48>
 800110e:	f5b1 5f7a 	cmp.w	r1, #16000	; 0x3e80
 8001112:	d011      	beq.n	8001138 <wm8994_SetFrequency+0x40>
 8001114:	f5b1 5ffa 	cmp.w	r1, #8000	; 0x1f40
 8001118:	d116      	bne.n	8001148 <wm8994_SetFrequency+0x50>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800111a:	2203      	movs	r2, #3
 800111c:	e015      	b.n	800114a <wm8994_SetFrequency+0x52>
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  uint32_t counter = 0;
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800111e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8001122:	4299      	cmp	r1, r3
 8001124:	d010      	beq.n	8001148 <wm8994_SetFrequency+0x50>
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <wm8994_SetFrequency+0x60>)
 8001128:	4299      	cmp	r1, r3
 800112a:	d007      	beq.n	800113c <wm8994_SetFrequency+0x44>
 800112c:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001130:	4299      	cmp	r1, r3
 8001132:	d109      	bne.n	8001148 <wm8994_SetFrequency+0x50>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001134:	2273      	movs	r2, #115	; 0x73
 8001136:	e008      	b.n	800114a <wm8994_SetFrequency+0x52>
 8001138:	2233      	movs	r2, #51	; 0x33
 800113a:	e006      	b.n	800114a <wm8994_SetFrequency+0x52>
 800113c:	22a3      	movs	r2, #163	; 0xa3
 800113e:	e004      	b.n	800114a <wm8994_SetFrequency+0x52>
 8001140:	2213      	movs	r2, #19
 8001142:	e002      	b.n	800114a <wm8994_SetFrequency+0x52>
 8001144:	2243      	movs	r2, #67	; 0x43
 8001146:	e000      	b.n	800114a <wm8994_SetFrequency+0x52>
 8001148:	2283      	movs	r2, #131	; 0x83
 800114a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800114e:	f000 fc61 	bl	8001a14 <AUDIO_IO_Write>
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
    break; 
  }
  return counter;
}
 8001152:	2000      	movs	r0, #0
 8001154:	bd08      	pop	{r3, pc}
 8001156:	bf00      	nop
 8001158:	00017700 	.word	0x00017700

0800115c <wm8994_Reset>:
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800115c:	2200      	movs	r2, #0
 800115e:	b2c0      	uxtb	r0, r0
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8001160:	b508      	push	{r3, lr}
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001162:	4611      	mov	r1, r2
 8001164:	f000 fc56 	bl	8001a14 <AUDIO_IO_Write>
{
  uint32_t counter = 0;
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
  outputEnabled = 0;
 8001168:	2000      	movs	r0, #0
 800116a:	4b02      	ldr	r3, [pc, #8]	; (8001174 <wm8994_Reset+0x18>)
 800116c:	6018      	str	r0, [r3, #0]
  inputEnabled=0;
 800116e:	4b02      	ldr	r3, [pc, #8]	; (8001178 <wm8994_Reset+0x1c>)
 8001170:	6018      	str	r0, [r3, #0]

  return counter;
}
 8001172:	bd08      	pop	{r3, pc}
 8001174:	200142b8 	.word	0x200142b8
 8001178:	200142b4 	.word	0x200142b4

0800117c <wm8994_DeInit>:
  * @retval  None
  */
void wm8994_DeInit(void)
{
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800117c:	f000 bc48 	b.w	8001a10 <AUDIO_IO_DeInit>

08001180 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8001180:	b510      	push	{r4, lr}
 8001182:	4604      	mov	r4, r0
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001184:	f000 fc76 	bl	8001a74 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8001188:	2100      	movs	r1, #0
 800118a:	b2e0      	uxtb	r0, r4
 800118c:	f000 fc54 	bl	8001a38 <AUDIO_IO_Read>
}
 8001190:	bd10      	pop	{r4, pc}
	...

08001194 <wm8994_SetMute>:
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
  uint32_t counter = 0;
  
  if (outputEnabled != 0)
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <wm8994_SetMute+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001198:	b510      	push	{r4, lr}
  uint32_t counter = 0;
  
  if (outputEnabled != 0)
 800119a:	b1c3      	cbz	r3, 80011ce <wm8994_SetMute+0x3a>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800119c:	2901      	cmp	r1, #1
 800119e:	b2c4      	uxtb	r4, r0
 80011a0:	d109      	bne.n	80011b6 <wm8994_SetMute+0x22>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80011a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80011aa:	4620      	mov	r0, r4
 80011ac:	f000 fc32 	bl	8001a14 <AUDIO_IO_Write>
 80011b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b4:	e006      	b.n	80011c4 <wm8994_SetMute+0x30>
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80011bc:	4620      	mov	r0, r4
 80011be:	f000 fc29 	bl	8001a14 <AUDIO_IO_Write>
 80011c2:	2200      	movs	r2, #0
 80011c4:	f240 4122 	movw	r1, #1058	; 0x422
 80011c8:	4620      	mov	r0, r4
 80011ca:	f000 fc23 	bl	8001a14 <AUDIO_IO_Write>
      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
    }
  }
  return counter;
}
 80011ce:	2000      	movs	r0, #0
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	bf00      	nop
 80011d4:	200142b8 	.word	0x200142b8

080011d8 <wm8994_Play>:
{
  uint32_t counter = 0;
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80011d8:	2100      	movs	r1, #0
 80011da:	f7ff bfdb 	b.w	8001194 <wm8994_SetMute>

080011de <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80011de:	b538      	push	{r3, r4, r5, lr}
  uint32_t counter = 0;
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80011e0:	2101      	movs	r1, #1
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80011e2:	4605      	mov	r5, r0
  uint32_t counter = 0;
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80011e4:	f7ff ffd6 	bl	8001194 <wm8994_SetMute>
 80011e8:	4604      	mov	r4, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80011ea:	2201      	movs	r2, #1
 80011ec:	b2e8      	uxtb	r0, r5
 80011ee:	2102      	movs	r1, #2
 80011f0:	f000 fc10 	bl	8001a14 <AUDIO_IO_Write>
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 
  return counter;
}
 80011f4:	4620      	mov	r0, r4
 80011f6:	bd38      	pop	{r3, r4, r5, pc}

080011f8 <wm8994_Resume>:
{
  uint32_t counter = 0;
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80011f8:	2100      	movs	r1, #0
 80011fa:	f7ff bfcb 	b.w	8001194 <wm8994_SetMute>
	...

08001200 <wm8994_SetVolume>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
  uint32_t counter = 0;
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001200:	2964      	cmp	r1, #100	; 0x64
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t counter = 0;
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001206:	bf98      	it	ls
 8001208:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
 800120c:	f04f 0764 	mov.w	r7, #100	; 0x64
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001210:	4605      	mov	r5, r0
 8001212:	460c      	mov	r4, r1
  uint32_t counter = 0;
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001214:	bf98      	it	ls
 8001216:	fb93 f7f7 	sdivls	r7, r3, r7

  /* Output volume */
  if (outputEnabled != 0)
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <wm8994_SetVolume+0x100>)
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
  uint32_t counter = 0;
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800121c:	bf98      	it	ls
 800121e:	b2ff      	uxtbls	r7, r7

  /* Output volume */
  if (outputEnabled != 0)
 8001220:	681e      	ldr	r6, [r3, #0]
 8001222:	2e00      	cmp	r6, #0
 8001224:	d03f      	beq.n	80012a6 <wm8994_SetVolume+0xa6>
  {
    if(convertedvol > 0x3E)
 8001226:	2f3e      	cmp	r7, #62	; 0x3e
 8001228:	d91b      	bls.n	8001262 <wm8994_SetVolume+0x62>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800122a:	b2ef      	uxtb	r7, r5
  if (outputEnabled != 0)
  {
    if(convertedvol > 0x3E)
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800122c:	2100      	movs	r1, #0
 800122e:	f7ff ffb1 	bl	8001194 <wm8994_SetMute>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001232:	f240 127f 	movw	r2, #383	; 0x17f
 8001236:	211c      	movs	r1, #28
  if (outputEnabled != 0)
  {
    if(convertedvol > 0x3E)
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001238:	4606      	mov	r6, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800123a:	4638      	mov	r0, r7
 800123c:	f000 fbea 	bl	8001a14 <AUDIO_IO_Write>
 8001240:	f240 127f 	movw	r2, #383	; 0x17f
 8001244:	211d      	movs	r1, #29
 8001246:	4638      	mov	r0, r7
 8001248:	f000 fbe4 	bl	8001a14 <AUDIO_IO_Write>
 800124c:	f240 127f 	movw	r2, #383	; 0x17f
 8001250:	2126      	movs	r1, #38	; 0x26
 8001252:	4638      	mov	r0, r7
 8001254:	f000 fbde 	bl	8001a14 <AUDIO_IO_Write>
 8001258:	f240 127f 	movw	r2, #383	; 0x17f
 800125c:	2127      	movs	r1, #39	; 0x27
 800125e:	4638      	mov	r0, r7
 8001260:	e01f      	b.n	80012a2 <wm8994_SetVolume+0xa2>
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
    }
    else if (Volume == 0)
 8001262:	b921      	cbnz	r1, 800126e <wm8994_SetVolume+0x6e>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001264:	2101      	movs	r1, #1
 8001266:	f7ff ff95 	bl	8001194 <wm8994_SetMute>
 800126a:	4606      	mov	r6, r0
 800126c:	e01b      	b.n	80012a6 <wm8994_SetVolume+0xa6>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800126e:	fa5f f885 	uxtb.w	r8, r5
 8001272:	f447 77a0 	orr.w	r7, r7, #320	; 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001276:	2100      	movs	r1, #0
 8001278:	f7ff ff8c 	bl	8001194 <wm8994_SetMute>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800127c:	463a      	mov	r2, r7
 800127e:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001280:	4606      	mov	r6, r0
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001282:	4640      	mov	r0, r8
 8001284:	f000 fbc6 	bl	8001a14 <AUDIO_IO_Write>
 8001288:	463a      	mov	r2, r7
 800128a:	211d      	movs	r1, #29
 800128c:	4640      	mov	r0, r8
 800128e:	f000 fbc1 	bl	8001a14 <AUDIO_IO_Write>
 8001292:	463a      	mov	r2, r7
 8001294:	2126      	movs	r1, #38	; 0x26
 8001296:	4640      	mov	r0, r8
 8001298:	f000 fbbc 	bl	8001a14 <AUDIO_IO_Write>
 800129c:	463a      	mov	r2, r7
 800129e:	2127      	movs	r1, #39	; 0x27
 80012a0:	4640      	mov	r0, r8
 80012a2:	f000 fbb7 	bl	8001a14 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <wm8994_SetVolume+0x104>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b32b      	cbz	r3, 80012f8 <wm8994_SetVolume+0xf8>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80012ac:	2c63      	cmp	r4, #99	; 0x63

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80012ae:	b2ed      	uxtb	r5, r5
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80012b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  }

  /* Input volume */
  if (inputEnabled != 0)
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80012b4:	bf9a      	itte	ls
 80012b6:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 80012ba:	2364      	movls	r3, #100	; 0x64
 80012bc:	24ef      	movhi	r4, #239	; 0xef
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80012be:	4628      	mov	r0, r5
  }

  /* Input volume */
  if (inputEnabled != 0)
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80012c0:	bf9e      	ittt	ls
 80012c2:	0124      	lslls	r4, r4, #4
 80012c4:	fb94 f4f3 	sdivls	r4, r4, r3
 80012c8:	b2e4      	uxtbls	r4, r4

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80012ca:	f444 7480 	orr.w	r4, r4, #256	; 0x100
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80012ce:	4622      	mov	r2, r4
 80012d0:	f000 fba0 	bl	8001a14 <AUDIO_IO_Write>
 80012d4:	4622      	mov	r2, r4
 80012d6:	f240 4101 	movw	r1, #1025	; 0x401
 80012da:	4628      	mov	r0, r5
 80012dc:	f000 fb9a 	bl	8001a14 <AUDIO_IO_Write>
 80012e0:	4622      	mov	r2, r4
 80012e2:	f240 4104 	movw	r1, #1028	; 0x404
 80012e6:	4628      	mov	r0, r5
 80012e8:	f000 fb94 	bl	8001a14 <AUDIO_IO_Write>
 80012ec:	4622      	mov	r2, r4
 80012ee:	f240 4105 	movw	r1, #1029	; 0x405
 80012f2:	4628      	mov	r0, r5
 80012f4:	f000 fb8e 	bl	8001a14 <AUDIO_IO_Write>

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
  }
  return counter;
}
 80012f8:	4630      	mov	r0, r6
 80012fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012fe:	bf00      	nop
 8001300:	200142b8 	.word	0x200142b8
 8001304:	200142b4 	.word	0x200142b4

08001308 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800130c:	4681      	mov	r9, r0
 800130e:	461f      	mov	r7, r3
  uint32_t counter = 0;
  uint16_t output_device = OutputInputDevice & 0xFF;
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8001310:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001314:	4692      	mov	sl, r2
  uint16_t power_mgnt_reg_1 = 0;
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8001316:	fa5f f489 	uxtb.w	r4, r9
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
  uint32_t counter = 0;
  uint16_t output_device = OutputInputDevice & 0xFF;
 800131a:	b2ce      	uxtb	r6, r1
  uint16_t input_device = OutputInputDevice & 0xFF00;
  uint16_t power_mgnt_reg_1 = 0;
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800131c:	f000 fbaa 	bl	8001a74 <AUDIO_IO_Init>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001320:	2203      	movs	r2, #3
 8001322:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001326:	4620      	mov	r0, r4
 8001328:	f000 fb74 	bl	8001a14 <AUDIO_IO_Write>
 800132c:	2200      	movs	r2, #0
 800132e:	f640 0117 	movw	r1, #2071	; 0x817
 8001332:	4620      	mov	r0, r4
 8001334:	f000 fb6e 	bl	8001a14 <AUDIO_IO_Write>
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800133e:	4620      	mov	r0, r4
 8001340:	f000 fb68 	bl	8001a14 <AUDIO_IO_Write>
 8001344:	226c      	movs	r2, #108	; 0x6c
 8001346:	2139      	movs	r1, #57	; 0x39
 8001348:	4620      	mov	r0, r4
 800134a:	f000 fb63 	bl	8001a14 <AUDIO_IO_Write>
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
  
    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800134e:	b10d      	cbz	r5, 8001354 <wm8994_Init+0x4c>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001350:	2213      	movs	r2, #19
 8001352:	e000      	b.n	8001356 <wm8994_Init+0x4e>
 8001354:	2203      	movs	r2, #3
 8001356:	2101      	movs	r1, #1
 8001358:	4620      	mov	r0, r4
 800135a:	f000 fb5b 	bl	8001a14 <AUDIO_IO_Write>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800135e:	2032      	movs	r0, #50	; 0x32
 8001360:	f000 fb80 	bl	8001a64 <AUDIO_IO_Delay>
 8001364:	f8df b28c 	ldr.w	fp, [pc, #652]	; 80015f4 <wm8994_Init+0x2ec>
 8001368:	4ba0      	ldr	r3, [pc, #640]	; (80015ec <wm8994_Init+0x2e4>)

  /* Path Configurations for output */
  if (output_device > 0)
 800136a:	2e00      	cmp	r6, #0
 800136c:	d06f      	beq.n	800144e <wm8994_Init+0x146>
  {
    outputEnabled = 1;
 800136e:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 8001372:	2e02      	cmp	r6, #2
  AUDIO_IO_Delay(50);

  /* Path Configurations for output */
  if (output_device > 0)
  {
    outputEnabled = 1;
 8001374:	f8c3 8000 	str.w	r8, [r3]
    switch (output_device)
 8001378:	d04f      	beq.n	800141a <wm8994_Init+0x112>
 800137a:	2e03      	cmp	r6, #3
 800137c:	d00f      	beq.n	800139e <wm8994_Init+0x96>
 800137e:	4546      	cmp	r6, r8
 8001380:	d14b      	bne.n	800141a <wm8994_Init+0x112>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001382:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001386:	2105      	movs	r1, #5
 8001388:	4620      	mov	r0, r4
 800138a:	f000 fb43 	bl	8001a14 <AUDIO_IO_Write>
 800138e:	2200      	movs	r2, #0
 8001390:	f240 6101 	movw	r1, #1537	; 0x601
 8001394:	4620      	mov	r0, r4
 8001396:	f000 fb3d 	bl	8001a14 <AUDIO_IO_Write>
 800139a:	2200      	movs	r2, #0
 800139c:	e02b      	b.n	80013f6 <wm8994_Init+0xee>
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
      break;

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800139e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80013a2:	f640 720f 	movw	r2, #3855	; 0xf0f
 80013a6:	f04f 0105 	mov.w	r1, #5
 80013aa:	4620      	mov	r0, r4
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
      break;

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80013ac:	d11a      	bne.n	80013e4 <wm8994_Init+0xdc>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80013ae:	f000 fb31 	bl	8001a14 <AUDIO_IO_Write>
 80013b2:	4632      	mov	r2, r6
 80013b4:	4620      	mov	r0, r4
 80013b6:	f240 6101 	movw	r1, #1537	; 0x601
 80013ba:	f000 fb2b 	bl	8001a14 <AUDIO_IO_Write>
 80013be:	4632      	mov	r2, r6
 80013c0:	4620      	mov	r0, r4
 80013c2:	f240 6102 	movw	r1, #1538	; 0x602
 80013c6:	f000 fb25 	bl	8001a14 <AUDIO_IO_Write>
 80013ca:	4632      	mov	r2, r6
 80013cc:	4620      	mov	r0, r4
 80013ce:	f240 6104 	movw	r1, #1540	; 0x604
 80013d2:	f000 fb1f 	bl	8001a14 <AUDIO_IO_Write>
 80013d6:	4632      	mov	r2, r6
 80013d8:	f240 6105 	movw	r1, #1541	; 0x605
 80013dc:	4620      	mov	r0, r4
 80013de:	f000 fb19 	bl	8001a14 <AUDIO_IO_Write>
 80013e2:	e038      	b.n	8001456 <wm8994_Init+0x14e>
 80013e4:	f000 fb16 	bl	8001a14 <AUDIO_IO_Write>
 80013e8:	4642      	mov	r2, r8
 80013ea:	f240 6101 	movw	r1, #1537	; 0x601
 80013ee:	4620      	mov	r0, r4
 80013f0:	f000 fb10 	bl	8001a14 <AUDIO_IO_Write>
 80013f4:	4642      	mov	r2, r8
 80013f6:	f240 6102 	movw	r1, #1538	; 0x602
 80013fa:	4620      	mov	r0, r4
 80013fc:	f000 fb0a 	bl	8001a14 <AUDIO_IO_Write>
 8001400:	2202      	movs	r2, #2
 8001402:	f240 6104 	movw	r1, #1540	; 0x604
 8001406:	4620      	mov	r0, r4
 8001408:	f000 fb04 	bl	8001a14 <AUDIO_IO_Write>
 800140c:	2202      	movs	r2, #2
 800140e:	f240 6105 	movw	r1, #1541	; 0x605
 8001412:	4620      	mov	r0, r4
 8001414:	f000 fafe 	bl	8001a14 <AUDIO_IO_Write>
 8001418:	e01a      	b.n	8001450 <wm8994_Init+0x148>
 800141a:	f240 3203 	movw	r2, #771	; 0x303
 800141e:	2105      	movs	r1, #5
 8001420:	4620      	mov	r0, r4
 8001422:	f000 faf7 	bl	8001a14 <AUDIO_IO_Write>
 8001426:	4642      	mov	r2, r8
 8001428:	f240 6101 	movw	r1, #1537	; 0x601
 800142c:	4620      	mov	r0, r4
 800142e:	f000 faf1 	bl	8001a14 <AUDIO_IO_Write>
 8001432:	4642      	mov	r2, r8
 8001434:	f240 6102 	movw	r1, #1538	; 0x602
 8001438:	4620      	mov	r0, r4
 800143a:	f000 faeb 	bl	8001a14 <AUDIO_IO_Write>
 800143e:	2200      	movs	r2, #0
 8001440:	f240 6104 	movw	r1, #1540	; 0x604
 8001444:	4620      	mov	r0, r4
 8001446:	f000 fae5 	bl	8001a14 <AUDIO_IO_Write>
 800144a:	2200      	movs	r2, #0
 800144c:	e7df      	b.n	800140e <wm8994_Init+0x106>
      break;
    }
  }
  else
  {
    outputEnabled = 0;
 800144e:	601e      	str	r6, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8001450:	2d00      	cmp	r5, #0
 8001452:	f000 8099 	beq.w	8001588 <wm8994_Init+0x280>
  {
    inputEnabled = 1;
 8001456:	2301      	movs	r3, #1
    switch (input_device)
 8001458:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  }

  /* Path Configurations for input */
  if (input_device > 0)
  {
    inputEnabled = 1;
 800145c:	f8cb 3000 	str.w	r3, [fp]
    switch (input_device)
 8001460:	d03c      	beq.n	80014dc <wm8994_Init+0x1d4>
 8001462:	d806      	bhi.n	8001472 <wm8994_Init+0x16a>
 8001464:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001468:	f040 8091 	bne.w	800158e <wm8994_Init+0x286>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800146c:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8001470:	e065      	b.n	800153e <wm8994_Init+0x236>

  /* Path Configurations for input */
  if (input_device > 0)
  {
    inputEnabled = 1;
    switch (input_device)
 8001472:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 8001476:	d051      	beq.n	800151c <wm8994_Init+0x214>
 8001478:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800147c:	f040 8087 	bne.w	800158e <wm8994_Init+0x286>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001480:	f640 723c 	movw	r2, #3900	; 0xf3c
 8001484:	2104      	movs	r1, #4
 8001486:	4620      	mov	r0, r4
 8001488:	f000 fac4 	bl	8001a14 <AUDIO_IO_Write>
 800148c:	22db      	movs	r2, #219	; 0xdb
 800148e:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8001492:	4620      	mov	r0, r4
 8001494:	f000 fabe 	bl	8001a14 <AUDIO_IO_Write>
 8001498:	22db      	movs	r2, #219	; 0xdb
 800149a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800149e:	4620      	mov	r0, r4
 80014a0:	f000 fab8 	bl	8001a14 <AUDIO_IO_Write>
 80014a4:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80014a8:	2102      	movs	r1, #2
 80014aa:	4620      	mov	r0, r4
 80014ac:	f000 fab2 	bl	8001a14 <AUDIO_IO_Write>
 80014b0:	2202      	movs	r2, #2
 80014b2:	f240 6106 	movw	r1, #1542	; 0x606
 80014b6:	4620      	mov	r0, r4
 80014b8:	f000 faac 	bl	8001a14 <AUDIO_IO_Write>
 80014bc:	2202      	movs	r2, #2
 80014be:	f240 6107 	movw	r1, #1543	; 0x607
 80014c2:	4620      	mov	r0, r4
 80014c4:	f000 faa6 	bl	8001a14 <AUDIO_IO_Write>
 80014c8:	2202      	movs	r2, #2
 80014ca:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80014ce:	4620      	mov	r0, r4
 80014d0:	f000 faa0 	bl	8001a14 <AUDIO_IO_Write>
 80014d4:	2202      	movs	r2, #2
 80014d6:	f240 6109 	movw	r1, #1545	; 0x609
 80014da:	e049      	b.n	8001570 <wm8994_Init+0x268>
 80014dc:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80014e0:	2104      	movs	r1, #4
 80014e2:	4620      	mov	r0, r4
 80014e4:	f000 fa96 	bl	8001a14 <AUDIO_IO_Write>
 80014e8:	22db      	movs	r2, #219	; 0xdb
 80014ea:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80014ee:	4620      	mov	r0, r4
 80014f0:	f000 fa90 	bl	8001a14 <AUDIO_IO_Write>
 80014f4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80014f8:	2102      	movs	r1, #2
 80014fa:	4620      	mov	r0, r4
 80014fc:	f000 fa8a 	bl	8001a14 <AUDIO_IO_Write>
 8001500:	2202      	movs	r2, #2
 8001502:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001506:	4620      	mov	r0, r4
 8001508:	f000 fa84 	bl	8001a14 <AUDIO_IO_Write>
 800150c:	2202      	movs	r2, #2
 800150e:	f240 6109 	movw	r1, #1545	; 0x609
 8001512:	4620      	mov	r0, r4
 8001514:	f000 fa7e 	bl	8001a14 <AUDIO_IO_Write>
 8001518:	220e      	movs	r2, #14
 800151a:	e02d      	b.n	8001578 <wm8994_Init+0x270>
 800151c:	2211      	movs	r2, #17
 800151e:	2128      	movs	r1, #40	; 0x28
 8001520:	4620      	mov	r0, r4
 8001522:	f000 fa77 	bl	8001a14 <AUDIO_IO_Write>
 8001526:	2235      	movs	r2, #53	; 0x35
 8001528:	2129      	movs	r1, #41	; 0x29
 800152a:	4620      	mov	r0, r4
 800152c:	f000 fa72 	bl	8001a14 <AUDIO_IO_Write>
 8001530:	2235      	movs	r2, #53	; 0x35
 8001532:	212a      	movs	r1, #42	; 0x2a
 8001534:	4620      	mov	r0, r4
 8001536:	f000 fa6d 	bl	8001a14 <AUDIO_IO_Write>
 800153a:	f240 3203 	movw	r2, #771	; 0x303
 800153e:	2104      	movs	r1, #4
 8001540:	4620      	mov	r0, r4
 8001542:	f000 fa67 	bl	8001a14 <AUDIO_IO_Write>
 8001546:	22db      	movs	r2, #219	; 0xdb
 8001548:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800154c:	4620      	mov	r0, r4
 800154e:	f000 fa61 	bl	8001a14 <AUDIO_IO_Write>
 8001552:	f246 3250 	movw	r2, #25424	; 0x6350
 8001556:	2102      	movs	r1, #2
 8001558:	4620      	mov	r0, r4
 800155a:	f000 fa5b 	bl	8001a14 <AUDIO_IO_Write>
 800155e:	2202      	movs	r2, #2
 8001560:	f240 6106 	movw	r1, #1542	; 0x606
 8001564:	4620      	mov	r0, r4
 8001566:	f000 fa55 	bl	8001a14 <AUDIO_IO_Write>
 800156a:	2202      	movs	r2, #2
 800156c:	f240 6107 	movw	r1, #1543	; 0x607
 8001570:	4620      	mov	r0, r4
 8001572:	f000 fa4f 	bl	8001a14 <AUDIO_IO_Write>
 8001576:	220d      	movs	r2, #13
 8001578:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800157c:	4620      	mov	r0, r4
 800157e:	f000 fa49 	bl	8001a14 <AUDIO_IO_Write>

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001582:	f04f 0800 	mov.w	r8, #0
      break;
 8001586:	e004      	b.n	8001592 <wm8994_Init+0x28a>
      break;
    }
  }
  else
  {
    inputEnabled = 0;
 8001588:	f8cb 5000 	str.w	r5, [fp]
 800158c:	e7f9      	b.n	8001582 <wm8994_Init+0x27a>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
      break;    
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800158e:	f04f 0801 	mov.w	r8, #1
  {
    inputEnabled = 0;
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8001592:	f245 6322 	movw	r3, #22050	; 0x5622
 8001596:	429f      	cmp	r7, r3
 8001598:	d023      	beq.n	80015e2 <wm8994_Init+0x2da>
 800159a:	d80b      	bhi.n	80015b4 <wm8994_Init+0x2ac>
 800159c:	f642 3311 	movw	r3, #11025	; 0x2b11
 80015a0:	429f      	cmp	r7, r3
 80015a2:	d01c      	beq.n	80015de <wm8994_Init+0x2d6>
 80015a4:	f5b7 5f7a 	cmp.w	r7, #16000	; 0x3e80
 80015a8:	d017      	beq.n	80015da <wm8994_Init+0x2d2>
 80015aa:	f5b7 5ffa 	cmp.w	r7, #8000	; 0x1f40
 80015ae:	d123      	bne.n	80015f8 <wm8994_Init+0x2f0>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80015b0:	2203      	movs	r2, #3
 80015b2:	e022      	b.n	80015fa <wm8994_Init+0x2f2>
  {
    inputEnabled = 0;
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80015b4:	f64a 4344 	movw	r3, #44100	; 0xac44
 80015b8:	429f      	cmp	r7, r3
 80015ba:	d014      	beq.n	80015e6 <wm8994_Init+0x2de>
 80015bc:	d804      	bhi.n	80015c8 <wm8994_Init+0x2c0>
 80015be:	f5b7 4ffa 	cmp.w	r7, #32000	; 0x7d00
 80015c2:	d119      	bne.n	80015f8 <wm8994_Init+0x2f0>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80015c4:	2263      	movs	r2, #99	; 0x63
 80015c6:	e018      	b.n	80015fa <wm8994_Init+0x2f2>
  {
    inputEnabled = 0;
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 80015c8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80015cc:	429f      	cmp	r7, r3
 80015ce:	d013      	beq.n	80015f8 <wm8994_Init+0x2f0>
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <wm8994_Init+0x2e8>)
 80015d2:	429f      	cmp	r7, r3
 80015d4:	d110      	bne.n	80015f8 <wm8994_Init+0x2f0>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80015d6:	22a3      	movs	r2, #163	; 0xa3
 80015d8:	e00f      	b.n	80015fa <wm8994_Init+0x2f2>
 80015da:	2233      	movs	r2, #51	; 0x33
 80015dc:	e00d      	b.n	80015fa <wm8994_Init+0x2f2>
 80015de:	2213      	movs	r2, #19
 80015e0:	e00b      	b.n	80015fa <wm8994_Init+0x2f2>
 80015e2:	2243      	movs	r2, #67	; 0x43
 80015e4:	e009      	b.n	80015fa <wm8994_Init+0x2f2>
 80015e6:	2273      	movs	r2, #115	; 0x73
 80015e8:	e007      	b.n	80015fa <wm8994_Init+0x2f2>
 80015ea:	bf00      	nop
 80015ec:	200142b8 	.word	0x200142b8
 80015f0:	00017700 	.word	0x00017700
 80015f4:	200142b4 	.word	0x200142b4
 80015f8:	2283      	movs	r2, #131	; 0x83
 80015fa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80015fe:	4620      	mov	r0, r4
 8001600:	f000 fa08 	bl	8001a14 <AUDIO_IO_Write>
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
    break; 
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001604:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001608:	f44f 7140 	mov.w	r1, #768	; 0x300
 800160c:	4620      	mov	r0, r4
 800160e:	bf0c      	ite	eq
 8001610:	f244 0218 	movweq	r2, #16408	; 0x4018
 8001614:	f244 0210 	movwne	r2, #16400	; 0x4010
 8001618:	f000 f9fc 	bl	8001a14 <AUDIO_IO_Write>
 800161c:	2200      	movs	r2, #0
 800161e:	f240 3102 	movw	r1, #770	; 0x302
 8001622:	4620      	mov	r0, r4
 8001624:	f000 f9f6 	bl	8001a14 <AUDIO_IO_Write>
 8001628:	220a      	movs	r2, #10
 800162a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800162e:	4620      	mov	r0, r4
 8001630:	f000 f9f0 	bl	8001a14 <AUDIO_IO_Write>
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163a:	4620      	mov	r0, r4
 800163c:	f000 f9ea 	bl	8001a14 <AUDIO_IO_Write>
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);

  if (output_device > 0)  /* Audio output selected */
 8001640:	2e00      	cmp	r6, #0
 8001642:	f000 8083 	beq.w	800174c <wm8994_Init+0x444>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001646:	f44f 7240 	mov.w	r2, #768	; 0x300
 800164a:	2103      	movs	r1, #3
 800164c:	4620      	mov	r0, r4
 800164e:	f000 f9e1 	bl	8001a14 <AUDIO_IO_Write>
 8001652:	2200      	movs	r2, #0
 8001654:	2122      	movs	r1, #34	; 0x22
 8001656:	4620      	mov	r0, r4
 8001658:	f000 f9dc 	bl	8001a14 <AUDIO_IO_Write>
 800165c:	2200      	movs	r2, #0
 800165e:	2123      	movs	r1, #35	; 0x23
 8001660:	4620      	mov	r0, r4
 8001662:	f000 f9d7 	bl	8001a14 <AUDIO_IO_Write>
 8001666:	f44f 7240 	mov.w	r2, #768	; 0x300
 800166a:	2136      	movs	r1, #54	; 0x36
 800166c:	4620      	mov	r0, r4
 800166e:	f000 f9d1 	bl	8001a14 <AUDIO_IO_Write>
 8001672:	f243 0203 	movw	r2, #12291	; 0x3003
 8001676:	2101      	movs	r1, #1
 8001678:	4620      	mov	r0, r4
 800167a:	f000 f9cb 	bl	8001a14 <AUDIO_IO_Write>
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800167e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001682:	f04f 0151 	mov.w	r1, #81	; 0x51
 8001686:	4620      	mov	r0, r4
 8001688:	bf0c      	ite	eq
 800168a:	f240 2205 	movweq	r2, #517	; 0x205
 800168e:	2205      	movne	r2, #5
 8001690:	f000 f9c0 	bl	8001a14 <AUDIO_IO_Write>
 8001694:	f243 3203 	movw	r2, #13059	; 0x3303
 8001698:	2101      	movs	r1, #1
 800169a:	4620      	mov	r0, r4
 800169c:	f000 f9ba 	bl	8001a14 <AUDIO_IO_Write>
 80016a0:	2222      	movs	r2, #34	; 0x22
 80016a2:	2160      	movs	r1, #96	; 0x60
 80016a4:	4620      	mov	r0, r4
 80016a6:	f000 f9b5 	bl	8001a14 <AUDIO_IO_Write>
 80016aa:	f649 7225 	movw	r2, #40741	; 0x9f25
 80016ae:	214c      	movs	r1, #76	; 0x4c
 80016b0:	4620      	mov	r0, r4
 80016b2:	f000 f9af 	bl	8001a14 <AUDIO_IO_Write>

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);

    /* Add Delay */
    AUDIO_IO_Delay(15);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f000 f9d4 	bl	8001a64 <AUDIO_IO_Delay>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80016bc:	2201      	movs	r2, #1
 80016be:	212d      	movs	r1, #45	; 0x2d
 80016c0:	4620      	mov	r0, r4
 80016c2:	f000 f9a7 	bl	8001a14 <AUDIO_IO_Write>
 80016c6:	2201      	movs	r2, #1
 80016c8:	212e      	movs	r1, #46	; 0x2e
 80016ca:	4620      	mov	r0, r4
 80016cc:	f000 f9a2 	bl	8001a14 <AUDIO_IO_Write>
 80016d0:	f44f 724c 	mov.w	r2, #816	; 0x330
 80016d4:	2103      	movs	r1, #3
 80016d6:	4620      	mov	r0, r4
 80016d8:	f000 f99c 	bl	8001a14 <AUDIO_IO_Write>
 80016dc:	2233      	movs	r2, #51	; 0x33
 80016de:	2154      	movs	r1, #84	; 0x54
 80016e0:	4620      	mov	r0, r4
 80016e2:	f000 f997 	bl	8001a14 <AUDIO_IO_Write>

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);

    /* Add Delay */
    AUDIO_IO_Delay(250);
 80016e6:	20fa      	movs	r0, #250	; 0xfa
 80016e8:	f000 f9bc 	bl	8001a64 <AUDIO_IO_Delay>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80016ec:	22ee      	movs	r2, #238	; 0xee
 80016ee:	2160      	movs	r1, #96	; 0x60
 80016f0:	4620      	mov	r0, r4
 80016f2:	f000 f98f 	bl	8001a14 <AUDIO_IO_Write>
 80016f6:	22c0      	movs	r2, #192	; 0xc0
 80016f8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80016fc:	4620      	mov	r0, r4
 80016fe:	f000 f989 	bl	8001a14 <AUDIO_IO_Write>
 8001702:	22c0      	movs	r2, #192	; 0xc0
 8001704:	f240 6111 	movw	r1, #1553	; 0x611
 8001708:	4620      	mov	r0, r4
 800170a:	f000 f983 	bl	8001a14 <AUDIO_IO_Write>
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001714:	4620      	mov	r0, r4
 8001716:	f000 f97d 	bl	8001a14 <AUDIO_IO_Write>
 800171a:	22c0      	movs	r2, #192	; 0xc0
 800171c:	f240 6112 	movw	r1, #1554	; 0x612
 8001720:	4620      	mov	r0, r4
 8001722:	f000 f977 	bl	8001a14 <AUDIO_IO_Write>
 8001726:	22c0      	movs	r2, #192	; 0xc0
 8001728:	f240 6113 	movw	r1, #1555	; 0x613
 800172c:	4620      	mov	r0, r4
 800172e:	f000 f971 	bl	8001a14 <AUDIO_IO_Write>
 8001732:	2200      	movs	r2, #0
 8001734:	f240 4122 	movw	r1, #1058	; 0x422
 8001738:	4620      	mov	r0, r4
 800173a:	f000 f96b 	bl	8001a14 <AUDIO_IO_Write>

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0000);
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800173e:	4651      	mov	r1, sl
 8001740:	4648      	mov	r0, r9
 8001742:	f7ff fd5d 	bl	8001200 <wm8994_SetVolume>
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8001746:	f243 3203 	movw	r2, #13059	; 0x3303
 800174a:	e000      	b.n	800174e <wm8994_Init+0x446>
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
  uint32_t counter = 0;
  uint16_t output_device = OutputInputDevice & 0xFF;
  uint16_t input_device = OutputInputDevice & 0xFF00;
  uint16_t power_mgnt_reg_1 = 0;
 800174c:	4632      	mov	r2, r6
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
  }

  if (input_device > 0) /* Audio input selected */
 800174e:	2d00      	cmp	r5, #0
 8001750:	d04a      	beq.n	80017e8 <wm8994_Init+0x4e0>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001752:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8001756:	d002      	beq.n	800175e <wm8994_Init+0x456>
 8001758:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800175c:	d10e      	bne.n	800177c <wm8994_Init+0x474>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800175e:	f042 0213 	orr.w	r2, r2, #19
 8001762:	2101      	movs	r1, #1
 8001764:	4620      	mov	r0, r4
 8001766:	f000 f955 	bl	8001a14 <AUDIO_IO_Write>
 800176a:	2202      	movs	r2, #2
 800176c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001770:	4620      	mov	r0, r4
 8001772:	f000 f94f 	bl	8001a14 <AUDIO_IO_Write>
 8001776:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800177a:	e017      	b.n	80017ac <wm8994_Init+0x4a4>
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800177c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001780:	d117      	bne.n	80017b2 <wm8994_Init+0x4aa>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001782:	f042 0213 	orr.w	r2, r2, #19
 8001786:	2101      	movs	r1, #1
 8001788:	4620      	mov	r0, r4
 800178a:	f000 f943 	bl	8001a14 <AUDIO_IO_Write>
 800178e:	2202      	movs	r2, #2
 8001790:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001794:	4620      	mov	r0, r4
 8001796:	f000 f93d 	bl	8001a14 <AUDIO_IO_Write>
 800179a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800179e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80017a2:	4620      	mov	r0, r4
 80017a4:	f000 f936 	bl	8001a14 <AUDIO_IO_Write>
 80017a8:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80017ac:	f240 4111 	movw	r1, #1041	; 0x411
 80017b0:	e013      	b.n	80017da <wm8994_Init+0x4d2>
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80017b2:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 80017b6:	d002      	beq.n	80017be <wm8994_Init+0x4b6>
 80017b8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80017bc:	d110      	bne.n	80017e0 <wm8994_Init+0x4d8>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80017be:	220b      	movs	r2, #11
 80017c0:	2118      	movs	r1, #24
 80017c2:	4620      	mov	r0, r4
 80017c4:	f000 f926 	bl	8001a14 <AUDIO_IO_Write>
 80017c8:	220b      	movs	r2, #11
 80017ca:	211a      	movs	r1, #26
 80017cc:	4620      	mov	r0, r4
 80017ce:	f000 f921 	bl	8001a14 <AUDIO_IO_Write>
 80017d2:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80017d6:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80017da:	4620      	mov	r0, r4
 80017dc:	f000 f91a 	bl	8001a14 <AUDIO_IO_Write>

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80017e0:	4651      	mov	r1, sl
 80017e2:	4648      	mov	r0, r9
 80017e4:	f7ff fd0c 	bl	8001200 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
}
 80017e8:	4640      	mov	r0, r8
 80017ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017ee:	bf00      	nop

080017f0 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t counter = 0;

  if (outputEnabled != 0)
 80017f2:	4e19      	ldr	r6, [pc, #100]	; (8001858 <wm8994_Stop+0x68>)
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80017f4:	4604      	mov	r4, r0
 80017f6:	460f      	mov	r7, r1
  uint32_t counter = 0;

  if (outputEnabled != 0)
 80017f8:	6835      	ldr	r5, [r6, #0]
 80017fa:	b355      	cbz	r5, 8001852 <wm8994_Stop+0x62>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80017fc:	2101      	movs	r1, #1
 80017fe:	f7ff fcc9 	bl	8001194 <wm8994_SetMute>

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001802:	2f02      	cmp	r7, #2
  uint32_t counter = 0;

  if (outputEnabled != 0)
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001804:	4605      	mov	r5, r0

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001806:	d024      	beq.n	8001852 <wm8994_Stop+0x62>
       /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001808:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 800180a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001812:	4620      	mov	r0, r4
 8001814:	f000 f8fe 	bl	8001a14 <AUDIO_IO_Write>
 8001818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800181c:	f240 4122 	movw	r1, #1058	; 0x422
 8001820:	4620      	mov	r0, r4
 8001822:	f000 f8f7 	bl	8001a14 <AUDIO_IO_Write>
 8001826:	2200      	movs	r2, #0
 8001828:	212d      	movs	r1, #45	; 0x2d
 800182a:	4620      	mov	r0, r4
 800182c:	f000 f8f2 	bl	8001a14 <AUDIO_IO_Write>
 8001830:	2200      	movs	r2, #0
 8001832:	212e      	movs	r1, #46	; 0x2e
 8001834:	4620      	mov	r0, r4
 8001836:	f000 f8ed 	bl	8001a14 <AUDIO_IO_Write>
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	4620      	mov	r0, r4
 8001840:	f000 f8e8 	bl	8001a14 <AUDIO_IO_Write>
 8001844:	2200      	movs	r2, #0
 8001846:	4620      	mov	r0, r4
 8001848:	4611      	mov	r1, r2
 800184a:	f000 f8e3 	bl	8001a14 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);

      outputEnabled = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	6033      	str	r3, [r6, #0]
    }
  }
  return counter;
}
 8001852:	4628      	mov	r0, r5
 8001854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001856:	bf00      	nop
 8001858:	200142b8 	.word	0x200142b8

0800185c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001862:	f003 fad3 	bl	8004e0c <HAL_I2C_GetState>
 8001866:	2800      	cmp	r0, #0
 8001868:	f040 8092 	bne.w	8001990 <I2Cx_Init+0x134>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800186c:	4b49      	ldr	r3, [pc, #292]	; (8001994 <I2Cx_Init+0x138>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 800186e:	2600      	movs	r6, #0
 8001870:	4c49      	ldr	r4, [pc, #292]	; (8001998 <I2Cx_Init+0x13c>)
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001872:	429d      	cmp	r5, r3
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8001874:	60ae      	str	r6, [r5, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001876:	612e      	str	r6, [r5, #16]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001878:	bf0c      	ite	eq
 800187a:	4a48      	ldreq	r2, [pc, #288]	; (800199c <I2Cx_Init+0x140>)
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800187c:	4a48      	ldrne	r2, [pc, #288]	; (80019a0 <I2Cx_Init+0x144>)
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800187e:	429d      	cmp	r5, r3
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 8001880:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001882:	602a      	str	r2, [r5, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001884:	4a47      	ldr	r2, [pc, #284]	; (80019a4 <I2Cx_Init+0x148>)
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001886:	61ee      	str	r6, [r5, #28]
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001888:	606a      	str	r2, [r5, #4]
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800188a:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800188e:	622e      	str	r6, [r5, #32]
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001890:	60ea      	str	r2, [r5, #12]
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001892:	6b23      	ldr	r3, [r4, #48]	; 0x30
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001894:	d13b      	bne.n	800190e <I2Cx_Init+0xb2>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800189a:	a905      	add	r1, sp, #20
 800189c:	4842      	ldr	r0, [pc, #264]	; (80019a8 <I2Cx_Init+0x14c>)
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800189e:	6323      	str	r3, [r4, #48]	; 0x30
 80018a0:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
 80018a2:	9607      	str	r6, [sp, #28]
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	9b01      	ldr	r3, [sp, #4]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018b0:	2312      	movs	r3, #18
 80018b2:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80018b4:	2302      	movs	r3, #2
 80018b6:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80018b8:	2304      	movs	r3, #4
 80018ba:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018bc:	f002 fdfe 	bl	80044bc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80018c0:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018c4:	a905      	add	r1, sp, #20
 80018c6:	4838      	ldr	r0, [pc, #224]	; (80019a8 <I2Cx_Init+0x14c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80018c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018ca:	f002 fdf7 	bl	80044bc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80018ce:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80018d0:	4632      	mov	r2, r6
 80018d2:	210f      	movs	r1, #15
 80018d4:	2048      	movs	r0, #72	; 0x48
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80018d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018da:	6423      	str	r3, [r4, #64]	; 0x40
 80018dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	9b02      	ldr	r3, [sp, #8]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80018e6:	6a23      	ldr	r3, [r4, #32]
 80018e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ec:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80018ee:	6a23      	ldr	r3, [r4, #32]
 80018f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018f4:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80018f6:	f001 fe69 	bl	80035cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80018fa:	2048      	movs	r0, #72	; 0x48
 80018fc:	f001 fe9e 	bl	800363c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001900:	2049      	movs	r0, #73	; 0x49
 8001902:	4632      	mov	r2, r6
 8001904:	210f      	movs	r1, #15
 8001906:	f001 fe61 	bl	80035cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800190a:	2049      	movs	r0, #73	; 0x49
 800190c:	e03b      	b.n	8001986 <I2Cx_Init+0x12a>
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800190e:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001912:	a905      	add	r1, sp, #20
 8001914:	4825      	ldr	r0, [pc, #148]	; (80019ac <I2Cx_Init+0x150>)
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001916:	6323      	str	r3, [r4, #48]	; 0x30
 8001918:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
    gpio_init_structure.Pull = GPIO_NOPULL;
 800191a:	9607      	str	r6, [sp, #28]
  {
    /* External, camera and Arduino connector I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	9b03      	ldr	r3, [sp, #12]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001928:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800192a:	2312      	movs	r3, #18
 800192c:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800192e:	2302      	movs	r3, #2
 8001930:	9308      	str	r3, [sp, #32]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001932:	2304      	movs	r3, #4
 8001934:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001936:	f002 fdc1 	bl	80044bc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800193a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800193e:	a905      	add	r1, sp, #20
 8001940:	481a      	ldr	r0, [pc, #104]	; (80019ac <I2Cx_Init+0x150>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001942:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001944:	f002 fdba 	bl	80044bc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001948:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800194a:	4632      	mov	r2, r6
 800194c:	210f      	movs	r1, #15
 800194e:	201f      	movs	r0, #31
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001950:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001954:	6423      	str	r3, [r4, #64]	; 0x40
 8001956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	9304      	str	r3, [sp, #16]
 800195e:	9b04      	ldr	r3, [sp, #16]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001960:	6a23      	ldr	r3, [r4, #32]
 8001962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001966:	6223      	str	r3, [r4, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001968:	6a23      	ldr	r3, [r4, #32]
 800196a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800196e:	6223      	str	r3, [r4, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001970:	f001 fe2c 	bl	80035cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001974:	201f      	movs	r0, #31
 8001976:	f001 fe61 	bl	800363c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800197a:	2020      	movs	r0, #32
 800197c:	4632      	mov	r2, r6
 800197e:	210f      	movs	r1, #15
 8001980:	f001 fe24 	bl	80035cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001984:	2020      	movs	r0, #32
 8001986:	f001 fe59 	bl	800363c <HAL_NVIC_EnableIRQ>
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 800198a:	4628      	mov	r0, r5
 800198c:	f003 f865 	bl	8004a5a <HAL_I2C_Init>
  }
}
 8001990:	b00a      	add	sp, #40	; 0x28
 8001992:	bd70      	pop	{r4, r5, r6, pc}
 8001994:	200142bc 	.word	0x200142bc
 8001998:	40023800 	.word	0x40023800
 800199c:	40005c00 	.word	0x40005c00
 80019a0:	40005400 	.word	0x40005400
 80019a4:	40912732 	.word	0x40912732
 80019a8:	40021c00 	.word	0x40021c00
 80019ac:	40020400 	.word	0x40020400

080019b0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80019b0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80019b6:	b085      	sub	sp, #20
 80019b8:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019ba:	9402      	str	r4, [sp, #8]
 80019bc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80019c0:	9401      	str	r4, [sp, #4]
 80019c2:	9c08      	ldr	r4, [sp, #32]
 80019c4:	9400      	str	r4, [sp, #0]
 80019c6:	f003 f965 	bl	8004c94 <HAL_I2C_Mem_Read>

  /* Check the communication status */
  if(status != HAL_OK)
 80019ca:	4604      	mov	r4, r0
 80019cc:	b128      	cbz	r0, 80019da <I2Cx_ReadMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80019ce:	4628      	mov	r0, r5
 80019d0:	f003 f891 	bl	8004af6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80019d4:	4628      	mov	r0, r5
 80019d6:	f7ff ff41 	bl	800185c <I2Cx_Init>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
  }
  return status;    
}
 80019da:	4620      	mov	r0, r4
 80019dc:	b005      	add	sp, #20
 80019de:	bd30      	pop	{r4, r5, pc}

080019e0 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80019e0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019e2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80019e6:	b085      	sub	sp, #20
 80019e8:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019ea:	9402      	str	r4, [sp, #8]
 80019ec:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80019f0:	9401      	str	r4, [sp, #4]
 80019f2:	9c08      	ldr	r4, [sp, #32]
 80019f4:	9400      	str	r4, [sp, #0]
 80019f6:	f003 f897 	bl	8004b28 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 80019fa:	4604      	mov	r4, r0
 80019fc:	b128      	cbz	r0, 8001a0a <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80019fe:	4628      	mov	r0, r5
 8001a00:	f003 f879 	bl	8004af6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001a04:	4628      	mov	r0, r5
 8001a06:	f7ff ff29 	bl	800185c <I2Cx_Init>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
  }
  return status;
}
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	b005      	add	sp, #20
 8001a0e:	bd30      	pop	{r4, r5, pc}

08001a10 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8001a10:	4770      	bx	lr
	...

08001a14 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001a16:	ba52      	rev16	r2, r2
 8001a18:	ac04      	add	r4, sp, #16
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001a1a:	2302      	movs	r3, #2
{
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001a1c:	f824 2d02 	strh.w	r2, [r4, #-2]!
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001a20:	460a      	mov	r2, r1
 8001a22:	4601      	mov	r1, r0
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	9400      	str	r4, [sp, #0]
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <AUDIO_IO_Write+0x20>)
 8001a2a:	f7ff ffd9 	bl	80019e0 <I2Cx_WriteMultiple>
}
 8001a2e:	b004      	add	sp, #16
 8001a30:	bd10      	pop	{r4, pc}
 8001a32:	bf00      	nop
 8001a34:	200142bc 	.word	0x200142bc

08001a38 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	aa04      	add	r2, sp, #16
 8001a3e:	f822 3d02 	strh.w	r3, [r2, #-2]!
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001a42:	2302      	movs	r3, #2
 8001a44:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001a48:	460a      	mov	r2, r1
 8001a4a:	4601      	mov	r1, r0
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <AUDIO_IO_Read+0x28>)
 8001a4e:	f7ff ffaf 	bl	80019b0 <I2Cx_ReadMultiple>
 8001a52:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001a56:	ba40      	rev16	r0, r0
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
  
  read_value = tmp;
  
  return read_value;
}
 8001a58:	b280      	uxth	r0, r0
 8001a5a:	b005      	add	sp, #20
 8001a5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a60:	200142bc 	.word	0x200142bc

08001a64 <AUDIO_IO_Delay>:
 8001a64:	f001 bd92 	b.w	800358c <HAL_Delay>

08001a68 <TS_IO_Init>:
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
  I2Cx_Init(&hI2cAudioHandler);
 8001a68:	4801      	ldr	r0, [pc, #4]	; (8001a70 <TS_IO_Init+0x8>)
 8001a6a:	f7ff bef7 	b.w	800185c <I2Cx_Init>
 8001a6e:	bf00      	nop
 8001a70:	200142bc 	.word	0x200142bc

08001a74 <AUDIO_IO_Init>:
 8001a74:	f7ff bff8 	b.w	8001a68 <TS_IO_Init>

08001a78 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <SAIx_In_DeInit+0x14>)
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001a7c:	681a      	ldr	r2, [r3, #0]
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001a7e:	6003      	str	r3, [r0, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001a80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a84:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8001a86:	f004 bbaf 	b.w	80061e8 <HAL_SAI_DeInit>
 8001a8a:	bf00      	nop
 8001a8c:	40015c24 	.word	0x40015c24
 8001a90:	20014368 	.word	0x20014368

08001a94 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8001a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001a98:	4b34      	ldr	r3, [pc, #208]	; (8001b6c <SAIx_In_Init+0xd8>)
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8001a9a:	b085      	sub	sp, #20
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001a9c:	4d34      	ldr	r5, [pc, #208]	; (8001b70 <SAIx_In_Init+0xdc>)
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001a9e:	2600      	movs	r6, #0
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8001aa0:	9100      	str	r1, [sp, #0]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001aa2:	2701      	movs	r7, #1
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001aa4:	6819      	ldr	r1, [r3, #0]
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001aa6:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001aaa:	602b      	str	r3, [r5, #0]
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001aac:	f04f 0b20 	mov.w	fp, #32
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001ab0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001ab4:	f44f 2980 	mov.w	r9, #262144	; 0x40000
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001ab8:	f04f 0804 	mov.w	r8, #4

  HAL_SAI_Init(&haudio_out_sai);

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001abc:	4c2d      	ldr	r4, [pc, #180]	; (8001b74 <SAIx_In_Init+0xe0>)
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001abe:	6019      	str	r1, [r3, #0]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001ac4:	2180      	movs	r1, #128	; 0x80

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8001ac6:	6068      	str	r0, [r5, #4]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8001ac8:	612b      	str	r3, [r5, #16]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8001aca:	2340      	movs	r3, #64	; 0x40
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_out_sai.SlotInit.SlotNumber = 4;
  haudio_out_sai.SlotInit.SlotActive = SlotActive;

  HAL_SAI_Init(&haudio_out_sai);
 8001acc:	4628      	mov	r0, r5
  __HAL_SAI_DISABLE(&haudio_out_sai);

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001ace:	61ea      	str	r2, [r5, #28]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8001ad0:	642b      	str	r3, [r5, #64]	; 0x40
 8001ad2:	9301      	str	r3, [sp, #4]
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_out_sai.SlotInit.SlotNumber = 4;
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001ad4:	9b00      	ldr	r3, [sp, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8001ad6:	9203      	str	r2, [sp, #12]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8001ad8:	6369      	str	r1, [r5, #52]	; 0x34
 8001ada:	9102      	str	r1, [sp, #8]
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_out_sai.SlotInit.SlotNumber = 4;
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8001adc:	662b      	str	r3, [r5, #96]	; 0x60
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
  haudio_out_sai.Init.AudioMode = SaiOutMode;
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001ade:	616e      	str	r6, [r5, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001ae0:	632e      	str	r6, [r5, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001ae2:	63ae      	str	r6, [r5, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001ae4:	63ef      	str	r7, [r5, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8001ae6:	60ae      	str	r6, [r5, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001ae8:	61af      	str	r7, [r5, #24]
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8001aea:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001aee:	f8c5 a048 	str.w	sl, [r5, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001af2:	64ee      	str	r6, [r5, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001af4:	f8c5 9050 	str.w	r9, [r5, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001af8:	656e      	str	r6, [r5, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001afa:	65ae      	str	r6, [r5, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001afc:	f8c5 805c 	str.w	r8, [r5, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;

  HAL_SAI_Init(&haudio_out_sai);
 8001b00:	f004 faa0 	bl	8006044 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001b04:	481c      	ldr	r0, [pc, #112]	; (8001b78 <SAIx_In_Init+0xe4>)
  __HAL_SAI_DISABLE(&haudio_in_sai);
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001b06:	9a03      	ldr	r2, [sp, #12]
  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001b08:	f8d0 e000 	ldr.w	lr, [r0]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8001b0c:	9b01      	ldr	r3, [sp, #4]
  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001b0e:	f42e 3e80 	bic.w	lr, lr, #65536	; 0x10000

  HAL_SAI_Init(&haudio_out_sai);

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001b12:	6020      	str	r0, [r4, #0]
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8001b14:	9902      	ldr	r1, [sp, #8]
  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001b16:	f8c0 e000 	str.w	lr, [r0]
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_in_sai.SlotInit.SlotNumber = 4;
  haudio_in_sai.SlotInit.SlotActive = SlotActive;

  HAL_SAI_Init(&haudio_in_sai);
 8001b1a:	4620      	mov	r0, r4
  __HAL_SAI_DISABLE(&haudio_in_sai);
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8001b1c:	61e2      	str	r2, [r4, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b1e:	2203      	movs	r2, #3
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8001b20:	6423      	str	r3, [r4, #64]	; 0x40
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_in_sai.SlotInit.SlotNumber = 4;
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001b22:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8001b24:	6062      	str	r2, [r4, #4]
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  haudio_in_sai.SlotInit.SlotNumber = 4;
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001b26:	6623      	str	r3, [r4, #96]	; 0x60
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8001b28:	6166      	str	r6, [r4, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001b2a:	6326      	str	r6, [r4, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8001b2c:	6361      	str	r1, [r4, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001b2e:	63a6      	str	r6, [r4, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001b30:	63e7      	str	r7, [r4, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8001b32:	60a7      	str	r7, [r4, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8001b34:	6126      	str	r6, [r4, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001b36:	61a7      	str	r7, [r4, #24]
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001b38:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001b3c:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001b40:	64e6      	str	r6, [r4, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001b42:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8001b46:	6566      	str	r6, [r4, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001b48:	65a6      	str	r6, [r4, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8001b4a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;

  HAL_SAI_Init(&haudio_in_sai);
 8001b4e:	f004 fa79 	bl	8006044 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001b52:	682a      	ldr	r2, [r5, #0]
 8001b54:	6813      	ldr	r3, [r2, #0]
 8001b56:	ea43 030a 	orr.w	r3, r3, sl
 8001b5a:	6013      	str	r3, [r2, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8001b5c:	6822      	ldr	r2, [r4, #0]
 8001b5e:	6813      	ldr	r3, [r2, #0]
 8001b60:	ea43 030a 	orr.w	r3, r3, sl
 8001b64:	6013      	str	r3, [r2, #0]
}
 8001b66:	b005      	add	sp, #20
 8001b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b6c:	40015c04 	.word	0x40015c04
 8001b70:	2001444c 	.word	0x2001444c
 8001b74:	20014368 	.word	0x20014368
 8001b78:	40015c24 	.word	0x40015c24

08001b7c <BSP_AUDIO_OUT_Error_CallBack>:
 8001b7c:	4770      	bx	lr
	...

08001b80 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001b84:	4c4c      	ldr	r4, [pc, #304]	; (8001cb8 <BSP_AUDIO_OUT_MspInit+0x138>)
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001b86:	b08a      	sub	sp, #40	; 0x28
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b88:	f04f 0802 	mov.w	r8, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001b8c:	2500      	movs	r5, #0
{ 
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001b8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  AUDIO_OUT_SAIx_FS_ENABLE();
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001b90:	2603      	movs	r6, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001b92:	270a      	movs	r7, #10
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8001b94:	4681      	mov	r9, r0
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001b96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001b9a:	a905      	add	r1, sp, #20
 8001b9c:	4847      	ldr	r0, [pc, #284]	; (8001cbc <BSP_AUDIO_OUT_MspInit+0x13c>)
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001b9e:	f04f 0a40 	mov.w	sl, #64	; 0x40
{ 
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001ba2:	6463      	str	r3, [r4, #68]	; 0x44
 8001ba4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001bae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6323      	str	r3, [r4, #48]	; 0x30
 8001bb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8001bc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8001bc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001bd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6323      	str	r3, [r4, #48]	; 0x30
 8001bda:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001bdc:	f8cd 8018 	str.w	r8, [sp, #24]
  AUDIO_OUT_SAIx_CLK_ENABLE();
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001be4:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001be6:	9608      	str	r6, [sp, #32]
  AUDIO_OUT_SAIx_CLK_ENABLE();
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
 8001be8:	9303      	str	r3, [sp, #12]
 8001bea:	9b03      	ldr	r3, [sp, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8001bec:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001bee:	9709      	str	r7, [sp, #36]	; 0x24
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
  AUDIO_OUT_SAIx_FS_ENABLE();
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8001bf0:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001bf2:	f002 fc63 	bl	80044bc <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001bf6:	2320      	movs	r3, #32
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001bf8:	a905      	add	r1, sp, #20
 8001bfa:	4830      	ldr	r0, [pc, #192]	; (8001cbc <BSP_AUDIO_OUT_MspInit+0x13c>)
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8001bfc:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001bfe:	f8cd 8018 	str.w	r8, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c02:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c04:	9608      	str	r6, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8001c06:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001c08:	f002 fc58 	bl	80044bc <HAL_GPIO_Init>
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001c0c:	a905      	add	r1, sp, #20
 8001c0e:	482b      	ldr	r0, [pc, #172]	; (8001cbc <BSP_AUDIO_OUT_MspInit+0x13c>)
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001c10:	f8cd a014 	str.w	sl, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c14:	f8cd 8018 	str.w	r8, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c18:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c1a:	9608      	str	r6, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001c1c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001c1e:	f002 fc4d 	bl	80044bc <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001c22:	2310      	movs	r3, #16
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001c24:	a905      	add	r1, sp, #20
 8001c26:	4825      	ldr	r0, [pc, #148]	; (8001cbc <BSP_AUDIO_OUT_MspInit+0x13c>)
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8001c28:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c2a:	f8cd 8018 	str.w	r8, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c2e:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001c30:	9608      	str	r6, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001c32:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8001c34:	f002 fc42 	bl	80044bc <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001c38:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001c3a:	f8d9 2000 	ldr.w	r2, [r9]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001c3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c42:	6323      	str	r3, [r4, #48]	; 0x30
 8001c44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4a:	9304      	str	r3, [sp, #16]
 8001c4c:	9b04      	ldr	r3, [sp, #16]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <BSP_AUDIO_OUT_MspInit+0x140>)
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d126      	bne.n	8001ca2 <BSP_AUDIO_OUT_MspInit+0x122>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8001c54:	4c1b      	ldr	r4, [pc, #108]	; (8001cc4 <BSP_AUDIO_OUT_MspInit+0x144>)
 8001c56:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8001c5a:	6063      	str	r3, [r4, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001c60:	f8c9 406c 	str.w	r4, [r9, #108]	; 0x6c
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001c64:	4620      	mov	r0, r4
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8001c66:	6123      	str	r3, [r4, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001c6c:	f8c4 a008 	str.w	sl, [r4, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001c70:	6163      	str	r3, [r4, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if(hsai->Instance == AUDIO_OUT_SAIx)
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001c76:	60e5      	str	r5, [r4, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8001c78:	61a3      	str	r3, [r4, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001c7e:	62a6      	str	r6, [r4, #40]	; 0x28
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001c80:	61e3      	str	r3, [r4, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001c86:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001c88:	6223      	str	r3, [r4, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001c8a:	2304      	movs	r3, #4
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001c8c:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001c8e:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001c90:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <BSP_AUDIO_OUT_MspInit+0x148>)
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001c92:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001c96:	6023      	str	r3, [r4, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001c98:	f001 fd8a 	bl	80037b0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f001 fd11 	bl	80036c4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	210e      	movs	r1, #14
 8001ca6:	203c      	movs	r0, #60	; 0x3c
 8001ca8:	f001 fc90 	bl	80035cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001cac:	203c      	movs	r0, #60	; 0x3c
 8001cae:	f001 fcc5 	bl	800363c <HAL_NVIC_EnableIRQ>
}
 8001cb2:	b00a      	add	sp, #40	; 0x28
 8001cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40015c04 	.word	0x40015c04
 8001cc4:	20014308 	.word	0x20014308
 8001cc8:	40026470 	.word	0x40026470

08001ccc <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8001ccc:	b510      	push	{r4, lr}
 8001cce:	b0a2      	sub	sp, #136	; 0x88
 8001cd0:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001cd2:	a801      	add	r0, sp, #4
 8001cd4:	f004 f82a 	bl	8005d2c <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001cd8:	f642 3311 	movw	r3, #11025	; 0x2b11
 8001cdc:	429c      	cmp	r4, r3
 8001cde:	d007      	beq.n	8001cf0 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001ce0:	f245 6322 	movw	r3, #22050	; 0x5622
 8001ce4:	429c      	cmp	r4, r3
 8001ce6:	d003      	beq.n	8001cf0 <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001ce8:	f64a 4344 	movw	r3, #44100	; 0xac44
 8001cec:	429c      	cmp	r4, r3
 8001cee:	d10c      	bne.n	8001d0a <BSP_AUDIO_OUT_ClockConfig+0x3e>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001cf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cf4:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001cf6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cfa:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001cfc:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001d00:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001d06:	2313      	movs	r3, #19
 8001d08:	e00b      	b.n	8001d22 <BSP_AUDIO_OUT_ClockConfig+0x56>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001d0a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d0e:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001d10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d14:	9311      	str	r3, [sp, #68]	; 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8001d16:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001d1a:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001d20:	2301      	movs	r3, #1
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001d22:	a801      	add	r0, sp, #4
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001d24:	930a      	str	r3, [sp, #40]	; 0x28
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001d26:	f003 fc5b 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8001d2a:	b022      	add	sp, #136	; 0x88
 8001d2c:	bd10      	pop	{r4, pc}
	...

08001d30 <BSP_AUDIO_IN_Record>:
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001d30:	b28a      	uxth	r2, r1
 8001d32:	4601      	mov	r1, r0
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <BSP_AUDIO_IN_Record+0x10>)
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8001d36:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001d38:	f004 fab0 	bl	800629c <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	bd08      	pop	{r3, pc}
 8001d40:	20014368 	.word	0x20014368

08001d44 <BSP_AUDIO_IN_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(uint32_t Option)
{
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	4605      	mov	r5, r0
  /* Call the Media layer stop function */
  HAL_SAI_DMAStop(&haudio_in_sai);
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <BSP_AUDIO_IN_Stop+0x30>)
 8001d4a:	f004 fa7d 	bl	8006248 <HAL_SAI_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <BSP_AUDIO_IN_Stop+0x34>)
 8001d50:	4629      	mov	r1, r5
 8001d52:	2034      	movs	r0, #52	; 0x34
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4798      	blx	r3
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	b928      	cbnz	r0, 8001d6a <BSP_AUDIO_IN_Stop+0x26>
  {
    return AUDIO_ERROR;
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8001d5e:	2d01      	cmp	r5, #1
 8001d60:	d105      	bne.n	8001d6e <BSP_AUDIO_IN_Stop+0x2a>
    {
      /* Wait at least 100us */
      HAL_Delay(1);
 8001d62:	4628      	mov	r0, r5
 8001d64:	f001 fc12 	bl	800358c <HAL_Delay>
 8001d68:	e001      	b.n	8001d6e <BSP_AUDIO_IN_Stop+0x2a>
  HAL_SAI_DMAStop(&haudio_in_sai);
  
  /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
  {
    return AUDIO_ERROR;
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	bd38      	pop	{r3, r4, r5, pc}
    {
      /* Wait at least 100us */
      HAL_Delay(1);
    }
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8001d6e:	4620      	mov	r0, r4
  }
}
 8001d70:	bd38      	pop	{r3, r4, r5, pc}
 8001d72:	bf00      	nop
 8001d74:	20014368 	.word	0x20014368
 8001d78:	20042fe0 	.word	0x20042fe0

08001d7c <BSP_AUDIO_IN_Pause>:
/**
  * @brief  Pauses the audio file stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Pause(void)
{    
 8001d7c:	b508      	push	{r3, lr}
  /* Call the Media layer pause function */
  HAL_SAI_DMAPause(&haudio_in_sai);
 8001d7e:	4802      	ldr	r0, [pc, #8]	; (8001d88 <BSP_AUDIO_IN_Pause+0xc>)
 8001d80:	f004 fa52 	bl	8006228 <HAL_SAI_DMAPause>
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
}
 8001d84:	2000      	movs	r0, #0
 8001d86:	bd08      	pop	{r3, pc}
 8001d88:	20014368 	.word	0x20014368

08001d8c <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001d8c:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001d8e:	f00e f9b1 	bl	80100f4 <BSP_AUDIO_IN_TransferComplete_CallBack>
 8001d92:	bd08      	pop	{r3, pc}

08001d94 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
 8001d94:	4770      	bx	lr

08001d96 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8001d96:	b508      	push	{r3, lr}
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001d98:	f7ff fffc 	bl	8001d94 <BSP_AUDIO_IN_HalfTransfer_CallBack>
 8001d9c:	bd08      	pop	{r3, pc}

08001d9e <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8001d9e:	4770      	bx	lr

08001da0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8001da0:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8001da2:	480a      	ldr	r0, [pc, #40]	; (8001dcc <HAL_SAI_ErrorCallback+0x2c>)
 8001da4:	f004 fb0f 	bl	80063c6 <HAL_SAI_GetState>
 8001da8:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <HAL_SAI_ErrorCallback+0x30>)

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001dac:	f005 05ef 	and.w	r5, r5, #239	; 0xef
{
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8001db0:	f004 fb09 	bl	80063c6 <HAL_SAI_GetState>
 8001db4:	4604      	mov	r4, r0

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001db6:	2d02      	cmp	r5, #2
 8001db8:	d101      	bne.n	8001dbe <HAL_SAI_ErrorCallback+0x1e>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001dba:	f7ff fedf 	bl	8001b7c <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001dbe:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001dc2:	2c02      	cmp	r4, #2
 8001dc4:	d101      	bne.n	8001dca <HAL_SAI_ErrorCallback+0x2a>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8001dc6:	f7ff ffea 	bl	8001d9e <BSP_AUDIO_IN_Error_CallBack>
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
 8001dcc:	2001444c 	.word	0x2001444c
 8001dd0:	20014368 	.word	0x20014368

08001dd4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8001dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001dd8:	4c3b      	ldr	r4, [pc, #236]	; (8001ec8 <BSP_AUDIO_IN_MspInit+0xf4>)
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8001dda:	b08a      	sub	sp, #40	; 0x28
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001dde:	2500      	movs	r5, #0
{
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001de0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8001de2:	f44f 6880 	mov.w	r8, #1024	; 0x400
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8001de6:	4606      	mov	r6, r0
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001de8:	a905      	add	r1, sp, #20
{
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001dea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001dee:	4837      	ldr	r0, [pc, #220]	; (8001ecc <BSP_AUDIO_IN_MspInit+0xf8>)
{
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001df0:	6463      	str	r3, [r4, #68]	; 0x44
 8001df2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8001dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e02:	6323      	str	r3, [r4, #48]	; 0x30
 8001e04:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8001e06:	f8cd 8014 	str.w	r8, [sp, #20]

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e0e:	9706      	str	r7, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e10:	9507      	str	r5, [sp, #28]

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8001e12:	9302      	str	r3, [sp, #8]
 8001e14:	9b02      	ldr	r3, [sp, #8]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001e16:	230a      	movs	r3, #10
  AUDIO_IN_SAIx_SD_ENABLE();
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001e18:	9708      	str	r7, [sp, #32]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001e1a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001e1c:	f002 fb4e 	bl	80044bc <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001e22:	a905      	add	r1, sp, #20
 8001e24:	482a      	ldr	r0, [pc, #168]	; (8001ed0 <BSP_AUDIO_IN_MspInit+0xfc>)
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8001e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001e2e:	9506      	str	r5, [sp, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001e34:	9507      	str	r5, [sp, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001e36:	9708      	str	r7, [sp, #32]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8001e38:	9303      	str	r3, [sp, #12]
 8001e3a:	9b03      	ldr	r3, [sp, #12]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8001e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e40:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001e42:	f002 fb3b 	bl	80044bc <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001e46:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001e48:	6832      	ldr	r2, [r6, #0]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001e4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8001e50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	9304      	str	r3, [sp, #16]
 8001e58:	9b04      	ldr	r3, [sp, #16]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <BSP_AUDIO_IN_MspInit+0x100>)
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d120      	bne.n	8001ea2 <BSP_AUDIO_IN_MspInit+0xce>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001e60:	4c1d      	ldr	r4, [pc, #116]	; (8001ed8 <BSP_AUDIO_IN_MspInit+0x104>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e66:	6163      	str	r3, [r4, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001e6c:	6734      	str	r4, [r6, #112]	; 0x70
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001e6e:	4620      	mov	r0, r4
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001e70:	61a3      	str	r3, [r4, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8001e72:	f44f 7380 	mov.w	r3, #256	; 0x100
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
    
  if(hsai->Instance == AUDIO_IN_SAIx)
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001e76:	6065      	str	r5, [r4, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8001e78:	61e3      	str	r3, [r4, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    
  if(hsai->Instance == AUDIO_IN_SAIx)
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001e7e:	60a5      	str	r5, [r4, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001e80:	6223      	str	r3, [r4, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e82:	2303      	movs	r3, #3
  if(hsai->Instance == AUDIO_IN_SAIx)
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001e84:	60e5      	str	r5, [r4, #12]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001e86:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <BSP_AUDIO_IN_MspInit+0x108>)
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001e8a:	f8c4 8010 	str.w	r8, [r4, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001e8e:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001e90:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001e92:	6325      	str	r5, [r4, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001e94:	6023      	str	r3, [r4, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001e96:	63a6      	str	r6, [r4, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001e98:	f001 fc8a 	bl	80037b0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f001 fc11 	bl	80036c4 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	210f      	movs	r1, #15
 8001ea6:	2046      	movs	r0, #70	; 0x46
 8001ea8:	f001 fb90 	bl	80035cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8001eac:	2046      	movs	r0, #70	; 0x46
 8001eae:	f001 fbc5 	bl	800363c <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	2028      	movs	r0, #40	; 0x28
 8001eb8:	f001 fb88 	bl	80035cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8001ebc:	2028      	movs	r0, #40	; 0x28
 8001ebe:	f001 fbbd 	bl	800363c <HAL_NVIC_EnableIRQ>
}
 8001ec2:	b00a      	add	sp, #40	; 0x28
 8001ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40021c00 	.word	0x40021c00
 8001ed4:	40015c24 	.word	0x40015c24
 8001ed8:	200143ec 	.word	0x200143ec
 8001edc:	400264b8 	.word	0x400264b8

08001ee0 <BSP_AUDIO_IN_Init>:
{
  uint8_t ret = AUDIO_ERROR;
  uint32_t deviceid = 0x00;
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001ee0:	f420 7380 	bic.w	r3, r0, #256	; 0x100
 8001ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  * @param  Volume: Initial volume level (in range 0(Mute)..80(+0dB)..100(+17.625dB))
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint16_t InputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8001ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eec:	4605      	mov	r5, r0
 8001eee:	4688      	mov	r8, r1
 8001ef0:	4616      	mov	r6, r2
  uint8_t ret = AUDIO_ERROR;
  uint32_t deviceid = 0x00;
  uint32_t slot_active;

  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001ef2:	d002      	beq.n	8001efa <BSP_AUDIO_IN_Init+0x1a>
      (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2))
  {
    ret = AUDIO_ERROR;
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    /* Disable SAI */
    SAIx_In_DeInit();

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001efa:	4c1b      	ldr	r4, [pc, #108]	; (8001f68 <BSP_AUDIO_IN_Init+0x88>)
    ret = AUDIO_ERROR;
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8001efc:	f7ff fdbc 	bl	8001a78 <SAIx_In_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001f00:	2200      	movs	r2, #0
 8001f02:	4631      	mov	r1, r6
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff fee1 	bl	8001ccc <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <BSP_AUDIO_IN_Init+0x8c>)
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001f0c:	4620      	mov	r0, r4
    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001f0e:	6023      	str	r3, [r4, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001f10:	f004 fa59 	bl	80063c6 <HAL_SAI_GetState>
 8001f14:	4607      	mov	r7, r0
 8001f16:	b938      	cbnz	r0, 8001f28 <BSP_AUDIO_IN_Init+0x48>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8001f18:	4601      	mov	r1, r0
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7ff fe30 	bl	8001b80 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8001f20:	4639      	mov	r1, r7
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff ff56 	bl	8001dd4 <BSP_AUDIO_IN_MspInit>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8001f28:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001f2c:	4c10      	ldr	r4, [pc, #64]	; (8001f70 <BSP_AUDIO_IN_Init+0x90>)
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
    }
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8001f2e:	4632      	mov	r2, r6
 8001f30:	f04f 0001 	mov.w	r0, #1
 8001f34:	bf0c      	ite	eq
 8001f36:	210a      	moveq	r1, #10
 8001f38:	2105      	movne	r1, #5
 8001f3a:	f7ff fdab 	bl	8001a94 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001f3e:	68a3      	ldr	r3, [r4, #8]
 8001f40:	2034      	movs	r0, #52	; 0x34
 8001f42:	4798      	blx	r3

    if((deviceid) == WM8994_ID)
 8001f44:	f648 1394 	movw	r3, #35220	; 0x8994
 8001f48:	4298      	cmp	r0, r3
 8001f4a:	d1d3      	bne.n	8001ef4 <BSP_AUDIO_IN_Init+0x14>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001f4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f4e:	2034      	movs	r0, #52	; 0x34
 8001f50:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <BSP_AUDIO_IN_Init+0x94>)
    }

    if(ret == AUDIO_OK)
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, Volume, AudioFreq);
 8001f54:	4642      	mov	r2, r8
 8001f56:	4629      	mov	r1, r5
    if((deviceid) == WM8994_ID)
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 8001f58:	601c      	str	r4, [r3, #0]
    }

    if(ret == AUDIO_OK)
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, Volume, AudioFreq);
 8001f5a:	2034      	movs	r0, #52	; 0x34
 8001f5c:	6824      	ldr	r4, [r4, #0]
 8001f5e:	4633      	mov	r3, r6
 8001f60:	47a0      	blx	r4
 8001f62:	2000      	movs	r0, #0
    }
  }
  return ret;
}
 8001f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f68:	20014368 	.word	0x20014368
 8001f6c:	40015c24 	.word	0x40015c24
 8001f70:	20010000 	.word	0x20010000
 8001f74:	20042fe0 	.word	0x20042fe0

08001f78 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001f78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001f7c:	4616      	mov	r6, r2
 8001f7e:	461f      	mov	r7, r3
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001f80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f84:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <LL_FillBuffer+0x6c>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001f86:	460d      	mov	r5, r1
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001f88:	f04f 0e34 	mov.w	lr, #52	; 0x34
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001f8c:	605a      	str	r2, [r3, #4]
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001f8e:	4680      	mov	r8, r0
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <LL_FillBuffer+0x70>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001f92:	9808      	ldr	r0, [sp, #32]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001f94:	6811      	ldr	r1, [r2, #0]
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <LL_FillBuffer+0x74>)
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001f98:	60d8      	str	r0, [r3, #12]
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001f9a:	fb0e 2201 	mla	r2, lr, r1, r2
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001f9e:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <LL_FillBuffer+0x6c>)
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001fa0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fa2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fa4:	2a02      	cmp	r2, #2
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001fa6:	bf18      	it	ne
 8001fa8:	2200      	movne	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
 8001fac:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <LL_FillBuffer+0x78>)
 8001fae:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001fb0:	f001 fdb4 	bl	8003b1c <HAL_DMA2D_Init>
 8001fb4:	b998      	cbnz	r0, 8001fde <LL_FillBuffer+0x66>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	480a      	ldr	r0, [pc, #40]	; (8001fe4 <LL_FillBuffer+0x6c>)
 8001fba:	f001 fe7b 	bl	8003cb4 <HAL_DMA2D_ConfigLayer>
 8001fbe:	b970      	cbnz	r0, 8001fde <LL_FillBuffer+0x66>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001fc0:	9700      	str	r7, [sp, #0]
 8001fc2:	4633      	mov	r3, r6
 8001fc4:	462a      	mov	r2, r5
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <LL_FillBuffer+0x6c>)
 8001fca:	f001 fdd3 	bl	8003b74 <HAL_DMA2D_Start>
 8001fce:	b930      	cbnz	r0, 8001fde <LL_FillBuffer+0x66>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <LL_FillBuffer+0x6c>)
      }
    }
  } 
}
 8001fd4:	b002      	add	sp, #8
 8001fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001fda:	f001 bde5 	b.w	8003ba8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8001fde:	b002      	add	sp, #8
 8001fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fe4:	20014570 	.word	0x20014570
 8001fe8:	20014554 	.word	0x20014554
 8001fec:	20042fe4 	.word	0x20042fe4
 8001ff0:	4002b000 	.word	0x4002b000

08001ff4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001ff4:	4a19      	ldr	r2, [pc, #100]	; (800205c <BSP_LCD_LayerDefaultInit+0x68>)
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8001ff6:	2300      	movs	r3, #0
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001ff8:	b530      	push	{r4, r5, lr}
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001ffa:	6812      	ldr	r2, [r2, #0]
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001ffc:	4604      	mov	r4, r0
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001ffe:	2534      	movs	r5, #52	; 0x34
 8002000:	4817      	ldr	r0, [pc, #92]	; (8002060 <BSP_LCD_LayerDefaultInit+0x6c>)
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002002:	b08f      	sub	sp, #60	; 0x3c
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002004:	fb05 0202 	mla	r2, r5, r2, r0
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002008:	9301      	str	r3, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
 800200a:	9303      	str	r3, [sp, #12]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800200c:	9305      	str	r3, [sp, #20]
  layer_cfg.FBStartAdress = FB_Address;
  layer_cfg.Alpha = 255;
  layer_cfg.Alpha0 = 0;
 800200e:	9307      	str	r3, [sp, #28]
  layer_cfg.Backcolor.Blue = 0;
 8002010:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Green = 0;
 8002014:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  layer_cfg.Backcolor.Red = 0;
 8002018:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800201c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002020:	6e15      	ldr	r5, [r2, #96]	; 0x60
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  layer_cfg.FBStartAdress = FB_Address;
 8002022:	910a      	str	r1, [sp, #40]	; 0x28
  layer_cfg.Alpha = 255;
 8002024:	21ff      	movs	r1, #255	; 0xff
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002026:	6e52      	ldr	r2, [r2, #100]	; 0x64
  layer_cfg.Alpha = 255;
  layer_cfg.Alpha0 = 0;
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002028:	9308      	str	r3, [sp, #32]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800202a:	2307      	movs	r3, #7

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
  layer_cfg.WindowY0 = 0;
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800202c:	9204      	str	r2, [sp, #16]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
  layer_cfg.FBStartAdress = FB_Address;
  layer_cfg.Alpha = 255;
 800202e:	9106      	str	r1, [sp, #24]
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002030:	a901      	add	r1, sp, #4
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002032:	920c      	str	r2, [sp, #48]	; 0x30
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002034:	4622      	mov	r2, r4
  layer_cfg.Alpha0 = 0;
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002036:	9309      	str	r3, [sp, #36]	; 0x24
{     
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002038:	9502      	str	r5, [sp, #8]
  layer_cfg.Backcolor.Blue = 0;
  layer_cfg.Backcolor.Green = 0;
  layer_cfg.Backcolor.Red = 0;
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800203a:	950b      	str	r5, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800203c:	f002 ffe6 	bl	800500c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002040:	200c      	movs	r0, #12
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <BSP_LCD_LayerDefaultInit+0x70>)
 8002044:	f04f 31ff 	mov.w	r1, #4294967295
 8002048:	4360      	muls	r0, r4
 800204a:	181a      	adds	r2, r3, r0
 800204c:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 800204e:	4906      	ldr	r1, [pc, #24]	; (8002068 <BSP_LCD_LayerDefaultInit+0x74>)
 8002050:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002052:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002056:	501a      	str	r2, [r3, r0]
}
 8002058:	b00f      	add	sp, #60	; 0x3c
 800205a:	bd30      	pop	{r4, r5, pc}
 800205c:	20014554 	.word	0x20014554
 8002060:	20042fe4 	.word	0x20042fe4
 8002064:	20014558 	.word	0x20014558
 8002068:	20010038 	.word	0x20010038

0800206c <BSP_LCD_SelectLayer>:
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
  ActiveLayer = LayerIndex;
 800206c:	4b01      	ldr	r3, [pc, #4]	; (8002074 <BSP_LCD_SelectLayer+0x8>)
 800206e:	6018      	str	r0, [r3, #0]
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20014554 	.word	0x20014554

08002078 <BSP_LCD_SetTextColor>:
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
  DrawProp[ActiveLayer].TextColor = Color;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <BSP_LCD_SetTextColor+0x10>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	230c      	movs	r3, #12
 800207e:	4353      	muls	r3, r2
 8002080:	4a02      	ldr	r2, [pc, #8]	; (800208c <BSP_LCD_SetTextColor+0x14>)
 8002082:	50d0      	str	r0, [r2, r3]
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20014554 	.word	0x20014554
 800208c:	20014558 	.word	0x20014558

08002090 <BSP_LCD_SetFont>:
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <BSP_LCD_SetFont+0x10>)
 8002092:	210c      	movs	r1, #12
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <BSP_LCD_SetFont+0x14>)
 8002098:	fb01 3302 	mla	r3, r1, r2, r3
 800209c:	6098      	str	r0, [r3, #8]
 800209e:	4770      	bx	lr
 80020a0:	20014554 	.word	0x20014554
 80020a4:	20014558 	.word	0x20014558

080020a8 <BSP_LCD_Clear>:
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <BSP_LCD_Clear+0x24>)
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80020aa:	b513      	push	{r0, r1, r4, lr}
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80020ac:	681c      	ldr	r4, [r3, #0]
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80020ae:	2334      	movs	r3, #52	; 0x34
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <BSP_LCD_Clear+0x28>)
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80020b2:	9001      	str	r0, [sp, #4]
 80020b4:	4620      	mov	r0, r4
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80020b6:	fb03 1104 	mla	r1, r3, r4, r1
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80020ba:	2300      	movs	r3, #0
 80020bc:	315c      	adds	r1, #92	; 0x5c
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	c90e      	ldmia	r1, {r1, r2, r3}
 80020c2:	f7ff ff59 	bl	8001f78 <LL_FillBuffer>
}
 80020c6:	b002      	add	sp, #8
 80020c8:	bd10      	pop	{r4, pc}
 80020ca:	bf00      	nop
 80020cc:	20014554 	.word	0x20014554
 80020d0:	20042fe4 	.word	0x20042fe4

080020d4 <BSP_LCD_DrawPixel>:
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <BSP_LCD_DrawPixel+0x2c>)
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80020d6:	b530      	push	{r4, r5, lr}
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020d8:	681c      	ldr	r4, [r3, #0]
 80020da:	2534      	movs	r5, #52	; 0x34
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <BSP_LCD_DrawPixel+0x30>)
 80020de:	fb05 3304 	mla	r3, r5, r4, r3
 80020e2:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80020e4:	2c02      	cmp	r4, #2
 80020e6:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020ea:	fb04 0101 	mla	r1, r4, r1, r0
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020ee:	d103      	bne.n	80020f8 <BSP_LCD_DrawPixel+0x24>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020f0:	b292      	uxth	r2, r2
 80020f2:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 80020f6:	bd30      	pop	{r4, r5, pc}
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80020f8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80020fc:	bd30      	pop	{r4, r5, pc}
 80020fe:	bf00      	nop
 8002100:	20014554 	.word	0x20014554
 8002104:	20042fe4 	.word	0x20042fe4

08002108 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <BSP_LCD_DisplayChar+0xd0>)
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800210e:	b085      	sub	sp, #20
 8002110:	3a20      	subs	r2, #32
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 8002112:	f04f 0800 	mov.w	r8, #0
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002116:	f8d3 a000 	ldr.w	sl, [r3]
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800211a:	9001      	str	r0, [sp, #4]
 800211c:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800211e:	210c      	movs	r1, #12
 8002120:	482e      	ldr	r0, [pc, #184]	; (80021dc <BSP_LCD_DisplayChar+0xd4>)
 8002122:	fb01 010a 	mla	r1, r1, sl, r0
 8002126:	6888      	ldr	r0, [r1, #8]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002128:	f8b0 9004 	ldrh.w	r9, [r0, #4]
 800212c:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8002130:	f109 0507 	add.w	r5, r9, #7
 8002134:	fb0b f202 	mul.w	r2, fp, r2
 8002138:	10ed      	asrs	r5, r5, #3
 800213a:	fb05 f402 	mul.w	r4, r5, r2
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
 800213e:	ebc9 01c5 	rsb	r1, r9, r5, lsl #3
 8002142:	1ca2      	adds	r2, r4, #2
 8002144:	6804      	ldr	r4, [r0, #0]
 8002146:	4414      	add	r4, r2
      break;
    } 
    
    for (j = 0; j < width; j++)
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002148:	f109 32ff 	add.w	r2, r9, #4294967295
 800214c:	fa52 f381 	uxtab	r3, r2, r1
 8002150:	9303      	str	r3, [sp, #12]
 8002152:	9b02      	ldr	r3, [sp, #8]
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 8002154:	45d8      	cmp	r8, fp
 8002156:	eb03 0208 	add.w	r2, r3, r8
 800215a:	b293      	uxth	r3, r2
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	d238      	bcs.n	80021d2 <BSP_LCD_DisplayChar+0xca>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
    
    switch(((width + 7)/8))
 8002160:	2d01      	cmp	r5, #1
 8002162:	d008      	beq.n	8002176 <BSP_LCD_DisplayChar+0x6e>
 8002164:	2d02      	cmp	r5, #2
 8002166:	d109      	bne.n	800217c <BSP_LCD_DisplayChar+0x74>
    case 1:
      line =  pchar[0];      
      break;
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8002168:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 800216c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8002170:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002174:	e00b      	b.n	800218e <BSP_LCD_DisplayChar+0x86>
    
    switch(((width + 7)/8))
    {
      
    case 1:
      line =  pchar[0];      
 8002176:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 800217a:	e008      	b.n	800218e <BSP_LCD_DisplayChar+0x86>
      line =  (pchar[0]<< 8) | pchar[1];      
      break;
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800217c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8002180:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 8002184:	0236      	lsls	r6, r6, #8
 8002186:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
 800218a:	7826      	ldrb	r6, [r4, #0]
 800218c:	4316      	orrs	r6, r2
      break;
    } 
    
    for (j = 0; j < width; j++)
 800218e:	2700      	movs	r7, #0
 8002190:	45b9      	cmp	r9, r7
 8002192:	d91a      	bls.n	80021ca <BSP_LCD_DisplayChar+0xc2>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002194:	9b03      	ldr	r3, [sp, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	1bd9      	subs	r1, r3, r7
 800219a:	408a      	lsls	r2, r1
 800219c:	4232      	tst	r2, r6
 800219e:	f04f 020c 	mov.w	r2, #12
 80021a2:	d006      	beq.n	80021b2 <BSP_LCD_DisplayChar+0xaa>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80021a4:	9b01      	ldr	r3, [sp, #4]
 80021a6:	fb02 f20a 	mul.w	r2, r2, sl
 80021aa:	19d8      	adds	r0, r3, r7
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <BSP_LCD_DisplayChar+0xd4>)
 80021ae:	589a      	ldr	r2, [r3, r2]
 80021b0:	e005      	b.n	80021be <BSP_LCD_DisplayChar+0xb6>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <BSP_LCD_DisplayChar+0xd4>)
 80021b4:	fb02 320a 	mla	r2, r2, sl, r3
 80021b8:	9b01      	ldr	r3, [sp, #4]
 80021ba:	6852      	ldr	r2, [r2, #4]
 80021bc:	19d8      	adds	r0, r3, r7
 80021be:	9900      	ldr	r1, [sp, #0]
 80021c0:	b280      	uxth	r0, r0
 80021c2:	f7ff ff87 	bl	80020d4 <BSP_LCD_DrawPixel>
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
      break;
    } 
    
    for (j = 0; j < width; j++)
 80021c6:	3701      	adds	r7, #1
 80021c8:	e7e2      	b.n	8002190 <BSP_LCD_DisplayChar+0x88>
  height = DrawProp[ActiveLayer].pFont->Height;
  width  = DrawProp[ActiveLayer].pFont->Width;
  
  offset =  8 *((width + 7)/8) -  width ;
  
  for(i = 0; i < height; i++)
 80021ca:	f108 0801 	add.w	r8, r8, #1
 80021ce:	442c      	add	r4, r5
 80021d0:	e7bf      	b.n	8002152 <BSP_LCD_DisplayChar+0x4a>
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
}
 80021d2:	b005      	add	sp, #20
 80021d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d8:	20014554 	.word	0x20014554
 80021dc:	20014558 	.word	0x20014558

080021e0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80021e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021e4:	4604      	mov	r4, r0
 80021e6:	460e      	mov	r6, r1
 80021e8:	4615      	mov	r5, r2
 80021ea:	ebc5 0c02 	rsb	ip, r5, r2
  uint16_t ref_column = 1, i = 0;
  uint32_t size = 0, xsize = 0; 
  uint8_t  *ptr = Text;
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80021ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 80021f2:	2900      	cmp	r1, #0
 80021f4:	d1f9      	bne.n	80021ea <BSP_LCD_DisplayStringAt+0xa>
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80021f6:	4a22      	ldr	r2, [pc, #136]	; (8002280 <BSP_LCD_DisplayStringAt+0xa0>)
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
  
  switch (Mode)
 80021f8:	2b01      	cmp	r3, #1
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80021fa:	4922      	ldr	r1, [pc, #136]	; (8002284 <BSP_LCD_DisplayStringAt+0xa4>)
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80021fc:	f8d2 e000 	ldr.w	lr, [r2]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002200:	f04f 020c 	mov.w	r2, #12
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002204:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002288 <BSP_LCD_DisplayStringAt+0xa8>
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002208:	fb02 110e 	mla	r1, r2, lr, r1
 800220c:	688f      	ldr	r7, [r1, #8]
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800220e:	f04f 0134 	mov.w	r1, #52	; 0x34
 8002212:	fb01 810e 	mla	r1, r1, lr, r8
  
  /* Get the text size */
  while (*ptr++) size ++ ;
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002216:	88b8      	ldrh	r0, [r7, #4]
 8002218:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800221a:	fbb1 f2f0 	udiv	r2, r1, r0
  
  switch (Mode)
 800221e:	d007      	beq.n	8002230 <BSP_LCD_DisplayStringAt+0x50>
 8002220:	2b02      	cmp	r3, #2
 8002222:	d10b      	bne.n	800223c <BSP_LCD_DisplayStringAt+0x5c>
      ref_column = Xpos;
      break;
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002224:	ebcc 0202 	rsb	r2, ip, r2
 8002228:	fb12 f000 	smulbb	r0, r2, r0
 800222c:	1b00      	subs	r0, r0, r4
 800222e:	e004      	b.n	800223a <BSP_LCD_DisplayStringAt+0x5a>
  
  switch (Mode)
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002230:	ebcc 0202 	rsb	r2, ip, r2
 8002234:	4350      	muls	r0, r2
 8002236:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      ref_column = Xpos;
      break;
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800223a:	b284      	uxth	r4, r0
      break;
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800223c:	b223      	sxth	r3, r4
  {
    ref_column = 1;
 800223e:	46a9      	mov	r9, r5
 8002240:	2b00      	cmp	r3, #0
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002242:	f04f 0334 	mov.w	r3, #52	; 0x34
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
  {
    ref_column = 1;
 8002246:	bfd8      	it	le
 8002248:	2401      	movle	r4, #1
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800224a:	fb03 880e 	mla	r8, r3, lr, r8
 800224e:	ebc5 0309 	rsb	r3, r5, r9
  {
    ref_column = 1;
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002252:	88b8      	ldrh	r0, [r7, #4]
 8002254:	f8d8 1060 	ldr.w	r1, [r8, #96]	; 0x60
 8002258:	b29b      	uxth	r3, r3
 800225a:	f819 2b01 	ldrb.w	r2, [r9], #1
 800225e:	fb00 1313 	mls	r3, r0, r3, r1
 8002262:	b29b      	uxth	r3, r3
 8002264:	4283      	cmp	r3, r0
 8002266:	d308      	bcc.n	800227a <BSP_LCD_DisplayStringAt+0x9a>
 8002268:	b13a      	cbz	r2, 800227a <BSP_LCD_DisplayStringAt+0x9a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800226a:	4620      	mov	r0, r4
 800226c:	4631      	mov	r1, r6
 800226e:	f7ff ff4b 	bl	8002108 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002272:	88b8      	ldrh	r0, [r7, #4]
 8002274:	4420      	add	r0, r4
 8002276:	b284      	uxth	r4, r0
 8002278:	e7e9      	b.n	800224e <BSP_LCD_DisplayStringAt+0x6e>
 800227a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800227e:	bf00      	nop
 8002280:	20014554 	.word	0x20014554
 8002284:	20014558 	.word	0x20014558
 8002288:	20042fe4 	.word	0x20042fe4

0800228c <BSP_LCD_DisplayStringAtLine>:
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp[ActiveLayer].pFont;
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <BSP_LCD_DisplayStringAtLine+0x28>)
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 800228e:	b410      	push	{r4}
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
  return DrawProp[ActiveLayer].pFont;
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	240c      	movs	r4, #12
 8002294:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <BSP_LCD_DisplayStringAtLine+0x2c>)
 8002296:	fb04 3302 	mla	r3, r4, r2, r3
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800229a:	460a      	mov	r2, r1
}
 800229c:	f85d 4b04 	ldr.w	r4, [sp], #4
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	88db      	ldrh	r3, [r3, #6]
 80022a4:	fb13 f000 	smulbb	r0, r3, r0
 80022a8:	2303      	movs	r3, #3
 80022aa:	b281      	uxth	r1, r0
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff bf97 	b.w	80021e0 <BSP_LCD_DisplayStringAt>
 80022b2:	bf00      	nop
 80022b4:	20014554 	.word	0x20014554
 80022b8:	20014558 	.word	0x20014558

080022bc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80022bc:	b508      	push	{r3, lr}
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <BSP_LCD_DisplayOn+0x28>)
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4808      	ldr	r0, [pc, #32]	; (80022e8 <BSP_LCD_DisplayOn+0x2c>)
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	6993      	ldr	r3, [r2, #24]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6193      	str	r3, [r2, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80022d0:	2201      	movs	r2, #1
 80022d2:	f002 fa85 	bl	80047e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80022d6:	2201      	movs	r2, #1
 80022d8:	2108      	movs	r1, #8
 80022da:	4804      	ldr	r0, [pc, #16]	; (80022ec <BSP_LCD_DisplayOn+0x30>)
}
 80022dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void BSP_LCD_DisplayOn(void)
{
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80022e0:	f002 ba7e 	b.w	80047e0 <HAL_GPIO_WritePin>
 80022e4:	20042fe4 	.word	0x20042fe4
 80022e8:	40022000 	.word	0x40022000
 80022ec:	40022800 	.word	0x40022800

080022f0 <BSP_LCD_MspInit>:
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022f0:	4b4b      	ldr	r3, [pc, #300]	; (8002420 <BSP_LCD_MspInit+0x130>)
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80022f2:	484c      	ldr	r0, [pc, #304]	; (8002424 <BSP_LCD_MspInit+0x134>)
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80022fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022fc:	645a      	str	r2, [r3, #68]	; 0x44
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80022fe:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LCD_BL_CTRL_GPIO_CLK_ENABLE();

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002302:	2402      	movs	r4, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002304:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002306:	a909      	add	r1, sp, #36	; 0x24
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002308:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800230c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002310:	4e45      	ldr	r6, [pc, #276]	; (8002428 <BSP_LCD_MspInit+0x138>)
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002312:	9200      	str	r2, [sp, #0]
 8002314:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002318:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
 800231e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002320:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002324:	9201      	str	r2, [sp, #4]
 8002326:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232a:	f042 0210 	orr.w	r2, r2, #16
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
 8002330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002332:	f002 0210 	and.w	r2, r2, #16
 8002336:	9202      	str	r2, [sp, #8]
 8002338:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
 8002342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002344:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002348:	9203      	str	r2, [sp, #12]
 800234a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800234c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800234e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002352:	631a      	str	r2, [r3, #48]	; 0x30
 8002354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002356:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800235a:	9204      	str	r2, [sp, #16]
 800235c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800235e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002364:	631a      	str	r2, [r3, #48]	; 0x30
 8002366:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002368:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800236c:	9205      	str	r2, [sp, #20]
 800236e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
 8002378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800237a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800237e:	9206      	str	r2, [sp, #24]
 8002380:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
 800238a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800238c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002390:	9207      	str	r2, [sp, #28]
 8002392:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800239e:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80023a4:	940c      	str	r4, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80023a6:	950d      	str	r5, [sp, #52]	; 0x34
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOI_CLK_ENABLE();
  __HAL_RCC_GPIOJ_CLK_ENABLE();
  __HAL_RCC_GPIOK_CLK_ENABLE();
  LCD_DISP_GPIO_CLK_ENABLE();
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80023a8:	9308      	str	r3, [sp, #32]
 80023aa:	9b08      	ldr	r3, [sp, #32]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80023ac:	2310      	movs	r3, #16
 80023ae:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	930b      	str	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023b4:	f002 f882 	bl	80044bc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80023b8:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023ba:	a909      	add	r1, sp, #36	; 0x24
 80023bc:	481b      	ldr	r0, [pc, #108]	; (800242c <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023be:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80023c0:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80023c2:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023c4:	f002 f87a 	bl	80044bc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80023c8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80023cc:	a909      	add	r1, sp, #36	; 0x24
 80023ce:	4630      	mov	r0, r6
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023d0:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80023d2:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80023d4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80023d6:	f002 f871 	bl	80044bc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80023da:	f64e 73ff 	movw	r3, #61439	; 0xefff
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80023de:	a909      	add	r1, sp, #36	; 0x24
 80023e0:	4813      	ldr	r0, [pc, #76]	; (8002430 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80023e2:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023e4:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80023e6:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80023e8:	f002 f868 	bl	80044bc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023ec:	940a      	str	r4, [sp, #40]	; 0x28
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80023ee:	23f7      	movs	r3, #247	; 0xf7
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80023f0:	4c10      	ldr	r4, [pc, #64]	; (8002434 <BSP_LCD_MspInit+0x144>)
 80023f2:	a909      	add	r1, sp, #36	; 0x24

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80023f4:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80023f6:	2501      	movs	r5, #1
  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80023f8:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80023fa:	9309      	str	r3, [sp, #36]	; 0x24
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80023fc:	f002 f85e 	bl	80044bc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002400:	a909      	add	r1, sp, #36	; 0x24
 8002402:	4630      	mov	r0, r6
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002404:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002406:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002408:	f002 f858 	bl	80044bc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800240c:	2308      	movs	r3, #8
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800240e:	a909      	add	r1, sp, #36	; 0x24
 8002410:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002412:	950a      	str	r5, [sp, #40]	; 0x28
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002414:	9309      	str	r3, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002416:	f002 f851 	bl	80044bc <HAL_GPIO_Init>
}
 800241a:	b00f      	add	sp, #60	; 0x3c
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40021000 	.word	0x40021000
 8002428:	40022000 	.word	0x40022000
 800242c:	40021800 	.word	0x40021800
 8002430:	40022400 	.word	0x40022400
 8002434:	40022800 	.word	0x40022800

08002438 <BSP_LCD_ClockConfig>:
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <BSP_LCD_ClockConfig+0x18>)
 800243a:	2308      	movs	r3, #8
 800243c:	6003      	str	r3, [r0, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800243e:	23c0      	movs	r3, #192	; 0xc0
 8002440:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002442:	2305      	movs	r3, #5
 8002444:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244a:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800244c:	f003 b8c8 	b.w	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 8002450:	200144d0 	.word	0x200144d0

08002454 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002454:	b510      	push	{r4, lr}
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002456:	2328      	movs	r3, #40	; 0x28
 8002458:	4c26      	ldr	r4, [pc, #152]	; (80024f4 <BSP_LCD_Init+0xa0>)
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800245a:	2100      	movs	r1, #0
{    
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800245c:	6163      	str	r3, [r4, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800245e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002460:	4620      	mov	r0, r4
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002462:	61a3      	str	r3, [r4, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002464:	2335      	movs	r3, #53	; 0x35
 8002466:	61e3      	str	r3, [r4, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002468:	230b      	movs	r3, #11
 800246a:	6223      	str	r3, [r4, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800246c:	f240 131b 	movw	r3, #283	; 0x11b
 8002470:	62a3      	str	r3, [r4, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002472:	f240 2315 	movw	r3, #533	; 0x215
 8002476:	6263      	str	r3, [r4, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002478:	f240 131d 	movw	r3, #285	; 0x11d
 800247c:	6323      	str	r3, [r4, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800247e:	f240 2335 	movw	r3, #565	; 0x235
 8002482:	62e3      	str	r3, [r4, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002484:	f7ff ffd8 	bl	8002438 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002488:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hLtdcHandler.Instance = LTDC;

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800248c:	4620      	mov	r0, r4
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800248e:	6623      	str	r3, [r4, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002490:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002494:	6663      	str	r3, [r4, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800249c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80024a0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024a4:	6063      	str	r3, [r4, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80024a6:	60a3      	str	r3, [r4, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80024a8:	60e3      	str	r3, [r4, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024aa:	6123      	str	r3, [r4, #16]
  hLtdcHandler.Instance = LTDC;
 80024ac:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <BSP_LCD_Init+0xa4>)
 80024ae:	6023      	str	r3, [r4, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80024b0:	f002 fdd5 	bl	800505e <HAL_LTDC_GetState>
 80024b4:	4601      	mov	r1, r0
 80024b6:	b910      	cbnz	r0, 80024be <BSP_LCD_Init+0x6a>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80024b8:	4620      	mov	r0, r4
 80024ba:	f7ff ff19 	bl	80022f0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80024be:	480d      	ldr	r0, [pc, #52]	; (80024f4 <BSP_LCD_Init+0xa0>)
 80024c0:	f002 fd30 	bl	8004f24 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ca:	480c      	ldr	r0, [pc, #48]	; (80024fc <BSP_LCD_Init+0xa8>)
 80024cc:	f002 f988 	bl	80047e0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80024d0:	2201      	movs	r2, #1
 80024d2:	2108      	movs	r1, #8
 80024d4:	480a      	ldr	r0, [pc, #40]	; (8002500 <BSP_LCD_Init+0xac>)
 80024d6:	f002 f983 	bl	80047e0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80024da:	f000 f923 	bl	8002724 <BSP_SDRAM_Init>
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <BSP_LCD_Init+0xb0>)
 80024e0:	210c      	movs	r1, #12
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
  
  return LCD_OK;
}
 80024e2:	2000      	movs	r0, #0
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
  DrawProp[ActiveLayer].pFont = fonts;
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <BSP_LCD_Init+0xb4>)
 80024e8:	fb01 3302 	mla	r3, r1, r2, r3
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <BSP_LCD_Init+0xb8>)
 80024ee:	609a      	str	r2, [r3, #8]
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
  
  return LCD_OK;
}
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	bf00      	nop
 80024f4:	20042fe4 	.word	0x20042fe4
 80024f8:	40016800 	.word	0x40016800
 80024fc:	40022000 	.word	0x40022000
 8002500:	40022800 	.word	0x40022800
 8002504:	20014554 	.word	0x20014554
 8002508:	20014558 	.word	0x20014558
 800250c:	20010038 	.word	0x20010038

08002510 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002514:	4c22      	ldr	r4, [pc, #136]	; (80025a0 <BSP_SDRAM_Initialization_sequence+0x90>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002516:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002518:	4d22      	ldr	r5, [pc, #136]	; (80025a4 <BSP_SDRAM_Initialization_sequence+0x94>)
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 800251a:	f04f 0800 	mov.w	r8, #0
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800251e:	2710      	movs	r7, #16
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002520:	4621      	mov	r1, r4
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002522:	4681      	mov	r9, r0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002528:	4628      	mov	r0, r5
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
  __IO uint32_t tmpmrd = 0;
 800252a:	f8cd 8004 	str.w	r8, [sp, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 800252e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 8002530:	f8c4 800c 	str.w	r8, [r4, #12]
{
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002534:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002538:	f003 ff68 	bl	800640c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800253c:	4630      	mov	r0, r6
 800253e:	f001 f825 	bl	800358c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002542:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002544:	4621      	mov	r1, r4
 8002546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254a:	4628      	mov	r0, r5
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 800254c:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
 800254e:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002552:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002556:	f003 ff59 	bl	800640c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800255a:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800255c:	4621      	mov	r1, r4
 800255e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002562:	4628      	mov	r0, r5
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8002564:	f8c4 800c 	str.w	r8, [r4, #12]
  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002568:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 8;
 800256c:	2308      	movs	r3, #8
 800256e:	60a3      	str	r3, [r4, #8]
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002570:	f003 ff4c 	bl	800640c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002574:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257c:	4621      	mov	r1, r4
 800257e:	4628      	mov	r0, r5

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002580:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002582:	2304      	movs	r3, #4
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
 8002584:	60a6      	str	r6, [r4, #8]
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002586:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
 800258a:	9b01      	ldr	r3, [sp, #4]
 800258c:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800258e:	f003 ff3d 	bl	800640c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002592:	4649      	mov	r1, r9
 8002594:	4628      	mov	r0, r5
 8002596:	f003 ff50 	bl	800643a <HAL_SDRAM_ProgramRefreshRate>
}
 800259a:	b003      	add	sp, #12
 800259c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025a0:	200145b0 	.word	0x200145b0
 80025a4:	2004308c 	.word	0x2004308c

080025a8 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025a8:	4b55      	ldr	r3, [pc, #340]	; (8002700 <BSP_SDRAM_MspInit+0x158>)
 80025aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ac:	f042 0201 	orr.w	r2, r2, #1
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80025b0:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80025b4:	b08e      	sub	sp, #56	; 0x38
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80025b8:	4606      	mov	r6, r0
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80025ba:	ac0e      	add	r4, sp, #56	; 0x38
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80025bc:	4851      	ldr	r0, [pc, #324]	; (8002704 <BSP_SDRAM_MspInit+0x15c>)
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025be:	f002 0201 	and.w	r2, r2, #1
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80025c2:	2500      	movs	r5, #0
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025c4:	9201      	str	r2, [sp, #4]
 80025c6:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80025c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ca:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
 80025d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80025d6:	9202      	str	r2, [sp, #8]
 80025d8:	9a02      	ldr	r2, [sp, #8]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	f042 0204 	orr.w	r2, r2, #4
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
 80025e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e4:	f002 0204 	and.w	r2, r2, #4
 80025e8:	9203      	str	r2, [sp, #12]
 80025ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ee:	f042 0208 	orr.w	r2, r2, #8
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
 80025f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f6:	f002 0208 	and.w	r2, r2, #8
 80025fa:	9204      	str	r2, [sp, #16]
 80025fc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002600:	f042 0210 	orr.w	r2, r2, #16
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
 8002606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002608:	f002 0210 	and.w	r2, r2, #16
 800260c:	9205      	str	r2, [sp, #20]
 800260e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002612:	f042 0220 	orr.w	r2, r2, #32
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	f002 0220 	and.w	r2, r2, #32
 800261e:	9206      	str	r2, [sp, #24]
 8002620:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002628:	631a      	str	r2, [r3, #48]	; 0x30
 800262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002630:	9207      	str	r2, [sp, #28]
 8002632:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002636:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800263c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002640:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002646:	9308      	str	r3, [sp, #32]
 8002648:	9b08      	ldr	r3, [sp, #32]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	930a      	str	r3, [sp, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800264e:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002650:	230c      	movs	r3, #12
 8002652:	930d      	str	r3, [sp, #52]	; 0x34
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002654:	2308      	movs	r3, #8
 8002656:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800265a:	4621      	mov	r1, r4
 800265c:	f001 ff2e 	bl	80044bc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002660:	f24c 7303 	movw	r3, #50947	; 0xc703
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002664:	4621      	mov	r1, r4
 8002666:	4828      	ldr	r0, [pc, #160]	; (8002708 <BSP_SDRAM_MspInit+0x160>)
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002668:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800266a:	f001 ff27 	bl	80044bc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800266e:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002672:	4621      	mov	r1, r4
 8002674:	4825      	ldr	r0, [pc, #148]	; (800270c <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002676:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002678:	f001 ff20 	bl	80044bc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800267c:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002680:	4621      	mov	r1, r4
 8002682:	4823      	ldr	r0, [pc, #140]	; (8002710 <BSP_SDRAM_MspInit+0x168>)
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002684:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002686:	f001 ff19 	bl	80044bc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800268a:	f248 1333 	movw	r3, #33075	; 0x8133
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800268e:	4621      	mov	r1, r4
 8002690:	4820      	ldr	r0, [pc, #128]	; (8002714 <BSP_SDRAM_MspInit+0x16c>)
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002692:	9309      	str	r3, [sp, #36]	; 0x24
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002694:	f001 ff12 	bl	80044bc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002698:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800269a:	4621      	mov	r1, r4
 800269c:	481e      	ldr	r0, [pc, #120]	; (8002718 <BSP_SDRAM_MspInit+0x170>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800269e:	4c1f      	ldr	r4, [pc, #124]	; (800271c <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80026a0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80026a2:	f001 ff0b 	bl	80044bc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80026a6:	2380      	movs	r3, #128	; 0x80
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80026a8:	6325      	str	r5, [r4, #48]	; 0x30
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80026aa:	4620      	mov	r0, r4
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80026ac:	6334      	str	r4, [r6, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80026ae:	60a3      	str	r3, [r4, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80026b0:	f44f 7300 	mov.w	r3, #512	; 0x200
  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80026b4:	6065      	str	r5, [r4, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80026b6:	60e3      	str	r3, [r4, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80026b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
 80026bc:	61e5      	str	r5, [r4, #28]
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80026be:	6123      	str	r3, [r4, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80026c4:	6265      	str	r5, [r4, #36]	; 0x24
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026c6:	6163      	str	r3, [r4, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80026c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80026cc:	62e5      	str	r5, [r4, #44]	; 0x2c
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80026ce:	61a3      	str	r3, [r4, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80026d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80026d4:	63a6      	str	r6, [r4, #56]	; 0x38
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80026d6:	6223      	str	r3, [r4, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80026d8:	2303      	movs	r3, #3
 80026da:	62a3      	str	r3, [r4, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <BSP_SDRAM_MspInit+0x178>)
 80026de:	6023      	str	r3, [r4, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80026e0:	f001 f866 	bl	80037b0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80026e4:	4620      	mov	r0, r4
 80026e6:	f000 ffed 	bl	80036c4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80026ea:	462a      	mov	r2, r5
 80026ec:	210f      	movs	r1, #15
 80026ee:	2038      	movs	r0, #56	; 0x38
 80026f0:	f000 ff6c 	bl	80035cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80026f4:	2038      	movs	r0, #56	; 0x38
 80026f6:	f000 ffa1 	bl	800363c <HAL_NVIC_EnableIRQ>
}
 80026fa:	b00e      	add	sp, #56	; 0x38
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	40020800 	.word	0x40020800
 8002708:	40020c00 	.word	0x40020c00
 800270c:	40021000 	.word	0x40021000
 8002710:	40021400 	.word	0x40021400
 8002714:	40021800 	.word	0x40021800
 8002718:	40021c00 	.word	0x40021c00
 800271c:	200145dc 	.word	0x200145dc
 8002720:	40026410 	.word	0x40026410

08002724 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002724:	b538      	push	{r3, r4, r5, lr}
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002726:	4c1a      	ldr	r4, [pc, #104]	; (8002790 <BSP_SDRAM_Init+0x6c>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
 8002728:	2107      	movs	r1, #7
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <BSP_SDRAM_Init+0x70>)
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 800272c:	2204      	movs	r2, #4
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800272e:	4d1a      	ldr	r5, [pc, #104]	; (8002798 <BSP_SDRAM_Init+0x74>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002730:	4620      	mov	r0, r4
  */
uint8_t BSP_SDRAM_Init(void)
{ 
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002732:	6023      	str	r3, [r4, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002734:	2302      	movs	r3, #2
  Timing.ExitSelfRefreshDelay = 7;
 8002736:	6069      	str	r1, [r5, #4]
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002738:	602b      	str	r3, [r5, #0]
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
 800273a:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 800273c:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 800273e:	61ab      	str	r3, [r5, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002740:	2310      	movs	r3, #16
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
  Timing.RowCycleDelay        = 7;
 8002742:	60e9      	str	r1, [r5, #12]
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002744:	2100      	movs	r1, #0
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002746:	6123      	str	r3, [r4, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002748:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800274a:	6061      	str	r1, [r4, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800274c:	6163      	str	r3, [r4, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800274e:	f44f 7380 	mov.w	r3, #256	; 0x100
  Timing.WriteRecoveryTime    = 2;
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002752:	60a1      	str	r1, [r4, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002754:	61a3      	str	r3, [r4, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002756:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.RPDelay              = 2;
  Timing.RCDDelay             = 2;
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800275a:	60e2      	str	r2, [r4, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800275c:	6223      	str	r3, [r4, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800275e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002762:	61e1      	str	r1, [r4, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002764:	6263      	str	r3, [r4, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002766:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
  Timing.ExitSelfRefreshDelay = 7;
  Timing.SelfRefreshTime      = 4;
 8002768:	60aa      	str	r2, [r5, #8]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800276a:	f7ff ff1d 	bl	80025a8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800276e:	4620      	mov	r0, r4
 8002770:	4629      	mov	r1, r5
 8002772:	f003 fe2b 	bl	80063cc <HAL_SDRAM_Init>
 8002776:	4c09      	ldr	r4, [pc, #36]	; (800279c <BSP_SDRAM_Init+0x78>)
 8002778:	b110      	cbz	r0, 8002780 <BSP_SDRAM_Init+0x5c>
  {
    sdramstatus = SDRAM_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	7023      	strb	r3, [r4, #0]
 800277e:	e000      	b.n	8002782 <BSP_SDRAM_Init+0x5e>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002780:	7020      	strb	r0, [r4, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002782:	f240 6003 	movw	r0, #1539	; 0x603
 8002786:	f7ff fec3 	bl	8002510 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
}
 800278a:	7820      	ldrb	r0, [r4, #0]
 800278c:	bd38      	pop	{r3, r4, r5, pc}
 800278e:	bf00      	nop
 8002790:	2004308c 	.word	0x2004308c
 8002794:	a0000140 	.word	0xa0000140
 8002798:	200145c0 	.word	0x200145c0
 800279c:	20010040 	.word	0x20010040

080027a0 <arm_sqrt_f32>:
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if(in >= 0.0f)
 80027a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 80027a4:	b510      	push	{r4, lr}
    if(in >= 0.0f)
 80027a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 80027aa:	4604      	mov	r4, r0
    if(in >= 0.0f)
 80027ac:	db05      	blt.n	80027ba <arm_sqrt_f32+0x1a>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80027ae:	f011 ff49 	bl	8014644 <sqrtf>
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80027b2:	2000      	movs	r0, #0
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80027b4:	ed84 0a00 	vstr	s0, [r4]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80027b8:	bd10      	pop	{r4, pc}
    }
    else
    {
      *pOut = 0.0f;
 80027ba:	2300      	movs	r3, #0
 80027bc:	6003      	str	r3, [r0, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80027be:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }
 80027c2:	bd10      	pop	{r4, pc}

080027c4 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 80027c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 80027c8:	ea4f 0992 	mov.w	r9, r2, lsr #2

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 80027cc:	4606      	mov	r6, r0
 80027ce:	460d      	mov	r5, r1
 80027d0:	4617      	mov	r7, r2
 80027d2:	4604      	mov	r4, r0

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 80027d4:	46ca      	mov	sl, r9

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80027d6:	4688      	mov	r8, r1
 80027d8:	3420      	adds	r4, #32
 80027da:	f1ba 0f00 	cmp.w	sl, #0
 80027de:	d034      	beq.n	800284a <arm_cmplx_mag_f32+0x86>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
 80027e0:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80027e4:	4640      	mov	r0, r8
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80027e6:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80027ea:	f108 0b0c 	add.w	fp, r8, #12
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80027ee:	ee20 0a00 	vmul.f32	s0, s0, s0
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);


    /* Decrement the loop counter */
    blkCnt--;
 80027f2:	f10a 3aff 	add.w	sl, sl, #4294967295

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80027f6:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80027fa:	f7ff ffd1 	bl	80027a0 <arm_sqrt_f32>

    realIn = *pSrc++;
    imagIn = *pSrc++;
 80027fe:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
    realIn = *pSrc++;
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    realIn = *pSrc++;
 8002802:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002806:	f108 0004 	add.w	r0, r8, #4
 800280a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800280e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002812:	f7ff ffc5 	bl	80027a0 <arm_sqrt_f32>

    realIn = *pSrc++;
    imagIn = *pSrc++;
 8002816:	ed14 0a03 	vldr	s0, [r4, #-12]

    realIn = *pSrc++;
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    realIn = *pSrc++;
 800281a:	ed54 7a04 	vldr	s15, [r4, #-16]
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800281e:	f108 0008 	add.w	r0, r8, #8
 8002822:	ee20 0a00 	vmul.f32	s0, s0, s0

    realIn = *pSrc++;
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002826:	f108 0810 	add.w	r8, r8, #16
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    realIn = *pSrc++;
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800282a:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800282e:	f7ff ffb7 	bl	80027a0 <arm_sqrt_f32>

    realIn = *pSrc++;
    imagIn = *pSrc++;
 8002832:	ed14 0a01 	vldr	s0, [r4, #-4]

    realIn = *pSrc++;
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    realIn = *pSrc++;
 8002836:	ed54 7a02 	vldr	s15, [r4, #-8]
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800283a:	4658      	mov	r0, fp
 800283c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002840:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002844:	f7ff ffac 	bl	80027a0 <arm_sqrt_f32>
 8002848:	e7c6      	b.n	80027d8 <arm_cmplx_mag_f32+0x14>
 800284a:	eb05 1009 	add.w	r0, r5, r9, lsl #4
 800284e:	f007 0703 	and.w	r7, r7, #3
 8002852:	eb06 1449 	add.w	r4, r6, r9, lsl #5
 8002856:	eb00 0787 	add.w	r7, r0, r7, lsl #2

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;

  while(blkCnt > 0u)
 800285a:	42b8      	cmp	r0, r7
 800285c:	f104 0408 	add.w	r4, r4, #8
 8002860:	d00c      	beq.n	800287c <arm_cmplx_mag_f32+0xb8>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
    imagIn = *pSrc++;
 8002862:	ed14 0a01 	vldr	s0, [r4, #-4]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8002866:	1d05      	adds	r5, r0, #4
  blkCnt = numSamples % 0x4u;

  while(blkCnt > 0u)
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8002868:	ed54 7a02 	vldr	s15, [r4, #-8]
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800286c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8002870:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8002874:	f7ff ff94 	bl	80027a0 <arm_sqrt_f32>
 8002878:	4628      	mov	r0, r5
 800287a:	e7ee      	b.n	800285a <arm_cmplx_mag_f32+0x96>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 800287c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002880 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8002880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002884:	4681      	mov	r9, r0
 8002886:	4608      	mov	r0, r1
    uint32_t    L  = S->fftLen;
 8002888:	f8b9 7000 	ldrh.w	r7, [r9]
 800288c:	4606      	mov	r6, r0
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
    const float32_t * tw = (float32_t *) S->pTwiddle;
 800288e:	f8d9 2004 	ldr.w	r2, [r9, #4]

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
    uint32_t    L  = S->fftLen;
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8002892:	eb01 0887 	add.w	r8, r1, r7, lsl #2

    pCol1 = p1;
    pCol2 = p2;

    //    Define new length
    L >>= 1;
 8002896:	0879      	lsrs	r1, r7, #1
void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
    uint32_t    L  = S->fftLen;
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8002898:	4696      	mov	lr, r2
 800289a:	08ff      	lsrs	r7, r7, #3
 800289c:	4644      	mov	r4, r8
    pCol2 = p2;

    //    Define new length
    L >>= 1;
    //    Initialize mid pointers
    pMid1 = p1 + L;
 800289e:	008b      	lsls	r3, r1, #2
 80028a0:	eb02 1707 	add.w	r7, r2, r7, lsl #4
 80028a4:	18c5      	adds	r5, r0, r3
 80028a6:	4443      	add	r3, r8
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80028a8:	ed2d 8b02 	vpush	{d8}
    //    Initialize mid pointers
    pMid1 = p1 + L;
    pMid2 = p2 + L;

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 80028ac:	45be      	cmp	lr, r7
 80028ae:	f106 0610 	add.w	r6, r6, #16
 80028b2:	f105 0510 	add.w	r5, r5, #16
 80028b6:	f103 0310 	add.w	r3, r3, #16
 80028ba:	f104 0410 	add.w	r4, r4, #16
 80028be:	f000 808b 	beq.w	80029d8 <arm_cfft_radix8by2_f32+0x158>
        t1[0] = p1[0];
        t1[1] = p1[1];
        t1[2] = p1[2];
        t1[3] = p1[3];

        t2[0] = p2[0];
 80028c2:	ed14 0a04 	vldr	s0, [r4, #-16]
 80028c6:	f10e 0e10 	add.w	lr, lr, #16
    pMid2 = p2 + L;

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
    {
        t1[0] = p1[0];
 80028ca:	ed16 6a04 	vldr	s12, [r6, #-16]
        t1[1] = p1[1];
        t1[2] = p1[2];
        t1[3] = p1[3];

        t2[0] = p2[0];
        t2[1] = p2[1];
 80028ce:	ed54 0a03 	vldr	s1, [r4, #-12]
        t4[0] = pMid2[0];
        t4[1] = pMid2[1];
        t4[2] = pMid2[2];
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
 80028d2:	ee36 8a00 	vadd.f32	s16, s12, s0

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
    {
        t1[0] = p1[0];
        t1[1] = p1[1];
 80028d6:	ed16 4a03 	vldr	s8, [r6, #-12]
        t3[0] = pMid1[0];
        t3[1] = pMid1[1];
        t3[2] = pMid1[2];
        t3[3] = pMid1[3];

        t4[0] = pMid2[0];
 80028da:	ed53 6a04 	vldr	s13, [r3, #-16]
        *p1++ = t1[0] + t2[0];
        *p1++ = t1[1] + t2[1];
        *p1++ = t1[2] + t2[2];
        *p1++ = t1[3] + t2[3];    // col 1

        t2[0] = t1[0] - t2[0];
 80028de:	ee36 6a40 	vsub.f32	s12, s12, s0
        t3[1] = pMid1[1];
        t3[2] = pMid1[2];
        t3[3] = pMid1[3];

        t4[0] = pMid2[0];
        t4[1] = pMid2[1];
 80028e2:	ed53 4a03 	vldr	s9, [r3, #-12]
        t1[2] = p1[2];
        t1[3] = p1[3];

        t2[0] = p2[0];
        t2[1] = p2[1];
        t2[2] = p2[2];
 80028e6:	ed14 7a02 	vldr	s14, [r4, #-8]
        t2[3] = p2[3];
 80028ea:	ed14 5a01 	vldr	s10, [r4, #-4]

        t3[0] = pMid1[0];
        t3[1] = pMid1[1];
 80028ee:	ed55 2a03 	vldr	s5, [r5, #-12]
        t3[2] = pMid1[2];
 80028f2:	ed15 3a02 	vldr	s6, [r5, #-8]
        t3[3] = pMid1[3];
 80028f6:	ed55 3a01 	vldr	s7, [r5, #-4]

        t4[0] = pMid2[0];
        t4[1] = pMid2[1];
        t4[2] = pMid2[2];
 80028fa:	ed53 7a02 	vldr	s15, [r3, #-8]
        t4[3] = pMid2[3];
 80028fe:	ed53 5a01 	vldr	s11, [r3, #-4]
        t2[0] = p2[0];
        t2[1] = p2[1];
        t2[2] = p2[2];
        t2[3] = p2[3];

        t3[0] = pMid1[0];
 8002902:	ed15 2a04 	vldr	s4, [r5, #-16]
        t4[0] = pMid2[0];
        t4[1] = pMid2[1];
        t4[2] = pMid2[2];
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
 8002906:	ed06 8a04 	vstr	s16, [r6, #-16]
        *p1++ = t1[1] + t2[1];
 800290a:	ee34 8a20 	vadd.f32	s16, s8, s1
    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
    {
        t1[0] = p1[0];
        t1[1] = p1[1];
        t1[2] = p1[2];
 800290e:	ed16 1a02 	vldr	s2, [r6, #-8]
        *p1++ = t1[1] + t2[1];
        *p1++ = t1[2] + t2[2];
        *p1++ = t1[3] + t2[3];    // col 1

        t2[0] = t1[0] - t2[0];
        t2[1] = t1[1] - t2[1];
 8002912:	ee34 4a60 	vsub.f32	s8, s8, s1
    for ( l = L >> 2; l > 0; l-- ) 
    {
        t1[0] = p1[0];
        t1[1] = p1[1];
        t1[2] = p1[2];
        t1[3] = p1[3];
 8002916:	ed56 1a01 	vldr	s3, [r6, #-4]
        t4[1] = pMid2[1];
        t4[2] = pMid2[2];
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
        *p1++ = t1[1] + t2[1];
 800291a:	ed06 8a03 	vstr	s16, [r6, #-12]
        *p1++ = t1[2] + t2[2];
 800291e:	ee31 8a07 	vadd.f32	s16, s2, s14
        *p1++ = t1[3] + t2[3];    // col 1

        t2[0] = t1[0] - t2[0];
        t2[1] = t1[1] - t2[1];
        t2[2] = t1[2] - t2[2];
 8002922:	ee31 7a47 	vsub.f32	s14, s2, s14
        t4[2] = pMid2[2];
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
        *p1++ = t1[1] + t2[1];
        *p1++ = t1[2] + t2[2];
 8002926:	ed06 8a02 	vstr	s16, [r6, #-8]
        *p1++ = t1[3] + t2[3];    // col 1
 800292a:	ee31 8a85 	vadd.f32	s16, s3, s10

        t2[0] = t1[0] - t2[0];
        t2[1] = t1[1] - t2[1];
        t2[2] = t1[2] - t2[2];
        t2[3] = t1[3] - t2[3];    // for col 2
 800292e:	ee31 5ac5 	vsub.f32	s10, s3, s10

        *pMid1++ = t3[0] + t4[0];
 8002932:	ee72 1a26 	vadd.f32	s3, s4, s13
        t4[3] = pMid2[3];

        *p1++ = t1[0] + t2[0];
        *p1++ = t1[1] + t2[1];
        *p1++ = t1[2] + t2[2];
        *p1++ = t1[3] + t2[3];    // col 1
 8002936:	ed06 8a01 	vstr	s16, [r6, #-4]
        *pMid1++ = t3[0] + t4[0];
        *pMid1++ = t3[1] + t4[1];
        *pMid1++ = t3[2] + t4[2];
        *pMid1++ = t3[3] + t4[3]; // col 1

        t4[0] = t4[0] - t3[0];
 800293a:	ee76 6ac2 	vsub.f32	s13, s13, s4
        t2[0] = t1[0] - t2[0];
        t2[1] = t1[1] - t2[1];
        t2[2] = t1[2] - t2[2];
        t2[3] = t1[3] - t2[3];    // for col 2

        *pMid1++ = t3[0] + t4[0];
 800293e:	ed45 1a04 	vstr	s3, [r5, #-16]
        *pMid1++ = t3[1] + t4[1];
 8002942:	ee72 1aa4 	vadd.f32	s3, s5, s9
        *pMid1++ = t3[2] + t4[2];
        *pMid1++ = t3[3] + t4[3]; // col 1

        t4[0] = t4[0] - t3[0];
        t4[1] = t4[1] - t3[1];
 8002946:	ee74 4ae2 	vsub.f32	s9, s9, s5
        t2[1] = t1[1] - t2[1];
        t2[2] = t1[2] - t2[2];
        t2[3] = t1[3] - t2[3];    // for col 2

        *pMid1++ = t3[0] + t4[0];
        *pMid1++ = t3[1] + t4[1];
 800294a:	ed45 1a03 	vstr	s3, [r5, #-12]
        *pMid1++ = t3[2] + t4[2];
 800294e:	ee73 1a27 	vadd.f32	s3, s6, s15
        *pMid1++ = t3[3] + t4[3]; // col 1

        t4[0] = t4[0] - t3[0];
        t4[1] = t4[1] - t3[1];
        t4[2] = t4[2] - t3[2];
 8002952:	ee77 7ac3 	vsub.f32	s15, s15, s6
        t2[2] = t1[2] - t2[2];
        t2[3] = t1[3] - t2[3];    // for col 2

        *pMid1++ = t3[0] + t4[0];
        *pMid1++ = t3[1] + t4[1];
        *pMid1++ = t3[2] + t4[2];
 8002956:	ed45 1a02 	vstr	s3, [r5, #-8]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800295a:	ee73 1aa5 	vadd.f32	s3, s7, s11

        t4[0] = t4[0] - t3[0];
        t4[1] = t4[1] - t3[1];
        t4[2] = t4[2] - t3[2];
        t4[3] = t4[3] - t3[3];    // for col 2
 800295e:	ee75 5ae3 	vsub.f32	s11, s11, s7
        t2[3] = t1[3] - t2[3];    // for col 2

        *pMid1++ = t3[0] + t4[0];
        *pMid1++ = t3[1] + t4[1];
        *pMid1++ = t3[2] + t4[2];
        *pMid1++ = t3[3] + t4[3]; // col 1
 8002962:	ed45 1a01 	vstr	s3, [r5, #-4]
        t4[1] = t4[1] - t3[1];
        t4[2] = t4[2] - t3[2];
        t4[3] = t4[3] - t3[3];    // for col 2

        twR = *tw++;
        twI = *tw++;
 8002966:	ed5e 3a03 	vldr	s7, [lr, #-12]
        t4[0] = t4[0] - t3[0];
        t4[1] = t4[1] - t3[1];
        t4[2] = t4[2] - t3[2];
        t4[3] = t4[3] - t3[3];    // for col 2

        twR = *tw++;
 800296a:	ed1e 3a04 	vldr	s6, [lr, #-16]
        m1 = t2[1] * twI;
        m2 = t2[1] * twR;
        m3 = t2[0] * twI;
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800296e:	ee64 2a23 	vmul.f32	s5, s8, s7
 8002972:	eee6 2a03 	vfma.f32	s5, s12, s6
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8002976:	ee23 6ac6 	vnmul.f32	s12, s7, s12
 800297a:	eea4 6a03 	vfma.f32	s12, s8, s6
        m1 = t2[1] * twI;
        m2 = t2[1] * twR;
        m3 = t2[0] * twI;
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 800297e:	ed44 2a04 	vstr	s5, [r4, #-16]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 8002982:	ed04 6a03 	vstr	s12, [r4, #-12]
        m0 = t4[0] * twI;
        m1 = t4[1] * twR;
        m2 = t4[1] * twI;
        m3 = t4[0] * twR;
        
        *pMid2++ = m0 - m1;
 8002986:	ee23 6a64 	vnmul.f32	s12, s6, s9
 800298a:	eea6 6aa3 	vfma.f32	s12, s13, s7
        *pMid2++ = m2 + m3;
 800298e:	ee66 6a83 	vmul.f32	s13, s13, s6
 8002992:	eee4 6aa3 	vfma.f32	s13, s9, s7
        m0 = t4[0] * twI;
        m1 = t4[1] * twR;
        m2 = t4[1] * twI;
        m3 = t4[0] * twR;
        
        *pMid2++ = m0 - m1;
 8002996:	ed03 6a04 	vstr	s12, [r3, #-16]
        *pMid2++ = m2 + m3;
 800299a:	ed43 6a03 	vstr	s13, [r3, #-12]

        twR = *tw++;
 800299e:	ed1e 6a02 	vldr	s12, [lr, #-8]
        twI = *tw++;
 80029a2:	ed5e 6a01 	vldr	s13, [lr, #-4]
        m0 = t2[2] * twR;
        m1 = t2[3] * twI;
        m2 = t2[3] * twR;
        m3 = t2[2] * twI;
        
        *p2++ = m0 + m1;
 80029a6:	ee65 4a26 	vmul.f32	s9, s10, s13
 80029aa:	eee7 4a06 	vfma.f32	s9, s14, s12
        *p2++ = m2 - m3;
 80029ae:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 80029b2:	eea5 7a06 	vfma.f32	s14, s10, s12
        m0 = t2[2] * twR;
        m1 = t2[3] * twI;
        m2 = t2[3] * twR;
        m3 = t2[2] * twI;
        
        *p2++ = m0 + m1;
 80029b6:	ed44 4a02 	vstr	s9, [r4, #-8]
        *p2++ = m2 - m3;
 80029ba:	ed04 7a01 	vstr	s14, [r4, #-4]
        m0 = t4[2] * twI;
        m1 = t4[3] * twR;
        m2 = t4[3] * twI;
        m3 = t4[2] * twR;
        
        *pMid2++ = m0 - m1;
 80029be:	ee26 7a65 	vnmul.f32	s14, s12, s11
 80029c2:	eea7 7aa6 	vfma.f32	s14, s15, s13
        *pMid2++ = m2 + m3;
 80029c6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029ca:	eee5 7aa6 	vfma.f32	s15, s11, s13
        m0 = t4[2] * twI;
        m1 = t4[3] * twR;
        m2 = t4[3] * twI;
        m3 = t4[2] * twR;
        
        *pMid2++ = m0 - m1;
 80029ce:	ed03 7a02 	vstr	s14, [r3, #-8]
        *pMid2++ = m2 + m3;
 80029d2:	ed43 7a01 	vstr	s15, [r3, #-4]
 80029d6:	e769      	b.n	80028ac <arm_cfft_radix8by2_f32+0x2c>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80029d8:	b28c      	uxth	r4, r1
 80029da:	2302      	movs	r3, #2
 80029dc:	4621      	mov	r1, r4
 80029de:	f000 fa9d 	bl	8002f1c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80029e2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80029e6:	4621      	mov	r1, r4
 80029e8:	4640      	mov	r0, r8
 80029ea:	2302      	movs	r3, #2
}
 80029ec:	ecbd 8b02 	vpop	{d8}
 80029f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80029f4:	f000 ba92 	b.w	8002f1c <arm_radix8_butterfly_f32>

080029f8 <arm_cfft_radix8by4_f32>:
}

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
    uint32_t    L  = S->fftLen >> 1;
 80029f8:	8802      	ldrh	r2, [r0, #0]
 80029fa:	0852      	lsrs	r2, r2, #1
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80029fc:	0093      	lsls	r3, r2, #2
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;

    L >>= 1;
 80029fe:	0852      	lsrs	r2, r2, #1
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
}

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8002a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a04:	ed2d 8b04 	vpush	{d8-d9}
 8002a08:	b08f      	sub	sp, #60	; 0x3c
    uint32_t    L  = S->fftLen >> 1;
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8002a0a:	18cc      	adds	r4, r1, r3
    pEnd1 = p2 - 1;     // points to imaginary values by default
    pEnd2 = p3 - 1;
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8002a0c:	f8d0 b004 	ldr.w	fp, [r0, #4]
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
}

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8002a10:	9101      	str	r1, [sp, #4]
    uint32_t    L  = S->fftLen >> 1;
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
    float32_t * p3 = p2 + L;
 8002a12:	18e6      	adds	r6, r4, r3
    pEnd3 = p4 - 1;
    pEnd4 = pEnd3 + L;

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;

    L >>= 1;
 8002a14:	9208      	str	r2, [sp, #32]
 8002a16:	f1a4 0804 	sub.w	r8, r4, #4
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8002a1a:	9a01      	ldr	r2, [sp, #4]
    uint32_t    L  = S->fftLen >> 1;
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
    float32_t * p3 = p2 + L;
    float32_t * p4 = p3 + L;
 8002a1c:	18f5      	adds	r5, r6, r3
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8002a1e:	ed96 7a00 	vldr	s14, [r6]
 8002a22:	f1a6 0e04 	sub.w	lr, r6, #4
 8002a26:	edd2 7a00 	vldr	s15, [r2]
 8002a2a:	1f2f      	subs	r7, r5, #4
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 8002a2c:	edd6 5a01 	vldr	s11, [r6, #4]
    twMod2 = 2;
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8002a30:	ee37 6a87 	vadd.f32	s12, s15, s14
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002a34:	edd4 4a00 	vldr	s9, [r4]
    twMod3 = 4;
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
    p1sp3_0 = p1[0] - p3[0];
 8002a38:	ee37 7ac7 	vsub.f32	s14, s15, s14
    p1ap3_1 = p1[1] + p3[1];
 8002a3c:	edd2 7a01 	vldr	s15, [r2, #4]
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002a40:	ed95 5a00 	vldr	s10, [r5]
 8002a44:	443b      	add	r3, r7
    twMod4 = 6;

    // TOP
    p1ap3_0 = p1[0] + p3[0];
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 8002a46:	ee77 6aa5 	vadd.f32	s13, s15, s11
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002a4a:	edd4 3a01 	vldr	s7, [r4, #4]

    // TOP
    p1ap3_0 = p1[0] + p3[0];
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];
 8002a4e:	ee77 7ae5 	vsub.f32	s15, s15, s11

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002a52:	ed95 4a01 	vldr	s8, [r5, #4]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002a56:	ee76 5a24 	vadd.f32	s11, s12, s9
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
}

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8002a5a:	9003      	str	r0, [sp, #12]
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002a5c:	ee36 6a64 	vsub.f32	s12, s12, s9
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002a60:	ee75 5a85 	vadd.f32	s11, s11, s10
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002a64:	ee36 6a45 	vsub.f32	s12, s12, s10
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002a68:	ee15 1a90 	vmov	r1, s11
 8002a6c:	f842 1b08 	str.w	r1, [r2], #8
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002a70:	edd4 5a01 	vldr	s11, [r4, #4]
 8002a74:	ed95 3a01 	vldr	s6, [r5, #4]
 8002a78:	ee76 5aa5 	vadd.f32	s11, s13, s11
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002a7c:	9204      	str	r2, [sp, #16]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002a7e:	9a01      	ldr	r2, [sp, #4]

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
 8002a80:	ee76 6ae3 	vsub.f32	s13, s13, s7
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002a84:	ee75 5a83 	vadd.f32	s11, s11, s6

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
 8002a88:	ee76 6ac4 	vsub.f32	s13, s13, s8
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002a8c:	edc2 5a01 	vstr	s11, [r2, #4]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002a90:	ee77 5a23 	vadd.f32	s11, s14, s7
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002a94:	ee37 7a63 	vsub.f32	s14, s14, s7
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002a98:	4622      	mov	r2, r4
 8002a9a:	ee75 5ac4 	vsub.f32	s11, s11, s8
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002a9e:	ee37 7a04 	vadd.f32	s14, s14, s8
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002aa2:	ee15 1a90 	vmov	r1, s11
    *p2++ = t2[1];
 8002aa6:	ee77 5ae4 	vsub.f32	s11, s15, s9
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];
 8002aaa:	ee77 7aa4 	vadd.f32	s15, s15, s9
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002aae:	f842 1b08 	str.w	r1, [r2], #8
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002ab2:	ee16 1a10 	vmov	r1, s12
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
 8002ab6:	ee75 5a85 	vadd.f32	s11, s11, s10
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002aba:	9209      	str	r2, [sp, #36]	; 0x24
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002abc:	4632      	mov	r2, r6
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];
 8002abe:	ee77 7ac5 	vsub.f32	s15, s15, s10
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
 8002ac2:	edc4 5a01 	vstr	s11, [r4, #4]
    *p3++ = t3[0];
 8002ac6:	f842 1b08 	str.w	r1, [r2], #8
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002aca:	ee17 1a10 	vmov	r1, s14
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
 8002ace:	920a      	str	r2, [sp, #40]	; 0x28
    *p3++ = t3[1];
    *p4++ = t4[0];
 8002ad0:	462a      	mov	r2, r5

    // Twiddle factors are ones
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
 8002ad2:	edc6 6a01 	vstr	s13, [r6, #4]
    *p4++ = t4[0];
 8002ad6:	f842 1b08 	str.w	r1, [r2], #8
 8002ada:	920b      	str	r2, [sp, #44]	; 0x2c
    *p4++ = t4[1];

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;
 8002adc:	f10b 0218 	add.w	r2, fp, #24
    *p2++ = t2[0];
    *p2++ = t2[1];
    *p3++ = t3[0];
    *p3++ = t3[1];
    *p4++ = t4[0];
    *p4++ = t4[1];
 8002ae0:	edc5 7a01 	vstr	s15, [r5, #4]

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;
 8002ae4:	920c      	str	r2, [sp, #48]	; 0x30

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002ae6:	9a08      	ldr	r2, [sp, #32]
 8002ae8:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8002aec:	3a02      	subs	r2, #2
 8002aee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002af0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8002af4:	0852      	lsrs	r2, r2, #1
 8002af6:	9205      	str	r2, [sp, #20]
 8002af8:	9805      	ldr	r0, [sp, #20]
 8002afa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002afc:	9007      	str	r0, [sp, #28]
    *p4++ = t4[0];
    *p4++ = t4[1];

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;
 8002afe:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002b00:	9006      	str	r0, [sp, #24]

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002b02:	2000      	movs	r0, #0
 8002b04:	9002      	str	r0, [sp, #8]
 8002b06:	9802      	ldr	r0, [sp, #8]
 8002b08:	f109 0908 	add.w	r9, r9, #8
 8002b0c:	f1a8 0808 	sub.w	r8, r8, #8
 8002b10:	f1ae 0e08 	sub.w	lr, lr, #8
 8002b14:	3008      	adds	r0, #8
 8002b16:	3f08      	subs	r7, #8
 8002b18:	3b08      	subs	r3, #8
 8002b1a:	3108      	adds	r1, #8
 8002b1c:	9002      	str	r0, [sp, #8]
 8002b1e:	f10c 0c08 	add.w	ip, ip, #8
 8002b22:	9807      	ldr	r0, [sp, #28]
 8002b24:	3208      	adds	r2, #8
 8002b26:	2800      	cmp	r0, #0
 8002b28:	f000 80e4 	beq.w	8002cf4 <arm_cfft_radix8by4_f32+0x2fc>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8002b2c:	ed59 7a02 	vldr	s15, [r9, #-8]
 8002b30:	ed5c 6a02 	vldr	s13, [ip, #-8]
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002b34:	ed51 3a02 	vldr	s7, [r1, #-8]
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8002b38:	ee77 4aa6 	vadd.f32	s9, s15, s13
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
 8002b3c:	ed19 7a01 	vldr	s14, [r9, #-4]

    for (l = (L - 2) >> 1; l > 0; l-- ) 
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
 8002b40:	ee77 6ae6 	vsub.f32	s13, s15, s13
        p1ap3_1 = p1[1] + p3[1];
 8002b44:	ed5c 7a01 	vldr	s15, [ip, #-4]
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002b48:	ed12 4a02 	vldr	s8, [r2, #-8]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
 8002b4c:	ee37 5a27 	vadd.f32	s10, s14, s15
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002b50:	ed12 3a01 	vldr	s6, [r2, #-4]
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
 8002b54:	ee37 7a67 	vsub.f32	s14, s14, s15
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002b58:	ed51 7a01 	vldr	s15, [r1, #-4]
        t2[1] = p1sp3_1 - p2[0] + p4[0];
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002b5c:	ee34 6ae3 	vsub.f32	s12, s9, s7
 8002b60:	9802      	ldr	r0, [sp, #8]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002b62:	ee74 4aa3 	vadd.f32	s9, s9, s7
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002b66:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8002b6a:	eb0b 0a00 	add.w	sl, fp, r0
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002b6e:	ee77 1a63 	vsub.f32	s3, s14, s7
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002b72:	ee75 2a67 	vsub.f32	s5, s10, s15
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002b76:	ee37 7a23 	vadd.f32	s14, s14, s7
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002b7a:	ee74 4a84 	vadd.f32	s9, s9, s8
        t2[1] = p1sp3_1 - p2[0] + p4[0];
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
        t3[1] = p1ap3_1 - p2[1] - p4[1];
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002b7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
        p1ap3_0 = p1[0] + p3[0];
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002b82:	ee75 5ac3 	vsub.f32	s11, s11, s6
        t3[1] = p1ap3_1 - p2[1] - p4[1];
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002b86:	ed49 4a02 	vstr	s9, [r9, #-8]
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002b8a:	ee72 2ac3 	vsub.f32	s5, s5, s6
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002b8e:	ee76 7a83 	vadd.f32	s15, s13, s6
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002b92:	ee37 3a44 	vsub.f32	s6, s14, s8
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002b96:	ed11 7a01 	vldr	s14, [r1, #-4]
        p1sp3_0 = p1[0] - p3[0];
        p1ap3_1 = p1[1] + p3[1];
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002b9a:	ee71 1a84 	vadd.f32	s3, s3, s8
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002b9e:	ee35 5a07 	vadd.f32	s10, s10, s14
 8002ba2:	ed12 7a01 	vldr	s14, [r2, #-4]
        p1sp3_1 = p1[1] - p3[1];
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
        t2[1] = p1sp3_1 - p2[0] + p4[0];
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002ba6:	ee36 6a44 	vsub.f32	s12, s12, s8
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
        t4[1] = p1sp3_1 + p2[0] - p4[0];
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002baa:	ee35 5a07 	vadd.f32	s10, s10, s14
 8002bae:	ed09 5a01 	vstr	s10, [r9, #-4]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8002bb2:	ed97 4a02 	vldr	s8, [r7, #8]
 8002bb6:	edd8 6a02 	vldr	s13, [r8, #8]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002bba:	ed98 7a01 	vldr	s14, [r8, #4]
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8002bbe:	ee76 4a84 	vadd.f32	s9, s13, s8
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002bc2:	ed97 2a01 	vldr	s4, [r7, #4]
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002bc6:	ed9e 8a02 	vldr	s16, [lr, #8]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8002bca:	ee36 4ac4 	vsub.f32	s8, s13, s8
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002bce:	ee37 5a02 	vadd.f32	s10, s14, s4
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002bd2:	edd3 0a02 	vldr	s1, [r3, #8]
        *p1++ = p1ap3_0 + p2[0] + p4[0];
        *p1++ = p1ap3_1 + p2[1] + p4[1];

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8002bd6:	ee37 2a42 	vsub.f32	s4, s14, s4
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002bda:	edd3 3a01 	vldr	s7, [r3, #4]
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8002bde:	ee34 7ac8 	vsub.f32	s14, s9, s16
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002be2:	edde 8a01 	vldr	s17, [lr, #4]
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8002be6:	ee74 4a88 	vadd.f32	s9, s9, s16
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002bea:	ee35 1a68 	vsub.f32	s2, s10, s17
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002bee:	ee74 6a68 	vsub.f32	s13, s8, s17
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8002bf2:	ee74 4aa0 	vadd.f32	s9, s9, s1
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002bf6:	ee31 1a63 	vsub.f32	s2, s2, s7
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002bfa:	ee76 6aa3 	vadd.f32	s13, s13, s7
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8002bfe:	edc8 4a02 	vstr	s9, [r8, #8]
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002c02:	ee73 3ae8 	vsub.f32	s7, s7, s17
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002c06:	edde 4a01 	vldr	s9, [lr, #4]
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002c0a:	ee38 9a60 	vsub.f32	s18, s16, s1
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8002c0e:	ee37 7a60 	vsub.f32	s14, s14, s1
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002c12:	ee35 5a24 	vadd.f32	s10, s10, s9
 8002c16:	edd3 4a01 	vldr	s9, [r3, #4]
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002c1a:	ee33 4ac4 	vsub.f32	s8, s7, s8
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
        p1ap3_0 = pEnd1[0] + pEnd3[0];
        p1sp3_0 = pEnd1[0] - pEnd3[0];
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002c1e:	ee32 0a09 	vadd.f32	s0, s4, s18
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002c22:	ee35 5a24 	vadd.f32	s10, s10, s9
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8002c26:	ee39 2a42 	vsub.f32	s4, s18, s4
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002c2a:	ed88 5a01 	vstr	s10, [r8, #4]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
        twI = *tw2++;
 8002c2e:	ed9a 5a01 	vldr	s10, [sl, #4]
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8002c32:	edda 4a00 	vldr	s9, [sl]
 8002c36:	ea4f 0a40 	mov.w	sl, r0, lsl #1
        m0 = t2[0] * twR;
        m1 = t2[1] * twI;
        m2 = t2[1] * twR;
        m3 = t2[0] * twI;
        
        *p2++ = m0 + m1;
 8002c3a:	ee61 3a85 	vmul.f32	s7, s3, s10
 8002c3e:	eb0b 000a 	add.w	r0, fp, sl
 8002c42:	eee5 3aa4 	vfma.f32	s7, s11, s9
 8002c46:	900d      	str	r0, [sp, #52]	; 0x34
        *p2++ = m2 - m3;
 8002c48:	ee65 5a65 	vnmul.f32	s11, s10, s11
 8002c4c:	eee1 5aa4 	vfma.f32	s11, s3, s9
        m0 = t2[0] * twR;
        m1 = t2[1] * twI;
        m2 = t2[1] * twR;
        m3 = t2[0] * twI;
        
        *p2++ = m0 + m1;
 8002c50:	ed41 3a02 	vstr	s7, [r1, #-8]
        *p2++ = m2 - m3;
 8002c54:	ed41 5a01 	vstr	s11, [r1, #-4]
        m0 = t2[3] * twI;
        m1 = t2[2] * twR;
        m2 = t2[2] * twI;
        m3 = t2[3] * twR;
        
        *pEnd2-- = m0 - m1;
 8002c58:	ee64 5ac0 	vnmul.f32	s11, s9, s0
 8002c5c:	eee6 5a85 	vfma.f32	s11, s13, s10
        *pEnd2-- = m2 + m3;
 8002c60:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8002c64:	eee0 6a05 	vfma.f32	s13, s0, s10
        m0 = t2[3] * twI;
        m1 = t2[2] * twR;
        m2 = t2[2] * twI;
        m3 = t2[3] * twR;
        
        *pEnd2-- = m0 - m1;
 8002c68:	edce 5a02 	vstr	s11, [lr, #8]
        *pEnd2-- = m2 + m3;
 8002c6c:	edce 6a01 	vstr	s13, [lr, #4]

        // COL 3
        twR = tw3[0];
 8002c70:	edd0 5a00 	vldr	s11, [r0]
        twI = tw3[1];
 8002c74:	edd0 6a01 	vldr	s13, [r0, #4]
        
        *pEnd3-- = m0 - m1;
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
 8002c78:	9802      	ldr	r0, [sp, #8]
        m0 = t3[0] * twR;
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
 8002c7a:	ee22 5aa6 	vmul.f32	s10, s5, s13
        
        *pEnd3-- = m0 - m1;
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
 8002c7e:	4482      	add	sl, r0
        twI = tw4[1];
 8002c80:	9806      	ldr	r0, [sp, #24]
        m0 = t3[0] * twR;
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
 8002c82:	eea6 5a25 	vfma.f32	s10, s12, s11
        
        *pEnd3-- = m0 - m1;
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
 8002c86:	44da      	add	sl, fp
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
        *p3++ = m2 - m3;
 8002c88:	ee26 6ac6 	vnmul.f32	s12, s13, s12
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
        twI = tw4[1];
        tw4 += twMod4;
 8002c8c:	3018      	adds	r0, #24
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
        *p3++ = m2 - m3;
 8002c8e:	eea2 6aa5 	vfma.f32	s12, s5, s11
        m0 = t3[0] * twR;
        m1 = t3[1] * twI;
        m2 = t3[1] * twR;
        m3 = t3[0] * twI;
        
        *p3++ = m0 + m1;
 8002c92:	ed0c 5a02 	vstr	s10, [ip, #-8]
        *p3++ = m2 - m3;
 8002c96:	ed0c 6a01 	vstr	s12, [ip, #-4]
        m0 = -t3[3] * twR;
        m1 = t3[2] * twI;
        m2 = t3[2] * twR;
        m3 = t3[3] * twI;
        
        *pEnd3-- = m0 - m1;
 8002c9a:	ee26 6ac1 	vnmul.f32	s12, s13, s2
        *pEnd3-- = m3 - m2;
 8002c9e:	ee67 6a26 	vmul.f32	s13, s14, s13
        m0 = -t3[3] * twR;
        m1 = t3[2] * twI;
        m2 = t3[2] * twR;
        m3 = t3[3] * twI;
        
        *pEnd3-- = m0 - m1;
 8002ca2:	eea7 6a65 	vfms.f32	s12, s14, s11
        *pEnd3-- = m3 - m2;
 8002ca6:	eee1 6a65 	vfms.f32	s13, s2, s11
        m0 = -t3[3] * twR;
        m1 = t3[2] * twI;
        m2 = t3[2] * twR;
        m3 = t3[3] * twI;
        
        *pEnd3-- = m0 - m1;
 8002caa:	ed87 6a02 	vstr	s12, [r7, #8]
        *pEnd3-- = m3 - m2;
 8002cae:	edc7 6a01 	vstr	s13, [r7, #4]
        
        // COL 4
        twR = tw4[0];
        twI = tw4[1];
 8002cb2:	ed50 6a05 	vldr	s13, [r0, #-20]	; 0xffffffec
        
        *pEnd3-- = m0 - m1;
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
 8002cb6:	ed9a 6a00 	vldr	s12, [sl]
        m0 = t4[0] * twR;
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
 8002cba:	ee23 7a26 	vmul.f32	s14, s6, s13
        *pEnd3-- = m3 - m2;
        
        // COL 4
        twR = tw4[0];
        twI = tw4[1];
        tw4 += twMod4;
 8002cbe:	9006      	str	r0, [sp, #24]

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002cc0:	9807      	ldr	r0, [sp, #28]
        m0 = t4[0] * twR;
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
 8002cc2:	eea7 7a86 	vfma.f32	s14, s15, s12

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002cc6:	3801      	subs	r0, #1
 8002cc8:	9007      	str	r0, [sp, #28]
        m0 = t4[0] * twR;
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
 8002cca:	ed02 7a02 	vstr	s14, [r2, #-8]
        *p4++ = m2 - m3;
 8002cce:	ee26 7ae7 	vnmul.f32	s14, s13, s15
        m0 = t4[3] * twI;
        m1 = t4[2] * twR;
        m2 = t4[2] * twI;
        m3 = t4[3] * twR;
        
        *pEnd4-- = m0 - m1;
 8002cd2:	ee66 7a42 	vnmul.f32	s15, s12, s4
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
        *p4++ = m2 - m3;
 8002cd6:	eea3 7a06 	vfma.f32	s14, s6, s12
        m0 = t4[3] * twI;
        m1 = t4[2] * twR;
        m2 = t4[2] * twI;
        m3 = t4[3] * twR;
        
        *pEnd4-- = m0 - m1;
 8002cda:	eee4 7a26 	vfma.f32	s15, s8, s13
        m1 = t4[1] * twI;
        m2 = t4[1] * twR;
        m3 = t4[0] * twI;
        
        *p4++ = m0 + m1;
        *p4++ = m2 - m3;
 8002cde:	ed02 7a01 	vstr	s14, [r2, #-4]
        m0 = t4[3] * twI;
        m1 = t4[2] * twR;
        m2 = t4[2] * twI;
        m3 = t4[3] * twR;
        
        *pEnd4-- = m0 - m1;
 8002ce2:	edc3 7a02 	vstr	s15, [r3, #8]
        *pEnd4-- = m2 + m3;
 8002ce6:	ee64 7a06 	vmul.f32	s15, s8, s12
 8002cea:	eee2 7a26 	vfma.f32	s15, s4, s13
 8002cee:	edc3 7a01 	vstr	s15, [r3, #4]
 8002cf2:	e708      	b.n	8002b06 <arm_cfft_radix8by4_f32+0x10e>
 8002cf4:	9905      	ldr	r1, [sp, #20]
 8002cf6:	9805      	ldr	r0, [sp, #20]
 8002cf8:	eb0b 1701 	add.w	r7, fp, r1, lsl #4
 8002cfc:	9b05      	ldr	r3, [sp, #20]
 8002cfe:	4684      	mov	ip, r0
 8002d00:	2118      	movs	r1, #24
 8002d02:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	9a04      	ldr	r2, [sp, #16]
 8002d08:	fb01 010c 	mla	r1, r1, ip, r0
 8002d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d0e:	441a      	add	r2, r3
 8002d10:	f103 0e08 	add.w	lr, r3, #8
 8002d14:	4418      	add	r0, r3
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002d16:	edd2 7a00 	vldr	s15, [r2]
 8002d1a:	44de      	add	lr, fp
 8002d1c:	4684      	mov	ip, r0
 8002d1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002d20:	4418      	add	r0, r3
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002d22:	eddc 2a00 	vldr	s5, [ip]
 8002d26:	4680      	mov	r8, r0
 8002d28:	980b      	ldr	r0, [sp, #44]	; 0x2c
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002d2a:	edd8 6a00 	vldr	s13, [r8]
 8002d2e:	4418      	add	r0, r3
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
 8002d30:	ed98 7a01 	vldr	s14, [r8, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002d34:	2304      	movs	r3, #4
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002d36:	ee37 5aa6 	vadd.f32	s10, s15, s13
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002d3a:	ed90 2a01 	vldr	s4, [r0, #4]

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
    p1sp3_0 = p1[0] - p3[0];
 8002d3e:	ee77 6ae6 	vsub.f32	s13, s15, s13
    p1ap3_1 = p1[1] + p3[1];
 8002d42:	edd2 7a01 	vldr	s15, [r2, #4]
 8002d46:	ee77 5a87 	vadd.f32	s11, s15, s14
    p1sp3_1 = p1[1] - p3[1];
 8002d4a:	ee77 7ac7 	vsub.f32	s15, s15, s14

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002d4e:	ed9c 7a01 	vldr	s14, [ip, #4]
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002d52:	ee35 4a62 	vsub.f32	s8, s10, s5
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002d56:	ee36 6a87 	vadd.f32	s12, s13, s14
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002d5a:	ee35 5a22 	vadd.f32	s10, s10, s5
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002d5e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    p1sp3_0 = p1[0] - p3[0];
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002d62:	ee36 3a42 	vsub.f32	s6, s12, s4
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002d66:	ed90 6a00 	vldr	s12, [r0]
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002d6a:	ee75 4ac7 	vsub.f32	s9, s11, s14
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002d6e:	ee35 5a06 	vadd.f32	s10, s10, s12
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002d72:	ee36 7a82 	vadd.f32	s14, s13, s4
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002d76:	ee77 3ae2 	vsub.f32	s7, s15, s5
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002d7a:	ed82 5a00 	vstr	s10, [r2]
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002d7e:	ee77 7aa2 	vadd.f32	s15, s15, s5
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002d82:	eddc 6a01 	vldr	s13, [ip, #4]

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002d86:	ee34 4a46 	vsub.f32	s8, s8, s12
    p1ap3_1 = p1[1] + p3[1];
    p1sp3_1 = p1[1] - p3[1];

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002d8a:	ee73 3a86 	vadd.f32	s7, s7, s12
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002d8e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002d92:	edd0 6a01 	vldr	s13, [r0, #4]
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002d96:	ee77 7ac6 	vsub.f32	s15, s15, s12
    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
    t2[1] = p1sp3_1 - p2[0] + p4[0];
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002d9a:	ee74 4ac2 	vsub.f32	s9, s9, s4
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
    t4[1] = p1sp3_1 + p2[0] - p4[0];
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002d9e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002da2:	edc2 5a01 	vstr	s11, [r2, #4]

    *p4++ = m0 + m1;
    *p4++ = m2 - m3;

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002da6:	465a      	mov	r2, fp
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // COL 2
    twR = tw2[0];
    twI = tw2[1];
 8002da8:	ed9e 6a01 	vldr	s12, [lr, #4]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
    *p1++ = p1ap3_1 + p2[1] + p4[1];

    // COL 2
    twR = tw2[0];
 8002dac:	edde 5a00 	vldr	s11, [lr]
    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 8002db0:	ee63 6a86 	vmul.f32	s13, s7, s12
    *p2++ = m2 - m3;
 8002db4:	ee26 6a43 	vnmul.f32	s12, s12, s6
    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 8002db8:	eee3 6a25 	vfma.f32	s13, s6, s11
    *p2++ = m2 - m3;
 8002dbc:	eea3 6aa5 	vfma.f32	s12, s7, s11
    m0 = t2[0] * twR;
    m1 = t2[1] * twI;
    m2 = t2[1] * twR;
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
 8002dc0:	edcc 6a00 	vstr	s13, [ip]
    *p2++ = m2 - m3;
 8002dc4:	ed8c 6a01 	vstr	s12, [ip, #4]
    // COL 3
    twR = tw3[0];
    twI = tw3[1];
 8002dc8:	edd7 6a05 	vldr	s13, [r7, #20]
    m3 = t2[0] * twI;

    *p2++ = m0 + m1;
    *p2++ = m2 - m3;
    // COL 3
    twR = tw3[0];
 8002dcc:	edd7 5a04 	vldr	s11, [r7, #16]
    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 8002dd0:	ee24 6aa6 	vmul.f32	s12, s9, s13
    *p3++ = m2 - m3;
 8002dd4:	ee66 6ac4 	vnmul.f32	s13, s13, s8
    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 8002dd8:	eea4 6a25 	vfma.f32	s12, s8, s11
    *p3++ = m2 - m3;
 8002ddc:	eee4 6aa5 	vfma.f32	s13, s9, s11
    m0 = t3[0] * twR;
    m1 = t3[1] * twI;
    m2 = t3[1] * twR;
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
 8002de0:	ed88 6a00 	vstr	s12, [r8]
    *p3++ = m2 - m3;
 8002de4:	edc8 6a01 	vstr	s13, [r8, #4]
    // COL 4
    twR = tw4[0];
    twI = tw4[1];
 8002de8:	edd1 6a01 	vldr	s13, [r1, #4]
    m3 = t3[0] * twI;

    *p3++ = m0 + m1;
    *p3++ = m2 - m3;
    // COL 4
    twR = tw4[0];
 8002dec:	edd1 5a00 	vldr	s11, [r1]
    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;

    *p4++ = m0 + m1;
 8002df0:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002df4:	eea7 6a25 	vfma.f32	s12, s14, s11
    *p4++ = m2 - m3;
 8002df8:	ee26 7ac7 	vnmul.f32	s14, s13, s14
 8002dfc:	eea7 7aa5 	vfma.f32	s14, s15, s11
    m0 = t4[0] * twR;
    m1 = t4[1] * twI;
    m2 = t4[1] * twR;
    m3 = t4[0] * twI;

    *p4++ = m0 + m1;
 8002e00:	ed80 6a00 	vstr	s12, [r0]
    *p4++ = m2 - m3;
 8002e04:	ed80 7a01 	vstr	s14, [r0, #4]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002e08:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8002e0c:	9801      	ldr	r0, [sp, #4]
 8002e0e:	4639      	mov	r1, r7
 8002e10:	f000 f884 	bl	8002f1c <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8002e14:	9a03      	ldr	r2, [sp, #12]
 8002e16:	4639      	mov	r1, r7
 8002e18:	4620      	mov	r0, r4
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	6852      	ldr	r2, [r2, #4]
 8002e1e:	f000 f87d 	bl	8002f1c <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8002e22:	9a03      	ldr	r2, [sp, #12]
 8002e24:	4639      	mov	r1, r7
 8002e26:	4630      	mov	r0, r6
 8002e28:	2304      	movs	r3, #4
 8002e2a:	6852      	ldr	r2, [r2, #4]
 8002e2c:	f000 f876 	bl	8002f1c <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8002e30:	9a03      	ldr	r2, [sp, #12]
 8002e32:	2304      	movs	r3, #4
 8002e34:	4639      	mov	r1, r7
 8002e36:	6852      	ldr	r2, [r2, #4]
 8002e38:	4628      	mov	r0, r5
}
 8002e3a:	b00f      	add	sp, #60	; 0x3c
 8002e3c:	ecbd 8b04 	vpop	{d8-d9}
 8002e40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8002e44:	f000 b86a 	b.w	8002f1c <arm_radix8_butterfly_f32>

08002e48 <arm_cfft_f32>:
    uint8_t bitReverseFlag)
{
    uint32_t  L = S->fftLen, l;
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8002e48:	2a01      	cmp	r2, #1
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8002e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4e:	4606      	mov	r6, r0
 8002e50:	460d      	mov	r5, r1
 8002e52:	4617      	mov	r7, r2
 8002e54:	4698      	mov	r8, r3
    uint32_t  L = S->fftLen, l;
 8002e56:	8804      	ldrh	r4, [r0, #0]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8002e58:	d01b      	beq.n	8002e92 <arm_cfft_f32+0x4a>
            *pSrc = -*pSrc;
            pSrc += 2;
        }
    }

    switch (L) 
 8002e5a:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8002e5e:	d02b      	beq.n	8002eb8 <arm_cfft_f32+0x70>
 8002e60:	d809      	bhi.n	8002e76 <arm_cfft_f32+0x2e>
 8002e62:	2c20      	cmp	r4, #32
 8002e64:	d028      	beq.n	8002eb8 <arm_cfft_f32+0x70>
 8002e66:	d801      	bhi.n	8002e6c <arm_cfft_f32+0x24>
 8002e68:	2c10      	cmp	r4, #16
 8002e6a:	e002      	b.n	8002e72 <arm_cfft_f32+0x2a>
 8002e6c:	2c40      	cmp	r4, #64	; 0x40
 8002e6e:	d028      	beq.n	8002ec2 <arm_cfft_f32+0x7a>
 8002e70:	2c80      	cmp	r4, #128	; 0x80
 8002e72:	d01c      	beq.n	8002eae <arm_cfft_f32+0x66>
 8002e74:	e02b      	b.n	8002ece <arm_cfft_f32+0x86>
 8002e76:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002e7a:	d018      	beq.n	8002eae <arm_cfft_f32+0x66>
 8002e7c:	d802      	bhi.n	8002e84 <arm_cfft_f32+0x3c>
 8002e7e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8002e82:	e004      	b.n	8002e8e <arm_cfft_f32+0x46>
 8002e84:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8002e88:	d016      	beq.n	8002eb8 <arm_cfft_f32+0x70>
 8002e8a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8002e8e:	d018      	beq.n	8002ec2 <arm_cfft_f32+0x7a>
 8002e90:	e01d      	b.n	8002ece <arm_cfft_f32+0x86>
 8002e92:	1d0b      	adds	r3, r1, #4

    if(ifftFlag == 1u)
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
        for(l=0; l<L; l++) 
 8002e94:	2200      	movs	r2, #0
 8002e96:	42a2      	cmp	r2, r4
 8002e98:	f103 0308 	add.w	r3, r3, #8
 8002e9c:	d2dd      	bcs.n	8002e5a <arm_cfft_f32+0x12>
        {
            *pSrc = -*pSrc;
 8002e9e:	ed53 7a02 	vldr	s15, [r3, #-8]

    if(ifftFlag == 1u)
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
        for(l=0; l<L; l++) 
 8002ea2:	3201      	adds	r2, #1
        {
            *pSrc = -*pSrc;
 8002ea4:	eef1 7a67 	vneg.f32	s15, s15
 8002ea8:	ed43 7a02 	vstr	s15, [r3, #-8]
 8002eac:	e7f3      	b.n	8002e96 <arm_cfft_f32+0x4e>
    switch (L) 
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002eae:	4629      	mov	r1, r5
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f7ff fce5 	bl	8002880 <arm_cfft_radix8by2_f32>
        break;
 8002eb6:	e00a      	b.n	8002ece <arm_cfft_f32+0x86>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002eb8:	4629      	mov	r1, r5
 8002eba:	4630      	mov	r0, r6
 8002ebc:	f7ff fd9c 	bl	80029f8 <arm_cfft_radix8by4_f32>
        break;
 8002ec0:	e005      	b.n	8002ece <arm_cfft_f32+0x86>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	6872      	ldr	r2, [r6, #4]
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f000 f827 	bl	8002f1c <arm_radix8_butterfly_f32>
        break;
    }  

    if( bitReverseFlag )
 8002ece:	f1b8 0f00 	cmp.w	r8, #0
 8002ed2:	d004      	beq.n	8002ede <arm_cfft_f32+0x96>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8002ed4:	68b2      	ldr	r2, [r6, #8]
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	89b1      	ldrh	r1, [r6, #12]
 8002eda:	f7fd f999 	bl	8000210 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8002ede:	2f01      	cmp	r7, #1
 8002ee0:	d11a      	bne.n	8002f18 <arm_cfft_f32+0xd0>
    {
        invL = 1.0f/(float32_t)L;
 8002ee2:	ee07 4a90 	vmov	s15, r4
 8002ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8002eea:	2300      	movs	r3, #0
    if( bitReverseFlag )
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);

    if(ifftFlag == 1u)
    {
        invL = 1.0f/(float32_t)L;
 8002eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8002ef4:	42a3      	cmp	r3, r4
 8002ef6:	f105 0508 	add.w	r5, r5, #8
 8002efa:	d20d      	bcs.n	8002f18 <arm_cfft_f32+0xd0>
        {
            *pSrc++ *=   invL ;
 8002efc:	ed55 7a02 	vldr	s15, [r5, #-8]
    if(ifftFlag == 1u)
    {
        invL = 1.0f/(float32_t)L;
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8002f00:	3301      	adds	r3, #1
        {
            *pSrc++ *=   invL ;
 8002f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f06:	ed45 7a02 	vstr	s15, [r5, #-8]
            *pSrc  = -(*pSrc) * invL;
 8002f0a:	ed55 7a01 	vldr	s15, [r5, #-4]
 8002f0e:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8002f12:	ed45 7a01 	vstr	s15, [r5, #-4]
 8002f16:	e7ed      	b.n	8002ef4 <arm_cfft_f32+0xac>
 8002f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f1c <arm_radix8_butterfly_f32>:
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8002f1c:	eddf 5ace 	vldr	s11, [pc, #824]	; 8003258 <arm_radix8_butterfly_f32+0x33c>
 8002f20:	eeb0 5a65 	vmov.f32	s10, s11
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8002f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f28:	ed2d 8b10 	vpush	{d8-d15}
 8002f2c:	b09d      	sub	sp, #116	; 0x74
 8002f2e:	910d      	str	r1, [sp, #52]	; 0x34
 8002f30:	9202      	str	r2, [sp, #8]
 8002f32:	9301      	str	r3, [sp, #4]
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 8002f34:	9103      	str	r1, [sp, #12]
   
   do 
   {
      n1 = n2;
      n2 = n2 >> 3;
 8002f36:	9b03      	ldr	r3, [sp, #12]
 8002f38:	f100 0804 	add.w	r8, r0, #4
      i1 = 0;
 8002f3c:	f04f 0b00 	mov.w	fp, #0
   n2 = fftLen;
   
   do 
   {
      n1 = n2;
      n2 = n2 >> 3;
 8002f40:	08da      	lsrs	r2, r3, #3
 8002f42:	00d9      	lsls	r1, r3, #3
 8002f44:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8002f48:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8002f4c:	1954      	adds	r4, r2, r5
 8002f4e:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8002f52:	eb00 0c09 	add.w	ip, r0, r9
 8002f56:	0113      	lsls	r3, r2, #4
 8002f58:	eb00 0ec4 	add.w	lr, r0, r4, lsl #3
 8002f5c:	4414      	add	r4, r2
 8002f5e:	eb0c 0a09 	add.w	sl, ip, r9
 8002f62:	3504      	adds	r5, #4
 8002f64:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8002f68:	4414      	add	r4, r2
 8002f6a:	f10e 0e04 	add.w	lr, lr, #4
 8002f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8002f70:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
 8002f74:	4414      	add	r4, r2
 8002f76:	3704      	adds	r7, #4
 8002f78:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8002f7c:	3604      	adds	r6, #4
 8002f7e:	3404      	adds	r4, #4
         i4 = i3 + n2;
         i5 = i4 + n2;
         i6 = i5 + n2;
         i7 = i6 + n2;
         i8 = i7 + n2;
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002f80:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8002f84:	ed18 7a01 	vldr	s14, [r8, #-4]
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002f88:	eddc 6a00 	vldr	s13, [ip]
         i4 = i3 + n2;
         i5 = i4 + n2;
         i6 = i5 + n2;
         i7 = i6 + n2;
         i8 = i7 + n2;
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002f8c:	ee37 6a27 	vadd.f32	s12, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002f90:	ed15 2a01 	vldr	s4, [r5, #-4]
         i5 = i4 + n2;
         i6 = i5 + n2;
         i7 = i6 + n2;
         i8 = i7 + n2;
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002f94:	ee37 7a67 	vsub.f32	s14, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002f98:	ed57 7a01 	vldr	s15, [r7, #-4]
 8002f9c:	ee76 4aa7 	vadd.f32	s9, s13, s15
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002fa0:	ee36 3ae7 	vsub.f32	s6, s13, s15
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002fa4:	edda 6a00 	vldr	s13, [sl]
 8002fa8:	ed56 7a01 	vldr	s15, [r6, #-4]
 8002fac:	ee76 3aa7 	vadd.f32	s7, s13, s15
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002fb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002fb4:	ed54 6a01 	vldr	s13, [r4, #-4]
 8002fb8:	ee32 4a26 	vadd.f32	s8, s4, s13
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
         t1 = r1 - r3;
 8002fbc:	ee76 8a63 	vsub.f32	s17, s12, s7
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002fc0:	ee32 2a66 	vsub.f32	s4, s4, s13
         t1 = r1 - r3;
         r1 = r1 + r3;
 8002fc4:	ee76 6a23 	vadd.f32	s13, s12, s7
         r3 = r2 - r4;
         r2 = r2 + r4;
 8002fc8:	ee34 6a84 	vadd.f32	s12, s9, s8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
         t1 = r1 - r3;
         r1 = r1 + r3;
         r3 = r2 - r4;
 8002fcc:	ee34 8ac4 	vsub.f32	s16, s9, s8
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
 8002fd0:	ee76 4a86 	vadd.f32	s9, s13, s12
         pSrc[2 * i5] = r1 - r2;
 8002fd4:	ee76 6ac6 	vsub.f32	s13, s13, s12
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
         t1 = r1 - r3;
         r1 = r1 + r3;
         r3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
 8002fd8:	ed48 4a01 	vstr	s9, [r8, #-4]
         pSrc[2 * i5] = r1 - r2;
 8002fdc:	ed4e 6a01 	vstr	s13, [lr, #-4]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002fe0:	ed97 4a00 	vldr	s8, [r7]
 8002fe4:	eddc 3a01 	vldr	s7, [ip, #4]
         r1 = r1 + r3;
         r3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
         pSrc[2 * i5] = r1 - r2;
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002fe8:	edde 6a00 	vldr	s13, [lr]
 8002fec:	edd8 4a00 	vldr	s9, [r8]
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002ff0:	ee73 1a84 	vadd.f32	s3, s7, s8
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002ff4:	edda 2a01 	vldr	s5, [sl, #4]
         pSrc[2 * i1] = r1 + r2;   
         pSrc[2 * i5] = r1 - r2;
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002ff8:	ee73 3ac4 	vsub.f32	s7, s7, s8
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002ffc:	ed96 4a00 	vldr	s8, [r6]
         r1 = r1 + r3;
         r3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
         pSrc[2 * i5] = r1 - r2;
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003000:	ee34 6aa6 	vadd.f32	s12, s9, s13
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003004:	ed94 1a00 	vldr	s2, [r4]
         r3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1] = r1 + r2;   
         pSrc[2 * i5] = r1 - r2;
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003008:	ee74 4ae6 	vsub.f32	s9, s9, s13
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800300c:	ee72 6a84 	vadd.f32	s13, s5, s8
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003010:	ee32 4ac4 	vsub.f32	s8, s5, s8
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003014:	edd5 2a00 	vldr	s5, [r5]
 8003018:	ee32 0a81 	vadd.f32	s0, s5, s2
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800301c:	ee72 2ac1 	vsub.f32	s5, s5, s2
         t2 = r1 - s3;
 8003020:	ee36 1a66 	vsub.f32	s2, s12, s13
         r1 = r1 + s3;
 8003024:	ee76 6a26 	vadd.f32	s13, s12, s13
         s3 = r2 - r4;
         r2 = r2 + r4;
 8003028:	ee31 6a80 	vadd.f32	s12, s3, s0
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
         t2 = r1 - s3;
         r1 = r1 + s3;
         s3 = r2 - r4;
 800302c:	ee71 0ac0 	vsub.f32	s1, s3, s0
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
 8003030:	ee76 1a86 	vadd.f32	s3, s13, s12
         pSrc[2 * i5 + 1] = r1 - r2;
 8003034:	ee76 6ac6 	vsub.f32	s13, s13, s12
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
 8003038:	ee38 6ae0 	vsub.f32	s12, s17, s1
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
         t2 = r1 - s3;
         r1 = r1 + s3;
         s3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
 800303c:	edc8 1a00 	vstr	s3, [r8]
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
 8003040:	ee73 1a42 	vsub.f32	s3, s6, s4
         t2 = r1 - s3;
         r1 = r1 + s3;
         s3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
         pSrc[2 * i5 + 1] = r1 - r2;
 8003044:	edce 6a00 	vstr	s13, [lr]
         pSrc[2 * i3]     = t1 + s3;
 8003048:	ee78 6aa0 	vadd.f32	s13, s17, s1
 800304c:	4488      	add	r8, r1
 800304e:	448e      	add	lr, r1
 8003050:	edca 6a00 	vstr	s13, [sl]
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
 8003054:	ee71 6a48 	vsub.f32	s13, s2, s16
         s3 = r2 - r4;
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
 8003058:	ed06 6a01 	vstr	s12, [r6, #-4]
         pSrc[2 * i3 + 1] = t2 - r3;
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
 800305c:	ee33 6aa2 	vadd.f32	s12, s7, s5
         r2 = r2 + r4;
         pSrc[2 * i1 + 1] = r1 + r2;
         pSrc[2 * i5 + 1] = r1 - r2;
         pSrc[2 * i3]     = t1 + s3;
         pSrc[2 * i7]     = t1 - s3;
         pSrc[2 * i3 + 1] = t2 - r3;
 8003060:	edca 6a01 	vstr	s13, [sl, #4]
         pSrc[2 * i7 + 1] = t2 + r3;
 8003064:	ee78 6a01 	vadd.f32	s13, s16, s2
 8003068:	448a      	add	sl, r1
 800306a:	edc6 6a00 	vstr	s13, [r6]
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
 800306e:	ee73 6a02 	vadd.f32	s13, s6, s4
         r2 = (s6 - s8) * C81;
 8003072:	ee33 2ae2 	vsub.f32	s4, s7, s5
 8003076:	440e      	add	r6, r1
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
 8003078:	eef0 3a67 	vmov.f32	s7, s15
         r7 = r7 + r6;
         t2 = s5 - r2;
 800307c:	eef0 2a64 	vmov.f32	s5, s9
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
         r7 = r7 + r6;
 8003080:	eee6 7aa5 	vfma.f32	s15, s13, s11
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
 8003084:	eee6 3ae5 	vfms.f32	s7, s13, s11
         r7 = r7 + r6;
         t2 = s5 - r2;
         s5 = s5 + r2;
 8003088:	eef0 6a64 	vmov.f32	s13, s9
         s8 = s7 - s6;
 800308c:	eef0 4a44 	vmov.f32	s9, s8
         s7 = s7 + s6;
 8003090:	eea6 4a25 	vfma.f32	s8, s12, s11
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 8003094:	eeb0 3a47 	vmov.f32	s6, s14
         r5 = r5 + r1;
 8003098:	eea1 7aa5 	vfma.f32	s14, s3, s11
         r8 = r7 - r6;
         r7 = r7 + r6;
         t2 = s5 - r2;
         s5 = s5 + r2;
         s8 = s7 - s6;
 800309c:	eee6 4a65 	vfms.f32	s9, s12, s11
         pSrc[2 * i7 + 1] = t2 + r3;
         r1 = (r6 - r8) * C81;
         r6 = (r6 + r8) * C81;
         r2 = (s6 - s8) * C81;
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
 80030a0:	eea1 3ae5 	vfms.f32	s6, s3, s11
         r5 = r5 + r1;
         r8 = r7 - r6;
         r7 = r7 + r6;
         t2 = s5 - r2;
         s5 = s5 + r2;
 80030a4:	eee2 6a25 	vfma.f32	s13, s4, s11
         s8 = s7 - s6;
         s7 = s7 + s6;
 80030a8:	eeb0 6a44 	vmov.f32	s12, s8
         s6 = (s6 + s8) * C81;
         t1 = r5 - r1;
         r5 = r5 + r1;
         r8 = r7 - r6;
         r7 = r7 + r6;
         t2 = s5 - r2;
 80030ac:	eee2 2a65 	vfms.f32	s5, s4, s11
         s5 = s5 + r2;
         s8 = s7 - s6;
         s7 = s7 + s6;
         pSrc[2 * i2]     = r5 + s7;
 80030b0:	ee37 4a04 	vadd.f32	s8, s14, s8
         pSrc[2 * i8]     = r5 - s7;
 80030b4:	ee37 7a46 	vsub.f32	s14, s14, s12
         r7 = r7 + r6;
         t2 = s5 - r2;
         s5 = s5 + r2;
         s8 = s7 - s6;
         s7 = s7 + s6;
         pSrc[2 * i2]     = r5 + s7;
 80030b8:	ed8c 4a00 	vstr	s8, [ip]
         pSrc[2 * i8]     = r5 - s7;
 80030bc:	ed04 7a01 	vstr	s14, [r4, #-4]
         pSrc[2 * i6]     = t1 + s8;
 80030c0:	ee33 7a24 	vadd.f32	s14, s6, s9
         pSrc[2 * i4]     = t1 - s8;
 80030c4:	ee33 3a64 	vsub.f32	s6, s6, s9
         s5 = s5 + r2;
         s8 = s7 - s6;
         s7 = s7 + s6;
         pSrc[2 * i2]     = r5 + s7;
         pSrc[2 * i8]     = r5 - s7;
         pSrc[2 * i6]     = t1 + s8;
 80030c8:	ed07 7a01 	vstr	s14, [r7, #-4]
         pSrc[2 * i4]     = t1 - s8;
         pSrc[2 * i2 + 1] = s5 - r7;
 80030cc:	ee36 7ae7 	vsub.f32	s14, s13, s15
         pSrc[2 * i8 + 1] = s5 + r7;
 80030d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
         s8 = s7 - s6;
         s7 = s7 + s6;
         pSrc[2 * i2]     = r5 + s7;
         pSrc[2 * i8]     = r5 - s7;
         pSrc[2 * i6]     = t1 + s8;
         pSrc[2 * i4]     = t1 - s8;
 80030d4:	ed05 3a01 	vstr	s6, [r5, #-4]
         pSrc[2 * i2 + 1] = s5 - r7;
 80030d8:	ed8c 7a01 	vstr	s14, [ip, #4]
 80030dc:	448c      	add	ip, r1
         pSrc[2 * i8 + 1] = s5 + r7;
 80030de:	edc4 7a00 	vstr	s15, [r4]
         pSrc[2 * i6 + 1] = t2 - r8;
 80030e2:	ee72 7ae3 	vsub.f32	s15, s5, s7
         pSrc[2 * i4 + 1] = t2 + r8;
 80030e6:	ee73 3aa2 	vadd.f32	s7, s7, s5
 80030ea:	440c      	add	r4, r1
         pSrc[2 * i8]     = r5 - s7;
         pSrc[2 * i6]     = t1 + s8;
         pSrc[2 * i4]     = t1 - s8;
         pSrc[2 * i2 + 1] = s5 - r7;
         pSrc[2 * i8 + 1] = s5 + r7;
         pSrc[2 * i6 + 1] = t2 - r8;
 80030ec:	edc7 7a00 	vstr	s15, [r7]
 80030f0:	440f      	add	r7, r1
         pSrc[2 * i4 + 1] = t2 + r8;
 80030f2:	edc5 3a00 	vstr	s7, [r5]
 80030f6:	440d      	add	r5, r1
         
         i1 += n1;
 80030f8:	9b03      	ldr	r3, [sp, #12]
 80030fa:	449b      	add	fp, r3
      } while(i1 < fftLen);
 80030fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030fe:	455b      	cmp	r3, fp
 8003100:	f63f af3e 	bhi.w	8002f80 <arm_radix8_butterfly_f32+0x64>
      
      if(n2 < 8)
 8003104:	2a07      	cmp	r2, #7
 8003106:	f240 81d1 	bls.w	80034ac <arm_radix8_butterfly_f32+0x590>
 800310a:	9b01      	ldr	r3, [sp, #4]
 800310c:	ea4f 1c42 	mov.w	ip, r2, lsl #5
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	930e      	str	r3, [sp, #56]	; 0x38
 8003114:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8003116:	9b02      	ldr	r3, [sp, #8]
 8003118:	4423      	add	r3, r4
 800311a:	9305      	str	r3, [sp, #20]
 800311c:	9b01      	ldr	r3, [sp, #4]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	930f      	str	r3, [sp, #60]	; 0x3c
 8003122:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003124:	9b02      	ldr	r3, [sp, #8]
 8003126:	4423      	add	r3, r4
 8003128:	9306      	str	r3, [sp, #24]
 800312a:	9b01      	ldr	r3, [sp, #4]
 800312c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8003130:	00e3      	lsls	r3, r4, #3
 8003132:	00e5      	lsls	r5, r4, #3
 8003134:	9311      	str	r3, [sp, #68]	; 0x44
 8003136:	9b02      	ldr	r3, [sp, #8]
 8003138:	442b      	add	r3, r5
 800313a:	9308      	str	r3, [sp, #32]
 800313c:	9b01      	ldr	r3, [sp, #4]
 800313e:	441c      	add	r4, r3
 8003140:	00e3      	lsls	r3, r4, #3
 8003142:	00e5      	lsls	r5, r4, #3
 8003144:	9314      	str	r3, [sp, #80]	; 0x50
 8003146:	9b02      	ldr	r3, [sp, #8]
 8003148:	442b      	add	r3, r5
 800314a:	9307      	str	r3, [sp, #28]
 800314c:	9b01      	ldr	r3, [sp, #4]
 800314e:	441c      	add	r4, r3
 8003150:	00e3      	lsls	r3, r4, #3
 8003152:	00e5      	lsls	r5, r4, #3
 8003154:	9313      	str	r3, [sp, #76]	; 0x4c
 8003156:	9b02      	ldr	r3, [sp, #8]
 8003158:	442b      	add	r3, r5
 800315a:	930b      	str	r3, [sp, #44]	; 0x2c
 800315c:	9b01      	ldr	r3, [sp, #4]
 800315e:	441c      	add	r4, r3
 8003160:	00e3      	lsls	r3, r4, #3
 8003162:	00e5      	lsls	r5, r4, #3
 8003164:	9312      	str	r3, [sp, #72]	; 0x48
 8003166:	9b02      	ldr	r3, [sp, #8]
 8003168:	442b      	add	r3, r5
 800316a:	930a      	str	r3, [sp, #40]	; 0x28
 800316c:	9b01      	ldr	r3, [sp, #4]
 800316e:	441c      	add	r4, r3
 8003170:	00e3      	lsls	r3, r4, #3
 8003172:	9310      	str	r3, [sp, #64]	; 0x40
 8003174:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003176:	9b02      	ldr	r3, [sp, #8]
 8003178:	4423      	add	r3, r4
 800317a:	2400      	movs	r4, #0
 800317c:	9309      	str	r3, [sp, #36]	; 0x24
 800317e:	2328      	movs	r3, #40	; 0x28
 8003180:	fb03 fe02 	mul.w	lr, r3, r2
 8003184:	2330      	movs	r3, #48	; 0x30
 8003186:	fb03 f702 	mul.w	r7, r3, r2
 800318a:	2318      	movs	r3, #24
 800318c:	fb03 f602 	mul.w	r6, r3, r2
 8003190:	2338      	movs	r3, #56	; 0x38
 8003192:	fb03 f502 	mul.w	r5, r3, r2
 8003196:	2301      	movs	r3, #1
 8003198:	9304      	str	r3, [sp, #16]
 800319a:	f10c 030c 	add.w	r3, ip, #12
 800319e:	9315      	str	r3, [sp, #84]	; 0x54
 80031a0:	f109 030c 	add.w	r3, r9, #12
 80031a4:	9316      	str	r3, [sp, #88]	; 0x58
 80031a6:	f10e 030c 	add.w	r3, lr, #12
 80031aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80031ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031ae:	330c      	adds	r3, #12
 80031b0:	9318      	str	r3, [sp, #96]	; 0x60
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	9319      	str	r3, [sp, #100]	; 0x64
 80031b8:	f106 030c 	add.w	r3, r6, #12
 80031bc:	931a      	str	r3, [sp, #104]	; 0x68
 80031be:	f105 030c 	add.w	r3, r5, #12
 80031c2:	931b      	str	r3, [sp, #108]	; 0x6c
         ia4 = ia3 + id;
         ia5 = ia4 + id;
         ia6 = ia5 + id;
         ia7 = ia6 + id;
                  
         co2 = pCoef[2 * ia1];
 80031c4:	9b05      	ldr	r3, [sp, #20]
 80031c6:	edd3 1a00 	vldr	s3, [r3]
         co3 = pCoef[2 * ia2];
 80031ca:	9b06      	ldr	r3, [sp, #24]
 80031cc:	ed93 8a00 	vldr	s16, [r3]
         co4 = pCoef[2 * ia3];
 80031d0:	9b08      	ldr	r3, [sp, #32]
 80031d2:	edd3 4a00 	vldr	s9, [r3]
         co5 = pCoef[2 * ia4];
 80031d6:	9b07      	ldr	r3, [sp, #28]
 80031d8:	ed93 9a00 	vldr	s18, [r3]
         co6 = pCoef[2 * ia5];
 80031dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031de:	edd3 3a00 	vldr	s7, [r3]
         co7 = pCoef[2 * ia6];
 80031e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031e4:	edd3 0a00 	vldr	s1, [r3]
         co8 = pCoef[2 * ia7];
 80031e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031ea:	edd3 2a00 	vldr	s5, [r3]
         si2 = pCoef[2 * ia1 + 1];
 80031ee:	9b05      	ldr	r3, [sp, #20]
 80031f0:	ed93 1a01 	vldr	s2, [r3, #4]
         si3 = pCoef[2 * ia2 + 1];
 80031f4:	9b06      	ldr	r3, [sp, #24]
 80031f6:	edd3 8a01 	vldr	s17, [r3, #4]
         si4 = pCoef[2 * ia3 + 1];
 80031fa:	9b08      	ldr	r3, [sp, #32]
 80031fc:	ed93 4a01 	vldr	s8, [r3, #4]
         si5 = pCoef[2 * ia4 + 1];
 8003200:	9b07      	ldr	r3, [sp, #28]
 8003202:	edd3 9a01 	vldr	s19, [r3, #4]
         si6 = pCoef[2 * ia5 + 1];
 8003206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003208:	ed93 3a01 	vldr	s6, [r3, #4]
         si7 = pCoef[2 * ia6 + 1];
 800320c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800320e:	ed93 0a01 	vldr	s0, [r3, #4]
         si8 = pCoef[2 * ia7 + 1];         
 8003212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003214:	ed93 2a01 	vldr	s4, [r3, #4]
 8003218:	9b04      	ldr	r3, [sp, #16]
 800321a:	eb00 0ac3 	add.w	sl, r0, r3, lsl #3
 800321e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003220:	eb03 0904 	add.w	r9, r3, r4
 8003224:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003226:	eb03 0804 	add.w	r8, r3, r4
 800322a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800322c:	4481      	add	r9, r0
 800322e:	eb03 0c04 	add.w	ip, r3, r4
 8003232:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003234:	4480      	add	r8, r0
 8003236:	eb03 0e04 	add.w	lr, r3, r4
 800323a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800323c:	4484      	add	ip, r0
 800323e:	191f      	adds	r7, r3, r4
 8003240:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003242:	4486      	add	lr, r0
 8003244:	191e      	adds	r6, r3, r4
 8003246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003248:	4407      	add	r7, r0
 800324a:	191d      	adds	r5, r3, r4
 800324c:	4406      	add	r6, r0
         
         i1 = j;
 800324e:	9b04      	ldr	r3, [sp, #16]
 8003250:	4405      	add	r5, r0
 8003252:	930c      	str	r3, [sp, #48]	; 0x30
 8003254:	e002      	b.n	800325c <arm_radix8_butterfly_f32+0x340>
 8003256:	bf00      	nop
 8003258:	3f3504f3 	.word	0x3f3504f3
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800325c:	ed59 7a01 	vldr	s15, [r9, #-4]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003260:	ed5c 6a01 	vldr	s13, [ip, #-4]
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003264:	ed9a aa00 	vldr	s20, [sl]
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003268:	ed18 da01 	vldr	s26, [r8, #-4]
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800326c:	ed1e ba01 	vldr	s22, [lr, #-4]
            i4 = i3 + n2;
            i5 = i4 + n2;
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003270:	ee3a 7a27 	vadd.f32	s14, s20, s15
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003274:	ee3a aa67 	vsub.f32	s20, s20, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003278:	ed16 ea01 	vldr	s28, [r6, #-4]
            i6 = i5 + n2;
            i7 = i6 + n2;
            i8 = i7 + n2;
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800327c:	ee7d 7a26 	vadd.f32	s15, s26, s13
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003280:	ee3d da66 	vsub.f32	s26, s26, s13
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003284:	ed57 6a01 	vldr	s13, [r7, #-4]
 8003288:	ee3b 6a26 	vadd.f32	s12, s22, s13
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800328c:	ee3b ba66 	vsub.f32	s22, s22, s13
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003290:	ed55 6a01 	vldr	s13, [r5, #-4]
 8003294:	ee7e aa26 	vadd.f32	s21, s28, s13
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
            t1 = r1 - r3;
 8003298:	ee37 fa46 	vsub.f32	s30, s14, s12
            r1 = r1 + r3;
 800329c:	ee37 6a06 	vadd.f32	s12, s14, s12
            r3 = r2 - r4;
 80032a0:	ee77 eaea 	vsub.f32	s29, s15, s21
            r2 = r2 + r4;
 80032a4:	ee77 7aaa 	vadd.f32	s15, s15, s21
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80032a8:	ee3e ea66 	vsub.f32	s28, s28, s13
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
 80032ac:	ee36 7a27 	vadd.f32	s14, s12, s15
            r2 = r1 - r2;
 80032b0:	ee76 aa67 	vsub.f32	s21, s12, s15
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80032b4:	ed9a 6a01 	vldr	s12, [sl, #4]
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
            t1 = r1 - r3;
            r1 = r1 + r3;
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
 80032b8:	ed8a 7a00 	vstr	s14, [sl]
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80032bc:	edd9 7a00 	vldr	s15, [r9]
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80032c0:	edd8 ca00 	vldr	s25, [r8]
            r1 = r1 + r3;
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80032c4:	ee36 7a27 	vadd.f32	s14, s12, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80032c8:	edde 6a00 	vldr	s13, [lr]
            r3 = r2 - r4;
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80032cc:	ee76 ba67 	vsub.f32	s23, s12, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80032d0:	eddc 7a00 	vldr	s15, [ip]
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80032d4:	edd6 fa00 	vldr	s31, [r6]
 80032d8:	edd5 da00 	vldr	s27, [r5]
            r2 = r2 + r4;
            pSrc[2 * i1] = r1 + r2;
            r2 = r1 - r2;
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80032dc:	ee3c 6aa7 	vadd.f32	s12, s25, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80032e0:	ee7c cae7 	vsub.f32	s25, s25, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80032e4:	edd7 7a00 	vldr	s15, [r7]
 80032e8:	ee36 caa7 	vadd.f32	s24, s13, s15
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80032ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80032f0:	ee7f 6aad 	vadd.f32	s13, s31, s27
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80032f4:	ee7f daed 	vsub.f32	s27, s31, s27
            t2 = s1 - s3;
 80032f8:	ee77 fa4c 	vsub.f32	s31, s14, s24
            s1 = s1 + s3;
 80032fc:	ee37 ca0c 	vadd.f32	s24, s14, s24
            s3 = s2 - s4;
 8003300:	ee36 7a66 	vsub.f32	s14, s12, s13
            s2 = s2 + s4;
 8003304:	ee36 6a26 	vadd.f32	s12, s12, s13
            r1 = t1 + s3;
 8003308:	ee7f 6a07 	vadd.f32	s13, s30, s14
            t1 = t1 - s3;
 800330c:	ee3f 7a47 	vsub.f32	s14, s30, s14
            pSrc[2 * i1 + 1] = s1 + s2;
 8003310:	ee3c fa06 	vadd.f32	s30, s24, s12
            s2 = s1 - s2;
 8003314:	ee3c ca46 	vsub.f32	s24, s24, s12
            s1 = s1 + s3;
            s3 = s2 - s4;
            s2 = s2 + s4;
            r1 = t1 + s3;
            t1 = t1 - s3;
            pSrc[2 * i1 + 1] = s1 + s2;
 8003318:	ed8a fa01 	vstr	s30, [sl, #4]
            s2 = s1 - s2;
            s1 = t2 - r3;
 800331c:	ee3f faee 	vsub.f32	s30, s31, s29
            t2 = t2 + r3;
            p1 = co5 * r2;
            p2 = si5 * s2;
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 8003320:	ee29 6a8c 	vmul.f32	s12, s19, s24
 8003324:	448a      	add	sl, r1
            r1 = t1 + s3;
            t1 = t1 - s3;
            pSrc[2 * i1 + 1] = s1 + s2;
            s2 = s1 - s2;
            s1 = t2 - r3;
            t2 = t2 + r3;
 8003326:	ee7e eaaf 	vadd.f32	s29, s29, s31
            p1 = co5 * r2;
            p2 = si5 * s2;
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
 800332a:	eea9 6a2a 	vfma.f32	s12, s18, s21
 800332e:	ed09 6a01 	vstr	s12, [r9, #-4]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003332:	ee2a 6ae9 	vnmul.f32	s12, s21, s19
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
 8003336:	ee7d aa4e 	vsub.f32	s21, s26, s28
            p1 = co5 * r2;
            p2 = si5 * s2;
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
            pSrc[2 * i5 + 1] = p3 - p4;
 800333a:	eea9 6a0c 	vfma.f32	s12, s18, s24
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
 800333e:	eeb0 ca4a 	vmov.f32	s24, s20
            r5 = r5 + r1;
 8003342:	eeaa aa85 	vfma.f32	s20, s21, s10
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
 8003346:	eeaa cac5 	vfms.f32	s24, s21, s10
            r5 = r5 + r1;
            r8 = r7 - r6;
 800334a:	eef0 aa4b 	vmov.f32	s21, s22
            p1 = co5 * r2;
            p2 = si5 * s2;
            p3 = co5 * s2;
            p4 = si5 * r2;
            pSrc[2 * i5]     = p1 + p2;
            pSrc[2 * i5 + 1] = p3 - p4;
 800334e:	ed89 6a00 	vstr	s12, [r9]
            p1 = co3 * r1;
            p2 = si3 * s1;
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
 8003352:	ee28 6a8f 	vmul.f32	s12, s17, s30
 8003356:	4489      	add	r9, r1
 8003358:	eea8 6a26 	vfma.f32	s12, s16, s13
            pSrc[2 * i3 + 1] = p3 - p4;
 800335c:	ee66 6ae8 	vnmul.f32	s13, s13, s17
 8003360:	eee8 6a0f 	vfma.f32	s13, s16, s30
            pSrc[2 * i5 + 1] = p3 - p4;
            p1 = co3 * r1;
            p2 = si3 * s1;
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
 8003364:	ed0e 6a01 	vstr	s12, [lr, #-4]
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
 8003368:	ee3c 6aed 	vsub.f32	s12, s25, s27
            p1 = co3 * r1;
            p2 = si3 * s1;
            p3 = co3 * s1;
            p4 = si3 * r1;
            pSrc[2 * i3]     = p1 + p2;
            pSrc[2 * i3 + 1] = p3 - p4;
 800336c:	edce 6a00 	vstr	s13, [lr]
            p1 = co7 * t1;
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
 8003370:	ee60 6a2e 	vmul.f32	s13, s0, s29
 8003374:	448e      	add	lr, r1
 8003376:	eee0 6a87 	vfma.f32	s13, s1, s14
            pSrc[2 * i7 + 1] = p3 - p4;
 800337a:	ee27 7a40 	vnmul.f32	s14, s14, s0
 800337e:	eea0 7aae 	vfma.f32	s14, s1, s29
            pSrc[2 * i3 + 1] = p3 - p4;
            p1 = co7 * t1;
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
 8003382:	ed47 6a01 	vstr	s13, [r7, #-4]
            pSrc[2 * i7 + 1] = p3 - p4;
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
 8003386:	ee7d 6a0e 	vadd.f32	s13, s26, s28
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
 800338a:	eea6 ba85 	vfma.f32	s22, s13, s10
            p1 = co7 * t1;
            p2 = si7 * t2;
            p3 = co7 * t2;
            p4 = si7 * t1;
            pSrc[2 * i7]     = p1 + p2;
            pSrc[2 * i7 + 1] = p3 - p4;
 800338e:	ed87 7a00 	vstr	s14, [r7]
            r1 = (r6 - r8) * C81;
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
 8003392:	ee3c 7aad 	vadd.f32	s14, s25, s27
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
            t2 = s5 - s1;
 8003396:	eef0 ca6b 	vmov.f32	s25, s23
 800339a:	440f      	add	r7, r1
            s5 = s5 + s1;
 800339c:	eee6 ba05 	vfma.f32	s23, s12, s10
            r6 = (r6 + r8) * C81;
            s1 = (s6 - s8) * C81;
            s6 = (s6 + s8) * C81;
            t1 = r5 - r1;
            r5 = r5 + r1;
            r8 = r7 - r6;
 80033a0:	eee6 aac5 	vfms.f32	s21, s13, s10
            r7 = r7 + r6;
            t2 = s5 - s1;
 80033a4:	eee6 ca45 	vfms.f32	s25, s12, s10
            s5 = s5 + s1;
 80033a8:	eeb0 6a6b 	vmov.f32	s12, s23
            s8 = s7 - s6;
 80033ac:	eef0 ba67 	vmov.f32	s23, s15
            s7 = s7 + s6;
 80033b0:	eee7 7a05 	vfma.f32	s15, s14, s10
            r5 = r5 + r1;
            r8 = r7 - r6;
            r7 = r7 + r6;
            t2 = s5 - s1;
            s5 = s5 + s1;
            s8 = s7 - s6;
 80033b4:	eee7 ba45 	vfms.f32	s23, s14, s10
            s7 = s7 + s6;
            r1 = r5 + s7;
 80033b8:	ee7a 6a27 	vadd.f32	s13, s20, s15
            r5 = r5 - s7;
 80033bc:	ee7a 7a67 	vsub.f32	s15, s20, s15
            r6 = t1 + s8;
 80033c0:	ee3c 7a2b 	vadd.f32	s14, s24, s23
            t1 = t1 - s8;
 80033c4:	ee3c aa6b 	vsub.f32	s20, s24, s23
            s1 = s5 - r7;
 80033c8:	ee36 ca4b 	vsub.f32	s24, s12, s22
            s5 = s5 + r7;
 80033cc:	ee3b 6a06 	vadd.f32	s12, s22, s12
            s6 = t2 - r8;
 80033d0:	ee3c baea 	vsub.f32	s22, s25, s21
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 80033d4:	ee61 ba0c 	vmul.f32	s23, s2, s24
            r6 = t1 + s8;
            t1 = t1 - s8;
            s1 = s5 - r7;
            s5 = s5 + r7;
            s6 = t2 - r8;
            t2 = t2 + r8;
 80033d8:	ee7a aaac 	vadd.f32	s21, s21, s25
            p1 = co2 * r1;
            p2 = si2 * s1;
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 80033dc:	eee1 baa6 	vfma.f32	s23, s3, s13
            pSrc[2 * i2 + 1] = p3 - p4;
 80033e0:	ee66 6ac1 	vnmul.f32	s13, s13, s2
 80033e4:	eee1 6a8c 	vfma.f32	s13, s3, s24
            t2 = t2 + r8;
            p1 = co2 * r1;
            p2 = si2 * s1;
            p3 = co2 * s1;
            p4 = si2 * r1;
            pSrc[2 * i2]     = p1 + p2;
 80033e8:	ed48 ba01 	vstr	s23, [r8, #-4]
            pSrc[2 * i2 + 1] = p3 - p4;
 80033ec:	edc8 6a00 	vstr	s13, [r8]
            p1 = co8 * r5;
            p2 = si8 * s5;
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
 80033f0:	ee62 6a06 	vmul.f32	s13, s4, s12
 80033f4:	4488      	add	r8, r1
 80033f6:	eee2 6aa7 	vfma.f32	s13, s5, s15
 80033fa:	ed45 6a01 	vstr	s13, [r5, #-4]
            pSrc[2 * i8 + 1] = p3 - p4;
 80033fe:	ee67 6ac2 	vnmul.f32	s13, s15, s4
            p1 = co6 * r6;
            p2 = si6 * s6;
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 8003402:	ee63 7a0b 	vmul.f32	s15, s6, s22
            p1 = co8 * r5;
            p2 = si8 * s5;
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
            pSrc[2 * i8 + 1] = p3 - p4;
 8003406:	eee2 6a86 	vfma.f32	s13, s5, s12
            p1 = co6 * r6;
            p2 = si6 * s6;
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 800340a:	eee3 7a87 	vfma.f32	s15, s7, s14
            pSrc[2 * i6 + 1] = p3 - p4;
 800340e:	ee27 7a43 	vnmul.f32	s14, s14, s6
 8003412:	eea3 7a8b 	vfma.f32	s14, s7, s22
            p1 = co8 * r5;
            p2 = si8 * s5;
            p3 = co8 * s5;
            p4 = si8 * r5;
            pSrc[2 * i8]     = p1 + p2;
            pSrc[2 * i8 + 1] = p3 - p4;
 8003416:	edc5 6a00 	vstr	s13, [r5]
 800341a:	440d      	add	r5, r1
            p1 = co6 * r6;
            p2 = si6 * s6;
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
 800341c:	ed4c 7a01 	vstr	s15, [ip, #-4]
            pSrc[2 * i6 + 1] = p3 - p4;
            p1 = co4 * t1;
            p2 = si4 * t2;
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 8003420:	ee64 7a2a 	vmul.f32	s15, s8, s21
 8003424:	eee4 7a8a 	vfma.f32	s15, s9, s20
            p1 = co6 * r6;
            p2 = si6 * s6;
            p3 = co6 * s6;
            p4 = si6 * r6;
            pSrc[2 * i6]     = p1 + p2;
            pSrc[2 * i6 + 1] = p3 - p4;
 8003428:	ed8c 7a00 	vstr	s14, [ip]
 800342c:	448c      	add	ip, r1
            p1 = co4 * t1;
            p2 = si4 * t2;
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
 800342e:	ed46 7a01 	vstr	s15, [r6, #-4]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003432:	ee6a 7a44 	vnmul.f32	s15, s20, s8
 8003436:	eee4 7aaa 	vfma.f32	s15, s9, s21
 800343a:	edc6 7a00 	vstr	s15, [r6]
 800343e:	440e      	add	r6, r1
            
            i1 += n1;
 8003440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003442:	469b      	mov	fp, r3
 8003444:	9b03      	ldr	r3, [sp, #12]
 8003446:	449b      	add	fp, r3
         } while(i1 < fftLen);
 8003448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            p3 = co4 * t2;
            p4 = si4 * t1;
            pSrc[2 * i4]     = p1 + p2;
            pSrc[2 * i4 + 1] = p3 - p4;
            
            i1 += n1;
 800344a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
         } while(i1 < fftLen);
 800344e:	469b      	mov	fp, r3
 8003450:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003452:	459b      	cmp	fp, r3
 8003454:	f63f af02 	bhi.w	800325c <arm_radix8_butterfly_f32+0x340>
         
         j++;
 8003458:	9b04      	ldr	r3, [sp, #16]
 800345a:	3408      	adds	r4, #8
 800345c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800345e:	3301      	adds	r3, #1
 8003460:	9304      	str	r3, [sp, #16]
 8003462:	9b05      	ldr	r3, [sp, #20]
 8003464:	442b      	add	r3, r5
 8003466:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003468:	9305      	str	r3, [sp, #20]
 800346a:	9b06      	ldr	r3, [sp, #24]
 800346c:	442b      	add	r3, r5
 800346e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8003470:	9306      	str	r3, [sp, #24]
 8003472:	9b08      	ldr	r3, [sp, #32]
 8003474:	442b      	add	r3, r5
 8003476:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003478:	9308      	str	r3, [sp, #32]
 800347a:	9b07      	ldr	r3, [sp, #28]
 800347c:	442b      	add	r3, r5
 800347e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8003480:	9307      	str	r3, [sp, #28]
 8003482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003484:	442b      	add	r3, r5
 8003486:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003488:	930b      	str	r3, [sp, #44]	; 0x2c
 800348a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800348c:	442b      	add	r3, r5
 800348e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003490:	930a      	str	r3, [sp, #40]	; 0x28
 8003492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003494:	442b      	add	r3, r5
 8003496:	9309      	str	r3, [sp, #36]	; 0x24
      } while(j < n2);
 8003498:	9b04      	ldr	r3, [sp, #16]
 800349a:	429a      	cmp	r2, r3
 800349c:	f47f ae92 	bne.w	80031c4 <arm_radix8_butterfly_f32+0x2a8>
      
      twidCoefModifier <<= 3;
 80034a0:	9b01      	ldr	r3, [sp, #4]
 80034a2:	9203      	str	r2, [sp, #12]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	e544      	b.n	8002f36 <arm_radix8_butterfly_f32+0x1a>
   } while(n2 > 7);   
}
 80034ac:	b01d      	add	sp, #116	; 0x74
 80034ae:	ecbd 8b10 	vpop	{d8-d15}
 80034b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034b6:	bf00      	nop

080034b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034be:	e003      	b.n	80034c8 <LoopCopyDataInit>

080034c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034c6:	3104      	adds	r1, #4

080034c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034c8:	480b      	ldr	r0, [pc, #44]	; (80034f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034ca:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034d0:	d3f6      	bcc.n	80034c0 <CopyDataInit>
  ldr  r2, =_sbss
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034d4:	e002      	b.n	80034dc <LoopFillZerobss>

080034d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034d8:	f842 3b04 	str.w	r3, [r2], #4

080034dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034e0:	d3f9      	bcc.n	80034d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034e2:	f000 f813 	bl	800350c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034e6:	f00d ff29 	bl	801133c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ea:	f00b fd95 	bl	800f018 <main>
  bx  lr    
 80034ee:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034f0:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80034f4:	0802d448 	.word	0x0802d448
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034f8:	20010000 	.word	0x20010000
  ldr  r3, =_edata
 80034fc:	200105d0 	.word	0x200105d0
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003500:	20014298 	.word	0x20014298
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003504:	200497f4 	.word	0x200497f4

08003508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC_IRQHandler>
	...

0800350c <SystemInit>:
  * @retval None
  */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); /* set CP10 and CP11 Full Access */
 800350c:	490f      	ldr	r1, [pc, #60]	; (800354c <SystemInit+0x40>)
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800350e:	2000      	movs	r0, #0
  * @retval None
  */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); /* set CP10 and CP11 Full Access */
 8003510:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <SystemInit+0x44>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	f042 0201 	orr.w	r2, r2, #1
 8003524:	601a      	str	r2, [r3, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003526:	6098      	str	r0, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800352e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003532:	601a      	str	r2, [r3, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8003534:	4a07      	ldr	r2, [pc, #28]	; (8003554 <SystemInit+0x48>)
 8003536:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800353e:	601a      	str	r2, [r3, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8003540:	60d8      	str	r0, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003542:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003546:	608b      	str	r3, [r1, #8]
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	e000ed00 	.word	0xe000ed00
 8003550:	40023800 	.word	0x40023800
 8003554:	24003010 	.word	0x24003010

08003558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003558:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800355a:	2003      	movs	r0, #3
 800355c:	f000 f824 	bl	80035a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003560:	2000      	movs	r0, #0
 8003562:	f00b fac1 	bl	800eae8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003566:	f00b f8f5 	bl	800e754 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 800356a:	2000      	movs	r0, #0
 800356c:	bd08      	pop	{r3, pc}
	...

08003570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003570:	4a02      	ldr	r2, [pc, #8]	; (800357c <HAL_IncTick+0xc>)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	200430c0 	.word	0x200430c0

08003580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003580:	4b01      	ldr	r3, [pc, #4]	; (8003588 <HAL_GetTick+0x8>)
 8003582:	6818      	ldr	r0, [r3, #0]
}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	200430c0 	.word	0x200430c0

0800358c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800358c:	b513      	push	{r0, r1, r4, lr}
 800358e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8003590:	f7ff fff6 	bl	8003580 <HAL_GetTick>
 8003594:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8003596:	f7ff fff3 	bl	8003580 <HAL_GetTick>
 800359a:	9b01      	ldr	r3, [sp, #4]
 800359c:	1b00      	subs	r0, r0, r4
 800359e:	4298      	cmp	r0, r3
 80035a0:	d3f9      	bcc.n	8003596 <HAL_Delay+0xa>
  {
  }
}
 80035a2:	b002      	add	sp, #8
 80035a4:	bd10      	pop	{r4, pc}
	...

080035a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035a8:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80035aa:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ac:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80035ae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80035b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035b6:	041b      	lsls	r3, r3, #16
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80035c4:	60d3      	str	r3, [r2, #12]
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035cc:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_NVIC_SetPriority+0x68>)
 80035ce:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d4:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035d6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035da:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035dc:	2c04      	cmp	r4, #4
 80035de:	bf28      	it	cs
 80035e0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e2:	2d06      	cmp	r5, #6

  return (
 80035e4:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035e8:	bf8c      	ite	hi
 80035ea:	3b03      	subhi	r3, #3
 80035ec:	2300      	movls	r3, #0

  return (
 80035ee:	fa05 f404 	lsl.w	r4, r5, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80035f2:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80035f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80035f8:	ea04 0401 	and.w	r4, r4, r1
 80035fc:	fa04 f403 	lsl.w	r4, r4, r3
 8003600:	fa05 f303 	lsl.w	r3, r5, r3
 8003604:	f103 33ff 	add.w	r3, r3, #4294967295
 8003608:	ea02 0203 	and.w	r2, r2, r3
 800360c:	ea42 0204 	orr.w	r2, r2, r4
 8003610:	ea4f 1202 	mov.w	r2, r2, lsl #4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003614:	da05      	bge.n	8003622 <HAL_NVIC_SetPriority+0x56>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	f000 000f 	and.w	r0, r0, #15
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_NVIC_SetPriority+0x6c>)
 800361e:	541a      	strb	r2, [r3, r0]
 8003620:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800362c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8003630:	bd30      	pop	{r4, r5, pc}
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00
 8003638:	e000ed14 	.word	0xe000ed14

0800363c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800363c:	0942      	lsrs	r2, r0, #5
 800363e:	2301      	movs	r3, #1
 8003640:	f000 001f 	and.w	r0, r0, #31
 8003644:	fa03 f000 	lsl.w	r0, r3, r0
 8003648:	4b01      	ldr	r3, [pc, #4]	; (8003650 <HAL_NVIC_EnableIRQ+0x14>)
 800364a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800364e:	4770      	bx	lr
 8003650:	e000e100 	.word	0xe000e100

08003654 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003654:	3801      	subs	r0, #1
 8003656:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800365a:	d20a      	bcs.n	8003672 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800365e:	21f0      	movs	r1, #240	; 0xf0
 8003660:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003662:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003664:	2000      	movs	r0, #0
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003666:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000e010 	.word	0xe000e010
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003682:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	bf0c      	ite	eq
 8003688:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800368c:	f022 0204 	bicne.w	r2, r2, #4
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	4770      	bx	lr
 8003694:	e000e010 	.word	0xe000e010

08003698 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003698:	6803      	ldr	r3, [r0, #0]
 800369a:	2118      	movs	r1, #24
 800369c:	b2da      	uxtb	r2, r3
 800369e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036a2:	3a10      	subs	r2, #16
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a4:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a8:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ac:	4904      	ldr	r1, [pc, #16]	; (80036c0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80036ae:	2a03      	cmp	r2, #3
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036b0:	5c89      	ldrb	r1, [r1, r2]
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036b2:	bf88      	it	hi
 80036b4:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036b6:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036b8:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80036ba:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	0802c9c0 	.word	0x0802c9c0

080036c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7ff ff5a 	bl	8003580 <HAL_GetTick>
 80036cc:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ce:	2c00      	cmp	r4, #0
 80036d0:	d064      	beq.n	800379c <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036d2:	2300      	movs	r3, #0

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036d4:	6822      	ldr	r2, [r4, #0]
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036da:	2302      	movs	r3, #2
 80036dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e8:	6821      	ldr	r1, [r4, #0]
 80036ea:	680b      	ldr	r3, [r1, #0]
 80036ec:	07d8      	lsls	r0, r3, #31
 80036ee:	d508      	bpl.n	8003702 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f0:	f7ff ff46 	bl	8003580 <HAL_GetTick>
 80036f4:	1b40      	subs	r0, r0, r5
 80036f6:	2805      	cmp	r0, #5
 80036f8:	d9f6      	bls.n	80036e8 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036fa:	2320      	movs	r3, #32
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036fc:	2003      	movs	r0, #3
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036fe:	6563      	str	r3, [r4, #84]	; 0x54
 8003700:	e051      	b.n	80037a6 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003702:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003704:	4a29      	ldr	r2, [pc, #164]	; (80037ac <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003706:	6865      	ldr	r5, [r4, #4]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003708:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370a:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370c:	69a0      	ldr	r0, [r4, #24]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370e:	431d      	orrs	r5, r3
 8003710:	68e3      	ldr	r3, [r4, #12]
 8003712:	431d      	orrs	r5, r3
 8003714:	6923      	ldr	r3, [r4, #16]
 8003716:	431d      	orrs	r5, r3
 8003718:	6963      	ldr	r3, [r4, #20]
 800371a:	432b      	orrs	r3, r5
 800371c:	69e5      	ldr	r5, [r4, #28]
 800371e:	4303      	orrs	r3, r0
 8003720:	432b      	orrs	r3, r5
 8003722:	6a25      	ldr	r5, [r4, #32]
 8003724:	432b      	orrs	r3, r5
 8003726:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003728:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800372a:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800372c:	bf01      	itttt	eq
 800372e:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8003730:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8003732:	4335      	orreq	r5, r6
 8003734:	432b      	orreq	r3, r5

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003736:	2a04      	cmp	r2, #4
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003738:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800373a:	694b      	ldr	r3, [r1, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800373c:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003740:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003744:	d11c      	bne.n	8003780 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003746:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003748:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800374a:	b920      	cbnz	r0, 8003756 <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 800374c:	2a01      	cmp	r2, #1
 800374e:	d00b      	beq.n	8003768 <HAL_DMA_Init+0xa4>
 8003750:	d313      	bcc.n	800377a <HAL_DMA_Init+0xb6>
 8003752:	2a02      	cmp	r2, #2
 8003754:	e010      	b.n	8003778 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003756:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800375a:	d10a      	bne.n	8003772 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 800375c:	2a03      	cmp	r2, #3
 800375e:	d80f      	bhi.n	8003780 <HAL_DMA_Init+0xbc>
 8003760:	e8df f002 	tbb	[pc, r2]
 8003764:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003768:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800376a:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 800376e:	d107      	bne.n	8003780 <HAL_DMA_Init+0xbc>
 8003770:	e016      	b.n	80037a0 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003772:	2a02      	cmp	r2, #2
 8003774:	d914      	bls.n	80037a0 <HAL_DMA_Init+0xdc>
 8003776:	2a03      	cmp	r2, #3
 8003778:	d102      	bne.n	8003780 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800377a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800377c:	01d2      	lsls	r2, r2, #7
 800377e:	d40f      	bmi.n	80037a0 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003780:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003782:	4620      	mov	r0, r4
 8003784:	f7ff ff88 	bl	8003698 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003788:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800378a:	233f      	movs	r3, #63	; 0x3f
 800378c:	4093      	lsls	r3, r2
 800378e:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003790:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003792:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003794:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003796:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 800379a:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800379c:	2001      	movs	r0, #1
 800379e:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a0:	2340      	movs	r3, #64	; 0x40
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a2:	2001      	movs	r0, #1
    tmp |= hdma->Init.FIFOThreshold;
    
    if (DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a4:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037a6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	f010803f 	.word	0xf010803f

080037b0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80037b0:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037b2:	4605      	mov	r5, r0
 80037b4:	b1e8      	cbz	r0, 80037f2 <HAL_DMA_DeInit+0x42>
  {
    return HAL_ERROR;
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80037b6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80037ba:	b2e4      	uxtb	r4, r4
 80037bc:	2c02      	cmp	r4, #2
 80037be:	d01a      	beq.n	80037f6 <HAL_DMA_DeInit+0x46>
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037c0:	6803      	ldr	r3, [r0, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037c2:	2400      	movs	r4, #0
    /* Return error status */
    return HAL_BUSY;
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	f022 0201 	bic.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80037cc:	2221      	movs	r2, #33	; 0x21

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80037ce:	601c      	str	r4, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80037d0:	605c      	str	r4, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80037d2:	609c      	str	r4, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80037d4:	60dc      	str	r4, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80037d6:	611c      	str	r4, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80037d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037da:	f7ff ff5d 	bl	8003698 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80037e0:	233f      	movs	r3, #63	; 0x3f
 80037e2:	4093      	lsls	r3, r2
 80037e4:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e6:	656c      	str	r4, [r5, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80037e8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80037ec:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
 80037f0:	e001      	b.n	80037f6 <HAL_DMA_DeInit+0x46>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
 80037f4:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
  {
    /* Return error status */
    return HAL_BUSY;
 80037f6:	4620      	mov	r0, r4

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
}
 80037f8:	bd38      	pop	{r3, r4, r5, pc}

080037fa <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037fa:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037fc:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003800:	2c01      	cmp	r4, #1
 8003802:	d037      	beq.n	8003874 <HAL_DMA_Start_IT+0x7a>
 8003804:	2401      	movs	r4, #1
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003806:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8003808:	2500      	movs	r5, #0
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800380a:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800380e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003812:	2c01      	cmp	r4, #1
 8003814:	f04f 0402 	mov.w	r4, #2
 8003818:	d128      	bne.n	800386c <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800381a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800381e:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003820:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003822:	6825      	ldr	r5, [r4, #0]
 8003824:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003828:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800382a:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800382c:	6883      	ldr	r3, [r0, #8]
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	d102      	bne.n	8003838 <HAL_DMA_Start_IT+0x3e>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003832:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003834:	60e1      	str	r1, [r4, #12]
 8003836:	e001      	b.n	800383c <HAL_DMA_Start_IT+0x42>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003838:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800383a:	60e2      	str	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800383e:	233f      	movs	r3, #63	; 0x3f
 8003840:	4093      	lsls	r3, r2
 8003842:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	f043 0316 	orr.w	r3, r3, #22
 800384a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800384c:	6963      	ldr	r3, [r4, #20]
 800384e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003852:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003854:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003856:	b11b      	cbz	r3, 8003860 <HAL_DMA_Start_IT+0x66>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003858:	6823      	ldr	r3, [r4, #0]
 800385a:	f043 0308 	orr.w	r3, r3, #8
 800385e:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003860:	6823      	ldr	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2000      	movs	r0, #0
    {
      hdma->Instance->CR  |= DMA_IT_HT;
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800386c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003870:	4620      	mov	r0, r4
 8003872:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003874:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 8003876:	bd70      	pop	{r4, r5, r6, pc}

08003878 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800387c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7ff fe7f 	bl	8003580 <HAL_GetTick>
 8003882:	4606      	mov	r6, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003884:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003888:	2b02      	cmp	r3, #2
 800388a:	d006      	beq.n	800389a <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800388c:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 800388e:	2001      	movs	r0, #1
  
  uint32_t tickstart = HAL_GetTick();
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003892:	2300      	movs	r3, #0
 8003894:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8003898:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	f022 0216 	bic.w	r2, r2, #22
 80038a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80038ae:	b90a      	cbnz	r2, 80038b4 <HAL_DMA_Abort+0x3c>
 80038b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80038b2:	b11a      	cbz	r2, 80038bc <HAL_DMA_Abort+0x44>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f022 0208 	bic.w	r2, r2, #8
 80038ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	f010 0001 	ands.w	r0, r0, #1
 80038cc:	d00d      	beq.n	80038ea <HAL_DMA_Abort+0x72>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ce:	f7ff fe57 	bl	8003580 <HAL_GetTick>
 80038d2:	1b80      	subs	r0, r0, r6
 80038d4:	2805      	cmp	r0, #5
 80038d6:	d9f5      	bls.n	80038c4 <HAL_DMA_Abort+0x4c>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038d8:	2320      	movs	r3, #32
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038da:	2003      	movs	r0, #3
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038dc:	6563      	str	r3, [r4, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038de:	2300      	movs	r3, #0
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038e0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
        
        return HAL_TIMEOUT;
 80038e8:	bd70      	pop	{r4, r5, r6, pc}
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80038ec:	233f      	movs	r3, #63	; 0x3f
 80038ee:	4093      	lsls	r3, r2
 80038f0:	60ab      	str	r3, [r5, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038f2:	2301      	movs	r3, #1
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  }
  return HAL_OK;
}
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003900 <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003900:	2300      	movs	r3, #0
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003904:	9301      	str	r3, [sp, #4]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003906:	4604      	mov	r4, r0
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003908:	4b59      	ldr	r3, [pc, #356]	; (8003a70 <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800390a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 800390c:	681f      	ldr	r7, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800390e:	2308      	movs	r3, #8
 8003910:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8003912:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003914:	4093      	lsls	r3, r2
 8003916:	421e      	tst	r6, r3
 8003918:	d00c      	beq.n	8003934 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800391a:	6801      	ldr	r1, [r0, #0]
 800391c:	6808      	ldr	r0, [r1, #0]
 800391e:	0740      	lsls	r0, r0, #29
 8003920:	d508      	bpl.n	8003934 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003922:	6808      	ldr	r0, [r1, #0]
 8003924:	f020 0004 	bic.w	r0, r0, #4
 8003928:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800392a:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800392c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003934:	4b4f      	ldr	r3, [pc, #316]	; (8003a74 <HAL_DMA_IRQHandler+0x174>)
 8003936:	4093      	lsls	r3, r2
 8003938:	421e      	tst	r6, r3
 800393a:	d008      	beq.n	800394e <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800393c:	6821      	ldr	r1, [r4, #0]
 800393e:	6949      	ldr	r1, [r1, #20]
 8003940:	0609      	lsls	r1, r1, #24
 8003942:	d504      	bpl.n	800394e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003944:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003946:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003948:	f043 0302 	orr.w	r3, r3, #2
 800394c:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800394e:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_DMA_IRQHandler+0x178>)
 8003950:	4093      	lsls	r3, r2
 8003952:	421e      	tst	r6, r3
 8003954:	d008      	beq.n	8003968 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003956:	6821      	ldr	r1, [r4, #0]
 8003958:	6809      	ldr	r1, [r1, #0]
 800395a:	0788      	lsls	r0, r1, #30
 800395c:	d504      	bpl.n	8003968 <HAL_DMA_IRQHandler+0x68>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800395e:	60ab      	str	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003960:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003962:	f043 0304 	orr.w	r3, r3, #4
 8003966:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003968:	2310      	movs	r3, #16
 800396a:	fa03 f202 	lsl.w	r2, r3, r2
 800396e:	4216      	tst	r6, r2
 8003970:	d017      	beq.n	80039a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	0709      	lsls	r1, r1, #28
 8003978:	d513      	bpl.n	80039a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800397a:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	0350      	lsls	r0, r2, #13
 8003980:	d504      	bpl.n	800398c <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	0319      	lsls	r1, r3, #12
 8003986:	d508      	bpl.n	800399a <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003988:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800398a:	e007      	b.n	800399c <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	05d2      	lsls	r2, r2, #23
 8003990:	d403      	bmi.n	800399a <HAL_DMA_IRQHandler+0x9a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	f022 0208 	bic.w	r2, r2, #8
 8003998:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800399a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800399c:	b10b      	cbz	r3, 80039a2 <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800399e:	4620      	mov	r0, r4
 80039a0:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80039a4:	2220      	movs	r2, #32
 80039a6:	408a      	lsls	r2, r1
 80039a8:	4216      	tst	r6, r2
 80039aa:	d03b      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	06c6      	lsls	r6, r0, #27
 80039b2:	d537      	bpl.n	8003a24 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039b4:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039b6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80039ba:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039bc:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039be:	d119      	bne.n	80039f4 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039c0:	f022 0216 	bic.w	r2, r2, #22
 80039c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039d0:	b90a      	cbnz	r2, 80039d6 <HAL_DMA_IRQHandler+0xd6>
 80039d2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80039d4:	b11a      	cbz	r2, 80039de <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	f022 0208 	bic.w	r2, r2, #8
 80039dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039de:	233f      	movs	r3, #63	; 0x3f
 80039e0:	408b      	lsls	r3, r1
 80039e2:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039e4:	2300      	movs	r3, #0
 80039e6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
         
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	
        if(hdma->XferAbortCallback != NULL)
 80039f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80039f2:	e037      	b.n	8003a64 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }
      
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f4:	0350      	lsls	r0, r2, #13
 80039f6:	d504      	bpl.n	8003a02 <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	0319      	lsls	r1, r3, #12
 80039fc:	d40e      	bmi.n	8003a1c <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a00:	e00d      	b.n	8003a1e <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003a08:	d108      	bne.n	8003a1c <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	f021 0110 	bic.w	r1, r1, #16
 8003a10:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a12:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a14:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          
          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }
        
        if(hdma->XferCpltCallback != NULL)
 8003a1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a1e:	b10b      	cbz	r3, 8003a24 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a20:	4620      	mov	r0, r4
 8003a22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a24:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a26:	b303      	cbz	r3, 8003a6a <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a2a:	07da      	lsls	r2, r3, #31
 8003a2c:	d519      	bpl.n	8003a62 <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a2e:	2305      	movs	r3, #5
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a30:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a36:	6813      	ldr	r3, [r2, #0]
 8003a38:	f023 0301 	bic.w	r3, r3, #1
 8003a3c:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8003a3e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003a42:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
      
      do
      {
        if (++count > timeout)
 8003a46:	9b01      	ldr	r3, [sp, #4]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	429f      	cmp	r7, r3
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	d302      	bcc.n	8003a56 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a50:	6813      	ldr	r3, [r2, #0]
 8003a52:	07db      	lsls	r3, r3, #31
 8003a54:	d4f7      	bmi.n	8003a46 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a56:	2300      	movs	r3, #0
 8003a58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }
    
    if(hdma->XferErrorCallback != NULL)
 8003a62:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003a64:	b10b      	cbz	r3, 8003a6a <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a66:	4620      	mov	r0, r4
 8003a68:	4798      	blx	r3
    }
  }
}
 8003a6a:	b003      	add	sp, #12
 8003a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20010044 	.word	0x20010044
 8003a74:	00800001 	.word	0x00800001
 8003a78:	00800004 	.word	0x00800004

08003a7c <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8003a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8003a7e:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	4d25      	ldr	r5, [pc, #148]	; (8003b18 <DMA2D_SetConfig+0x9c>)
 8003a82:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003a84:	fa95 f5a5 	rbit	r5, r5
 8003a88:	f006 4740 	and.w	r7, r6, #3221225472	; 0xc0000000
 8003a8c:	fab5 f585 	clz	r5, r5
 8003a90:	9e05      	ldr	r6, [sp, #20]
 8003a92:	40ab      	lsls	r3, r5
 8003a94:	433e      	orrs	r6, r7
 8003a96:	4333      	orrs	r3, r6
 8003a98:	6463      	str	r3, [r4, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003a9a:	6843      	ldr	r3, [r0, #4]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003a9c:	63e2      	str	r2, [r4, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003a9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003aa2:	d136      	bne.n	8003b12 <DMA2D_SetConfig+0x96>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003aa4:	f001 467f 	and.w	r6, r1, #4278190080	; 0xff000000
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003aa8:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003aac:	f401 427f 	and.w	r2, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003ab0:	b2cd      	uxtb	r5, r1
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003ab2:	6881      	ldr	r1, [r0, #8]
 8003ab4:	b921      	cbnz	r1, 8003ac0 <DMA2D_SetConfig+0x44>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003ab6:	4333      	orrs	r3, r6
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	ea43 0105 	orr.w	r1, r3, r5
 8003abe:	e026      	b.n	8003b0e <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003ac0:	2901      	cmp	r1, #1
 8003ac2:	d103      	bne.n	8003acc <DMA2D_SetConfig+0x50>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	ea42 0105 	orr.w	r1, r2, r5
 8003aca:	e020      	b.n	8003b0e <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003acc:	2902      	cmp	r1, #2
 8003ace:	d107      	bne.n	8003ae0 <DMA2D_SetConfig+0x64>
    {
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 10);
      tmp4 = (tmp4 >> 3 );
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8003ad0:	0cd8      	lsrs	r0, r3, #19
 8003ad2:	0a92      	lsrs	r2, r2, #10
 8003ad4:	02c0      	lsls	r0, r0, #11
 8003ad6:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 8003ada:	ea42 01d5 	orr.w	r1, r2, r5, lsr #3
 8003ade:	e016      	b.n	8003b0e <DMA2D_SetConfig+0x92>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003ae0:	2903      	cmp	r1, #3
 8003ae2:	d10a      	bne.n	8003afa <DMA2D_SetConfig+0x7e>
    { 
      tmp1 = (tmp1 >> 31);
      tmp2 = (tmp2 >> 19);
      tmp3 = (tmp3 >> 11);
      tmp4 = (tmp4 >> 3 );      
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8003ae4:	0cd8      	lsrs	r0, r3, #19
 8003ae6:	0ad2      	lsrs	r2, r2, #11
 8003ae8:	0280      	lsls	r0, r0, #10
 8003aea:	0ff3      	lsrs	r3, r6, #31
 8003aec:	ea40 1242 	orr.w	r2, r0, r2, lsl #5
 8003af0:	ea42 01d5 	orr.w	r1, r2, r5, lsr #3
 8003af4:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8003af8:	e009      	b.n	8003b0e <DMA2D_SetConfig+0x92>
    {
      tmp1 = (tmp1 >> 28);
      tmp2 = (tmp2 >> 20);
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8003afa:	0d18      	lsrs	r0, r3, #20
 8003afc:	0b12      	lsrs	r2, r2, #12
 8003afe:	0200      	lsls	r0, r0, #8
 8003b00:	0f33      	lsrs	r3, r6, #28
 8003b02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8003b06:	ea42 1115 	orr.w	r1, r2, r5, lsr #4
 8003b0a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8003b0e:	63a1      	str	r1, [r4, #56]	; 0x38
 8003b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003b12:	60e1      	str	r1, [r4, #12]
 8003b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b16:	bf00      	nop
 8003b18:	3fff0000 	.word	0x3fff0000

08003b1c <HAL_DMA2D_Init>:
  * @param  hdma2d: pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8003b1c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003b1e:	4604      	mov	r4, r0
 8003b20:	b330      	cbz	r0, 8003b70 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b22:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003b26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b2a:	b91b      	cbnz	r3, 8003b34 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b2c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b30:	f00a fe40 	bl	800e7b4 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003b34:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_POSITION_OPFCCR_RBS));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b36:	2000      	movs	r0, #0
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003b38:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8003b44:	6862      	ldr	r2, [r4, #4]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4c:	f022 0107 	bic.w	r1, r2, #7
 8003b50:	68a2      	ldr	r2, [r4, #8]
 8003b52:	430a      	orrs	r2, r1

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003b54:	68e1      	ldr	r1, [r4, #12]

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b56:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b5a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8003b5e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003b62:	430a      	orrs	r2, r1
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b66:	2301      	movs	r3, #1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_POSITION_OPFCCR_RBS));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b68:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8003b6e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
  {
     return HAL_ERROR;
 8003b70:	2001      	movs	r0, #1

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;

  return HAL_OK;
}
 8003b72:	bd10      	pop	{r4, pc}

08003b74 <HAL_DMA2D_Start>:
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b76:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
  * @param  Width:      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height:     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003b7a:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b7c:	2c01      	cmp	r4, #1
 8003b7e:	f04f 0402 	mov.w	r4, #2
 8003b82:	d00e      	beq.n	8003ba2 <HAL_DMA2D_Start+0x2e>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b84:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b88:	2601      	movs	r6, #1

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003b8a:	9c06      	ldr	r4, [sp, #24]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b8c:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003b90:	9400      	str	r4, [sp, #0]
 8003b92:	f7ff ff73 	bl	8003a7c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003b96:	682a      	ldr	r2, [r5, #0]

  return HAL_OK;
 8003b98:	2000      	movs	r0, #0
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003b9a:	6813      	ldr	r3, [r2, #0]
 8003b9c:	4333      	orrs	r3, r6
 8003b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003ba0:	e000      	b.n	8003ba4 <HAL_DMA2D_Start+0x30>
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ba2:	4620      	mov	r0, r4

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);

  return HAL_OK;
}
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}

08003ba8 <HAL_DMA2D_PollForTransfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  
 8003ba8:	2300      	movs	r3, #0
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  
 8003bac:	9301      	str	r3, [sp, #4]
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003bae:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8003bb0:	6803      	ldr	r3, [r0, #0]
  *                 the configuration information for the DMA2D. 
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003bb2:	460d      	mov	r5, r1
  uint32_t tickstart = 0;
  __IO uint32_t isrflags = 0x0;  

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	07db      	lsls	r3, r3, #31
 8003bb8:	d404      	bmi.n	8003bc4 <HAL_DMA2D_PollForTransfer+0x1c>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	0696      	lsls	r6, r2, #26
 8003bc0:	d527      	bpl.n	8003c12 <HAL_DMA2D_PollForTransfer+0x6a>
 8003bc2:	e033      	b.n	8003c2c <HAL_DMA2D_PollForTransfer+0x84>

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003bc4:	f7ff fcdc 	bl	8003580 <HAL_GetTick>
 8003bc8:	4606      	mov	r6, r0

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	0792      	lsls	r2, r2, #30
 8003bd0:	d4f3      	bmi.n	8003bba <HAL_DMA2D_PollForTransfer+0x12>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8003bd6:	9a01      	ldr	r2, [sp, #4]
 8003bd8:	f012 0f21 	tst.w	r2, #33	; 0x21
 8003bdc:	d00f      	beq.n	8003bfe <HAL_DMA2D_PollForTransfer+0x56>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8003bde:	9a01      	ldr	r2, [sp, #4]
 8003be0:	0695      	lsls	r5, r2, #26
 8003be2:	d503      	bpl.n	8003bec <HAL_DMA2D_PollForTransfer+0x44>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8003be4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003be6:	f042 0202 	orr.w	r2, r2, #2
 8003bea:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8003bec:	9a01      	ldr	r2, [sp, #4]
 8003bee:	07d0      	lsls	r0, r2, #31
 8003bf0:	d503      	bpl.n	8003bfa <HAL_DMA2D_PollForTransfer+0x52>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8003bf2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003bfa:	2221      	movs	r2, #33	; 0x21
 8003bfc:	e03b      	b.n	8003c76 <HAL_DMA2D_PollForTransfer+0xce>
        __HAL_UNLOCK(hdma2d);
        
        return HAL_ERROR;
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003bfe:	1c69      	adds	r1, r5, #1
 8003c00:	d0e4      	beq.n	8003bcc <HAL_DMA2D_PollForTransfer+0x24>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	d041      	beq.n	8003c8a <HAL_DMA2D_PollForTransfer+0xe2>
 8003c06:	f7ff fcbb 	bl	8003580 <HAL_GetTick>
 8003c0a:	1b80      	subs	r0, r0, r6
 8003c0c:	4285      	cmp	r5, r0
 8003c0e:	d2dc      	bcs.n	8003bca <HAL_DMA2D_PollForTransfer+0x22>
 8003c10:	e03b      	b.n	8003c8a <HAL_DMA2D_PollForTransfer+0xe2>
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003c14:	069b      	lsls	r3, r3, #26
 8003c16:	d409      	bmi.n	8003c2c <HAL_DMA2D_PollForTransfer+0x84>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	2212      	movs	r2, #18
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c1c:	2000      	movs	r0, #0
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003c1e:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c20:	2301      	movs	r3, #1
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c22:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
  
  return HAL_OK;
 8003c2a:	e040      	b.n	8003cae <HAL_DMA2D_PollForTransfer+0x106>
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c2c:	f7ff fca8 	bl	8003580 <HAL_GetTick>
 8003c30:	4606      	mov	r6, r0
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003c32:	e03a      	b.n	8003caa <HAL_DMA2D_PollForTransfer+0x102>
        __HAL_UNLOCK(hdma2d);
          
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003c34:	1c69      	adds	r1, r5, #1
 8003c36:	d127      	bne.n	8003c88 <HAL_DMA2D_PollForTransfer+0xe0>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	06d2      	lsls	r2, r2, #27
 8003c3c:	d4ec      	bmi.n	8003c18 <HAL_DMA2D_PollForTransfer+0x70>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8003c42:	9a01      	ldr	r2, [sp, #4]
 8003c44:	f012 0f29 	tst.w	r2, #41	; 0x29
 8003c48:	d0f4      	beq.n	8003c34 <HAL_DMA2D_PollForTransfer+0x8c>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8003c4a:	9a01      	ldr	r2, [sp, #4]
 8003c4c:	0716      	lsls	r6, r2, #28
 8003c4e:	d503      	bpl.n	8003c58 <HAL_DMA2D_PollForTransfer+0xb0>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8003c50:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c52:	f042 0204 	orr.w	r2, r2, #4
 8003c56:	63e2      	str	r2, [r4, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8003c58:	9a01      	ldr	r2, [sp, #4]
 8003c5a:	0695      	lsls	r5, r2, #26
 8003c5c:	d503      	bpl.n	8003c66 <HAL_DMA2D_PollForTransfer+0xbe>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8003c5e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c60:	f042 0202 	orr.w	r2, r2, #2
 8003c64:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8003c66:	9a01      	ldr	r2, [sp, #4]
 8003c68:	07d0      	lsls	r0, r2, #31
 8003c6a:	d503      	bpl.n	8003c74 <HAL_DMA2D_PollForTransfer+0xcc>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8003c6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	63e2      	str	r2, [r4, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c74:	2229      	movs	r2, #41	; 0x29
 8003c76:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003c78:	2304      	movs	r3, #4
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
          
        return HAL_ERROR;      
 8003c7a:	2001      	movs	r0, #1
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003c7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c80:	2300      	movs	r3, #0
 8003c82:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          
        return HAL_ERROR;      
 8003c86:	e012      	b.n	8003cae <HAL_DMA2D_PollForTransfer+0x106>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003c88:	b955      	cbnz	r5, 8003ca0 <HAL_DMA2D_PollForTransfer+0xf8>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003c8c:	2003      	movs	r0, #3
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c8e:	f043 0320 	orr.w	r3, r3, #32
 8003c92:	63e3      	str	r3, [r4, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c94:	2300      	movs	r3, #0
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003c96:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c9a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8003c9e:	e006      	b.n	8003cae <HAL_DMA2D_PollForTransfer+0x106>
        return HAL_ERROR;      
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003ca0:	f7ff fc6e 	bl	8003580 <HAL_GetTick>
 8003ca4:	1b80      	subs	r0, r0, r6
 8003ca6:	4285      	cmp	r5, r0
 8003ca8:	d3ef      	bcc.n	8003c8a <HAL_DMA2D_PollForTransfer+0xe2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
  {
    /* Get tick */
    tickstart = HAL_GetTick();
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	e7c4      	b.n	8003c38 <HAL_DMA2D_PollForTransfer+0x90>
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
  
  return HAL_OK;
}
 8003cae:	b002      	add	sp, #8
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003cb4 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f04f 0302 	mov.w	r3, #2
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8003cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cc0:	d03a      	beq.n	8003d38 <HAL_DMA2D_ConfigLayer+0x84>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8003cc2:	010e      	lsls	r6, r1, #4
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cc4:	2201      	movs	r2, #1
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003cc6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8003cca:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8003cce:	1984      	adds	r4, r0, r6
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cd0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM);
 8003cd4:	69e7      	ldr	r7, [r4, #28]
 8003cd6:	fa93 f3a3 	rbit	r3, r3
 8003cda:	fab3 f283 	clz	r2, r3
 8003cde:	6a23      	ldr	r3, [r4, #32]
 8003ce0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ce2:	4093      	lsls	r3, r2
 8003ce4:	6804      	ldr	r4, [r0, #0]
 8003ce6:	ea43 0207 	orr.w	r2, r3, r7
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_POSITION_BGPFCCR_RBS);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cea:	3f09      	subs	r7, #9
 8003cec:	2f01      	cmp	r7, #1
 8003cee:	d804      	bhi.n	8003cfa <HAL_DMA2D_ConfigLayer+0x46>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003cf0:	f005 437f 	and.w	r3, r5, #4278190080	; 0xff000000
 8003cf4:	4313      	orrs	r3, r2
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8003cf6:	b951      	cbnz	r1, 8003d0e <HAL_DMA2D_ConfigLayer+0x5a>
 8003cf8:	e020      	b.n	8003d3c <HAL_DMA2D_ConfigLayer+0x88>
 8003cfa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003cfe:	fa93 f3a3 	rbit	r3, r3
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA);
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	fa05 f303 	lsl.w	r3, r5, r3
 8003d0a:	4313      	orrs	r3, r2
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8003d0c:	b311      	cbz	r1, 8003d54 <HAL_DMA2D_ConfigLayer+0xa0>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d0e:	69e1      	ldr	r1, [r4, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003d10:	4406      	add	r6, r0
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d12:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <HAL_DMA2D_ConfigLayer+0xb0>)
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d14:	2f01      	cmp	r7, #1
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d16:	ea02 0201 	and.w	r2, r2, r1
 8003d1a:	ea43 0302 	orr.w	r3, r3, r2
 8003d1e:	61e3      	str	r3, [r4, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003d20:	69b3      	ldr	r3, [r6, #24]
 8003d22:	6123      	str	r3, [r4, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d24:	d802      	bhi.n	8003d2c <HAL_DMA2D_ConfigLayer+0x78>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003d26:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8003d2a:	6225      	str	r5, [r4, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8003d32:	2300      	movs	r3, #0
 8003d34:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_DMA2D_ConfigLayer+0xb0>)
 8003d40:	400a      	ands	r2, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	6263      	str	r3, [r4, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d46:	6983      	ldr	r3, [r0, #24]
 8003d48:	61a3      	str	r3, [r4, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003d4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d50:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d52:	e7eb      	b.n	8003d2c <HAL_DMA2D_ConfigLayer+0x78>
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003d56:	4a03      	ldr	r2, [pc, #12]	; (8003d64 <HAL_DMA2D_ConfigLayer+0xb0>)
 8003d58:	400a      	ands	r2, r1
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	6263      	str	r3, [r4, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d5e:	6983      	ldr	r3, [r0, #24]
 8003d60:	61a3      	str	r3, [r4, #24]
 8003d62:	e7e3      	b.n	8003d2c <HAL_DMA2D_ConfigLayer+0x78>
 8003d64:	00fcfff0 	.word	0x00fcfff0

08003d68 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8003d68:	2300      	movs	r3, #0
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003d6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003d6c:	f241 0418 	movw	r4, #4120	; 0x1018
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8003d70:	9301      	str	r3, [sp, #4]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003d72:	6803      	ldr	r3, [r0, #0]
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003d74:	4605      	mov	r5, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d76:	2001      	movs	r0, #1
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003d78:	591a      	ldr	r2, [r3, r4]
 8003d7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d7e:	511a      	str	r2, [r3, r4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003d80:	591b      	ldr	r3, [r3, r4]
 8003d82:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d84:	f7ff fc02 	bl	800358c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003d88:	682b      	ldr	r3, [r5, #0]
 8003d8a:	9a01      	ldr	r2, [sp, #4]
 8003d8c:	511a      	str	r2, [r3, r4]
}
 8003d8e:	b003      	add	sp, #12
 8003d90:	bd30      	pop	{r4, r5, pc}
	...

08003d94 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003d98:	b129      	cbz	r1, 8003da6 <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d9e:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003da0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003da4:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003da6:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003da8:	6821      	ldr	r1, [r4, #0]
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	68e2      	ldr	r2, [r4, #12]
 8003dae:	68a3      	ldr	r3, [r4, #8]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003db0:	680d      	ldr	r5, [r1, #0]
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003db2:	bf08      	it	eq
 8003db4:	f44f 6080 	moveq.w	r0, #1024	; 0x400
 8003db8:	ea42 0203 	orr.w	r2, r2, r3
 8003dbc:	4b2e      	ldr	r3, [pc, #184]	; (8003e78 <ETH_MACDMAConfig+0xe4>)
 8003dbe:	bf18      	it	ne
 8003dc0:	2000      	movne	r0, #0
 8003dc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc6:	402b      	ands	r3, r5
 8003dc8:	4313      	orrs	r3, r2
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003dca:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dcc:	2001      	movs	r0, #1
                       macinit.AutomaticPadCRCStrip | 
                       macinit.BackOffLimit | 
                       macinit.DeferralCheck);
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003dce:	600b      	str	r3, [r1, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003dd0:	680d      	ldr	r5, [r1, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dd2:	f7ff fbdb 	bl	800358c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003dd6:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003dd8:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dda:	2001      	movs	r0, #1
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->MACCR = tmpreg; 
 8003ddc:	601d      	str	r5, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003dde:	605a      	str	r2, [r3, #4]
                                        macinit.MulticastFramesFilter |
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003de0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003de2:	f7ff fbd3 	bl	800358c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003de6:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003de8:	f64f 7241 	movw	r2, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dec:	2001      	movs	r0, #1
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
   (heth->Instance)->MACFFR = tmpreg;
 8003dee:	605d      	str	r5, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003df0:	2500      	movs	r5, #0
 8003df2:	609d      	str	r5, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003df4:	60dd      	str	r5, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003df6:	6999      	ldr	r1, [r3, #24]
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003df8:	400a      	ands	r2, r1
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
                        macinit.UnicastPauseFrameDetect | 
                        macinit.ReceiveFlowControl |
                        macinit.TransmitFlowControl); 
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003dfe:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003e00:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e02:	f7ff fbc3 	bl	800358c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003e06:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e08:	2001      	movs	r0, #1
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
   (heth->Instance)->MACFCR = tmpreg;
 8003e0a:	619e      	str	r6, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003e0c:	61dd      	str	r5, [r3, #28]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003e0e:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e10:	f7ff fbbc 	bl	800358c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003e14:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e16:	2001      	movs	r0, #1
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003e18:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <ETH_MACDMAConfig+0xe8>)
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
    (heth->Instance)->MACVLANTR = tmpreg;
 8003e1a:	61d5      	str	r5, [r2, #28]
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
    dmainit.DescriptorSkipLength = 0x0;
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003e1c:	f241 0518 	movw	r5, #4120	; 0x1018
 8003e20:	5951      	ldr	r1, [r2, r5]
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003e22:	400b      	ands	r3, r1
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e24:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8003e28:	f043 0304 	orr.w	r3, r3, #4
                         dmainit.ForwardUndersizedGoodFrames |
                         dmainit.ReceiveThresholdControl |
                         dmainit.SecondFrameOperate);
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003e2c:	5153      	str	r3, [r2, r5]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003e2e:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e30:	f7ff fbac 	bl	800358c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003e34:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e36:	2001      	movs	r0, #1
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e38:	4a11      	ldr	r2, [pc, #68]	; (8003e80 <ETH_MACDMAConfig+0xec>)
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
    (heth->Instance)->DMAOMR = tmpreg;
 8003e3a:	515e      	str	r6, [r3, r5]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e40:	601a      	str	r2, [r3, #0]
                                          dmainit.DMAArbitration |
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003e42:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e44:	f7ff fba2 	bl	800358c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8003e4e:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003e50:	69a3      	ldr	r3, [r4, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <ETH_MACDMAConfig+0xd2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003e56:	f241 011c 	movw	r1, #4124	; 0x101c
 8003e5a:	5853      	ldr	r3, [r2, r1]
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e64:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e66:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003e68:	4a06      	ldr	r2, [pc, #24]	; (8003e84 <ETH_MACDMAConfig+0xf0>)
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003e6a:	8899      	ldrh	r1, [r3, #4]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003e6c:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003e6e:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <ETH_MACDMAConfig+0xf4>)
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	bf00      	nop
 8003e78:	ff20810f 	.word	0xff20810f
 8003e7c:	f8de3f23 	.word	0xf8de3f23
 8003e80:	02c12080 	.word	0x02c12080
 8003e84:	40028040 	.word	0x40028040
 8003e88:	40028044 	.word	0x40028044

08003e8c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e8e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8003e92:	2c01      	cmp	r4, #1
 8003e94:	f04f 0402 	mov.w	r4, #2
 8003e98:	d033      	beq.n	8003f02 <HAL_ETH_DMATxDescListInit+0x76>
 8003e9a:	2501      	movs	r5, #1
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003e9c:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003ea0:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8003ea4:	f101 0420 	add.w	r4, r1, #32
{
  uint32_t i = 0;
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ea8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003eac:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003eb0:	2500      	movs	r5, #0
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8003eb2:	f103 3cff 	add.w	ip, r3, #4294967295
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003eb6:	62c1      	str	r1, [r0, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003eb8:	429d      	cmp	r5, r3
 8003eba:	d016      	beq.n	8003eea <HAL_ETH_DMATxDescListInit+0x5e>
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003ebc:	fb0e 2605 	mla	r6, lr, r5, r2
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003ec0:	f844 7c20 	str.w	r7, [r4, #-32]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003ec4:	f844 6c18 	str.w	r6, [r4, #-24]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003ec8:	69c6      	ldr	r6, [r0, #28]
 8003eca:	b92e      	cbnz	r6, 8003ed8 <HAL_ETH_DMATxDescListInit+0x4c>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003ecc:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8003ed0:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8003ed4:	f844 6c20 	str.w	r6, [r4, #-32]
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003ed8:	4565      	cmp	r5, ip
 8003eda:	bf2c      	ite	cs
 8003edc:	460e      	movcs	r6, r1
 8003ede:	4626      	movcc	r6, r4
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003ee0:	3501      	adds	r5, #1
 8003ee2:	3420      	adds	r4, #32
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003ee4:	f844 6c34 	str.w	r6, [r4, #-52]
 8003ee8:	e7e6      	b.n	8003eb8 <HAL_ETH_DMATxDescListInit+0x2c>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003eea:	6802      	ldr	r2, [r0, #0]
 8003eec:	f241 0310 	movw	r3, #4112	; 0x1010
 8003ef0:	50d1      	str	r1, [r2, r3]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ef8:	2300      	movs	r3, #0
 8003efa:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003efe:	4618      	mov	r0, r3
 8003f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
  uint32_t i = 0;
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f02:	4620      	mov	r0, r4
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_OK;
}
 8003f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f06 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t i = 0;
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f0a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8003f0e:	2c01      	cmp	r4, #1
 8003f10:	f04f 0402 	mov.w	r4, #2
 8003f14:	d030      	beq.n	8003f78 <HAL_ETH_DMARxDescListInit+0x72>
 8003f16:	2501      	movs	r5, #1
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f18:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003f1c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003f20:	f101 0420 	add.w	r4, r1, #32
{
  uint32_t i = 0;
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f24:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003f28:	f244 57f4 	movw	r7, #17908	; 0x45f4
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003f2c:	2500      	movs	r5, #0
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003f2e:	f240 5ef4 	movw	lr, #1524	; 0x5f4
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003f32:	f103 3cff 	add.w	ip, r3, #4294967295
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003f36:	6281      	str	r1, [r0, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003f38:	429d      	cmp	r5, r3
 8003f3a:	d010      	beq.n	8003f5e <HAL_ETH_DMARxDescListInit+0x58>
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003f3c:	fb0e 2805 	mla	r8, lr, r5, r2
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003f40:	f844 6c20 	str.w	r6, [r4, #-32]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003f44:	f844 8c18 	str.w	r8, [r4, #-24]
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003f48:	4565      	cmp	r5, ip
 8003f4a:	bf2c      	ite	cs
 8003f4c:	4688      	movcs	r8, r1
 8003f4e:	46a0      	movcc	r8, r4
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003f50:	f844 7c1c 	str.w	r7, [r4, #-28]
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003f54:	3501      	adds	r5, #1
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003f56:	f844 8c14 	str.w	r8, [r4, #-20]
 8003f5a:	3420      	adds	r4, #32
 8003f5c:	e7ec      	b.n	8003f38 <HAL_ETH_DMARxDescListInit+0x32>
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003f5e:	6802      	ldr	r2, [r0, #0]
 8003f60:	f241 030c 	movw	r3, #4108	; 0x100c
 8003f64:	50d1      	str	r1, [r2, r3]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003f66:	2301      	movs	r3, #1
 8003f68:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003f72:	4618      	mov	r0, r3
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  uint32_t i = 0;
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f78:	4620      	mov	r0, r4
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_OK;
}
 8003f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003f80 <HAL_ETH_TransmitFrame>:
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
  uint32_t bufcount = 0, size = 0, i = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f80:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	f04f 0302 	mov.w	r3, #2
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t bufcount = 0, size = 0, i = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f8c:	d06a      	beq.n	8004064 <HAL_ETH_TransmitFrame+0xe4>
 8003f8e:	2201      	movs	r2, #1
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f90:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
  uint32_t bufcount = 0, size = 0, i = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f94:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  if (FrameLength == 0) 
 8003f98:	b921      	cbnz	r1, 8003fa4 <HAL_ETH_TransmitFrame+0x24>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003f9a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003f9e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
 8003fa2:	e009      	b.n	8003fb8 <HAL_ETH_TransmitFrame+0x38>
    
    return  HAL_ERROR;                                    
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003fa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003fa6:	681c      	ldr	r4, [r3, #0]
 8003fa8:	2c00      	cmp	r4, #0
 8003faa:	da07      	bge.n	8003fbc <HAL_ETH_TransmitFrame+0x3c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003fac:	2312      	movs	r3, #18
 8003fae:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    
    return HAL_ERROR;
 8003fb8:	4610      	mov	r0, r2
 8003fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003fbc:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8003fc0:	42a1      	cmp	r1, r4
 8003fc2:	d914      	bls.n	8003fee <HAL_ETH_TransmitFrame+0x6e>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003fc4:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003fc8:	fb04 1412 	mls	r4, r4, r2, r1
 8003fcc:	b10c      	cbz	r4, 8003fd2 <HAL_ETH_TransmitFrame+0x52>
    {
      bufcount++;
 8003fce:	3201      	adds	r2, #1
 8003fd0:	e001      	b.n	8003fd6 <HAL_ETH_TransmitFrame+0x56>
  }
  else 
  {  
    bufcount = 1;
  }
  if (bufcount == 1)
 8003fd2:	2a01      	cmp	r2, #1
 8003fd4:	d00b      	beq.n	8003fee <HAL_ETH_TransmitFrame+0x6e>
      if (i == (bufcount-1))
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003fd6:	4c24      	ldr	r4, [pc, #144]	; (8004068 <HAL_ETH_TransmitFrame+0xe8>)
 8003fd8:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003fdc:	f240 56f4 	movw	r6, #1524	; 0x5f4
      
      if (i == (bufcount-1))
 8003fe0:	1e57      	subs	r7, r2, #1
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003fe2:	fb04 1102 	mla	r1, r4, r2, r1
 8003fe6:	2400      	movs	r4, #0
 8003fe8:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8003fec:	e01c      	b.n	8004028 <HAL_ETH_TransmitFrame+0xa8>
    bufcount = 1;
  }
  if (bufcount == 1)
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003fee:	681a      	ldr	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003ff0:	f3c1 010c 	ubfx	r1, r1, #0, #13
    bufcount = 1;
  }
  if (bufcount == 1)
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003ff4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003ff8:	6059      	str	r1, [r3, #4]
    bufcount = 1;
  }
  if (bufcount == 1)
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003ffa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004002:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	e01a      	b.n	800403e <HAL_ETH_TransmitFrame+0xbe>
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
      
      if (i == (bufcount-1))
 8004008:	42a7      	cmp	r7, r4
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800400a:	605e      	str	r6, [r3, #4]
      
      if (i == (bufcount-1))
 800400c:	d104      	bne.n	8004018 <HAL_ETH_TransmitFrame+0x98>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800400e:	681d      	ldr	r5, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004010:	6059      	str	r1, [r3, #4]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
      
      if (i == (bufcount-1))
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004012:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004016:	601d      	str	r5, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004018:	681d      	ldr	r5, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800401a:	3401      	adds	r4, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800401c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8004020:	4294      	cmp	r4, r2
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004022:	601d      	str	r5, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004024:	68db      	ldr	r3, [r3, #12]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8004026:	d00a      	beq.n	800403e <HAL_ETH_TransmitFrame+0xbe>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004028:	681d      	ldr	r5, [r3, #0]
 800402a:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 800402e:	601d      	str	r5, [r3, #0]
      
      if (i == 0) 
 8004030:	2c00      	cmp	r4, #0
 8004032:	d1e9      	bne.n	8004008 <HAL_ETH_TransmitFrame+0x88>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004034:	681d      	ldr	r5, [r3, #0]
 8004036:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800403a:	601d      	str	r5, [r3, #0]
 800403c:	e7e4      	b.n	8004008 <HAL_ETH_TransmitFrame+0x88>
 800403e:	62c3      	str	r3, [r0, #44]	; 0x2c
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004040:	f241 0214 	movw	r2, #4116	; 0x1014
 8004044:	6803      	ldr	r3, [r0, #0]
 8004046:	5899      	ldr	r1, [r3, r2]
 8004048:	0749      	lsls	r1, r1, #29
 800404a:	d505      	bpl.n	8004058 <HAL_ETH_TransmitFrame+0xd8>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800404c:	2104      	movs	r1, #4
 800404e:	5099      	str	r1, [r3, r2]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004050:	2100      	movs	r1, #0
 8004052:	f241 0204 	movw	r2, #4100	; 0x1004
 8004056:	5099      	str	r1, [r3, r2]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004058:	2301      	movs	r3, #1
 800405a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800405e:	2300      	movs	r3, #0
 8004060:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
  uint32_t bufcount = 0, size = 0, i = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004064:	4618      	mov	r0, r3
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_OK;
}
 8004066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004068:	fffffa0c 	.word	0xfffffa0c

0800406c <HAL_ETH_GetReceivedFrame_IT>:
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
  uint32_t descriptorscancounter = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800406c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8004070:	2b01      	cmp	r3, #1
 8004072:	f04f 0302 	mov.w	r3, #2
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004076:	b530      	push	{r4, r5, lr}
  uint32_t descriptorscancounter = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004078:	d03b      	beq.n	80040f2 <HAL_ETH_GetReceivedFrame_IT+0x86>
 800407a:	2201      	movs	r2, #1
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800407c:	2406      	movs	r4, #6
  
  /* Process Locked */
  __HAL_LOCK(heth);
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800407e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
      heth->RxFrameInfos.SegCount = 1;   
 8004082:	4611      	mov	r1, r2
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
  uint32_t descriptorscancounter = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004084:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004088:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2a00      	cmp	r2, #0
 800408e:	db2a      	blt.n	80040e6 <HAL_ETH_GetReceivedFrame_IT+0x7a>
 8004090:	3c01      	subs	r4, #1
 8004092:	d028      	beq.n	80040e6 <HAL_ETH_GetReceivedFrame_IT+0x7a>
    /* Just for security */
    descriptorscancounter++;
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68dd      	ldr	r5, [r3, #12]
 8004098:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800409c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80040a0:	d102      	bne.n	80040a8 <HAL_ETH_GetReceivedFrame_IT+0x3c>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80040a2:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80040a4:	6381      	str	r1, [r0, #56]	; 0x38
 80040a6:	e006      	b.n	80040b6 <HAL_ETH_GetReceivedFrame_IT+0x4a>
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	f412 7f40 	tst.w	r2, #768	; 0x300
 80040ae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80040b0:	d103      	bne.n	80040ba <HAL_ETH_GetReceivedFrame_IT+0x4e>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80040b2:	3201      	adds	r2, #1
 80040b4:	6382      	str	r2, [r0, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80040b6:	6285      	str	r5, [r0, #40]	; 0x28
 80040b8:	e7e6      	b.n	8004088 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80040ba:	3201      	adds	r2, #1
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80040bc:	6343      	str	r3, [r0, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80040be:	2a01      	cmp	r2, #1
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80040c0:	6382      	str	r2, [r0, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80040c2:	bf08      	it	eq
 80040c4:	6303      	streq	r3, [r0, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80040cc:	3b04      	subs	r3, #4
 80040ce:	63c3      	str	r3, [r0, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80040d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80040d2:	689b      	ldr	r3, [r3, #8]
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80040d4:	6285      	str	r5, [r0, #40]	; 0x28
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80040d6:	6403      	str	r3, [r0, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80040d8:	2301      	movs	r3, #1
 80040da:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80040de:	2300      	movs	r3, #0
 80040e0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80040e4:	e005      	b.n	80040f2 <HAL_ETH_GetReceivedFrame_IT+0x86>
      return HAL_OK;
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80040e6:	2301      	movs	r3, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80040e8:	2200      	movs	r2, #0
      return HAL_OK;
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80040ea:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80040ee:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
  uint32_t descriptorscancounter = 0;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80040f2:	4618      	mov	r0, r3
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_ERROR;
}
 80040f4:	bd30      	pop	{r4, r5, pc}

080040f6 <HAL_ETH_TxCpltCallback>:
 80040f6:	4770      	bx	lr

080040f8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80040f8:	4770      	bx	lr

080040fa <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80040fa:	b570      	push	{r4, r5, r6, lr}
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80040fc:	6802      	ldr	r2, [r0, #0]
 80040fe:	f241 0614 	movw	r6, #4116	; 0x1014
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004102:	4604      	mov	r4, r0
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8004104:	5993      	ldr	r3, [r2, r6]
 8004106:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 800410a:	d00b      	beq.n	8004124 <HAL_ETH_IRQHandler+0x2a>
  {
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800410c:	f00a fa8c 	bl	800e628 <HAL_ETH_RxCpltCallback>
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	2240      	movs	r2, #64	; 0x40
 8004114:	519a      	str	r2, [r3, r6]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004116:	2301      	movs	r3, #1
 8004118:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800411c:	2300      	movs	r3, #0
 800411e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004122:	e00b      	b.n	800413c <HAL_ETH_IRQHandler+0x42>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004124:	5993      	ldr	r3, [r2, r6]
 8004126:	07da      	lsls	r2, r3, #31
 8004128:	d508      	bpl.n	800413c <HAL_ETH_IRQHandler+0x42>
  {
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800412a:	f7ff ffe4 	bl	80040f6 <HAL_ETH_TxCpltCallback>
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800412e:	2301      	movs	r3, #1
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	5193      	str	r3, [r2, r6]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004134:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004138:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	f241 0514 	movw	r5, #4116	; 0x1014
 8004142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004146:	515a      	str	r2, [r3, r5]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8004148:	595b      	ldr	r3, [r3, r5]
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	d50c      	bpl.n	8004168 <HAL_ETH_IRQHandler+0x6e>
  {
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800414e:	4620      	mov	r0, r4
 8004150:	f7ff ffd2 	bl	80040f8 <HAL_ETH_ErrorCallback>

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800415a:	515a      	str	r2, [r3, r5]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800415c:	2301      	movs	r3, #1
 800415e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004162:	2300      	movs	r3, #0
 8004164:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004168:	bd70      	pop	{r4, r5, r6, pc}

0800416a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800416a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800416c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004170:	4605      	mov	r5, r0
 8004172:	4616      	mov	r6, r2
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004174:	2b82      	cmp	r3, #130	; 0x82
 8004176:	d031      	beq.n	80041dc <HAL_ETH_ReadPHYRegister+0x72>
  {
    return HAL_BUSY;
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004178:	2382      	movs	r3, #130	; 0x82
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800417a:	8a2c      	ldrh	r4, [r5, #16]
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
  {
    return HAL_BUSY;
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800417c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004180:	02e4      	lsls	r4, r4, #11
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004182:	6800      	ldr	r0, [r0, #0]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004184:	b2a4      	uxth	r4, r4
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004186:	6903      	ldr	r3, [r0, #16]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004188:	f003 021c 	and.w	r2, r3, #28
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800418c:	ea44 0302 	orr.w	r3, r4, r2
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004190:	018c      	lsls	r4, r1, #6
 8004192:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004196:	431c      	orrs	r4, r3
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8004198:	f044 0401 	orr.w	r4, r4, #1
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800419c:	6104      	str	r4, [r0, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800419e:	f7ff f9ef 	bl	8003580 <HAL_GetTick>
 80041a2:	4607      	mov	r7, r0
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041a4:	f014 0001 	ands.w	r0, r4, #1
 80041a8:	d010      	beq.n	80041cc <HAL_ETH_ReadPHYRegister+0x62>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80041aa:	f7ff f9e9 	bl	8003580 <HAL_GetTick>
 80041ae:	1bc0      	subs	r0, r0, r7
 80041b0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80041b4:	d307      	bcc.n	80041c6 <HAL_ETH_ReadPHYRegister+0x5c>
    {
      heth->State= HAL_ETH_STATE_READY;
 80041b6:	2301      	movs	r3, #1
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
    
      return HAL_TIMEOUT;
 80041b8:	2003      	movs	r0, #3
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
    {
      heth->State= HAL_ETH_STATE_READY;
 80041ba:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041be:	2300      	movs	r3, #0
 80041c0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80041c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80041c6:	682b      	ldr	r3, [r5, #0]
 80041c8:	691c      	ldr	r4, [r3, #16]
 80041ca:	e7eb      	b.n	80041a4 <HAL_ETH_ReadPHYRegister+0x3a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	6033      	str	r3, [r6, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80041da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
  {
    return HAL_BUSY;
 80041dc:	2002      	movs	r0, #2
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 80041de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041e0 <HAL_ETH_WritePHYRegister>:
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80041e0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80041e4:	2b42      	cmp	r3, #66	; 0x42
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80041e6:	b570      	push	{r4, r5, r6, lr}
 80041e8:	4605      	mov	r5, r0
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80041ea:	d02e      	beq.n	800424a <HAL_ETH_WritePHYRegister+0x6a>
  {
    return HAL_BUSY;
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80041ec:	2342      	movs	r3, #66	; 0x42
 80041ee:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80041f0:	b292      	uxth	r2, r2
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
  {
    return HAL_BUSY;
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80041f2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80041f6:	02e4      	lsls	r4, r4, #11
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80041f8:	6800      	ldr	r0, [r0, #0]
 80041fa:	b2a4      	uxth	r4, r4
 80041fc:	6903      	ldr	r3, [r0, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80041fe:	6142      	str	r2, [r0, #20]
 8004200:	f003 031c 	and.w	r3, r3, #28
 8004204:	f043 0303 	orr.w	r3, r3, #3
 8004208:	4323      	orrs	r3, r4
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800420a:	018c      	lsls	r4, r1, #6
 800420c:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8004210:	431c      	orrs	r4, r3
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004212:	6104      	str	r4, [r0, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004214:	f7ff f9b4 	bl	8003580 <HAL_GetTick>
 8004218:	4606      	mov	r6, r0
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800421a:	f014 0001 	ands.w	r0, r4, #1
 800421e:	d010      	beq.n	8004242 <HAL_ETH_WritePHYRegister+0x62>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004220:	f7ff f9ae 	bl	8003580 <HAL_GetTick>
 8004224:	1b80      	subs	r0, r0, r6
 8004226:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800422a:	d307      	bcc.n	800423c <HAL_ETH_WritePHYRegister+0x5c>
    {
      heth->State= HAL_ETH_STATE_READY;
 800422c:	2301      	movs	r3, #1
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
    
      return HAL_TIMEOUT;
 800422e:	2003      	movs	r0, #3
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
    {
      heth->State= HAL_ETH_STATE_READY;
 8004230:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004234:	2300      	movs	r3, #0
 8004236:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 800423a:	bd70      	pop	{r4, r5, r6, pc}
    
      return HAL_TIMEOUT;
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	691c      	ldr	r4, [r3, #16]
 8004240:	e7eb      	b.n	800421a <HAL_ETH_WritePHYRegister+0x3a>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004242:	2301      	movs	r3, #1
 8004244:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8004248:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
  {
    return HAL_BUSY;
 800424a:	2002      	movs	r0, #2
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
  
  /* Return function status */
  return HAL_OK; 
}
 800424c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004250 <HAL_ETH_Init>:
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
  uint32_t tempreg = 0, phyreg = 0;
 8004250:	2300      	movs	r3, #0
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t hclk = 60000000;
  uint32_t tickstart = 0;
  uint32_t err = ETH_SUCCESS;
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004254:	4604      	mov	r4, r0
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
  uint32_t tempreg = 0, phyreg = 0;
 8004256:	9300      	str	r3, [sp, #0]
  uint32_t hclk = 60000000;
  uint32_t tickstart = 0;
  uint32_t err = ETH_SUCCESS;
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004258:	2800      	cmp	r0, #0
 800425a:	f000 80d9 	beq.w	8004410 <HAL_ETH_Init+0x1c0>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800425e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8004262:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004266:	b91b      	cbnz	r3, 8004270 <HAL_ETH_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004268:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800426c:	f00a f974 	bl	800e558 <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004270:	4b69      	ldr	r3, [pc, #420]	; (8004418 <HAL_ETH_Init+0x1c8>)
 8004272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
 800427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	9b01      	ldr	r3, [sp, #4]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004284:	4b65      	ldr	r3, [pc, #404]	; (800441c <HAL_ETH_Init+0x1cc>)
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800428c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	6a22      	ldr	r2, [r4, #32]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80042a4:	f7ff f96c 	bl	8003580 <HAL_GetTick>
 80042a8:	4605      	mov	r5, r0
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80042b0:	6812      	ldr	r2, [r2, #0]
 80042b2:	07d0      	lsls	r0, r2, #31
 80042b4:	d50c      	bpl.n	80042d0 <HAL_ETH_Init+0x80>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80042b6:	f7ff f963 	bl	8003580 <HAL_GetTick>
 80042ba:	1b40      	subs	r0, r0, r5
 80042bc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80042c0:	d9f3      	bls.n	80042aa <HAL_ETH_Init+0x5a>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80042c2:	2503      	movs	r5, #3
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80042c4:	2300      	movs	r3, #0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80042c6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80042ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80042ce:	e0a0      	b.n	8004412 <HAL_ETH_Init+0x1c2>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80042d0:	691d      	ldr	r5, [r3, #16]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80042d2:	f001 f949 	bl	8005568 <HAL_RCC_GetHCLKFreq>
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80042d6:	4b52      	ldr	r3, [pc, #328]	; (8004420 <HAL_ETH_Init+0x1d0>)
 80042d8:	4a52      	ldr	r2, [pc, #328]	; (8004424 <HAL_ETH_Init+0x1d4>)
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80042da:	f025 051c 	bic.w	r5, r5, #28
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80042de:	4403      	add	r3, r0
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d802      	bhi.n	80042ea <HAL_ETH_Init+0x9a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80042e4:	f045 0508 	orr.w	r5, r5, #8
 80042e8:	e015      	b.n	8004316 <HAL_ETH_Init+0xc6>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80042ea:	4b4f      	ldr	r3, [pc, #316]	; (8004428 <HAL_ETH_Init+0x1d8>)
 80042ec:	4a4f      	ldr	r2, [pc, #316]	; (800442c <HAL_ETH_Init+0x1dc>)
 80042ee:	4403      	add	r3, r0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d802      	bhi.n	80042fa <HAL_ETH_Init+0xaa>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80042f4:	f045 050c 	orr.w	r5, r5, #12
 80042f8:	e00d      	b.n	8004316 <HAL_ETH_Init+0xc6>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80042fa:	4b4d      	ldr	r3, [pc, #308]	; (8004430 <HAL_ETH_Init+0x1e0>)
 80042fc:	4a4d      	ldr	r2, [pc, #308]	; (8004434 <HAL_ETH_Init+0x1e4>)
 80042fe:	4403      	add	r3, r0
 8004300:	4293      	cmp	r3, r2
 8004302:	d908      	bls.n	8004316 <HAL_ETH_Init+0xc6>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004304:	4b4c      	ldr	r3, [pc, #304]	; (8004438 <HAL_ETH_Init+0x1e8>)
 8004306:	4a4d      	ldr	r2, [pc, #308]	; (800443c <HAL_ETH_Init+0x1ec>)
 8004308:	4403      	add	r3, r0
 800430a:	4293      	cmp	r3, r2
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800430c:	bf94      	ite	ls
 800430e:	f045 0504 	orrls.w	r5, r5, #4
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004312:	f045 0510 	orrhi.w	r5, r5, #16
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004316:	6823      	ldr	r3, [r4, #0]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004318:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800431c:	2100      	movs	r1, #0
 800431e:	4620      	mov	r0, r4
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004320:	611d      	str	r5, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004322:	f7ff ff5d 	bl	80041e0 <HAL_ETH_WritePHYRegister>
 8004326:	4605      	mov	r5, r0
 8004328:	2800      	cmp	r0, #0
 800432a:	d15d      	bne.n	80043e8 <HAL_ETH_Init+0x198>
    /* Return HAL_ERROR */
    return HAL_ERROR;
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800432c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004330:	f7ff f92c 	bl	800358c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d04b      	beq.n	80043d2 <HAL_ETH_Init+0x182>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800433a:	f7ff f921 	bl	8003580 <HAL_GetTick>
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800433e:	f241 3788 	movw	r7, #5000	; 0x1388
  HAL_Delay(PHY_RESET_DELAY);
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004342:	4606      	mov	r6, r0
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004344:	466a      	mov	r2, sp
 8004346:	2101      	movs	r1, #1
 8004348:	4620      	mov	r0, r4
 800434a:	f7ff ff0e 	bl	800416a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800434e:	f7ff f917 	bl	8003580 <HAL_GetTick>
 8004352:	1b80      	subs	r0, r0, r6
 8004354:	42b8      	cmp	r0, r7
 8004356:	d819      	bhi.n	800438c <HAL_ETH_Init+0x13c>
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
    
        return HAL_TIMEOUT;
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004358:	9b00      	ldr	r3, [sp, #0]
 800435a:	0759      	lsls	r1, r3, #29
 800435c:	d5f2      	bpl.n	8004344 <HAL_ETH_Init+0xf4>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800435e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004362:	2100      	movs	r1, #0
 8004364:	4620      	mov	r0, r4
 8004366:	f7ff ff3b 	bl	80041e0 <HAL_ETH_WritePHYRegister>
 800436a:	2800      	cmp	r0, #0
 800436c:	d13c      	bne.n	80043e8 <HAL_ETH_Init+0x198>
      /* Return HAL_ERROR */
      return HAL_ERROR;   
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800436e:	f7ff f907 	bl	8003580 <HAL_GetTick>
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004372:	f241 3788 	movw	r7, #5000	; 0x1388
      /* Return HAL_ERROR */
      return HAL_ERROR;   
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004376:	4606      	mov	r6, r0
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004378:	466a      	mov	r2, sp
 800437a:	2101      	movs	r1, #1
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff fef4 	bl	800416a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004382:	f7ff f8fd 	bl	8003580 <HAL_GetTick>
 8004386:	1b80      	subs	r0, r0, r6
 8004388:	42b8      	cmp	r0, r7
 800438a:	d90b      	bls.n	80043a4 <HAL_ETH_Init+0x154>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800438c:	2101      	movs	r1, #1
 800438e:	4620      	mov	r0, r4
 8004390:	f7ff fd00 	bl	8003d94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004394:	2301      	movs	r3, #1
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
    
        return HAL_TIMEOUT;
 8004396:	2503      	movs	r5, #3
        err = ETH_ERROR;
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
        
        heth->State= HAL_ETH_STATE_READY;
 8004398:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800439c:	2300      	movs	r3, #0
 800439e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80043a2:	e036      	b.n	8004412 <HAL_ETH_Init+0x1c2>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80043a4:	9b00      	ldr	r3, [sp, #0]
 80043a6:	069a      	lsls	r2, r3, #26
 80043a8:	d5e6      	bpl.n	8004378 <HAL_ETH_Init+0x128>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80043aa:	466a      	mov	r2, sp
 80043ac:	211f      	movs	r1, #31
 80043ae:	4620      	mov	r0, r4
 80043b0:	f7ff fedb 	bl	800416a <HAL_ETH_ReadPHYRegister>
 80043b4:	b9c0      	cbnz	r0, 80043e8 <HAL_ETH_Init+0x198>
      /* Return HAL_ERROR */
      return HAL_ERROR;   
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80043b6:	9b00      	ldr	r3, [sp, #0]
 80043b8:	f013 0210 	ands.w	r2, r3, #16
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80043bc:	bf18      	it	ne
 80043be:	f44f 6200 	movne.w	r2, #2048	; 0x800
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80043c2:	075b      	lsls	r3, r3, #29
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80043c4:	bf4c      	ite	mi
 80043c6:	2300      	movmi	r3, #0
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80043c8:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80043cc:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80043ce:	60a3      	str	r3, [r4, #8]
 80043d0:	e016      	b.n	8004400 <HAL_ETH_Init+0x1b0>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80043d2:	68a3      	ldr	r3, [r4, #8]
 80043d4:	4629      	mov	r1, r5
 80043d6:	68e2      	ldr	r2, [r4, #12]
 80043d8:	4620      	mov	r0, r4
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 80043e0:	b292      	uxth	r2, r2
 80043e2:	f7ff fefd 	bl	80041e0 <HAL_ETH_WritePHYRegister>
 80043e6:	b138      	cbz	r0, 80043f8 <HAL_ETH_Init+0x1a8>
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80043e8:	2501      	movs	r5, #1
    {
      /* In case of write timeout */
      err = ETH_ERROR;
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80043ea:	2101      	movs	r1, #1
 80043ec:	4620      	mov	r0, r4
 80043ee:	f7ff fcd1 	bl	8003d94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80043f2:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80043f6:	e00c      	b.n	8004412 <HAL_ETH_Init+0x1c2>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80043f8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80043fc:	f7ff f8c6 	bl	800358c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004400:	2100      	movs	r1, #0
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff fcc6 	bl	8003d94 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004408:	2301      	movs	r3, #1
 800440a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800440e:	e000      	b.n	8004412 <HAL_ETH_Init+0x1c2>
  uint32_t err = ETH_SUCCESS;
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
  {
    return HAL_ERROR;
 8004410:	2501      	movs	r5, #1
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
}
 8004412:	4628      	mov	r0, r5
 8004414:	b003      	add	sp, #12
 8004416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	40013800 	.word	0x40013800
 8004420:	feced300 	.word	0xfeced300
 8004424:	00e4e1bf 	.word	0x00e4e1bf
 8004428:	fde9f140 	.word	0xfde9f140
 800442c:	017d783f 	.word	0x017d783f
 8004430:	fc6c7900 	.word	0xfc6c7900
 8004434:	026259ff 	.word	0x026259ff
 8004438:	fa0a1f00 	.word	0xfa0a1f00
 800443c:	02faf07f 	.word	0x02faf07f

08004440 <HAL_ETH_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004440:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8004444:	2b01      	cmp	r3, #1
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004448:	4605      	mov	r5, r0
 800444a:	f04f 0002 	mov.w	r0, #2
  /* Process Locked */
  __HAL_LOCK(heth);
 800444e:	d033      	beq.n	80044b8 <HAL_ETH_Start+0x78>
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
 8004450:	2400      	movs	r4, #0
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004452:	682b      	ldr	r3, [r5, #0]
{  
  /* Process Locked */
  __HAL_LOCK(heth);
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004454:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004458:	2601      	movs	r6, #1
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
 800445a:	9401      	str	r4, [sp, #4]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800445c:	681a      	ldr	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800445e:	4630      	mov	r0, r6
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004460:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004464:	f042 0208 	orr.w	r2, r2, #8
 8004468:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800446e:	f7ff f88d 	bl	800358c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004472:	9a01      	ldr	r2, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004474:	4630      	mov	r0, r6
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->MACCR = tmpreg;
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	601a      	str	r2, [r3, #0]
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
 800447a:	9400      	str	r4, [sp, #0]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	f042 0204 	orr.w	r2, r2, #4
 8004482:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004488:	f7ff f880 	bl	800358c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800448c:	682b      	ldr	r3, [r5, #0]
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800448e:	4628      	mov	r0, r5
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->MACCR = tmpreg;
 8004490:	9a00      	ldr	r2, [sp, #0]
 8004492:	601a      	str	r2, [r3, #0]
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004494:	f7ff fc68 	bl	8003d68 <ETH_FlushTransmitFIFO>
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004498:	682a      	ldr	r2, [r5, #0]
 800449a:	f241 0318 	movw	r3, #4120	; 0x1018
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
  
  /* Return function status */
  return HAL_OK;
 800449e:	4620      	mov	r0, r4
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80044a0:	58d1      	ldr	r1, [r2, r3]
 80044a2:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80044a6:	50d1      	str	r1, [r2, r3]
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80044a8:	58d1      	ldr	r1, [r2, r3]
 80044aa:	f041 0102 	orr.w	r1, r1, #2
 80044ae:	50d1      	str	r1, [r2, r3]
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80044b0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044b4:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
}
 80044b8:	b002      	add	sp, #8
 80044ba:	bd70      	pop	{r4, r5, r6, pc}

080044bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c0:	680b      	ldr	r3, [r1, #0]
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c2:	b085      	sub	sp, #20
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044c4:	4e6f      	ldr	r6, [pc, #444]	; (8004684 <HAL_GPIO_Init+0x1c8>)
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044c6:	9301      	str	r3, [sp, #4]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80044c8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ca:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 800468c <HAL_GPIO_Init+0x1d0>
 80044ce:	46b6      	mov	lr, r6

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004690 <HAL_GPIO_Init+0x1d4>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044d4:	2201      	movs	r2, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80044d6:	9c01      	ldr	r4, [sp, #4]

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044d8:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80044da:	ea32 0404 	bics.w	r4, r2, r4
 80044de:	f040 80c9 	bne.w	8004674 <HAL_GPIO_Init+0x1b8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044e2:	684c      	ldr	r4, [r1, #4]
 80044e4:	f024 0910 	bic.w	r9, r4, #16
 80044e8:	f1b9 0f02 	cmp.w	r9, #2
 80044ec:	d114      	bne.n	8004518 <HAL_GPIO_Init+0x5c>
 80044ee:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80044f2:	f003 0b07 	and.w	fp, r3, #7
 80044f6:	250f      	movs	r5, #15
 80044f8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80044fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004500:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004504:	fa05 f50b 	lsl.w	r5, r5, fp
 8004508:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800450c:	690f      	ldr	r7, [r1, #16]
 800450e:	fa07 f70b 	lsl.w	r7, r7, fp
 8004512:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8004514:	f8ca 7020 	str.w	r7, [sl, #32]
 8004518:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800451c:	2503      	movs	r5, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800451e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004520:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004524:	fa05 f50a 	lsl.w	r5, r5, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004528:	f109 39ff 	add.w	r9, r9, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800452c:	fa0b fb0a 	lsl.w	fp, fp, sl
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004530:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004532:	f1b9 0f01 	cmp.w	r9, #1
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004536:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800453a:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;
 800453e:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004540:	d812      	bhi.n	8004568 <HAL_GPIO_Init+0xac>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004542:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004544:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8004548:	68cf      	ldr	r7, [r1, #12]
 800454a:	fa07 f70a 	lsl.w	r7, r7, sl
 800454e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004552:	f3c4 1900 	ubfx	r9, r4, #4, #1
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;
 8004556:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004558:	fa09 f903 	lsl.w	r9, r9, r3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
        temp |= (GPIO_Init->Speed << (position * 2));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800455c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800455e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004562:	ea49 0707 	orr.w	r7, r9, r7
        GPIOx->OTYPER = temp;
 8004566:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004568:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800456a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800456c:	688f      	ldr	r7, [r1, #8]
 800456e:	fa07 f70a 	lsl.w	r7, r7, sl
 8004572:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8004574:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004576:	00e5      	lsls	r5, r4, #3
 8004578:	d57c      	bpl.n	8004674 <HAL_GPIO_Init+0x1b8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457a:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 800457e:	f023 0703 	bic.w	r7, r3, #3

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004582:	f003 0a03 	and.w	sl, r3, #3
 8004586:	f04f 090f 	mov.w	r9, #15
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800458e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004592:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004596:	f8cc 5044 	str.w	r5, [ip, #68]	; 0x44
 800459a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800459e:	f8dc 5044 	ldr.w	r5, [ip, #68]	; 0x44
 80045a2:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80045a6:	9503      	str	r5, [sp, #12]
 80045a8:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045aa:	fa09 f50a 	lsl.w	r5, r9, sl
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80045ae:	f8d7 b008 	ldr.w	fp, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045b2:	ea2b 0905 	bic.w	r9, fp, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045b6:	4d34      	ldr	r5, [pc, #208]	; (8004688 <HAL_GPIO_Init+0x1cc>)
 80045b8:	42a8      	cmp	r0, r5
 80045ba:	d024      	beq.n	8004606 <HAL_GPIO_Init+0x14a>
 80045bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045c0:	42a8      	cmp	r0, r5
 80045c2:	d022      	beq.n	800460a <HAL_GPIO_Init+0x14e>
 80045c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045c8:	42a8      	cmp	r0, r5
 80045ca:	d020      	beq.n	800460e <HAL_GPIO_Init+0x152>
 80045cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045d0:	42a8      	cmp	r0, r5
 80045d2:	d01e      	beq.n	8004612 <HAL_GPIO_Init+0x156>
 80045d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045d8:	42a8      	cmp	r0, r5
 80045da:	d01c      	beq.n	8004616 <HAL_GPIO_Init+0x15a>
 80045dc:	4540      	cmp	r0, r8
 80045de:	d01c      	beq.n	800461a <HAL_GPIO_Init+0x15e>
 80045e0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80045e4:	42a8      	cmp	r0, r5
 80045e6:	d01a      	beq.n	800461e <HAL_GPIO_Init+0x162>
 80045e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045ec:	42a8      	cmp	r0, r5
 80045ee:	d018      	beq.n	8004622 <HAL_GPIO_Init+0x166>
 80045f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045f4:	42a8      	cmp	r0, r5
 80045f6:	d016      	beq.n	8004626 <HAL_GPIO_Init+0x16a>
 80045f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045fc:	42a8      	cmp	r0, r5
 80045fe:	bf14      	ite	ne
 8004600:	250a      	movne	r5, #10
 8004602:	2509      	moveq	r5, #9
 8004604:	e010      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 8004606:	2500      	movs	r5, #0
 8004608:	e00e      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 800460a:	2501      	movs	r5, #1
 800460c:	e00c      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 800460e:	2502      	movs	r5, #2
 8004610:	e00a      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 8004612:	2503      	movs	r5, #3
 8004614:	e008      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 8004616:	2504      	movs	r5, #4
 8004618:	e006      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 800461a:	2505      	movs	r5, #5
 800461c:	e004      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 800461e:	2506      	movs	r5, #6
 8004620:	e002      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 8004622:	2507      	movs	r5, #7
 8004624:	e000      	b.n	8004628 <HAL_GPIO_Init+0x16c>
 8004626:	2508      	movs	r5, #8
 8004628:	fa05 f50a 	lsl.w	r5, r5, sl
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800462c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004630:	ea45 0509 	orr.w	r5, r5, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8004634:	60bd      	str	r5, [r7, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8004636:	ea6f 0702 	mvn.w	r7, r2
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800463a:	6835      	ldr	r5, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800463c:	bf0c      	ite	eq
 800463e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8004640:	4315      	orrne	r5, r2
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004642:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004646:	f8ce 5000 	str.w	r5, [lr]

        temp = EXTI->EMR;
 800464a:	f8de 5004 	ldr.w	r5, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
 800464e:	bf0c      	ite	eq
 8004650:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8004652:	4315      	orrne	r5, r2
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004654:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004658:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800465a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800465c:	bf0c      	ite	eq
 800465e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8004660:	4315      	orrne	r5, r2
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004662:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004664:	f8ce 5008 	str.w	r5, [lr, #8]

        temp = EXTI->FTSR;
 8004668:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
 800466c:	bf54      	ite	pl
 800466e:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8004670:	4315      	orrmi	r5, r2
        }
        EXTI->FTSR = temp;
 8004672:	60f5      	str	r5, [r6, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004674:	3301      	adds	r3, #1
 8004676:	2b10      	cmp	r3, #16
 8004678:	f47f af2c 	bne.w	80044d4 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800467c:	b005      	add	sp, #20
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	bf00      	nop
 8004684:	40013c00 	.word	0x40013c00
 8004688:	40020000 	.word	0x40020000
 800468c:	40023800 	.word	0x40023800
 8004690:	40021400 	.word	0x40021400

08004694 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004698:	2200      	movs	r2, #0
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800469a:	4c4d      	ldr	r4, [pc, #308]	; (80047d0 <HAL_GPIO_DeInit+0x13c>)
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800469c:	f8df a138 	ldr.w	sl, [pc, #312]	; 80047d8 <HAL_GPIO_DeInit+0x144>
 80046a0:	f8df b138 	ldr.w	fp, [pc, #312]	; 80047dc <HAL_GPIO_DeInit+0x148>
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046a4:	f04f 0901 	mov.w	r9, #1
 80046a8:	fa09 f502 	lsl.w	r5, r9, r2
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;

    if(iocurrent == ioposition)
 80046ac:	ea35 0301 	bics.w	r3, r5, r1
 80046b0:	f040 8087 	bne.w	80047c2 <HAL_GPIO_DeInit+0x12e>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046b4:	2303      	movs	r3, #3
 80046b6:	fa02 f609 	lsl.w	r6, r2, r9
 80046ba:	6807      	ldr	r7, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046bc:	f002 0e07 	and.w	lr, r2, #7

    if(iocurrent == ioposition)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046c0:	fa03 f606 	lsl.w	r6, r3, r6
 80046c4:	fa22 fc03 	lsr.w	ip, r2, r3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046cc:	43ed      	mvns	r5, r5

    if(iocurrent == ioposition)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046ce:	43f6      	mvns	r6, r6
 80046d0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80046d4:	4037      	ands	r7, r6
 80046d6:	6007      	str	r7, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046d8:	270f      	movs	r7, #15
 80046da:	f8dc 8020 	ldr.w	r8, [ip, #32]
 80046de:	fa07 fe0e 	lsl.w	lr, r7, lr
 80046e2:	ea28 0e0e 	bic.w	lr, r8, lr
 80046e6:	f8cc e020 	str.w	lr, [ip, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046ea:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80046ee:	ea06 0e0e 	and.w	lr, r6, lr
 80046f2:	f8c0 e008 	str.w	lr, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80046fa:	ea0e 0e05 	and.w	lr, lr, r5
 80046fe:	f8c0 e004 	str.w	lr, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004702:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8004706:	ea06 060e 	and.w	r6, r6, lr

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800470a:	ea02 0e03 	and.w	lr, r2, r3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <HAL_GPIO_DeInit+0x140>)

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004710:	60c6      	str	r6, [r0, #12]
 8004712:	f022 0603 	bic.w	r6, r2, #3

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004716:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800471a:	4298      	cmp	r0, r3
 800471c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004720:	fa07 f70e 	lsl.w	r7, r7, lr
 8004724:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004728:	f8d6 c008 	ldr.w	ip, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800472c:	ea0c 0c07 	and.w	ip, ip, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004730:	d022      	beq.n	8004778 <HAL_GPIO_DeInit+0xe4>
 8004732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004736:	4298      	cmp	r0, r3
 8004738:	d020      	beq.n	800477c <HAL_GPIO_DeInit+0xe8>
 800473a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473e:	4298      	cmp	r0, r3
 8004740:	d01e      	beq.n	8004780 <HAL_GPIO_DeInit+0xec>
 8004742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004746:	4298      	cmp	r0, r3
 8004748:	d01c      	beq.n	8004784 <HAL_GPIO_DeInit+0xf0>
 800474a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800474e:	4298      	cmp	r0, r3
 8004750:	d01a      	beq.n	8004788 <HAL_GPIO_DeInit+0xf4>
 8004752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004756:	4298      	cmp	r0, r3
 8004758:	d018      	beq.n	800478c <HAL_GPIO_DeInit+0xf8>
 800475a:	4550      	cmp	r0, sl
 800475c:	d018      	beq.n	8004790 <HAL_GPIO_DeInit+0xfc>
 800475e:	4558      	cmp	r0, fp
 8004760:	d018      	beq.n	8004794 <HAL_GPIO_DeInit+0x100>
 8004762:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004766:	4298      	cmp	r0, r3
 8004768:	d016      	beq.n	8004798 <HAL_GPIO_DeInit+0x104>
 800476a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800476e:	4298      	cmp	r0, r3
 8004770:	bf0c      	ite	eq
 8004772:	2309      	moveq	r3, #9
 8004774:	230a      	movne	r3, #10
 8004776:	e010      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 8004778:	2300      	movs	r3, #0
 800477a:	e00e      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 800477c:	464b      	mov	r3, r9
 800477e:	e00c      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 8004780:	2302      	movs	r3, #2
 8004782:	e00a      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 8004784:	2303      	movs	r3, #3
 8004786:	e008      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 8004788:	2304      	movs	r3, #4
 800478a:	e006      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 800478c:	2305      	movs	r3, #5
 800478e:	e004      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 8004790:	2306      	movs	r3, #6
 8004792:	e002      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 8004794:	2307      	movs	r3, #7
 8004796:	e000      	b.n	800479a <HAL_GPIO_DeInit+0x106>
 8004798:	2308      	movs	r3, #8
 800479a:	fa03 f30e 	lsl.w	r3, r3, lr
 800479e:	459c      	cmp	ip, r3
 80047a0:	d10f      	bne.n	80047c2 <HAL_GPIO_DeInit+0x12e>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80047a2:	68b3      	ldr	r3, [r6, #8]
 80047a4:	ea23 0707 	bic.w	r7, r3, r7
 80047a8:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	402b      	ands	r3, r5
 80047ae:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80047b0:	6863      	ldr	r3, [r4, #4]
 80047b2:	402b      	ands	r3, r5
 80047b4:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80047b6:	68a3      	ldr	r3, [r4, #8]
 80047b8:	402b      	ands	r3, r5
 80047ba:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80047bc:	68e3      	ldr	r3, [r4, #12]
 80047be:	401d      	ands	r5, r3
 80047c0:	60e5      	str	r5, [r4, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047c2:	3201      	adds	r2, #1
 80047c4:	2a10      	cmp	r2, #16
 80047c6:	f47f af6d 	bne.w	80046a4 <HAL_GPIO_DeInit+0x10>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
	  }
    }
  }
}
 80047ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ce:	bf00      	nop
 80047d0:	40013c00 	.word	0x40013c00
 80047d4:	40020000 	.word	0x40020000
 80047d8:	40021800 	.word	0x40021800
 80047dc:	40021c00 	.word	0x40021c00

080047e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047e0:	b902      	cbnz	r2, 80047e4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047e2:	0409      	lsls	r1, r1, #16
 80047e4:	6181      	str	r1, [r0, #24]
 80047e6:	4770      	bx	lr

080047e8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047e8:	6803      	ldr	r3, [r0, #0]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	0791      	lsls	r1, r2, #30
 80047ee:	d501      	bpl.n	80047f4 <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00;
 80047f0:	2200      	movs	r2, #0
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	07d2      	lsls	r2, r2, #31
 80047f8:	d403      	bmi.n	8004802 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	619a      	str	r2, [r3, #24]
 8004802:	4770      	bx	lr

08004804 <I2C_TransferConfig>:
  * @param  Request: New state of the I2C START condition generation.
  *   This parameter can be a value of I2C_START_STOP_MODE.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004804:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
  
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8004806:	6805      	ldr	r5, [r0, #0]
 8004808:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800480c:	4c05      	ldr	r4, [pc, #20]	; (8004824 <I2C_TransferConfig+0x20>)
 800480e:	6868      	ldr	r0, [r5, #4]
 8004810:	4004      	ands	r4, r0
 8004812:	9803      	ldr	r0, [sp, #12]
 8004814:	4320      	orrs	r0, r4
 8004816:	4303      	orrs	r3, r0
 8004818:	430b      	orrs	r3, r1
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800481a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 800481e:	606a      	str	r2, [r5, #4]
 8004820:	bd30      	pop	{r4, r5, pc}
 8004822:	bf00      	nop
 8004824:	fc009800 	.word	0xfc009800

08004828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482c:	9f06      	ldr	r7, [sp, #24]
 800482e:	4604      	mov	r4, r0
 8004830:	4688      	mov	r8, r1
 8004832:	4616      	mov	r6, r2
 8004834:	461d      	mov	r5, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status)
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	6993      	ldr	r3, [r2, #24]
 800483a:	ea38 0303 	bics.w	r3, r8, r3
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	42b3      	cmp	r3, r6
 8004846:	d113      	bne.n	8004870 <I2C_WaitOnFlagUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004848:	1c6b      	adds	r3, r5, #1
 800484a:	d0f5      	beq.n	8004838 <I2C_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart ) > Timeout))
 800484c:	b955      	cbnz	r5, 8004864 <I2C_WaitOnFlagUntilTimeout+0x3c>
      {
        hi2c->State= HAL_I2C_STATE_READY;
 800484e:	2320      	movs	r3, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
 8004850:	2003      	movs	r0, #3
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart ) > Timeout))
      {
        hi2c->State= HAL_I2C_STATE_READY;
 8004852:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004856:	2300      	movs	r3, #0
 8004858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8004860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004864:	f7fe fe8c 	bl	8003580 <HAL_GetTick>
 8004868:	1bc0      	subs	r0, r0, r7
 800486a:	4285      	cmp	r5, r0
 800486c:	d2e3      	bcs.n	8004836 <I2C_WaitOnFlagUntilTimeout+0xe>
 800486e:	e7ee      	b.n	800484e <I2C_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(hi2c);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004870:	2000      	movs	r0, #0
}
 8004872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004878 <I2C_IsAcknowledgeFailed>:
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004878:	6803      	ldr	r3, [r0, #0]
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800487a:	b570      	push	{r4, r5, r6, lr}
 800487c:	4604      	mov	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487e:	6998      	ldr	r0, [r3, #24]
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	460d      	mov	r5, r1
 8004882:	4616      	mov	r6, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004884:	f010 0010 	ands.w	r0, r0, #16
 8004888:	d10b      	bne.n	80048a2 <I2C_IsAcknowledgeFailed+0x2a>
 800488a:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800488c:	6999      	ldr	r1, [r3, #24]
 800488e:	068a      	lsls	r2, r1, #26
 8004890:	d413      	bmi.n	80048ba <I2C_IsAcknowledgeFailed+0x42>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004892:	1c69      	adds	r1, r5, #1
 8004894:	d0fa      	beq.n	800488c <I2C_IsAcknowledgeFailed+0x14>
      {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 8004896:	b135      	cbz	r5, 80048a6 <I2C_IsAcknowledgeFailed+0x2e>
 8004898:	f7fe fe72 	bl	8003580 <HAL_GetTick>
 800489c:	1b80      	subs	r0, r0, r6
 800489e:	4285      	cmp	r5, r0
 80048a0:	d301      	bcc.n	80048a6 <I2C_IsAcknowledgeFailed+0x2e>
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	e7f2      	b.n	800488c <I2C_IsAcknowledgeFailed+0x14>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80048a6:	2320      	movs	r3, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
          return HAL_TIMEOUT;
 80048a8:	2003      	movs	r0, #3
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80048aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048b4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80048b8:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }
    
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ba:	2210      	movs	r2, #16
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048bc:	2520      	movs	r5, #32
    
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048be:	4620      	mov	r0, r4
        }
      }
    }
    
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c0:	61da      	str	r2, [r3, #28]
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c2:	61dd      	str	r5, [r3, #28]
    
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048c4:	f7ff ff90 	bl	80047e8 <I2C_Flush_TXDR>
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <I2C_IsAcknowledgeFailed+0x70>)
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    
    return HAL_ERROR;
 80048cc:	2001      	movs	r0, #1
    
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048ce:	6851      	ldr	r1, [r2, #4]
 80048d0:	400b      	ands	r3, r1
 80048d2:	6053      	str	r3, [r2, #4]
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80048d4:	2304      	movs	r3, #4
 80048d6:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	2300      	movs	r3, #0
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 80048da:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
    
    return HAL_ERROR;
  }
  return HAL_OK;
}
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	fe00e800 	.word	0xfe00e800

080048ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	4604      	mov	r4, r0
 80048f0:	460d      	mov	r5, r1
 80048f2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	079b      	lsls	r3, r3, #30
 80048fa:	d41c      	bmi.n	8004936 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80048fc:	4632      	mov	r2, r6
 80048fe:	4629      	mov	r1, r5
 8004900:	4620      	mov	r0, r4
 8004902:	f7ff ffb9 	bl	8004878 <I2C_IsAcknowledgeFailed>
 8004906:	b9c0      	cbnz	r0, 800493a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8004908:	1c6a      	adds	r2, r5, #1
 800490a:	d0f3      	beq.n	80048f4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 800490c:	b96d      	cbnz	r5, 800492a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800490e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004910:	2003      	movs	r0, #3
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004912:	f043 0320 	orr.w	r3, r3, #32
 8004916:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8004918:	2320      	movs	r3, #32
 800491a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800491e:	2300      	movs	r3, #0
 8004920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004924:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004928:	bd70      	pop	{r4, r5, r6, pc}
    }
    
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 800492a:	f7fe fe29 	bl	8003580 <HAL_GetTick>
 800492e:	1b80      	subs	r0, r0, r6
 8004930:	4285      	cmp	r5, r0
 8004932:	d2df      	bcs.n	80048f4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 8004934:	e7eb      	b.n	800490e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004936:	2000      	movs	r0, #0
 8004938:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 800493a:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 800493c:	bd70      	pop	{r4, r5, r6, pc}

0800493e <I2C_RequestMemoryWrite>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800493e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004940:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004946:	4604      	mov	r4, r0
 8004948:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800494a:	9300      	str	r3, [sp, #0]
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800494e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004952:	b2fa      	uxtb	r2, r7
 8004954:	f7ff ff56 	bl	8004804 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004958:	4632      	mov	r2, r6
 800495a:	9908      	ldr	r1, [sp, #32]
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff ffc5 	bl	80048ec <I2C_WaitOnTXISFlagUntilTimeout>
 8004962:	b120      	cbz	r0, 800496e <I2C_RequestMemoryWrite+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004964:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004966:	2b04      	cmp	r3, #4
 8004968:	d10e      	bne.n	8004988 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 800496a:	2001      	movs	r0, #1
 800496c:	e019      	b.n	80049a2 <I2C_RequestMemoryWrite+0x64>
      return HAL_TIMEOUT;
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800496e:	2f01      	cmp	r7, #1
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	d10b      	bne.n	800498c <I2C_RequestMemoryWrite+0x4e>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004974:	b2ed      	uxtb	r5, r5
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004976:	2200      	movs	r2, #0
 8004978:	2180      	movs	r1, #128	; 0x80
 800497a:	4620      	mov	r0, r4
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800497c:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800497e:	9b08      	ldr	r3, [sp, #32]
 8004980:	9600      	str	r6, [sp, #0]
 8004982:	f7ff ff51 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004986:	b160      	cbz	r0, 80049a2 <I2C_RequestMemoryWrite+0x64>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 8004988:	2003      	movs	r0, #3
 800498a:	e00a      	b.n	80049a2 <I2C_RequestMemoryWrite+0x64>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800498c:	0a2a      	lsrs	r2, r5, #8
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800498e:	9908      	ldr	r1, [sp, #32]
 8004990:	4620      	mov	r0, r4
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004992:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004994:	4632      	mov	r2, r6
 8004996:	f7ff ffa9 	bl	80048ec <I2C_WaitOnTXISFlagUntilTimeout>
 800499a:	2800      	cmp	r0, #0
 800499c:	d1e2      	bne.n	8004964 <I2C_RequestMemoryWrite+0x26>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	e7e8      	b.n	8004974 <I2C_RequestMemoryWrite+0x36>
  {
    return HAL_TIMEOUT;
  }
  
return HAL_OK;
}
 80049a2:	b003      	add	sp, #12
 80049a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049a6 <I2C_RequestMemoryRead>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049a8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049ae:	4604      	mov	r4, r0
 80049b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049b2:	9300      	str	r3, [sp, #0]
  * @param  Timeout: Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049b6:	2300      	movs	r3, #0
 80049b8:	b2fa      	uxtb	r2, r7
 80049ba:	f7ff ff23 	bl	8004804 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049be:	4632      	mov	r2, r6
 80049c0:	9908      	ldr	r1, [sp, #32]
 80049c2:	4620      	mov	r0, r4
 80049c4:	f7ff ff92 	bl	80048ec <I2C_WaitOnTXISFlagUntilTimeout>
 80049c8:	b120      	cbz	r0, 80049d4 <I2C_RequestMemoryRead+0x2e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d10e      	bne.n	80049ee <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 80049d0:	2001      	movs	r0, #1
 80049d2:	e019      	b.n	8004a08 <I2C_RequestMemoryRead+0x62>
      return HAL_TIMEOUT;
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049d4:	2f01      	cmp	r7, #1
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	d10b      	bne.n	80049f2 <I2C_RequestMemoryRead+0x4c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049da:	b2ed      	uxtb	r5, r5
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049dc:	2200      	movs	r2, #0
 80049de:	2140      	movs	r1, #64	; 0x40
 80049e0:	4620      	mov	r0, r4
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049e2:	629d      	str	r5, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80049e4:	9b08      	ldr	r3, [sp, #32]
 80049e6:	9600      	str	r6, [sp, #0]
 80049e8:	f7ff ff1e 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 80049ec:	b160      	cbz	r0, 8004a08 <I2C_RequestMemoryRead+0x62>
    {
      return HAL_ERROR;
    }
    else
    {
      return HAL_TIMEOUT;
 80049ee:	2003      	movs	r0, #3
 80049f0:	e00a      	b.n	8004a08 <I2C_RequestMemoryRead+0x62>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049f2:	0a2a      	lsrs	r2, r5, #8
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f4:	9908      	ldr	r1, [sp, #32]
 80049f6:	4620      	mov	r0, r4
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fa:	4632      	mov	r2, r6
 80049fc:	f7ff ff76 	bl	80048ec <I2C_WaitOnTXISFlagUntilTimeout>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d1e2      	bne.n	80049ca <I2C_RequestMemoryRead+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	e7e8      	b.n	80049da <I2C_RequestMemoryRead+0x34>
  {
    return HAL_TIMEOUT;
  }
  
  return HAL_OK;
}
 8004a08:	b003      	add	sp, #12
 8004a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout: Timeout duration
  * @param  Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4604      	mov	r4, r0
 8004a10:	460d      	mov	r5, r1
 8004a12:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	069b      	lsls	r3, r3, #26
 8004a1a:	d41a      	bmi.n	8004a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1c:	4632      	mov	r2, r6
 8004a1e:	4629      	mov	r1, r5
 8004a20:	4620      	mov	r0, r4
 8004a22:	f7ff ff29 	bl	8004878 <I2C_IsAcknowledgeFailed>
 8004a26:	b9b0      	cbnz	r0, 8004a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 8004a28:	b96d      	cbnz	r5, 8004a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
      hi2c->Mode = HAL_I2C_MODE_NONE;
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2c:	2003      	movs	r0, #3
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a2e:	f043 0320 	orr.w	r3, r3, #32
 8004a32:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8004a34:	2320      	movs	r3, #32
 8004a36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a44:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
    
    /* Check for the Timeout */
    if((Timeout == 0)||((HAL_GetTick() - Tickstart) > Timeout))
 8004a46:	f7fe fd9b 	bl	8003580 <HAL_GetTick>
 8004a4a:	1b80      	subs	r0, r0, r6
 8004a4c:	4285      	cmp	r5, r0
 8004a4e:	d2e1      	bcs.n	8004a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8004a50:	e7eb      	b.n	8004a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
      __HAL_UNLOCK(hi2c);
      
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8004a52:	2000      	movs	r0, #0
 8004a54:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
    {
      return HAL_ERROR;
 8004a56:	2001      	movs	r0, #1
      
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8004a58:	bd70      	pop	{r4, r5, r6, pc}

08004a5a <HAL_I2C_Init>:
  * @param  hi2c: Pointer to a I2C_HandleTypeDef structure that contains
  *               the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8004a5a:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d047      	beq.n	8004af2 <HAL_I2C_Init+0x98>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8004a62:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004a6a:	b91b      	cbnz	r3, 8004a74 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a6c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a70:	f009 feb4 	bl	800e7dc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a74:	2324      	movs	r3, #36	; 0x24
 8004a76:	68e1      	ldr	r1, [r4, #12]
 8004a78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	f022 0201 	bic.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a86:	6862      	ldr	r2, [r4, #4]
 8004a88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a8c:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a94:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8004a96:	68a2      	ldr	r2, [r4, #8]
 8004a98:	b142      	cbz	r2, 8004aac <HAL_I2C_Init+0x52>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a9a:	2901      	cmp	r1, #1
 8004a9c:	d103      	bne.n	8004aa6 <HAL_I2C_Init+0x4c>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	e007      	b.n	8004ab6 <HAL_I2C_Init+0x5c>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004aa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004aaa:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004aac:	2902      	cmp	r1, #2
 8004aae:	d102      	bne.n	8004ab6 <HAL_I2C_Init+0x5c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ab6:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab8:	2000      	movs	r0, #0
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004aba:	6921      	ldr	r1, [r4, #16]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004abc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ac4:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ac6:	6962      	ldr	r2, [r4, #20]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	69a1      	ldr	r1, [r4, #24]
 8004acc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ad0:	69e1      	ldr	r1, [r4, #28]
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ad2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ad4:	6a22      	ldr	r2, [r4, #32]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f042 0201 	orr.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	2320      	movs	r3, #32
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aec:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  
  return HAL_OK;
 8004af0:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8004af2:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;
  
  return HAL_OK;
}
 8004af4:	bd10      	pop	{r4, pc}

08004af6 <HAL_I2C_DeInit>:
  * @param  hi2c: Pointer to a I2C_HandleTypeDef structure that contains
  *               the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004af6:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8004af8:	4604      	mov	r4, r0
 8004afa:	b198      	cbz	r0, 8004b24 <HAL_I2C_DeInit+0x2e>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004afc:	6802      	ldr	r2, [r0, #0]
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004afe:	2324      	movs	r3, #36	; 0x24
 8004b00:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004b04:	6813      	ldr	r3, [r2, #0]
 8004b06:	f023 0301 	bic.w	r3, r3, #1
 8004b0a:	6013      	str	r3, [r2, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004b0c:	f009 fe8e 	bl	800e82c <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b10:	2000      	movs	r0, #0
 8004b12:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b14:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 8004b18:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b1c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 8004b22:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8004b24:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 8004b26:	bd10      	pop	{r4, pc}

08004b28 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2c:	469b      	mov	fp, r3
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b2e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b32:	b085      	sub	sp, #20
 8004b34:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b36:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	460f      	mov	r7, r1
 8004b3a:	9203      	str	r2, [sp, #12]
 8004b3c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8004b40:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004b44:	f040 809f 	bne.w	8004c86 <HAL_I2C_Mem_Write+0x15e>
  {
    if((pData == NULL) || (Size == 0))
 8004b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b4a:	b90b      	cbnz	r3, 8004b50 <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;
 8004b4c:	2001      	movs	r0, #1
 8004b4e:	e09b      	b.n	8004c88 <HAL_I2C_Mem_Write+0x160>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0))
 8004b50:	f1ba 0f00 	cmp.w	sl, #0
 8004b54:	d0fa      	beq.n	8004b4c <HAL_I2C_Mem_Write+0x24>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b56:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	f000 8093 	beq.w	8004c86 <HAL_I2C_Mem_Write+0x15e>
 8004b60:	2501      	movs	r5, #1
 8004b62:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b66:	f7fe fd0b 	bl	8003580 <HAL_GetTick>
    
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b6a:	2319      	movs	r3, #25
 8004b6c:	9000      	str	r0, [sp, #0]
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b6e:	4606      	mov	r6, r0
    
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b70:	462a      	mov	r2, r5
 8004b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b76:	4620      	mov	r0, r4
 8004b78:	f7ff fe56 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d14e      	bne.n	8004c20 <HAL_I2C_Mem_Write+0xf8>
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b82:	2321      	movs	r3, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 8004b84:	6360      	str	r0, [r4, #52]	; 0x34
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b86:	9601      	str	r6, [sp, #4]
 8004b88:	4639      	mov	r1, r7
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b8e:	2340      	movs	r3, #64	; 0x40
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b90:	f8cd 9000 	str.w	r9, [sp]
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b9a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b9c:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b9e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba0:	465b      	mov	r3, fp
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 8004ba2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba6:	9a03      	ldr	r2, [sp, #12]
 8004ba8:	f7ff fec9 	bl	800493e <I2C_RequestMemoryWrite>
 8004bac:	b118      	cbz	r0, 8004bb6 <HAL_I2C_Mem_Write+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bae:	6c63      	ldr	r3, [r4, #68]	; 0x44
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb0:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 8004bb4:	e056      	b.n	8004c64 <HAL_I2C_Mem_Write+0x13c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2bff      	cmp	r3, #255	; 0xff
 8004bbc:	d905      	bls.n	8004bca <HAL_I2C_Mem_Write+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bbe:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bc0:	9000      	str	r0, [sp, #0]
 8004bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    }
    
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bc6:	8522      	strh	r2, [r4, #40]	; 0x28
 8004bc8:	e006      	b.n	8004bd8 <HAL_I2C_Mem_Write+0xb0>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bd0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	4639      	mov	r1, r7
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7ff fe12 	bl	8004804 <I2C_TransferConfig>
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be0:	4632      	mov	r2, r6
 8004be2:	4649      	mov	r1, r9
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7ff fe81 	bl	80048ec <I2C_WaitOnTXISFlagUntilTimeout>
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d139      	bne.n	8004c62 <HAL_I2C_Mem_Write+0x13a>
          return HAL_TIMEOUT;
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8004bee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	1c59      	adds	r1, r3, #1
 8004bf4:	6261      	str	r1, [r4, #36]	; 0x24
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
      hi2c->XferSize--;
 8004bfa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8004bfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004bfe:	3a01      	subs	r2, #1
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8004c00:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004c02:	b292      	uxth	r2, r2
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8004c04:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004c06:	8522      	strh	r2, [r4, #40]	; 0x28
        }
      }
    
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
      hi2c->XferCount--;
 8004c08:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
      
      if((hi2c->XferSize == 0) && (hi2c->XferCount!=0))
 8004c0a:	bb02      	cbnz	r2, 8004c4e <HAL_I2C_Mem_Write+0x126>
 8004c0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	b1eb      	cbz	r3, 8004c4e <HAL_I2C_Mem_Write+0x126>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c12:	9600      	str	r6, [sp, #0]
 8004c14:	464b      	mov	r3, r9
 8004c16:	2180      	movs	r1, #128	; 0x80
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7ff fe05 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004c1e:	b108      	cbz	r0, 8004c24 <HAL_I2C_Mem_Write+0xfc>
        {
          return HAL_ERROR;
        }
        else
        {
          return HAL_TIMEOUT;
 8004c20:	2003      	movs	r0, #3
 8004c22:	e031      	b.n	8004c88 <HAL_I2C_Mem_Write+0x160>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
        {
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2bff      	cmp	r3, #255	; 0xff
 8004c2a:	d905      	bls.n	8004c38 <HAL_I2C_Mem_Write+0x110>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c2c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c2e:	9000      	str	r0, [sp, #0]
 8004c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c34:	8522      	strh	r2, [r4, #40]	; 0x28
 8004c36:	e006      	b.n	8004c46 <HAL_I2C_Mem_Write+0x11e>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c3e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c40:	b292      	uxth	r2, r2
 8004c42:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	4639      	mov	r1, r7
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff fddb 	bl	8004804 <I2C_TransferConfig>
        }
      }
      
    }while(hi2c->XferCount > 0);
 8004c4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1c4      	bne.n	8004be0 <HAL_I2C_Mem_Write+0xb8>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c56:	4632      	mov	r2, r6
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f7ff fed6 	bl	8004a0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c60:	b118      	cbz	r0, 8004c6a <HAL_I2C_Mem_Write+0x142>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d1db      	bne.n	8004c20 <HAL_I2C_Mem_Write+0xf8>
 8004c68:	e770      	b.n	8004b4c <HAL_I2C_Mem_Write+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	2120      	movs	r1, #32
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c6e:	4a08      	ldr	r2, [pc, #32]	; (8004c90 <HAL_I2C_Mem_Write+0x168>)
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c70:	61d9      	str	r1, [r3, #28]
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c72:	685d      	ldr	r5, [r3, #4]
 8004c74:	402a      	ands	r2, r5
 8004c76:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8004c78:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c80:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    
    return HAL_OK;
 8004c84:	e000      	b.n	8004c88 <HAL_I2C_Mem_Write+0x160>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2002      	movs	r0, #2
  }
}
 8004c88:	b005      	add	sp, #20
 8004c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	fe00e800 	.word	0xfe00e800

08004c94 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	469b      	mov	fp, r3
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004c9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004ca2:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	460f      	mov	r7, r1
 8004ca6:	9203      	str	r2, [sp, #12]
 8004ca8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8004cac:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = 0;
  
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8004cb0:	f040 80a5 	bne.w	8004dfe <HAL_I2C_Mem_Read+0x16a>
  {
    if((pData == NULL) || (Size == 0))
 8004cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cb6:	b90b      	cbnz	r3, 8004cbc <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;
 8004cb8:	2001      	movs	r0, #1
 8004cba:	e0a1      	b.n	8004e00 <HAL_I2C_Mem_Read+0x16c>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {
    if((pData == NULL) || (Size == 0))
 8004cbc:	f1ba 0f00 	cmp.w	sl, #0
 8004cc0:	d0fa      	beq.n	8004cb8 <HAL_I2C_Mem_Read+0x24>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	f000 8099 	beq.w	8004dfe <HAL_I2C_Mem_Read+0x16a>
 8004ccc:	2501      	movs	r5, #1
 8004cce:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cd2:	f7fe fc55 	bl	8003580 <HAL_GetTick>
    
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cd6:	2319      	movs	r3, #25
 8004cd8:	9000      	str	r0, [sp, #0]
    
    /* Process Locked */
    __HAL_LOCK(hi2c);
    
    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cda:	4606      	mov	r6, r0
    
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cdc:	462a      	mov	r2, r5
 8004cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7ff fda0 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004ce8:	4680      	mov	r8, r0
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d177      	bne.n	8004dde <HAL_I2C_Mem_Read+0x14a>
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cee:	2322      	movs	r3, #34	; 0x22
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 8004cf0:	6360      	str	r0, [r4, #52]	; 0x34
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf2:	9601      	str	r6, [sp, #4]
 8004cf4:	4639      	mov	r1, r7
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cf6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cfa:	2340      	movs	r3, #64	; 0x40
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cfc:	f8cd 9000 	str.w	r9, [sp]
    {
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      return HAL_TIMEOUT;
    }
    
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d06:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d08:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d0a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d0c:	465b      	mov	r3, fp
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
    
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
    hi2c->XferCount = Size;
 8004d0e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d12:	9a03      	ldr	r2, [sp, #12]
 8004d14:	f7ff fe47 	bl	80049a6 <I2C_RequestMemoryRead>
 8004d18:	b118      	cbz	r0, 8004d22 <HAL_I2C_Mem_Read+0x8e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d1c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
 8004d20:	e05a      	b.n	8004dd8 <HAL_I2C_Mem_Read+0x144>
      }
    }
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2bff      	cmp	r3, #255	; 0xff
 8004d28:	d907      	bls.n	8004d3a <HAL_I2C_Mem_Read+0xa6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d2a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d2e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    
    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d36:	8522      	strh	r2, [r4, #40]	; 0x28
 8004d38:	e008      	b.n	8004d4c <HAL_I2C_Mem_Read+0xb8>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d3c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d40:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d48:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f7ff fd58 	bl	8004804 <I2C_TransferConfig>
    }
    
    do
    {
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d54:	9600      	str	r6, [sp, #0]
 8004d56:	464b      	mov	r3, r9
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2104      	movs	r1, #4
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7ff fd63 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d13b      	bne.n	8004dde <HAL_I2C_Mem_Read+0x14a>
      {
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8004d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	6262      	str	r2, [r4, #36]	; 0x24
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d70:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8004d72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004d74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8004d76:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004d78:	3b01      	subs	r3, #1
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8004d7a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004d7c:	b29b      	uxth	r3, r3
        return HAL_TIMEOUT;
      }
      
      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
      hi2c->XferSize--;
 8004d7e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004d80:	8563      	strh	r3, [r4, #42]	; 0x2a
      
      if((hi2c->XferSize == 0) && (hi2c->XferCount != 0))
 8004d82:	b9f2      	cbnz	r2, 8004dc2 <HAL_I2C_Mem_Read+0x12e>
 8004d84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	b1db      	cbz	r3, 8004dc2 <HAL_I2C_Mem_Read+0x12e>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d8a:	9600      	str	r6, [sp, #0]
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	2180      	movs	r1, #128	; 0x80
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff fd49 	bl	8004828 <I2C_WaitOnFlagUntilTimeout>
 8004d96:	bb10      	cbnz	r0, 8004dde <HAL_I2C_Mem_Read+0x14a>
        {
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2bff      	cmp	r3, #255	; 0xff
 8004d9e:	d905      	bls.n	8004dac <HAL_I2C_Mem_Read+0x118>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da0:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004da2:	9000      	str	r0, [sp, #0]
 8004da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          return HAL_TIMEOUT;
        }
        
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004da8:	8522      	strh	r2, [r4, #40]	; 0x28
 8004daa:	e006      	b.n	8004dba <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004dac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004db2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004db4:	b292      	uxth	r2, r2
 8004db6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	4639      	mov	r1, r7
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f7ff fd21 	bl	8004804 <I2C_TransferConfig>
        }
      }
    }while(hi2c->XferCount > 0);
 8004dc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1c4      	bne.n	8004d54 <HAL_I2C_Mem_Read+0xc0>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dca:	4632      	mov	r2, r6
 8004dcc:	4649      	mov	r1, r9
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f7ff fe1c 	bl	8004a0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dd4:	b128      	cbz	r0, 8004de2 <HAL_I2C_Mem_Read+0x14e>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	f43f af6d 	beq.w	8004cb8 <HAL_I2C_Mem_Read+0x24>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 8004dde:	2003      	movs	r0, #3
 8004de0:	e00e      	b.n	8004e00 <HAL_I2C_Mem_Read+0x16c>
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	2120      	movs	r1, #32
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004de6:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <HAL_I2C_Mem_Read+0x174>)
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de8:	61d9      	str	r1, [r3, #28]
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004dea:	685d      	ldr	r5, [r3, #4]
 8004dec:	402a      	ands	r2, r5
 8004dee:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8004df0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    
    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
    
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004df8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
    
    return HAL_OK;
 8004dfc:	e000      	b.n	8004e00 <HAL_I2C_Mem_Read+0x16c>
  }
  else
  {
    return HAL_BUSY;
 8004dfe:	2002      	movs	r0, #2
  }
}
 8004e00:	b005      	add	sp, #20
 8004e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e06:	bf00      	nop
 8004e08:	fe00e800 	.word	0xfe00e800

08004e0c <HAL_I2C_GetState>:
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  /* Return I2C handle state */
  return hi2c->State;
 8004e0c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004e10:	4770      	bx	lr

08004e12 <LTDC_SetConfig>:
  * @param  LayerIdx:  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004e16:	6804      	ldr	r4, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e18:	01d2      	lsls	r2, r2, #7
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004e1a:	684f      	ldr	r7, [r1, #4]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004e1c:	f04f 0800 	mov.w	r8, #0
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e20:	f104 0e84 	add.w	lr, r4, #132	; 0x84
  uint32_t tmp = 0;
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8004e24:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e26:	f8d1 c000 	ldr.w	ip, [r1]
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e2a:	eb02 030e 	add.w	r3, r2, lr
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e2e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e32:	6858      	ldr	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e34:	19ee      	adds	r6, r5, r7
 8004e36:	f10c 0501 	add.w	r5, ip, #1
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e3a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004e3e:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e40:	68e0      	ldr	r0, [r4, #12]
 8004e42:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8004e46:	4428      	add	r0, r5

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8004e48:	68cd      	ldr	r5, [r1, #12]
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8004e4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004e4e:	6058      	str	r0, [r3, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8004e50:	68e0      	ldr	r0, [r4, #12]
 8004e52:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8004e56:	1946      	adds	r6, r0, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e58:	6898      	ldr	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004e5a:	688d      	ldr	r5, [r1, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004e5c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8004e60:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004e62:	1c68      	adds	r0, r5, #1
 8004e64:	68e4      	ldr	r4, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8004e66:	698d      	ldr	r5, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004e68:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8004e6c:	4420      	add	r0, r4
 8004e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e72:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8004e74:	6098      	str	r0, [r3, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004e76:	6918      	ldr	r0, [r3, #16]
 8004e78:	f020 0007 	bic.w	r0, r0, #7
 8004e7c:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e7e:	611e      	str	r6, [r3, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004e80:	6998      	ldr	r0, [r3, #24]
  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8004e82:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8004e86:	f891 9032 	ldrb.w	r9, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004e8a:	f8c3 8018 	str.w	r8, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8004e8e:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8004e92:	ea40 6505 	orr.w	r5, r0, r5, lsl #24
 8004e96:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 8004e9a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8004e9e:	619c      	str	r4, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ea0:	6958      	ldr	r0, [r3, #20]
 8004ea2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8004ea6:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ea8:	6948      	ldr	r0, [r1, #20]
 8004eaa:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004eac:	69d8      	ldr	r0, [r3, #28]
 8004eae:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8004eb2:	f020 0007 	bic.w	r0, r0, #7
 8004eb6:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004eb8:	69cd      	ldr	r5, [r1, #28]
 8004eba:	6a0c      	ldr	r4, [r1, #32]
 8004ebc:	432c      	orrs	r4, r5
 8004ebe:	61dc      	str	r4, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ec0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ec2:	6a48      	ldr	r0, [r1, #36]	; 0x24
  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004ec4:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004ec8:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004eca:	b14e      	cbz	r6, 8004ee0 <LTDC_SetConfig+0xce>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ecc:	2e01      	cmp	r6, #1
 8004ece:	d009      	beq.n	8004ee4 <LTDC_SetConfig+0xd2>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ed0:	1eb0      	subs	r0, r6, #2
 8004ed2:	2802      	cmp	r0, #2
 8004ed4:	d908      	bls.n	8004ee8 <LTDC_SetConfig+0xd6>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ed6:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8004ed8:	bf0c      	ite	eq
 8004eda:	2002      	moveq	r0, #2
 8004edc:	2001      	movne	r0, #1
 8004ede:	e004      	b.n	8004eea <LTDC_SetConfig+0xd8>
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
  {
    tmp = 4;
 8004ee0:	2004      	movs	r0, #4
 8004ee2:	e002      	b.n	8004eea <LTDC_SetConfig+0xd8>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
  {
    tmp = 3;
 8004ee4:	2003      	movs	r0, #3
 8004ee6:	e000      	b.n	8004eea <LTDC_SetConfig+0xd8>
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2;
 8004ee8:	2002      	movs	r0, #2
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004eea:	6adc      	ldr	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004eec:	ebcc 0707 	rsb	r7, ip, r7
  {
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ef0:	f004 24e0 	and.w	r4, r4, #3758153728	; 0xe000e000
 8004ef4:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004ef6:	6a8c      	ldr	r4, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004ef8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    tmp = 1;
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8004efa:	4344      	muls	r4, r0
 8004efc:	4378      	muls	r0, r7
 8004efe:	3003      	adds	r0, #3
 8004f00:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8004f04:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004f06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f08:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8004f0c:	f020 0007 	bic.w	r0, r0, #7
 8004f10:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f12:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f14:	f852 300e 	ldr.w	r3, [r2, lr]
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	f842 300e 	str.w	r3, [r2, lr]
 8004f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004f24 <HAL_LTDC_Init>:
  * @param  hltdc: pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004f24:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8004f26:	4604      	mov	r4, r0
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d06a      	beq.n	8005002 <HAL_LTDC_Init+0xde>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8004f2c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004f30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f34:	b91b      	cbnz	r3, 8004f3e <HAL_LTDC_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004f36:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004f3a:	f009 fc8d 	bl	800e858 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004f4c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004f4e:	6862      	ldr	r2, [r4, #4]
 8004f50:	6999      	ldr	r1, [r3, #24]
 8004f52:	4311      	orrs	r1, r2
 8004f54:	68a2      	ldr	r2, [r4, #8]
 8004f56:	4311      	orrs	r1, r2
 8004f58:	68e2      	ldr	r2, [r4, #12]
 8004f5a:	4311      	orrs	r1, r2
 8004f5c:	6922      	ldr	r2, [r4, #16]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	619a      	str	r2, [r3, #24]
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f62:	4a29      	ldr	r2, [pc, #164]	; (8005008 <HAL_LTDC_Init+0xe4>)
 8004f64:	6899      	ldr	r1, [r3, #8]
 8004f66:	400a      	ands	r2, r1
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f68:	6961      	ldr	r1, [r4, #20]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004f6a:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f6c:	69a2      	ldr	r2, [r4, #24]
 8004f6e:	6898      	ldr	r0, [r3, #8]
 8004f70:	4302      	orrs	r2, r0
 8004f72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004f76:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f78:	4a23      	ldr	r2, [pc, #140]	; (8005008 <HAL_LTDC_Init+0xe4>)
 8004f7a:	68d9      	ldr	r1, [r3, #12]
 8004f7c:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f7e:	69e1      	ldr	r1, [r4, #28]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
  tmp = (hltdc->Init.HorizontalSync << 16);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f80:	60da      	str	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f82:	6a22      	ldr	r2, [r4, #32]
 8004f84:	68d8      	ldr	r0, [r3, #12]
 8004f86:	4302      	orrs	r2, r0
 8004f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004f8c:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f8e:	4a1e      	ldr	r2, [pc, #120]	; (8005008 <HAL_LTDC_Init+0xe4>)
 8004f90:	6919      	ldr	r1, [r3, #16]
 8004f92:	400a      	ands	r2, r1
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16);
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f96:	611a      	str	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004f98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004f9a:	6918      	ldr	r0, [r3, #16]
 8004f9c:	4302      	orrs	r2, r0
 8004f9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004fa2:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_LTDC_Init+0xe4>)
 8004fa6:	6959      	ldr	r1, [r3, #20]
 8004fa8:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004faa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004fac:	615a      	str	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004fae:	6958      	ldr	r0, [r3, #20]
 8004fb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fb2:	4302      	orrs	r2, r0
 8004fb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004fb8:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004fba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8004fbc:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004fc0:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16);
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8004fc4:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004fc8:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004fca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fcc:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 8004fd0:	4329      	orrs	r1, r5
 8004fd2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8004fd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004fda:	2000      	movs	r0, #0

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8004fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe0:	f042 0204 	orr.w	r2, r2, #4
 8004fe4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8004fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe8:	f042 0202 	orr.w	r2, r2, #2
 8004fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ff6:	2301      	movs	r3, #1

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004ff8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ffc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
 8005000:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t tmp = 0, tmp1 = 0;

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
  {
    return HAL_ERROR;
 8005002:	2001      	movs	r0, #1

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;

  return HAL_OK;
}
 8005004:	bd38      	pop	{r3, r4, r5, pc}
 8005006:	bf00      	nop
 8005008:	f000f800 	.word	0xf000f800

0800500c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Process locked */
  __HAL_LOCK(hltdc);
 800500e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8005012:	4606      	mov	r6, r0
 8005014:	468e      	mov	lr, r1
 8005016:	4694      	mov	ip, r2
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005018:	2b01      	cmp	r3, #1
 800501a:	f04f 0002 	mov.w	r0, #2
 800501e:	d01d      	beq.n	800505c <HAL_LTDC_ConfigLayer+0x50>
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005020:	2434      	movs	r4, #52	; 0x34
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005022:	2701      	movs	r7, #1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005024:	460d      	mov	r5, r1
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005026:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 800502a:	fb04 6402 	mla	r4, r4, r2, r6
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
  /* Process locked */
  __HAL_LOCK(hltdc);
 800502e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005032:	3438      	adds	r4, #56	; 0x38
 8005034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800503a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800503c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800503e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005040:	682b      	ldr	r3, [r5, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005042:	4630      	mov	r0, r6
 8005044:	4662      	mov	r2, ip
 8005046:	4671      	mov	r1, lr
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005048:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800504a:	f7ff fee2 	bl	8004e12 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800504e:	6833      	ldr	r3, [r6, #0]

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005050:	2000      	movs	r0, #0

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005052:	625f      	str	r7, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005054:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005058:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0

  return HAL_OK;
}
 800505c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800505e <HAL_LTDC_GetState>:
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
  return hltdc->State;
 800505e:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8005062:	4770      	bx	lr

08005064 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005064:	6803      	ldr	r3, [r0, #0]
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005068:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800506a:	07d8      	lsls	r0, r3, #31
 800506c:	d403      	bmi.n	8005076 <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	0799      	lsls	r1, r3, #30
 8005072:	d452      	bmi.n	800511a <HAL_RCC_OscConfig+0xb6>
 8005074:	e0a5      	b.n	80051c2 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005076:	4b96      	ldr	r3, [pc, #600]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	f002 020c 	and.w	r2, r2, #12
 800507e:	2a04      	cmp	r2, #4
 8005080:	d007      	beq.n	8005092 <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	f002 020c 	and.w	r2, r2, #12
 8005088:	2a08      	cmp	r2, #8
 800508a:	d10b      	bne.n	80050a4 <HAL_RCC_OscConfig+0x40>
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	025a      	lsls	r2, r3, #9
 8005090:	d508      	bpl.n	80050a4 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005092:	4b8f      	ldr	r3, [pc, #572]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	039b      	lsls	r3, r3, #14
 8005098:	d5e9      	bpl.n	800506e <HAL_RCC_OscConfig+0xa>
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e6      	bne.n	800506e <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 80050a0:	2001      	movs	r0, #1
 80050a2:	e174      	b.n	800538e <HAL_RCC_OscConfig+0x32a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050a4:	6863      	ldr	r3, [r4, #4]
 80050a6:	4d8a      	ldr	r5, [pc, #552]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80050a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ac:	d013      	beq.n	80050d6 <HAL_RCC_OscConfig+0x72>
 80050ae:	b95b      	cbnz	r3, 80050c8 <HAL_RCC_OscConfig+0x64>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050be:	602b      	str	r3, [r5, #0]
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fe fa5e 	bl	8003580 <HAL_GetTick>
 80050c4:	4606      	mov	r6, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c6:	e024      	b.n	8005112 <HAL_RCC_OscConfig+0xae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	d106      	bne.n	80050de <HAL_RCC_OscConfig+0x7a>
 80050d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050d4:	602b      	str	r3, [r5, #0]
 80050d6:	682b      	ldr	r3, [r5, #0]
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050dc:	e005      	b.n	80050ea <HAL_RCC_OscConfig+0x86>
 80050de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ea:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fe fa48 	bl	8003580 <HAL_GetTick>
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f0:	4d77      	ldr	r5, [pc, #476]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f2:	4606      	mov	r6, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	039f      	lsls	r7, r3, #14
 80050f8:	d4b9      	bmi.n	800506e <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050fa:	f7fe fa41 	bl	8003580 <HAL_GetTick>
 80050fe:	1b80      	subs	r0, r0, r6
 8005100:	2864      	cmp	r0, #100	; 0x64
 8005102:	d9f7      	bls.n	80050f4 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 8005104:	2003      	movs	r0, #3
 8005106:	e142      	b.n	800538e <HAL_RCC_OscConfig+0x32a>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005108:	f7fe fa3a 	bl	8003580 <HAL_GetTick>
 800510c:	1b80      	subs	r0, r0, r6
 800510e:	2864      	cmp	r0, #100	; 0x64
 8005110:	d8f8      	bhi.n	8005104 <HAL_RCC_OscConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005112:	682b      	ldr	r3, [r5, #0]
 8005114:	0398      	lsls	r0, r3, #14
 8005116:	d4f7      	bmi.n	8005108 <HAL_RCC_OscConfig+0xa4>
 8005118:	e7a9      	b.n	800506e <HAL_RCC_OscConfig+0xa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800511a:	4b6d      	ldr	r3, [pc, #436]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	f012 0f0c 	tst.w	r2, #12
 8005122:	d007      	beq.n	8005134 <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	f002 020c 	and.w	r2, r2, #12
 800512a:	2a08      	cmp	r2, #8
 800512c:	d117      	bne.n	800515e <HAL_RCC_OscConfig+0xfa>
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0259      	lsls	r1, r3, #9
 8005132:	d414      	bmi.n	800515e <HAL_RCC_OscConfig+0xfa>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005134:	4b66      	ldr	r3, [pc, #408]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	0792      	lsls	r2, r2, #30
 800513a:	d502      	bpl.n	8005142 <HAL_RCC_OscConfig+0xde>
 800513c:	68e2      	ldr	r2, [r4, #12]
 800513e:	2a01      	cmp	r2, #1
 8005140:	d1ae      	bne.n	80050a0 <HAL_RCC_OscConfig+0x3c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	21f8      	movs	r1, #248	; 0xf8
 8005146:	fa91 f1a1 	rbit	r1, r1
 800514a:	6920      	ldr	r0, [r4, #16]
 800514c:	fab1 f181 	clz	r1, r1
 8005150:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005154:	fa00 f101 	lsl.w	r1, r0, r1
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515c:	e031      	b.n	80051c2 <HAL_RCC_OscConfig+0x15e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	4d5b      	ldr	r5, [pc, #364]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005162:	b1f3      	cbz	r3, 80051a2 <HAL_RCC_OscConfig+0x13e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fe fa08 	bl	8003580 <HAL_GetTick>
 8005170:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005172:	682b      	ldr	r3, [r5, #0]
 8005174:	4856      	ldr	r0, [pc, #344]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005176:	079b      	lsls	r3, r3, #30
 8005178:	d405      	bmi.n	8005186 <HAL_RCC_OscConfig+0x122>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517a:	f7fe fa01 	bl	8003580 <HAL_GetTick>
 800517e:	1b80      	subs	r0, r0, r6
 8005180:	2802      	cmp	r0, #2
 8005182:	d9f6      	bls.n	8005172 <HAL_RCC_OscConfig+0x10e>
 8005184:	e7be      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005186:	6803      	ldr	r3, [r0, #0]
 8005188:	22f8      	movs	r2, #248	; 0xf8
 800518a:	fa92 f2a2 	rbit	r2, r2
 800518e:	6921      	ldr	r1, [r4, #16]
 8005190:	fab2 f282 	clz	r2, r2
 8005194:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005198:	fa01 f202 	lsl.w	r2, r1, r2
 800519c:	4313      	orrs	r3, r2
 800519e:	6003      	str	r3, [r0, #0]
 80051a0:	e00f      	b.n	80051c2 <HAL_RCC_OscConfig+0x15e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a2:	682b      	ldr	r3, [r5, #0]
 80051a4:	f023 0301 	bic.w	r3, r3, #1
 80051a8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051aa:	f7fe f9e9 	bl	8003580 <HAL_GetTick>
 80051ae:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	079f      	lsls	r7, r3, #30
 80051b4:	d505      	bpl.n	80051c2 <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fe f9e3 	bl	8003580 <HAL_GetTick>
 80051ba:	1b80      	subs	r0, r0, r6
 80051bc:	2802      	cmp	r0, #2
 80051be:	d9f7      	bls.n	80051b0 <HAL_RCC_OscConfig+0x14c>
 80051c0:	e7a0      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	071e      	lsls	r6, r3, #28
 80051c6:	d403      	bmi.n	80051d0 <HAL_RCC_OscConfig+0x16c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	075d      	lsls	r5, r3, #29
 80051cc:	d549      	bpl.n	8005262 <HAL_RCC_OscConfig+0x1fe>
 80051ce:	e022      	b.n	8005216 <HAL_RCC_OscConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051d0:	6963      	ldr	r3, [r4, #20]
 80051d2:	4d3f      	ldr	r5, [pc, #252]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 80051d4:	b17b      	cbz	r3, 80051f6 <HAL_RCC_OscConfig+0x192>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051de:	f7fe f9cf 	bl	8003580 <HAL_GetTick>
 80051e2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80051e6:	0798      	lsls	r0, r3, #30
 80051e8:	d4ee      	bmi.n	80051c8 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ea:	f7fe f9c9 	bl	8003580 <HAL_GetTick>
 80051ee:	1b80      	subs	r0, r0, r6
 80051f0:	2802      	cmp	r0, #2
 80051f2:	d9f7      	bls.n	80051e4 <HAL_RCC_OscConfig+0x180>
 80051f4:	e786      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	676b      	str	r3, [r5, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fe:	f7fe f9bf 	bl	8003580 <HAL_GetTick>
 8005202:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005204:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005206:	0799      	lsls	r1, r3, #30
 8005208:	d5de      	bpl.n	80051c8 <HAL_RCC_OscConfig+0x164>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800520a:	f7fe f9b9 	bl	8003580 <HAL_GetTick>
 800520e:	1b80      	subs	r0, r0, r6
 8005210:	2802      	cmp	r0, #2
 8005212:	d9f7      	bls.n	8005204 <HAL_RCC_OscConfig+0x1a0>
 8005214:	e776      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005216:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005218:	4d2e      	ldr	r5, [pc, #184]	; (80052d4 <HAL_RCC_OscConfig+0x270>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800521c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005228:	9301      	str	r3, [sp, #4]
 800522a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005232:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005234:	f7fe f9a4 	bl	8003580 <HAL_GetTick>
 8005238:	4606      	mov	r6, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800523a:	682b      	ldr	r3, [r5, #0]
 800523c:	05da      	lsls	r2, r3, #23
 800523e:	d514      	bpl.n	800526a <HAL_RCC_OscConfig+0x206>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005240:	68a3      	ldr	r3, [r4, #8]
 8005242:	4d23      	ldr	r5, [pc, #140]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
 8005244:	2b01      	cmp	r3, #1
 8005246:	d116      	bne.n	8005276 <HAL_RCC_OscConfig+0x212>
 8005248:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f241 3588 	movw	r5, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fe f994 	bl	8003580 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005258:	4e1d      	ldr	r6, [pc, #116]	; (80052d0 <HAL_RCC_OscConfig+0x26c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800525a:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800525e:	079b      	lsls	r3, r3, #30
 8005260:	d526      	bpl.n	80052b0 <HAL_RCC_OscConfig+0x24c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005262:	69a2      	ldr	r2, [r4, #24]
 8005264:	2a00      	cmp	r2, #0
 8005266:	d137      	bne.n	80052d8 <HAL_RCC_OscConfig+0x274>
 8005268:	e077      	b.n	800535a <HAL_RCC_OscConfig+0x2f6>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800526a:	f7fe f989 	bl	8003580 <HAL_GetTick>
 800526e:	1b80      	subs	r0, r0, r6
 8005270:	2864      	cmp	r0, #100	; 0x64
 8005272:	d9e2      	bls.n	800523a <HAL_RCC_OscConfig+0x1d6>
 8005274:	e746      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005276:	b96b      	cbnz	r3, 8005294 <HAL_RCC_OscConfig+0x230>
 8005278:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800527a:	f241 3788 	movw	r7, #5000	; 0x1388
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	672b      	str	r3, [r5, #112]	; 0x70
 8005284:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005286:	f023 0304 	bic.w	r3, r3, #4
 800528a:	672b      	str	r3, [r5, #112]	; 0x70
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800528c:	f7fe f978 	bl	8003580 <HAL_GetTick>
 8005290:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005292:	e019      	b.n	80052c8 <HAL_RCC_OscConfig+0x264>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005294:	2b05      	cmp	r3, #5
 8005296:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005298:	d103      	bne.n	80052a2 <HAL_RCC_OscConfig+0x23e>
 800529a:	f043 0304 	orr.w	r3, r3, #4
 800529e:	672b      	str	r3, [r5, #112]	; 0x70
 80052a0:	e7d2      	b.n	8005248 <HAL_RCC_OscConfig+0x1e4>
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	672b      	str	r3, [r5, #112]	; 0x70
 80052a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80052aa:	f023 0304 	bic.w	r3, r3, #4
 80052ae:	e7ce      	b.n	800524e <HAL_RCC_OscConfig+0x1ea>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f7fe f966 	bl	8003580 <HAL_GetTick>
 80052b4:	1bc0      	subs	r0, r0, r7
 80052b6:	42a8      	cmp	r0, r5
 80052b8:	d9d0      	bls.n	800525c <HAL_RCC_OscConfig+0x1f8>
 80052ba:	e723      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052bc:	f7fe f960 	bl	8003580 <HAL_GetTick>
 80052c0:	1b80      	subs	r0, r0, r6
 80052c2:	42b8      	cmp	r0, r7
 80052c4:	f63f af1e 	bhi.w	8005104 <HAL_RCC_OscConfig+0xa0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80052ca:	0798      	lsls	r0, r3, #30
 80052cc:	d4f6      	bmi.n	80052bc <HAL_RCC_OscConfig+0x258>
 80052ce:	e7c8      	b.n	8005262 <HAL_RCC_OscConfig+0x1fe>
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052d8:	4d2e      	ldr	r5, [pc, #184]	; (8005394 <HAL_RCC_OscConfig+0x330>)
 80052da:	68ab      	ldr	r3, [r5, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	f43f aedd 	beq.w	80050a0 <HAL_RCC_OscConfig+0x3c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	682b      	ldr	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052e8:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ee:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f0:	d141      	bne.n	8005376 <HAL_RCC_OscConfig+0x312>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fe f945 	bl	8003580 <HAL_GetTick>
 80052f6:	4607      	mov	r7, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	4e26      	ldr	r6, [pc, #152]	; (8005394 <HAL_RCC_OscConfig+0x330>)
 80052fc:	0199      	lsls	r1, r3, #6
 80052fe:	d42e      	bmi.n	800535e <HAL_RCC_OscConfig+0x2fa>
 8005300:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8005304:	fa92 f2a2 	rbit	r2, r2
 8005308:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800530c:	fab2 f782 	clz	r7, r2
 8005310:	fa93 f3a3 	rbit	r3, r3
 8005314:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005318:	fab3 f583 	clz	r5, r3
 800531c:	fa92 f2a2 	rbit	r2, r2
 8005320:	69e0      	ldr	r0, [r4, #28]
 8005322:	fab2 f182 	clz	r1, r2
 8005326:	6a23      	ldr	r3, [r4, #32]
 8005328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800532a:	4303      	orrs	r3, r0
 800532c:	40ba      	lsls	r2, r7
 800532e:	ea43 0002 	orr.w	r0, r3, r2
 8005332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005334:	085a      	lsrs	r2, r3, #1
 8005336:	3a01      	subs	r2, #1
 8005338:	fa02 f305 	lsl.w	r3, r2, r5
 800533c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800533e:	4303      	orrs	r3, r0
 8005340:	408a      	lsls	r2, r1
 8005342:	4313      	orrs	r3, r2
 8005344:	6073      	str	r3, [r6, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1) -1) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005346:	6833      	ldr	r3, [r6, #0]
 8005348:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534c:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534e:	f7fe f917 	bl	8003580 <HAL_GetTick>
 8005352:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005354:	6833      	ldr	r3, [r6, #0]
 8005356:	019a      	lsls	r2, r3, #6
 8005358:	d507      	bpl.n	800536a <HAL_RCC_OscConfig+0x306>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800535a:	2000      	movs	r0, #0
 800535c:	e017      	b.n	800538e <HAL_RCC_OscConfig+0x32a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800535e:	f7fe f90f 	bl	8003580 <HAL_GetTick>
 8005362:	1bc0      	subs	r0, r0, r7
 8005364:	2802      	cmp	r0, #2
 8005366:	d9c7      	bls.n	80052f8 <HAL_RCC_OscConfig+0x294>
 8005368:	e6cc      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536a:	f7fe f909 	bl	8003580 <HAL_GetTick>
 800536e:	1b00      	subs	r0, r0, r4
 8005370:	2802      	cmp	r0, #2
 8005372:	d9ef      	bls.n	8005354 <HAL_RCC_OscConfig+0x2f0>
 8005374:	e6c6      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7fe f903 	bl	8003580 <HAL_GetTick>
 800537a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	019b      	lsls	r3, r3, #6
 8005380:	d5eb      	bpl.n	800535a <HAL_RCC_OscConfig+0x2f6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005382:	f7fe f8fd 	bl	8003580 <HAL_GetTick>
 8005386:	1b00      	subs	r0, r0, r4
 8005388:	2802      	cmp	r0, #2
 800538a:	d9f7      	bls.n	800537c <HAL_RCC_OscConfig+0x318>
 800538c:	e6ba      	b.n	8005104 <HAL_RCC_OscConfig+0xa0>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800538e:	b003      	add	sp, #12
 8005390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005392:	bf00      	nop
 8005394:	40023800 	.word	0x40023800

08005398 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005398:	491b      	ldr	r1, [pc, #108]	; (8005408 <HAL_RCC_GetSysClockFreq+0x70>)
 800539a:	688b      	ldr	r3, [r1, #8]
 800539c:	f003 030c 	and.w	r3, r3, #12
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d02c      	beq.n	80053fe <HAL_RCC_GetSysClockFreq+0x66>
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d12c      	bne.n	8005402 <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a8:	6848      	ldr	r0, [r1, #4]
 80053aa:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053ae:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053b4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80053b8:	684b      	ldr	r3, [r1, #4]
 80053ba:	fa92 f2a2 	rbit	r2, r2
 80053be:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80053c2:	fab2 f282 	clz	r2, r2
 80053c6:	ea01 0103 	and.w	r1, r1, r3
 80053ca:	fa21 f102 	lsr.w	r1, r1, r2
 80053ce:	bf14      	ite	ne
 80053d0:	4a0e      	ldrne	r2, [pc, #56]	; (800540c <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80053d2:	4a0f      	ldreq	r2, [pc, #60]	; (8005410 <HAL_RCC_GetSysClockFreq+0x78>)
 80053d4:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80053d8:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80053da:	fb00 f301 	mul.w	r3, r0, r1
 80053de:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80053e2:	6852      	ldr	r2, [r2, #4]
 80053e4:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80053e8:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 80053ec:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80053f0:	fa22 f000 	lsr.w	r0, r2, r0
 80053f4:	3001      	adds	r0, #1
 80053f6:	0040      	lsls	r0, r0, #1
 80053f8:	fbb3 f0f0 	udiv	r0, r3, r0
 80053fc:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053fe:	4803      	ldr	r0, [pc, #12]	; (800540c <HAL_RCC_GetSysClockFreq+0x74>)
 8005400:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005402:	4803      	ldr	r0, [pc, #12]	; (8005410 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40023800 	.word	0x40023800
 800540c:	017d7840 	.word	0x017d7840
 8005410:	00f42400 	.word	0x00f42400

08005414 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005414:	4a50      	ldr	r2, [pc, #320]	; (8005558 <HAL_RCC_ClockConfig+0x144>)
 8005416:	6813      	ldr	r3, [r2, #0]
 8005418:	f003 030f 	and.w	r3, r3, #15
 800541c:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800541e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005422:	4604      	mov	r4, r0
 8005424:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
  (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005426:	d30a      	bcc.n	800543e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	0788      	lsls	r0, r1, #30
 800542c:	d514      	bpl.n	8005458 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542e:	484b      	ldr	r0, [pc, #300]	; (800555c <HAL_RCC_ClockConfig+0x148>)
 8005430:	6883      	ldr	r3, [r0, #8]
 8005432:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005436:	68a3      	ldr	r3, [r4, #8]
 8005438:	4313      	orrs	r3, r2
 800543a:	6083      	str	r3, [r0, #8]
 800543c:	e00c      	b.n	8005458 <HAL_RCC_ClockConfig+0x44>
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543e:	6813      	ldr	r3, [r2, #0]
 8005440:	f023 030f 	bic.w	r3, r3, #15
 8005444:	430b      	orrs	r3, r1
 8005446:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	4299      	cmp	r1, r3
 8005450:	d0ea      	beq.n	8005428 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8005452:	2001      	movs	r0, #1
 8005454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005458:	07c9      	lsls	r1, r1, #31
 800545a:	d406      	bmi.n	800546a <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800545c:	4a3e      	ldr	r2, [pc, #248]	; (8005558 <HAL_RCC_ClockConfig+0x144>)
 800545e:	6813      	ldr	r3, [r2, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	429d      	cmp	r5, r3
 8005466:	d342      	bcc.n	80054ee <HAL_RCC_ClockConfig+0xda>
 8005468:	e04b      	b.n	8005502 <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546a:	6862      	ldr	r2, [r4, #4]
 800546c:	4b3b      	ldr	r3, [pc, #236]	; (800555c <HAL_RCC_ClockConfig+0x148>)
 800546e:	2a01      	cmp	r2, #1
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005470:	6819      	ldr	r1, [r3, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005472:	d102      	bne.n	800547a <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005474:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8005478:	e006      	b.n	8005488 <HAL_RCC_ClockConfig+0x74>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800547a:	2a02      	cmp	r2, #2
 800547c:	d102      	bne.n	8005484 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8005482:	e001      	b.n	8005488 <HAL_RCC_ClockConfig+0x74>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005484:	f011 0f02 	tst.w	r1, #2
 8005488:	d0e3      	beq.n	8005452 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800548a:	6899      	ldr	r1, [r3, #8]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800548c:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005490:	4f32      	ldr	r7, [pc, #200]	; (800555c <HAL_RCC_ClockConfig+0x148>)
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005492:	f021 0103 	bic.w	r1, r1, #3
 8005496:	430a      	orrs	r2, r1
 8005498:	609a      	str	r2, [r3, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800549a:	f7fe f871 	bl	8003580 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800549e:	6863      	ldr	r3, [r4, #4]
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a0:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d10c      	bne.n	80054c0 <HAL_RCC_ClockConfig+0xac>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f003 030c 	and.w	r3, r3, #12
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d0d5      	beq.n	800545c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b0:	f7fe f866 	bl	8003580 <HAL_GetTick>
 80054b4:	1b80      	subs	r0, r0, r6
 80054b6:	4540      	cmp	r0, r8
 80054b8:	d9f5      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x92>
        {
          return HAL_TIMEOUT;
 80054ba:	2003      	movs	r0, #3
 80054bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d10f      	bne.n	80054e4 <HAL_RCC_ClockConfig+0xd0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d0c6      	beq.n	800545c <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ce:	f7fe f857 	bl	8003580 <HAL_GetTick>
 80054d2:	1b80      	subs	r0, r0, r6
 80054d4:	4540      	cmp	r0, r8
 80054d6:	d9f5      	bls.n	80054c4 <HAL_RCC_ClockConfig+0xb0>
 80054d8:	e7ef      	b.n	80054ba <HAL_RCC_ClockConfig+0xa6>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054da:	f7fe f851 	bl	8003580 <HAL_GetTick>
 80054de:	1b80      	subs	r0, r0, r6
 80054e0:	4540      	cmp	r0, r8
 80054e2:	d8ea      	bhi.n	80054ba <HAL_RCC_ClockConfig+0xa6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f013 0f0c 	tst.w	r3, #12
 80054ea:	d1f6      	bne.n	80054da <HAL_RCC_ClockConfig+0xc6>
 80054ec:	e7b6      	b.n	800545c <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	6813      	ldr	r3, [r2, #0]
 80054f0:	f023 030f 	bic.w	r3, r3, #15
 80054f4:	432b      	orrs	r3, r5
 80054f6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054f8:	6813      	ldr	r3, [r2, #0]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	429d      	cmp	r5, r3
 8005500:	d1a7      	bne.n	8005452 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005502:	6821      	ldr	r1, [r4, #0]
 8005504:	074a      	lsls	r2, r1, #29
 8005506:	d506      	bpl.n	8005516 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005508:	4814      	ldr	r0, [pc, #80]	; (800555c <HAL_RCC_ClockConfig+0x148>)
 800550a:	6883      	ldr	r3, [r0, #8]
 800550c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005510:	68e3      	ldr	r3, [r4, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005516:	070b      	lsls	r3, r1, #28
 8005518:	d507      	bpl.n	800552a <HAL_RCC_ClockConfig+0x116>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800551a:	4a10      	ldr	r2, [pc, #64]	; (800555c <HAL_RCC_ClockConfig+0x148>)
 800551c:	6921      	ldr	r1, [r4, #16]
 800551e:	6893      	ldr	r3, [r2, #8]
 8005520:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005524:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005528:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800552a:	f7ff ff35 	bl	8005398 <HAL_RCC_GetSysClockFreq>
 800552e:	4b0b      	ldr	r3, [pc, #44]	; (800555c <HAL_RCC_ClockConfig+0x148>)
 8005530:	22f0      	movs	r2, #240	; 0xf0
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	fa92 f2a2 	rbit	r2, r2
 8005538:	fab2 f282 	clz	r2, r2
 800553c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005540:	40d3      	lsrs	r3, r2
 8005542:	4a07      	ldr	r2, [pc, #28]	; (8005560 <HAL_RCC_ClockConfig+0x14c>)
 8005544:	5cd3      	ldrb	r3, [r2, r3]
 8005546:	40d8      	lsrs	r0, r3
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <HAL_RCC_ClockConfig+0x150>)
 800554a:	6018      	str	r0, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800554c:	2000      	movs	r0, #0
 800554e:	f009 facb 	bl	800eae8 <HAL_InitTick>
  
  return HAL_OK;
 8005552:	2000      	movs	r0, #0
}
 8005554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005558:	40023c00 	.word	0x40023c00
 800555c:	40023800 	.word	0x40023800
 8005560:	0802c9a8 	.word	0x0802c9a8
 8005564:	20010044 	.word	0x20010044

08005568 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005568:	4b01      	ldr	r3, [pc, #4]	; (8005570 <HAL_RCC_GetHCLKFreq+0x8>)
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20010044 	.word	0x20010044

08005574 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005576:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	fa92 f2a2 	rbit	r2, r2
 8005580:	fab2 f282 	clz	r2, r2
 8005584:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005588:	40d3      	lsrs	r3, r2
 800558a:	4a04      	ldr	r2, [pc, #16]	; (800559c <HAL_RCC_GetPCLK2Freq+0x28>)
 800558c:	5cd3      	ldrb	r3, [r2, r3]
 800558e:	4a04      	ldr	r2, [pc, #16]	; (80055a0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8005590:	6810      	ldr	r0, [r2, #0]
} 
 8005592:	40d8      	lsrs	r0, r3
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800
 800559c:	0802c9b8 	.word	0x0802c9b8
 80055a0:	20010044 	.word	0x20010044

080055a4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055a4:	230f      	movs	r3, #15
 80055a6:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055a8:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_GetClockConfig+0x34>)
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	f002 0203 	and.w	r2, r2, #3
 80055b0:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80055b8:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80055c0:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	08db      	lsrs	r3, r3, #3
 80055c6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80055ca:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80055cc:	4b03      	ldr	r3, [pc, #12]	; (80055dc <HAL_RCC_GetClockConfig+0x38>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	600b      	str	r3, [r1, #0]
 80055d6:	4770      	bx	lr
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40023c00 	.word	0x40023c00

080055e0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055e0:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055e6:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055ea:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055ec:	d00b      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055ee:	4ab6      	ldr	r2, [pc, #728]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80055f0:	6891      	ldr	r1, [r2, #8]
 80055f2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80055f6:	6091      	str	r1, [r2, #8]
 80055f8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80055fa:	6891      	ldr	r1, [r2, #8]
 80055fc:	4331      	orrs	r1, r6
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
 80055fe:	fab6 f686 	clz	r6, r6
 8005602:	0976      	lsrs	r6, r6, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005604:	6091      	str	r1, [r2, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005606:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800560a:	d012      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800560c:	49ae      	ldr	r1, [pc, #696]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800560e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005610:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005614:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005618:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 800561c:	bf08      	it	eq
 800561e:	2601      	moveq	r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005620:	ea42 0205 	orr.w	r2, r2, r5
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 8005624:	bf16      	itet	ne
 8005626:	fab5 f585 	clzne	r5, r5
 800562a:	2500      	moveq	r5, #0
 800562c:	096d      	lsrne	r5, r5, #5
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800562e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005632:	02d8      	lsls	r0, r3, #11
 8005634:	d511      	bpl.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005636:	48a4      	ldr	r0, [pc, #656]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005638:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800563a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800563e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005642:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005646:	ea42 0201 	orr.w	r2, r2, r1
 800564a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800564e:	d003      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 8005650:	2900      	cmp	r1, #0
 8005652:	bf08      	it	eq
 8005654:	2501      	moveq	r5, #1
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 8005658:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 800565a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800565e:	bf18      	it	ne
 8005660:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005662:	0699      	lsls	r1, r3, #26
 8005664:	d55d      	bpl.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005666:	4b98      	ldr	r3, [pc, #608]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005668:	4f98      	ldr	r7, [pc, #608]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800566a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800566c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005682:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005684:	f7fd ff7c 	bl	8003580 <HAL_GetTick>
 8005688:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	05da      	lsls	r2, r3, #23
 800568e:	d407      	bmi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005690:	f7fd ff76 	bl	8003580 <HAL_GetTick>
 8005694:	ebc8 0000 	rsb	r0, r8, r0
 8005698:	2864      	cmp	r0, #100	; 0x64
 800569a:	d9f6      	bls.n	800568a <HAL_RCCEx_PeriphCLKConfig+0xaa>
      {
        return HAL_TIMEOUT;
 800569c:	2003      	movs	r0, #3
 800569e:	e340      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x742>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a0:	4f89      	ldr	r7, [pc, #548]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056a4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80056a8:	d10f      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xea>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80056ac:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80056b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b4:	4b84      	ldr	r3, [pc, #528]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80056b6:	d12b      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80056b8:	6899      	ldr	r1, [r3, #8]
 80056ba:	f421 10f8 	bic.w	r0, r1, #2031616	; 0x1f0000
 80056be:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 80056c2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80056c6:	4301      	orrs	r1, r0
 80056c8:	e025      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x136>
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80056cc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d0ea      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xca>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056e0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80056e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056e8:	673a      	str	r2, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056ea:	673b      	str	r3, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056ee:	07db      	lsls	r3, r3, #31
 80056f0:	d5db      	bpl.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f2:	f7fd ff45 	bl	8003580 <HAL_GetTick>
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fa:	4680      	mov	r8, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fe:	0798      	lsls	r0, r3, #30
 8005700:	d4d3      	bmi.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xca>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005702:	f7fd ff3d 	bl	8003580 <HAL_GetTick>
 8005706:	ebc8 0000 	rsb	r0, r8, r0
 800570a:	4548      	cmp	r0, r9
 800570c:	d9f6      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800570e:	e7c5      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xbc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005710:	6899      	ldr	r1, [r3, #8]
 8005712:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8005716:	6099      	str	r1, [r3, #8]
 8005718:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800571c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800571e:	430a      	orrs	r2, r1
 8005720:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	06d9      	lsls	r1, r3, #27
 8005726:	d50c      	bpl.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005728:	4a67      	ldr	r2, [pc, #412]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800572a:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800572e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005732:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8005736:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800573a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800573c:	4301      	orrs	r1, r0
 800573e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005742:	045a      	lsls	r2, r3, #17
 8005744:	d508      	bpl.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005746:	4860      	ldr	r0, [pc, #384]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005748:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800574c:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8005750:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005752:	430a      	orrs	r2, r1
 8005754:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005758:	041f      	lsls	r7, r3, #16
 800575a:	d508      	bpl.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800575c:	485a      	ldr	r0, [pc, #360]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800575e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005762:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8005766:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8005768:	430a      	orrs	r2, r1
 800576a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800576e:	03d8      	lsls	r0, r3, #15
 8005770:	d508      	bpl.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005772:	4855      	ldr	r0, [pc, #340]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005774:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005778:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 800577c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800577e:	430a      	orrs	r2, r1
 8005780:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005784:	0399      	lsls	r1, r3, #14
 8005786:	d508      	bpl.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005788:	484f      	ldr	r0, [pc, #316]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800578a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800578e:	f422 0140 	bic.w	r1, r2, #12582912	; 0xc00000
 8005792:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8005794:	430a      	orrs	r2, r1
 8005796:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800579a:	065a      	lsls	r2, r3, #25
 800579c:	d508      	bpl.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800579e:	484a      	ldr	r0, [pc, #296]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057a0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057a4:	f022 0103 	bic.w	r1, r2, #3
 80057a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80057aa:	430a      	orrs	r2, r1
 80057ac:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057b0:	061f      	lsls	r7, r3, #24
 80057b2:	d508      	bpl.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057b4:	4844      	ldr	r0, [pc, #272]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057b6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057ba:	f022 010c 	bic.w	r1, r2, #12
 80057be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80057c0:	430a      	orrs	r2, r1
 80057c2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057c6:	05d8      	lsls	r0, r3, #23
 80057c8:	d508      	bpl.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057ca:	483f      	ldr	r0, [pc, #252]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057cc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057d0:	f022 0130 	bic.w	r1, r2, #48	; 0x30
 80057d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80057d6:	430a      	orrs	r2, r1
 80057d8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80057dc:	0599      	lsls	r1, r3, #22
 80057de:	d508      	bpl.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80057e0:	4839      	ldr	r0, [pc, #228]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057e2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057e6:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80057ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80057ec:	430a      	orrs	r2, r1
 80057ee:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057f2:	055a      	lsls	r2, r3, #21
 80057f4:	d508      	bpl.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057f6:	4834      	ldr	r0, [pc, #208]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80057f8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80057fc:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8005800:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005802:	430a      	orrs	r2, r1
 8005804:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005808:	051f      	lsls	r7, r3, #20
 800580a:	d508      	bpl.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800580c:	482e      	ldr	r0, [pc, #184]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800580e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005812:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 8005816:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005818:	430a      	orrs	r2, r1
 800581a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800581e:	04d8      	lsls	r0, r3, #19
 8005820:	d508      	bpl.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005822:	4829      	ldr	r0, [pc, #164]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005824:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005828:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800582c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800582e:	430a      	orrs	r2, r1
 8005830:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005834:	0499      	lsls	r1, r3, #18
 8005836:	d508      	bpl.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005838:	4823      	ldr	r0, [pc, #140]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800583a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800583e:	f422 4140 	bic.w	r1, r2, #49152	; 0xc000
 8005842:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005844:	430a      	orrs	r2, r1
 8005846:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800584a:	025a      	lsls	r2, r3, #9
 800584c:	d508      	bpl.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800584e:	481e      	ldr	r0, [pc, #120]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005850:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005854:	f022 6180 	bic.w	r1, r2, #67108864	; 0x4000000
 8005858:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800585a:	430a      	orrs	r2, r1
 800585c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005860:	029f      	lsls	r7, r3, #10
 8005862:	d50c      	bpl.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005864:	4818      	ldr	r0, [pc, #96]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005866:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005868:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 800586c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005870:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8005874:	bf08      	it	eq
 8005876:	2501      	moveq	r5, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005878:	430a      	orrs	r2, r1
 800587a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 800587e:	f013 0f08 	tst.w	r3, #8
 8005882:	bf18      	it	ne
 8005884:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005886:	0358      	lsls	r0, r3, #13
 8005888:	d508      	bpl.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800588a:	480f      	ldr	r0, [pc, #60]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800588c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8005890:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8005894:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8005896:	430a      	orrs	r2, r1
 8005898:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800589c:	0219      	lsls	r1, r3, #8
 800589e:	d509      	bpl.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058a0:	4809      	ldr	r0, [pc, #36]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80058a2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80058a6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80058aa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80058ae:	430a      	orrs	r2, r1
 80058b0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80058b4:	2e01      	cmp	r6, #1
 80058b6:	d00b      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80058b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058bc:	d008      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058be:	2d01      	cmp	r5, #1
 80058c0:	f040 818c 	bne.w	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80058c4:	e123      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800
 80058cc:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 80058d0:	4ec8      	ldr	r6, [pc, #800]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 80058d2:	6833      	ldr	r3, [r6, #0]
 80058d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058d8:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058da:	f7fd fe51 	bl	8003580 <HAL_GetTick>
 80058de:	4607      	mov	r7, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058e0:	6833      	ldr	r3, [r6, #0]
 80058e2:	f8df e310 	ldr.w	lr, [pc, #784]	; 8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80058e6:	011a      	lsls	r2, r3, #4
 80058e8:	d505      	bpl.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ea:	f7fd fe49 	bl	8003580 <HAL_GetTick>
 80058ee:	1bc0      	subs	r0, r0, r7
 80058f0:	2864      	cmp	r0, #100	; 0x64
 80058f2:	d9f5      	bls.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80058f4:	e6d2      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058f6:	6827      	ldr	r7, [r4, #0]
 80058f8:	07fb      	lsls	r3, r7, #31
 80058fa:	d53c      	bpl.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x396>
 80058fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058fe:	bbd3      	cbnz	r3, 8005976 <HAL_RCCEx_PeriphCLKConfig+0x396>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005900:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8005904:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8005908:	fa98 f9a8 	rbit	r9, r8
 800590c:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 8005910:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005914:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8005918:	fa96 fca6 	rbit	ip, r6
 800591c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8005920:	fabc fc8c 	clz	ip, ip
 8005924:	fa9a faaa 	rbit	sl, sl
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005928:	faba fa8a 	clz	sl, sl
 800592c:	fa98 f8a8 	rbit	r8, r8
 8005930:	fab8 f888 	clz	r8, r8
 8005934:	fa96 f6a6 	rbit	r6, r6
 8005938:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800593c:	fab6 f686 	clz	r6, r6
 8005940:	fa93 f3a3 	rbit	r3, r3
 8005944:	fab3 fb83 	clz	fp, r3
 8005948:	6861      	ldr	r1, [r4, #4]
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8005950:	fa01 f10a 	lsl.w	r1, r1, sl
 8005954:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005958:	fa03 f30b 	lsl.w	r3, r3, fp
 800595c:	fa20 f009 	lsr.w	r0, r0, r9
 8005960:	fa22 f20c 	lsr.w	r2, r2, ip
 8005964:	430b      	orrs	r3, r1
 8005966:	fa00 f108 	lsl.w	r1, r0, r8
 800596a:	4319      	orrs	r1, r3
 800596c:	fa02 f306 	lsl.w	r3, r2, r6
 8005970:	430b      	orrs	r3, r1
 8005972:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005976:	033e      	lsls	r6, r7, #12
 8005978:	d503      	bpl.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800597a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800597c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005980:	d005      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005982:	02f8      	lsls	r0, r7, #11
 8005984:	d549      	bpl.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8005986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800598c:	d145      	bne.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800598e:	f8df e264 	ldr.w	lr, [pc, #612]	; 8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005992:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8005996:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 800599a:	fa98 f9a8 	rbit	r9, r8
 800599e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80059a2:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80059a6:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 80059aa:	fa96 fca6 	rbit	ip, r6
 80059ae:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 80059b2:	fabc fc8c 	clz	ip, ip
 80059b6:	fa9b fbab 	rbit	fp, fp
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80059ba:	fabb fb8b 	clz	fp, fp
 80059be:	fa98 f8a8 	rbit	r8, r8
 80059c2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 80059c6:	fab8 f888 	clz	r8, r8
 80059ca:	fa93 f3a3 	rbit	r3, r3
 80059ce:	fab3 fa83 	clz	sl, r3
 80059d2:	fa96 f6a6 	rbit	r6, r6
 80059d6:	6863      	ldr	r3, [r4, #4]
 80059d8:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80059dc:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80059e0:	fab6 f686 	clz	r6, r6
 80059e4:	fa03 f10b 	lsl.w	r1, r3, fp
 80059e8:	68e3      	ldr	r3, [r4, #12]
 80059ea:	fa20 f009 	lsr.w	r0, r0, r9
 80059ee:	fa22 f20c 	lsr.w	r2, r2, ip
 80059f2:	fa03 f30a 	lsl.w	r3, r3, sl
 80059f6:	430b      	orrs	r3, r1
 80059f8:	fa00 f108 	lsl.w	r1, r0, r8
 80059fc:	4319      	orrs	r1, r3
 80059fe:	fa02 f306 	lsl.w	r3, r2, r6
 8005a02:	430b      	orrs	r3, r1
 8005a04:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8005a08:	f8de 308c 	ldr.w	r3, [lr, #140]	; 0x8c
 8005a0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a0e:	f023 031f 	bic.w	r3, r3, #31
 8005a12:	3a01      	subs	r2, #1
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8ce 308c 	str.w	r3, [lr, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a1a:	01f9      	lsls	r1, r7, #7
 8005a1c:	d53c      	bpl.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005a1e:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005a22:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8005a26:	f8de 0084 	ldr.w	r0, [lr, #132]	; 0x84
 8005a2a:	fa98 f9a8 	rbit	r9, r8
 8005a2e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8005a32:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005a36:	f8de 2084 	ldr.w	r2, [lr, #132]	; 0x84
 8005a3a:	fa96 fca6 	rbit	ip, r6
 8005a3e:	f647 7bc0 	movw	fp, #32704	; 0x7fc0
 8005a42:	fabc fc8c 	clz	ip, ip
 8005a46:	fa9b fbab 	rbit	fp, fp
 8005a4a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a4e:	fabb fb8b 	clz	fp, fp
 8005a52:	fa93 f3a3 	rbit	r3, r3
 8005a56:	fab3 fa83 	clz	sl, r3
 8005a5a:	fa98 f8a8 	rbit	r8, r8
 8005a5e:	fab8 f888 	clz	r8, r8
 8005a62:	fa96 f6a6 	rbit	r6, r6
 8005a66:	6863      	ldr	r3, [r4, #4]
 8005a68:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005a6c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8005a70:	fab6 f686 	clz	r6, r6
 8005a74:	fa03 f10b 	lsl.w	r1, r3, fp
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	fa20 f009 	lsr.w	r0, r0, r9
 8005a7e:	fa22 f20c 	lsr.w	r2, r2, ip
 8005a82:	fa03 f30a 	lsl.w	r3, r3, sl
 8005a86:	430b      	orrs	r3, r1
 8005a88:	fa00 f108 	lsl.w	r1, r0, r8
 8005a8c:	4319      	orrs	r1, r3
 8005a8e:	fa02 f306 	lsl.w	r3, r2, r6
 8005a92:	430b      	orrs	r3, r1
 8005a94:	f8ce 3084 	str.w	r3, [lr, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a98:	01ba      	lsls	r2, r7, #6
 8005a9a:	d526      	bpl.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005a9c:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8005aa0:	fa9e feae 	rbit	lr, lr
 8005aa4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aa8:	fabe fe8e 	clz	lr, lr
 8005aac:	fa90 f0a0 	rbit	r0, r0
 8005ab0:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8005ab4:	fab0 f780 	clz	r7, r0
 8005ab8:	fa92 f2a2 	rbit	r2, r2
 8005abc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005ac0:	fab2 f682 	clz	r6, r2
 8005ac4:	fa93 f3a3 	rbit	r3, r3
 8005ac8:	fab3 f183 	clz	r1, r3
 8005acc:	6920      	ldr	r0, [r4, #16]
 8005ace:	6863      	ldr	r3, [r4, #4]
 8005ad0:	68e2      	ldr	r2, [r4, #12]
 8005ad2:	40b8      	lsls	r0, r7
 8005ad4:	fa03 f30e 	lsl.w	r3, r3, lr
 8005ad8:	40b2      	lsls	r2, r6
 8005ada:	4303      	orrs	r3, r0
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68a3      	ldr	r3, [r4, #8]
 8005ae0:	408b      	lsls	r3, r1
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	4a43      	ldr	r2, [pc, #268]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005ae6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005aea:	4e42      	ldr	r6, [pc, #264]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005af2:	6033      	str	r3, [r6, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005af4:	f7fd fd44 	bl	8003580 <HAL_GetTick>
 8005af8:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005afa:	6833      	ldr	r3, [r6, #0]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	f53f aede 	bmi.w	80058be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b02:	f7fd fd3d 	bl	8003580 <HAL_GetTick>
 8005b06:	1bc0      	subs	r0, r0, r7
 8005b08:	2864      	cmp	r0, #100	; 0x64
 8005b0a:	d9f6      	bls.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b0c:	e5c6      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xbc>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8005b0e:	4d39      	ldr	r5, [pc, #228]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b16:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b18:	f7fd fd32 	bl	8003580 <HAL_GetTick>
 8005b1c:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b1e:	682b      	ldr	r3, [r5, #0]
 8005b20:	009f      	lsls	r7, r3, #2
 8005b22:	d45d      	bmi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b24:	6825      	ldr	r5, [r4, #0]
 8005b26:	032e      	lsls	r6, r5, #12
 8005b28:	d460      	bmi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005b2a:	02e8      	lsls	r0, r5, #11
 8005b2c:	d464      	bmi.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b2e:	02a9      	lsls	r1, r5, #10
 8005b30:	f100 80ad 	bmi.w	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b34:	072a      	lsls	r2, r5, #28
 8005b36:	d545      	bpl.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005b38:	4f2e      	ldr	r7, [pc, #184]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005b3a:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8005b3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005b42:	fa95 fca5 	rbit	ip, r5
 8005b46:	f44f 3640 	mov.w	r6, #196608	; 0x30000
 8005b4a:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005b4e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005b52:	fa96 f8a6 	rbit	r8, r6
 8005b56:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 8005b5a:	fab8 f888 	clz	r8, r8
 8005b5e:	fa99 f9a9 	rbit	r9, r9
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b62:	fab9 f989 	clz	r9, r9
 8005b66:	fa96 f6a6 	rbit	r6, r6
 8005b6a:	fab6 f686 	clz	r6, r6
 8005b6e:	fa95 f5a5 	rbit	r5, r5
 8005b72:	f04f 4ee0 	mov.w	lr, #1879048192	; 0x70000000
 8005b76:	fab5 f585 	clz	r5, r5
 8005b7a:	fa9e feae 	rbit	lr, lr
 8005b7e:	6963      	ldr	r3, [r4, #20]
 8005b80:	fabe fe8e 	clz	lr, lr
 8005b84:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8005b88:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8005b8c:	fa03 f109 	lsl.w	r1, r3, r9
 8005b90:	69e3      	ldr	r3, [r4, #28]
 8005b92:	fa20 f008 	lsr.w	r0, r0, r8
 8005b96:	fa22 f20c 	lsr.w	r2, r2, ip
 8005b9a:	fa03 fe0e 	lsl.w	lr, r3, lr
 8005b9e:	fa02 f305 	lsl.w	r3, r2, r5
 8005ba2:	ea41 0e0e 	orr.w	lr, r1, lr
 8005ba6:	fa00 f106 	lsl.w	r1, r0, r6
 8005baa:	ea4e 0101 	orr.w	r1, lr, r1
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bc4:	4c0b      	ldr	r4, [pc, #44]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x614>)
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bcc:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bce:	f7fd fcd7 	bl	8003580 <HAL_GetTick>
 8005bd2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	f140 809c 	bpl.w	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x734>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e0a0      	b.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x742>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005be0:	f7fd fcce 	bl	8003580 <HAL_GetTick>
 8005be4:	1b80      	subs	r0, r0, r6
 8005be6:	2864      	cmp	r0, #100	; 0x64
 8005be8:	d999      	bls.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 8005bea:	e557      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bee:	b133      	cbz	r3, 8005bfe <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8005bf0:	e79b      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8005bf2:	bf00      	nop
 8005bf4:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d197      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005bfe:	4f4a      	ldr	r7, [pc, #296]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8005c00:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 8005c04:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005c08:	fa9c f9ac 	rbit	r9, ip
 8005c0c:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8005c10:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005c14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005c18:	fa96 fea6 	rbit	lr, r6
 8005c1c:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8005c20:	fabe fe8e 	clz	lr, lr
 8005c24:	fa9a faaa 	rbit	sl, sl
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c28:	faba fa8a 	clz	sl, sl
 8005c2c:	fa9c fcac 	rbit	ip, ip
 8005c30:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 8005c34:	fabc fc8c 	clz	ip, ip
 8005c38:	fa98 f8a8 	rbit	r8, r8
 8005c3c:	fab8 f888 	clz	r8, r8
 8005c40:	fa96 f6a6 	rbit	r6, r6
 8005c44:	69a1      	ldr	r1, [r4, #24]
 8005c46:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8005c4a:	6963      	ldr	r3, [r4, #20]
 8005c4c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8005c50:	fa01 f808 	lsl.w	r8, r1, r8
 8005c54:	fa20 f009 	lsr.w	r0, r0, r9
 8005c58:	fa03 f30a 	lsl.w	r3, r3, sl
 8005c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005c60:	fab6 f686 	clz	r6, r6
 8005c64:	fa00 f10c 	lsl.w	r1, r0, ip
 8005c68:	ea43 0308 	orr.w	r3, r3, r8
 8005c6c:	4319      	orrs	r1, r3
 8005c6e:	fa02 f306 	lsl.w	r3, r2, r6
 8005c72:	430b      	orrs	r3, r1
 8005c74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005c7e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005c82:	3a01      	subs	r2, #1
 8005c84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005c8c:	e74f      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c8e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c94:	f47f af4e 	bne.w	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8005c98:	4f23      	ldr	r7, [pc, #140]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x748>)
 8005c9a:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8005c9e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005ca2:	fa9c f9ac 	rbit	r9, ip
 8005ca6:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8005caa:	fab9 f989 	clz	r9, r9
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8005cae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005cb2:	fa96 fea6 	rbit	lr, r6
 8005cb6:	f647 7ac0 	movw	sl, #32704	; 0x7fc0
 8005cba:	fabe fe8e 	clz	lr, lr
 8005cbe:	fa9a faaa 	rbit	sl, sl
 8005cc2:	f44f 3840 	mov.w	r8, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cc6:	faba fa8a 	clz	sl, sl
 8005cca:	fa98 f8a8 	rbit	r8, r8
 8005cce:	fab8 f888 	clz	r8, r8
 8005cd2:	fa9c fcac 	rbit	ip, ip
 8005cd6:	fabc fc8c 	clz	ip, ip
 8005cda:	fa96 f6a6 	rbit	r6, r6
 8005cde:	6a21      	ldr	r1, [r4, #32]
 8005ce0:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005ce4:	6963      	ldr	r3, [r4, #20]
 8005ce6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8005cea:	fa01 f808 	lsl.w	r8, r1, r8
 8005cee:	fa20 f009 	lsr.w	r0, r0, r9
 8005cf2:	fa03 f30a 	lsl.w	r3, r3, sl
 8005cf6:	fab6 f686 	clz	r6, r6
 8005cfa:	fa00 f10c 	lsl.w	r1, r0, ip
 8005cfe:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d02:	ea43 0308 	orr.w	r3, r3, r8
 8005d06:	4319      	orrs	r1, r3
 8005d08:	fa02 f306 	lsl.w	r3, r2, r6
 8005d0c:	430b      	orrs	r3, r1
 8005d0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d12:	e70f      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x554>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d14:	f7fd fc34 	bl	8003580 <HAL_GetTick>
 8005d18:	1b40      	subs	r0, r0, r5
 8005d1a:	2864      	cmp	r0, #100	; 0x64
 8005d1c:	f67f af5a 	bls.w	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005d20:	e4bc      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8005d22:	b003      	add	sp, #12
 8005d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d28:	40023800 	.word	0x40023800

08005d2c <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else  
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8005d2c:	4b76      	ldr	r3, [pc, #472]	; (8005f08 <HAL_RCCEx_GetPeriphCLKConfig+0x1dc>)
 8005d2e:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005d30:	4b76      	ldr	r3, [pc, #472]	; (8005f0c <HAL_RCCEx_GetPeriphCLKConfig+0x1e0>)
  *         RCC configuration registers.
  * @param  PeriphClkInit: pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d32:	b5f0      	push	{r4, r5, r6, r7, lr}
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */ 
  
  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SN));
 8005d34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005d38:	f647 75c0 	movw	r5, #32704	; 0x7fc0
 8005d3c:	fa95 f2a5 	rbit	r2, r5
 8005d40:	fab2 f182 	clz	r1, r2
 8005d44:	462a      	mov	r2, r5
 8005d46:	4022      	ands	r2, r4
 8005d48:	40ca      	lsrs	r2, r1
 8005d4a:	6042      	str	r2, [r0, #4]
 8005d4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8005d50:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005d54:	fa92 f4a2 	rbit	r4, r2
 8005d58:	fab4 f484 	clz	r4, r4
 8005d5c:	4011      	ands	r1, r2
 8005d5e:	40e1      	lsrs	r1, r4
 8005d60:	f04f 6470 	mov.w	r4, #251658240	; 0xf000000
 8005d64:	6101      	str	r1, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8005d66:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005d6a:	fa94 f6a4 	rbit	r6, r4
 8005d6e:	fab6 f686 	clz	r6, r6
 8005d72:	4021      	ands	r1, r4
 8005d74:	40f1      	lsrs	r1, r6
 8005d76:	60c1      	str	r1, [r0, #12]
 8005d78:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8005d7c:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 8005d80:	fa91 f7a1 	rbit	r7, r1
 8005d84:	fab7 f787 	clz	r7, r7
 8005d88:	400e      	ands	r6, r1
 8005d8a:	40fe      	lsrs	r6, r7
 8005d8c:	6086      	str	r6, [r0, #8]
  
  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIN));
 8005d8e:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 8005d92:	fa95 f5a5 	rbit	r5, r5
 8005d96:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 8005d9a:	fab5 f585 	clz	r5, r5
 8005d9e:	403e      	ands	r6, r7
 8005da0:	fa26 f505 	lsr.w	r5, r6, r5
 8005da4:	6145      	str	r5, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8005da6:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8005daa:	fa92 f6a2 	rbit	r6, r2
 8005dae:	fab6 f686 	clz	r6, r6
 8005db2:	4015      	ands	r5, r2
 8005db4:	40f5      	lsrs	r5, r6
 8005db6:	6205      	str	r5, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ)); 
 8005db8:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8005dbc:	fa94 f4a4 	rbit	r4, r4
 8005dc0:	f005 6570 	and.w	r5, r5, #251658240	; 0xf000000
 8005dc4:	fab4 f484 	clz	r4, r4
 8005dc8:	fa25 f404 	lsr.w	r4, r5, r4
 8005dcc:	6184      	str	r4, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR)); 
 8005dce:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8005dd2:	fa91 f1a1 	rbit	r1, r1
 8005dd6:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
 8005dda:	fab1 f181 	clz	r1, r1
 8005dde:	fa24 f101 	lsr.w	r1, r4, r1
 8005de2:	241f      	movs	r4, #31
 8005de4:	61c1      	str	r1, [r0, #28]
  
  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLI2SDIVQ));
 8005de6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005dea:	fa94 f4a4 	rbit	r4, r4
 8005dee:	fab4 f484 	clz	r4, r4
 8005df2:	f001 011f 	and.w	r1, r1, #31
 8005df6:	40e1      	lsrs	r1, r4
 8005df8:	f44f 54f8 	mov.w	r4, #7936	; 0x1f00
 8005dfc:	6241      	str	r1, [r0, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVQ));
 8005dfe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005e02:	fa94 f4a4 	rbit	r4, r4
 8005e06:	fab4 f484 	clz	r4, r4
 8005e0a:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
 8005e0e:	40e1      	lsrs	r1, r4
 8005e10:	6281      	str	r1, [r0, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> POSITION_VAL(RCC_DCKCFGR1_PLLSAIDIVR));
 8005e12:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005e16:	fa92 f2a2 	rbit	r2, r2
 8005e1a:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
 8005e1e:	fab2 f282 	clz	r2, r2
 8005e22:	fa21 f202 	lsr.w	r2, r1, r2
 8005e26:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8005e28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e2c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005e30:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8005e32:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e36:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005e3a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8005e42:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005e44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e48:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8005e4c:	6642      	str	r2, [r0, #100]	; 0x64
  
  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8005e4e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e52:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005e56:	6682      	str	r2, [r0, #104]	; 0x68
  
  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8005e58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e5c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005e60:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8005e62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e66:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005e6a:	6702      	str	r2, [r0, #112]	; 0x70
  
  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005e6c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e70:	f002 0203 	and.w	r2, r2, #3
 8005e74:	6442      	str	r2, [r0, #68]	; 0x44
  
  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8005e76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e7a:	f002 020c 	and.w	r2, r2, #12
 8005e7e:	6482      	str	r2, [r0, #72]	; 0x48
  
  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8005e80:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e84:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8005e88:	64c2      	str	r2, [r0, #76]	; 0x4c
  
  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8005e8a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e8e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8005e92:	6502      	str	r2, [r0, #80]	; 0x50
  
  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8005e94:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005e98:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005e9c:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8005e9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ea2:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005ea6:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8005ea8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005eac:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8005eb0:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8005eb2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005eb6:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8005eba:	6602      	str	r2, [r0, #96]	; 0x60
  
  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005ebc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ec0:	f002 7240 	and.w	r2, r2, #50331648	; 0x3000000
 8005ec4:	6742      	str	r2, [r0, #116]	; 0x74
  
  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 8005ec6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005eca:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8005ece:	6782      	str	r2, [r0, #120]	; 0x78
  
  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8005ed0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ed4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005ed8:	67c2      	str	r2, [r0, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005eda:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ede:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8005ee2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8005ee6:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8005ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eea:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
 8005eee:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	6302      	str	r2, [r0, #48]	; 0x30
  
  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8005ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efa:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8005efe:	bf18      	it	ne
 8005f00:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005f04:	6383      	str	r3, [r0, #56]	; 0x38
 8005f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f08:	00fffff1 	.word	0x00fffff1
 8005f0c:	40023800 	.word	0x40023800

08005f10 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f10:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8005f14:	d10a      	bne.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005f16:	4b2c      	ldr	r3, [pc, #176]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
    switch (saiclocksource)
 8005f1c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 8005f20:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8005f24:	d02f      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8005f26:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8005f2a:	e00c      	b.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
        break;
      }
    }
  }
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005f2c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8005f30:	d147      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8005f32:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8005f38:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 8005f3c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8005f40:	d021      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8005f42:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8005f46:	d01c      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005f48:	2a00      	cmp	r2, #0
 8005f4a:	d13a      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/ 
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f4c:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f4e:	685b      	ldr	r3, [r3, #4]
    {
    case 0: /* PLLSAI is the clock source for SAI*/ 
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f50:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }   
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005f52:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f54:	f003 003f 	and.w	r0, r3, #63	; 0x3f
 8005f58:	bf54      	ite	pl
 8005f5a:	4b1c      	ldrpl	r3, [pc, #112]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005f5c:	4b1c      	ldrmi	r3, [pc, #112]	; (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005f5e:	fbb3 f3f0 	udiv	r3, r3, r0
        }   
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005f62:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005f66:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005f6a:	f3c0 6003 	ubfx	r0, r0, #24, #4
 8005f6e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005f72:	434b      	muls	r3, r1
 8005f74:	fbb3 f3f0 	udiv	r3, r3, r0
        
        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005f78:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
        frequency = frequency/(tmpreg); 
 8005f7c:	f3c0 2004 	ubfx	r0, r0, #8, #5
 8005f80:	e01b      	b.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
        frequency = frequency/(tmpreg);
        break;
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f82:	4814      	ldr	r0, [pc, #80]	; (8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8005f84:	4770      	bx	lr
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {  
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f86:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 003f 	and.w	r0, r3, #63	; 0x3f
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {  
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005f8e:	0253      	lsls	r3, r2, #9
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }
        
        /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005f90:	4a0d      	ldr	r2, [pc, #52]	; (8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f92:	bf54      	ite	pl
 8005f94:	4b0d      	ldrpl	r3, [pc, #52]	; (8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005f96:	4b0e      	ldrmi	r3, [pc, #56]	; (8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8005f98:	fbb3 f3f0 	udiv	r3, r3, r0
        }
        
        /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005f9c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005fa0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8005fa4:	f3c0 6003 	ubfx	r0, r0, #24, #4
 8005fa8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005fac:	434b      	muls	r3, r1
 8005fae:	fbb3 f3f0 	udiv	r3, r3, r0
        
        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8005fb2:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
        frequency = frequency/(tmpreg);
 8005fb6:	f000 001f 	and.w	r0, r0, #31
 8005fba:	3001      	adds	r0, #1
 8005fbc:	fbb3 f0f0 	udiv	r0, r3, r0
        break;
 8005fc0:	4770      	bx	lr
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
  uint32_t tmpreg = 0;
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005fc2:	2000      	movs	r0, #0
      }
    }
  }
  
  return frequency;
}
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	00f42400 	.word	0x00f42400
 8005fd0:	017d7840 	.word	0x017d7840
 8005fd4:	00bb8000 	.word	0x00bb8000

08005fd8 <SAI_InterruptFlag>:
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
 8005fd8:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_FREQ;
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005fda:	6b02      	ldr	r2, [r0, #48]	; 0x30
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
  
  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
 8005fdc:	bf14      	ite	ne
 8005fde:	2301      	movne	r3, #1
 8005fe0:	2309      	moveq	r3, #9
  }

  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8005fe2:	2a08      	cmp	r2, #8
 8005fe4:	6842      	ldr	r2, [r0, #4]
 8005fe6:	d105      	bne.n	8005ff4 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8005fe8:	f022 0102 	bic.w	r1, r2, #2
 8005fec:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 8005fee:	bf08      	it	eq
 8005ff0:	f043 0310 	orreq.w	r3, r3, #16
  }

  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005ff4:	3a02      	subs	r2, #2
 8005ff6:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8005ff8:	bf94      	ite	ls
 8005ffa:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 8005ffe:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 8006002:	4770      	bx	lr

08006004 <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <SAI_Disable+0x3c>)
 8006006:	f641 3258 	movw	r2, #7000	; 0x1b58
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800600a:	6801      	ldr	r1, [r0, #0]
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	fbb3 f2f2 	udiv	r2, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006012:	680b      	ldr	r3, [r1, #0]
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006014:	0092      	lsls	r2, r2, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601a:	600b      	str	r3, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800601c:	f112 32ff 	adds.w	r2, r2, #4294967295
 8006020:	d207      	bcs.n	8006032 <SAI_Disable+0x2e>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006022:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 800602e:	2003      	movs	r0, #3
      break;
 8006030:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006032:	680b      	ldr	r3, [r1, #0]
 8006034:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8006038:	d1f0      	bne.n	800601c <SAI_Disable+0x18>
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
  HAL_StatusTypeDef status = HAL_OK;
 800603a:	4618      	mov	r0, r3
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);

  return status;
}
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20010044 	.word	0x20010044

08006044 <HAL_SAI_Init>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006044:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006046:	4604      	mov	r4, r0
 8006048:	2800      	cmp	r0, #0
 800604a:	f000 80bd 	beq.w	80061c8 <HAL_SAI_Init+0x184>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 800604e:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8006052:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006056:	b91b      	cbnz	r3, 8006060 <HAL_SAI_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006058:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800605c:	f008 fcbc 	bl	800e9d8 <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 8006060:	2302      	movs	r3, #2
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006062:	4620      	mov	r0, r4
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 8006064:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006068:	f7ff ffcc 	bl	8006004 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800606c:	68e3      	ldr	r3, [r4, #12]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d004      	beq.n	800607c <HAL_SAI_Init+0x38>
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
  uint32_t tmpregisterGCR = 0;
 8006072:	2b02      	cmp	r3, #2
 8006074:	bf0c      	ite	eq
 8006076:	2320      	moveq	r3, #32
 8006078:	2300      	movne	r3, #0
 800607a:	e000      	b.n	800607e <HAL_SAI_Init+0x3a>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
      break;
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800607c:	2310      	movs	r3, #16
      break;
  default:
    break;
  }
  
  switch(hsai->Init.Synchro)
 800607e:	68a2      	ldr	r2, [r4, #8]
 8006080:	2a02      	cmp	r2, #2
 8006082:	d009      	beq.n	8006098 <HAL_SAI_Init+0x54>
 8006084:	2a03      	cmp	r2, #3
 8006086:	d005      	beq.n	8006094 <HAL_SAI_Init+0x50>
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
  uint32_t tmpregisterGCR = 0;
  uint32_t ckstr_bits = 0;
  uint32_t syncen_bits = 0;
 8006088:	2a01      	cmp	r2, #1
 800608a:	bf0c      	ite	eq
 800608c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8006090:	2500      	movne	r5, #0
 8006092:	e003      	b.n	800609c <HAL_SAI_Init+0x58>
      }
      break;
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006094:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
      }
      break;
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006098:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
  default:
    break;      
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	494b      	ldr	r1, [pc, #300]	; (80061cc <HAL_SAI_Init+0x188>)
 80060a0:	428a      	cmp	r2, r1
 80060a2:	d002      	beq.n	80060aa <HAL_SAI_Init+0x66>
 80060a4:	484a      	ldr	r0, [pc, #296]	; (80061d0 <HAL_SAI_Init+0x18c>)
 80060a6:	4282      	cmp	r2, r0
 80060a8:	d101      	bne.n	80060ae <HAL_SAI_Init+0x6a>
  {
    SAI1->GCR = tmpregisterGCR;
 80060aa:	484a      	ldr	r0, [pc, #296]	; (80061d4 <HAL_SAI_Init+0x190>)
 80060ac:	e000      	b.n	80060b0 <HAL_SAI_Init+0x6c>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 80060ae:	484a      	ldr	r0, [pc, #296]	; (80061d8 <HAL_SAI_Init+0x194>)
 80060b0:	6003      	str	r3, [r0, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80060b2:	69e3      	ldr	r3, [r4, #28]
 80060b4:	b31b      	cbz	r3, 80060fe <HAL_SAI_Init+0xba>
  {
    uint32_t freq = 0;
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80060b6:	428a      	cmp	r2, r1
 80060b8:	d002      	beq.n	80060c0 <HAL_SAI_Init+0x7c>
 80060ba:	4b45      	ldr	r3, [pc, #276]	; (80061d0 <HAL_SAI_Init+0x18c>)
 80060bc:	429a      	cmp	r2, r3
 80060be:	d104      	bne.n	80060ca <HAL_SAI_Init+0x86>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80060c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80060c4:	f7ff ff24 	bl	8005f10 <HAL_RCCEx_GetPeriphCLKFreq>
 80060c8:	e000      	b.n	80060cc <HAL_SAI_Init+0x88>
    SAI2->GCR = tmpregisterGCR;
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
  {
    uint32_t freq = 0;
 80060ca:	2000      	movs	r0, #0

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	4a43      	ldr	r2, [pc, #268]	; (80061dc <HAL_SAI_Init+0x198>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d002      	beq.n	80060da <HAL_SAI_Init+0x96>
 80060d4:	3220      	adds	r2, #32
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d103      	bne.n	80060e2 <HAL_SAI_Init+0x9e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80060da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80060de:	f7ff ff17 	bl	8005f10 <HAL_RCCEx_GetPeriphCLKFreq>
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80060e2:	220a      	movs	r2, #10
 80060e4:	69e3      	ldr	r3, [r4, #28]
 80060e6:	4350      	muls	r0, r2
 80060e8:	025b      	lsls	r3, r3, #9
 80060ea:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80060ee:	fbb0 f3f2 	udiv	r3, r0, r2
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80060f2:	fb02 0013 	mls	r0, r2, r3, r0
 80060f6:	2809      	cmp	r0, #9
    {
      hsai->Init.Mckdiv+= 1;
 80060f8:	bf08      	it	eq
 80060fa:	3301      	addeq	r3, #1
 80060fc:	6223      	str	r3, [r4, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80060fe:	6860      	ldr	r0, [r4, #4]
 8006100:	f030 0302 	bics.w	r3, r0, #2
 8006104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006106:	d105      	bne.n	8006114 <HAL_SAI_Init+0xd0>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006108:	2b01      	cmp	r3, #1
 800610a:	bf14      	ite	ne
 800610c:	f44f 7100 	movne.w	r1, #512	; 0x200
 8006110:	2100      	moveq	r1, #0
 8006112:	e004      	b.n	800611e <HAL_SAI_Init+0xda>
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2100      	movne	r1, #0
 800611a:	f44f 7100 	moveq.w	r1, #512	; 0x200
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	4e2f      	ldr	r6, [pc, #188]	; (80061e0 <HAL_SAI_Init+0x19c>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4016      	ands	r6, r2
 8006126:	601e      	str	r6, [r3, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4310      	orrs	r0, r2
 800612c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800612e:	4310      	orrs	r0, r2
 8006130:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006132:	4310      	orrs	r0, r2
 8006134:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006136:	4310      	orrs	r0, r2
 8006138:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800613a:	4310      	orrs	r0, r2
 800613c:	6922      	ldr	r2, [r4, #16]
 800613e:	4310      	orrs	r0, r2
 8006140:	6962      	ldr	r2, [r4, #20]
 8006142:	4302      	orrs	r2, r0
 8006144:	6a20      	ldr	r0, [r4, #32]
 8006146:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800614a:	2000      	movs	r0, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800614c:	4315      	orrs	r5, r2
 800614e:	430d      	orrs	r5, r1
 8006150:	601d      	str	r5, [r3, #0]
                        ckstr_bits | syncen_bits |                               \
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006158:	f022 020f 	bic.w	r2, r2, #15
 800615c:	605a      	str	r2, [r3, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800615e:	69a2      	ldr	r2, [r4, #24]
 8006160:	6859      	ldr	r1, [r3, #4]
 8006162:	4311      	orrs	r1, r2
 8006164:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006166:	4311      	orrs	r1, r2
 8006168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800616e:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <HAL_SAI_Init+0x1a0>)
 8006170:	6899      	ldr	r1, [r3, #8]
 8006172:	400a      	ands	r2, r1
 8006174:	609a      	str	r2, [r3, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006176:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006178:	6899      	ldr	r1, [r3, #8]
 800617a:	4311      	orrs	r1, r2
 800617c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800617e:	4311      	orrs	r1, r2
 8006180:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006182:	4311      	orrs	r1, r2
 8006184:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006186:	3a01      	subs	r2, #1
 8006188:	4311      	orrs	r1, r2
 800618a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800618c:	3a01      	subs	r2, #1
 800618e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8006192:	609a      	str	r2, [r3, #8]
                          hsai->FrameInit.FSPolarity   |
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006194:	f24f 0220 	movw	r2, #61472	; 0xf020
 8006198:	68d9      	ldr	r1, [r3, #12]
 800619a:	400a      	ands	r2, r1
 800619c:	60da      	str	r2, [r3, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800619e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80061a0:	68d9      	ldr	r1, [r3, #12]
 80061a2:	4311      	orrs	r1, r2
 80061a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80061a6:	430a      	orrs	r2, r1
 80061a8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80061aa:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80061ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80061b0:	3a01      	subs	r2, #1
 80061b2:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 80061b6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80061b8:	2301      	movs	r3, #1
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80061ba:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80061be:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80061c2:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
  
  return HAL_OK;
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t syncen_bits = 0;

  /* Check the SAI handle allocation */
  if(hsai == NULL)
  {
    return HAL_ERROR;
 80061c8:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
  
  return HAL_OK;
}
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	40015804 	.word	0x40015804
 80061d0:	40015824 	.word	0x40015824
 80061d4:	40015800 	.word	0x40015800
 80061d8:	40015c00 	.word	0x40015c00
 80061dc:	40015c04 	.word	0x40015c04
 80061e0:	ff05c010 	.word	0xff05c010
 80061e4:	fff88000 	.word	0xfff88000

080061e8 <HAL_SAI_DeInit>:
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 80061e8:	b538      	push	{r3, r4, r5, lr}
  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80061ea:	4605      	mov	r5, r0
 80061ec:	b1d0      	cbz	r0, 8006224 <HAL_SAI_DeInit+0x3c>
  {
    return HAL_ERROR;
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80061ee:	2302      	movs	r3, #2

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80061f0:	2400      	movs	r4, #0
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80061f2:	f04f 32ff 	mov.w	r2, #4294967295
  if(hsai == NULL)
  {
    return HAL_ERROR;
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80061f6:	f880 307d 	strb.w	r3, [r0, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80061fa:	6803      	ldr	r3, [r0, #0]
 80061fc:	611c      	str	r4, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80061fe:	619a      	str	r2, [r3, #24]
  
  /* Disable the SAI */
  SAI_Disable(hsai);
 8006200:	f7ff ff00 	bl	8006004 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006204:	682a      	ldr	r2, [r5, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_SAI_MspDeInit(hsai);
 8006206:	4628      	mov	r0, r5
  
  /* Disable the SAI */
  SAI_Disable(hsai);

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006208:	6853      	ldr	r3, [r2, #4]
 800620a:	f043 0308 	orr.w	r3, r3, #8
 800620e:	6053      	str	r3, [r2, #4]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_SAI_MspDeInit(hsai);
 8006210:	f008 fc34 	bl	800ea7c <HAL_SAI_MspDeInit>

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006214:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006218:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c

  return HAL_OK;
 800621c:	4620      	mov	r0, r4

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800621e:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
 8006222:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
  /* Check the SAI handle allocation */
  if(hsai == NULL)
  {
    return HAL_ERROR;
 8006224:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8006226:	bd38      	pop	{r3, r4, r5, pc}

08006228 <HAL_SAI_DMAPause>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006228:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800622c:	2b01      	cmp	r3, #1
 800622e:	d009      	beq.n	8006244 <HAL_SAI_DMAPause+0x1c>

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006230:	6802      	ldr	r2, [r0, #0]
 8006232:	6813      	ldr	r3, [r2, #0]
 8006234:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006238:	6013      	str	r3, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800623a:	2300      	movs	r3, #0
 800623c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c

  return HAL_OK;
 8006240:	4618      	mov	r0, r3
 8006242:	4770      	bx	lr
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006244:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8006246:	4770      	bx	lr

08006248 <HAL_SAI_DMAStop>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006248:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800624c:	2b01      	cmp	r3, #1
  * @param  hsai: pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800624e:	b510      	push	{r4, lr}
 8006250:	4604      	mov	r4, r0
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006252:	d020      	beq.n	8006296 <HAL_SAI_DMAStop+0x4e>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006254:	6802      	ldr	r2, [r0, #0]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006256:	2301      	movs	r3, #1
 8006258:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800625c:	6813      	ldr	r3, [r2, #0]

  /* Abort the SAI DMA Streams */
  if(hsai->hdmatx != NULL)
 800625e:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
{
  /* Process Locked */
  __HAL_LOCK(hsai);

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006260:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006264:	6013      	str	r3, [r2, #0]

  /* Abort the SAI DMA Streams */
  if(hsai->hdmatx != NULL)
 8006266:	b910      	cbnz	r0, 800626e <HAL_SAI_DMAStop+0x26>
    {
      return HAL_ERROR;
    }
  }

  if(hsai->hdmarx != NULL)
 8006268:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800626a:	b930      	cbnz	r0, 800627a <HAL_SAI_DMAStop+0x32>
 800626c:	e009      	b.n	8006282 <HAL_SAI_DMAStop+0x3a>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;

  /* Abort the SAI DMA Streams */
  if(hsai->hdmatx != NULL)
  {
    if(HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800626e:	f7fd fb03 	bl	8003878 <HAL_DMA_Abort>
 8006272:	2800      	cmp	r0, #0
 8006274:	d0f8      	beq.n	8006268 <HAL_SAI_DMAStop+0x20>
    {
      return HAL_ERROR;
 8006276:	2001      	movs	r0, #1
 8006278:	bd10      	pop	{r4, pc}
    }
  }

  if(hsai->hdmarx != NULL)
  {
    if(HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800627a:	f7fd fafd 	bl	8003878 <HAL_DMA_Abort>
 800627e:	2800      	cmp	r0, #0
 8006280:	d1f9      	bne.n	8006276 <HAL_SAI_DMAStop+0x2e>
      return HAL_ERROR;
    }
  }
  
  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8006282:	4620      	mov	r0, r4
 8006284:	f7ff febe 	bl	8006004 <SAI_Disable>

  hsai->State = HAL_SAI_STATE_READY;
 8006288:	2301      	movs	r3, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800628a:	2000      	movs	r0, #0
  }
  
  /* Disable SAI peripheral */
  SAI_Disable(hsai);

  hsai->State = HAL_SAI_STATE_READY;
 800628c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8006290:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c

  return HAL_OK;
 8006294:	bd10      	pop	{r4, pc}
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
  /* Process Locked */
  __HAL_LOCK(hsai);
 8006296:	2002      	movs	r0, #2

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8006298:	bd10      	pop	{r4, pc}
	...

0800629c <HAL_SAI_Receive_DMA>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	4613      	mov	r3, r2
 80062a0:	4604      	mov	r4, r0

  if((pData == NULL) || (Size == 0))
 80062a2:	460a      	mov	r2, r1
 80062a4:	2900      	cmp	r1, #0
 80062a6:	d040      	beq.n	800632a <HAL_SAI_Receive_DMA+0x8e>
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d03e      	beq.n	800632a <HAL_SAI_Receive_DMA+0x8e>
  {
    return  HAL_ERROR;
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 80062ac:	f890 607d 	ldrb.w	r6, [r0, #125]	; 0x7d
 80062b0:	b2f6      	uxtb	r6, r6
 80062b2:	2e01      	cmp	r6, #1
 80062b4:	d13b      	bne.n	800632e <HAL_SAI_Receive_DMA+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80062b6:	f890 107c 	ldrb.w	r1, [r0, #124]	; 0x7c
 80062ba:	2901      	cmp	r1, #1
 80062bc:	d037      	beq.n	800632e <HAL_SAI_Receive_DMA+0x92>

    hsai->pBuffPtr = pData;
    hsai->XferSize = Size;
    hsai->XferCount = Size;
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80062be:	2700      	movs	r7, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80062c0:	2122      	movs	r1, #34	; 0x22
  }

  if(hsai->State == HAL_SAI_STATE_READY)
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80062c2:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c

    hsai->pBuffPtr = pData;
    hsai->XferSize = Size;
    hsai->XferCount = Size;
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80062c6:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
  if(hsai->State == HAL_SAI_STATE_READY)
  {
    /* Process Locked */
    __HAL_LOCK(hsai);

    hsai->pBuffPtr = pData;
 80062ca:	6642      	str	r2, [r0, #100]	; 0x64
    hsai->XferSize = Size;
    hsai->XferCount = Size;
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80062cc:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
  {
    /* Process Locked */
    __HAL_LOCK(hsai);

    hsai->pBuffPtr = pData;
    hsai->XferSize = Size;
 80062d0:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
    hsai->XferCount = Size;
 80062d4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
    hsai->State = HAL_SAI_STATE_BUSY_RX;

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80062d8:	4916      	ldr	r1, [pc, #88]	; (8006334 <HAL_SAI_Receive_DMA+0x98>)
 80062da:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80062dc:	6401      	str	r1, [r0, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80062de:	4916      	ldr	r1, [pc, #88]	; (8006338 <HAL_SAI_Receive_DMA+0x9c>)

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80062e0:	6507      	str	r7, [r0, #80]	; 0x50

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80062e2:	63c1      	str	r1, [r0, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80062e4:	4915      	ldr	r1, [pc, #84]	; (800633c <HAL_SAI_Receive_DMA+0xa0>)
 80062e6:	64c1      	str	r1, [r0, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;

    /* Enable the Rx DMA Stream */
    if(HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80062e8:	6821      	ldr	r1, [r4, #0]
 80062ea:	311c      	adds	r1, #28
 80062ec:	f7fd fa85 	bl	80037fa <HAL_DMA_Start_IT>
 80062f0:	4605      	mov	r5, r0
 80062f2:	b118      	cbz	r0, 80062fc <HAL_SAI_Receive_DMA+0x60>
    {
      __HAL_UNLOCK(hsai);
 80062f4:	f884 707c 	strb.w	r7, [r4, #124]	; 0x7c
      return  HAL_ERROR;
 80062f8:	4635      	mov	r5, r6
 80062fa:	e019      	b.n	8006330 <HAL_SAI_Receive_DMA+0x94>
    }

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80062fc:	6826      	ldr	r6, [r4, #0]
 80062fe:	6833      	ldr	r3, [r6, #0]
 8006300:	03db      	lsls	r3, r3, #15
 8006302:	d403      	bmi.n	800630c <HAL_SAI_Receive_DMA+0x70>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006304:	6833      	ldr	r3, [r6, #0]
 8006306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800630a:	6033      	str	r3, [r6, #0]
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800630c:	2100      	movs	r1, #0
 800630e:	4620      	mov	r0, r4
 8006310:	f7ff fe62 	bl	8005fd8 <SAI_InterruptFlag>
 8006314:	6933      	ldr	r3, [r6, #16]
 8006316:	4318      	orrs	r0, r3
 8006318:	6130      	str	r0, [r6, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800631a:	6833      	ldr	r3, [r6, #0]
 800631c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006320:	6033      	str	r3, [r6, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006322:	2300      	movs	r3, #0
 8006324:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c

    return HAL_OK;
 8006328:	e002      	b.n	8006330 <HAL_SAI_Receive_DMA+0x94>
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{

  if((pData == NULL) || (Size == 0))
  {
    return  HAL_ERROR;
 800632a:	2501      	movs	r5, #1
 800632c:	e000      	b.n	8006330 <HAL_SAI_Receive_DMA+0x94>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800632e:	2502      	movs	r5, #2
  }
}
 8006330:	4628      	mov	r0, r5
 8006332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006334:	08006379 	.word	0x08006379
 8006338:	08006341 	.word	0x08006341
 800633c:	08006383 	.word	0x08006383

08006340 <SAI_DMARxCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006340:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006342:	6803      	ldr	r3, [r0, #0]
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006344:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
 8006346:	6819      	ldr	r1, [r3, #0]
 8006348:	f411 7180 	ands.w	r1, r1, #256	; 0x100
 800634c:	d110      	bne.n	8006370 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800634e:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006350:	4620      	mov	r0, r4
{
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0)
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006352:	682b      	ldr	r3, [r5, #0]
 8006354:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006358:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 800635a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800635e:	f7ff fe3b 	bl	8005fd8 <SAI_InterruptFlag>
 8006362:	692b      	ldr	r3, [r5, #16]
 8006364:	ea23 0000 	bic.w	r0, r3, r0
    
    hsai->State = HAL_SAI_STATE_READY;
 8006368:	2301      	movs	r3, #1
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
    hsai->XferCount = 0;

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800636a:	6128      	str	r0, [r5, #16]
    
    hsai->State = HAL_SAI_STATE_READY;
 800636c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_RxCpltCallback(hsai);
 8006370:	4620      	mov	r0, r4
 8006372:	f7fb fd0b 	bl	8001d8c <HAL_SAI_RxCpltCallback>
 8006376:	bd38      	pop	{r3, r4, r5, pc}

08006378 <SAI_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006378:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_SAI_RxHalfCpltCallback(hsai);
 800637a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800637c:	f7fb fd0b 	bl	8001d96 <HAL_SAI_RxHalfCpltCallback>
 8006380:	bd08      	pop	{r3, pc}

08006382 <SAI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006382:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006384:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006386:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800638a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8006392:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006396:	2b01      	cmp	r3, #1
 8006398:	d003      	beq.n	80063a2 <SAI_DMAError+0x20>
 800639a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d10d      	bne.n	80063be <SAI_DMAError+0x3c>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80063a2:	6822      	ldr	r2, [r4, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80063a4:	4620      	mov	r0, r4
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;

  if((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80063a6:	6813      	ldr	r3, [r2, #0]
 80063a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063ac:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80063ae:	f7ff fe29 	bl	8006004 <SAI_Disable>
    
    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  }
  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 80063be:	4620      	mov	r0, r4
 80063c0:	f7fb fcee 	bl	8001da0 <HAL_SAI_ErrorCallback>
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <HAL_SAI_GetState>:
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
  return hsai->State;
 80063c6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
}
 80063ca:	4770      	bx	lr

080063cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing: Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80063cc:	b538      	push	{r3, r4, r5, lr}
 80063ce:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80063d0:	4604      	mov	r4, r0
 80063d2:	b1c8      	cbz	r0, 8006408 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80063d4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80063d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80063dc:	b91b      	cbnz	r3, 80063e6 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80063de:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80063e2:	f008 fa91 	bl	800e908 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063e6:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80063e8:	1d21      	adds	r1, r4, #4
 80063ea:	6820      	ldr	r0, [r4, #0]
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80063f0:	f000 f970 	bl	80066d4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80063f4:	6862      	ldr	r2, [r4, #4]
 80063f6:	4629      	mov	r1, r5
 80063f8:	6820      	ldr	r0, [r4, #0]
 80063fa:	f000 f9ac 	bl	8006756 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80063fe:	2301      	movs	r3, #1
  
  return HAL_OK;
 8006400:	2000      	movs	r0, #0
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006402:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8006406:	bd38      	pop	{r3, r4, r5, pc}
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
  {
    return HAL_ERROR;
 8006408:	2001      	movs	r0, #1
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
  
  return HAL_OK;
}
 800640a:	bd38      	pop	{r3, r4, r5, pc}

0800640c <HAL_SDRAM_SendCommand>:
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006410:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
  * @param  Command: SDRAM command structure
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006414:	460d      	mov	r5, r1
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006416:	b2c0      	uxtb	r0, r0
 8006418:	2802      	cmp	r0, #2
 800641a:	d00d      	beq.n	8006438 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800641c:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800641e:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006420:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006424:	f000 f9e3 	bl	80067ee <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006428:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 800642a:	2000      	movs	r0, #0
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800642c:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800642e:	bf0c      	ite	eq
 8006430:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006432:	2301      	movne	r3, #1
 8006434:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
}
 8006438:	bd38      	pop	{r3, r4, r5, pc}

0800643a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate: The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800643a:	b510      	push	{r4, lr}
 800643c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800643e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8006442:	b2c0      	uxtb	r0, r0
 8006444:	2802      	cmp	r0, #2
 8006446:	d009      	beq.n	800645c <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006448:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800644a:	6820      	ldr	r0, [r4, #0]
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800644c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006450:	f000 f9f3 	bl	800683a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006454:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8006456:	2000      	movs	r0, #0
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006458:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
}
 800645c:	bd10      	pop	{r4, pc}

0800645e <HAL_TIM_Base_MspInit>:
 800645e:	4770      	bx	lr

08006460 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006460:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8006462:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8006474:	4770      	bx	lr

08006476 <HAL_TIM_OC_DelayElapsedCallback>:
 8006476:	4770      	bx	lr

08006478 <HAL_TIM_IC_CaptureCallback>:
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_PWM_PulseFinishedCallback>:
 800647a:	4770      	bx	lr

0800647c <HAL_TIM_TriggerCallback>:
 800647c:	4770      	bx	lr

0800647e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800647e:	6803      	ldr	r3, [r0, #0]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006484:	b510      	push	{r4, lr}
 8006486:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006488:	d514      	bpl.n	80064b4 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	0792      	lsls	r2, r2, #30
 800648e:	d511      	bpl.n	80064b4 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006490:	f06f 0202 	mvn.w	r2, #2
 8006494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006496:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8006498:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800649a:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800649c:	0799      	lsls	r1, r3, #30
 800649e:	d002      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80064a0:	f7ff ffea 	bl	8006478 <HAL_TIM_IC_CaptureCallback>
 80064a4:	e004      	b.n	80064b0 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a6:	f7ff ffe6 	bl	8006476 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064aa:	4620      	mov	r0, r4
 80064ac:	f7ff ffe5 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b0:	2300      	movs	r3, #0
 80064b2:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	0752      	lsls	r2, r2, #29
 80064ba:	d516      	bpl.n	80064ea <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	0750      	lsls	r0, r2, #29
 80064c0:	d513      	bpl.n	80064ea <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064c2:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	4620      	mov	r0, r4
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ca:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80064cc:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ce:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80064d0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80064d4:	d002      	beq.n	80064dc <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	f7ff ffcf 	bl	8006478 <HAL_TIM_IC_CaptureCallback>
 80064da:	e004      	b.n	80064e6 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064dc:	f7ff ffcb 	bl	8006476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff ffca 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e6:	2300      	movs	r3, #0
 80064e8:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	0711      	lsls	r1, r2, #28
 80064f0:	d515      	bpl.n	800651e <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	0712      	lsls	r2, r2, #28
 80064f6:	d512      	bpl.n	800651e <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f8:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80064fc:	4620      	mov	r0, r4
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006500:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006502:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006504:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006506:	079b      	lsls	r3, r3, #30
 8006508:	d002      	beq.n	8006510 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800650a:	f7ff ffb5 	bl	8006478 <HAL_TIM_IC_CaptureCallback>
 800650e:	e004      	b.n	800651a <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006510:	f7ff ffb1 	bl	8006476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8006514:	4620      	mov	r0, r4
 8006516:	f7ff ffb0 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	2300      	movs	r3, #0
 800651c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	06d0      	lsls	r0, r2, #27
 8006524:	d516      	bpl.n	8006554 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8006526:	68da      	ldr	r2, [r3, #12]
 8006528:	06d1      	lsls	r1, r2, #27
 800652a:	d513      	bpl.n	8006554 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800652c:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006530:	4620      	mov	r0, r4
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006534:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8006536:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006538:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800653a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800653e:	d002      	beq.n	8006546 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8006540:	f7ff ff9a 	bl	8006478 <HAL_TIM_IC_CaptureCallback>
 8006544:	e004      	b.n	8006550 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	f7ff ff96 	bl	8006476 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654a:	4620      	mov	r0, r4
 800654c:	f7ff ff95 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006550:	2300      	movs	r3, #0
 8006552:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	07d2      	lsls	r2, r2, #31
 800655a:	d508      	bpl.n	800656e <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	07d0      	lsls	r0, r2, #31
 8006560:	d505      	bpl.n	800656e <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006562:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8006566:	4620      	mov	r0, r4
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006568:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800656a:	f009 f8eb 	bl	800f744 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	691a      	ldr	r2, [r3, #16]
 8006572:	0611      	lsls	r1, r2, #24
 8006574:	d508      	bpl.n	8006588 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	0612      	lsls	r2, r2, #24
 800657a:	d505      	bpl.n	8006588 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8006580:	4620      	mov	r0, r4
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006582:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006584:	f000 f8a5 	bl	80066d2 <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	05d0      	lsls	r0, r2, #23
 800658e:	d508      	bpl.n	80065a2 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	0611      	lsls	r1, r2, #24
 8006594:	d505      	bpl.n	80065a2 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006596:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800659a:	4620      	mov	r0, r4
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800659c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800659e:	f000 f898 	bl	80066d2 <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	0652      	lsls	r2, r2, #25
 80065a8:	d508      	bpl.n	80065bc <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80065aa:	68da      	ldr	r2, [r3, #12]
 80065ac:	0650      	lsls	r0, r2, #25
 80065ae:	d505      	bpl.n	80065bc <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80065b4:	4620      	mov	r0, r4
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80065b8:	f7ff ff60 	bl	800647c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	691a      	ldr	r2, [r3, #16]
 80065c0:	0691      	lsls	r1, r2, #26
 80065c2:	d50a      	bpl.n	80065da <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	0692      	lsls	r2, r2, #26
 80065c8:	d507      	bpl.n	80065da <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065ca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80065ce:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 80065d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 80065d6:	f000 b87b 	b.w	80066d0 <HAL_TIMEx_CommutationCallback>
 80065da:	bd10      	pop	{r4, pc}

080065dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80065dc:	4a2e      	ldr	r2, [pc, #184]	; (8006698 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80065de:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80065e0:	4290      	cmp	r0, r2
 80065e2:	d012      	beq.n	800660a <TIM_Base_SetConfig+0x2e>
 80065e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80065e8:	d00f      	beq.n	800660a <TIM_Base_SetConfig+0x2e>
 80065ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80065ee:	4290      	cmp	r0, r2
 80065f0:	d00b      	beq.n	800660a <TIM_Base_SetConfig+0x2e>
 80065f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065f6:	4290      	cmp	r0, r2
 80065f8:	d007      	beq.n	800660a <TIM_Base_SetConfig+0x2e>
 80065fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065fe:	4290      	cmp	r0, r2
 8006600:	d003      	beq.n	800660a <TIM_Base_SetConfig+0x2e>
 8006602:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006606:	4290      	cmp	r0, r2
 8006608:	d118      	bne.n	800663c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800660a:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800660c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006610:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006612:	4a21      	ldr	r2, [pc, #132]	; (8006698 <TIM_Base_SetConfig+0xbc>)
 8006614:	4290      	cmp	r0, r2
 8006616:	d037      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 8006618:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800661c:	d034      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 800661e:	4a1f      	ldr	r2, [pc, #124]	; (800669c <TIM_Base_SetConfig+0xc0>)
 8006620:	4290      	cmp	r0, r2
 8006622:	d031      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 8006624:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006628:	4290      	cmp	r0, r2
 800662a:	d02d      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 800662c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006630:	4290      	cmp	r0, r2
 8006632:	d029      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 8006634:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006638:	4290      	cmp	r0, r2
 800663a:	d025      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 800663c:	4a18      	ldr	r2, [pc, #96]	; (80066a0 <TIM_Base_SetConfig+0xc4>)
 800663e:	4290      	cmp	r0, r2
 8006640:	d022      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 8006642:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006646:	4290      	cmp	r0, r2
 8006648:	d01e      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 800664a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800664e:	4290      	cmp	r0, r2
 8006650:	d01a      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 8006652:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006656:	4290      	cmp	r0, r2
 8006658:	d016      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 800665a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800665e:	4290      	cmp	r0, r2
 8006660:	d012      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
 8006662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006666:	4290      	cmp	r0, r2
 8006668:	d00e      	beq.n	8006688 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800666a:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800666c:	688b      	ldr	r3, [r1, #8]
 800666e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006670:	680b      	ldr	r3, [r1, #0]
 8006672:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006674:	4b08      	ldr	r3, [pc, #32]	; (8006698 <TIM_Base_SetConfig+0xbc>)
 8006676:	4298      	cmp	r0, r3
 8006678:	d00b      	beq.n	8006692 <TIM_Base_SetConfig+0xb6>
 800667a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800667e:	4298      	cmp	r0, r3
 8006680:	d007      	beq.n	8006692 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006682:	2301      	movs	r3, #1
 8006684:	6143      	str	r3, [r0, #20]
}
 8006686:	4770      	bx	lr
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800668c:	68ca      	ldr	r2, [r1, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	e7eb      	b.n	800666a <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006692:	690b      	ldr	r3, [r1, #16]
 8006694:	6303      	str	r3, [r0, #48]	; 0x30
 8006696:	e7f4      	b.n	8006682 <TIM_Base_SetConfig+0xa6>
 8006698:	40010000 	.word	0x40010000
 800669c:	40000400 	.word	0x40000400
 80066a0:	40014000 	.word	0x40014000

080066a4 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80066a4:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80066a6:	4604      	mov	r4, r0
 80066a8:	b180      	cbz	r0, 80066cc <HAL_TIM_Base_Init+0x28>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80066aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80066ae:	b90b      	cbnz	r3, 80066b4 <HAL_TIM_Base_Init+0x10>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066b0:	f7ff fed5 	bl	800645e <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80066b4:	2302      	movs	r3, #2
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80066b6:	6820      	ldr	r0, [r4, #0]
 80066b8:	1d21      	adds	r1, r4, #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80066ba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80066be:	f7ff ff8d 	bl	80065dc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80066c2:	2301      	movs	r3, #1
  
  return HAL_OK;
 80066c4:	2000      	movs	r0, #0
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80066c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80066ca:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 80066cc:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 80066ce:	bd10      	pop	{r4, pc}

080066d0 <HAL_TIMEx_CommutationCallback>:
 80066d0:	4770      	bx	lr

080066d2 <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066d2:	4770      	bx	lr

080066d4 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80066d4:	680b      	ldr	r3, [r1, #0]
 80066d6:	6a0a      	ldr	r2, [r1, #32]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	688b      	ldr	r3, [r1, #8]
  * @param  Device: Pointer to SDRAM device instance
  * @param  Init: Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80066dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e0:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80066e4:	68cf      	ldr	r7, [r1, #12]
 80066e6:	690e      	ldr	r6, [r1, #16]
 80066e8:	694d      	ldr	r5, [r1, #20]
 80066ea:	698c      	ldr	r4, [r1, #24]
 80066ec:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 80066f0:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80066f4:	6801      	ldr	r1, [r0, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80066f6:	d013      	beq.n	8006720 <FMC_SDRAM_Init+0x4c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80066f8:	ea4e 0e03 	orr.w	lr, lr, r3
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80066fc:	f421 48ff 	bic.w	r8, r1, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006700:	ea4e 0707 	orr.w	r7, lr, r7
  if (Init->SDBank != FMC_SDRAM_BANK2) 
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006704:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006708:	433e      	orrs	r6, r7
 800670a:	4335      	orrs	r5, r6
 800670c:	432c      	orrs	r4, r5
 800670e:	ea44 010a 	orr.w	r1, r4, sl
 8006712:	430a      	orrs	r2, r1
 8006714:	ea42 0309 	orr.w	r3, r2, r9
 8006718:	ea43 0308 	orr.w	r3, r3, r8
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800671c:	6003      	str	r3, [r0, #0]
 800671e:	e017      	b.n	8006750 <FMC_SDRAM_Init+0x7c>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006720:	ea4e 0e03 	orr.w	lr, lr, r3
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006724:	ea4a 0202 	orr.w	r2, sl, r2
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006728:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800672c:	ea4e 0707 	orr.w	r7, lr, r7
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006730:	ea42 0909 	orr.w	r9, r2, r9
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006734:	6842      	ldr	r2, [r0, #4]
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006736:	433e      	orrs	r6, r7
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006738:	ea49 0101 	orr.w	r1, r9, r1
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800673c:	f422 4cff 	bic.w	ip, r2, #32640	; 0x7f80
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006740:	4335      	orrs	r5, r6
                       Init->MemoryDataWidth     |\
                       Init->InternalBankNumber  |\
                       Init->CASLatency          |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006742:	6001      	str	r1, [r0, #0]
                        Init->ReadPipeDelay);
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006744:	f02c 0c7f 	bic.w	ip, ip, #127	; 0x7f
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006748:	432c      	orrs	r4, r5
 800674a:	ea44 040c 	orr.w	r4, r4, ip
                       Init->InternalBankNumber  |\
                       Init->CASLatency          |\
                       Init->WriteProtection);

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800674e:	6044      	str	r4, [r0, #4]
  }
  
  return HAL_OK;
}
 8006750:	2000      	movs	r0, #0
 8006752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006756 <FMC_SDRAM_Timing_Init>:
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Bank: SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006756:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006758:	2a01      	cmp	r2, #1
 800675a:	f101 0404 	add.w	r4, r1, #4
 800675e:	680e      	ldr	r6, [r1, #0]
 8006760:	690a      	ldr	r2, [r1, #16]
 8006762:	f8d1 e014 	ldr.w	lr, [r1, #20]
 8006766:	698b      	ldr	r3, [r1, #24]
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006768:	6887      	ldr	r7, [r0, #8]
 800676a:	e894 1030 	ldmia.w	r4, {r4, r5, ip}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800676e:	d019      	beq.n	80067a4 <FMC_SDRAM_Timing_Init+0x4e>
 8006770:	3e01      	subs	r6, #1
 8006772:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
 8006776:	3c01      	subs	r4, #1
 8006778:	3d01      	subs	r5, #1
 800677a:	4337      	orrs	r7, r6
 800677c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8006780:	3a01      	subs	r2, #1
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006782:	3b01      	subs	r3, #1
 8006784:	ea47 1604 	orr.w	r6, r7, r4, lsl #4
 8006788:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
 800678c:	ea45 3401 	orr.w	r4, r5, r1, lsl #12
 8006790:	ea44 4102 	orr.w	r1, r4, r2, lsl #16
 8006794:	f10e 32ff 	add.w	r2, lr, #4294967295
 8006798:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
 800679c:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80067a0:	6083      	str	r3, [r0, #8]
 80067a2:	e022      	b.n	80067ea <FMC_SDRAM_Timing_Init+0x94>
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80067a4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80067a8:	f10c 31ff 	add.w	r1, ip, #4294967295
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80067ac:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 80067b0:	3e01      	subs	r6, #1
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80067b2:	ea4f 5c0e 	mov.w	ip, lr, lsl #20
 80067b6:	3c01      	subs	r4, #1
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80067b8:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
 80067bc:	3a01      	subs	r2, #1
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80067be:	ea4c 3e01 	orr.w	lr, ip, r1, lsl #12
                        (((Timing->RPDelay)-1) << 20)); 
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80067c2:	68c1      	ldr	r1, [r0, #12]
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80067c4:	3b01      	subs	r3, #1
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80067c6:	ea4e 0c07 	orr.w	ip, lr, r7
 80067ca:	f001 4e70 	and.w	lr, r1, #4026531840	; 0xf0000000
 80067ce:	ea46 070e 	orr.w	r7, r6, lr
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
                       (((Timing->RCDDelay)-1) << 24));   

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80067d2:	f8c0 c008 	str.w	ip, [r0, #8]
 80067d6:	ea47 1604 	orr.w	r6, r7, r4, lsl #4
 80067da:	1e6c      	subs	r4, r5, #1
 80067dc:	ea46 2404 	orr.w	r4, r6, r4, lsl #8
 80067e0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80067e4:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
                       (((Timing->RCDDelay)-1) << 24));   

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80067e8:	60c3      	str	r3, [r0, #12]
  }
  
  return HAL_OK;
}
 80067ea:	2000      	movs	r0, #0
 80067ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067ee <FMC_SDRAM_SendCommand>:
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
  __IO uint32_t tmpr = 0;
 80067ee:	2300      	movs	r3, #0
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80067f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067f2:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 80067f4:	9301      	str	r3, [sp, #4]
  * @param  Timing: Pointer to SDRAM Timing structure
  * @param  Timeout: Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80067f6:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80067f8:	e891 0009 	ldmia.w	r1, {r0, r3}
 80067fc:	4303      	orrs	r3, r0
 80067fe:	68c8      	ldr	r0, [r1, #12]
 8006800:	ea43 2040 	orr.w	r0, r3, r0, lsl #9
 8006804:	688b      	ldr	r3, [r1, #8]
 8006806:	3b01      	subs	r3, #1
 8006808:	ea40 1343 	orr.w	r3, r0, r3, lsl #5
 800680c:	9301      	str	r3, [sp, #4]
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
                    );
    
  Device->SDCMR = tmpr;
 800680e:	9b01      	ldr	r3, [sp, #4]
 8006810:	6123      	str	r3, [r4, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006812:	f7fc feb5 	bl	8003580 <HAL_GetTick>
 8006816:	4606      	mov	r6, r0

  /* wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006818:	69a0      	ldr	r0, [r4, #24]
 800681a:	f010 0020 	ands.w	r0, r0, #32
 800681e:	d00a      	beq.n	8006836 <FMC_SDRAM_SendCommand+0x48>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006820:	1c6b      	adds	r3, r5, #1
 8006822:	d0f9      	beq.n	8006818 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8006824:	b90d      	cbnz	r5, 800682a <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 8006826:	2003      	movs	r0, #3
 8006828:	e005      	b.n	8006836 <FMC_SDRAM_SendCommand+0x48>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800682a:	f7fc fea9 	bl	8003580 <HAL_GetTick>
 800682e:	1b80      	subs	r0, r0, r6
 8006830:	4285      	cmp	r5, r0
 8006832:	d2f1      	bcs.n	8006818 <FMC_SDRAM_SendCommand+0x2a>
 8006834:	e7f7      	b.n	8006826 <FMC_SDRAM_SendCommand+0x38>
      }
    }     
  }
  
  return HAL_OK;  
}
 8006836:	b002      	add	sp, #8
 8006838:	bd70      	pop	{r4, r5, r6, pc}

0800683a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800683a:	6943      	ldr	r3, [r0, #20]
 800683c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8006840:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8006842:	2000      	movs	r0, #0
 8006844:	4770      	bx	lr

08006846 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006846:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006848:	f001 fa68 	bl	8007d1c <vTaskStartScheduler>
  
  return osOK;
}
 800684c:	2000      	movs	r0, #0
 800684e:	bd08      	pop	{r3, pc}

08006850 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006850:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006852:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006856:	b086      	sub	sp, #24
 8006858:	2500      	movs	r5, #0
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800685a:	8a02      	ldrh	r2, [r0, #16]
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800685c:	2c84      	cmp	r4, #132	; 0x84
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800685e:	460b      	mov	r3, r1
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 8006860:	bf14      	ite	ne
 8006862:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006864:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006866:	e890 0042 	ldmia.w	r0, {r1, r6}
 800686a:	a805      	add	r0, sp, #20
 800686c:	9503      	str	r5, [sp, #12]
 800686e:	9502      	str	r5, [sp, #8]
 8006870:	9001      	str	r0, [sp, #4]
 8006872:	4630      	mov	r0, r6
 8006874:	9400      	str	r4, [sp, #0]
 8006876:	f001 f9c8 	bl	8007c0a <xTaskGenericCreate>
 800687a:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 800687c:	bf0c      	ite	eq
 800687e:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8006880:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8006882:	b006      	add	sp, #24
 8006884:	bd70      	pop	{r4, r5, r6, pc}

08006886 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8006886:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8006888:	f001 f9e2 	bl	8007c50 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 800688c:	2000      	movs	r0, #0
 800688e:	bd08      	pop	{r3, pc}

08006890 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006890:	2800      	cmp	r0, #0
 8006892:	bf08      	it	eq
 8006894:	2001      	moveq	r0, #1
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006896:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006898:	f001 fb9c 	bl	8007fd4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800689c:	2000      	movs	r0, #0
 800689e:	bd08      	pop	{r3, pc}

080068a0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval  osOK if successful, osErrorOS if failed .
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80068a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80068a2:	2400      	movs	r4, #0
 80068a4:	9403      	str	r4, [sp, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a6:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode())
 80068aa:	b1ab      	cbz	r3, 80068d8 <osSignalSet+0x38>
  {
    if(xTaskNotifyFromISR( thread_id, (uint32_t)signal, eSetBits, &xHigherPriorityTaskWoken ) != pdPASS )
 80068ac:	ab03      	add	r3, sp, #12
 80068ae:	2201      	movs	r2, #1
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	4623      	mov	r3, r4
 80068b4:	f001 fea0 	bl	80085f8 <xTaskGenericNotifyFromISR>
 80068b8:	2801      	cmp	r0, #1
 80068ba:	d001      	beq.n	80068c0 <osSignalSet+0x20>
      return osErrorOS;
 80068bc:	20ff      	movs	r0, #255	; 0xff
 80068be:	e011      	b.n	80068e4 <osSignalSet+0x44>

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	b173      	cbz	r3, 80068e2 <osSignalSet+0x42>
 80068c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c8:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <osSignalSet+0x48>)
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	f3bf 8f6f 	isb	sy
  else if(xTaskNotify( thread_id, (uint32_t)signal, eSetBits) != pdPASS )
  {
    return osErrorOS;
  }
  
  return osOK;
 80068d4:	4620      	mov	r0, r4
 80068d6:	e005      	b.n	80068e4 <osSignalSet+0x44>
    if(xTaskNotifyFromISR( thread_id, (uint32_t)signal, eSetBits, &xHigherPriorityTaskWoken ) != pdPASS )
      return osErrorOS;

    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
  }  
  else if(xTaskNotify( thread_id, (uint32_t)signal, eSetBits) != pdPASS )
 80068d8:	2201      	movs	r2, #1
 80068da:	f001 fe21 	bl	8008520 <xTaskGenericNotify>
 80068de:	2801      	cmp	r0, #1
 80068e0:	d1ec      	bne.n	80068bc <osSignalSet+0x1c>
  {
    return osErrorOS;
  }
  
  return osOK;
 80068e2:	2000      	movs	r0, #0
  (void) thread_id;
  (void) signal;

  return osErrorOS; /* Task Notification not supported */ 	
#endif
}
 80068e4:	b004      	add	sp, #16
 80068e6:	bd10      	pop	{r4, pc}
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80068ec:	b530      	push	{r4, r5, lr}

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80068ee:	2300      	movs	r3, #0
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 80068f0:	b085      	sub	sp, #20
 80068f2:	4604      	mov	r4, r0
 80068f4:	4615      	mov	r5, r2

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 80068f6:	9302      	str	r3, [sp, #8]
 80068f8:	f3ef 8005 	mrs	r0, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }  
  
  if (inHandlerMode())
 80068fc:	b108      	cbz	r0, 8006902 <osSignalWait+0x16>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80068fe:	2382      	movs	r3, #130	; 0x82
 8006900:	e00f      	b.n	8006922 <osSignalWait+0x36>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8006902:	4613      	mov	r3, r2
 8006904:	aa02      	add	r2, sp, #8
 8006906:	f001 fda5 	bl	8008454 <xTaskNotifyWait>
 800690a:	2801      	cmp	r0, #1
 800690c:	d004      	beq.n	8006918 <osSignalWait+0x2c>
    {
      if(ticks == 0)  ret.status = osOK;
 800690e:	b90d      	cbnz	r5, 8006914 <osSignalWait+0x28>
 8006910:	9501      	str	r5, [sp, #4]
 8006912:	e007      	b.n	8006924 <osSignalWait+0x38>
      else  ret.status = osEventTimeout;
 8006914:	2340      	movs	r3, #64	; 0x40
 8006916:	e004      	b.n	8006922 <osSignalWait+0x36>
    }
    else if(ret.value.signals < 0)
 8006918:	9b02      	ldr	r3, [sp, #8]
 800691a:	2b00      	cmp	r3, #0
    {
      ret.status =  osErrorValue;     
 800691c:	bfb4      	ite	lt
 800691e:	2386      	movlt	r3, #134	; 0x86
    }
    else  ret.status =  osEventSignal;
 8006920:	2308      	movge	r3, #8
 8006922:	9301      	str	r3, [sp, #4]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8006924:	ab04      	add	r3, sp, #16
 8006926:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800692a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800692e:	4620      	mov	r0, r4
 8006930:	b005      	add	sp, #20
 8006932:	bd30      	pop	{r4, r5, pc}

08006934 <osMutexCreate>:
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
#if ( configUSE_MUTEXES == 1)
  return xSemaphoreCreateMutex(); 
 8006934:	2001      	movs	r0, #1
 8006936:	f000 be19 	b.w	800756c <xQueueCreateMutex>
	...

0800693c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800693c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800693e:	2400      	movs	r4, #0
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006940:	460a      	mov	r2, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006942:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8006944:	b1e8      	cbz	r0, 8006982 <osMutexWait+0x46>
 8006946:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800694a:	b19b      	cbz	r3, 8006974 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800694c:	aa01      	add	r2, sp, #4
 800694e:	4621      	mov	r1, r4
 8006950:	f000 ffae 	bl	80078b0 <xQueueReceiveFromISR>
 8006954:	2801      	cmp	r0, #1
 8006956:	d001      	beq.n	800695c <osMutexWait+0x20>
      return osErrorOS;
 8006958:	20ff      	movs	r0, #255	; 0xff
 800695a:	e013      	b.n	8006984 <osMutexWait+0x48>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800695c:	9b01      	ldr	r3, [sp, #4]
 800695e:	b173      	cbz	r3, 800697e <osMutexWait+0x42>
 8006960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <osMutexWait+0x4c>)
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8006970:	4620      	mov	r0, r4
 8006972:	e007      	b.n	8006984 <osMutexWait+0x48>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006974:	4619      	mov	r1, r3
 8006976:	f000 fedf 	bl	8007738 <xQueueGenericReceive>
 800697a:	2801      	cmp	r0, #1
 800697c:	d1ec      	bne.n	8006958 <osMutexWait+0x1c>
    return osErrorOS;
  }
  
  return osOK;
 800697e:	2000      	movs	r0, #0
 8006980:	e000      	b.n	8006984 <osMutexWait+0x48>
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
  
  
  if (mutex_id == NULL) {
    return osErrorParameter;
 8006982:	2080      	movs	r0, #128	; 0x80
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8006984:	b002      	add	sp, #8
 8006986:	bd10      	pop	{r4, pc}
 8006988:	e000ed04 	.word	0xe000ed04

0800698c <osSemaphoreCreate>:
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800698c:	2901      	cmp	r1, #1
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800698e:	4608      	mov	r0, r1
 8006990:	b510      	push	{r4, lr}
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 8006992:	d10b      	bne.n	80069ac <osSemaphoreCreate+0x20>
    vSemaphoreCreateBinary(sema);
 8006994:	2203      	movs	r2, #3
 8006996:	2100      	movs	r1, #0
 8006998:	f000 fcf8 	bl	800738c <xQueueGenericCreate>
 800699c:	4604      	mov	r4, r0
 800699e:	b138      	cbz	r0, 80069b0 <osSemaphoreCreate+0x24>
 80069a0:	2300      	movs	r3, #0
 80069a2:	461a      	mov	r2, r3
 80069a4:	4619      	mov	r1, r3
 80069a6:	f000 fd27 	bl	80073f8 <xQueueGenericSend>
 80069aa:	e001      	b.n	80069b0 <osSemaphoreCreate+0x24>
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
#else
  return NULL;
 80069ac:	2000      	movs	r0, #0
 80069ae:	bd10      	pop	{r4, pc}
 80069b0:	4620      	mov	r0, r4
#endif
}
 80069b2:	bd10      	pop	{r4, pc}

080069b4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80069b4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80069b6:	2400      	movs	r4, #0
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80069b8:	460a      	mov	r2, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80069ba:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80069bc:	b1e8      	cbz	r0, 80069fa <osSemaphoreWait+0x46>
 80069be:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80069c2:	b19b      	cbz	r3, 80069ec <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80069c4:	aa01      	add	r2, sp, #4
 80069c6:	4621      	mov	r1, r4
 80069c8:	f000 ff72 	bl	80078b0 <xQueueReceiveFromISR>
 80069cc:	2801      	cmp	r0, #1
 80069ce:	d001      	beq.n	80069d4 <osSemaphoreWait+0x20>
      return osErrorOS;
 80069d0:	20ff      	movs	r0, #255	; 0xff
 80069d2:	e013      	b.n	80069fc <osSemaphoreWait+0x48>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	b173      	cbz	r3, 80069f6 <osSemaphoreWait+0x42>
 80069d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069dc:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <osSemaphoreWait+0x4c>)
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80069e8:	4620      	mov	r0, r4
 80069ea:	e007      	b.n	80069fc <osSemaphoreWait+0x48>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80069ec:	4619      	mov	r1, r3
 80069ee:	f000 fea3 	bl	8007738 <xQueueGenericReceive>
 80069f2:	2801      	cmp	r0, #1
 80069f4:	d1ec      	bne.n	80069d0 <osSemaphoreWait+0x1c>
    return osErrorOS;
  }
  
  return osOK;
 80069f6:	2000      	movs	r0, #0
 80069f8:	e000      	b.n	80069fc <osSemaphoreWait+0x48>
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
  
  
  if (semaphore_id == NULL) {
    return osErrorParameter;
 80069fa:	2080      	movs	r0, #128	; 0x80
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80069fc:	b002      	add	sp, #8
 80069fe:	bd10      	pop	{r4, pc}
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006a04:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8006a06:	2400      	movs	r4, #0
 8006a08:	9401      	str	r4, [sp, #4]
 8006a0a:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8006a0e:	b18b      	cbz	r3, 8006a34 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006a10:	a901      	add	r1, sp, #4
 8006a12:	f000 fe38 	bl	8007686 <xQueueGiveFromISR>
 8006a16:	2801      	cmp	r0, #1
 8006a18:	d112      	bne.n	8006a40 <osSemaphoreRelease+0x3c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a1a:	9b01      	ldr	r3, [sp, #4]
 8006a1c:	b90b      	cbnz	r3, 8006a22 <osSemaphoreRelease+0x1e>
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
  osStatus result = osOK;
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e00f      	b.n	8006a42 <osSemaphoreRelease+0x3e>
  
  if (inHandlerMode()) {
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a26:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <osSemaphoreRelease+0x44>)
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	e7f4      	b.n	8006a1e <osSemaphoreRelease+0x1a>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006a34:	461a      	mov	r2, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	f000 fcde 	bl	80073f8 <xQueueGenericSend>
 8006a3c:	2801      	cmp	r0, #1
 8006a3e:	d0ee      	beq.n	8006a1e <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8006a40:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 8006a42:	b002      	add	sp, #8
 8006a44:	bd10      	pop	{r4, pc}
 8006a46:	bf00      	nop
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <osMutexRelease>:
 8006a4c:	f7ff bfda 	b.w	8006a04 <osSemaphoreRelease>

08006a50 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8006a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006a54:	6846      	ldr	r6, [r0, #4]
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8006a56:	4607      	mov	r7, r0
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8006a58:	2014      	movs	r0, #20
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006a5a:	3603      	adds	r6, #3
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8006a5c:	f000 fb04 	bl	8007068 <pvPortMalloc>
  if (thePool) {
 8006a60:	4604      	mov	r4, r0
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8006a62:	f026 0603 	bic.w	r6, r6, #3
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
  if (thePool) {
 8006a66:	b328      	cbz	r0, 8006ab4 <osPoolCreate+0x64>
    thePool->pool_sz = pool_def->pool_sz;
 8006a68:	6838      	ldr	r0, [r7, #0]
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8006a6a:	2500      	movs	r5, #0
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
  if (thePool) {
    thePool->pool_sz = pool_def->pool_sz;
    thePool->item_sz = itemSize;
 8006a6c:	60e6      	str	r6, [r4, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
  thePool = pvPortMalloc(sizeof(os_pool_cb_t));
  if (thePool) {
    thePool->pool_sz = pool_def->pool_sz;
 8006a6e:	60a0      	str	r0, [r4, #8]
    thePool->item_sz = itemSize;
    thePool->currentIndex = 0;
 8006a70:	6125      	str	r5, [r4, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8006a72:	f000 faf9 	bl	8007068 <pvPortMalloc>
 8006a76:	4680      	mov	r8, r0
 8006a78:	6060      	str	r0, [r4, #4]
    if (thePool->markers) {
 8006a7a:	b1b8      	cbz	r0, 8006aac <osPoolCreate+0x5c>
      /* Now allocate the pool itself. */
      thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8006a7c:	6838      	ldr	r0, [r7, #0]
 8006a7e:	4370      	muls	r0, r6
 8006a80:	f000 faf2 	bl	8007068 <pvPortMalloc>
 8006a84:	4606      	mov	r6, r0
 8006a86:	6020      	str	r0, [r4, #0]
      
      if (thePool->pool) {
 8006a88:	b140      	cbz	r0, 8006a9c <osPoolCreate+0x4c>
 8006a8a:	462b      	mov	r3, r5
        for (i = 0; i < pool_def->pool_sz; i++) {
          thePool->markers[i] = 0;
 8006a8c:	4629      	mov	r1, r5
    if (thePool->markers) {
      /* Now allocate the pool itself. */
      thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
      
      if (thePool->pool) {
        for (i = 0; i < pool_def->pool_sz; i++) {
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d20f      	bcs.n	8006ab4 <osPoolCreate+0x64>
          thePool->markers[i] = 0;
 8006a94:	6862      	ldr	r2, [r4, #4]
 8006a96:	54d1      	strb	r1, [r2, r3]
    if (thePool->markers) {
      /* Now allocate the pool itself. */
      thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
      
      if (thePool->pool) {
        for (i = 0; i < pool_def->pool_sz; i++) {
 8006a98:	3301      	adds	r3, #1
 8006a9a:	e7f8      	b.n	8006a8e <osPoolCreate+0x3e>
          thePool->markers[i] = 0;
        }
      }
      else {
        vPortFree(thePool->markers);
 8006a9c:	6860      	ldr	r0, [r4, #4]
 8006a9e:	f000 fb79 	bl	8007194 <vPortFree>
        vPortFree(thePool);
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f000 fb76 	bl	8007194 <vPortFree>
        thePool = NULL;
 8006aa8:	4634      	mov	r4, r6
 8006aaa:	e003      	b.n	8006ab4 <osPoolCreate+0x64>
      }
    }
    else {
      vPortFree(thePool);
 8006aac:	4620      	mov	r0, r4
      thePool = NULL;
 8006aae:	4644      	mov	r4, r8
        vPortFree(thePool);
        thePool = NULL;
      }
    }
    else {
      vPortFree(thePool);
 8006ab0:	f000 fb70 	bl	8007194 <vPortFree>
      thePool = NULL;
    }
  }
  
  return thePool;
}
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006aba <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8006aba:	b570      	push	{r4, r5, r6, lr}
 8006abc:	4605      	mov	r5, r0
 8006abe:	f3ef 8405 	mrs	r4, IPSR
  int dummy = 0;
  void *p = NULL;
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8006ac2:	b164      	cbz	r4, 8006ade <osPoolAlloc+0x24>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ac4:	f3ef 8411 	mrs	r4, BASEPRI
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	b672      	cpsid	i
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	b662      	cpsie	i
 8006adc:	e001      	b.n	8006ae2 <osPoolAlloc+0x28>
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
  }
  else {
    vPortEnterCritical();
 8006ade:	f000 f97d 	bl	8006ddc <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006ae2:	68a9      	ldr	r1, [r5, #8]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	428a      	cmp	r2, r1
 8006ae8:	d012      	beq.n	8006b10 <osPoolAlloc+0x56>
    index = pool_id->currentIndex + i;
 8006aea:	692b      	ldr	r3, [r5, #16]
    if (index >= pool_id->pool_sz) {
      index = 0;
    }
    
    if (pool_id->markers[index] == 0) {
 8006aec:	6868      	ldr	r0, [r5, #4]
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
    index = pool_id->currentIndex + i;
 8006aee:	4413      	add	r3, r2
    if (index >= pool_id->pool_sz) {
      index = 0;
 8006af0:	4299      	cmp	r1, r3
 8006af2:	bf98      	it	ls
 8006af4:	2300      	movls	r3, #0
    }
    
    if (pool_id->markers[index] == 0) {
 8006af6:	18c6      	adds	r6, r0, r3
 8006af8:	5cc0      	ldrb	r0, [r0, r3]
 8006afa:	b938      	cbnz	r0, 8006b0c <osPoolAlloc+0x52>
      pool_id->markers[index] = 1;
 8006afc:	2201      	movs	r2, #1
 8006afe:	7032      	strb	r2, [r6, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8006b00:	68ea      	ldr	r2, [r5, #12]
 8006b02:	682e      	ldr	r6, [r5, #0]
      pool_id->currentIndex = index;
 8006b04:	612b      	str	r3, [r5, #16]
      index = 0;
    }
    
    if (pool_id->markers[index] == 0) {
      pool_id->markers[index] = 1;
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8006b06:	fb02 6603 	mla	r6, r2, r3, r6
      pool_id->currentIndex = index;
      break;
 8006b0a:	e002      	b.n	8006b12 <osPoolAlloc+0x58>
  }
  else {
    vPortEnterCritical();
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8006b0c:	3201      	adds	r2, #1
 8006b0e:	e7ea      	b.n	8006ae6 <osPoolAlloc+0x2c>
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
  int dummy = 0;
  void *p = NULL;
 8006b10:	2600      	movs	r6, #0
 8006b12:	f3ef 8305 	mrs	r3, IPSR
      pool_id->currentIndex = index;
      break;
    }
  }
  
  if (inHandlerMode()) {
 8006b16:	b113      	cbz	r3, 8006b1e <osPoolAlloc+0x64>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b18:	f384 8811 	msr	BASEPRI, r4
 8006b1c:	e001      	b.n	8006b22 <osPoolAlloc+0x68>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
  }
  else {
    vPortExitCritical();
 8006b1e:	f000 f983 	bl	8006e28 <vPortExitCritical>
  }
  
  return p;
}
 8006b22:	4630      	mov	r0, r6
 8006b24:	bd70      	pop	{r4, r5, r6, pc}

08006b26 <osPoolCAlloc>:
* @param  pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolCAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolCAlloc (osPoolId pool_id)
{
 8006b26:	b508      	push	{r3, lr}
  void *p = osPoolAlloc(pool_id);
 8006b28:	f7ff ffc7 	bl	8006aba <osPoolAlloc>
  
  if (p != NULL)
 8006b2c:	b108      	cbz	r0, 8006b32 <osPoolCAlloc+0xc>
  {
    memset(p, 0, sizeof(pool_id->pool_sz));
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6003      	str	r3, [r0, #0]
  }
  
  return p;
}
 8006b32:	bd08      	pop	{r3, pc}

08006b34 <osPoolFree>:
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
 8006b34:	b188      	cbz	r0, 8006b5a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block == NULL) {
 8006b36:	b181      	cbz	r1, 8006b5a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  if (block < pool_id->pool) {
 8006b38:	6803      	ldr	r3, [r0, #0]
 8006b3a:	4299      	cmp	r1, r3
 8006b3c:	d30d      	bcc.n	8006b5a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8006b3e:	1ac9      	subs	r1, r1, r3
  if (index % pool_id->item_sz) {
 8006b40:	68c3      	ldr	r3, [r0, #12]
 8006b42:	fbb1 f2f3 	udiv	r2, r1, r3
 8006b46:	fb03 1112 	mls	r1, r3, r2, r1
 8006b4a:	b931      	cbnz	r1, 8006b5a <osPoolFree+0x26>
    return osErrorParameter;
  }
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
 8006b4c:	6883      	ldr	r3, [r0, #8]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d203      	bcs.n	8006b5a <osPoolFree+0x26>
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8006b52:	6843      	ldr	r3, [r0, #4]
  
  return osOK;
 8006b54:	4608      	mov	r0, r1
  index = index / pool_id->item_sz;
  if (index >= pool_id->pool_sz) {
    return osErrorParameter;
  }
  
  pool_id->markers[index] = 0;
 8006b56:	5499      	strb	r1, [r3, r2]
 8006b58:	4770      	bx	lr
osStatus osPoolFree (osPoolId pool_id, void *block)
{
  uint32_t index;
  
  if (pool_id == NULL) {
    return osErrorParameter;
 8006b5a:	2080      	movs	r0, #128	; 0x80
  }
  
  pool_id->markers[index] = 0;
  
  return osOK;
}
 8006b5c:	4770      	bx	lr

08006b5e <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8006b5e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006b60:	6803      	ldr	r3, [r0, #0]
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8006b62:	4605      	mov	r5, r0
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
  
  
  /* Create a mail queue control block */
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006b64:	6886      	ldr	r6, [r0, #8]
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006b66:	2400      	movs	r4, #0
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	6843      	ldr	r3, [r0, #4]
  
  
  /* Create a mail queue control block */
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006b6c:	200c      	movs	r0, #12
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8006b6e:	9403      	str	r4, [sp, #12]
 8006b70:	9302      	str	r3, [sp, #8]
  
  
  /* Create a mail queue control block */
  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8006b72:	f000 fa79 	bl	8007068 <pvPortMalloc>
 8006b76:	6030      	str	r0, [r6, #0]
  if (*(queue_def->cb) == NULL) {
 8006b78:	68ab      	ldr	r3, [r5, #8]
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	b1c0      	cbz	r0, 8006bb0 <osMailCreate+0x52>
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8006b7e:	6005      	str	r5, [r0, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006b80:	4622      	mov	r2, r4
 8006b82:	2104      	movs	r1, #4
 8006b84:	6828      	ldr	r0, [r5, #0]
 8006b86:	681e      	ldr	r6, [r3, #0]
 8006b88:	f000 fc00 	bl	800738c <xQueueGenericCreate>
  if ((*(queue_def->cb))->handle == NULL) {
 8006b8c:	68ab      	ldr	r3, [r5, #8]
    return NULL;
  }
  (*(queue_def->cb))->queue_def = queue_def;
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8006b8e:	6070      	str	r0, [r6, #4]
  if ((*(queue_def->cb))->handle == NULL) {
 8006b90:	681e      	ldr	r6, [r3, #0]
 8006b92:	6874      	ldr	r4, [r6, #4]
 8006b94:	b90c      	cbnz	r4, 8006b9a <osMailCreate+0x3c>
    vPortFree(*(queue_def->cb));
 8006b96:	4630      	mov	r0, r6
 8006b98:	e007      	b.n	8006baa <osMailCreate+0x4c>
    return NULL;
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8006b9a:	a801      	add	r0, sp, #4
 8006b9c:	f7ff ff58 	bl	8006a50 <osPoolCreate>
  if ((*(queue_def->cb))->pool == NULL) {
 8006ba0:	68ab      	ldr	r3, [r5, #8]
    vPortFree(*(queue_def->cb));
    return NULL;
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8006ba2:	60b0      	str	r0, [r6, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	6884      	ldr	r4, [r0, #8]
 8006ba8:	b914      	cbnz	r4, 8006bb0 <osMailCreate+0x52>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8006baa:	f000 faf3 	bl	8007194 <vPortFree>
    return NULL;
 8006bae:	4620      	mov	r0, r4
  }
  
  return *(queue_def->cb);
}
 8006bb0:	b004      	add	sp, #16
 8006bb2:	bd70      	pop	{r4, r5, r6, pc}

08006bb4 <osMailAlloc>:
{
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8006bb4:	b110      	cbz	r0, 8006bbc <osMailAlloc+0x8>
    return NULL;
  }
  
  p = osPoolAlloc(queue_id->pool);
 8006bb6:	6880      	ldr	r0, [r0, #8]
 8006bb8:	f7ff bf7f 	b.w	8006aba <osPoolAlloc>
  
  return p;
}
 8006bbc:	4770      	bx	lr
	...

08006bc0 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8006bc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bc2:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8006bc4:	b318      	cbz	r0, 8006c0e <osMailPut+0x4e>
    return osErrorParameter;
  }
  
  taskWoken = pdFALSE;
 8006bc6:	2400      	movs	r4, #0
 8006bc8:	9403      	str	r4, [sp, #12]
 8006bca:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8006bce:	b1ab      	cbz	r3, 8006bfc <osMailPut+0x3c>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8006bd0:	4623      	mov	r3, r4
 8006bd2:	aa03      	add	r2, sp, #12
 8006bd4:	a901      	add	r1, sp, #4
 8006bd6:	6840      	ldr	r0, [r0, #4]
 8006bd8:	f000 fcf1 	bl	80075be <xQueueGenericSendFromISR>
 8006bdc:	2801      	cmp	r0, #1
 8006bde:	d001      	beq.n	8006be4 <osMailPut+0x24>
      return osErrorOS;
 8006be0:	20ff      	movs	r0, #255	; 0xff
 8006be2:	e015      	b.n	8006c10 <osMailPut+0x50>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	b183      	cbz	r3, 8006c0a <osMailPut+0x4a>
 8006be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bec:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <osMailPut+0x54>)
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
      return osErrorOS;
    }
  }
  
  return osOK;
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	e009      	b.n	8006c10 <osMailPut+0x50>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	a901      	add	r1, sp, #4
 8006c00:	6840      	ldr	r0, [r0, #4]
 8006c02:	f000 fbf9 	bl	80073f8 <xQueueGenericSend>
 8006c06:	2801      	cmp	r0, #1
 8006c08:	d1ea      	bne.n	8006be0 <osMailPut+0x20>
      return osErrorOS;
    }
  }
  
  return osOK;
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	e000      	b.n	8006c10 <osMailPut+0x50>
{
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
    return osErrorParameter;
 8006c0e:	2080      	movs	r0, #128	; 0x80
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8006c10:	b004      	add	sp, #16
 8006c12:	bd10      	pop	{r4, pc}
 8006c14:	e000ed04 	.word	0xe000ed04

08006c18 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8006c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	4617      	mov	r7, r2
 8006c20:	4608      	mov	r0, r1
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8006c22:	9103      	str	r1, [sp, #12]
 8006c24:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8006c26:	b909      	cbnz	r1, 8006c2c <osMailGet+0x14>
    event.status = osErrorParameter;
 8006c28:	2380      	movs	r3, #128	; 0x80
 8006c2a:	e025      	b.n	8006c78 <osMailGet+0x60>
    return event;
  }
  
  taskWoken = pdFALSE;
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	9600      	str	r6, [sp, #0]
 8006c30:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8006c34:	b1a3      	cbz	r3, 8006c60 <osMailGet+0x48>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8006c36:	466a      	mov	r2, sp
 8006c38:	a902      	add	r1, sp, #8
 8006c3a:	6840      	ldr	r0, [r0, #4]
 8006c3c:	f000 fe38 	bl	80078b0 <xQueueReceiveFromISR>
 8006c40:	2801      	cmp	r0, #1
      /* We have mail */
      event.status = osEventMail;
 8006c42:	bf0a      	itet	eq
 8006c44:	2320      	moveq	r3, #32
    }
    else {
      event.status = osOK;
 8006c46:	9601      	strne	r6, [sp, #4]
  }
  
  if (inHandlerMode()) {
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
      /* We have mail */
      event.status = osEventMail;
 8006c48:	9301      	streq	r3, [sp, #4]
    }
    else {
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006c4a:	9b00      	ldr	r3, [sp, #0]
 8006c4c:	b1ab      	cbz	r3, 8006c7a <osMailGet+0x62>
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c52:	4b0d      	ldr	r3, [pc, #52]	; (8006c88 <osMailGet+0x70>)
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	e00c      	b.n	8006c7a <osMailGet+0x62>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8006c60:	a902      	add	r1, sp, #8
 8006c62:	6840      	ldr	r0, [r0, #4]
 8006c64:	f000 fd68 	bl	8007738 <xQueueGenericReceive>
 8006c68:	2801      	cmp	r0, #1
 8006c6a:	d101      	bne.n	8006c70 <osMailGet+0x58>
      /* We have mail */
      event.status = osEventMail;
 8006c6c:	2320      	movs	r3, #32
 8006c6e:	e003      	b.n	8006c78 <osMailGet+0x60>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006c70:	2f00      	cmp	r7, #0
 8006c72:	bf0c      	ite	eq
 8006c74:	2300      	moveq	r3, #0
 8006c76:	2340      	movne	r3, #64	; 0x40
 8006c78:	9301      	str	r3, [sp, #4]
    }
  }
  
  return event;
 8006c7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006c82:	4620      	mov	r0, r4
 8006c84:	b005      	add	sp, #20
 8006c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c88:	e000ed04 	.word	0xe000ed04

08006c8c <osMailFree>:
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
  if (queue_id == NULL) {
 8006c8c:	b110      	cbz	r0, 8006c94 <osMailFree+0x8>
    return osErrorParameter;
  }
  
  return osPoolFree(queue_id->pool, mail);
 8006c8e:	6880      	ldr	r0, [r0, #8]
 8006c90:	f7ff bf50 	b.w	8006b34 <osPoolFree>
}
 8006c94:	2080      	movs	r0, #128	; 0x80
 8006c96:	4770      	bx	lr

08006c98 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006c98:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006c9a:	f001 fb25 	bl	80082e8 <xTaskGetSchedulerState>
 8006c9e:	2801      	cmp	r0, #1
 8006ca0:	d003      	beq.n	8006caa <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8006ca6:	f000 b907 	b.w	8006eb8 <xPortSysTickHandler>
 8006caa:	bd08      	pop	{r3, pc}

08006cac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cac:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb4:	6043      	str	r3, [r0, #4]
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cba:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cbc:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cbe:	6003      	str	r3, [r0, #0]
 8006cc0:	4770      	bx	lr

08006cc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6103      	str	r3, [r0, #16]
 8006cc6:	4770      	bx	lr

08006cc8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cc8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cca:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ccc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cce:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cd4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006cd6:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006cd8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006cda:	3301      	adds	r3, #1
 8006cdc:	6003      	str	r3, [r0, #0]
 8006cde:	4770      	bx	lr

08006ce0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ce0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ce2:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ce4:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ce6:	d101      	bne.n	8006cec <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ce8:	6903      	ldr	r3, [r0, #16]
 8006cea:	e007      	b.n	8006cfc <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cec:	f100 0308 	add.w	r3, r0, #8
 8006cf0:	685c      	ldr	r4, [r3, #4]
 8006cf2:	6825      	ldr	r5, [r4, #0]
 8006cf4:	42aa      	cmp	r2, r5
 8006cf6:	d301      	bcc.n	8006cfc <vListInsert+0x1c>
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	e7f9      	b.n	8006cf0 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d00:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d02:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d04:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006d06:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006d08:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	6003      	str	r3, [r0, #0]
 8006d0e:	bd30      	pop	{r4, r5, pc}

08006d10 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d10:	6841      	ldr	r1, [r0, #4]
 8006d12:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006d14:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d16:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d18:	6882      	ldr	r2, [r0, #8]
 8006d1a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d1c:	6859      	ldr	r1, [r3, #4]
 8006d1e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d20:	bf08      	it	eq
 8006d22:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006d24:	2200      	movs	r2, #0
 8006d26:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	3801      	subs	r0, #1
 8006d2c:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8006d2e:	4770      	bx	lr

08006d30 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d30:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <prvTaskExitError+0x34>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	d00a      	beq.n	8006d4e <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	b672      	cpsid	i
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	b662      	cpsie	i
 8006d4c:	e7fe      	b.n	8006d4c <prvTaskExitError+0x1c>
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	b672      	cpsid	i
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	b662      	cpsie	i
 8006d62:	e7fe      	b.n	8006d62 <prvTaskExitError+0x32>
 8006d64:	20010048 	.word	0x20010048

08006d68 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006d68:	4806      	ldr	r0, [pc, #24]	; (8006d84 <prvPortStartFirstTask+0x1c>)
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f380 8808 	msr	MSP, r0
 8006d72:	b662      	cpsie	i
 8006d74:	b661      	cpsie	f
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	df00      	svc	0
 8006d80:	bf00      	nop
 8006d82:	0000      	.short	0x0000
 8006d84:	e000ed08 	.word	0xe000ed08

08006d88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d98 <vPortEnableVFP+0x10>
 8006d8c:	6801      	ldr	r1, [r0, #0]
 8006d8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d92:	6001      	str	r1, [r0, #0]
 8006d94:	4770      	bx	lr
 8006d96:	0000      	.short	0x0000
 8006d98:	e000ed88 	.word	0xe000ed88

08006d9c <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006da0:	f840 2c20 	str.w	r2, [r0, #-32]
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006da4:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006da8:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <pxPortInitialiseStack+0x1c>)
	*pxTopOfStack = portINITIAL_EXEC_RETURN;

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8006daa:	3844      	subs	r0, #68	; 0x44

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dac:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8006dae:	f06f 0302 	mvn.w	r3, #2
 8006db2:	6203      	str	r3, [r0, #32]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	08006d31 	.word	0x08006d31

08006dbc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <pxCurrentTCBConst2>)
 8006dbe:	6819      	ldr	r1, [r3, #0]
 8006dc0:	6808      	ldr	r0, [r1, #0]
 8006dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc6:	f380 8809 	msr	PSP, r0
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f04f 0000 	mov.w	r0, #0
 8006dd2:	f380 8811 	msr	BASEPRI, r0
 8006dd6:	4770      	bx	lr

08006dd8 <pxCurrentTCBConst2>:
 8006dd8:	20042d58 	.word	0x20042d58

08006ddc <vPortEnterCritical>:
 8006ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de0:	b672      	cpsid	i
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006df0:	4a0b      	ldr	r2, [pc, #44]	; (8006e20 <vPortEnterCritical+0x44>)
 8006df2:	6813      	ldr	r3, [r2, #0]
 8006df4:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006df6:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006df8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dfa:	d10f      	bne.n	8006e1c <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dfc:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <vPortEnterCritical+0x48>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e04:	d00a      	beq.n	8006e1c <vPortEnterCritical+0x40>
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	b672      	cpsid	i
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	b662      	cpsie	i
 8006e1a:	e7fe      	b.n	8006e1a <vPortEnterCritical+0x3e>
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20010048 	.word	0x20010048
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8006e28:	4a09      	ldr	r2, [pc, #36]	; (8006e50 <vPortExitCritical+0x28>)
 8006e2a:	6813      	ldr	r3, [r2, #0]
 8006e2c:	b953      	cbnz	r3, 8006e44 <vPortExitCritical+0x1c>
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	b672      	cpsid	i
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	b662      	cpsie	i
 8006e42:	e7fe      	b.n	8006e42 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8006e44:	3b01      	subs	r3, #1
 8006e46:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e48:	b90b      	cbnz	r3, 8006e4e <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	4770      	bx	lr
 8006e50:	20010048 	.word	0x20010048

08006e54 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e54:	f3ef 8009 	mrs	r0, PSP
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <pxCurrentTCBConst>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	f01e 0f10 	tst.w	lr, #16
 8006e64:	bf08      	it	eq
 8006e66:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e6a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6e:	6010      	str	r0, [r2, #0]
 8006e70:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006e74:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e78:	b672      	cpsid	i
 8006e7a:	f380 8811 	msr	BASEPRI, r0
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	b662      	cpsie	i
 8006e88:	f001 f920 	bl	80080cc <vTaskSwitchContext>
 8006e8c:	f04f 0000 	mov.w	r0, #0
 8006e90:	f380 8811 	msr	BASEPRI, r0
 8006e94:	bc08      	pop	{r3}
 8006e96:	6819      	ldr	r1, [r3, #0]
 8006e98:	6808      	ldr	r0, [r1, #0]
 8006e9a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9e:	f01e 0f10 	tst.w	lr, #16
 8006ea2:	bf08      	it	eq
 8006ea4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ea8:	f380 8809 	msr	PSP, r0
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop

08006eb4 <pxCurrentTCBConst>:
 8006eb4:	20042d58 	.word	0x20042d58

08006eb8 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006eb8:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006eba:	f3ef 8311 	mrs	r3, BASEPRI
 8006ebe:	f04f 0250 	mov.w	r2, #80	; 0x50
 8006ec2:	b672      	cpsid	i
 8006ec4:	f382 8811 	msr	BASEPRI, r2
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ed2:	f000 ff6d 	bl	8007db0 <xTaskIncrementTick>
 8006ed6:	b118      	cbz	r0, 8006ee0 <xPortSysTickHandler+0x28>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006edc:	4b02      	ldr	r3, [pc, #8]	; (8006ee8 <xPortSysTickHandler+0x30>)
 8006ede:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	bd08      	pop	{r3, pc}
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006eec:	4b06      	ldr	r3, [pc, #24]	; (8006f08 <vPortSetupTimerInterrupt+0x1c>)
 8006eee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ef8:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <vPortSetupTimerInterrupt+0x20>)
 8006efa:	3b01      	subs	r3, #1
 8006efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006efe:	2207      	movs	r2, #7
 8006f00:	4b03      	ldr	r3, [pc, #12]	; (8006f10 <vPortSetupTimerInterrupt+0x24>)
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	20010044 	.word	0x20010044
 8006f0c:	e000e014 	.word	0xe000e014
 8006f10:	e000e010 	.word	0xe000e010

08006f14 <xPortStartScheduler>:
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f14:	4b23      	ldr	r3, [pc, #140]	; (8006fa4 <xPortStartScheduler+0x90>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f16:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f18:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f1a:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f20:	22ff      	movs	r2, #255	; 0xff
 8006f22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f24:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f26:	4a20      	ldr	r2, [pc, #128]	; (8006fa8 <xPortStartScheduler+0x94>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006f32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f36:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f38:	2207      	movs	r2, #7
 8006f3a:	4b1c      	ldr	r3, [pc, #112]	; (8006fac <xPortStartScheduler+0x98>)
 8006f3c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f3e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8006f42:	1e54      	subs	r4, r2, #1
 8006f44:	0600      	lsls	r0, r0, #24
 8006f46:	d508      	bpl.n	8006f5a <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f48:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	0052      	lsls	r2, r2, #1
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	f88d 2003 	strb.w	r2, [sp, #3]
 8006f56:	4622      	mov	r2, r4
 8006f58:	e7f1      	b.n	8006f3e <xPortStartScheduler+0x2a>
 8006f5a:	b101      	cbz	r1, 8006f5e <xPortStartScheduler+0x4a>
 8006f5c:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	0212      	lsls	r2, r2, #8
 8006f62:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006f66:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	4a0e      	ldr	r2, [pc, #56]	; (8006fa4 <xPortStartScheduler+0x90>)
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <xPortStartScheduler+0x9c>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006f78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006f80:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f82:	f7ff ffb3 	bl	8006eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f86:	2200      	movs	r2, #0
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <xPortStartScheduler+0xa0>)
 8006f8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f8c:	f7ff fefc 	bl	8006d88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f90:	4a09      	ldr	r2, [pc, #36]	; (8006fb8 <xPortStartScheduler+0xa4>)
 8006f92:	6813      	ldr	r3, [r2, #0]
 8006f94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f9a:	f7ff fee5 	bl	8006d68 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8006f9e:	f7ff fec7 	bl	8006d30 <prvTaskExitError>
 8006fa2:	bf00      	nop
 8006fa4:	e000e400 	.word	0xe000e400
 8006fa8:	2001463c 	.word	0x2001463c
 8006fac:	20014640 	.word	0x20014640
 8006fb0:	e000ed20 	.word	0xe000ed20
 8006fb4:	20010048 	.word	0x20010048
 8006fb8:	e000ef34 	.word	0xe000ef34

08006fbc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8006fbc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fc0:	2b0f      	cmp	r3, #15
 8006fc2:	d910      	bls.n	8006fe6 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fc4:	4a12      	ldr	r2, [pc, #72]	; (8007010 <vPortValidateInterruptPriority+0x54>)
 8006fc6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fc8:	4a12      	ldr	r2, [pc, #72]	; (8007014 <vPortValidateInterruptPriority+0x58>)
 8006fca:	7812      	ldrb	r2, [r2, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d90a      	bls.n	8006fe6 <vPortValidateInterruptPriority+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	b672      	cpsid	i
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	b662      	cpsie	i
 8006fe4:	e7fe      	b.n	8006fe4 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	; (8007018 <vPortValidateInterruptPriority+0x5c>)
 8006fe8:	4a0c      	ldr	r2, [pc, #48]	; (800701c <vPortValidateInterruptPriority+0x60>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d90a      	bls.n	800700c <vPortValidateInterruptPriority+0x50>
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	b672      	cpsid	i
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	b662      	cpsie	i
 800700a:	e7fe      	b.n	800700a <vPortValidateInterruptPriority+0x4e>
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000e3f0 	.word	0xe000e3f0
 8007014:	2001463c 	.word	0x2001463c
 8007018:	e000ed0c 	.word	0xe000ed0c
 800701c:	20014640 	.word	0x20014640

08007020 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <prvInsertBlockIntoFreeList+0x40>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007022:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4282      	cmp	r2, r0
 8007028:	d201      	bcs.n	800702e <prvInsertBlockIntoFreeList+0xe>
 800702a:	4613      	mov	r3, r2
 800702c:	e7fa      	b.n	8007024 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800702e:	6859      	ldr	r1, [r3, #4]
 8007030:	185c      	adds	r4, r3, r1
 8007032:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007034:	bf01      	itttt	eq
 8007036:	6840      	ldreq	r0, [r0, #4]
 8007038:	1809      	addeq	r1, r1, r0
 800703a:	4618      	moveq	r0, r3
 800703c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800703e:	6841      	ldr	r1, [r0, #4]
 8007040:	1844      	adds	r4, r0, r1
 8007042:	42a2      	cmp	r2, r4
 8007044:	d107      	bne.n	8007056 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007046:	4c07      	ldr	r4, [pc, #28]	; (8007064 <prvInsertBlockIntoFreeList+0x44>)
 8007048:	6824      	ldr	r4, [r4, #0]
 800704a:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800704c:	bf1f      	itttt	ne
 800704e:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007050:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007052:	1909      	addne	r1, r1, r4
 8007054:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007056:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007058:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800705a:	bf18      	it	ne
 800705c:	6018      	strne	r0, [r3, #0]
 800705e:	bd10      	pop	{r4, pc}
 8007060:	2001464c 	.word	0x2001464c
 8007064:	20014648 	.word	0x20014648

08007068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706c:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800706e:	f000 fe91 	bl	8007d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007072:	4940      	ldr	r1, [pc, #256]	; (8007174 <pvPortMalloc+0x10c>)
 8007074:	4d40      	ldr	r5, [pc, #256]	; (8007178 <pvPortMalloc+0x110>)
 8007076:	680b      	ldr	r3, [r1, #0]
 8007078:	b9f3      	cbnz	r3, 80070b8 <pvPortMalloc+0x50>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800707a:	4a40      	ldr	r2, [pc, #256]	; (800717c <pvPortMalloc+0x114>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 800707c:	2000      	movs	r0, #0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800707e:	0756      	lsls	r6, r2, #29

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007080:	4e3f      	ldr	r6, [pc, #252]	; (8007180 <pvPortMalloc+0x118>)
	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007082:	bf1b      	ittet	ne
 8007084:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007086:	4b3f      	ldrne	r3, [pc, #252]	; (8007184 <pvPortMalloc+0x11c>)
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007088:	4b3f      	ldreq	r3, [pc, #252]	; (8007188 <pvPortMalloc+0x120>)
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800708a:	f022 0207 	bicne.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 800708e:	6070      	str	r0, [r6, #4]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007090:	bf18      	it	ne
 8007092:	1a9b      	subne	r3, r3, r2

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007094:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007096:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007098:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800709a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
	pxEnd->pxNextFreeBlock = NULL;
 800709e:	6018      	str	r0, [r3, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 80070a0:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070a2:	1a98      	subs	r0, r3, r2
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 80070a4:	600b      	str	r3, [r1, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070a6:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070a8:	4b38      	ldr	r3, [pc, #224]	; (800718c <pvPortMalloc+0x124>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80070aa:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ac:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070ae:	4b38      	ldr	r3, [pc, #224]	; (8007190 <pvPortMalloc+0x128>)
 80070b0:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070b6:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070b8:	682f      	ldr	r7, [r5, #0]
 80070ba:	4227      	tst	r7, r4
 80070bc:	d147      	bne.n	800714e <pvPortMalloc+0xe6>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070be:	2c00      	cmp	r4, #0
 80070c0:	d046      	beq.n	8007150 <pvPortMalloc+0xe8>
			{
				xWantedSize += xHeapStructSize;
 80070c2:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070c6:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070c8:	bf1c      	itt	ne
 80070ca:	f023 0307 	bicne.w	r3, r3, #7
 80070ce:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d03a      	beq.n	800714a <pvPortMalloc+0xe2>
 80070d4:	4a2e      	ldr	r2, [pc, #184]	; (8007190 <pvPortMalloc+0x128>)
 80070d6:	6816      	ldr	r6, [r2, #0]
 80070d8:	4690      	mov	r8, r2
 80070da:	42b3      	cmp	r3, r6
 80070dc:	d837      	bhi.n	800714e <pvPortMalloc+0xe6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80070de:	4a28      	ldr	r2, [pc, #160]	; (8007180 <pvPortMalloc+0x118>)
 80070e0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070e2:	6868      	ldr	r0, [r5, #4]
 80070e4:	4283      	cmp	r3, r0
 80070e6:	d803      	bhi.n	80070f0 <pvPortMalloc+0x88>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070e8:	6809      	ldr	r1, [r1, #0]
 80070ea:	428d      	cmp	r5, r1
 80070ec:	d106      	bne.n	80070fc <pvPortMalloc+0x94>
 80070ee:	e02e      	b.n	800714e <pvPortMalloc+0xe6>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070f0:	682c      	ldr	r4, [r5, #0]
 80070f2:	2c00      	cmp	r4, #0
 80070f4:	d0f8      	beq.n	80070e8 <pvPortMalloc+0x80>
 80070f6:	462a      	mov	r2, r5
 80070f8:	4625      	mov	r5, r4
 80070fa:	e7f2      	b.n	80070e2 <pvPortMalloc+0x7a>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070fc:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070fe:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007100:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007102:	1ac2      	subs	r2, r0, r3
 8007104:	2a10      	cmp	r2, #16
 8007106:	d911      	bls.n	800712c <pvPortMalloc+0xc4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007108:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800710a:	0741      	lsls	r1, r0, #29
 800710c:	d00a      	beq.n	8007124 <pvPortMalloc+0xbc>
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	b672      	cpsid	i
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	b662      	cpsie	i
 8007122:	e7fe      	b.n	8007122 <pvPortMalloc+0xba>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007124:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007126:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007128:	f7ff ff7a 	bl	8007020 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800712c:	686b      	ldr	r3, [r5, #4]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800712e:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007130:	4916      	ldr	r1, [pc, #88]	; (800718c <pvPortMalloc+0x124>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007132:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007134:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007136:	6808      	ldr	r0, [r1, #0]
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 8007138:	2300      	movs	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800713a:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800713e:	4282      	cmp	r2, r0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007140:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007142:	602b      	str	r3, [r5, #0]

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007144:	bf38      	it	cc
 8007146:	600a      	strcc	r2, [r1, #0]
 8007148:	e002      	b.n	8007150 <pvPortMalloc+0xe8>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800714a:	461c      	mov	r4, r3
 800714c:	e000      	b.n	8007150 <pvPortMalloc+0xe8>
 800714e:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007150:	f000 fec8 	bl	8007ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007154:	0763      	lsls	r3, r4, #29
 8007156:	d00a      	beq.n	800716e <pvPortMalloc+0x106>
 8007158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715c:	b672      	cpsid	i
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	b662      	cpsie	i
 800716c:	e7fe      	b.n	800716c <pvPortMalloc+0x104>
	return pvReturn;
}
 800716e:	4620      	mov	r0, r4
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	20014648 	.word	0x20014648
 8007178:	20042c84 	.word	0x20042c84
 800717c:	20014654 	.word	0x20014654
 8007180:	2001464c 	.word	0x2001464c
 8007184:	20042c84 	.word	0x20042c84
 8007188:	0002e630 	.word	0x0002e630
 800718c:	20042c88 	.word	0x20042c88
 8007190:	20014644 	.word	0x20014644

08007194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007194:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8007196:	4604      	mov	r4, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	d032      	beq.n	8007202 <vPortFree+0x6e>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800719c:	4a19      	ldr	r2, [pc, #100]	; (8007204 <vPortFree+0x70>)
 800719e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	4213      	tst	r3, r2
 80071a6:	d10a      	bne.n	80071be <vPortFree+0x2a>
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	b672      	cpsid	i
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	b662      	cpsie	i
 80071bc:	e7fe      	b.n	80071bc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071be:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80071c2:	b151      	cbz	r1, 80071da <vPortFree+0x46>
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	b672      	cpsid	i
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	b662      	cpsie	i
 80071d8:	e7fe      	b.n	80071d8 <vPortFree+0x44>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071da:	ea23 0302 	bic.w	r3, r3, r2
 80071de:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 80071e2:	f000 fdd7 	bl	8007d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071e6:	4a08      	ldr	r2, [pc, #32]	; (8007208 <vPortFree+0x74>)
 80071e8:	f854 1c04 	ldr.w	r1, [r4, #-4]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ec:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071f0:	6813      	ldr	r3, [r2, #0]
 80071f2:	440b      	add	r3, r1
 80071f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071f6:	f7ff ff13 	bl	8007020 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 80071fe:	f000 be71 	b.w	8007ee4 <xTaskResumeAll>
 8007202:	bd10      	pop	{r4, pc}
 8007204:	20042c84 	.word	0x20042c84
 8007208:	20014644 	.word	0x20014644

0800720c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007210:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007212:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007214:	b932      	cbnz	r2, 8007224 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007216:	6805      	ldr	r5, [r0, #0]
 8007218:	bb45      	cbnz	r5, 800726c <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800721a:	6840      	ldr	r0, [r0, #4]
 800721c:	f001 f8ba 	bl	8008394 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8007220:	6065      	str	r5, [r4, #4]
 8007222:	e024      	b.n	800726e <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007224:	b96d      	cbnz	r5, 8007242 <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007226:	6880      	ldr	r0, [r0, #8]
 8007228:	f00a faed 	bl	8011806 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800722c:	68a2      	ldr	r2, [r4, #8]
 800722e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007230:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007232:	6862      	ldr	r2, [r4, #4]
 8007234:	4293      	cmp	r3, r2
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007236:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007238:	d318      	bcc.n	800726c <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800723a:	6823      	ldr	r3, [r4, #0]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800723c:	4628      	mov	r0, r5
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800723e:	60a3      	str	r3, [r4, #8]
 8007240:	e015      	b.n	800726e <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007242:	68c0      	ldr	r0, [r0, #12]
 8007244:	f00a fadf 	bl	8011806 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800724a:	68e2      	ldr	r2, [r4, #12]
 800724c:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800724e:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007250:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007252:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007254:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007256:	bf3e      	ittt	cc
 8007258:	6862      	ldrcc	r2, [r4, #4]
 800725a:	189b      	addcc	r3, r3, r2
 800725c:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800725e:	2d02      	cmp	r5, #2
 8007260:	d104      	bne.n	800726c <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007264:	b113      	cbz	r3, 800726c <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8007266:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007268:	3b01      	subs	r3, #1
 800726a:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800726c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800726e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007270:	3301      	adds	r3, #1
 8007272:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 8007274:	bd38      	pop	{r3, r4, r5, pc}

08007276 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007276:	4603      	mov	r3, r0
 8007278:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800727a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800727c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800727e:	b162      	cbz	r2, 800729a <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007280:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007282:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007284:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007286:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007288:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 800728a:	f85d 4b04 	ldr.w	r4, [sp], #4
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800728e:	bf24      	itt	cs
 8007290:	6819      	ldrcs	r1, [r3, #0]
 8007292:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007294:	68d9      	ldr	r1, [r3, #12]
 8007296:	f00a bab6 	b.w	8011806 <memcpy>
	}
}
 800729a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072a4:	f7ff fd9a 	bl	8006ddc <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072a8:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80072ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	dd0b      	ble.n	80072ca <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b4:	b14b      	cbz	r3, 80072ca <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072b6:	4628      	mov	r0, r5
 80072b8:	f000 ff7e 	bl	80081b8 <xTaskRemoveFromEventList>
 80072bc:	b108      	cbz	r0, 80072c2 <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80072be:	f001 f80d 	bl	80082dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80072c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80072c4:	3b01      	subs	r3, #1
 80072c6:	64a3      	str	r3, [r4, #72]	; 0x48
 80072c8:	e7f0      	b.n	80072ac <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ce:	f104 0510 	add.w	r5, r4, #16
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80072d2:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80072d4:	f7ff fda8 	bl	8006e28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072d8:	f7ff fd80 	bl	8006ddc <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80072dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80072de:	2b00      	cmp	r3, #0
 80072e0:	dd0b      	ble.n	80072fa <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	b14b      	cbz	r3, 80072fa <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 ff66 	bl	80081b8 <xTaskRemoveFromEventList>
 80072ec:	b108      	cbz	r0, 80072f2 <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 80072ee:	f000 fff5 	bl	80082dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80072f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80072f4:	3b01      	subs	r3, #1
 80072f6:	6463      	str	r3, [r4, #68]	; 0x44
 80072f8:	e7f0      	b.n	80072dc <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80072fa:	f04f 33ff 	mov.w	r3, #4294967295
 80072fe:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8007300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 8007304:	f7ff bd90 	b.w	8006e28 <vPortExitCritical>

08007308 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800730c:	4604      	mov	r4, r0
 800730e:	b950      	cbnz	r0, 8007326 <xQueueGenericReset+0x1e>
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	b672      	cpsid	i
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	b662      	cpsie	i
 8007324:	e7fe      	b.n	8007324 <xQueueGenericReset+0x1c>

	taskENTER_CRITICAL();
 8007326:	f7ff fd59 	bl	8006ddc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800732a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800732c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	4343      	muls	r3, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007332:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007334:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007336:	1a1b      	subs	r3, r3, r0
 8007338:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800733a:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800733c:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800733e:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8007340:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007344:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8007346:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8007348:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 800734a:	b985      	cbnz	r5, 800736e <xQueueGenericReset+0x66>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	b1b3      	cbz	r3, 800737e <xQueueGenericReset+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8007350:	f104 0010 	add.w	r0, r4, #16
 8007354:	f000 ff30 	bl	80081b8 <xTaskRemoveFromEventList>
 8007358:	2801      	cmp	r0, #1
 800735a:	d110      	bne.n	800737e <xQueueGenericReset+0x76>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800735c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007360:	4b09      	ldr	r3, [pc, #36]	; (8007388 <xQueueGenericReset+0x80>)
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	e007      	b.n	800737e <xQueueGenericReset+0x76>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800736e:	f104 0010 	add.w	r0, r4, #16
 8007372:	f7ff fc9b 	bl	8006cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007376:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800737a:	f7ff fc97 	bl	8006cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800737e:	f7ff fd53 	bl	8006e28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 8007382:	2001      	movs	r0, #1
 8007384:	bd38      	pop	{r3, r4, r5, pc}
 8007386:	bf00      	nop
 8007388:	e000ed04 	.word	0xe000ed04

0800738c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	460d      	mov	r5, r1
 8007390:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007392:	4606      	mov	r6, r0
 8007394:	b950      	cbnz	r0, 80073ac <xQueueGenericCreate+0x20>
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	b672      	cpsid	i
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	b662      	cpsie	i
 80073aa:	e7fe      	b.n	80073aa <xQueueGenericCreate+0x1e>

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073ac:	b111      	cbz	r1, 80073b4 <xQueueGenericCreate+0x28>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ae:	4348      	muls	r0, r1
 80073b0:	3001      	adds	r0, #1
 80073b2:	e000      	b.n	80073b6 <xQueueGenericCreate+0x2a>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 80073b4:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80073b6:	3054      	adds	r0, #84	; 0x54
 80073b8:	f7ff fe56 	bl	8007068 <pvPortMalloc>

	if( pxNewQueue != NULL )
 80073bc:	4604      	mov	r4, r0
 80073be:	b130      	cbz	r0, 80073ce <xQueueGenericCreate+0x42>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 80073c0:	b90d      	cbnz	r5, 80073c6 <xQueueGenericCreate+0x3a>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073c2:	6020      	str	r0, [r4, #0]
 80073c4:	e00e      	b.n	80073e4 <xQueueGenericCreate+0x58>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80073c6:	f100 0354 	add.w	r3, r0, #84	; 0x54
 80073ca:	6003      	str	r3, [r0, #0]
 80073cc:	e00a      	b.n	80073e4 <xQueueGenericCreate+0x58>
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	e7fe      	b.n	80073e2 <xQueueGenericCreate+0x56>
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 80073e4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073e6:	2101      	movs	r1, #1
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
		pxNewQueue->uxItemSize = uxItemSize;
 80073e8:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073ea:	4620      	mov	r0, r4
 80073ec:	f7ff ff8c 	bl	8007308 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 80073f0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 80073f4:	4620      	mov	r0, r4
 80073f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080073f8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	4689      	mov	r9, r1
 80073fe:	9201      	str	r2, [sp, #4]
 8007400:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8007402:	4604      	mov	r4, r0
 8007404:	b950      	cbnz	r0, 800741c <xQueueGenericSend+0x24>
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	b672      	cpsid	i
 800740c:	f383 8811 	msr	BASEPRI, r3
 8007410:	f3bf 8f6f 	isb	sy
 8007414:	f3bf 8f4f 	dsb	sy
 8007418:	b662      	cpsie	i
 800741a:	e7fe      	b.n	800741a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800741c:	b961      	cbnz	r1, 8007438 <xQueueGenericSend+0x40>
 800741e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007420:	b153      	cbz	r3, 8007438 <xQueueGenericSend+0x40>
 8007422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007426:	b672      	cpsid	i
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	b662      	cpsie	i
 8007436:	e7fe      	b.n	8007436 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007438:	2f02      	cmp	r7, #2
 800743a:	d10d      	bne.n	8007458 <xQueueGenericSend+0x60>
 800743c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800743e:	2b01      	cmp	r3, #1
 8007440:	d00a      	beq.n	8007458 <xQueueGenericSend+0x60>
 8007442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007446:	b672      	cpsid	i
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	b662      	cpsie	i
 8007456:	e7fe      	b.n	8007456 <xQueueGenericSend+0x5e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007458:	f000 ff46 	bl	80082e8 <xTaskGetSchedulerState>
 800745c:	b910      	cbnz	r0, 8007464 <xQueueGenericSend+0x6c>
 800745e:	9e01      	ldr	r6, [sp, #4]
 8007460:	b10e      	cbz	r6, 8007466 <xQueueGenericSend+0x6e>
 8007462:	e073      	b.n	800754c <xQueueGenericSend+0x154>
 8007464:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8007466:	f04f 0800 	mov.w	r8, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800746a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8007568 <xQueueGenericSend+0x170>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800746e:	f7ff fcb5 	bl	8006ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007472:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007474:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007476:	429a      	cmp	r2, r3
 8007478:	d301      	bcc.n	800747e <xQueueGenericSend+0x86>
 800747a:	2f02      	cmp	r7, #2
 800747c:	d11a      	bne.n	80074b4 <xQueueGenericSend+0xbc>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800747e:	463a      	mov	r2, r7
 8007480:	4649      	mov	r1, r9
 8007482:	4620      	mov	r0, r4
 8007484:	f7ff fec2 	bl	800720c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800748a:	b133      	cbz	r3, 800749a <xQueueGenericSend+0xa2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800748c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007490:	f000 fe92 	bl	80081b8 <xTaskRemoveFromEventList>
 8007494:	2801      	cmp	r0, #1
 8007496:	d109      	bne.n	80074ac <xQueueGenericSend+0xb4>
 8007498:	e000      	b.n	800749c <xQueueGenericSend+0xa4>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800749a:	b138      	cbz	r0, 80074ac <xQueueGenericSend+0xb4>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800749c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a0:	4b31      	ldr	r3, [pc, #196]	; (8007568 <xQueueGenericSend+0x170>)
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074ac:	f7ff fcbc 	bl	8006e28 <vPortExitCritical>
				return pdPASS;
 80074b0:	2001      	movs	r0, #1
 80074b2:	e056      	b.n	8007562 <xQueueGenericSend+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074b4:	9d01      	ldr	r5, [sp, #4]
 80074b6:	b91d      	cbnz	r5, 80074c0 <xQueueGenericSend+0xc8>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074b8:	f7ff fcb6 	bl	8006e28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074bc:	4628      	mov	r0, r5
 80074be:	e050      	b.n	8007562 <xQueueGenericSend+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074c0:	b916      	cbnz	r6, 80074c8 <xQueueGenericSend+0xd0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80074c2:	a802      	add	r0, sp, #8
 80074c4:	f000 febc 	bl	8008240 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074c8:	f7ff fcae 	bl	8006e28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074cc:	f000 fc62 	bl	8007d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80074d0:	f7ff fc84 	bl	8006ddc <vPortEnterCritical>
 80074d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80074d6:	3301      	adds	r3, #1
 80074d8:	d101      	bne.n	80074de <xQueueGenericSend+0xe6>
 80074da:	f8c4 8044 	str.w	r8, [r4, #68]	; 0x44
 80074de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80074e0:	3301      	adds	r3, #1
 80074e2:	d101      	bne.n	80074e8 <xQueueGenericSend+0xf0>
 80074e4:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
 80074e8:	f7ff fc9e 	bl	8006e28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074ec:	a901      	add	r1, sp, #4
 80074ee:	a802      	add	r0, sp, #8
 80074f0:	f000 feb6 	bl	8008260 <xTaskCheckForTimeOut>
 80074f4:	bb18      	cbnz	r0, 800753e <xQueueGenericSend+0x146>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074f6:	f7ff fc71 	bl	8006ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80074fc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80074fe:	f7ff fc93 	bl	8006e28 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007502:	42ae      	cmp	r6, r5
 8007504:	d115      	bne.n	8007532 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007506:	9901      	ldr	r1, [sp, #4]
 8007508:	f104 0010 	add.w	r0, r4, #16
 800750c:	f000 fe1a 	bl	8008144 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007510:	4620      	mov	r0, r4
 8007512:	f7ff fec5 	bl	80072a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007516:	f000 fce5 	bl	8007ee4 <xTaskResumeAll>
 800751a:	b108      	cbz	r0, 8007520 <xQueueGenericSend+0x128>
 800751c:	2601      	movs	r6, #1
 800751e:	e7a6      	b.n	800746e <xQueueGenericSend+0x76>
				{
					portYIELD_WITHIN_API();
 8007520:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007524:	f8ca 3000 	str.w	r3, [sl]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	e7f4      	b.n	800751c <xQueueGenericSend+0x124>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007532:	4620      	mov	r0, r4
 8007534:	f7ff feb4 	bl	80072a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007538:	f000 fcd4 	bl	8007ee4 <xTaskResumeAll>
 800753c:	e7ee      	b.n	800751c <xQueueGenericSend+0x124>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff feae 	bl	80072a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007544:	f000 fcce 	bl	8007ee4 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007548:	2000      	movs	r0, #0
 800754a:	e00a      	b.n	8007562 <xQueueGenericSend+0x16a>
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	b672      	cpsid	i
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	b662      	cpsie	i
 8007560:	e7fe      	b.n	8007560 <xQueueGenericSend+0x168>
		}
	}
}
 8007562:	b004      	add	sp, #16
 8007564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007568:	e000ed04 	.word	0xe000ed04

0800756c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800756c:	b570      	push	{r4, r5, r6, lr}
 800756e:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8007570:	2054      	movs	r0, #84	; 0x54
 8007572:	f7ff fd79 	bl	8007068 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007576:	4604      	mov	r4, r0
 8007578:	b1f8      	cbz	r0, 80075ba <xQueueCreateMutex+0x4e>

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 800757a:	2301      	movs	r3, #1
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800757c:	2500      	movs	r5, #0
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 800757e:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8007582:	3010      	adds	r0, #16

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8007584:	62c3      	str	r3, [r0, #44]	; 0x2c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 8007586:	f04f 33ff 	mov.w	r3, #4294967295
			pxNewQueue->u.pcReadFrom = NULL;

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800758a:	6285      	str	r5, [r0, #40]	; 0x28
		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800758c:	f840 5c0c 	str.w	r5, [r0, #-12]
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
 8007590:	6343      	str	r3, [r0, #52]	; 0x34
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007592:	f840 5c10 	str.w	r5, [r0, #-16]
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
			pxNewQueue->xRxLock = queueUNLOCKED;
			pxNewQueue->xTxLock = queueUNLOCKED;
 8007596:	6383      	str	r3, [r0, #56]	; 0x38
			pxNewQueue->pxMutexHolder = NULL;
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8007598:	f840 5c08 	str.w	r5, [r0, #-8]
			pxNewQueue->u.pcReadFrom = NULL;
 800759c:	f840 5c04 	str.w	r5, [r0, #-4]
			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 80075a0:	6305      	str	r5, [r0, #48]	; 0x30
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 80075a2:	f7ff fb83 	bl	8006cac <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 80075a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80075aa:	f7ff fb7f 	bl	8006cac <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80075ae:	462b      	mov	r3, r5
 80075b0:	462a      	mov	r2, r5
 80075b2:	4629      	mov	r1, r5
 80075b4:	4620      	mov	r0, r4
 80075b6:	f7ff ff1f 	bl	80073f8 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		return pxNewQueue;
	}
 80075ba:	4620      	mov	r0, r4
 80075bc:	bd70      	pop	{r4, r5, r6, pc}

080075be <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c2:	460e      	mov	r6, r1
 80075c4:	4690      	mov	r8, r2
 80075c6:	461d      	mov	r5, r3
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80075c8:	4604      	mov	r4, r0
 80075ca:	b950      	cbnz	r0, 80075e2 <xQueueGenericSendFromISR+0x24>
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	b672      	cpsid	i
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	b662      	cpsie	i
 80075e0:	e7fe      	b.n	80075e0 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075e2:	b961      	cbnz	r1, 80075fe <xQueueGenericSendFromISR+0x40>
 80075e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80075e6:	b153      	cbz	r3, 80075fe <xQueueGenericSendFromISR+0x40>
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	b672      	cpsid	i
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	b662      	cpsie	i
 80075fc:	e7fe      	b.n	80075fc <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075fe:	2d02      	cmp	r5, #2
 8007600:	d10d      	bne.n	800761e <xQueueGenericSendFromISR+0x60>
 8007602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007604:	2b01      	cmp	r3, #1
 8007606:	d00a      	beq.n	800761e <xQueueGenericSendFromISR+0x60>
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	b672      	cpsid	i
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	b662      	cpsie	i
 800761c:	e7fe      	b.n	800761c <xQueueGenericSendFromISR+0x5e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800761e:	f7ff fccd 	bl	8006fbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007622:	f3ef 8711 	mrs	r7, BASEPRI
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	b672      	cpsid	i
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	b662      	cpsie	i
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800763a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800763c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800763e:	429a      	cmp	r2, r3
 8007640:	d301      	bcc.n	8007646 <xQueueGenericSendFromISR+0x88>
 8007642:	2d02      	cmp	r5, #2
 8007644:	d11a      	bne.n	800767c <xQueueGenericSendFromISR+0xbe>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007646:	462a      	mov	r2, r5
 8007648:	4631      	mov	r1, r6
 800764a:	4620      	mov	r0, r4
 800764c:	f7ff fdde 	bl	800720c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8007650:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007652:	3301      	adds	r3, #1
 8007654:	d10d      	bne.n	8007672 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007658:	b173      	cbz	r3, 8007678 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800765a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800765e:	f000 fdab 	bl	80081b8 <xTaskRemoveFromEventList>
 8007662:	b148      	cbz	r0, 8007678 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007664:	f1b8 0f00 	cmp.w	r8, #0
 8007668:	d006      	beq.n	8007678 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800766a:	2001      	movs	r0, #1
 800766c:	f8c8 0000 	str.w	r0, [r8]
 8007670:	e005      	b.n	800767e <xQueueGenericSendFromISR+0xc0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8007672:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007674:	3301      	adds	r3, #1
 8007676:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 8007678:	2001      	movs	r0, #1
 800767a:	e000      	b.n	800767e <xQueueGenericSendFromISR+0xc0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800767c:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800767e:	f387 8811 	msr	BASEPRI, r7
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8007682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007686 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007686:	b570      	push	{r4, r5, r6, lr}
 8007688:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800768a:	4604      	mov	r4, r0
 800768c:	b950      	cbnz	r0, 80076a4 <xQueueGiveFromISR+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	b672      	cpsid	i
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	b662      	cpsie	i
 80076a2:	e7fe      	b.n	80076a2 <xQueueGiveFromISR+0x1c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80076a6:	b153      	cbz	r3, 80076be <xQueueGiveFromISR+0x38>
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	b672      	cpsid	i
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	b662      	cpsie	i
 80076bc:	e7fe      	b.n	80076bc <xQueueGiveFromISR+0x36>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80076be:	6803      	ldr	r3, [r0, #0]
 80076c0:	b90b      	cbnz	r3, 80076c6 <xQueueGiveFromISR+0x40>
 80076c2:	6843      	ldr	r3, [r0, #4]
 80076c4:	bb4b      	cbnz	r3, 800771a <xQueueGiveFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076c6:	f7ff fc79 	bl	8006fbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076ca:	f3ef 8611 	mrs	r6, BASEPRI
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	b672      	cpsid	i
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	b662      	cpsie	i
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 80076e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80076e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d215      	bcs.n	8007716 <xQueueGiveFromISR+0x90>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
 80076ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076ec:	3301      	adds	r3, #1
 80076ee:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 80076f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80076f2:	3301      	adds	r3, #1
 80076f4:	d10a      	bne.n	800770c <xQueueGiveFromISR+0x86>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f8:	b15b      	cbz	r3, 8007712 <xQueueGiveFromISR+0x8c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80076fe:	f000 fd5b 	bl	80081b8 <xTaskRemoveFromEventList>
 8007702:	b130      	cbz	r0, 8007712 <xQueueGiveFromISR+0x8c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007704:	b12d      	cbz	r5, 8007712 <xQueueGiveFromISR+0x8c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007706:	2001      	movs	r0, #1
 8007708:	6028      	str	r0, [r5, #0]
 800770a:	e011      	b.n	8007730 <xQueueGiveFromISR+0xaa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800770c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800770e:	3301      	adds	r3, #1
 8007710:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 8007712:	2001      	movs	r0, #1
 8007714:	e00c      	b.n	8007730 <xQueueGiveFromISR+0xaa>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007716:	2000      	movs	r0, #0
 8007718:	e00a      	b.n	8007730 <xQueueGiveFromISR+0xaa>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800771a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771e:	b672      	cpsid	i
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	b662      	cpsie	i
 800772e:	e7fe      	b.n	800772e <xQueueGiveFromISR+0xa8>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007730:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8007734:	bd70      	pop	{r4, r5, r6, pc}
	...

08007738 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8007738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800773c:	4688      	mov	r8, r1
 800773e:	9201      	str	r2, [sp, #4]
 8007740:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8007742:	4604      	mov	r4, r0
 8007744:	b950      	cbnz	r0, 800775c <xQueueGenericReceive+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	b672      	cpsid	i
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	b662      	cpsie	i
 800775a:	e7fe      	b.n	800775a <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800775c:	b961      	cbnz	r1, 8007778 <xQueueGenericReceive+0x40>
 800775e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007760:	b153      	cbz	r3, 8007778 <xQueueGenericReceive+0x40>
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	b672      	cpsid	i
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	b662      	cpsie	i
 8007776:	e7fe      	b.n	8007776 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007778:	f000 fdb6 	bl	80082e8 <xTaskGetSchedulerState>
 800777c:	b910      	cbnz	r0, 8007784 <xQueueGenericReceive+0x4c>
 800777e:	9e01      	ldr	r6, [sp, #4]
 8007780:	b10e      	cbz	r6, 8007786 <xQueueGenericReceive+0x4e>
 8007782:	e085      	b.n	8007890 <xQueueGenericReceive+0x158>
 8007784:	2600      	movs	r6, #0

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8007786:	2700      	movs	r7, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8007788:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80078ac <xQueueGenericReceive+0x174>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800778c:	f7ff fb26 	bl	8006ddc <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007792:	b363      	cbz	r3, 80077ee <xQueueGenericReceive+0xb6>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007794:	4641      	mov	r1, r8
 8007796:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8007798:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800779a:	f7ff fd6c 	bl	8007276 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800779e:	f1ba 0f00 	cmp.w	sl, #0
 80077a2:	d110      	bne.n	80077c6 <xQueueGenericReceive+0x8e>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80077a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077a6:	3b01      	subs	r3, #1
 80077a8:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	b913      	cbnz	r3, 80077b4 <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80077ae:	f000 fe45 	bl	800843c <pvTaskIncrementMutexHeldCount>
 80077b2:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	b1b3      	cbz	r3, 80077e6 <xQueueGenericReceive+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80077b8:	f104 0010 	add.w	r0, r4, #16
 80077bc:	f000 fcfc 	bl	80081b8 <xTaskRemoveFromEventList>
 80077c0:	2801      	cmp	r0, #1
 80077c2:	d110      	bne.n	80077e6 <xQueueGenericReceive+0xae>
 80077c4:	e007      	b.n	80077d6 <xQueueGenericReceive+0x9e>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80077c8:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077ca:	b163      	cbz	r3, 80077e6 <xQueueGenericReceive+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077d0:	f000 fcf2 	bl	80081b8 <xTaskRemoveFromEventList>
 80077d4:	b138      	cbz	r0, 80077e6 <xQueueGenericReceive+0xae>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	4b34      	ldr	r3, [pc, #208]	; (80078ac <xQueueGenericReceive+0x174>)
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80077e6:	f7ff fb1f 	bl	8006e28 <vPortExitCritical>
				return pdPASS;
 80077ea:	2001      	movs	r0, #1
 80077ec:	e05b      	b.n	80078a6 <xQueueGenericReceive+0x16e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077ee:	9d01      	ldr	r5, [sp, #4]
 80077f0:	b91d      	cbnz	r5, 80077fa <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077f2:	f7ff fb19 	bl	8006e28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077f6:	4628      	mov	r0, r5
 80077f8:	e055      	b.n	80078a6 <xQueueGenericReceive+0x16e>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077fa:	b916      	cbnz	r6, 8007802 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80077fc:	a802      	add	r0, sp, #8
 80077fe:	f000 fd1f 	bl	8008240 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007802:	f7ff fb11 	bl	8006e28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007806:	f000 fac5 	bl	8007d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800780a:	f7ff fae7 	bl	8006ddc <vPortEnterCritical>
 800780e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007810:	3301      	adds	r3, #1
 8007812:	d100      	bne.n	8007816 <xQueueGenericReceive+0xde>
 8007814:	6467      	str	r7, [r4, #68]	; 0x44
 8007816:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007818:	3301      	adds	r3, #1
 800781a:	d100      	bne.n	800781e <xQueueGenericReceive+0xe6>
 800781c:	64a7      	str	r7, [r4, #72]	; 0x48
 800781e:	f7ff fb03 	bl	8006e28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007822:	a901      	add	r1, sp, #4
 8007824:	a802      	add	r0, sp, #8
 8007826:	f000 fd1b 	bl	8008260 <xTaskCheckForTimeOut>
 800782a:	bb50      	cbnz	r0, 8007882 <xQueueGenericReceive+0x14a>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800782c:	f7ff fad6 	bl	8006ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007830:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007832:	f7ff faf9 	bl	8006e28 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007836:	b9f5      	cbnz	r5, 8007876 <xQueueGenericReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	b933      	cbnz	r3, 800784a <xQueueGenericReceive+0x112>
					{
						taskENTER_CRITICAL();
 800783c:	f7ff face 	bl	8006ddc <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8007840:	6860      	ldr	r0, [r4, #4]
 8007842:	f000 fd61 	bl	8008308 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8007846:	f7ff faef 	bl	8006e28 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800784a:	9901      	ldr	r1, [sp, #4]
 800784c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007850:	f000 fc78 	bl	8008144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007854:	4620      	mov	r0, r4
 8007856:	f7ff fd23 	bl	80072a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800785a:	f000 fb43 	bl	8007ee4 <xTaskResumeAll>
 800785e:	b108      	cbz	r0, 8007864 <xQueueGenericReceive+0x12c>
 8007860:	2601      	movs	r6, #1
 8007862:	e793      	b.n	800778c <xQueueGenericReceive+0x54>
				{
					portYIELD_WITHIN_API();
 8007864:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007868:	f8c9 3000 	str.w	r3, [r9]
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	e7f4      	b.n	8007860 <xQueueGenericReceive+0x128>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007876:	4620      	mov	r0, r4
 8007878:	f7ff fd12 	bl	80072a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800787c:	f000 fb32 	bl	8007ee4 <xTaskResumeAll>
 8007880:	e7ee      	b.n	8007860 <xQueueGenericReceive+0x128>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8007882:	4620      	mov	r0, r4
 8007884:	f7ff fd0c 	bl	80072a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007888:	f000 fb2c 	bl	8007ee4 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800788c:	2000      	movs	r0, #0
 800788e:	e00a      	b.n	80078a6 <xQueueGenericReceive+0x16e>
 8007890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007894:	b672      	cpsid	i
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	b662      	cpsie	i
 80078a4:	e7fe      	b.n	80078a4 <xQueueGenericReceive+0x16c>
		}
	}
}
 80078a6:	b004      	add	sp, #16
 80078a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	460e      	mov	r6, r1
 80078b4:	4617      	mov	r7, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80078b6:	4604      	mov	r4, r0
 80078b8:	b950      	cbnz	r0, 80078d0 <xQueueReceiveFromISR+0x20>
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	b672      	cpsid	i
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	b662      	cpsie	i
 80078ce:	e7fe      	b.n	80078ce <xQueueReceiveFromISR+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078d0:	b961      	cbnz	r1, 80078ec <xQueueReceiveFromISR+0x3c>
 80078d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80078d4:	b153      	cbz	r3, 80078ec <xQueueReceiveFromISR+0x3c>
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	b672      	cpsid	i
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	b662      	cpsie	i
 80078ea:	e7fe      	b.n	80078ea <xQueueReceiveFromISR+0x3a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078ec:	f7ff fb66 	bl	8006fbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078f0:	f3ef 8511 	mrs	r5, BASEPRI
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	b672      	cpsid	i
 80078fa:	f383 8811 	msr	BASEPRI, r3
 80078fe:	f3bf 8f6f 	isb	sy
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	b662      	cpsie	i

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007908:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800790a:	b1c0      	cbz	r0, 800793e <xQueueReceiveFromISR+0x8e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800790c:	4631      	mov	r1, r6
 800790e:	4620      	mov	r0, r4
 8007910:	f7ff fcb1 	bl	8007276 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 8007914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007916:	3b01      	subs	r3, #1
 8007918:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 800791a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800791c:	3301      	adds	r3, #1
 800791e:	d10a      	bne.n	8007936 <xQueueReceiveFromISR+0x86>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	b15b      	cbz	r3, 800793c <xQueueReceiveFromISR+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007924:	f104 0010 	add.w	r0, r4, #16
 8007928:	f000 fc46 	bl	80081b8 <xTaskRemoveFromEventList>
 800792c:	b130      	cbz	r0, 800793c <xQueueReceiveFromISR+0x8c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800792e:	b12f      	cbz	r7, 800793c <xQueueReceiveFromISR+0x8c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007930:	2001      	movs	r0, #1
 8007932:	6038      	str	r0, [r7, #0]
 8007934:	e003      	b.n	800793e <xQueueReceiveFromISR+0x8e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 8007936:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007938:	3301      	adds	r3, #1
 800793a:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
 800793c:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800793e:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 8007942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007944 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007944:	b510      	push	{r4, lr}
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007946:	4604      	mov	r4, r0
 8007948:	b950      	cbnz	r0, 8007960 <uxQueueMessagesWaiting+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	b672      	cpsid	i
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	b662      	cpsie	i
 800795e:	e7fe      	b.n	800795e <uxQueueMessagesWaiting+0x1a>

	taskENTER_CRITICAL();
 8007960:	f7ff fa3c 	bl	8006ddc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007964:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	}
	taskEXIT_CRITICAL();
 8007966:	f7ff fa5f 	bl	8006e28 <vPortExitCritical>

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800796a:	4620      	mov	r0, r4
 800796c:	bd10      	pop	{r4, pc}
	...

08007970 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007970:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007972:	4a07      	ldr	r2, [pc, #28]	; (8007990 <vQueueUnregisterQueue+0x20>)
 8007974:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007978:	6849      	ldr	r1, [r1, #4]
 800797a:	4281      	cmp	r1, r0
 800797c:	d104      	bne.n	8007988 <vQueueUnregisterQueue+0x18>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800797e:	2100      	movs	r1, #0
 8007980:	4a03      	ldr	r2, [pc, #12]	; (8007990 <vQueueUnregisterQueue+0x20>)
 8007982:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				break;
 8007986:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007988:	3301      	adds	r3, #1
 800798a:	2b08      	cmp	r3, #8
 800798c:	d1f2      	bne.n	8007974 <vQueueUnregisterQueue+0x4>
 800798e:	4770      	bx	lr
 8007990:	200430c4 	.word	0x200430c4

08007994 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007994:	b510      	push	{r4, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8007996:	b950      	cbnz	r0, 80079ae <vQueueDelete+0x1a>
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	b672      	cpsid	i
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	b662      	cpsie	i
 80079ac:	e7fe      	b.n	80079ac <vQueueDelete+0x18>

	traceQUEUE_DELETE( pxQueue );
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80079ae:	f7ff ffdf 	bl	8007970 <vQueueUnregisterQueue>
	}
	#endif
	vPortFree( pxQueue );
}
 80079b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
	}
	#endif
	vPortFree( pxQueue );
 80079b6:	f7ff bbed 	b.w	8007194 <vPortFree>
	...

080079bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079bc:	4a06      	ldr	r2, [pc, #24]	; (80079d8 <prvResetNextTaskUnblockTime+0x1c>)
 80079be:	6813      	ldr	r3, [r2, #0]
 80079c0:	6819      	ldr	r1, [r3, #0]
 80079c2:	4b06      	ldr	r3, [pc, #24]	; (80079dc <prvResetNextTaskUnblockTime+0x20>)
 80079c4:	b911      	cbnz	r1, 80079cc <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079c6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ca:	e003      	b.n	80079d4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079cc:	6812      	ldr	r2, [r2, #0]
 80079ce:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80079d0:	68d2      	ldr	r2, [r2, #12]
 80079d2:	6852      	ldr	r2, [r2, #4]
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	4770      	bx	lr
 80079d8:	20042c90 	.word	0x20042c90
 80079dc:	20042d5c 	.word	0x20042d5c

080079e0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80079e0:	4b0e      	ldr	r3, [pc, #56]	; (8007a1c <prvAddCurrentTaskToDelayedList+0x3c>)
 80079e2:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80079e4:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80079e6:	6050      	str	r0, [r2, #4]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80079e8:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80079ea:	4a0d      	ldr	r2, [pc, #52]	; (8007a20 <prvAddCurrentTaskToDelayedList+0x40>)
 80079ec:	6812      	ldr	r2, [r2, #0]
 80079ee:	4290      	cmp	r0, r2
 80079f0:	d207      	bcs.n	8007a02 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80079f2:	4a0c      	ldr	r2, [pc, #48]	; (8007a24 <prvAddCurrentTaskToDelayedList+0x44>)
 80079f4:	6810      	ldr	r0, [r2, #0]
 80079f6:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80079fc:	3104      	adds	r1, #4
 80079fe:	f7ff b96f 	b.w	8006ce0 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8007a02:	4a09      	ldr	r2, [pc, #36]	; (8007a28 <prvAddCurrentTaskToDelayedList+0x48>)
 8007a04:	6810      	ldr	r0, [r2, #0]
 8007a06:	6819      	ldr	r1, [r3, #0]
 8007a08:	3104      	adds	r1, #4
 8007a0a:	f7ff f969 	bl	8006ce0 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8007a0e:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <prvAddCurrentTaskToDelayedList+0x4c>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4294      	cmp	r4, r2
 8007a14:	d200      	bcs.n	8007a18 <prvAddCurrentTaskToDelayedList+0x38>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8007a16:	601c      	str	r4, [r3, #0]
 8007a18:	bd10      	pop	{r4, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20042d58 	.word	0x20042d58
 8007a20:	20042d60 	.word	0x20042d60
 8007a24:	20042d64 	.word	0x20042d64
 8007a28:	20042c90 	.word	0x20042c90
 8007a2c:	20042d5c 	.word	0x20042d5c

08007a30 <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8007a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	469a      	mov	sl, r3
 8007a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a38:	4681      	mov	r9, r0
 8007a3a:	460e      	mov	r6, r1
 8007a3c:	4615      	mov	r5, r2
 8007a3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a40:	b93b      	cbnz	r3, 8007a52 <xTaskGenericCreate.part.5+0x22>
 8007a42:	0090      	lsls	r0, r2, #2
 8007a44:	f7ff fb10 	bl	8007068 <pvPortMalloc>

		if( pxStack != NULL )
 8007a48:	4683      	mov	fp, r0
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	f000 80b2 	beq.w	8007bb4 <xTaskGenericCreate.part.5+0x184>
 8007a50:	e000      	b.n	8007a54 <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a52:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8007a54:	205c      	movs	r0, #92	; 0x5c
 8007a56:	f7ff fb07 	bl	8007068 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	b188      	cbz	r0, 8007a82 <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8007a5e:	00ad      	lsls	r5, r5, #2
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8007a60:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8007a64:	21a5      	movs	r1, #165	; 0xa5
 8007a66:	4658      	mov	r0, fp
 8007a68:	462a      	mov	r2, r5
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a6a:	3d04      	subs	r5, #4
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8007a6c:	f009 fed6 	bl	801181c <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007a70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007a72:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8007a76:	441d      	add	r5, r3
 8007a78:	1e73      	subs	r3, r6, #1
 8007a7a:	360f      	adds	r6, #15
 8007a7c:	f025 0507 	bic.w	r5, r5, #7
 8007a80:	e005      	b.n	8007a8e <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8007a82:	4658      	mov	r0, fp
 8007a84:	f7ff fb86 	bl	8007194 <vPortFree>
 8007a88:	e094      	b.n	8007bb4 <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a8a:	429e      	cmp	r6, r3
 8007a8c:	d006      	beq.n	8007a9c <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8007a8e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8007a92:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a96:	7819      	ldrb	r1, [r3, #0]
 8007a98:	2900      	cmp	r1, #0
 8007a9a:	d1f6      	bne.n	8007a8a <xTaskGenericCreate.part.5+0x5a>
 8007a9c:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a9e:	f04f 0800 	mov.w	r8, #0
 8007aa2:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8007aa4:	f104 0604 	add.w	r6, r4, #4
 8007aa8:	bf28      	it	cs
 8007aaa:	f04f 0b06 	movcs.w	fp, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007aae:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8007ab2:	4630      	mov	r0, r6

	pxTCB->uxPriority = uxPriority;
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
 8007ab4:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8007ab8:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8007abc:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8007ac0:	f7ff f8ff 	bl	8006cc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8007ac4:	f104 0018 	add.w	r0, r4, #24
 8007ac8:	f7ff f8fb 	bl	8006cc2 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007acc:	f1cb 0307 	rsb	r3, fp, #7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 8007ad0:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ad4:	4652      	mov	r2, sl
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad6:	61a3      	str	r3, [r4, #24]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ad8:	4649      	mov	r1, r9
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8007ada:	6124      	str	r4, [r4, #16]
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007adc:	4628      	mov	r0, r5
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8007ade:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8007ae0:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ae4:	f7ff f95a 	bl	8006d9c <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8007ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aea:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8007aec:	b103      	cbz	r3, 8007af0 <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aee:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8007af0:	f7ff f974 	bl	8006ddc <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8007af4:	4a31      	ldr	r2, [pc, #196]	; (8007bbc <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 8007af6:	4d32      	ldr	r5, [pc, #200]	; (8007bc0 <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 8007af8:	6813      	ldr	r3, [r2, #0]
 8007afa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8007be8 <xTaskGenericCreate.part.5+0x1b8>
 8007afe:	3301      	adds	r3, #1
 8007b00:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	bb3b      	cbnz	r3, 8007b56 <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8007b06:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	2a01      	cmp	r2, #1
 8007b0c:	d12b      	bne.n	8007b66 <xTaskGenericCreate.part.5+0x136>
 8007b0e:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b10:	eb09 0008 	add.w	r0, r9, r8
 8007b14:	f108 0814 	add.w	r8, r8, #20
 8007b18:	f7ff f8c8 	bl	8006cac <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b1c:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8007b20:	d1f6      	bne.n	8007b10 <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b22:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007bec <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 8007b26:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8007bf0 <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	f7ff f8be 	bl	8006cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b30:	4640      	mov	r0, r8
 8007b32:	f7ff f8bb 	bl	8006cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b36:	4823      	ldr	r0, [pc, #140]	; (8007bc4 <xTaskGenericCreate.part.5+0x194>)
 8007b38:	f7ff f8b8 	bl	8006cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b3c:	4822      	ldr	r0, [pc, #136]	; (8007bc8 <xTaskGenericCreate.part.5+0x198>)
 8007b3e:	f7ff f8b5 	bl	8006cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b42:	4822      	ldr	r0, [pc, #136]	; (8007bcc <xTaskGenericCreate.part.5+0x19c>)
 8007b44:	f7ff f8b2 	bl	8006cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b48:	4b21      	ldr	r3, [pc, #132]	; (8007bd0 <xTaskGenericCreate.part.5+0x1a0>)
 8007b4a:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b4e:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <xTaskGenericCreate.part.5+0x1a4>)
 8007b50:	f8c3 8000 	str.w	r8, [r3]
 8007b54:	e007      	b.n	8007b66 <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8007b56:	4b20      	ldr	r3, [pc, #128]	; (8007bd8 <xTaskGenericCreate.part.5+0x1a8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	b923      	cbnz	r3, 8007b66 <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8007b5c:	682b      	ldr	r3, [r5, #0]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	429f      	cmp	r7, r3
 8007b62:	d300      	bcc.n	8007b66 <xTaskGenericCreate.part.5+0x136>
					{
						pxCurrentTCB = pxNewTCB;
 8007b64:	602c      	str	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8007b66:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8007b68:	491d      	ldr	r1, [pc, #116]	; (8007be0 <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	6013      	str	r3, [r2, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b70:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8007b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007b74:	2401      	movs	r4, #1
 8007b76:	680b      	ldr	r3, [r1, #0]
 8007b78:	fa04 f002 	lsl.w	r0, r4, r2
 8007b7c:	4303      	orrs	r3, r0
 8007b7e:	2014      	movs	r0, #20
 8007b80:	600b      	str	r3, [r1, #0]
 8007b82:	4631      	mov	r1, r6
 8007b84:	fb00 9002 	mla	r0, r0, r2, r9
 8007b88:	f7ff f89e 	bl	8006cc8 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8007b8c:	f7ff f94c 	bl	8006e28 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8007b90:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <xTaskGenericCreate.part.5+0x1a8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	b15b      	cbz	r3, 8007bae <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8007b96:	682b      	ldr	r3, [r5, #0]
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	429f      	cmp	r7, r3
 8007b9c:	d907      	bls.n	8007bae <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba2:	4b10      	ldr	r3, [pc, #64]	; (8007be4 <xTaskGenericCreate.part.5+0x1b4>)
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8007bae:	4620      	mov	r0, r4
 8007bb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8007bb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	20042da8 	.word	0x20042da8
 8007bc0:	20042d58 	.word	0x20042d58
 8007bc4:	20042d68 	.word	0x20042d68
 8007bc8:	20042c9c 	.word	0x20042c9c
 8007bcc:	20042cb0 	.word	0x20042cb0
 8007bd0:	20042c90 	.word	0x20042c90
 8007bd4:	20042d64 	.word	0x20042d64
 8007bd8:	20042c94 	.word	0x20042c94
 8007bdc:	20042d7c 	.word	0x20042d7c
 8007be0:	20042dac 	.word	0x20042dac
 8007be4:	e000ed04 	.word	0xe000ed04
 8007be8:	20042cc8 	.word	0x20042cc8
 8007bec:	20042d80 	.word	0x20042d80
 8007bf0:	20042d94 	.word	0x20042d94

08007bf4 <prvTaskIsTaskSuspended.part.0>:
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	b672      	cpsid	i
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	b662      	cpsie	i
 8007c08:	e7fe      	b.n	8007c08 <prvTaskIsTaskSuspended.part.0+0x14>

08007c0a <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8007c0a:	b470      	push	{r4, r5, r6}
 8007c0c:	ac03      	add	r4, sp, #12
 8007c0e:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8007c10:	b950      	cbnz	r0, 8007c28 <xTaskGenericCreate+0x1e>
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	b672      	cpsid	i
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	b662      	cpsie	i
 8007c26:	e7fe      	b.n	8007c26 <xTaskGenericCreate+0x1c>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8007c28:	2c06      	cmp	r4, #6
 8007c2a:	d90a      	bls.n	8007c42 <xTaskGenericCreate+0x38>
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	b672      	cpsid	i
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	b662      	cpsie	i
 8007c40:	e7fe      	b.n	8007c40 <xTaskGenericCreate+0x36>
 8007c42:	9605      	str	r6, [sp, #20]
 8007c44:	9504      	str	r5, [sp, #16]
 8007c46:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8007c48:	bc70      	pop	{r4, r5, r6}
 8007c4a:	f7ff bef1 	b.w	8007a30 <xTaskGenericCreate.part.5>
	...

08007c50 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4604      	mov	r4, r0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007c54:	f7ff f8c2 	bl	8006ddc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007c58:	b90c      	cbnz	r4, 8007c5e <vTaskDelete+0xe>
 8007c5a:	4b27      	ldr	r3, [pc, #156]	; (8007cf8 <vTaskDelete+0xa8>)
 8007c5c:	681c      	ldr	r4, [r3, #0]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8007c5e:	1d25      	adds	r5, r4, #4
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7ff f855 	bl	8006d10 <uxListRemove>
 8007c66:	b960      	cbnz	r0, 8007c82 <vTaskDelete+0x32>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007c68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007c6a:	2214      	movs	r2, #20
 8007c6c:	4b23      	ldr	r3, [pc, #140]	; (8007cfc <vTaskDelete+0xac>)
 8007c6e:	4342      	muls	r2, r0
 8007c70:	589b      	ldr	r3, [r3, r2]
 8007c72:	b933      	cbnz	r3, 8007c82 <vTaskDelete+0x32>
 8007c74:	4922      	ldr	r1, [pc, #136]	; (8007d00 <vTaskDelete+0xb0>)
 8007c76:	2301      	movs	r3, #1
 8007c78:	680a      	ldr	r2, [r1, #0]
 8007c7a:	4083      	lsls	r3, r0
 8007c7c:	ea22 0303 	bic.w	r3, r2, r3
 8007c80:	600b      	str	r3, [r1, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c84:	b11b      	cbz	r3, 8007c8e <vTaskDelete+0x3e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c86:	f104 0018 	add.w	r0, r4, #24
 8007c8a:	f7ff f841 	bl	8006d10 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8007c8e:	4629      	mov	r1, r5
 8007c90:	481c      	ldr	r0, [pc, #112]	; (8007d04 <vTaskDelete+0xb4>)
 8007c92:	f7ff f819 	bl	8006cc8 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8007c96:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <vTaskDelete+0xb8>)
 8007c98:	6813      	ldr	r3, [r2, #0]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	6013      	str	r3, [r2, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <vTaskDelete+0xbc>)
 8007ca0:	6813      	ldr	r3, [r2, #0]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	6013      	str	r3, [r2, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007ca6:	f7ff f8bf 	bl	8006e28 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007caa:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <vTaskDelete+0xc0>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	b313      	cbz	r3, 8007cf6 <vTaskDelete+0xa6>
		{
			if( pxTCB == pxCurrentTCB )
 8007cb0:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <vTaskDelete+0xa8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d116      	bne.n	8007ce6 <vTaskDelete+0x96>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <vTaskDelete+0xc4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	b153      	cbz	r3, 8007cd4 <vTaskDelete+0x84>
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	b672      	cpsid	i
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	b662      	cpsie	i
 8007cd2:	e7fe      	b.n	8007cd2 <vTaskDelete+0x82>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 8007cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd8:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <vTaskDelete+0xc8>)
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	bd38      	pop	{r3, r4, r5, pc}
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 8007ce6:	f7ff f879 	bl	8006ddc <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 8007cea:	f7ff fe67 	bl	80079bc <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
			}
		}
	}
 8007cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				the task that has just been deleted. */
				taskENTER_CRITICAL();
				{
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
 8007cf2:	f7ff b899 	b.w	8006e28 <vPortExitCritical>
 8007cf6:	bd38      	pop	{r3, r4, r5, pc}
 8007cf8:	20042d58 	.word	0x20042d58
 8007cfc:	20042cc8 	.word	0x20042cc8
 8007d00:	20042dac 	.word	0x20042dac
 8007d04:	20042c9c 	.word	0x20042c9c
 8007d08:	20042c98 	.word	0x20042c98
 8007d0c:	20042d7c 	.word	0x20042d7c
 8007d10:	20042c94 	.word	0x20042c94
 8007d14:	20042d54 	.word	0x20042d54
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d1e:	2400      	movs	r4, #0
 8007d20:	2280      	movs	r2, #128	; 0x80
 8007d22:	4917      	ldr	r1, [pc, #92]	; (8007d80 <vTaskStartScheduler+0x64>)
 8007d24:	9402      	str	r4, [sp, #8]
 8007d26:	4623      	mov	r3, r4
 8007d28:	9401      	str	r4, [sp, #4]
 8007d2a:	9400      	str	r4, [sp, #0]
 8007d2c:	4815      	ldr	r0, [pc, #84]	; (8007d84 <vTaskStartScheduler+0x68>)
 8007d2e:	f7ff fe7f 	bl	8007a30 <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d32:	2801      	cmp	r0, #1
 8007d34:	d116      	bne.n	8007d64 <vTaskStartScheduler+0x48>
 8007d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3a:	b672      	cpsid	i
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	b662      	cpsie	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d4e:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <vTaskStartScheduler+0x6c>)
 8007d50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d52:	4b0e      	ldr	r3, [pc, #56]	; (8007d8c <vTaskStartScheduler+0x70>)
 8007d54:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <vTaskStartScheduler+0x74>)
 8007d58:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8007d5a:	b004      	add	sp, #16
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d60:	f7ff b8d8 	b.w	8006f14 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8007d64:	b950      	cbnz	r0, 8007d7c <vTaskStartScheduler+0x60>
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	b672      	cpsid	i
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	b662      	cpsie	i
 8007d7a:	e7fe      	b.n	8007d7a <vTaskStartScheduler+0x5e>
	}
}
 8007d7c:	b004      	add	sp, #16
 8007d7e:	bd10      	pop	{r4, pc}
 8007d80:	0802c9c8 	.word	0x0802c9c8
 8007d84:	08008055 	.word	0x08008055
 8007d88:	20042d5c 	.word	0x20042d5c
 8007d8c:	20042c94 	.word	0x20042c94
 8007d90:	20042d60 	.word	0x20042d60

08007d94 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d94:	4a02      	ldr	r2, [pc, #8]	; (8007da0 <vTaskSuspendAll+0xc>)
 8007d96:	6813      	ldr	r3, [r2, #0]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20042d54 	.word	0x20042d54

08007da4 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007da4:	4b01      	ldr	r3, [pc, #4]	; (8007dac <xTaskGetTickCount+0x8>)
 8007da6:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20042d60 	.word	0x20042d60

08007db0 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db0:	4b41      	ldr	r3, [pc, #260]	; (8007eb8 <xTaskIncrementTick+0x108>)
 8007db2:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d13e      	bne.n	8007e3a <xTaskIncrementTick+0x8a>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8007dbc:	4b3f      	ldr	r3, [pc, #252]	; (8007ebc <xTaskIncrementTick+0x10c>)
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	3201      	adds	r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007dc4:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8007dc6:	b9cd      	cbnz	r5, 8007dfc <xTaskIncrementTick+0x4c>
			{
				taskSWITCH_DELAYED_LISTS();
 8007dc8:	4b3d      	ldr	r3, [pc, #244]	; (8007ec0 <xTaskIncrementTick+0x110>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	b152      	cbz	r2, 8007de6 <xTaskIncrementTick+0x36>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	b672      	cpsid	i
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	b662      	cpsie	i
 8007de4:	e7fe      	b.n	8007de4 <xTaskIncrementTick+0x34>
 8007de6:	4a37      	ldr	r2, [pc, #220]	; (8007ec4 <xTaskIncrementTick+0x114>)
 8007de8:	6819      	ldr	r1, [r3, #0]
 8007dea:	6810      	ldr	r0, [r2, #0]
 8007dec:	6018      	str	r0, [r3, #0]
 8007dee:	6011      	str	r1, [r2, #0]
 8007df0:	4a35      	ldr	r2, [pc, #212]	; (8007ec8 <xTaskIncrementTick+0x118>)
 8007df2:	6813      	ldr	r3, [r2, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	f7ff fde0 	bl	80079bc <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8007dfc:	4c33      	ldr	r4, [pc, #204]	; (8007ecc <xTaskIncrementTick+0x11c>)
 8007dfe:	f04f 0b00 	mov.w	fp, #0
 8007e02:	4e33      	ldr	r6, [pc, #204]	; (8007ed0 <xTaskIncrementTick+0x120>)
 8007e04:	6823      	ldr	r3, [r4, #0]
 8007e06:	9401      	str	r4, [sp, #4]
 8007e08:	429d      	cmp	r5, r3
 8007e0a:	4f32      	ldr	r7, [pc, #200]	; (8007ed4 <xTaskIncrementTick+0x124>)
 8007e0c:	d30b      	bcc.n	8007e26 <xTaskIncrementTick+0x76>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e0e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8007ec0 <xTaskIncrementTick+0x110>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8007e12:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8007ee0 <xTaskIncrementTick+0x130>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e16:	f8d8 2000 	ldr.w	r2, [r8]
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	b9a2      	cbnz	r2, 8007e48 <xTaskIncrementTick+0x98>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8007e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e22:	9b01      	ldr	r3, [sp, #4]
 8007e24:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007e2a:	2214      	movs	r2, #20
 8007e2c:	434a      	muls	r2, r1
 8007e2e:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8007e30:	2a02      	cmp	r2, #2
 8007e32:	bf28      	it	cs
 8007e34:	f04f 0b01 	movcs.w	fp, #1
 8007e38:	e034      	b.n	8007ea4 <xTaskIncrementTick+0xf4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e3a:	4a27      	ldr	r2, [pc, #156]	; (8007ed8 <xTaskIncrementTick+0x128>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e3c:	f04f 0b00 	mov.w	fp, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007e40:	6813      	ldr	r3, [r2, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	6013      	str	r3, [r2, #0]
 8007e46:	e02d      	b.n	8007ea4 <xTaskIncrementTick+0xf4>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007e48:	f8d8 2000 	ldr.w	r2, [r8]
 8007e4c:	68d2      	ldr	r2, [r2, #12]
 8007e4e:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8007e50:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8007e52:	428d      	cmp	r5, r1
 8007e54:	d202      	bcs.n	8007e5c <xTaskIncrementTick+0xac>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8007e56:	9b01      	ldr	r3, [sp, #4]
 8007e58:	6019      	str	r1, [r3, #0]
							break;
 8007e5a:	e7e4      	b.n	8007e26 <xTaskIncrementTick+0x76>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007e5c:	f104 0a04 	add.w	sl, r4, #4
 8007e60:	4650      	mov	r0, sl
 8007e62:	f7fe ff55 	bl	8006d10 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e66:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007e68:	b119      	cbz	r1, 8007e72 <xTaskIncrementTick+0xc2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e6a:	f104 0018 	add.w	r0, r4, #24
 8007e6e:	f7fe ff4f 	bl	8006d10 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8007e72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007e74:	2301      	movs	r3, #1
 8007e76:	f8d9 1000 	ldr.w	r1, [r9]
 8007e7a:	fa03 fe00 	lsl.w	lr, r3, r0
 8007e7e:	ea4e 0101 	orr.w	r1, lr, r1
 8007e82:	f04f 0e14 	mov.w	lr, #20
 8007e86:	f8c9 1000 	str.w	r1, [r9]
 8007e8a:	4651      	mov	r1, sl
 8007e8c:	fb0e 6000 	mla	r0, lr, r0, r6
 8007e90:	f7fe ff1a 	bl	8006cc8 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e94:	6838      	ldr	r0, [r7, #0]
 8007e96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e98:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8007e9a:	4291      	cmp	r1, r2
 8007e9c:	bf28      	it	cs
 8007e9e:	f04f 0b01 	movcs.w	fp, #1
 8007ea2:	e7b8      	b.n	8007e16 <xTaskIncrementTick+0x66>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ea4:	4a0d      	ldr	r2, [pc, #52]	; (8007edc <xTaskIncrementTick+0x12c>)
 8007ea6:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8007ea8:	2a00      	cmp	r2, #0
 8007eaa:	bf18      	it	ne
 8007eac:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8007eb0:	4658      	mov	r0, fp
 8007eb2:	b003      	add	sp, #12
 8007eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb8:	20042d54 	.word	0x20042d54
 8007ebc:	20042d60 	.word	0x20042d60
 8007ec0:	20042c90 	.word	0x20042c90
 8007ec4:	20042d64 	.word	0x20042d64
 8007ec8:	20042c8c 	.word	0x20042c8c
 8007ecc:	20042d5c 	.word	0x20042d5c
 8007ed0:	20042cc8 	.word	0x20042cc8
 8007ed4:	20042d58 	.word	0x20042d58
 8007ed8:	20042cc4 	.word	0x20042cc4
 8007edc:	20042db0 	.word	0x20042db0
 8007ee0:	20042dac 	.word	0x20042dac

08007ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ee8:	4c31      	ldr	r4, [pc, #196]	; (8007fb0 <xTaskResumeAll+0xcc>)
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	b953      	cbnz	r3, 8007f04 <xTaskResumeAll+0x20>
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	b672      	cpsid	i
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	b662      	cpsie	i
 8007f02:	e7fe      	b.n	8007f02 <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f04:	f7fe ff6a 	bl	8006ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	b10b      	cbz	r3, 8007f16 <xTaskResumeAll+0x32>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8007f12:	2400      	movs	r4, #0
 8007f14:	e047      	b.n	8007fa6 <xTaskResumeAll+0xc2>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f16:	4b27      	ldr	r3, [pc, #156]	; (8007fb4 <xTaskResumeAll+0xd0>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f9      	beq.n	8007f12 <xTaskResumeAll+0x2e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f1e:	4d26      	ldr	r5, [pc, #152]	; (8007fb8 <xTaskResumeAll+0xd4>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8007f20:	4e26      	ldr	r6, [pc, #152]	; (8007fbc <xTaskResumeAll+0xd8>)
 8007f22:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8007fd0 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	b303      	cbz	r3, 8007f6c <xTaskResumeAll+0x88>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007f2a:	68eb      	ldr	r3, [r5, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8007f2c:	2701      	movs	r7, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007f2e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007f30:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f34:	f104 0018 	add.w	r0, r4, #24
 8007f38:	f7fe feea 	bl	8006d10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f7fe fee7 	bl	8006d10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f44:	6833      	ldr	r3, [r6, #0]
 8007f46:	2014      	movs	r0, #20
 8007f48:	fa07 f102 	lsl.w	r1, r7, r2
 8007f4c:	fb00 8002 	mla	r0, r0, r2, r8
 8007f50:	430b      	orrs	r3, r1
 8007f52:	4649      	mov	r1, r9
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	f7fe feb7 	bl	8006cc8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f5a:	4b19      	ldr	r3, [pc, #100]	; (8007fc0 <xTaskResumeAll+0xdc>)
 8007f5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d3df      	bcc.n	8007f26 <xTaskResumeAll+0x42>
					{
						xYieldPending = pdTRUE;
 8007f66:	4b17      	ldr	r3, [pc, #92]	; (8007fc4 <xTaskResumeAll+0xe0>)
 8007f68:	601f      	str	r7, [r3, #0]
 8007f6a:	e7da      	b.n	8007f22 <xTaskResumeAll+0x3e>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8007f6c:	4c16      	ldr	r4, [pc, #88]	; (8007fc8 <xTaskResumeAll+0xe4>)
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	b963      	cbnz	r3, 8007f8c <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8007f72:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <xTaskResumeAll+0xe0>)
 8007f74:	681c      	ldr	r4, [r3, #0]
 8007f76:	2c01      	cmp	r4, #1
 8007f78:	d1cb      	bne.n	8007f12 <xTaskResumeAll+0x2e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7e:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <xTaskResumeAll+0xe8>)
 8007f80:	601a      	str	r2, [r3, #0]
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	e00c      	b.n	8007fa6 <xTaskResumeAll+0xc2>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8007f8c:	4d0d      	ldr	r5, [pc, #52]	; (8007fc4 <xTaskResumeAll+0xe0>)
 8007f8e:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0ed      	beq.n	8007f72 <xTaskResumeAll+0x8e>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8007f96:	f7ff ff0b 	bl	8007db0 <xTaskIncrementTick>
 8007f9a:	b100      	cbz	r0, 8007f9e <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 8007f9c:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	e7f4      	b.n	8007f90 <xTaskResumeAll+0xac>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fa6:	f7fe ff3f 	bl	8006e28 <vPortExitCritical>

	return xAlreadyYielded;
}
 8007faa:	4620      	mov	r0, r4
 8007fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fb0:	20042d54 	.word	0x20042d54
 8007fb4:	20042da8 	.word	0x20042da8
 8007fb8:	20042d68 	.word	0x20042d68
 8007fbc:	20042dac 	.word	0x20042dac
 8007fc0:	20042d58 	.word	0x20042d58
 8007fc4:	20042db0 	.word	0x20042db0
 8007fc8:	20042cc4 	.word	0x20042cc4
 8007fcc:	e000ed04 	.word	0xe000ed04
 8007fd0:	20042cc8 	.word	0x20042cc8

08007fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fd4:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fd6:	b940      	cbnz	r0, 8007fea <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8007fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fdc:	4b18      	ldr	r3, [pc, #96]	; (8008040 <vTaskDelay+0x6c>)
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fea:	4b16      	ldr	r3, [pc, #88]	; (8008044 <vTaskDelay+0x70>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	b153      	cbz	r3, 8008006 <vTaskDelay+0x32>
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	b672      	cpsid	i
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	b662      	cpsie	i
 8008004:	e7fe      	b.n	8008004 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008006:	f7ff fec5 	bl	8007d94 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800800a:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <vTaskDelay+0x74>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800800c:	4d0f      	ldr	r5, [pc, #60]	; (800804c <vTaskDelay+0x78>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8008012:	6828      	ldr	r0, [r5, #0]
 8008014:	3004      	adds	r0, #4
 8008016:	f7fe fe7b 	bl	8006d10 <uxListRemove>
 800801a:	b940      	cbnz	r0, 800802e <vTaskDelay+0x5a>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	490c      	ldr	r1, [pc, #48]	; (8008050 <vTaskDelay+0x7c>)
 8008020:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008022:	2301      	movs	r3, #1
 8008024:	680a      	ldr	r2, [r1, #0]
 8008026:	4083      	lsls	r3, r0
 8008028:	ea22 0303 	bic.w	r3, r2, r3
 800802c:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800802e:	4620      	mov	r0, r4
 8008030:	f7ff fcd6 	bl	80079e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008034:	f7ff ff56 	bl	8007ee4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008038:	2800      	cmp	r0, #0
 800803a:	d0cd      	beq.n	8007fd8 <vTaskDelay+0x4>
 800803c:	bd38      	pop	{r3, r4, r5, pc}
 800803e:	bf00      	nop
 8008040:	e000ed04 	.word	0xe000ed04
 8008044:	20042d54 	.word	0x20042d54
 8008048:	20042d60 	.word	0x20042d60
 800804c:	20042d58 	.word	0x20042d58
 8008050:	20042dac 	.word	0x20042dac

08008054 <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8008054:	4d18      	ldr	r5, [pc, #96]	; (80080b8 <prvIdleTask+0x64>)
 8008056:	462e      	mov	r6, r5
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008058:	b580      	push	{r7, lr}
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800805a:	4f18      	ldr	r7, [pc, #96]	; (80080bc <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b1f3      	cbz	r3, 800809e <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8008060:	f7ff fe98 	bl	8007d94 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8008064:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8008066:	f7ff ff3d 	bl	8007ee4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800806a:	2c00      	cmp	r4, #0
 800806c:	d0f6      	beq.n	800805c <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800806e:	f7fe feb5 	bl	8006ddc <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <prvIdleTask+0x68>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8008078:	1d20      	adds	r0, r4, #4
 800807a:	f7fe fe49 	bl	8006d10 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800807e:	4a10      	ldr	r2, [pc, #64]	; (80080c0 <prvIdleTask+0x6c>)
 8008080:	6813      	ldr	r3, [r2, #0]
 8008082:	3b01      	subs	r3, #1
 8008084:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8008086:	6833      	ldr	r3, [r6, #0]
 8008088:	3b01      	subs	r3, #1
 800808a:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 800808c:	f7fe fecc 	bl	8006e28 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8008090:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008092:	f7ff f87f 	bl	8007194 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8008096:	4620      	mov	r0, r4
 8008098:	f7ff f87c 	bl	8007194 <vPortFree>
 800809c:	e7de      	b.n	800805c <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <prvIdleTask+0x70>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d9d9      	bls.n	800805a <prvIdleTask+0x6>
			{
				taskYIELD();
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <prvIdleTask+0x74>)
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	e7d0      	b.n	800805a <prvIdleTask+0x6>
 80080b8:	20042c98 	.word	0x20042c98
 80080bc:	20042c9c 	.word	0x20042c9c
 80080c0:	20042da8 	.word	0x20042da8
 80080c4:	20042cc8 	.word	0x20042cc8
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080cc:	4b18      	ldr	r3, [pc, #96]	; (8008130 <vTaskSwitchContext+0x64>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	4b18      	ldr	r3, [pc, #96]	; (8008134 <vTaskSwitchContext+0x68>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080d2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080d4:	b10a      	cbz	r2, 80080da <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080d6:	2201      	movs	r2, #1
 80080d8:	e027      	b.n	800812a <vTaskSwitchContext+0x5e>
	}
	else
	{
		xYieldPending = pdFALSE;
 80080da:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80080dc:	4b16      	ldr	r3, [pc, #88]	; (8008138 <vTaskSwitchContext+0x6c>)
 80080de:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80080e0:	fab3 f383 	clz	r3, r3
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2214      	movs	r2, #20
 80080e8:	4914      	ldr	r1, [pc, #80]	; (800813c <vTaskSwitchContext+0x70>)
 80080ea:	f1c3 031f 	rsb	r3, r3, #31
 80080ee:	435a      	muls	r2, r3
 80080f0:	588c      	ldr	r4, [r1, r2]
 80080f2:	1888      	adds	r0, r1, r2
 80080f4:	b954      	cbnz	r4, 800810c <vTaskSwitchContext+0x40>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	b672      	cpsid	i
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	b662      	cpsie	i
 800810a:	e7fe      	b.n	800810a <vTaskSwitchContext+0x3e>
 800810c:	6844      	ldr	r4, [r0, #4]
 800810e:	3208      	adds	r2, #8
 8008110:	6864      	ldr	r4, [r4, #4]
 8008112:	440a      	add	r2, r1
 8008114:	4294      	cmp	r4, r2
 8008116:	6044      	str	r4, [r0, #4]
 8008118:	bf04      	itt	eq
 800811a:	6862      	ldreq	r2, [r4, #4]
 800811c:	6042      	streq	r2, [r0, #4]
 800811e:	2214      	movs	r2, #20
 8008120:	fb02 1303 	mla	r3, r2, r3, r1
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	4b05      	ldr	r3, [pc, #20]	; (8008140 <vTaskSwitchContext+0x74>)
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	bd10      	pop	{r4, pc}
 800812e:	bf00      	nop
 8008130:	20042d54 	.word	0x20042d54
 8008134:	20042db0 	.word	0x20042db0
 8008138:	20042dac 	.word	0x20042dac
 800813c:	20042cc8 	.word	0x20042cc8
 8008140:	20042d58 	.word	0x20042d58

08008144 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8008148:	b950      	cbnz	r0, 8008160 <vTaskPlaceOnEventList+0x1c>
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	b672      	cpsid	i
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	b662      	cpsie	i
 800815e:	e7fe      	b.n	800815e <vTaskPlaceOnEventList+0x1a>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008160:	4c11      	ldr	r4, [pc, #68]	; (80081a8 <vTaskPlaceOnEventList+0x64>)
 8008162:	6821      	ldr	r1, [r4, #0]
 8008164:	3118      	adds	r1, #24
 8008166:	f7fe fdbb 	bl	8006ce0 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800816a:	6820      	ldr	r0, [r4, #0]
 800816c:	3004      	adds	r0, #4
 800816e:	f7fe fdcf 	bl	8006d10 <uxListRemove>
 8008172:	b940      	cbnz	r0, 8008186 <vTaskPlaceOnEventList+0x42>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008174:	6823      	ldr	r3, [r4, #0]
 8008176:	490d      	ldr	r1, [pc, #52]	; (80081ac <vTaskPlaceOnEventList+0x68>)
 8008178:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800817a:	2301      	movs	r3, #1
 800817c:	680a      	ldr	r2, [r1, #0]
 800817e:	4083      	lsls	r3, r0
 8008180:	ea22 0303 	bic.w	r3, r2, r3
 8008184:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8008186:	1c6b      	adds	r3, r5, #1
 8008188:	d106      	bne.n	8008198 <vTaskPlaceOnEventList+0x54>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800818a:	6821      	ldr	r1, [r4, #0]
 800818c:	4808      	ldr	r0, [pc, #32]	; (80081b0 <vTaskPlaceOnEventList+0x6c>)
 800818e:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8008194:	f7fe bd98 	b.w	8006cc8 <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8008198:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <vTaskPlaceOnEventList+0x70>)
 800819a:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800819c:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800819e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80081a2:	f7ff bc1d 	b.w	80079e0 <prvAddCurrentTaskToDelayedList>
 80081a6:	bf00      	nop
 80081a8:	20042d58 	.word	0x20042d58
 80081ac:	20042dac 	.word	0x20042dac
 80081b0:	20042cb0 	.word	0x20042cb0
 80081b4:	20042d60 	.word	0x20042d60

080081b8 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081b8:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081ba:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80081bc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80081be:	b954      	cbnz	r4, 80081d6 <xTaskRemoveFromEventList+0x1e>
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	b672      	cpsid	i
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	b662      	cpsie	i
 80081d4:	e7fe      	b.n	80081d4 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081d6:	f104 0518 	add.w	r5, r4, #24
 80081da:	4628      	mov	r0, r5
 80081dc:	f7fe fd98 	bl	8006d10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e0:	4b11      	ldr	r3, [pc, #68]	; (8008228 <xTaskRemoveFromEventList+0x70>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	b983      	cbnz	r3, 8008208 <xTaskRemoveFromEventList+0x50>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 80081e6:	1d26      	adds	r6, r4, #4
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7fe fd91 	bl	8006d10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80081ee:	490f      	ldr	r1, [pc, #60]	; (800822c <xTaskRemoveFromEventList+0x74>)
 80081f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80081f2:	2301      	movs	r3, #1
 80081f4:	680a      	ldr	r2, [r1, #0]
 80081f6:	2014      	movs	r0, #20
 80081f8:	40ab      	lsls	r3, r5
 80081fa:	4313      	orrs	r3, r2
 80081fc:	600b      	str	r3, [r1, #0]
 80081fe:	4631      	mov	r1, r6
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <xTaskRemoveFromEventList+0x78>)
 8008202:	fb00 3005 	mla	r0, r0, r5, r3
 8008206:	e001      	b.n	800820c <xTaskRemoveFromEventList+0x54>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008208:	4629      	mov	r1, r5
 800820a:	480a      	ldr	r0, [pc, #40]	; (8008234 <xTaskRemoveFromEventList+0x7c>)
 800820c:	f7fe fd5c 	bl	8006cc8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008210:	4b09      	ldr	r3, [pc, #36]	; (8008238 <xTaskRemoveFromEventList+0x80>)
 8008212:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008218:	429a      	cmp	r2, r3
 800821a:	d903      	bls.n	8008224 <xTaskRemoveFromEventList+0x6c>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800821c:	2001      	movs	r0, #1
 800821e:	4b07      	ldr	r3, [pc, #28]	; (800823c <xTaskRemoveFromEventList+0x84>)
 8008220:	6018      	str	r0, [r3, #0]
 8008222:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		xReturn = pdFALSE;
 8008224:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	20042d54 	.word	0x20042d54
 800822c:	20042dac 	.word	0x20042dac
 8008230:	20042cc8 	.word	0x20042cc8
 8008234:	20042d68 	.word	0x20042d68
 8008238:	20042d58 	.word	0x20042d58
 800823c:	20042db0 	.word	0x20042db0

08008240 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008240:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8008242:	b908      	cbnz	r0, 8008248 <vTaskSetTimeOutState+0x8>
 8008244:	f7ff fcd6 	bl	8007bf4 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008248:	4b03      	ldr	r3, [pc, #12]	; (8008258 <vTaskSetTimeOutState+0x18>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800824e:	4b03      	ldr	r3, [pc, #12]	; (800825c <vTaskSetTimeOutState+0x1c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6043      	str	r3, [r0, #4]
 8008254:	bd08      	pop	{r3, pc}
 8008256:	bf00      	nop
 8008258:	20042c8c 	.word	0x20042c8c
 800825c:	20042d60 	.word	0x20042d60

08008260 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008264:	4604      	mov	r4, r0
 8008266:	b950      	cbnz	r0, 800827e <xTaskCheckForTimeOut+0x1e>
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	b672      	cpsid	i
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	b662      	cpsie	i
 800827c:	e7fe      	b.n	800827c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800827e:	b951      	cbnz	r1, 8008296 <xTaskCheckForTimeOut+0x36>
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	b672      	cpsid	i
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	b662      	cpsie	i
 8008294:	e7fe      	b.n	8008294 <xTaskCheckForTimeOut+0x34>

	taskENTER_CRITICAL();
 8008296:	f7fe fda1 	bl	8006ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800829a:	4b0e      	ldr	r3, [pc, #56]	; (80082d4 <xTaskCheckForTimeOut+0x74>)
 800829c:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	d010      	beq.n	80082c6 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082a4:	4a0c      	ldr	r2, [pc, #48]	; (80082d8 <xTaskCheckForTimeOut+0x78>)
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	4290      	cmp	r0, r2
 80082ac:	6862      	ldr	r2, [r4, #4]
 80082ae:	d001      	beq.n	80082b4 <xTaskCheckForTimeOut+0x54>
 80082b0:	4291      	cmp	r1, r2
 80082b2:	d20a      	bcs.n	80082ca <xTaskCheckForTimeOut+0x6a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 80082b4:	1a88      	subs	r0, r1, r2
 80082b6:	4283      	cmp	r3, r0
 80082b8:	d907      	bls.n	80082ca <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80082ba:	1a52      	subs	r2, r2, r1
			vTaskSetTimeOutState( pxTimeOut );
 80082bc:	4620      	mov	r0, r4
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80082be:	4413      	add	r3, r2
 80082c0:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80082c2:	f7ff ffbd 	bl	8008240 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 80082c6:	2400      	movs	r4, #0
 80082c8:	e000      	b.n	80082cc <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80082ca:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80082cc:	f7fe fdac 	bl	8006e28 <vPortExitCritical>

	return xReturn;
}
 80082d0:	4620      	mov	r0, r4
 80082d2:	bd38      	pop	{r3, r4, r5, pc}
 80082d4:	20042d60 	.word	0x20042d60
 80082d8:	20042c8c 	.word	0x20042c8c

080082dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 80082dc:	2201      	movs	r2, #1
 80082de:	4b01      	ldr	r3, [pc, #4]	; (80082e4 <vTaskMissedYield+0x8>)
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	4770      	bx	lr
 80082e4:	20042db0 	.word	0x20042db0

080082e8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <xTaskGetSchedulerState+0x18>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	b133      	cbz	r3, 80082fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ee:	4b05      	ldr	r3, [pc, #20]	; (8008304 <xTaskGetSchedulerState+0x1c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082f4:	bf0c      	ite	eq
 80082f6:	2002      	moveq	r0, #2
 80082f8:	2000      	movne	r0, #0
 80082fa:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082fc:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 80082fe:	4770      	bx	lr
 8008300:	20042c94 	.word	0x20042c94
 8008304:	20042d54 	.word	0x20042d54

08008308 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800830c:	4604      	mov	r4, r0
 800830e:	2800      	cmp	r0, #0
 8008310:	d038      	beq.n	8008384 <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008312:	4d1d      	ldr	r5, [pc, #116]	; (8008388 <vTaskPriorityInherit+0x80>)
 8008314:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008316:	682a      	ldr	r2, [r5, #0]
 8008318:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800831a:	4293      	cmp	r3, r2
 800831c:	d232      	bcs.n	8008384 <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800831e:	6982      	ldr	r2, [r0, #24]
 8008320:	2a00      	cmp	r2, #0
 8008322:	db04      	blt.n	800832e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008324:	682a      	ldr	r2, [r5, #0]
 8008326:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008328:	f1c2 0207 	rsb	r2, r2, #7
 800832c:	6182      	str	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800832e:	4e17      	ldr	r6, [pc, #92]	; (800838c <vTaskPriorityInherit+0x84>)
 8008330:	2714      	movs	r7, #20
 8008332:	6962      	ldr	r2, [r4, #20]
 8008334:	fb07 6303 	mla	r3, r7, r3, r6
 8008338:	429a      	cmp	r2, r3
 800833a:	d120      	bne.n	800837e <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800833c:	f104 0804 	add.w	r8, r4, #4
 8008340:	4640      	mov	r0, r8
 8008342:	f7fe fce5 	bl	8006d10 <uxListRemove>
 8008346:	4b12      	ldr	r3, [pc, #72]	; (8008390 <vTaskPriorityInherit+0x88>)
 8008348:	b948      	cbnz	r0, 800835e <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800834a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800834c:	4347      	muls	r7, r0
 800834e:	59f2      	ldr	r2, [r6, r7]
 8008350:	b92a      	cbnz	r2, 800835e <vTaskPriorityInherit+0x56>
 8008352:	2201      	movs	r2, #1
 8008354:	6819      	ldr	r1, [r3, #0]
 8008356:	4082      	lsls	r2, r0
 8008358:	ea21 0202 	bic.w	r2, r1, r2
 800835c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800835e:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8008360:	2001      	movs	r0, #1
 8008362:	4641      	mov	r1, r8
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008364:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008366:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8008368:	4090      	lsls	r0, r2
 800836a:	681c      	ldr	r4, [r3, #0]
 800836c:	4320      	orrs	r0, r4
 800836e:	6018      	str	r0, [r3, #0]
 8008370:	2014      	movs	r0, #20
 8008372:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 800837a:	f7fe bca5 	b.w	8006cc8 <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800837e:	682b      	ldr	r3, [r5, #0]
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008388:	20042d58 	.word	0x20042d58
 800838c:	20042cc8 	.word	0x20042cc8
 8008390:	20042dac 	.word	0x20042dac

08008394 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8008396:	4604      	mov	r4, r0
 8008398:	b908      	cbnz	r0, 800839e <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 800839a:	2000      	movs	r0, #0
 800839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <xTaskPriorityDisinherit+0x9c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4298      	cmp	r0, r3
 80083a4:	d00a      	beq.n	80083bc <xTaskPriorityDisinherit+0x28>
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	b672      	cpsid	i
 80083ac:	f383 8811 	msr	BASEPRI, r3
 80083b0:	f3bf 8f6f 	isb	sy
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	b662      	cpsie	i
 80083ba:	e7fe      	b.n	80083ba <xTaskPriorityDisinherit+0x26>

			configASSERT( pxTCB->uxMutexesHeld );
 80083bc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80083be:	b953      	cbnz	r3, 80083d6 <xTaskPriorityDisinherit+0x42>
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	b672      	cpsid	i
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	b662      	cpsie	i
 80083d4:	e7fe      	b.n	80083d4 <xTaskPriorityDisinherit+0x40>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80083d8:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083da:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 80083dc:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083de:	4291      	cmp	r1, r2
 80083e0:	d0db      	beq.n	800839a <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1d9      	bne.n	800839a <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80083e6:	1d05      	adds	r5, r0, #4
 80083e8:	4e12      	ldr	r6, [pc, #72]	; (8008434 <xTaskPriorityDisinherit+0xa0>)
 80083ea:	4628      	mov	r0, r5
 80083ec:	f7fe fc90 	bl	8006d10 <uxListRemove>
 80083f0:	4a11      	ldr	r2, [pc, #68]	; (8008438 <xTaskPriorityDisinherit+0xa4>)
 80083f2:	b950      	cbnz	r0, 800840a <xTaskPriorityDisinherit+0x76>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80083f6:	2114      	movs	r1, #20
 80083f8:	4379      	muls	r1, r7
 80083fa:	5873      	ldr	r3, [r6, r1]
 80083fc:	b92b      	cbnz	r3, 800840a <xTaskPriorityDisinherit+0x76>
 80083fe:	2301      	movs	r3, #1
 8008400:	6810      	ldr	r0, [r2, #0]
 8008402:	40bb      	lsls	r3, r7
 8008404:	ea20 0303 	bic.w	r3, r0, r3
 8008408:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800840a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 800840c:	6810      	ldr	r0, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800840e:	f1c3 0107 	rsb	r1, r3, #7
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008412:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008414:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008416:	2401      	movs	r4, #1
 8008418:	fa04 f103 	lsl.w	r1, r4, r3
 800841c:	4308      	orrs	r0, r1
 800841e:	4629      	mov	r1, r5
 8008420:	6010      	str	r0, [r2, #0]
 8008422:	2014      	movs	r0, #20
 8008424:	fb00 6003 	mla	r0, r0, r3, r6
 8008428:	f7fe fc4e 	bl	8006cc8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800842c:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	20042d58 	.word	0x20042d58
 8008434:	20042cc8 	.word	0x20042cc8
 8008438:	20042dac 	.word	0x20042dac

0800843c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800843c:	4b04      	ldr	r3, [pc, #16]	; (8008450 <pvTaskIncrementMutexHeldCount+0x14>)
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	b11a      	cbz	r2, 800844a <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008446:	3201      	adds	r2, #1
 8008448:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 800844a:	6818      	ldr	r0, [r3, #0]
	}
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20042d58 	.word	0x20042d58

08008454 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	BaseType_t xReturn;

		taskENTER_CRITICAL();
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 8008458:	4c2c      	ldr	r4, [pc, #176]	; (800850c <xTaskNotifyWait+0xb8>)
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800845a:	461e      	mov	r6, r3
 800845c:	4605      	mov	r5, r0
 800845e:	460f      	mov	r7, r1
 8008460:	4690      	mov	r8, r2
	TickType_t xTimeToWake;
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008462:	f7fe fcbb 	bl	8006ddc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->eNotifyState != eNotified )
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800846c:	2b02      	cmp	r3, #2
 800846e:	d02b      	beq.n	80084c8 <xTaskNotifyWait+0x74>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008470:	6822      	ldr	r2, [r4, #0]
 8008472:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008474:	ea23 0005 	bic.w	r0, r3, r5

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 8008478:	2501      	movs	r5, #1
			if( pxCurrentTCB->eNotifyState != eNotified )
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800847a:	6550      	str	r0, [r2, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	f883 5058 	strb.w	r5, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008482:	b30e      	cbz	r6, 80084c8 <xTaskNotifyWait+0x74>
				{
					/* The task is going to block.  First it must be removed
					from the	ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	3004      	adds	r0, #4
 8008488:	f7fe fc42 	bl	8006d10 <uxListRemove>
 800848c:	b938      	cbnz	r0, 800849e <xTaskNotifyWait+0x4a>
					{
						/* The current task must be in a ready list, so there is
						no need to check, and the port reset macro can be called
						directly. */
						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800848e:	6821      	ldr	r1, [r4, #0]
 8008490:	4a1f      	ldr	r2, [pc, #124]	; (8008510 <xTaskNotifyWait+0xbc>)
 8008492:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8008494:	6813      	ldr	r3, [r2, #0]
 8008496:	408d      	lsls	r5, r1
 8008498:	ea23 0505 	bic.w	r5, r3, r5
 800849c:	6015      	str	r5, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
 800849e:	1c73      	adds	r3, r6, #1
 80084a0:	d105      	bne.n	80084ae <xTaskNotifyWait+0x5a>
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80084a2:	6821      	ldr	r1, [r4, #0]
 80084a4:	481b      	ldr	r0, [pc, #108]	; (8008514 <xTaskNotifyWait+0xc0>)
 80084a6:	3104      	adds	r1, #4
 80084a8:	f7fe fc0e 	bl	8006cc8 <vListInsertEnd>
 80084ac:	e004      	b.n	80084b8 <xTaskNotifyWait+0x64>
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
 80084ae:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <xTaskNotifyWait+0xc4>)
 80084b0:	6818      	ldr	r0, [r3, #0]
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 80084b2:	4430      	add	r0, r6
 80084b4:	f7ff fa94 	bl	80079e0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80084b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084bc:	4b17      	ldr	r3, [pc, #92]	; (800851c <xTaskNotifyWait+0xc8>)
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80084c8:	f7fe fcae 	bl	8006e28 <vPortExitCritical>

		taskENTER_CRITICAL();
 80084cc:	f7fe fc86 	bl	8006ddc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80084d0:	f1b8 0f00 	cmp.w	r8, #0
 80084d4:	d003      	beq.n	80084de <xTaskNotifyWait+0x8a>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084da:	f8c8 3000 	str.w	r3, [r8]

			/* If eNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d007      	beq.n	80084f8 <xTaskNotifyWait+0xa4>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80084e8:	4b08      	ldr	r3, [pc, #32]	; (800850c <xTaskNotifyWait+0xb8>)
				xReturn = pdTRUE;
 80084ea:	2501      	movs	r5, #1
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084f0:	ea21 0107 	bic.w	r1, r1, r7
 80084f4:	6559      	str	r1, [r3, #84]	; 0x54
 80084f6:	e000      	b.n	80084fa <xTaskNotifyWait+0xa6>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80084f8:	2500      	movs	r5, #0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8008502:	f7fe fc91 	bl	8006e28 <vPortExitCritical>

		return xReturn;
	}
 8008506:	4628      	mov	r0, r5
 8008508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800850c:	20042d58 	.word	0x20042d58
 8008510:	20042dac 	.word	0x20042dac
 8008514:	20042cb0 	.word	0x20042cb0
 8008518:	20042d60 	.word	0x20042d60
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008522:	460f      	mov	r7, r1
 8008524:	4616      	mov	r6, r2
 8008526:	461d      	mov	r5, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 8008528:	4604      	mov	r4, r0
 800852a:	b950      	cbnz	r0, 8008542 <xTaskGenericNotify+0x22>
 800852c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008530:	b672      	cpsid	i
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	b662      	cpsie	i
 8008540:	e7fe      	b.n	8008540 <xTaskGenericNotify+0x20>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8008542:	f7fe fc4b 	bl	8006ddc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008546:	b10d      	cbz	r5, 800854c <xTaskGenericNotify+0x2c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008548:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800854a:	602b      	str	r3, [r5, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800854c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58

			pxTCB->eNotifyState = eNotified;
 8008550:	2302      	movs	r3, #2

			switch( eAction )
 8008552:	1e72      	subs	r2, r6, #1
			if( pulPreviousNotificationValue != NULL )
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8008554:	b2ed      	uxtb	r5, r5

			pxTCB->eNotifyState = eNotified;
 8008556:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

			switch( eAction )
 800855a:	2a03      	cmp	r2, #3
 800855c:	d80d      	bhi.n	800857a <xTaskGenericNotify+0x5a>
 800855e:	e8df f002 	tbb	[pc, r2]
 8008562:	0502      	.short	0x0502
 8008564:	090b      	.short	0x090b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008566:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008568:	430f      	orrs	r7, r1
 800856a:	e005      	b.n	8008578 <xTaskGenericNotify+0x58>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800856c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800856e:	3301      	adds	r3, #1
 8008570:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 8008572:	e002      	b.n	800857a <xTaskGenericNotify+0x5a>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8008574:	2d02      	cmp	r5, #2
 8008576:	d032      	beq.n	80085de <xTaskGenericNotify+0xbe>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008578:	6567      	str	r7, [r4, #84]	; 0x54

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800857a:	2d01      	cmp	r5, #1
 800857c:	d001      	beq.n	8008582 <xTaskGenericNotify+0x62>
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800857e:	2501      	movs	r5, #1
 8008580:	e02e      	b.n	80085e0 <xTaskGenericNotify+0xc0>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
			{
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8008582:	1d26      	adds	r6, r4, #4
 8008584:	4630      	mov	r0, r6
 8008586:	f7fe fbc3 	bl	8006d10 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800858a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800858c:	4916      	ldr	r1, [pc, #88]	; (80085e8 <xTaskGenericNotify+0xc8>)
 800858e:	fa05 f002 	lsl.w	r0, r5, r2
 8008592:	680b      	ldr	r3, [r1, #0]
 8008594:	4303      	orrs	r3, r0
 8008596:	2014      	movs	r0, #20
 8008598:	600b      	str	r3, [r1, #0]
 800859a:	4631      	mov	r1, r6
 800859c:	4b13      	ldr	r3, [pc, #76]	; (80085ec <xTaskGenericNotify+0xcc>)
 800859e:	fb00 3002 	mla	r0, r0, r2, r3
 80085a2:	f7fe fb91 	bl	8006cc8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80085a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085a8:	b153      	cbz	r3, 80085c0 <xTaskGenericNotify+0xa0>
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	b672      	cpsid	i
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	b662      	cpsie	i
 80085be:	e7fe      	b.n	80085be <xTaskGenericNotify+0x9e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <xTaskGenericNotify+0xd0>)
 80085c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d9d8      	bls.n	800857e <xTaskGenericNotify+0x5e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80085cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d0:	4b08      	ldr	r3, [pc, #32]	; (80085f4 <xTaskGenericNotify+0xd4>)
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	e000      	b.n	80085e0 <xTaskGenericNotify+0xc0>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80085de:	2500      	movs	r5, #0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80085e0:	f7fe fc22 	bl	8006e28 <vPortExitCritical>

		return xReturn;
	}
 80085e4:	4628      	mov	r0, r5
 80085e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085e8:	20042dac 	.word	0x20042dac
 80085ec:	20042cc8 	.word	0x20042cc8
 80085f0:	20042d58 	.word	0x20042d58
 80085f4:	e000ed04 	.word	0xe000ed04

080085f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80085f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008600:	4689      	mov	r9, r1
 8008602:	4616      	mov	r6, r2
 8008604:	461d      	mov	r5, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008606:	4604      	mov	r4, r0
 8008608:	b950      	cbnz	r0, 8008620 <xTaskGenericNotifyFromISR+0x28>
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	b672      	cpsid	i
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	b662      	cpsie	i
 800861e:	e7fe      	b.n	800861e <xTaskGenericNotifyFromISR+0x26>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008620:	f7fe fccc 	bl	8006fbc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008624:	f3ef 8711 	mrs	r7, BASEPRI
 8008628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862c:	b672      	cpsid	i
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	b662      	cpsie	i

		pxTCB = ( TCB_t * ) xTaskToNotify;

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
 800863c:	b10d      	cbz	r5, 8008642 <xTaskGenericNotifyFromISR+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800863e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008640:	602b      	str	r3, [r5, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8008642:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
			pxTCB->eNotifyState = eNotified;
 8008646:	2302      	movs	r3, #2

			switch( eAction )
 8008648:	1e72      	subs	r2, r6, #1
			if( pulPreviousNotificationValue != NULL )
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800864a:	b2ed      	uxtb	r5, r5
			pxTCB->eNotifyState = eNotified;
 800864c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

			switch( eAction )
 8008650:	2a03      	cmp	r2, #3
 8008652:	d810      	bhi.n	8008676 <xTaskGenericNotifyFromISR+0x7e>
 8008654:	e8df f002 	tbb	[pc, r2]
 8008658:	0b0d0702 	.word	0x0b0d0702
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800865c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800865e:	ea41 0109 	orr.w	r1, r1, r9
 8008662:	6561      	str	r1, [r4, #84]	; 0x54
					break;
 8008664:	e007      	b.n	8008676 <xTaskGenericNotifyFromISR+0x7e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008668:	3301      	adds	r3, #1
 800866a:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 800866c:	e003      	b.n	8008676 <xTaskGenericNotifyFromISR+0x7e>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800866e:	2d02      	cmp	r5, #2
 8008670:	d037      	beq.n	80086e2 <xTaskGenericNotifyFromISR+0xea>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008672:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8008676:	2d01      	cmp	r5, #1
 8008678:	d001      	beq.n	800867e <xTaskGenericNotifyFromISR+0x86>
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800867a:	2001      	movs	r0, #1
 800867c:	e032      	b.n	80086e4 <xTaskGenericNotifyFromISR+0xec>
			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800867e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008680:	b153      	cbz	r3, 8008698 <xTaskGenericNotifyFromISR+0xa0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008686:	b672      	cpsid	i
 8008688:	f383 8811 	msr	BASEPRI, r3
 800868c:	f3bf 8f6f 	isb	sy
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	b662      	cpsie	i
 8008696:	e7fe      	b.n	8008696 <xTaskGenericNotifyFromISR+0x9e>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008698:	4b14      	ldr	r3, [pc, #80]	; (80086ec <xTaskGenericNotifyFromISR+0xf4>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	b97b      	cbnz	r3, 80086be <xTaskGenericNotifyFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800869e:	1d26      	adds	r6, r4, #4
 80086a0:	4630      	mov	r0, r6
 80086a2:	f7fe fb35 	bl	8006d10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086a6:	4912      	ldr	r1, [pc, #72]	; (80086f0 <xTaskGenericNotifyFromISR+0xf8>)
 80086a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80086aa:	2014      	movs	r0, #20
 80086ac:	680b      	ldr	r3, [r1, #0]
 80086ae:	4095      	lsls	r5, r2
 80086b0:	431d      	orrs	r5, r3
 80086b2:	4b10      	ldr	r3, [pc, #64]	; (80086f4 <xTaskGenericNotifyFromISR+0xfc>)
 80086b4:	600d      	str	r5, [r1, #0]
 80086b6:	4631      	mov	r1, r6
 80086b8:	fb00 3002 	mla	r0, r0, r2, r3
 80086bc:	e002      	b.n	80086c4 <xTaskGenericNotifyFromISR+0xcc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80086be:	f104 0118 	add.w	r1, r4, #24
 80086c2:	480d      	ldr	r0, [pc, #52]	; (80086f8 <xTaskGenericNotifyFromISR+0x100>)
 80086c4:	f7fe fb00 	bl	8006cc8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <xTaskGenericNotifyFromISR+0x104>)
 80086ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d9d2      	bls.n	800867a <xTaskGenericNotifyFromISR+0x82>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80086d4:	f1b8 0f00 	cmp.w	r8, #0
 80086d8:	d0cf      	beq.n	800867a <xTaskGenericNotifyFromISR+0x82>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80086da:	2001      	movs	r0, #1
 80086dc:	f8c8 0000 	str.w	r0, [r8]
 80086e0:	e000      	b.n	80086e4 <xTaskGenericNotifyFromISR+0xec>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
 80086e2:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086e4:	f387 8811 	msr	BASEPRI, r7
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
 80086e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ec:	20042d54 	.word	0x20042d54
 80086f0:	20042dac 	.word	0x20042dac
 80086f4:	20042cc8 	.word	0x20042cc8
 80086f8:	20042d68 	.word	0x20042d68
 80086fc:	20042d58 	.word	0x20042d58

08008700 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008702:	b160      	cbz	r0, 800871e <netconn_close_shutdown+0x1e>
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 8008704:	2329      	movs	r3, #41	; 0x29
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 8008706:	9001      	str	r0, [sp, #4]
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_close, err);
 8008708:	a806      	add	r0, sp, #24

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.msg.sd.shut = how;
 800870a:	f88d 100c 	strb.w	r1, [sp, #12]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 800870e:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_close, err);
 8008712:	4b05      	ldr	r3, [pc, #20]	; (8008728 <netconn_close_shutdown+0x28>)
 8008714:	f840 3d18 	str.w	r3, [r0, #-24]!
 8008718:	f001 f822 	bl	8009760 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 800871c:	e001      	b.n	8008722 <netconn_close_shutdown+0x22>
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800871e:	f06f 000e 	mvn.w	r0, #14
#endif /* LWIP_TCP */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_close, err);
  API_MSG_VAR_FREE(msg);

  return err;
}
 8008722:	b007      	add	sp, #28
 8008724:	f85d fb04 	ldr.w	pc, [sp], #4
 8008728:	080095b1 	.word	0x080095b1

0800872c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800872c:	b570      	push	{r4, r5, r6, lr}
  void *buf = NULL;
 800872e:	2300      	movs	r3, #0
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8008730:	b088      	sub	sp, #32
 8008732:	4604      	mov	r4, r0
  err_t err;
#if LWIP_TCP
  API_MSG_VAR_DECLARE(msg);
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008734:	460e      	mov	r6, r1
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  void *buf = NULL;
 8008736:	9301      	str	r3, [sp, #4]
  err_t err;
#if LWIP_TCP
  API_MSG_VAR_DECLARE(msg);
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008738:	b911      	cbnz	r1, 8008740 <netconn_recv_data+0x14>
 800873a:	f06f 000e 	mvn.w	r0, #14
 800873e:	e05b      	b.n	80087f8 <netconn_recv_data+0xcc>
  *new_buf = NULL;
 8008740:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008742:	2800      	cmp	r0, #0
 8008744:	d0f9      	beq.n	800873a <netconn_recv_data+0xe>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008746:	4605      	mov	r5, r0
 8008748:	f815 3b10 	ldrb.w	r3, [r5], #16
 800874c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008750:	2b10      	cmp	r3, #16
 8008752:	d10c      	bne.n	800876e <netconn_recv_data+0x42>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8008754:	4628      	mov	r0, r5
 8008756:	f005 fdbe 	bl	800e2d6 <sys_mbox_valid>
 800875a:	b940      	cbnz	r0, 800876e <netconn_recv_data+0x42>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800875c:	f104 0014 	add.w	r0, r4, #20
 8008760:	f005 fdb9 	bl	800e2d6 <sys_mbox_valid>
 8008764:	2800      	cmp	r0, #0
 8008766:	d042      	beq.n	80087ee <netconn_recv_data+0xc2>
 8008768:	f06f 000a 	mvn.w	r0, #10
 800876c:	e044      	b.n	80087f8 <netconn_recv_data+0xcc>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800876e:	4628      	mov	r0, r5
 8008770:	f005 fdb1 	bl	800e2d6 <sys_mbox_valid>
 8008774:	2800      	cmp	r0, #0
 8008776:	d0f7      	beq.n	8008768 <netconn_recv_data+0x3c>

  err = conn->last_err;
 8008778:	f994 0008 	ldrsb.w	r0, [r4, #8]
  if (ERR_IS_FATAL(err)) {
 800877c:	f110 0f0b 	cmn.w	r0, #11
 8008780:	db3a      	blt.n	80087f8 <netconn_recv_data+0xcc>
       before the fatal error occurred - is that a problem? */
    return err;
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8008782:	69a2      	ldr	r2, [r4, #24]
 8008784:	a901      	add	r1, sp, #4
 8008786:	4628      	mov	r0, r5
 8008788:	f005 fd70 	bl	800e26c <sys_arch_mbox_fetch>
 800878c:	3001      	adds	r0, #1
 800878e:	d031      	beq.n	80087f4 <netconn_recv_data+0xc8>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008790:	7823      	ldrb	r3, [r4, #0]
 8008792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008796:	2b10      	cmp	r3, #16
 8008798:	9b01      	ldr	r3, [sp, #4]
 800879a:	d11d      	bne.n	80087d8 <netconn_recv_data+0xac>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!netconn_get_noautorecved(conn) || (buf == NULL)) {
 800879c:	7f22      	ldrb	r2, [r4, #28]
 800879e:	0712      	lsls	r2, r2, #28
 80087a0:	d500      	bpl.n	80087a4 <netconn_recv_data+0x78>
 80087a2:	b95b      	cbnz	r3, 80087bc <netconn_recv_data+0x90>
      /* Let the stack know that we have taken the data. */
      /* TODO: Speedup: Don't block and wait for the answer here
         (to prevent multiple thread-switches). */
      API_MSG_VAR_ALLOC_DONTFAIL(msg);
      API_MSG_VAR_REF(msg).msg.conn = conn;
 80087a4:	9403      	str	r4, [sp, #12]
      if (buf != NULL) {
 80087a6:	b10b      	cbz	r3, 80087ac <netconn_recv_data+0x80>
        API_MSG_VAR_REF(msg).msg.msg.r.len = ((struct pbuf *)buf)->tot_len;
 80087a8:	891b      	ldrh	r3, [r3, #8]
 80087aa:	e000      	b.n	80087ae <netconn_recv_data+0x82>
      } else {
        API_MSG_VAR_REF(msg).msg.msg.r.len = 1;
 80087ac:	2301      	movs	r3, #1
 80087ae:	9305      	str	r3, [sp, #20]
      }
      /* don't care for the return value of lwip_netconn_do_recv */
      TCPIP_APIMSG_NOERR(&API_MSG_VAR_REF(msg), lwip_netconn_do_recv);
 80087b0:	a808      	add	r0, sp, #32
 80087b2:	4b12      	ldr	r3, [pc, #72]	; (80087fc <netconn_recv_data+0xd0>)
 80087b4:	f840 3d18 	str.w	r3, [r0, #-24]!
 80087b8:	f000 ffd2 	bl	8009760 <tcpip_apimsg>
      API_MSG_VAR_FREE(msg);
    }

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 80087bc:	9a01      	ldr	r2, [sp, #4]
 80087be:	b94a      	cbnz	r2, 80087d4 <netconn_recv_data+0xa8>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80087c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80087c2:	b113      	cbz	r3, 80087ca <netconn_recv_data+0x9e>
 80087c4:	2101      	movs	r1, #1
 80087c6:	4620      	mov	r0, r4
 80087c8:	4798      	blx	r3
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80087ca:	2101      	movs	r1, #1
 80087cc:	4620      	mov	r0, r4
 80087ce:	f7ff ff97 	bl	8008700 <netconn_close_shutdown>
 80087d2:	e00c      	b.n	80087ee <netconn_recv_data+0xc2>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
    }
    len = ((struct pbuf *)buf)->tot_len;
 80087d4:	8912      	ldrh	r2, [r2, #8]
 80087d6:	e001      	b.n	80087dc <netconn_recv_data+0xb0>
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
    len = netbuf_len((struct netbuf *)buf);
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	891a      	ldrh	r2, [r3, #8]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80087dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80087de:	b113      	cbz	r3, 80087e6 <netconn_recv_data+0xba>
 80087e0:	2101      	movs	r1, #1
 80087e2:	4620      	mov	r0, r4
 80087e4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80087e6:	9b01      	ldr	r3, [sp, #4]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80087e8:	2000      	movs	r0, #0
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80087ea:	6033      	str	r3, [r6, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80087ec:	e004      	b.n	80087f8 <netconn_recv_data+0xcc>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 80087ee:	f06f 000d 	mvn.w	r0, #13
 80087f2:	e001      	b.n	80087f8 <netconn_recv_data+0xcc>
    return err;
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
    return ERR_TIMEOUT;
 80087f4:	f06f 0002 	mvn.w	r0, #2
  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
}
 80087f8:	b008      	add	sp, #32
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	0800950d 	.word	0x0800950d

08008800 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008800:	b570      	push	{r4, r5, r6, lr}
 8008802:	460d      	mov	r5, r1
 8008804:	b086      	sub	sp, #24
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);

  conn = netconn_alloc(t, callback);
 8008806:	4611      	mov	r1, r2
 8008808:	f000 fc36 	bl	8009078 <netconn_alloc>
  if (conn != NULL) {
 800880c:	4604      	mov	r4, r0
 800880e:	b308      	cbz	r0, 8008854 <netconn_new_with_proto_and_callback+0x54>
    err_t err;
    API_MSG_VAR_ALLOC_DONTFAIL(msg);
    API_MSG_VAR_REF(msg).msg.msg.n.proto = proto;
    API_MSG_VAR_REF(msg).msg.conn = conn;
 8008810:	9001      	str	r0, [sp, #4]
    TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_newconn, err);
 8008812:	a806      	add	r0, sp, #24
 8008814:	4b12      	ldr	r3, [pc, #72]	; (8008860 <netconn_new_with_proto_and_callback+0x60>)

  conn = netconn_alloc(t, callback);
  if (conn != NULL) {
    err_t err;
    API_MSG_VAR_ALLOC_DONTFAIL(msg);
    API_MSG_VAR_REF(msg).msg.msg.n.proto = proto;
 8008816:	f88d 500c 	strb.w	r5, [sp, #12]
    API_MSG_VAR_REF(msg).msg.conn = conn;
    TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_newconn, err);
 800881a:	f840 3d18 	str.w	r3, [r0, #-24]!
 800881e:	f000 ff9f 	bl	8009760 <tcpip_apimsg>
    API_MSG_VAR_FREE(msg);
    if (err != ERR_OK) {
 8008822:	b1c8      	cbz	r0, 8008858 <netconn_new_with_proto_and_callback+0x58>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008824:	f104 0510 	add.w	r5, r4, #16
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008828:	f104 060c 	add.w	r6, r4, #12
    API_MSG_VAR_REF(msg).msg.conn = conn;
    TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_newconn, err);
    API_MSG_VAR_FREE(msg);
    if (err != ERR_OK) {
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800882c:	4628      	mov	r0, r5
 800882e:	f005 fd52 	bl	800e2d6 <sys_mbox_valid>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008832:	f104 0014 	add.w	r0, r4, #20
 8008836:	f005 fd4e 	bl	800e2d6 <sys_mbox_valid>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800883a:	4630      	mov	r0, r6
 800883c:	f005 fd9a 	bl	800e374 <sys_sem_valid>
      sys_sem_free(&conn->op_completed);
 8008840:	4630      	mov	r0, r6
 8008842:	f005 fd94 	bl	800e36e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008846:	4628      	mov	r0, r5
 8008848:	f005 fce5 	bl	800e216 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800884c:	4621      	mov	r1, r4
 800884e:	2005      	movs	r0, #5
 8008850:	f002 fb4e 	bl	800aef0 <memp_free>
      return NULL;
 8008854:	2000      	movs	r0, #0
 8008856:	e000      	b.n	800885a <netconn_new_with_proto_and_callback+0x5a>
 8008858:	4620      	mov	r0, r4
    }
  }
  return conn;
}
 800885a:	b006      	add	sp, #24
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	bf00      	nop
 8008860:	08008ff9 	.word	0x08008ff9

08008864 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008864:	b530      	push	{r4, r5, lr}
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008866:	4605      	mov	r5, r0
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008868:	b087      	sub	sp, #28
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800886a:	b178      	cbz	r0, 800888c <netconn_delete+0x28>
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 800886c:	2329      	movs	r3, #41	; 0x29
  if (conn == NULL) {
    return ERR_OK;
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 800886e:	9001      	str	r0, [sp, #4]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_delconn, err);
 8008870:	a806      	add	r0, sp, #24
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.msg.sd.polls_left =
 8008872:	f88d 300d 	strb.w	r3, [sp, #13]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_delconn, err);
 8008876:	4b07      	ldr	r3, [pc, #28]	; (8008894 <netconn_delete+0x30>)
 8008878:	f840 3d18 	str.w	r3, [r0, #-24]!
 800887c:	f000 ff70 	bl	8009760 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008880:	4604      	mov	r4, r0
 8008882:	b920      	cbnz	r0, 800888e <netconn_delete+0x2a>
    return err;
  }

  netconn_free(conn);
 8008884:	4628      	mov	r0, r5
 8008886:	f000 fc2f 	bl	80090e8 <netconn_free>
 800888a:	e000      	b.n	800888e <netconn_delete+0x2a>
 800888c:	e000      	b.n	8008890 <netconn_delete+0x2c>
 800888e:	4620      	mov	r0, r4

  return ERR_OK;
}
 8008890:	b007      	add	sp, #28
 8008892:	bd30      	pop	{r4, r5, pc}
 8008894:	0800924b 	.word	0x0800924b

08008898 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008898:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800889a:	b150      	cbz	r0, 80088b2 <netconn_bind+0x1a>
#if LWIP_MPU_COMPATIBLE
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
 800889c:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_bind, err);
 800889e:	a806      	add	r0, sp, #24
 80088a0:	4b06      	ldr	r3, [pc, #24]	; (80088bc <netconn_bind+0x24>)
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80088a2:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_bind, err);
 80088a4:	f840 3d18 	str.w	r3, [r0, #-24]!
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
 80088a8:	f8ad 2010 	strh.w	r2, [sp, #16]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_bind, err);
 80088ac:	f000 ff58 	bl	8009760 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 80088b0:	e001      	b.n	80088b6 <netconn_bind+0x1e>
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80088b2:	f06f 000e 	mvn.w	r0, #14
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_bind, err);
  API_MSG_VAR_FREE(msg);

  return err;
}
 80088b6:	b007      	add	sp, #28
 80088b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80088bc:	080092e9 	.word	0x080092e9

080088c0 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80088c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80088c2:	b150      	cbz	r0, 80088da <netconn_connect+0x1a>
#if LWIP_MPU_COMPATIBLE
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
 80088c4:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
 80088c6:	a806      	add	r0, sp, #24
 80088c8:	4b06      	ldr	r3, [pc, #24]	; (80088e4 <netconn_connect+0x24>)
  if (addr == NULL) {
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80088ca:	9103      	str	r1, [sp, #12]
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
 80088cc:	f840 3d18 	str.w	r3, [r0, #-24]!
    addr = IP_ADDR_ANY;
  }
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
 80088d0:	f8ad 2010 	strh.w	r2, [sp, #16]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
 80088d4:	f000 ff44 	bl	8009760 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 80088d8:	e001      	b.n	80088de <netconn_connect+0x1e>
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80088da:	f06f 000e 	mvn.w	r0, #14
  API_MSG_VAR_REF(msg).msg.msg.bc.port = port;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_connect, err);
  API_MSG_VAR_FREE(msg);

  return err;
}
 80088de:	b007      	add	sp, #28
 80088e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80088e4:	08009345 	.word	0x08009345

080088e8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80088e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80088ea:	b138      	cbz	r0, 80088fc <netconn_listen_with_backlog+0x14>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 80088ec:	9001      	str	r0, [sp, #4]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_listen, err);
 80088ee:	a806      	add	r0, sp, #24
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <netconn_listen_with_backlog+0x20>)
 80088f2:	f840 3d18 	str.w	r3, [r0, #-24]!
 80088f6:	f000 ff33 	bl	8009760 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 80088fa:	e001      	b.n	8008900 <netconn_listen_with_backlog+0x18>
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80088fc:	f06f 000e 	mvn.w	r0, #14
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008900:	b007      	add	sp, #28
 8008902:	f85d fb04 	ldr.w	pc, [sp], #4
 8008906:	bf00      	nop
 8008908:	080093dd 	.word	0x080093dd

0800890c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800890c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800890e:	4604      	mov	r4, r0
  err_t err;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008910:	460d      	mov	r5, r1
 8008912:	b911      	cbnz	r1, 800891a <netconn_accept+0xe>
 8008914:	f06f 000e 	mvn.w	r0, #14
 8008918:	e02d      	b.n	8008976 <netconn_accept+0x6a>
  *new_conn = NULL;
 800891a:	2600      	movs	r6, #0
 800891c:	600e      	str	r6, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800891e:	2800      	cmp	r0, #0
 8008920:	d0f8      	beq.n	8008914 <netconn_accept+0x8>
  LWIP_ERROR("netconn_accept: invalid acceptmbox", sys_mbox_valid(&conn->acceptmbox),   return ERR_ARG;);
 8008922:	f100 0714 	add.w	r7, r0, #20
 8008926:	4638      	mov	r0, r7
 8008928:	f005 fcd5 	bl	800e2d6 <sys_mbox_valid>
 800892c:	2800      	cmp	r0, #0
 800892e:	d0f1      	beq.n	8008914 <netconn_accept+0x8>

  err = conn->last_err;
 8008930:	f994 0008 	ldrsb.w	r0, [r4, #8]
  if (ERR_IS_FATAL(err)) {
 8008934:	f110 0f0b 	cmn.w	r0, #11
 8008938:	db1d      	blt.n	8008976 <netconn_accept+0x6a>
       waiting on acceptmbox forever! */
    return err;
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800893a:	69a2      	ldr	r2, [r4, #24]
 800893c:	a901      	add	r1, sp, #4
 800893e:	4638      	mov	r0, r7
 8008940:	f005 fc94 	bl	800e26c <sys_arch_mbox_fetch>
 8008944:	3001      	adds	r0, #1
 8008946:	d011      	beq.n	800896c <netconn_accept+0x60>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008948:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800894a:	b11b      	cbz	r3, 8008954 <netconn_accept+0x48>
 800894c:	4632      	mov	r2, r6
 800894e:	2101      	movs	r1, #1
 8008950:	4620      	mov	r0, r4
 8008952:	4798      	blx	r3

  if (newconn == NULL) {
 8008954:	9b01      	ldr	r3, [sp, #4]
 8008956:	b933      	cbnz	r3, 8008966 <netconn_accept+0x5a>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
 8008958:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800895c:	330b      	adds	r3, #11
 800895e:	db08      	blt.n	8008972 <netconn_accept+0x66>
 8008960:	23f4      	movs	r3, #244	; 0xf4
 8008962:	7223      	strb	r3, [r4, #8]
 8008964:	e005      	b.n	8008972 <netconn_accept+0x66>
  /* don't care for the return value of lwip_netconn_do_recv */
  TCPIP_APIMSG_NOERR(&API_MSG_VAR_REF(msg), lwip_netconn_do_recv);
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008966:	602b      	str	r3, [r5, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008968:	2000      	movs	r0, #0
 800896a:	e004      	b.n	8008976 <netconn_accept+0x6a>
    return err;
  }

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, (void **)&newconn, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
    return ERR_TIMEOUT;
 800896c:	f06f 0002 	mvn.w	r0, #2
 8008970:	e001      	b.n	8008976 <netconn_accept+0x6a>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_ABRT);
    return ERR_ABRT;
 8008972:	f06f 000b 	mvn.w	r0, #11
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008976:	b003      	add	sp, #12
 8008978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800897a <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800897a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800897c:	4604      	mov	r4, r0
#if LWIP_TCP
  struct netbuf *buf = NULL;
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800897e:	460e      	mov	r6, r1
 8008980:	b911      	cbnz	r1, 8008988 <netconn_recv+0xe>
 8008982:	f06f 000e 	mvn.w	r0, #14
 8008986:	e02f      	b.n	80089e8 <netconn_recv+0x6e>
  *new_buf = NULL;
 8008988:	2500      	movs	r5, #0
 800898a:	600d      	str	r5, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800898c:	2800      	cmp	r0, #0
 800898e:	d0f8      	beq.n	8008982 <netconn_recv+0x8>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8008990:	3010      	adds	r0, #16
 8008992:	f005 fca0 	bl	800e2d6 <sys_mbox_valid>
 8008996:	b328      	cbz	r0, 80089e4 <netconn_recv+0x6a>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008998:	7823      	ldrb	r3, [r4, #0]
 800899a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800899e:	2b10      	cmp	r3, #16
 80089a0:	d11b      	bne.n	80089da <netconn_recv+0x60>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80089a2:	2004      	movs	r0, #4
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80089a4:	9501      	str	r5, [sp, #4]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80089a6:	f002 fa97 	bl	800aed8 <memp_malloc>
    if (buf == NULL) {
 80089aa:	4605      	mov	r5, r0
 80089ac:	b190      	cbz	r0, 80089d4 <netconn_recv+0x5a>
      return ERR_MEM;
    }

    err = netconn_recv_data(conn, (void **)&p);
 80089ae:	4620      	mov	r0, r4
 80089b0:	a901      	add	r1, sp, #4
 80089b2:	f7ff febb 	bl	800872c <netconn_recv_data>
    if (err != ERR_OK) {
 80089b6:	4604      	mov	r4, r0
 80089b8:	b120      	cbz	r0, 80089c4 <netconn_recv+0x4a>
      memp_free(MEMP_NETBUF, buf);
 80089ba:	4629      	mov	r1, r5
 80089bc:	2004      	movs	r0, #4
 80089be:	f002 fa97 	bl	800aef0 <memp_free>
 80089c2:	e005      	b.n	80089d0 <netconn_recv+0x56>
      return err;
    }
    LWIP_ASSERT("p != NULL", p != NULL);

    buf->p = p;
 80089c4:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
    buf->port = 0;
 80089c6:	81a8      	strh	r0, [r5, #12]
      memp_free(MEMP_NETBUF, buf);
      return err;
    }
    LWIP_ASSERT("p != NULL", p != NULL);

    buf->p = p;
 80089c8:	602b      	str	r3, [r5, #0]
    buf->ptr = p;
 80089ca:	606b      	str	r3, [r5, #4]
    buf->port = 0;
    ip_addr_set_zero(&buf->addr);
 80089cc:	60a8      	str	r0, [r5, #8]
    *new_buf = buf;
 80089ce:	6035      	str	r5, [r6, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80089d0:	4620      	mov	r0, r4
 80089d2:	e009      	b.n	80089e8 <netconn_recv+0x6e>
    struct pbuf *p = NULL;
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
    if (buf == NULL) {
      return ERR_MEM;
 80089d4:	f04f 30ff 	mov.w	r0, #4294967295
 80089d8:	e006      	b.n	80089e8 <netconn_recv+0x6e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 80089da:	4631      	mov	r1, r6
 80089dc:	4620      	mov	r0, r4
 80089de:	f7ff fea5 	bl	800872c <netconn_recv_data>
 80089e2:	e001      	b.n	80089e8 <netconn_recv+0x6e>
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  *new_buf = NULL;
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 80089e4:	f06f 000a 	mvn.w	r0, #10
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80089e8:	b002      	add	sp, #8
 80089ea:	bd70      	pop	{r4, r5, r6, pc}

080089ec <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80089ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80089ee:	b140      	cbz	r0, 8008a02 <netconn_send+0x16>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
 80089f0:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.msg.b = buf;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_send, err);
 80089f2:	a806      	add	r0, sp, #24
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <netconn_send+0x20>)
  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));
  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.b = buf;
 80089f6:	9103      	str	r1, [sp, #12]
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_send, err);
 80089f8:	f840 3d18 	str.w	r3, [r0, #-24]!
 80089fc:	f000 feb0 	bl	8009760 <tcpip_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
 8008a00:	e001      	b.n	8008a06 <netconn_send+0x1a>
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008a02:	f06f 000e 	mvn.w	r0, #14
  API_MSG_VAR_REF(msg).msg.msg.b = buf;
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_send, err);
  API_MSG_VAR_FREE(msg);

  return err;
}
 8008a06:	b007      	add	sp, #28
 8008a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a0c:	080094ad 	.word	0x080094ad

08008a10 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	4616      	mov	r6, r2
 8008a16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008a18:	b340      	cbz	r0, 8008a6c <netconn_write_partly+0x5c>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008a1a:	7802      	ldrb	r2, [r0, #0]
 8008a1c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008a20:	2a10      	cmp	r2, #16
 8008a22:	d126      	bne.n	8008a72 <netconn_write_partly+0x62>
  if (size == 0) {
 8008a24:	b90e      	cbnz	r6, 8008a2a <netconn_write_partly+0x1a>
    return ERR_OK;
 8008a26:	2000      	movs	r0, #0
 8008a28:	e025      	b.n	8008a76 <netconn_write_partly+0x66>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008a2a:	7f02      	ldrb	r2, [r0, #28]
 8008a2c:	0792      	lsls	r2, r2, #30
 8008a2e:	d407      	bmi.n	8008a40 <netconn_write_partly+0x30>
 8008a30:	f003 0204 	and.w	r2, r3, #4
 8008a34:	2a00      	cmp	r2, #0
 8008a36:	bf14      	ite	ne
 8008a38:	2501      	movne	r5, #1
 8008a3a:	2500      	moveq	r5, #0
  if (dontblock && !bytes_written) {
 8008a3c:	d002      	beq.n	8008a44 <netconn_write_partly+0x34>
 8008a3e:	e000      	b.n	8008a42 <netconn_write_partly+0x32>
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  if (size == 0) {
    return ERR_OK;
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008a40:	2501      	movs	r5, #1
  if (dontblock && !bytes_written) {
 8008a42:	b1b4      	cbz	r4, 8008a72 <netconn_write_partly+0x62>
    return ERR_VAL;
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
 8008a44:	9001      	str	r0, [sp, #4]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 8008a46:	a806      	add	r0, sp, #24

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.w.dataptr = dataptr;
  API_MSG_VAR_REF(msg).msg.msg.w.apiflags = apiflags;
 8008a48:	f88d 3014 	strb.w	r3, [sp, #20]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 8008a4c:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <netconn_write_partly+0x6c>)
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.w.dataptr = dataptr;
 8008a4e:	9103      	str	r1, [sp, #12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 8008a50:	f840 3d18 	str.w	r3, [r0, #-24]!
  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).msg.conn = conn;
  API_MSG_VAR_REF(msg).msg.msg.w.dataptr = dataptr;
  API_MSG_VAR_REF(msg).msg.msg.w.apiflags = apiflags;
  API_MSG_VAR_REF(msg).msg.msg.w.len = size;
 8008a54:	9604      	str	r6, [sp, #16]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  TCPIP_APIMSG(&API_MSG_VAR_REF(msg), lwip_netconn_do_write, err);
 8008a56:	f000 fe83 	bl	8009760 <tcpip_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8008a5a:	b960      	cbnz	r0, 8008a76 <netconn_write_partly+0x66>
 8008a5c:	2c00      	cmp	r4, #0
 8008a5e:	d0e2      	beq.n	8008a26 <netconn_write_partly+0x16>
    if (dontblock
 8008a60:	b115      	cbz	r5, 8008a68 <netconn_write_partly+0x58>
#if LWIP_SO_SNDTIMEO
        || (conn->send_timeout != 0)
#endif /* LWIP_SO_SNDTIMEO */
       ) {
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.msg.w.len;
 8008a62:	9b04      	ldr	r3, [sp, #16]
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	e006      	b.n	8008a76 <netconn_write_partly+0x66>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8008a68:	6026      	str	r6, [r4, #0]
 8008a6a:	e7dc      	b.n	8008a26 <netconn_write_partly+0x16>
{
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008a6c:	f06f 000e 	mvn.w	r0, #14
 8008a70:	e001      	b.n	8008a76 <netconn_write_partly+0x66>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008a72:	f06f 0005 	mvn.w	r0, #5
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
}
 8008a76:	b006      	add	sp, #24
 8008a78:	bd70      	pop	{r4, r5, r6, pc}
 8008a7a:	bf00      	nop
 8008a7c:	08009563 	.word	0x08009563

08008a80 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008a80:	2103      	movs	r1, #3
 8008a82:	f7ff be3d 	b.w	8008700 <netconn_close_shutdown>

08008a86 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8008a86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a8a:	4617      	mov	r7, r2
 8008a8c:	461d      	mov	r5, r3
 8008a8e:	f8bd 9020 	ldrh.w	r9, [sp, #32]
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
 8008a92:	4606      	mov	r6, r0
 8008a94:	b128      	cbz	r0, 8008aa2 <recv_udp+0x1c>
 8008a96:	f100 0810 	add.w	r8, r0, #16
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	f005 fc1b 	bl	800e2d6 <sys_mbox_valid>
 8008aa0:	b920      	cbnz	r0, 8008aac <recv_udp+0x26>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008aa2:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8008aa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008aa8:	f002 badc 	b.w	800b064 <pbuf_free>
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008aac:	2004      	movs	r0, #4
 8008aae:	f002 fa13 	bl	800aed8 <memp_malloc>
  if (buf == NULL) {
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	d0f4      	beq.n	8008aa2 <recv_udp+0x1c>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 8008ab8:	6007      	str	r7, [r0, #0]
    buf->ptr = p;
 8008aba:	6047      	str	r7, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 8008abc:	b105      	cbz	r5, 8008ac0 <recv_udp+0x3a>
 8008abe:	682d      	ldr	r5, [r5, #0]
 8008ac0:	60a5      	str	r5, [r4, #8]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008ac2:	4621      	mov	r1, r4
    return;
  } else {
    buf->p = p;
    buf->ptr = p;
    ip_addr_set(&buf->addr, addr);
    buf->port = port;
 8008ac4:	f8a4 900c 	strh.w	r9, [r4, #12]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008ac8:	4640      	mov	r0, r8
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008aca:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008acc:	f005 fbbd 	bl	800e24a <sys_mbox_trypost>
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	b120      	cbz	r0, 8008ade <recv_udp+0x58>
    netbuf_delete(buf);
 8008ad4:	4620      	mov	r0, r4
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8008ad6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
    netbuf_delete(buf);
 8008ada:	f000 bda5 	b.w	8009628 <netbuf_delete>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008ade:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008ae0:	b123      	cbz	r3, 8008aec <recv_udp+0x66>
 8008ae2:	462a      	mov	r2, r5
 8008ae4:	4630      	mov	r0, r6
  }
}
 8008ae6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008aea:	4718      	bx	r3
 8008aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008af0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008af0:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008af2:	6844      	ldr	r4, [r0, #4]
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008af4:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  tcp_arg(pcb, conn);
 8008af6:	4620      	mov	r0, r4
 8008af8:	f002 fd23 	bl	800b542 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008afc:	4620      	mov	r0, r4
 8008afe:	4909      	ldr	r1, [pc, #36]	; (8008b24 <setup_tcp+0x34>)
 8008b00:	f002 fd21 	bl	800b546 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008b04:	4620      	mov	r0, r4
 8008b06:	4908      	ldr	r1, [pc, #32]	; (8008b28 <setup_tcp+0x38>)
 8008b08:	f002 fd1f 	bl	800b54a <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4907      	ldr	r1, [pc, #28]	; (8008b2c <setup_tcp+0x3c>)
 8008b10:	2202      	movs	r2, #2
 8008b12:	f002 fd21 	bl	800b558 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008b16:	4620      	mov	r0, r4
 8008b18:	4905      	ldr	r1, [pc, #20]	; (8008b30 <setup_tcp+0x40>)
}
 8008b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pcb = conn->pcb.tcp;
  tcp_arg(pcb, conn);
  tcp_recv(pcb, recv_tcp);
  tcp_sent(pcb, sent_tcp);
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  tcp_err(pcb, err_tcp);
 8008b1e:	f002 bd16 	b.w	800b54e <tcp_err>
 8008b22:	bf00      	nop
 8008b24:	08008f87 	.word	0x08008f87
 8008b28:	08008f3b 	.word	0x08008f3b
 8008b2c:	08008ee1 	.word	0x08008ee1
 8008b30:	08008b9b 	.word	0x08008b9b

08008b34 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008b34:	b570      	push	{r4, r5, r6, lr}

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8008b36:	4604      	mov	r4, r0
 8008b38:	b350      	cbz	r0, 8008b90 <lwip_netconn_do_connected+0x5c>
    return ERR_VAL;
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8008b3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8008b3c:	b11e      	cbz	r6, 8008b46 <lwip_netconn_do_connected+0x12>
    conn->current_msg->err = err;
 8008b3e:	7132      	strb	r2, [r6, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b42:	681e      	ldr	r6, [r3, #0]
 8008b44:	360c      	adds	r6, #12
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8008b46:	7823      	ldrb	r3, [r4, #0]
 8008b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b4c:	2b10      	cmp	r3, #16
 8008b4e:	d103      	bne.n	8008b58 <lwip_netconn_do_connected+0x24>
 8008b50:	b912      	cbnz	r2, 8008b58 <lwip_netconn_do_connected+0x24>
    setup_tcp(conn);
 8008b52:	4620      	mov	r0, r4
 8008b54:	f7ff ffcc 	bl	8008af0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8008b58:	7f23      	ldrb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  conn->state = NETCONN_NONE;
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008b5a:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8008b5e:	f003 0004 	and.w	r0, r3, #4
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
    setup_tcp(conn);
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  SET_NONBLOCKING_CONNECT(conn, 0);
 8008b62:	f023 0304 	bic.w	r3, r3, #4
  LWIP_ASSERT("blocking connect state error",
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  conn->state = NETCONN_NONE;
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008b66:	320b      	adds	r2, #11
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
    setup_tcp(conn);
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  SET_NONBLOCKING_CONNECT(conn, 0);
 8008b68:	7723      	strb	r3, [r4, #28]
  LWIP_ASSERT("blocking connect state error",
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8008b6a:	f04f 0300 	mov.w	r3, #0
 8008b6e:	b2c5      	uxtb	r5, r0
 8008b70:	6263      	str	r3, [r4, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8008b72:	7063      	strb	r3, [r4, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008b74:	bfa8      	it	ge
 8008b76:	7223      	strbge	r3, [r4, #8]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008b78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b7a:	b11b      	cbz	r3, 8008b84 <lwip_netconn_do_connected+0x50>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2102      	movs	r1, #2
 8008b80:	4620      	mov	r0, r4
 8008b82:	4798      	blx	r3

  if (was_blocking) {
 8008b84:	b93d      	cbnz	r5, 8008b96 <lwip_netconn_do_connected+0x62>
    sys_sem_signal(op_completed_sem);
 8008b86:	4630      	mov	r0, r6
 8008b88:	f005 fbeb 	bl	800e362 <sys_sem_signal>
  }
  return ERR_OK;
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;

  if (conn == NULL) {
    return ERR_VAL;
 8008b90:	f06f 0005 	mvn.w	r0, #5
 8008b94:	bd70      	pop	{r4, r5, r6, pc}
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);

  if (was_blocking) {
    sys_sem_signal(op_completed_sem);
  }
  return ERR_OK;
 8008b96:	2000      	movs	r0, #0
}
 8008b98:	bd70      	pop	{r4, r5, r6, pc}

08008b9a <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  conn->pcb.tcp = NULL;
 8008b9c:	2200      	movs	r2, #0
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	460e      	mov	r6, r1
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  conn->pcb.tcp = NULL;
 8008ba2:	6042      	str	r2, [r0, #4]

  /* no check since this is always fatal! */
  SYS_ARCH_SET(conn->last_err, err);
 8008ba4:	7221      	strb	r1, [r4, #8]
  conn->state = NETCONN_NONE;

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ba6:	6a83      	ldr	r3, [r0, #40]	; 0x28

  /* no check since this is always fatal! */
  SYS_ARCH_SET(conn->last_err, err);

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008ba8:	7845      	ldrb	r5, [r0, #1]
  conn->state = NETCONN_NONE;
 8008baa:	7042      	strb	r2, [r0, #1]

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008bac:	b10b      	cbz	r3, 8008bb2 <err_tcp+0x18>
 8008bae:	2104      	movs	r1, #4
 8008bb0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008bb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bb4:	b11b      	cbz	r3, 8008bbe <err_tcp+0x24>
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	4620      	mov	r0, r4
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008bbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008bc0:	b11b      	cbz	r3, 8008bca <err_tcp+0x30>
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008bca:	f104 0710 	add.w	r7, r4, #16
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f005 fb81 	bl	800e2d6 <sys_mbox_valid>
 8008bd4:	b118      	cbz	r0, 8008bde <err_tcp+0x44>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4638      	mov	r0, r7
 8008bda:	f005 fb36 	bl	800e24a <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008bde:	f104 0714 	add.w	r7, r4, #20
 8008be2:	4638      	mov	r0, r7
 8008be4:	f005 fb77 	bl	800e2d6 <sys_mbox_valid>
 8008be8:	b118      	cbz	r0, 8008bf2 <err_tcp+0x58>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8008bea:	2100      	movs	r1, #0
 8008bec:	4638      	mov	r0, r7
 8008bee:	f005 fb2c 	bl	800e24a <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008bf2:	2d01      	cmp	r5, #1
 8008bf4:	d002      	beq.n	8008bfc <err_tcp+0x62>
 8008bf6:	3d03      	subs	r5, #3
 8008bf8:	2d01      	cmp	r5, #1
 8008bfa:	d81b      	bhi.n	8008c34 <err_tcp+0x9a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008bfc:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008bfe:	f023 0204 	bic.w	r2, r3, #4

    if (!was_nonblocking_connect) {
 8008c02:	f003 0304 	and.w	r3, r3, #4
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008c06:	7722      	strb	r2, [r4, #28]

    if (!was_nonblocking_connect) {
 8008c08:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8008c0c:	b993      	cbnz	r3, 8008c34 <err_tcp+0x9a>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
      conn->current_msg->err = err;
 8008c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c10:	711e      	strb	r6, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c14:	681d      	ldr	r5, [r3, #0]
 8008c16:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008c18:	4628      	mov	r0, r5
 8008c1a:	f005 fbab 	bl	800e374 <sys_sem_valid>
      conn->current_msg = NULL;
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8008c1e:	f994 3008 	ldrsb.w	r3, [r4, #8]
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
      conn->current_msg->err = err;
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
      conn->current_msg = NULL;
 8008c22:	6267      	str	r7, [r4, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
      sys_sem_signal(op_completed_sem);
 8008c24:	4628      	mov	r0, r5
      conn->current_msg->err = err;
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
      conn->current_msg = NULL;
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8008c26:	330b      	adds	r3, #11
 8008c28:	bfa8      	it	ge
 8008c2a:	7226      	strbge	r6, [r4, #8]
      sys_sem_signal(op_completed_sem);
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  }
}
 8008c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
      conn->current_msg = NULL;
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
      sys_sem_signal(op_completed_sem);
 8008c30:	f005 bb97 	b.w	800e362 <sys_sem_signal>
 8008c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c36 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c38:	4604      	mov	r4, r0

  LWIP_ASSERT("conn != NULL", conn != NULL);
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8008c3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
    conn->write_offset < conn->current_msg->msg.w.len);

  dontblock = netconn_is_nonblocking(conn) ||
 8008c3c:	7f23      	ldrb	r3, [r4, #28]
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8008c3e:	6a25      	ldr	r5, [r4, #32]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8008c40:	68c2      	ldr	r2, [r0, #12]
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
    conn->write_offset < conn->current_msg->msg.w.len);

  dontblock = netconn_is_nonblocking(conn) ||
 8008c42:	f013 0f02 	tst.w	r3, #2
 8008c46:	7c03      	ldrb	r3, [r0, #16]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8008c48:	eba2 0205 	sub.w	r2, r2, r5
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8008c4c:	6881      	ldr	r1, [r0, #8]
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
    conn->write_offset < conn->current_msg->msg.w.len);

  dontblock = netconn_is_nonblocking(conn) ||
 8008c4e:	bf0c      	ite	eq
 8008c50:	f3c3 0780 	ubfxeq	r7, r3, #2, #1
 8008c54:	2701      	movne	r7, #1
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8008c56:	6860      	ldr	r0, [r4, #4]
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
    diff = conn->current_msg->msg.w.len - conn->write_offset;
    if (diff > 0xffffUL) { /* max_u16_t */
 8008c58:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8008c5c:	4429      	add	r1, r5
    diff = conn->current_msg->msg.w.len - conn->write_offset;
    if (diff > 0xffffUL) { /* max_u16_t */
      len = 0xffff;
 8008c5e:	bf2c      	ite	cs
 8008c60:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
 8008c64:	b292      	uxthcc	r2, r2
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8008c66:	f8b0 6066 	ldrh.w	r6, [r0, #102]	; 0x66
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
    diff = conn->current_msg->msg.w.len - conn->write_offset;
    if (diff > 0xffffUL) { /* max_u16_t */
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
 8008c6a:	bf28      	it	cs
 8008c6c:	f043 0302 	orrcs.w	r3, r3, #2
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
    if (available < len) {
 8008c70:	42b2      	cmp	r2, r6
 8008c72:	d905      	bls.n	8008c80 <lwip_netconn_do_writemore+0x4a>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8008c74:	b10f      	cbz	r7, 8008c7a <lwip_netconn_do_writemore+0x44>
        if (!len) {
 8008c76:	b176      	cbz	r6, 8008c96 <lwip_netconn_do_writemore+0x60>
 8008c78:	e003      	b.n	8008c82 <lwip_netconn_do_writemore+0x4c>
          err = ERR_WOULDBLOCK;
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008c7a:	f043 0302 	orr.w	r3, r3, #2
 8008c7e:	e000      	b.n	8008c82 <lwip_netconn_do_writemore+0x4c>
 8008c80:	4616      	mov	r6, r2
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008c82:	4632      	mov	r2, r6
 8008c84:	f004 f8ca 	bl	800ce1c <tcp_write>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008c88:	1c43      	adds	r3, r0, #1
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008c8a:	4605      	mov	r5, r0
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d84c      	bhi.n	8008d2c <lwip_netconn_do_writemore+0xf6>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8008c92:	b18f      	cbz	r7, 8008cb8 <lwip_netconn_do_writemore+0x82>
 8008c94:	e001      	b.n	8008c9a <lwip_netconn_do_writemore+0x64>
    if (available < len) {
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
        if (!len) {
          err = ERR_WOULDBLOCK;
 8008c96:	f06f 0506 	mvn.w	r5, #6
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8008c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	429e      	cmp	r6, r3
 8008ca0:	d20a      	bcs.n	8008cb8 <lwip_netconn_do_writemore+0x82>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008ca2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ca4:	b11b      	cbz	r3, 8008cae <lwip_netconn_do_writemore+0x78>
 8008ca6:	4632      	mov	r2, r6
 8008ca8:	2103      	movs	r1, #3
 8008caa:	4620      	mov	r0, r4
 8008cac:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008cae:	7f23      	ldrb	r3, [r4, #28]
 8008cb0:	f043 0310 	orr.w	r3, r3, #16
 8008cb4:	7723      	strb	r3, [r4, #28]
 8008cb6:	e010      	b.n	8008cda <lwip_netconn_do_writemore+0xa4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008cb8:	6863      	ldr	r3, [r4, #4]
 8008cba:	f640 3269 	movw	r2, #2921	; 0xb69
 8008cbe:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
 8008cc2:	4291      	cmp	r1, r2
 8008cc4:	d903      	bls.n	8008cce <lwip_netconn_do_writemore+0x98>
 8008cc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d905      	bls.n	8008cda <lwip_netconn_do_writemore+0xa4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cd0:	b11b      	cbz	r3, 8008cda <lwip_netconn_do_writemore+0xa4>
 8008cd2:	4632      	mov	r2, r6
 8008cd4:	2103      	movs	r1, #3
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8008cda:	b9bd      	cbnz	r5, 8008d0c <lwip_netconn_do_writemore+0xd6>
      err_t out_err;
      conn->write_offset += len;
 8008cdc:	6a23      	ldr	r3, [r4, #32]
 8008cde:	441e      	add	r6, r3
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8008ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      }
    }

    if (err == ERR_OK) {
      err_t out_err;
      conn->write_offset += len;
 8008ce2:	6226      	str	r6, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	4296      	cmp	r6, r2
 8008ce8:	462a      	mov	r2, r5
 8008cea:	d000      	beq.n	8008cee <lwip_netconn_do_writemore+0xb8>
 8008cec:	b11f      	cbz	r7, 8008cf6 <lwip_netconn_do_writemore+0xc0>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8008cee:	60de      	str	r6, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8008cf0:	2601      	movs	r6, #1
        conn->write_offset = 0;
 8008cf2:	6222      	str	r2, [r4, #32]
 8008cf4:	e000      	b.n	8008cf8 <lwip_netconn_do_writemore+0xc2>
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008cf6:	462e      	mov	r6, r5
        conn->current_msg->msg.w.len = conn->write_offset;
        /* everything was written */
        write_finished = 1;
        conn->write_offset = 0;
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008cf8:	6860      	ldr	r0, [r4, #4]
 8008cfa:	f004 fadb 	bl	800d2b4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008cfe:	f110 0f0b 	cmn.w	r0, #11
        conn->current_msg->msg.w.len = conn->write_offset;
        /* everything was written */
        write_finished = 1;
        conn->write_offset = 0;
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008d02:	4602      	mov	r2, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008d04:	db0e      	blt.n	8008d24 <lwip_netconn_do_writemore+0xee>
 8008d06:	3004      	adds	r0, #4
 8008d08:	d125      	bne.n	8008d56 <lwip_netconn_do_writemore+0x120>
 8008d0a:	e00b      	b.n	8008d24 <lwip_netconn_do_writemore+0xee>
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
      }
    } else if ((err == ERR_MEM) && !dontblock) {
 8008d0c:	1c6a      	adds	r2, r5, #1
 8008d0e:	d10d      	bne.n	8008d2c <lwip_netconn_do_writemore+0xf6>
 8008d10:	b967      	cbnz	r7, 8008d2c <lwip_netconn_do_writemore+0xf6>
      /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
         we do NOT return to the application thread, since ERR_MEM is
         only a temporary error! */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008d12:	6860      	ldr	r0, [r4, #4]
 8008d14:	f004 face 	bl	800d2b4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008d18:	f110 0f0b 	cmn.w	r0, #11
      /* If ERR_MEM, we wait for sent_tcp or poll_tcp to be called
         we do NOT return to the application thread, since ERR_MEM is
         only a temporary error! */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008d1c:	4602      	mov	r2, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008d1e:	db01      	blt.n	8008d24 <lwip_netconn_do_writemore+0xee>
 8008d20:	1d03      	adds	r3, r0, #4
 8008d22:	d122      	bne.n	8008d6a <lwip_netconn_do_writemore+0x134>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 8008d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d26:	2100      	movs	r1, #0
 8008d28:	60d9      	str	r1, [r3, #12]
 8008d2a:	e003      	b.n	8008d34 <lwip_netconn_do_writemore+0xfe>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d30:	60da      	str	r2, [r3, #12]
 8008d32:	462a      	mov	r2, r5
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008d36:	4615      	mov	r5, r2
 8008d38:	680b      	ldr	r3, [r1, #0]
    conn->current_msg->err = err;
 8008d3a:	710a      	strb	r2, [r1, #4]
    conn->current_msg = NULL;
 8008d3c:	2100      	movs	r1, #0
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d3e:	f103 000c 	add.w	r0, r3, #12
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8008d42:	6261      	str	r1, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008d44:	7061      	strb	r1, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8008d46:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8008d4a:	320b      	adds	r2, #11
 8008d4c:	bfa8      	it	ge
 8008d4e:	7225      	strbge	r5, [r4, #8]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      sys_sem_signal(op_completed_sem);
 8008d50:	f005 fb07 	bl	800e362 <sys_sem_signal>
 8008d54:	e009      	b.n	8008d6a <lwip_netconn_do_writemore+0x134>
         the error to the application thread. */
      write_finished = 1;
      conn->current_msg->msg.w.len = 0;
    }
  }
  if (write_finished) {
 8008d56:	b146      	cbz	r6, 8008d6a <lwip_netconn_do_writemore+0x134>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d58:	6a61      	ldr	r1, [r4, #36]	; 0x24
    conn->current_msg->err = err;
 8008d5a:	2200      	movs	r2, #0
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d5c:	680b      	ldr	r3, [r1, #0]
    conn->current_msg->err = err;
 8008d5e:	710a      	strb	r2, [r1, #4]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d60:	f103 000c 	add.w	r0, r3, #12
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8008d64:	6262      	str	r2, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008d66:	7062      	strb	r2, [r4, #1]
 8008d68:	e7ed      	b.n	8008d46 <lwip_netconn_do_writemore+0x110>
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
}
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008d70 <lwip_netconn_do_close_internal>:
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  tpcb = conn->pcb.tcp;
  shut = conn->current_msg->msg.sd.shut;
 8008d70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 * @param conn the TCP netconn to close
 * [@param delay 1 if called from sent/poll (wake up calling thread on end)]
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008d72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  tpcb = conn->pcb.tcp;
  shut = conn->current_msg->msg.sd.shut;
 8008d76:	7a1b      	ldrb	r3, [r3, #8]
 * @param conn the TCP netconn to close
 * [@param delay 1 if called from sent/poll (wake up calling thread on end)]
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008d78:	4604      	mov	r4, r0
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  tpcb = conn->pcb.tcp;
 8008d7a:	6845      	ldr	r5, [r0, #4]
  shut = conn->current_msg->msg.sd.shut;
  shut_rx = shut & NETCONN_SHUT_RD;
  shut_tx = shut & NETCONN_SHUT_WR;
 8008d7c:	f003 0702 	and.w	r7, r3, #2
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008d80:	2b03      	cmp	r3, #3
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);

  tpcb = conn->pcb.tcp;
  shut = conn->current_msg->msg.sd.shut;
  shut_rx = shut & NETCONN_SHUT_RD;
 8008d82:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8008d86:	b2ff      	uxtb	r7, r7
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008d88:	d057      	beq.n	8008e3a <lwip_netconn_do_close_internal+0xca>
    close = 1;
  } else if (shut_rx &&
 8008d8a:	f1b9 0f00 	cmp.w	r9, #0
 8008d8e:	d005      	beq.n	8008d9c <lwip_netconn_do_close_internal+0x2c>
             ((tpcb->state == FIN_WAIT_1) ||
 8008d90:	7e2b      	ldrb	r3, [r5, #24]
  shut_tx = shut & NETCONN_SHUT_WR;
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
    close = 1;
  } else if (shut_rx &&
 8008d92:	1f5a      	subs	r2, r3, #5
 8008d94:	2a01      	cmp	r2, #1
 8008d96:	d950      	bls.n	8008e3a <lwip_netconn_do_close_internal+0xca>
             ((tpcb->state == FIN_WAIT_1) ||
              (tpcb->state == FIN_WAIT_2) ||
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d04e      	beq.n	8008e3a <lwip_netconn_do_close_internal+0xca>
              (tpcb->state == CLOSING))) {
    close = 1;
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008d9c:	b13f      	cbz	r7, 8008dae <lwip_netconn_do_close_internal+0x3e>
 8008d9e:	7fab      	ldrb	r3, [r5, #30]
 8008da0:	f003 0310 	and.w	r3, r3, #16
 8008da4:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d146      	bne.n	8008e3a <lwip_netconn_do_close_internal+0xca>
 8008dac:	e000      	b.n	8008db0 <lwip_netconn_do_close_internal+0x40>
 8008dae:	46b8      	mov	r8, r7

  /* Set back some callback pointers */
  if (close) {
    tcp_arg(tpcb, NULL);
  }
  if (tpcb->state == LISTEN) {
 8008db0:	7e2b      	ldrb	r3, [r5, #24]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d107      	bne.n	8008dc6 <lwip_netconn_do_close_internal+0x56>
    tcp_accept(tpcb, NULL);
 8008db6:	2100      	movs	r1, #0
 8008db8:	4628      	mov	r0, r5
 8008dba:	f002 fbcb 	bl	800b554 <tcp_accept>
      tcp_poll(tpcb, NULL, 0);
      tcp_err(tpcb, NULL);
    }
  }
  /* Try to close the connection */
  if (close) {
 8008dbe:	f1b8 0f00 	cmp.w	r8, #0
 8008dc2:	d11c      	bne.n	8008dfe <lwip_netconn_do_close_internal+0x8e>
 8008dc4:	e01f      	b.n	8008e06 <lwip_netconn_do_close_internal+0x96>
  }
  if (tpcb->state == LISTEN) {
    tcp_accept(tpcb, NULL);
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008dc6:	f1b9 0f00 	cmp.w	r9, #0
 8008dca:	d007      	beq.n	8008ddc <lwip_netconn_do_close_internal+0x6c>
      tcp_recv(tpcb, NULL);
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f002 fbb9 	bl	800b546 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f002 fbbc 	bl	800b554 <tcp_accept>
    }
    if (shut_tx) {
 8008ddc:	b11f      	cbz	r7, 8008de6 <lwip_netconn_do_close_internal+0x76>
      tcp_sent(tpcb, NULL);
 8008dde:	2100      	movs	r1, #0
 8008de0:	4628      	mov	r0, r5
 8008de2:	f002 fbb2 	bl	800b54a <tcp_sent>
    }
    if (close) {
 8008de6:	f1b8 0f00 	cmp.w	r8, #0
 8008dea:	d00c      	beq.n	8008e06 <lwip_netconn_do_close_internal+0x96>
      tcp_poll(tpcb, NULL, 0);
 8008dec:	2200      	movs	r2, #0
 8008dee:	4628      	mov	r0, r5
 8008df0:	4611      	mov	r1, r2
 8008df2:	f002 fbb1 	bl	800b558 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008df6:	2100      	movs	r1, #0
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f002 fba8 	bl	800b54e <tcp_err>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f002 fde0 	bl	800b9c4 <tcp_close>
 8008e04:	e004      	b.n	8008e10 <lwip_netconn_do_close_internal+0xa0>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008e06:	463a      	mov	r2, r7
 8008e08:	4649      	mov	r1, r9
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f002 fe72 	bl	800baf4 <tcp_shutdown>
 8008e10:	4606      	mov	r6, r0
  }
  if (err == ERR_OK) {
 8008e12:	b1d8      	cbz	r0, 8008e4c <lwip_netconn_do_close_internal+0xdc>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008e14:	1c42      	adds	r2, r0, #1
 8008e16:	d119      	bne.n	8008e4c <lwip_netconn_do_close_internal+0xdc>
      /* Closing failed because of memory shortage */
      if (netconn_is_nonblocking(conn)) {
 8008e18:	7f23      	ldrb	r3, [r4, #28]
 8008e1a:	079b      	lsls	r3, r3, #30
 8008e1c:	d414      	bmi.n	8008e48 <lwip_netconn_do_close_internal+0xd8>
          close_timeout = conn->linger * 1000U;
        }
#endif
        if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        if (conn->current_msg->msg.sd.polls_left == 0) {
 8008e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e20:	f893 a009 	ldrb.w	sl, [r3, #9]
 8008e24:	f1ba 0f00 	cmp.w	sl, #0
 8008e28:	d13d      	bne.n	8008ea6 <lwip_netconn_do_close_internal+0x136>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
          close_finished = 1;
          if (close) {
 8008e2a:	f1b8 0f00 	cmp.w	r8, #0
 8008e2e:	d00d      	beq.n	8008e4c <lwip_netconn_do_close_internal+0xdc>
            /* in this case, we want to RST the connection */
            tcp_abort(tpcb);
 8008e30:	4628      	mov	r0, r5
            err = ERR_OK;
 8008e32:	4656      	mov	r6, sl
        if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
          close_finished = 1;
          if (close) {
            /* in this case, we want to RST the connection */
            tcp_abort(tpcb);
 8008e34:	f002 fee4 	bl	800bc00 <tcp_abort>
 8008e38:	e008      	b.n	8008e4c <lwip_netconn_do_close_internal+0xdc>
    close = 0;
  }

  /* Set back some callback pointers */
  if (close) {
    tcp_arg(tpcb, NULL);
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f002 fb80 	bl	800b542 <tcp_arg>
 8008e42:	f04f 0801 	mov.w	r8, #1
 8008e46:	e7b3      	b.n	8008db0 <lwip_netconn_do_close_internal+0x40>
    if (err == ERR_MEM) {
      /* Closing failed because of memory shortage */
      if (netconn_is_nonblocking(conn)) {
        /* Nonblocking close failed */
        close_finished = 1;
        err = ERR_WOULDBLOCK;
 8008e48:	f06f 0606 	mvn.w	r6, #6
      close_finished = 1;
    }
  }
  if (close_finished) {
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e4e:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 8008e50:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 8008e52:	2300      	movs	r3, #0
 8008e54:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8008e56:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8008e58:	b9ce      	cbnz	r6, 8008e8e <lwip_netconn_do_close_internal+0x11e>
      if (close) {
 8008e5a:	f1b8 0f00 	cmp.w	r8, #0
 8008e5e:	d006      	beq.n	8008e6e <lwip_netconn_do_close_internal+0xfe>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008e60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    conn->current_msg = NULL;
    conn->state = NETCONN_NONE;
    if (err == ERR_OK) {
      if (close) {
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008e62:	6066      	str	r6, [r4, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008e64:	b11b      	cbz	r3, 8008e6e <lwip_netconn_do_close_internal+0xfe>
 8008e66:	4632      	mov	r2, r6
 8008e68:	2104      	movs	r1, #4
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	4798      	blx	r3
      }
      if (shut_rx) {
 8008e6e:	f1b9 0f00 	cmp.w	r9, #0
 8008e72:	d005      	beq.n	8008e80 <lwip_netconn_do_close_internal+0x110>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e76:	b153      	cbz	r3, 8008e8e <lwip_netconn_do_close_internal+0x11e>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4798      	blx	r3
      }
      if (shut_tx) {
 8008e80:	b12f      	cbz	r7, 8008e8e <lwip_netconn_do_close_internal+0x11e>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008e82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e84:	b11b      	cbz	r3, 8008e8e <lwip_netconn_do_close_internal+0x11e>
 8008e86:	2200      	movs	r2, #0
 8008e88:	2102      	movs	r1, #2
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8008e8e:	f994 3008 	ldrsb.w	r3, [r4, #8]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008e92:	f105 000c 	add.w	r0, r5, #12
      }
      if (shut_tx) {
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8008e96:	330b      	adds	r3, #11
 8008e98:	bfa8      	it	ge
 8008e9a:	7226      	strbge	r6, [r4, #8]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008e9c:	f005 fa61 	bl	800e362 <sys_sem_signal>
    }
    return ERR_OK;
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  }
  if (!close_finished) {
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
    if (shut_tx) {
 8008ea6:	b11f      	cbz	r7, 8008eb0 <lwip_netconn_do_close_internal+0x140>
      tcp_sent(tpcb, sent_tcp);
 8008ea8:	490a      	ldr	r1, [pc, #40]	; (8008ed4 <lwip_netconn_do_close_internal+0x164>)
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f002 fb4d 	bl	800b54a <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	4908      	ldr	r1, [pc, #32]	; (8008ed8 <lwip_netconn_do_close_internal+0x168>)
 8008eb6:	f002 fb4f 	bl	800b558 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008eba:	4628      	mov	r0, r5
 8008ebc:	4907      	ldr	r1, [pc, #28]	; (8008edc <lwip_netconn_do_close_internal+0x16c>)
 8008ebe:	f002 fb46 	bl	800b54e <tcp_err>
    tcp_arg(tpcb, conn);
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f002 fb3c 	bl	800b542 <tcp_arg>
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed2:	bf00      	nop
 8008ed4:	08008f3b 	.word	0x08008f3b
 8008ed8:	08008ee1 	.word	0x08008ee1
 8008edc:	08008b9b 	.word	0x08008b9b

08008ee0 <poll_tcp>:
  struct netconn *conn = (struct netconn *)arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn->state == NETCONN_WRITE) {
 8008ee0:	7843      	ldrb	r3, [r0, #1]
 8008ee2:	2b01      	cmp	r3, #1
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	4604      	mov	r4, r0
  struct netconn *conn = (struct netconn *)arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn->state == NETCONN_WRITE) {
 8008ee8:	d102      	bne.n	8008ef0 <poll_tcp+0x10>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008eea:	f7ff fea4 	bl	8008c36 <lwip_netconn_do_writemore>
 8008eee:	e00a      	b.n	8008f06 <poll_tcp+0x26>
  } else if (conn->state == NETCONN_CLOSE) {
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d108      	bne.n	8008f06 <poll_tcp+0x26>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008ef4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008ef6:	b11a      	cbz	r2, 8008f00 <poll_tcp+0x20>
 8008ef8:	7a53      	ldrb	r3, [r2, #9]
 8008efa:	b10b      	cbz	r3, 8008f00 <poll_tcp+0x20>
      conn->current_msg->msg.sd.polls_left--;
 8008efc:	3b01      	subs	r3, #1
 8008efe:	7253      	strb	r3, [r2, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008f00:	4620      	mov	r0, r4
 8008f02:	f7ff ff35 	bl	8008d70 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008f06:	7f23      	ldrb	r3, [r4, #28]
 8008f08:	06da      	lsls	r2, r3, #27
 8008f0a:	d514      	bpl.n	8008f36 <poll_tcp+0x56>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f0c:	6862      	ldr	r2, [r4, #4]
 8008f0e:	b192      	cbz	r2, 8008f36 <poll_tcp+0x56>
 8008f10:	f8b2 0066 	ldrh.w	r0, [r2, #102]	; 0x66
 8008f14:	f640 3169 	movw	r1, #2921	; 0xb69
 8008f18:	4288      	cmp	r0, r1
 8008f1a:	d90c      	bls.n	8008f36 <poll_tcp+0x56>
 8008f1c:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 8008f20:	2a04      	cmp	r2, #4
 8008f22:	d808      	bhi.n	8008f36 <poll_tcp+0x56>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008f24:	f023 0310 	bic.w	r3, r3, #16
 8008f28:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f2c:	b11b      	cbz	r3, 8008f36 <poll_tcp+0x56>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2102      	movs	r1, #2
 8008f32:	4620      	mov	r0, r4
 8008f34:	4798      	blx	r3
    }
  }

  return ERR_OK;
}
 8008f36:	2000      	movs	r0, #0
 8008f38:	bd10      	pop	{r4, pc}

08008f3a <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008f3a:	b538      	push	{r3, r4, r5, lr}
 8008f3c:	4615      	mov	r5, r2
  struct netconn *conn = (struct netconn *)arg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));

  if (conn) {
 8008f3e:	4604      	mov	r4, r0
 8008f40:	b1f8      	cbz	r0, 8008f82 <sent_tcp+0x48>
    if (conn->state == NETCONN_WRITE) {
 8008f42:	7843      	ldrb	r3, [r0, #1]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d102      	bne.n	8008f4e <sent_tcp+0x14>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008f48:	f7ff fe75 	bl	8008c36 <lwip_netconn_do_writemore>
 8008f4c:	e003      	b.n	8008f56 <sent_tcp+0x1c>
    } else if (conn->state == NETCONN_CLOSE) {
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d101      	bne.n	8008f56 <sent_tcp+0x1c>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008f52:	f7ff ff0d 	bl	8008d70 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f56:	6863      	ldr	r3, [r4, #4]
 8008f58:	b19b      	cbz	r3, 8008f82 <sent_tcp+0x48>
 8008f5a:	f8b3 1066 	ldrh.w	r1, [r3, #102]	; 0x66
 8008f5e:	f640 3269 	movw	r2, #2921	; 0xb69
 8008f62:	4291      	cmp	r1, r2
 8008f64:	d90d      	bls.n	8008f82 <sent_tcp+0x48>
 8008f66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	d809      	bhi.n	8008f82 <sent_tcp+0x48>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008f6e:	7f23      	ldrb	r3, [r4, #28]
 8008f70:	f023 0310 	bic.w	r3, r3, #16
 8008f74:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008f76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f78:	b11b      	cbz	r3, 8008f82 <sent_tcp+0x48>
 8008f7a:	462a      	mov	r2, r5
 8008f7c:	2102      	movs	r1, #2
 8008f7e:	4620      	mov	r0, r4
 8008f80:	4798      	blx	r3
    }
  }

  return ERR_OK;
}
 8008f82:	2000      	movs	r0, #0
 8008f84:	bd38      	pop	{r3, r4, r5, pc}

08008f86 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008f86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f8a:	4689      	mov	r9, r1
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	461f      	mov	r7, r3
  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;

  if (conn == NULL) {
 8008f90:	4606      	mov	r6, r0
 8008f92:	b348      	cbz	r0, 8008fe8 <recv_tcp+0x62>
    return ERR_VAL;
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8008f94:	f100 0810 	add.w	r8, r0, #16
 8008f98:	4640      	mov	r0, r8
 8008f9a:	f005 f99c 	bl	800e2d6 <sys_mbox_valid>
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	b950      	cbnz	r0, 8008fb8 <recv_tcp+0x32>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008fa2:	b90d      	cbnz	r5, 8008fa8 <recv_tcp+0x22>
    len = 0;
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008fa4:	2400      	movs	r4, #0
 8008fa6:	e024      	b.n	8008ff2 <recv_tcp+0x6c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);

  if (!sys_mbox_valid(&conn->recvmbox)) {
    /* recvmbox already deleted */
    if (p != NULL) {
      tcp_recved(pcb, p->tot_len);
 8008fa8:	4648      	mov	r0, r9
 8008faa:	8929      	ldrh	r1, [r5, #8]
 8008fac:	f002 fa8e 	bl	800b4cc <tcp_recved>
      pbuf_free(p);
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f002 f857 	bl	800b064 <pbuf_free>
 8008fb6:	e01c      	b.n	8008ff2 <recv_tcp+0x6c>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8008fb8:	b127      	cbz	r7, 8008fc4 <recv_tcp+0x3e>
    NETCONN_SET_SAFE_ERR(conn, err);
 8008fba:	f996 3008 	ldrsb.w	r3, [r6, #8]
 8008fbe:	330b      	adds	r3, #11
 8008fc0:	bfa8      	it	ge
 8008fc2:	7237      	strbge	r7, [r6, #8]
  }

  if (p != NULL) {
 8008fc4:	b10d      	cbz	r5, 8008fca <recv_tcp+0x44>
    len = p->tot_len;
 8008fc6:	892f      	ldrh	r7, [r5, #8]
 8008fc8:	e000      	b.n	8008fcc <recv_tcp+0x46>
  } else {
    len = 0;
 8008fca:	462f      	mov	r7, r5
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4640      	mov	r0, r8
 8008fd0:	f005 f93b 	bl	800e24a <sys_mbox_trypost>
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	b950      	cbnz	r0, 8008fee <recv_tcp+0x68>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008fd8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0e2      	beq.n	8008fa4 <recv_tcp+0x1e>
 8008fde:	4601      	mov	r1, r0
 8008fe0:	463a      	mov	r2, r7
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	4798      	blx	r3
 8008fe6:	e004      	b.n	8008ff2 <recv_tcp+0x6c>
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  conn = (struct netconn *)arg;

  if (conn == NULL) {
    return ERR_VAL;
 8008fe8:	f06f 0405 	mvn.w	r4, #5
 8008fec:	e001      	b.n	8008ff2 <recv_tcp+0x6c>
    len = 0;
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008fee:	f04f 34ff 	mov.w	r4, #4294967295
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }

  return ERR_OK;
}
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008ff8 <lwip_netconn_do_newconn>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(struct api_msg_msg *msg)
{
 8008ff8:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8008ffa:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8008ffc:	6805      	ldr	r5, [r0, #0]
 *
 * @param msg the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(struct api_msg_msg *msg)
{
 8008ffe:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8009000:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009002:	686b      	ldr	r3, [r5, #4]
 8009004:	bb3b      	cbnz	r3, 8009056 <lwip_netconn_do_newconn+0x5e>
pcb_new(struct api_msg_msg *msg)
{
  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8009006:	782b      	ldrb	r3, [r5, #0]
 8009008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800900c:	2b10      	cmp	r3, #16
 800900e:	d012      	beq.n	8009036 <lwip_netconn_do_newconn+0x3e>
 8009010:	2b20      	cmp	r3, #32
 8009012:	d119      	bne.n	8009048 <lwip_netconn_do_newconn+0x50>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new();
 8009014:	f004 fd8e 	bl	800db34 <udp_new>
 8009018:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 800901a:	6822      	ldr	r2, [r4, #0]
 800901c:	6853      	ldr	r3, [r2, #4]
 800901e:	b1ab      	cbz	r3, 800904c <lwip_netconn_do_newconn+0x54>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009020:	7812      	ldrb	r2, [r2, #0]
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009022:	4914      	ldr	r1, [pc, #80]	; (8009074 <lwip_netconn_do_newconn+0x7c>)
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009024:	2a22      	cmp	r2, #34	; 0x22
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009026:	bf04      	itt	eq
 8009028:	2201      	moveq	r2, #1
 800902a:	741a      	strbeq	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800902c:	6822      	ldr	r2, [r4, #0]
 800902e:	6850      	ldr	r0, [r2, #4]
 8009030:	f004 fd64 	bl	800dafc <udp_recv>
 8009034:	e00a      	b.n	800904c <lwip_netconn_do_newconn+0x54>
    }
    break;
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new();
 8009036:	f002 feb9 	bl	800bdac <tcp_new>
 800903a:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	6843      	ldr	r3, [r0, #4]
 8009040:	b123      	cbz	r3, 800904c <lwip_netconn_do_newconn+0x54>
      setup_tcp(msg->conn);
 8009042:	f7ff fd55 	bl	8008af0 <setup_tcp>
 8009046:	e001      	b.n	800904c <lwip_netconn_do_newconn+0x54>
    }
    break;
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8009048:	23fa      	movs	r3, #250	; 0xfa
 800904a:	e003      	b.n	8009054 <lwip_netconn_do_newconn+0x5c>
    return;
  }
  if (msg->conn->pcb.ip == NULL) {
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	b90b      	cbnz	r3, 8009056 <lwip_netconn_do_newconn+0x5e>
    msg->err = ERR_MEM;
 8009052:	23ff      	movs	r3, #255	; 0xff
 8009054:	7123      	strb	r3, [r4, #4]
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8009056:	6823      	ldr	r3, [r4, #0]
 8009058:	b133      	cbz	r3, 8009068 <lwip_netconn_do_newconn+0x70>
 800905a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800905e:	320b      	adds	r2, #11
 8009060:	bfa4      	itt	ge
 8009062:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 8009066:	721a      	strbge	r2, [r3, #8]
 8009068:	6820      	ldr	r0, [r4, #0]
}
 800906a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800906e:	300c      	adds	r0, #12
 8009070:	f005 b977 	b.w	800e362 <sys_sem_signal>
 8009074:	08008a87 	.word	0x08008a87

08009078 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	4605      	mov	r5, r0
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800907c:	2005      	movs	r0, #5
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800907e:	460f      	mov	r7, r1
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009080:	f001 ff2a 	bl	800aed8 <memp_malloc>
 8009084:	2300      	movs	r3, #0
  if (conn == NULL) {
 8009086:	4604      	mov	r4, r0
 8009088:	b360      	cbz	r0, 80090e4 <netconn_alloc+0x6c>
    return NULL;
  }

  conn->last_err = ERR_OK;
  conn->type = t;
 800908a:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800908c:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  if (conn == NULL) {
    return NULL;
  }

  conn->last_err = ERR_OK;
 8009090:	7203      	strb	r3, [r0, #8]
  conn->type = t;
  conn->pcb.tcp = NULL;

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8009092:	2d10      	cmp	r5, #16
    return NULL;
  }

  conn->last_err = ERR_OK;
  conn->type = t;
  conn->pcb.tcp = NULL;
 8009094:	6043      	str	r3, [r0, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8009096:	d001      	beq.n	800909c <netconn_alloc+0x24>
 8009098:	2d20      	cmp	r5, #32
 800909a:	d11d      	bne.n	80090d8 <netconn_alloc+0x60>
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
    goto free_and_return;
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800909c:	f104 0610 	add.w	r6, r4, #16
 80090a0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80090a4:	4630      	mov	r0, r6
 80090a6:	f005 f8a9 	bl	800e1fc <sys_mbox_new>
 80090aa:	4601      	mov	r1, r0
 80090ac:	b9a0      	cbnz	r0, 80090d8 <netconn_alloc+0x60>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80090ae:	f104 000c 	add.w	r0, r4, #12
 80090b2:	f005 f918 	bl	800e2e6 <sys_sem_new>
 80090b6:	4605      	mov	r5, r0
 80090b8:	b118      	cbz	r0, 80090c2 <netconn_alloc+0x4a>
    sys_mbox_free(&conn->recvmbox);
 80090ba:	4630      	mov	r0, r6
 80090bc:	f005 f8ab 	bl	800e216 <sys_mbox_free>
    goto free_and_return;
 80090c0:	e00a      	b.n	80090d8 <netconn_alloc+0x60>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80090c2:	f104 0014 	add.w	r0, r4, #20
 80090c6:	f005 f90b 	bl	800e2e0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80090ca:	7065      	strb	r5, [r4, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80090cc:	62a7      	str	r7, [r4, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 80090ce:	6265      	str	r5, [r4, #36]	; 0x24
  conn->write_offset = 0;
 80090d0:	6225      	str	r5, [r4, #32]
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 80090d2:	61a5      	str	r5, [r4, #24]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 80090d4:	7725      	strb	r5, [r4, #28]
 80090d6:	e005      	b.n	80090e4 <netconn_alloc+0x6c>
  return conn;
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80090d8:	4621      	mov	r1, r4
 80090da:	2005      	movs	r0, #5
 80090dc:	f001 ff08 	bl	800aef0 <memp_free>
  return NULL;
 80090e0:	2000      	movs	r0, #0
 80090e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  if (conn == NULL) {
    return NULL;
 80090e4:	4620      	mov	r0, r4
  conn->flags = 0;
  return conn;
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  return NULL;
}
 80090e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090e8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80090ec:	3010      	adds	r0, #16
 80090ee:	f005 f8f2 	bl	800e2d6 <sys_mbox_valid>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80090f2:	f104 050c 	add.w	r5, r4, #12
{
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80090f6:	f104 0014 	add.w	r0, r4, #20
 80090fa:	f005 f8ec 	bl	800e2d6 <sys_mbox_valid>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80090fe:	4628      	mov	r0, r5
 8009100:	f005 f935 	bl	800e36e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009104:	4628      	mov	r0, r5
 8009106:	f005 f93a 	bl	800e37e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800910a:	4621      	mov	r1, r4
 800910c:	2005      	movs	r0, #5
}
 800910e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  sys_sem_set_invalid(&conn->op_completed);
#endif

  memp_free(MEMP_NETCONN, conn);
 8009112:	f001 beed 	b.w	800aef0 <memp_free>

08009116 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009116:	b573      	push	{r0, r1, r4, r5, r6, lr}
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009118:	f100 0510 	add.w	r5, r0, #16
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800911c:	4604      	mov	r4, r0
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800911e:	4628      	mov	r0, r5
 8009120:	f005 f8d9 	bl	800e2d6 <sys_mbox_valid>
 8009124:	b300      	cbz	r0, 8009168 <netconn_drain+0x52>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009126:	a901      	add	r1, sp, #4
 8009128:	4628      	mov	r0, r5
 800912a:	f005 f8c4 	bl	800e2b6 <sys_arch_mbox_tryfetch>
 800912e:	3001      	adds	r0, #1
 8009130:	d014      	beq.n	800915c <netconn_drain+0x46>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009132:	7823      	ldrb	r3, [r4, #0]
 8009134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009138:	2b10      	cmp	r3, #16
 800913a:	d10b      	bne.n	8009154 <netconn_drain+0x3e>
        if (mem != NULL) {
 800913c:	9e01      	ldr	r6, [sp, #4]
 800913e:	2e00      	cmp	r6, #0
 8009140:	d0f1      	beq.n	8009126 <netconn_drain+0x10>
          p = (struct pbuf*)mem;
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8009142:	6860      	ldr	r0, [r4, #4]
 8009144:	b110      	cbz	r0, 800914c <netconn_drain+0x36>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8009146:	8931      	ldrh	r1, [r6, #8]
 8009148:	f002 f9c0 	bl	800b4cc <tcp_recved>
          }
          pbuf_free(p);
 800914c:	4630      	mov	r0, r6
 800914e:	f001 ff89 	bl	800b064 <pbuf_free>
 8009152:	e7e8      	b.n	8009126 <netconn_drain+0x10>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8009154:	9801      	ldr	r0, [sp, #4]
 8009156:	f000 fa67 	bl	8009628 <netbuf_delete>
 800915a:	e7e4      	b.n	8009126 <netconn_drain+0x10>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800915c:	4628      	mov	r0, r5
 800915e:	f005 f85a 	bl	800e216 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009162:	4628      	mov	r0, r5
 8009164:	f005 f8bc 	bl	800e2e0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009168:	3414      	adds	r4, #20
 800916a:	4620      	mov	r0, r4
 800916c:	f005 f8b3 	bl	800e2d6 <sys_mbox_valid>
 8009170:	b1c8      	cbz	r0, 80091a6 <netconn_drain+0x90>
      }
      /* drain recvmbox */
      netconn_drain(newconn);
      if (newconn->pcb.tcp != NULL) {
        tcp_abort(newconn->pcb.tcp);
        newconn->pcb.tcp = NULL;
 8009172:	2600      	movs	r6, #0
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009174:	a901      	add	r1, sp, #4
 8009176:	4620      	mov	r0, r4
 8009178:	f005 f89d 	bl	800e2b6 <sys_arch_mbox_tryfetch>
 800917c:	3001      	adds	r0, #1
 800917e:	d00c      	beq.n	800919a <netconn_drain+0x84>
      struct netconn *newconn = (struct netconn *)mem;
 8009180:	9d01      	ldr	r5, [sp, #4]
      /* pcb might be set to NULL already by err_tcp() */
      if (conn->pcb.tcp != NULL) {
        tcp_accepted(conn->pcb.tcp);
      }
      /* drain recvmbox */
      netconn_drain(newconn);
 8009182:	4628      	mov	r0, r5
 8009184:	f7ff ffc7 	bl	8009116 <netconn_drain>
      if (newconn->pcb.tcp != NULL) {
 8009188:	6868      	ldr	r0, [r5, #4]
 800918a:	b110      	cbz	r0, 8009192 <netconn_drain+0x7c>
        tcp_abort(newconn->pcb.tcp);
 800918c:	f002 fd38 	bl	800bc00 <tcp_abort>
        newconn->pcb.tcp = NULL;
 8009190:	606e      	str	r6, [r5, #4]
      }
      netconn_free(newconn);
 8009192:	4628      	mov	r0, r5
 8009194:	f7ff ffa8 	bl	80090e8 <netconn_free>
 8009198:	e7ec      	b.n	8009174 <netconn_drain+0x5e>
    }
    sys_mbox_free(&conn->acceptmbox);
 800919a:	4620      	mov	r0, r4
 800919c:	f005 f83b 	bl	800e216 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80091a0:	4620      	mov	r0, r4
 80091a2:	f005 f89d 	bl	800e2e0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80091a6:	b002      	add	sp, #8
 80091a8:	bd70      	pop	{r4, r5, r6, pc}

080091aa <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80091aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80091ae:	f100 0414 	add.w	r4, r0, #20
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80091b2:	4606      	mov	r6, r0
 80091b4:	4688      	mov	r8, r1
 80091b6:	4617      	mov	r7, r2
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
 80091b8:	4620      	mov	r0, r4
 80091ba:	f005 f88c 	bl	800e2d6 <sys_mbox_valid>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d03b      	beq.n	800923a <accept_function+0x90>
    return ERR_VAL;
  }

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80091c2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80091c4:	7830      	ldrb	r0, [r6, #0]
 80091c6:	f7ff ff57 	bl	8009078 <netconn_alloc>
  if (newconn == NULL) {
 80091ca:	4605      	mov	r5, r0
 80091cc:	b3c0      	cbz	r0, 8009240 <accept_function+0x96>
    return ERR_MEM;
  }
  newconn->pcb.tcp = newpcb;
 80091ce:	f8c0 8004 	str.w	r8, [r0, #4]
  setup_tcp(newconn);
 80091d2:	f7ff fc8d 	bl	8008af0 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80091d6:	4620      	mov	r0, r4
  }
  newconn->pcb.tcp = newpcb;
  setup_tcp(newconn);
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80091d8:	722f      	strb	r7, [r5, #8]

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80091da:	4629      	mov	r1, r5
 80091dc:	f005 f835 	bl	800e24a <sys_mbox_trypost>
 80091e0:	4604      	mov	r4, r0
 80091e2:	b318      	cbz	r0, 800922c <accept_function+0x82>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80091e4:	686c      	ldr	r4, [r5, #4]
    tcp_arg(pcb, NULL);
 80091e6:	2100      	movs	r1, #0
 80091e8:	4620      	mov	r0, r4
 80091ea:	f002 f9aa 	bl	800b542 <tcp_arg>
    tcp_recv(pcb, NULL);
 80091ee:	4620      	mov	r0, r4
 80091f0:	2100      	movs	r1, #0
 80091f2:	f002 f9a8 	bl	800b546 <tcp_recv>
    tcp_sent(pcb, NULL);
 80091f6:	4620      	mov	r0, r4
 80091f8:	2100      	movs	r1, #0
 80091fa:	f002 f9a6 	bl	800b54a <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80091fe:	2200      	movs	r2, #0
 8009200:	4620      	mov	r0, r4
 8009202:	4611      	mov	r1, r2
 8009204:	f002 f9a8 	bl	800b558 <tcp_poll>
    tcp_err(pcb, NULL);
 8009208:	2100      	movs	r1, #0
 800920a:	4620      	mov	r0, r4
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800920c:	f105 0410 	add.w	r4, r5, #16
    struct tcp_pcb* pcb = newconn->pcb.tcp;
    tcp_arg(pcb, NULL);
    tcp_recv(pcb, NULL);
    tcp_sent(pcb, NULL);
    tcp_poll(pcb, NULL, 0);
    tcp_err(pcb, NULL);
 8009210:	f002 f99d 	bl	800b54e <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009214:	2300      	movs	r3, #0
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009216:	4620      	mov	r0, r4
    tcp_recv(pcb, NULL);
    tcp_sent(pcb, NULL);
    tcp_poll(pcb, NULL, 0);
    tcp_err(pcb, NULL);
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009218:	606b      	str	r3, [r5, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800921a:	f004 fffc 	bl	800e216 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800921e:	4620      	mov	r0, r4
 8009220:	f005 f85e 	bl	800e2e0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009224:	4628      	mov	r0, r5
 8009226:	f7ff ff5f 	bl	80090e8 <netconn_free>
 800922a:	e009      	b.n	8009240 <accept_function+0x96>
    return ERR_MEM;
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800922c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800922e:	b14b      	cbz	r3, 8009244 <accept_function+0x9a>
 8009230:	4602      	mov	r2, r0
 8009232:	4601      	mov	r1, r0
 8009234:	4630      	mov	r0, r6
 8009236:	4798      	blx	r3
 8009238:	e004      	b.n	8009244 <accept_function+0x9a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (!sys_mbox_valid(&conn->acceptmbox)) {
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800923a:	f06f 0405 	mvn.w	r4, #5
 800923e:	e001      	b.n	8009244 <accept_function+0x9a>

  /* We have to set the callback here even though
   * the new socket is unknown. conn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  if (newconn == NULL) {
    return ERR_MEM;
 8009240:	f04f 34ff 	mov.w	r4, #4294967295
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  }

  return ERR_OK;
}
 8009244:	4620      	mov	r0, r4
 8009246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800924a <lwip_netconn_do_delconn>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(struct api_msg_msg *msg)
{
 800924a:	b538      	push	{r3, r4, r5, lr}
 800924c:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 800924e:	6800      	ldr	r0, [r0, #0]
 8009250:	7843      	ldrb	r3, [r0, #1]
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009252:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8009256:	d007      	beq.n	8009268 <lwip_netconn_do_delconn+0x1e>
       (state != NETCONN_LISTEN) &&
 8009258:	2b03      	cmp	r3, #3
 800925a:	d102      	bne.n	8009262 <lwip_netconn_do_delconn+0x18>
       (state != NETCONN_CONNECT)) ||
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800925c:	7f03      	ldrb	r3, [r0, #28]
 800925e:	075b      	lsls	r3, r3, #29
 8009260:	d402      	bmi.n	8009268 <lwip_netconn_do_delconn+0x1e>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009262:	23fb      	movs	r3, #251	; 0xfb
 8009264:	7123      	strb	r3, [r4, #4]
 8009266:	e02a      	b.n	80092be <lwip_netconn_do_delconn+0x74>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009268:	2500      	movs	r5, #0
 800926a:	7125      	strb	r5, [r4, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800926c:	f7ff ff53 	bl	8009116 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 8009270:	6820      	ldr	r0, [r4, #0]
 8009272:	6842      	ldr	r2, [r0, #4]
 8009274:	b1ba      	cbz	r2, 80092a6 <lwip_netconn_do_delconn+0x5c>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009276:	7803      	ldrb	r3, [r0, #0]
 8009278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800927c:	2b10      	cmp	r3, #16
 800927e:	d006      	beq.n	800928e <lwip_netconn_do_delconn+0x44>
 8009280:	2b20      	cmp	r3, #32
 8009282:	d10d      	bne.n	80092a0 <lwip_netconn_do_delconn+0x56>
        raw_remove(msg->conn->pcb.raw);
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 8009284:	61d5      	str	r5, [r2, #28]
        udp_remove(msg->conn->pcb.udp);
 8009286:	6840      	ldr	r0, [r0, #4]
 8009288:	f004 fc3c 	bl	800db04 <udp_remove>
        break;
 800928c:	e008      	b.n	80092a0 <lwip_netconn_do_delconn+0x56>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 800928e:	2304      	movs	r3, #4
 8009290:	7043      	strb	r3, [r0, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009292:	2303      	movs	r3, #3
 8009294:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 8009296:	6244      	str	r4, [r0, #36]	; 0x24
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_close_internal(msg->conn);
 800929c:	f7ff bd68 	b.w	8008d70 <lwip_netconn_do_close_internal>
        return;
#endif /* LWIP_TCP */
      default:
        break;
      }
      msg->conn->pcb.tcp = NULL;
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	2200      	movs	r2, #0
 80092a4:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80092a6:	6820      	ldr	r0, [r4, #0]
 80092a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80092aa:	b113      	cbz	r3, 80092b2 <lwip_netconn_do_delconn+0x68>
 80092ac:	2200      	movs	r2, #0
 80092ae:	4611      	mov	r1, r2
 80092b0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80092b2:	6820      	ldr	r0, [r4, #0]
 80092b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80092b6:	b113      	cbz	r3, 80092be <lwip_netconn_do_delconn+0x74>
 80092b8:	2200      	movs	r2, #0
 80092ba:	2102      	movs	r1, #2
 80092bc:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80092be:	6820      	ldr	r0, [r4, #0]
 80092c0:	300c      	adds	r0, #12
 80092c2:	f005 f857 	bl	800e374 <sys_sem_valid>
 80092c6:	b170      	cbz	r0, 80092e6 <lwip_netconn_do_delconn+0x9c>
    TCPIP_APIMSG_ACK(msg);
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	b133      	cbz	r3, 80092da <lwip_netconn_do_delconn+0x90>
 80092cc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80092d0:	320b      	adds	r2, #11
 80092d2:	bfa4      	itt	ge
 80092d4:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 80092d8:	721a      	strbge	r2, [r3, #8]
 80092da:	6820      	ldr	r0, [r4, #0]
  }
}
 80092dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
    TCPIP_APIMSG_ACK(msg);
 80092e0:	300c      	adds	r0, #12
 80092e2:	f005 b83e 	b.w	800e362 <sys_sem_signal>
 80092e6:	bd38      	pop	{r3, r4, r5, pc}

080092e8 <lwip_netconn_do_bind>:
 *            the IP address and port to bind to
 */
void
lwip_netconn_do_bind(struct api_msg_msg *msg)
{
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80092e8:	6803      	ldr	r3, [r0, #0]
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
lwip_netconn_do_bind(struct api_msg_msg *msg)
{
 80092ea:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80092ec:	f993 2008 	ldrsb.w	r2, [r3, #8]
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to bind to
 */
void
lwip_netconn_do_bind(struct api_msg_msg *msg)
{
 80092f0:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80092f2:	f112 0f0b 	cmn.w	r2, #11
 80092f6:	da01      	bge.n	80092fc <lwip_netconn_do_bind+0x14>
    msg->err = msg->conn->last_err;
 80092f8:	7102      	strb	r2, [r0, #4]
 80092fa:	e014      	b.n	8009326 <lwip_netconn_do_bind+0x3e>
  } else {
    msg->err = ERR_VAL;
 80092fc:	22fa      	movs	r2, #250	; 0xfa
 80092fe:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8009300:	6858      	ldr	r0, [r3, #4]
 8009302:	b180      	cbz	r0, 8009326 <lwip_netconn_do_bind+0x3e>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800930a:	2b10      	cmp	r3, #16
 800930c:	d006      	beq.n	800931c <lwip_netconn_do_bind+0x34>
 800930e:	2b20      	cmp	r3, #32
 8009310:	d109      	bne.n	8009326 <lwip_netconn_do_bind+0x3e>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009312:	89a2      	ldrh	r2, [r4, #12]
 8009314:	68a1      	ldr	r1, [r4, #8]
 8009316:	f004 fae5 	bl	800d8e4 <udp_bind>
 800931a:	e003      	b.n	8009324 <lwip_netconn_do_bind+0x3c>
        break;
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800931c:	89a2      	ldrh	r2, [r4, #12]
 800931e:	68a1      	ldr	r1, [r4, #8]
 8009320:	f002 f83e 	bl	800b3a0 <tcp_bind>
 8009324:	7120      	strb	r0, [r4, #4]
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	b133      	cbz	r3, 8009338 <lwip_netconn_do_bind+0x50>
 800932a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800932e:	320b      	adds	r2, #11
 8009330:	bfa4      	itt	ge
 8009332:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 8009336:	721a      	strbge	r2, [r3, #8]
 8009338:	6820      	ldr	r0, [r4, #0]
}
 800933a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800933e:	300c      	adds	r0, #12
 8009340:	f005 b80f 	b.w	800e362 <sys_sem_signal>

08009344 <lwip_netconn_do_connect>:
 *            the IP address and port to connect to
 */
void
lwip_netconn_do_connect(struct api_msg_msg *msg)
{
  if (msg->conn->pcb.tcp == NULL) {
 8009344:	6803      	ldr	r3, [r0, #0]
 * @param msg the api_msg_msg pointing to the connection and containing
 *            the IP address and port to connect to
 */
void
lwip_netconn_do_connect(struct api_msg_msg *msg)
{
 8009346:	b510      	push	{r4, lr}
 8009348:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp == NULL) {
 800934a:	6858      	ldr	r0, [r3, #4]
 800934c:	b908      	cbnz	r0, 8009352 <lwip_netconn_do_connect+0xe>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 800934e:	23f2      	movs	r3, #242	; 0xf2
 8009350:	e032      	b.n	80093b8 <lwip_netconn_do_connect+0x74>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009358:	2a10      	cmp	r2, #16
 800935a:	d007      	beq.n	800936c <lwip_netconn_do_connect+0x28>
 800935c:	2a20      	cmp	r2, #32
 800935e:	d12a      	bne.n	80093b6 <lwip_netconn_do_connect+0x72>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009360:	89a2      	ldrh	r2, [r4, #12]
 8009362:	68a1      	ldr	r1, [r4, #8]
 8009364:	f004 fba2 	bl	800daac <udp_connect>
 8009368:	7120      	strb	r0, [r4, #4]
      break;
 800936a:	e026      	b.n	80093ba <lwip_netconn_do_connect+0x76>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 800936c:	785a      	ldrb	r2, [r3, #1]
 800936e:	2a03      	cmp	r2, #3
 8009370:	d101      	bne.n	8009376 <lwip_netconn_do_connect+0x32>
        msg->err = ERR_ALREADY;
 8009372:	23f7      	movs	r3, #247	; 0xf7
 8009374:	e020      	b.n	80093b8 <lwip_netconn_do_connect+0x74>
      } else if (msg->conn->state != NETCONN_NONE) {
 8009376:	b10a      	cbz	r2, 800937c <lwip_netconn_do_connect+0x38>
        msg->err = ERR_ISCONN;
 8009378:	23f6      	movs	r3, #246	; 0xf6
 800937a:	e01d      	b.n	80093b8 <lwip_netconn_do_connect+0x74>
      } else {
        setup_tcp(msg->conn);
 800937c:	4618      	mov	r0, r3
 800937e:	f7ff fbb7 	bl	8008af0 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009382:	6820      	ldr	r0, [r4, #0]
 8009384:	4b14      	ldr	r3, [pc, #80]	; (80093d8 <lwip_netconn_do_connect+0x94>)
 8009386:	89a2      	ldrh	r2, [r4, #12]
 8009388:	68a1      	ldr	r1, [r4, #8]
 800938a:	6840      	ldr	r0, [r0, #4]
 800938c:	f002 fd20 	bl	800bdd0 <tcp_connect>
 8009390:	7120      	strb	r0, [r4, #4]
          msg->msg.bc.port, lwip_netconn_do_connected);
        if (msg->err == ERR_OK) {
 8009392:	b990      	cbnz	r0, 80093ba <lwip_netconn_do_connect+0x76>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009394:	6822      	ldr	r2, [r4, #0]
          msg->conn->state = NETCONN_CONNECT;
 8009396:	2103      	movs	r1, #3
      } else {
        setup_tcp(msg->conn);
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
          msg->msg.bc.port, lwip_netconn_do_connected);
        if (msg->err == ERR_OK) {
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009398:	7f13      	ldrb	r3, [r2, #28]
          msg->conn->state = NETCONN_CONNECT;
 800939a:	7051      	strb	r1, [r2, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800939c:	0799      	lsls	r1, r3, #30
 800939e:	d504      	bpl.n	80093aa <lwip_netconn_do_connect+0x66>
 80093a0:	f043 0304 	orr.w	r3, r3, #4
 80093a4:	7713      	strb	r3, [r2, #28]
          if (non_blocking) {
            msg->err = ERR_INPROGRESS;
 80093a6:	23fb      	movs	r3, #251	; 0xfb
 80093a8:	e006      	b.n	80093b8 <lwip_netconn_do_connect+0x74>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
          msg->msg.bc.port, lwip_netconn_do_connected);
        if (msg->err == ERR_OK) {
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
          msg->conn->state = NETCONN_CONNECT;
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80093aa:	f023 0304 	bic.w	r3, r3, #4
 80093ae:	7713      	strb	r3, [r2, #28]
          if (non_blocking) {
            msg->err = ERR_INPROGRESS;
          } else {
            msg->conn->current_msg = msg;
 80093b0:	6823      	ldr	r3, [r4, #0]
 80093b2:	625c      	str	r4, [r3, #36]	; 0x24
            UNLOCK_TCPIP_CORE();
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
            LOCK_TCPIP_CORE();
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
 80093b4:	bd10      	pop	{r4, pc}
        }
      }
      break;
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 80093b6:	23fa      	movs	r3, #250	; 0xfa
 80093b8:	7123      	strb	r3, [r4, #4]
      break;
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 80093ba:	6823      	ldr	r3, [r4, #0]
 80093bc:	b133      	cbz	r3, 80093cc <lwip_netconn_do_connect+0x88>
 80093be:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80093c2:	320b      	adds	r2, #11
 80093c4:	bfa4      	itt	ge
 80093c6:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 80093ca:	721a      	strbge	r2, [r3, #8]
 80093cc:	6820      	ldr	r0, [r4, #0]
}
 80093ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      break;
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 80093d2:	300c      	adds	r0, #12
 80093d4:	f004 bfc5 	b.w	800e362 <sys_sem_signal>
 80093d8:	08008b35 	.word	0x08008b35

080093dc <lwip_netconn_do_listen>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(struct api_msg_msg *msg)
{
 80093dc:	b538      	push	{r3, r4, r5, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80093de:	6803      	ldr	r3, [r0, #0]
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(struct api_msg_msg *msg)
{
 80093e0:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80093e2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80093e6:	f112 0f0b 	cmn.w	r2, #11
 80093ea:	da01      	bge.n	80093f0 <lwip_netconn_do_listen+0x14>
    msg->err = msg->conn->last_err;
 80093ec:	7102      	strb	r2, [r0, #4]
 80093ee:	e04c      	b.n	800948a <lwip_netconn_do_listen+0xae>
  } else {
    msg->err = ERR_CONN;
 80093f0:	22f5      	movs	r2, #245	; 0xf5
 80093f2:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80093f4:	6858      	ldr	r0, [r3, #4]
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d047      	beq.n	800948a <lwip_netconn_do_listen+0xae>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009400:	2a10      	cmp	r2, #16
 8009402:	d140      	bne.n	8009486 <lwip_netconn_do_listen+0xaa>
        if (msg->conn->state == NETCONN_NONE) {
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d13f      	bne.n	800948a <lwip_netconn_do_listen+0xae>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800940a:	7e03      	ldrb	r3, [r0, #24]
 800940c:	b10b      	cbz	r3, 8009412 <lwip_netconn_do_listen+0x36>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800940e:	23fa      	movs	r3, #250	; 0xfa
 8009410:	e03a      	b.n	8009488 <lwip_netconn_do_listen+0xac>
#endif /* LWIP_IPV6 */
            {
#if TCP_LISTEN_BACKLOG
              lpcb = tcp_listen_with_backlog(msg->conn->pcb.tcp, msg->msg.lb.backlog);
#else  /* TCP_LISTEN_BACKLOG */
              lpcb = tcp_listen(msg->conn->pcb.tcp);
 8009412:	21ff      	movs	r1, #255	; 0xff
 8009414:	f001 fffe 	bl	800b414 <tcp_listen_with_backlog>
#endif /* TCP_LISTEN_BACKLOG */
            }
            if (lpcb == NULL) {
 8009418:	4605      	mov	r5, r0
 800941a:	b908      	cbnz	r0, 8009420 <lwip_netconn_do_listen+0x44>
              /* in this case, the old pcb is still allocated */
              msg->err = ERR_MEM;
 800941c:	23ff      	movs	r3, #255	; 0xff
 800941e:	e033      	b.n	8009488 <lwip_netconn_do_listen+0xac>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009420:	6820      	ldr	r0, [r4, #0]
 8009422:	3010      	adds	r0, #16
 8009424:	f004 ff57 	bl	800e2d6 <sys_mbox_valid>
 8009428:	b138      	cbz	r0, 800943a <lwip_netconn_do_listen+0x5e>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800942a:	6820      	ldr	r0, [r4, #0]
 800942c:	3010      	adds	r0, #16
 800942e:	f004 fef2 	bl	800e216 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009432:	6820      	ldr	r0, [r4, #0]
 8009434:	3010      	adds	r0, #16
 8009436:	f004 ff53 	bl	800e2e0 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800943a:	2300      	movs	r3, #0
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800943c:	6820      	ldr	r0, [r4, #0]
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
                sys_mbox_set_invalid(&msg->conn->recvmbox);
              }
              msg->err = ERR_OK;
 800943e:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009440:	3014      	adds	r0, #20
 8009442:	f004 ff48 	bl	800e2d6 <sys_mbox_valid>
 8009446:	b930      	cbnz	r0, 8009456 <lwip_netconn_do_listen+0x7a>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009448:	6820      	ldr	r0, [r4, #0]
 800944a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800944e:	3014      	adds	r0, #20
 8009450:	f004 fed4 	bl	800e1fc <sys_mbox_new>
 8009454:	7120      	strb	r0, [r4, #4]
              }
              if (msg->err == ERR_OK) {
 8009456:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800945a:	b96b      	cbnz	r3, 8009478 <lwip_netconn_do_listen+0x9c>
                msg->conn->state = NETCONN_LISTEN;
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	2202      	movs	r2, #2
                msg->conn->pcb.tcp = lpcb;
 8009460:	605d      	str	r5, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009462:	6821      	ldr	r1, [r4, #0]
              msg->err = ERR_OK;
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
              }
              if (msg->err == ERR_OK) {
                msg->conn->state = NETCONN_LISTEN;
 8009464:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009466:	6848      	ldr	r0, [r1, #4]
 8009468:	f002 f86b 	bl	800b542 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800946c:	6823      	ldr	r3, [r4, #0]
 800946e:	490e      	ldr	r1, [pc, #56]	; (80094a8 <lwip_netconn_do_listen+0xcc>)
 8009470:	6858      	ldr	r0, [r3, #4]
 8009472:	f002 f86f 	bl	800b554 <tcp_accept>
 8009476:	e008      	b.n	800948a <lwip_netconn_do_listen+0xae>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 8009478:	4628      	mov	r0, r5
 800947a:	f002 faa3 	bl	800b9c4 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800947e:	6823      	ldr	r3, [r4, #0]
 8009480:	2200      	movs	r2, #0
 8009482:	605a      	str	r2, [r3, #4]
 8009484:	e001      	b.n	800948a <lwip_netconn_do_listen+0xae>
              }
            }
          }
        }
      } else {
        msg->err = ERR_ARG;
 8009486:	23f1      	movs	r3, #241	; 0xf1
 8009488:	7123      	strb	r3, [r4, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	b133      	cbz	r3, 800949c <lwip_netconn_do_listen+0xc0>
 800948e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009492:	320b      	adds	r2, #11
 8009494:	bfa4      	itt	ge
 8009496:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 800949a:	721a      	strbge	r2, [r3, #8]
 800949c:	6820      	ldr	r0, [r4, #0]
}
 800949e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      } else {
        msg->err = ERR_ARG;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80094a2:	300c      	adds	r0, #12
 80094a4:	f004 bf5d 	b.w	800e362 <sys_sem_signal>
 80094a8:	080091ab 	.word	0x080091ab

080094ac <lwip_netconn_do_send>:
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(struct api_msg_msg *msg)
{
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80094ac:	6803      	ldr	r3, [r0, #0]
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(struct api_msg_msg *msg)
{
 80094ae:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80094b0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(struct api_msg_msg *msg)
{
 80094b4:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80094b6:	f112 0f0b 	cmn.w	r2, #11
 80094ba:	da01      	bge.n	80094c0 <lwip_netconn_do_send+0x14>
    msg->err = msg->conn->last_err;
 80094bc:	7102      	strb	r2, [r0, #4]
 80094be:	e016      	b.n	80094ee <lwip_netconn_do_send+0x42>
  } else {
    msg->err = ERR_CONN;
 80094c0:	22f5      	movs	r2, #245	; 0xf5
 80094c2:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80094c4:	6858      	ldr	r0, [r3, #4]
 80094c6:	b190      	cbz	r0, 80094ee <lwip_netconn_do_send+0x42>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	d10d      	bne.n	80094ee <lwip_netconn_do_send+0x42>
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        }
#else /* LWIP_CHECKSUM_ON_COPY */
        if (ip_addr_isany_val(msg->msg.b->addr)) {
 80094d2:	68a1      	ldr	r1, [r4, #8]
 80094d4:	688b      	ldr	r3, [r1, #8]
 80094d6:	b91b      	cbnz	r3, 80094e0 <lwip_netconn_do_send+0x34>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80094d8:	6809      	ldr	r1, [r1, #0]
 80094da:	f004 fae1 	bl	800daa0 <udp_send>
 80094de:	e005      	b.n	80094ec <lwip_netconn_do_send+0x40>
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80094e0:	898b      	ldrh	r3, [r1, #12]
 80094e2:	f101 0208 	add.w	r2, r1, #8
 80094e6:	6809      	ldr	r1, [r1, #0]
 80094e8:	f004 fac1 	bl	800da6e <udp_sendto>
 80094ec:	7120      	strb	r0, [r4, #4]
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	b133      	cbz	r3, 8009500 <lwip_netconn_do_send+0x54>
 80094f2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80094f6:	320b      	adds	r2, #11
 80094f8:	bfa4      	itt	ge
 80094fa:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 80094fe:	721a      	strbge	r2, [r3, #8]
 8009500:	6820      	ldr	r0, [r4, #0]
}
 8009502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      default:
        break;
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009506:	300c      	adds	r0, #12
 8009508:	f004 bf2b 	b.w	800e362 <sys_sem_signal>

0800950c <lwip_netconn_do_recv>:
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(struct api_msg_msg *msg)
{
  msg->err = ERR_OK;
 800950c:	2300      	movs	r3, #0
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(struct api_msg_msg *msg)
{
 800950e:	b570      	push	{r4, r5, r6, lr}
  msg->err = ERR_OK;
 8009510:	7103      	strb	r3, [r0, #4]
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(struct api_msg_msg *msg)
{
 8009512:	4604      	mov	r4, r0
  msg->err = ERR_OK;
  if (msg->conn->pcb.tcp != NULL) {
 8009514:	6803      	ldr	r3, [r0, #0]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	b94a      	cbnz	r2, 800952e <lwip_netconn_do_recv+0x22>
          remaining -= recved;
        } while (remaining != 0);
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	b1db      	cbz	r3, 8009556 <lwip_netconn_do_recv+0x4a>
 800951e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009522:	320b      	adds	r2, #11
 8009524:	bfa4      	itt	ge
 8009526:	f994 2004 	ldrsbge.w	r2, [r4, #4]
 800952a:	721a      	strbge	r2, [r3, #8]
 800952c:	e013      	b.n	8009556 <lwip_netconn_do_recv+0x4a>
void
lwip_netconn_do_recv(struct api_msg_msg *msg)
{
  msg->err = ERR_OK;
  if (msg->conn->pcb.tcp != NULL) {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009534:	2b10      	cmp	r3, #16
 8009536:	d1f0      	bne.n	800951a <lwip_netconn_do_recv+0xe>
      if (msg->conn->pcb.tcp->state == LISTEN) {
        tcp_accepted(msg->conn->pcb.tcp);
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
 8009538:	6885      	ldr	r5, [r0, #8]
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800953a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
          tcp_recved(msg->conn->pcb.tcp, recved);
 800953e:	6823      	ldr	r3, [r4, #0]
      } else
#endif /* TCP_LISTEN_BACKLOG */
      {
        u32_t remaining = msg->msg.r.len;
        do {
          u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8009540:	bf34      	ite	cc
 8009542:	b2ae      	uxthcc	r6, r5
 8009544:	f64f 76ff 	movwcs	r6, #65535	; 0xffff
          tcp_recved(msg->conn->pcb.tcp, recved);
 8009548:	6858      	ldr	r0, [r3, #4]
 800954a:	4631      	mov	r1, r6
 800954c:	f001 ffbe 	bl	800b4cc <tcp_recved>
          remaining -= recved;
        } while (remaining != 0);
 8009550:	1bad      	subs	r5, r5, r6
 8009552:	d1f2      	bne.n	800953a <lwip_netconn_do_recv+0x2e>
 8009554:	e7e1      	b.n	800951a <lwip_netconn_do_recv+0xe>
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009556:	6820      	ldr	r0, [r4, #0]
}
 8009558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          remaining -= recved;
        } while (remaining != 0);
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800955c:	300c      	adds	r0, #12
 800955e:	f004 bf00 	b.w	800e362 <sys_sem_signal>

08009562 <lwip_netconn_do_write>:
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(struct api_msg_msg *msg)
{
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009562:	6803      	ldr	r3, [r0, #0]
 8009564:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009568:	f112 0f0b 	cmn.w	r2, #11
 800956c:	db14      	blt.n	8009598 <lwip_netconn_do_write+0x36>
    msg->err = msg->conn->last_err;
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800956e:	781a      	ldrb	r2, [r3, #0]
 8009570:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8009574:	2a10      	cmp	r2, #16
 8009576:	d10e      	bne.n	8009596 <lwip_netconn_do_write+0x34>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009578:	785a      	ldrb	r2, [r3, #1]
 800957a:	b10a      	cbz	r2, 8009580 <lwip_netconn_do_write+0x1e>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800957c:	22fb      	movs	r2, #251	; 0xfb
 800957e:	e00b      	b.n	8009598 <lwip_netconn_do_write+0x36>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009580:	6859      	ldr	r1, [r3, #4]
 8009582:	b131      	cbz	r1, 8009592 <lwip_netconn_do_write+0x30>
        msg->conn->state = NETCONN_WRITE;
 8009584:	2101      	movs	r1, #1
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
        msg->conn->current_msg = msg;
 8009586:	6258      	str	r0, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8009588:	621a      	str	r2, [r3, #32]
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
 800958a:	4618      	mov	r0, r3
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
        msg->conn->state = NETCONN_WRITE;
 800958c:	7059      	strb	r1, [r3, #1]
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
          LOCK_TCPIP_CORE();
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
        }
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
 800958e:	f7ff bb52 	b.w	8008c36 <lwip_netconn_do_writemore>
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
      } else {
        msg->err = ERR_CONN;
 8009592:	22f5      	movs	r2, #245	; 0xf5
 8009594:	e000      	b.n	8009598 <lwip_netconn_do_write+0x36>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8009596:	22fa      	movs	r2, #250	; 0xfa
 8009598:	7102      	strb	r2, [r0, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800959a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800959e:	320b      	adds	r2, #11
 80095a0:	bfa4      	itt	ge
 80095a2:	f990 2004 	ldrsbge.w	r2, [r0, #4]
 80095a6:	721a      	strbge	r2, [r3, #8]
 80095a8:	6800      	ldr	r0, [r0, #0]
 80095aa:	300c      	adds	r0, #12
 80095ac:	f004 bed9 	b.w	800e362 <sys_sem_signal>

080095b0 <lwip_netconn_do_close>:
 *
 * @param msg the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(struct api_msg_msg *msg)
{
 80095b0:	b510      	push	{r4, lr}
 80095b2:	4604      	mov	r4, r0
#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80095b4:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80095b6:	6843      	ldr	r3, [r0, #4]
 80095b8:	b163      	cbz	r3, 80095d4 <lwip_netconn_do_close+0x24>
 80095ba:	7803      	ldrb	r3, [r0, #0]
 80095bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095c0:	2b10      	cmp	r3, #16
 80095c2:	d107      	bne.n	80095d4 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80095c4:	7a22      	ldrb	r2, [r4, #8]
 */
void
lwip_netconn_do_close(struct api_msg_msg *msg)
{
#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80095c6:	7843      	ldrb	r3, [r0, #1]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80095c8:	2a03      	cmp	r2, #3
 80095ca:	d001      	beq.n	80095d0 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d001      	beq.n	80095d4 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d101      	bne.n	80095d8 <lwip_netconn_do_close+0x28>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80095d4:	23f5      	movs	r3, #245	; 0xf5
 80095d6:	e002      	b.n	80095de <lwip_netconn_do_close+0x2e>
    } else if (state == NETCONN_WRITE) {
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d10e      	bne.n	80095fa <lwip_netconn_do_close+0x4a>
        /* In this case, let the write continue and do not interfere with
           conn->current_msg or conn->state! */
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80095dc:	23fb      	movs	r3, #251	; 0xfb
 80095de:	7123      	strb	r3, [r4, #4]
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 80095e0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80095e4:	330b      	adds	r3, #11
 80095e6:	bfa4      	itt	ge
 80095e8:	f994 3004 	ldrsbge.w	r3, [r4, #4]
 80095ec:	7203      	strbge	r3, [r0, #8]
 80095ee:	6820      	ldr	r0, [r4, #0]
}
 80095f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 80095f4:	300c      	adds	r0, #12
 80095f6:	f004 beb4 	b.w	800e362 <sys_sem_signal>
      }
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
#endif /* LWIP_NETCONN_FULLDUPLEX */
    } else {
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80095fa:	07d3      	lsls	r3, r2, #31
 80095fc:	d501      	bpl.n	8009602 <lwip_netconn_do_close+0x52>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 80095fe:	f7ff fd8a 	bl	8009116 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009602:	6820      	ldr	r0, [r4, #0]
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009604:	2304      	movs	r3, #4
      msg->conn->current_msg = msg;
 8009606:	6244      	str	r4, [r0, #36]	; 0x24
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009608:	7043      	strb	r3, [r0, #1]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800960a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
        LOCK_TCPIP_CORE();
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
 800960e:	f7ff bbaf 	b.w	8008d70 <lwip_netconn_do_close_internal>

08009612 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8009612:	b508      	push	{r3, lr}
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009614:	2004      	movs	r0, #4
 8009616:	f001 fc5f 	bl	800aed8 <memp_malloc>
  if (buf != NULL) {
 800961a:	b120      	cbz	r0, 8009626 <netbuf_new+0x14>
    buf->p = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	6003      	str	r3, [r0, #0]
    buf->ptr = NULL;
 8009620:	6043      	str	r3, [r0, #4]
    ip_addr_set_zero(&buf->addr);
 8009622:	6083      	str	r3, [r0, #8]
    buf->port = 0;
 8009624:	8183      	strh	r3, [r0, #12]
#endif /* LWIP_NETBUF_RECVINFO || LWIP_CHECKSUM_ON_COPY */
    return buf;
  } else {
    return NULL;
  }
}
 8009626:	bd08      	pop	{r3, pc}

08009628 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009628:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800962a:	4604      	mov	r4, r0
 800962c:	b160      	cbz	r0, 8009648 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 800962e:	6800      	ldr	r0, [r0, #0]
 8009630:	b120      	cbz	r0, 800963c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8009632:	f001 fd17 	bl	800b064 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009636:	2300      	movs	r3, #0
 8009638:	6063      	str	r3, [r4, #4]
 800963a:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800963c:	4621      	mov	r1, r4
 800963e:	2004      	movs	r0, #4
  }
}
 8009640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (buf != NULL) {
    if (buf->p != NULL) {
      pbuf_free(buf->p);
      buf->p = buf->ptr = NULL;
    }
    memp_free(MEMP_NETBUF, buf);
 8009644:	f001 bc54 	b.w	800aef0 <memp_free>
 8009648:	bd10      	pop	{r4, pc}

0800964a <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800964a:	b570      	push	{r4, r5, r6, lr}
 800964c:	460e      	mov	r6, r1
 800964e:	4615      	mov	r5, r2
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8009650:	4604      	mov	r4, r0
 8009652:	b1a0      	cbz	r0, 800967e <netbuf_ref+0x34>
  if (buf->p != NULL) {
 8009654:	6800      	ldr	r0, [r0, #0]
 8009656:	b108      	cbz	r0, 800965c <netbuf_ref+0x12>
    pbuf_free(buf->p);
 8009658:	f001 fd04 	bl	800b064 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800965c:	2100      	movs	r1, #0
 800965e:	2202      	movs	r2, #2
 8009660:	4608      	mov	r0, r1
 8009662:	f001 fd1f 	bl	800b0a4 <pbuf_alloc>
 8009666:	6020      	str	r0, [r4, #0]
  if (buf->p == NULL) {
 8009668:	b918      	cbnz	r0, 8009672 <netbuf_ref+0x28>
    buf->ptr = NULL;
 800966a:	6060      	str	r0, [r4, #4]
    return ERR_MEM;
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	bd70      	pop	{r4, r5, r6, pc}
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8009672:	6046      	str	r6, [r0, #4]
  buf->p->len = buf->p->tot_len = size;
 8009674:	8105      	strh	r5, [r0, #8]
 8009676:	8145      	strh	r5, [r0, #10]
  buf->ptr = buf->p;
 8009678:	6060      	str	r0, [r4, #4]
  return ERR_OK;
 800967a:	2000      	movs	r0, #0
 800967c:	bd70      	pop	{r4, r5, r6, pc}
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800967e:	f06f 000e 	mvn.w	r0, #14
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  buf->p->len = buf->p->tot_len = size;
  buf->ptr = buf->p;
  return ERR_OK;
}
 8009682:	bd70      	pop	{r4, r5, r6, pc}

08009684 <netbuf_data>:
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8009684:	b150      	cbz	r0, 800969c <netbuf_data+0x18>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009686:	b149      	cbz	r1, 800969c <netbuf_data+0x18>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8009688:	b142      	cbz	r2, 800969c <netbuf_data+0x18>

  if (buf->ptr == NULL) {
 800968a:	6843      	ldr	r3, [r0, #4]
 800968c:	b14b      	cbz	r3, 80096a2 <netbuf_data+0x1e>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8009692:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8009694:	2000      	movs	r0, #0

  if (buf->ptr == NULL) {
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
 8009696:	895b      	ldrh	r3, [r3, #10]
 8009698:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 800969a:	4770      	bx	lr
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800969c:	f06f 000e 	mvn.w	r0, #14
 80096a0:	4770      	bx	lr
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);

  if (buf->ptr == NULL) {
    return ERR_BUF;
 80096a2:	f06f 0001 	mvn.w	r0, #1
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 80096a6:	4770      	bx	lr

080096a8 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80096a8:	4b19      	ldr	r3, [pc, #100]	; (8009710 <tcpip_thread+0x68>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80096ac:	b507      	push	{r0, r1, r2, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80096ae:	b113      	cbz	r3, 80096b6 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 80096b0:	4a18      	ldr	r2, [pc, #96]	; (8009714 <tcpip_thread+0x6c>)
 80096b2:	6810      	ldr	r0, [r2, #0]
 80096b4:	4798      	blx	r3
  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
 80096b6:	a901      	add	r1, sp, #4
 80096b8:	4817      	ldr	r0, [pc, #92]	; (8009718 <tcpip_thread+0x70>)
 80096ba:	f001 fa69 	bl	800ab90 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
    if (msg == NULL) {
 80096be:	9b01      	ldr	r3, [sp, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0f8      	beq.n	80096b6 <tcpip_thread+0xe>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
      continue;
    }
    switch (msg->type) {
 80096c4:	781a      	ldrb	r2, [r3, #0]
 80096c6:	2a03      	cmp	r2, #3
 80096c8:	d8f5      	bhi.n	80096b6 <tcpip_thread+0xe>
 80096ca:	e8df f002 	tbb	[pc, r2]
 80096ce:	0602      	.short	0x0602
 80096d0:	1d15      	.short	0x1d15
#if LWIP_NETCONN || LWIP_SOCKET
    case TCPIP_MSG_API:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
      msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
 80096d2:	6898      	ldr	r0, [r3, #8]
 80096d4:	6803      	ldr	r3, [r0, #0]
 80096d6:	3004      	adds	r0, #4
 80096d8:	e7ec      	b.n	80096b4 <tcpip_thread+0xc>

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80096da:	68d9      	ldr	r1, [r3, #12]
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 80096dc:	6898      	ldr	r0, [r3, #8]

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
#if LWIP_ETHERNET
      if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80096de:	f891 2033 	ldrb.w	r2, [r1, #51]	; 0x33
 80096e2:	f012 0f18 	tst.w	r2, #24
 80096e6:	d002      	beq.n	80096ee <tcpip_thread+0x46>
        ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
 80096e8:	f004 fcd4 	bl	800e094 <ethernet_input>
 80096ec:	e001      	b.n	80096f2 <tcpip_thread+0x4a>
      } else
#endif /* LWIP_ETHERNET */
      ip_input(msg->msg.inp.p, msg->msg.inp.netif);
 80096ee:	f001 f92b 	bl	800a948 <ip_input>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80096f2:	9901      	ldr	r1, [sp, #4]
 80096f4:	2007      	movs	r0, #7
 80096f6:	e004      	b.n	8009702 <tcpip_thread+0x5a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80096f8:	68d8      	ldr	r0, [r3, #12]
 80096fa:	689a      	ldr	r2, [r3, #8]
 80096fc:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80096fe:	9901      	ldr	r1, [sp, #4]
 8009700:	2006      	movs	r0, #6
 8009702:	f001 fbf5 	bl	800aef0 <memp_free>
      break;
 8009706:	e7d6      	b.n	80096b6 <tcpip_thread+0xe>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	68d8      	ldr	r0, [r3, #12]
 800970c:	4790      	blx	r2
      break;
 800970e:	e7d2      	b.n	80096b6 <tcpip_thread+0xe>
 8009710:	20042dbc 	.word	0x20042dbc
 8009714:	20042db8 	.word	0x20042db8
 8009718:	20042db4 	.word	0x20042db4

0800971c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	4606      	mov	r6, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid_val(mbox)) {
 8009720:	480e      	ldr	r0, [pc, #56]	; (800975c <tcpip_input+0x40>)
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009722:	460d      	mov	r5, r1
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid_val(mbox)) {
 8009724:	f004 fdd7 	bl	800e2d6 <sys_mbox_valid>
 8009728:	b190      	cbz	r0, 8009750 <tcpip_input+0x34>
    return ERR_VAL;
  }
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800972a:	2007      	movs	r0, #7
 800972c:	f001 fbd4 	bl	800aed8 <memp_malloc>
  if (msg == NULL) {
 8009730:	4604      	mov	r4, r0
 8009732:	b180      	cbz	r0, 8009756 <tcpip_input+0x3a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8009734:	2301      	movs	r3, #1
  msg->msg.inp.p = p;
 8009736:	6086      	str	r6, [r0, #8]
  msg->msg.inp.netif = inp;
 8009738:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800973a:	4601      	mov	r1, r0
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  if (msg == NULL) {
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800973c:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800973e:	4807      	ldr	r0, [pc, #28]	; (800975c <tcpip_input+0x40>)
 8009740:	f004 fd83 	bl	800e24a <sys_mbox_trypost>
 8009744:	b148      	cbz	r0, 800975a <tcpip_input+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009746:	4621      	mov	r1, r4
 8009748:	2007      	movs	r0, #7
 800974a:	f001 fbd1 	bl	800aef0 <memp_free>
 800974e:	e002      	b.n	8009756 <tcpip_input+0x3a>
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  if (!sys_mbox_valid_val(mbox)) {
    return ERR_VAL;
 8009750:	f06f 0005 	mvn.w	r0, #5
 8009754:	bd70      	pop	{r4, r5, r6, pc}
  }
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  if (msg == NULL) {
    return ERR_MEM;
 8009756:	f04f 30ff 	mov.w	r0, #4294967295
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800975a:	bd70      	pop	{r4, r5, r6, pc}
 800975c:	20042db4 	.word	0x20042db4

08009760 <tcpip_apimsg>:
tcpip_apimsg(struct api_msg *apimsg)
{
  TCPIP_MSG_VAR_DECLARE(msg);
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
 8009760:	23fa      	movs	r3, #250	; 0xfa
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_apimsg(struct api_msg *apimsg)
{
 8009762:	b530      	push	{r4, r5, lr}
 8009764:	4604      	mov	r4, r0
 8009766:	b085      	sub	sp, #20
  TCPIP_MSG_VAR_DECLARE(msg);
#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->msg.err = ERR_VAL;
 8009768:	7203      	strb	r3, [r0, #8]
#endif

  if (sys_mbox_valid_val(mbox)) {
 800976a:	480c      	ldr	r0, [pc, #48]	; (800979c <tcpip_apimsg+0x3c>)
 800976c:	f004 fdb3 	bl	800e2d6 <sys_mbox_valid>
 8009770:	b178      	cbz	r0, 8009792 <tcpip_apimsg+0x32>
    TCPIP_MSG_VAR_ALLOC(msg);
    TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 8009772:	2500      	movs	r5, #0
#if LWIP_NETCONN_SEM_PER_THREAD
    apimsg->msg.op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
    LWIP_ASSERT("netconn semaphore not initialized",
      sys_sem_valid(apimsg->msg.op_completed_sem));
#endif
    sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 8009774:	4669      	mov	r1, sp
 8009776:	4809      	ldr	r0, [pc, #36]	; (800979c <tcpip_apimsg+0x3c>)
  apimsg->msg.err = ERR_VAL;
#endif

  if (sys_mbox_valid_val(mbox)) {
    TCPIP_MSG_VAR_ALLOC(msg);
    TCPIP_MSG_VAR_REF(msg).type = TCPIP_MSG_API;
 8009778:	f88d 5000 	strb.w	r5, [sp]
    TCPIP_MSG_VAR_REF(msg).msg.apimsg = apimsg;
 800977c:	9402      	str	r4, [sp, #8]
#if LWIP_NETCONN_SEM_PER_THREAD
    apimsg->msg.op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
    LWIP_ASSERT("netconn semaphore not initialized",
      sys_sem_valid(apimsg->msg.op_completed_sem));
#endif
    sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
 800977e:	f004 fd54 	bl	800e22a <sys_mbox_post>
    sys_arch_sem_wait(LWIP_API_MSG_SEM(&apimsg->msg), 0);
 8009782:	6860      	ldr	r0, [r4, #4]
 8009784:	4629      	mov	r1, r5
 8009786:	300c      	adds	r0, #12
 8009788:	f004 fdcb 	bl	800e322 <sys_arch_sem_wait>
    TCPIP_MSG_VAR_FREE(msg);
    return apimsg->msg.err;
 800978c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8009790:	e001      	b.n	8009796 <tcpip_apimsg+0x36>
  }
  return ERR_VAL;
 8009792:	f06f 0005 	mvn.w	r0, #5
}
 8009796:	b005      	add	sp, #20
 8009798:	bd30      	pop	{r4, r5, pc}
 800979a:	bf00      	nop
 800979c:	20042db4 	.word	0x20042db4

080097a0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80097a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097a2:	4605      	mov	r5, r0
 80097a4:	460c      	mov	r4, r1
  lwip_init();
 80097a6:	f000 f876 	bl	8009896 <lwip_init>

  tcpip_init_done = initfunc;
 80097aa:	4b09      	ldr	r3, [pc, #36]	; (80097d0 <tcpip_init+0x30>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80097ac:	2105      	movs	r1, #5
 80097ae:	4809      	ldr	r0, [pc, #36]	; (80097d4 <tcpip_init+0x34>)
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  lwip_init();

  tcpip_init_done = initfunc;
 80097b0:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80097b2:	4b09      	ldr	r3, [pc, #36]	; (80097d8 <tcpip_init+0x38>)
 80097b4:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80097b6:	f004 fd21 	bl	800e1fc <sys_mbox_new>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80097ba:	2305      	movs	r3, #5
 80097bc:	2200      	movs	r2, #0
 80097be:	4907      	ldr	r1, [pc, #28]	; (80097dc <tcpip_init+0x3c>)
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097c6:	4806      	ldr	r0, [pc, #24]	; (80097e0 <tcpip_init+0x40>)
 80097c8:	f004 fde2 	bl	800e390 <sys_thread_new>
}
 80097cc:	b003      	add	sp, #12
 80097ce:	bd30      	pop	{r4, r5, pc}
 80097d0:	20042dbc 	.word	0x20042dbc
 80097d4:	20042db4 	.word	0x20042db4
 80097d8:	20042db8 	.word	0x20042db8
 80097dc:	080096a9 	.word	0x080096a9
 80097e0:	0802c9cd 	.word	0x0802c9cd

080097e4 <lwip_htons>:
 80097e4:	ba40      	rev16	r0, r0
 80097e6:	b280      	uxth	r0, r0
 80097e8:	4770      	bx	lr

080097ea <lwip_ntohs>:
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  return lwip_htons(n);
 80097ea:	ba40      	rev16	r0, r0
}
 80097ec:	b280      	uxth	r0, r0
 80097ee:	4770      	bx	lr

080097f0 <lwip_htonl>:
{
  return ((n & 0xff) << 24) |
    ((n & 0xff00) << 8) |
    ((n & 0xff0000UL) >> 8) |
    ((n & 0xff000000UL) >> 24);
}
 80097f0:	ba00      	rev	r0, r0
 80097f2:	4770      	bx	lr

080097f4 <lwip_ntohl>:
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  return lwip_htonl(n);
 80097f4:	f7ff bffc 	b.w	80097f0 <lwip_htonl>

080097f8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80097f8:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80097fa:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80097fc:	f010 0401 	ands.w	r4, r0, #1
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8009800:	f8ad 3006 	strh.w	r3, [sp, #6]
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009804:	d006      	beq.n	8009814 <lwip_standard_chksum+0x1c>
 8009806:	4299      	cmp	r1, r3
 8009808:	dd10      	ble.n	800982c <lwip_standard_chksum+0x34>
    ((u8_t *)&t)[1] = *pb++;
 800980a:	7803      	ldrb	r3, [r0, #0]
    len--;
 800980c:	3901      	subs	r1, #1
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
    ((u8_t *)&t)[1] = *pb++;
 800980e:	3001      	adds	r0, #1
 8009810:	f88d 3007 	strb.w	r3, [sp, #7]
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
  u32_t sum = 0;
 8009814:	2300      	movs	r3, #0
    len--;
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8009816:	2901      	cmp	r1, #1
 8009818:	dd04      	ble.n	8009824 <lwip_standard_chksum+0x2c>
    sum += *ps++;
 800981a:	f830 2b02 	ldrh.w	r2, [r0], #2
    len -= 2;
 800981e:	3902      	subs	r1, #2
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
    sum += *ps++;
 8009820:	4413      	add	r3, r2
 8009822:	e7f8      	b.n	8009816 <lwip_standard_chksum+0x1e>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009824:	bf04      	itt	eq
 8009826:	7802      	ldrbeq	r2, [r0, #0]
 8009828:	f88d 2006 	strbeq.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800982c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8009830:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009832:	b298      	uxth	r0, r3
 8009834:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8009838:	b29a      	uxth	r2, r3
 800983a:	eb02 4013 	add.w	r0, r2, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800983e:	b124      	cbz	r4, 800984a <lwip_standard_chksum+0x52>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009840:	0203      	lsls	r3, r0, #8
 8009842:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009846:	b29b      	uxth	r3, r3
 8009848:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800984a:	b280      	uxth	r0, r0
 800984c:	b002      	add	sp, #8
 800984e:	bd10      	pop	{r4, pc}

08009850 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009850:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
 8009852:	2500      	movs	r5, #0
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009854:	4606      	mov	r6, r0
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 8009856:	462c      	mov	r4, r5
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
 8009858:	b1a6      	cbz	r6, 8009884 <inet_chksum_pbuf+0x34>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800985a:	8971      	ldrh	r1, [r6, #10]
 800985c:	6870      	ldr	r0, [r6, #4]
 800985e:	f7ff ffcb 	bl	80097f8 <lwip_standard_chksum>
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8009862:	8973      	ldrh	r3, [r6, #10]
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009864:	4420      	add	r0, r4
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8009866:	07db      	lsls	r3, r3, #31

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
 8009868:	b284      	uxth	r4, r0
 800986a:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 800986e:	d507      	bpl.n	8009880 <inet_chksum_pbuf+0x30>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8009870:	0223      	lsls	r3, r4, #8
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
      swapped = 1 - swapped;
 8009872:	f1c5 0501 	rsb	r5, r5, #1
      acc = SWAP_BYTES_IN_WORD(acc);
 8009876:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800987a:	b29b      	uxth	r3, r3
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
    acc += LWIP_CHKSUM(q->payload, q->len);
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
      swapped = 1 - swapped;
 800987c:	b2ed      	uxtb	r5, r5
      acc = SWAP_BYTES_IN_WORD(acc);
 800987e:	431c      	orrs	r4, r3
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  swapped = 0;
  for (q = p; q != NULL; q = q->next) {
 8009880:	6836      	ldr	r6, [r6, #0]
 8009882:	e7e9      	b.n	8009858 <inet_chksum_pbuf+0x8>
      swapped = 1 - swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8009884:	b125      	cbz	r5, 8009890 <inet_chksum_pbuf+0x40>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009886:	0223      	lsls	r3, r4, #8
 8009888:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800988c:	b29b      	uxth	r3, r3
 800988e:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8009890:	43e0      	mvns	r0, r4
}
 8009892:	b280      	uxth	r0, r0
 8009894:	bd70      	pop	{r4, r5, r6, pc}

08009896 <lwip_init>:
/**
 * Initialize all modules.
 */
void
lwip_init(void)
{
 8009896:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009898:	f004 fd74 	bl	800e384 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800989c:	f001 f9aa 	bl	800abf4 <mem_init>
  memp_init();
 80098a0:	f001 fb06 	bl	800aeb0 <memp_init>
  pbuf_init();
  netif_init();
 80098a4:	f001 fb39 	bl	800af1a <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80098a8:	f003 ff7d 	bl	800d7a6 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80098ac:	f001 fd76 	bl	800b39c <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80098b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80098b4:	f001 b926 	b.w	800ab04 <sys_timeouts_init>

080098b8 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 80098b8:	7b03      	ldrb	r3, [r0, #12]
 80098ba:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 80098bc:	bf1f      	itttt	ne
 80098be:	2300      	movne	r3, #0
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
    dhcp->state = new_state;
 80098c0:	7301      	strbne	r1, [r0, #12]
    dhcp->tries = 0;
 80098c2:	7343      	strbne	r3, [r0, #13]
    dhcp->request_timeout = 0;
 80098c4:	8343      	strhne	r3, [r0, #26]
 80098c6:	4770      	bx	lr

080098c8 <dhcp_option>:
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80098c8:	8b03      	ldrh	r3, [r0, #24]
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 80098ca:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80098cc:	6944      	ldr	r4, [r0, #20]
 80098ce:	1c5d      	adds	r5, r3, #1
 80098d0:	4423      	add	r3, r4
 80098d2:	8305      	strh	r5, [r0, #24]
 80098d4:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80098d8:	8b03      	ldrh	r3, [r0, #24]
 80098da:	6941      	ldr	r1, [r0, #20]
 80098dc:	1c5c      	adds	r4, r3, #1
 80098de:	440b      	add	r3, r1
 80098e0:	8304      	strh	r4, [r0, #24]
 80098e2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 80098e6:	bd30      	pop	{r4, r5, pc}

080098e8 <dhcp_option_short>:
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80098e8:	8b03      	ldrh	r3, [r0, #24]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80098ea:	6942      	ldr	r2, [r0, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 80098ec:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80098ee:	1c5c      	adds	r4, r3, #1
 80098f0:	4413      	add	r3, r2
 80098f2:	0a0a      	lsrs	r2, r1, #8
 80098f4:	8304      	strh	r4, [r0, #24]
 80098f6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 80098fa:	8b03      	ldrh	r3, [r0, #24]
 80098fc:	6942      	ldr	r2, [r0, #20]
 80098fe:	1c5c      	adds	r4, r3, #1
 8009900:	4413      	add	r3, r2
 8009902:	8304      	strh	r4, [r0, #24]
 8009904:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8009908:	bd10      	pop	{r4, pc}

0800990a <dhcp_option_long>:
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800990a:	8b03      	ldrh	r3, [r0, #24]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800990c:	6942      	ldr	r2, [r0, #20]
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800990e:	b510      	push	{r4, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8009910:	1c5c      	adds	r4, r3, #1
 8009912:	4413      	add	r3, r2
 8009914:	0e0a      	lsrs	r2, r1, #24
 8009916:	8304      	strh	r4, [r0, #24]
 8009918:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800991c:	8b03      	ldrh	r3, [r0, #24]
 800991e:	6942      	ldr	r2, [r0, #20]
 8009920:	1c5c      	adds	r4, r3, #1
 8009922:	4413      	add	r3, r2
 8009924:	0c0a      	lsrs	r2, r1, #16
 8009926:	8304      	strh	r4, [r0, #24]
 8009928:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800992c:	8b03      	ldrh	r3, [r0, #24]
 800992e:	6942      	ldr	r2, [r0, #20]
 8009930:	1c5c      	adds	r4, r3, #1
 8009932:	4413      	add	r3, r2
 8009934:	0a0a      	lsrs	r2, r1, #8
 8009936:	8304      	strh	r4, [r0, #24]
 8009938:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800993c:	8b03      	ldrh	r3, [r0, #24]
 800993e:	6942      	ldr	r2, [r0, #20]
 8009940:	1c5c      	adds	r4, r3, #1
 8009942:	4413      	add	r3, r2
 8009944:	8304      	strh	r4, [r0, #24]
 8009946:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 800994a:	bd10      	pop	{r4, pc}

0800994c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800994c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009950:	460c      	mov	r4, r1
 8009952:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009954:	4607      	mov	r7, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	f000 8098 	beq.w	8009a8c <dhcp_create_msg+0x140>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800995c:	2900      	cmp	r1, #0
 800995e:	f000 8099 	beq.w	8009a94 <dhcp_create_msg+0x148>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8009962:	2200      	movs	r2, #0
 8009964:	f44f 719a 	mov.w	r1, #308	; 0x134
 8009968:	4610      	mov	r0, r2
 800996a:	f001 fb9b 	bl	800b0a4 <pbuf_alloc>
 800996e:	6120      	str	r0, [r4, #16]
  if (dhcp->p_out == NULL) {
 8009970:	2800      	cmp	r0, #0
 8009972:	f000 8093 	beq.w	8009a9c <dhcp_create_msg+0x150>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
 8009976:	2e03      	cmp	r6, #3
 8009978:	d007      	beq.n	800998a <dhcp_create_msg+0x3e>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800997a:	7b63      	ldrb	r3, [r4, #13]
 800997c:	4d49      	ldr	r5, [pc, #292]	; (8009aa4 <dhcp_create_msg+0x158>)
 800997e:	b913      	cbnz	r3, 8009986 <dhcp_create_msg+0x3a>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8009980:	f007 ff56 	bl	8011830 <rand>
 8009984:	6028      	str	r0, [r5, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8009986:	682b      	ldr	r3, [r5, #0]
 8009988:	6023      	str	r3, [r4, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800998a:	6923      	ldr	r3, [r4, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
 800998c:	2500      	movs	r5, #0
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800998e:	685a      	ldr	r2, [r3, #4]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8009990:	2301      	movs	r3, #1
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8009992:	6162      	str	r2, [r4, #20]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8009994:	7013      	strb	r3, [r2, #0]
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8009996:	6962      	ldr	r2, [r4, #20]
 8009998:	7053      	strb	r3, [r2, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800999a:	6963      	ldr	r3, [r4, #20]
 800999c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80099a0:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 80099a2:	6963      	ldr	r3, [r4, #20]
 80099a4:	70dd      	strb	r5, [r3, #3]
  dhcp->msg_out->xid = htonl(dhcp->xid);
 80099a6:	6820      	ldr	r0, [r4, #0]
 80099a8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80099ac:	f7ff ff20 	bl	80097f0 <lwip_htonl>
  dhcp->msg_out->secs = 0;
 80099b0:	6963      	ldr	r3, [r4, #20]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80099b2:	2e04      	cmp	r6, #4
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
  dhcp->msg_out->xid = htonl(dhcp->xid);
 80099b4:	f8c8 0004 	str.w	r0, [r8, #4]
  dhcp->msg_out->secs = 0;
 80099b8:	721d      	strb	r5, [r3, #8]
 80099ba:	725d      	strb	r5, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 80099bc:	729d      	strb	r5, [r3, #10]
 80099be:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80099c0:	731d      	strb	r5, [r3, #12]
 80099c2:	735d      	strb	r5, [r3, #13]
 80099c4:	739d      	strb	r5, [r3, #14]
 80099c6:	73dd      	strb	r5, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80099c8:	d008      	beq.n	80099dc <dhcp_create_msg+0x90>
 80099ca:	1ff2      	subs	r2, r6, #7
 80099cc:	2a01      	cmp	r2, #1
 80099ce:	d905      	bls.n	80099dc <dhcp_create_msg+0x90>
 80099d0:	2e03      	cmp	r6, #3
 80099d2:	d105      	bne.n	80099e0 <dhcp_create_msg+0x94>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80099d4:	7b22      	ldrb	r2, [r4, #12]
 80099d6:	3a04      	subs	r2, #4
 80099d8:	2a01      	cmp	r2, #1
 80099da:	d801      	bhi.n	80099e0 <dhcp_create_msg+0x94>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 80099e0:	2200      	movs	r2, #0
 80099e2:	741a      	strb	r2, [r3, #16]
 80099e4:	745a      	strb	r2, [r3, #17]
 80099e6:	749a      	strb	r2, [r3, #18]
 80099e8:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 80099ea:	751a      	strb	r2, [r3, #20]
 80099ec:	755a      	strb	r2, [r3, #21]
 80099ee:	759a      	strb	r2, [r3, #22]
 80099f0:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80099f2:	761a      	strb	r2, [r3, #24]
 80099f4:	765a      	strb	r2, [r3, #25]
 80099f6:	769a      	strb	r2, [r3, #26]
 80099f8:	76da      	strb	r2, [r3, #27]
 80099fa:	b291      	uxth	r1, r2
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80099fc:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
 8009a00:	6963      	ldr	r3, [r4, #20]
 8009a02:	4288      	cmp	r0, r1
 8009a04:	d905      	bls.n	8009a12 <dhcp_create_msg+0xc6>
 8009a06:	2905      	cmp	r1, #5
 8009a08:	d803      	bhi.n	8009a12 <dhcp_create_msg+0xc6>
 8009a0a:	18b9      	adds	r1, r7, r2
 8009a0c:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
 8009a10:	e000      	b.n	8009a14 <dhcp_create_msg+0xc8>
 8009a12:	2100      	movs	r1, #0
 8009a14:	4413      	add	r3, r2
 8009a16:	3201      	adds	r2, #1
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009a18:	2a10      	cmp	r2, #16
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8009a1a:	7719      	strb	r1, [r3, #28]
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8009a1c:	d1ed      	bne.n	80099fa <dhcp_create_msg+0xae>
 8009a1e:	2300      	movs	r3, #0
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 8009a20:	4619      	mov	r1, r3
 8009a22:	6962      	ldr	r2, [r4, #20]
 8009a24:	441a      	add	r2, r3
 8009a26:	3301      	adds	r3, #1
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8009a28:	2b40      	cmp	r3, #64	; 0x40
    dhcp->msg_out->sname[i] = 0;
 8009a2a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8009a2e:	d1f8      	bne.n	8009a22 <dhcp_create_msg+0xd6>
 8009a30:	2200      	movs	r2, #0
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 8009a32:	4610      	mov	r0, r2
 8009a34:	6963      	ldr	r3, [r4, #20]
 8009a36:	1899      	adds	r1, r3, r2
 8009a38:	3201      	adds	r2, #1
 8009a3a:	2300      	movs	r3, #0
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8009a3c:	2a80      	cmp	r2, #128	; 0x80
    dhcp->msg_out->file[i] = 0;
 8009a3e:	f881 006c 	strb.w	r0, [r1, #108]	; 0x6c
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8009a42:	d1f7      	bne.n	8009a34 <dhcp_create_msg+0xe8>
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8009a44:	6962      	ldr	r2, [r4, #20]
 8009a46:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009a4a:	2163      	movs	r1, #99	; 0x63
 8009a4c:	f882 00ed 	strb.w	r0, [r2, #237]	; 0xed
 8009a50:	2053      	movs	r0, #83	; 0x53
 8009a52:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
 8009a56:	f882 00ee 	strb.w	r0, [r2, #238]	; 0xee
 8009a5a:	f882 10ef 	strb.w	r1, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
 8009a5e:	8323      	strh	r3, [r4, #24]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8009a60:	6962      	ldr	r2, [r4, #20]
 8009a62:	441a      	add	r2, r3
 8009a64:	f882 30f0 	strb.w	r3, [r2, #240]	; 0xf0
 8009a68:	3301      	adds	r3, #1
    dhcp->msg_out->file[i] = 0;
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  dhcp->options_out_len = 0;
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8009a6a:	2b44      	cmp	r3, #68	; 0x44
 8009a6c:	d1f8      	bne.n	8009a60 <dhcp_create_msg+0x114>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8009a6e:	4620      	mov	r0, r4
 8009a70:	2201      	movs	r2, #1
 8009a72:	2135      	movs	r1, #53	; 0x35
 8009a74:	f7ff ff28 	bl	80098c8 <dhcp_option>
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009a78:	8b23      	ldrh	r3, [r4, #24]
 8009a7a:	6962      	ldr	r2, [r4, #20]
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
 8009a7c:	2000      	movs	r0, #0
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009a7e:	1c59      	adds	r1, r3, #1
 8009a80:	4413      	add	r3, r2
 8009a82:	8321      	strh	r1, [r4, #24]
 8009a84:	f883 60f0 	strb.w	r6, [r3, #240]	; 0xf0
 8009a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009a8c:	f06f 000e 	mvn.w	r0, #14
 8009a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8009a94:	f06f 0005 	mvn.w	r0, #5
 8009a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  if (dhcp->p_out == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa4:	20042dc0 	.word	0x20042dc0

08009aa8 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8009aa8:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8009aaa:	4604      	mov	r4, r0
 8009aac:	b130      	cbz	r0, 8009abc <dhcp_delete_msg+0x14>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
 8009aae:	6900      	ldr	r0, [r0, #16]
 8009ab0:	b108      	cbz	r0, 8009ab6 <dhcp_delete_msg+0xe>
    pbuf_free(dhcp->p_out);
 8009ab2:	f001 fad7 	bl	800b064 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	6123      	str	r3, [r4, #16]
  dhcp->msg_out = NULL;
 8009aba:	6163      	str	r3, [r4, #20]
 8009abc:	bd10      	pop	{r4, pc}

08009abe <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8009abe:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif->dhcp;
 8009ac0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8009ac2:	4605      	mov	r5, r0
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8009ac4:	2108      	movs	r1, #8
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f7ff fef6 	bl	80098b8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8009acc:	2200      	movs	r2, #0
 8009ace:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f004 f9ea 	bl	800deac <etharp_query>
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8009ad8:	7b63      	ldrb	r3, [r4, #13]
 8009ada:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009adc:	bf1c      	itt	ne
 8009ade:	3301      	addne	r3, #1
 8009ae0:	7363      	strbne	r3, [r4, #13]
  }
  msecs = 500;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	8363      	strh	r3, [r4, #26]
 8009ae6:	bd38      	pop	{r3, r4, r5, pc}

08009ae8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8009ae8:	b513      	push	{r0, r1, r4, lr}
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d060      	beq.n	8009bb0 <dhcp_bind+0xc8>
  dhcp = netif->dhcp;
 8009aee:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8009af0:	2c00      	cmp	r4, #0
 8009af2:	d05d      	beq.n	8009bb0 <dhcp_bind+0xc8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	84a3      	strh	r3, [r4, #36]	; 0x24

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8009af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009afa:	1c59      	adds	r1, r3, #1
 8009afc:	d00b      	beq.n	8009b16 <dhcp_bind+0x2e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009afe:	223c      	movs	r2, #60	; 0x3c
 8009b00:	331e      	adds	r3, #30
 8009b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	bf28      	it	cs
 8009b0e:	4613      	movcs	r3, r2
     if (timeout > 0xffff) {
       timeout = 0xffff;
     }
     dhcp->t0_timeout = (u16_t)timeout;
     if (dhcp->t0_timeout == 0) {
 8009b10:	b903      	cbnz	r3, 8009b14 <dhcp_bind+0x2c>
       dhcp->t0_timeout = 1;
 8009b12:	2301      	movs	r3, #1
 8009b14:	84e3      	strh	r3, [r4, #38]	; 0x26
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8009b16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	d00d      	beq.n	8009b38 <dhcp_bind+0x50>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009b1c:	223c      	movs	r2, #60	; 0x3c
 8009b1e:	331e      	adds	r3, #30
 8009b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	bf28      	it	cs
 8009b2c:	4613      	movcs	r3, r2
    if (timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t1_timeout = (u16_t)timeout;
    if (dhcp->t1_timeout == 0) {
 8009b2e:	b903      	cbnz	r3, 8009b32 <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
 8009b30:	2301      	movs	r3, #1
 8009b32:	83a3      	strh	r3, [r4, #28]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8009b34:	8ba3      	ldrh	r3, [r4, #28]
 8009b36:	8423      	strh	r3, [r4, #32]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8009b38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	d00d      	beq.n	8009b5a <dhcp_bind+0x72>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009b3e:	223c      	movs	r2, #60	; 0x3c
 8009b40:	331e      	adds	r3, #30
 8009b42:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	bf28      	it	cs
 8009b4e:	4613      	movcs	r3, r2
    if (timeout > 0xffff) {
      timeout = 0xffff;
    }
    dhcp->t2_timeout = (u16_t)timeout;
    if (dhcp->t2_timeout == 0) {
 8009b50:	b903      	cbnz	r3, 8009b54 <dhcp_bind+0x6c>
      dhcp->t2_timeout = 1;
 8009b52:	2301      	movs	r3, #1
 8009b54:	83e3      	strh	r3, [r4, #30]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8009b56:	8be3      	ldrh	r3, [r4, #30]
 8009b58:	8463      	strh	r3, [r4, #34]	; 0x22
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8009b5a:	8be3      	ldrh	r3, [r4, #30]
 8009b5c:	8ba2      	ldrh	r2, [r4, #28]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d302      	bcc.n	8009b68 <dhcp_bind+0x80>
 8009b62:	b10b      	cbz	r3, 8009b68 <dhcp_bind+0x80>
    dhcp->t1_timeout = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	83a3      	strh	r3, [r4, #28]
  }

  if (dhcp->subnet_mask_given) {
 8009b68:	7ba3      	ldrb	r3, [r4, #14]
 8009b6a:	b10b      	cbz	r3, 8009b70 <dhcp_bind+0x88>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8009b6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009b6e:	e00b      	b.n	8009b88 <dhcp_bind+0xa0>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8009b70:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    if (first_octet <= 127) {
 8009b74:	061a      	lsls	r2, r3, #24
 8009b76:	d401      	bmi.n	8009b7c <dhcp_bind+0x94>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8009b78:	23ff      	movs	r3, #255	; 0xff
 8009b7a:	e005      	b.n	8009b88 <dhcp_bind+0xa0>
    } else if (first_octet >= 192) {
 8009b7c:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8009b7e:	bf8c      	ite	hi
 8009b80:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8009b84:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8009b88:	9300      	str	r3, [sp, #0]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8009b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b8c:	9301      	str	r3, [sp, #4]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8009b8e:	b92b      	cbnz	r3, 8009b9c <dhcp_bind+0xb4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8009b90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009b92:	9b00      	ldr	r3, [sp, #0]
 8009b94:	4013      	ands	r3, r2
 8009b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b9a:	9301      	str	r3, [sp, #4]
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8009b9c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8009ba0:	ab01      	add	r3, sp, #4
 8009ba2:	466a      	mov	r2, sp
 8009ba4:	f001 f9da 	bl	800af5c <netif_set_addr>
  /* interface is used by routing now that an address is set */

  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8009ba8:	210a      	movs	r1, #10
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff fe84 	bl	80098b8 <dhcp_set_state>
}
 8009bb0:	b002      	add	sp, #8
 8009bb2:	bd10      	pop	{r4, pc}

08009bb4 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8009bb4:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8009bb6:	b190      	cbz	r0, 8009bde <dhcp_option_trailer+0x2a>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8009bb8:	8b03      	ldrh	r3, [r0, #24]
 8009bba:	6942      	ldr	r2, [r0, #20]
 8009bbc:	1c59      	adds	r1, r3, #1
 8009bbe:	4413      	add	r3, r2
 8009bc0:	22ff      	movs	r2, #255	; 0xff
 8009bc2:	8301      	strh	r1, [r0, #24]
 8009bc4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8009bc8:	2200      	movs	r2, #0
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8009bca:	8b03      	ldrh	r3, [r0, #24]
 8009bcc:	2b43      	cmp	r3, #67	; 0x43
 8009bce:	d806      	bhi.n	8009bde <dhcp_option_trailer+0x2a>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8009bd0:	6941      	ldr	r1, [r0, #20]
 8009bd2:	1c5c      	adds	r4, r3, #1
 8009bd4:	440b      	add	r3, r1
 8009bd6:	8304      	strh	r4, [r0, #24]
 8009bd8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
 8009bdc:	e7f5      	b.n	8009bca <dhcp_option_trailer+0x16>
 8009bde:	bd10      	pop	{r4, pc}

08009be0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8009be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif->dhcp;
 8009be2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8009be4:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8009be6:	2103      	movs	r1, #3
 8009be8:	4620      	mov	r0, r4
 8009bea:	f7ff fe65 	bl	80098b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009bee:	2203      	movs	r2, #3
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7ff feaa 	bl	800994c <dhcp_create_msg>
  if (result == ERR_OK) {
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	bb40      	cbnz	r0, 8009c4e <dhcp_reboot+0x6e>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	2139      	movs	r1, #57	; 0x39
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7ff fe61 	bl	80098c8 <dhcp_option>
    dhcp_option_short(dhcp, 576);
 8009c06:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff fe6c 	bl	80098e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009c10:	2204      	movs	r2, #4
 8009c12:	2132      	movs	r1, #50	; 0x32
 8009c14:	4620      	mov	r0, r4
 8009c16:	f7ff fe57 	bl	80098c8 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009c1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009c1c:	f7ff fdea 	bl	80097f4 <lwip_ntohl>
 8009c20:	4601      	mov	r1, r0
 8009c22:	4620      	mov	r0, r4
 8009c24:	f7ff fe71 	bl	800990a <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f7ff ffc3 	bl	8009bb4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009c2e:	8b21      	ldrh	r1, [r4, #24]
 8009c30:	6920      	ldr	r0, [r4, #16]
 8009c32:	31f0      	adds	r1, #240	; 0xf0
 8009c34:	b289      	uxth	r1, r1
 8009c36:	f001 fabb 	bl	800b1b0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8009c3a:	9600      	str	r6, [sp, #0]
 8009c3c:	2343      	movs	r3, #67	; 0x43
 8009c3e:	4a11      	ldr	r2, [pc, #68]	; (8009c84 <dhcp_reboot+0xa4>)
 8009c40:	6921      	ldr	r1, [r4, #16]
 8009c42:	6860      	ldr	r0, [r4, #4]
 8009c44:	f003 feff 	bl	800da46 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f7ff ff2d 	bl	8009aa8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009c4e:	7b63      	ldrb	r3, [r4, #13]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009c50:	4628      	mov	r0, r5
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009c52:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009c54:	bf1c      	itt	ne
 8009c56:	3301      	addne	r3, #1
 8009c58:	7363      	strbne	r3, [r4, #13]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009c5a:	7b63      	ldrb	r3, [r4, #13]
 8009c5c:	2b09      	cmp	r3, #9
 8009c5e:	bf96      	itet	ls
 8009c60:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8009c64:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8009c68:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009c6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8009c70:	bf9c      	itt	ls
 8009c72:	00db      	lslls	r3, r3, #3
 8009c74:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009c76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c7e:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009c80:	b002      	add	sp, #8
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	0802c9d8 	.word	0x0802c9d8

08009c88 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8009c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009c8a:	2300      	movs	r3, #0
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
 8009c8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8009c8e:	4606      	mov	r6, r0
  err_t result = ERR_OK;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009c90:	2106      	movs	r1, #6
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009c92:	62e3      	str	r3, [r4, #44]	; 0x2c
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009c94:	4620      	mov	r0, r4
 8009c96:	f7ff fe0f 	bl	80098b8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4630      	mov	r0, r6
 8009ca0:	f7ff fe54 	bl	800994c <dhcp_create_msg>
  if (result == ERR_OK) {
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	bb78      	cbnz	r0, 8009d08 <dhcp_discover+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009ca8:	2202      	movs	r2, #2
 8009caa:	2139      	movs	r1, #57	; 0x39
 8009cac:	4620      	mov	r0, r4
 8009cae:	f7ff fe0b 	bl	80098c8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009cb2:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f7ff fe17 	bl	80098e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
 8009cba:	4620      	mov	r0, r4
 8009cbc:	2204      	movs	r2, #4
 8009cbe:	2137      	movs	r1, #55	; 0x37
 8009cc0:	f7ff fe02 	bl	80098c8 <dhcp_option>
 8009cc4:	462b      	mov	r3, r5
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
 8009cc6:	481d      	ldr	r0, [pc, #116]	; (8009d3c <dhcp_discover+0xb4>)
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009cc8:	8b22      	ldrh	r2, [r4, #24]
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
 8009cca:	5c19      	ldrb	r1, [r3, r0]
 8009ccc:	3301      	adds	r3, #1
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009cce:	1c57      	adds	r7, r2, #1

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
 8009cd0:	2b04      	cmp	r3, #4
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009cd2:	8327      	strh	r7, [r4, #24]
 8009cd4:	6967      	ldr	r7, [r4, #20]
 8009cd6:	443a      	add	r2, r7
 8009cd8:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
 8009cdc:	d1f4      	bne.n	8009cc8 <dhcp_discover+0x40>
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
    }
    dhcp_option_trailer(dhcp);
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7ff ff68 	bl	8009bb4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009ce4:	8b21      	ldrh	r1, [r4, #24]
 8009ce6:	6920      	ldr	r0, [r4, #16]
 8009ce8:	31f0      	adds	r1, #240	; 0xf0
 8009cea:	b289      	uxth	r1, r1
 8009cec:	f001 fa60 	bl	800b1b0 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP_ADDR_ANY);
 8009cf0:	4b13      	ldr	r3, [pc, #76]	; (8009d40 <dhcp_discover+0xb8>)
 8009cf2:	9600      	str	r6, [sp, #0]
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	2343      	movs	r3, #67	; 0x43
 8009cf8:	4a12      	ldr	r2, [pc, #72]	; (8009d44 <dhcp_discover+0xbc>)
 8009cfa:	6921      	ldr	r1, [r4, #16]
 8009cfc:	6860      	ldr	r0, [r4, #4]
 8009cfe:	f003 fe51 	bl	800d9a4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff fed0 	bl	8009aa8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009d08:	7b63      	ldrb	r3, [r4, #13]
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009d0a:	4628      	mov	r0, r5
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009d0c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009d0e:	bf1c      	itt	ne
 8009d10:	3301      	addne	r3, #1
 8009d12:	7363      	strbne	r3, [r4, #13]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009d14:	7b62      	ldrb	r2, [r4, #13]
 8009d16:	2a05      	cmp	r2, #5
 8009d18:	bf96      	itet	ls
 8009d1a:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8009d1e:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8009d22:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009d24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009d28:	bf98      	it	ls
 8009d2a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009d2c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009d30:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d34:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009d36:	b003      	add	sp, #12
 8009d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	0802c9d4 	.word	0x0802c9d4
 8009d40:	0802c9dc 	.word	0x0802c9dc
 8009d44:	0802c9d8 	.word	0x0802c9d8

08009d48 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8009d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif->dhcp;
 8009d4a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8009d4c:	4606      	mov	r6, r0
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8009d4e:	2101      	movs	r1, #1
 8009d50:	4620      	mov	r0, r4
 8009d52:	f7ff fdb1 	bl	80098b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8009d56:	2203      	movs	r2, #3
 8009d58:	4621      	mov	r1, r4
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f7ff fdf6 	bl	800994c <dhcp_create_msg>
  if (result == ERR_OK) {
 8009d60:	4605      	mov	r5, r0
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d147      	bne.n	8009df6 <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009d66:	2202      	movs	r2, #2
 8009d68:	2139      	movs	r1, #57	; 0x39
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f7ff fdac 	bl	80098c8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8009d70:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 8009d72:	4620      	mov	r0, r4
 8009d74:	f7ff fdb8 	bl	80098e8 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8009d78:	2204      	movs	r2, #4
 8009d7a:	2132      	movs	r1, #50	; 0x32
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f7ff fda3 	bl	80098c8 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009d82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009d84:	f7ff fd36 	bl	80097f4 <lwip_ntohl>
 8009d88:	4601      	mov	r1, r0
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f7ff fdbd 	bl	800990a <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8009d90:	2204      	movs	r2, #4
 8009d92:	2136      	movs	r1, #54	; 0x36
 8009d94:	4620      	mov	r0, r4
 8009d96:	f7ff fd97 	bl	80098c8 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8009d9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009d9c:	f7ff fd2a 	bl	80097f4 <lwip_ntohl>
 8009da0:	4601      	mov	r1, r0
 8009da2:	4620      	mov	r0, r4
 8009da4:	f7ff fdb1 	bl	800990a <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
 8009da8:	4620      	mov	r0, r4
 8009daa:	2204      	movs	r2, #4
 8009dac:	2137      	movs	r1, #55	; 0x37
 8009dae:	f7ff fd8b 	bl	80098c8 <dhcp_option>
 8009db2:	462b      	mov	r3, r5
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
 8009db4:	481c      	ldr	r0, [pc, #112]	; (8009e28 <dhcp_select+0xe0>)
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009db6:	8b22      	ldrh	r2, [r4, #24]
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
      dhcp_option_byte(dhcp, dhcp_discover_select_options[i]);
 8009db8:	5c19      	ldrb	r1, [r3, r0]
 8009dba:	3301      	adds	r3, #1
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009dbc:	1c57      	adds	r7, r2, #1

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
 8009dbe:	2b04      	cmp	r3, #4
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8009dc0:	8327      	strh	r7, [r4, #24]
 8009dc2:	6967      	ldr	r7, [r4, #20]
 8009dc4:	443a      	add	r2, r7
 8009dc6:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, sizeof(dhcp_discover_select_options));
    for (i = 0; i < sizeof(dhcp_discover_select_options); i++) {
 8009dca:	d1f4      	bne.n	8009db6 <dhcp_select+0x6e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f7ff fef1 	bl	8009bb4 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8009dd2:	8b21      	ldrh	r1, [r4, #24]
 8009dd4:	6920      	ldr	r0, [r4, #16]
 8009dd6:	31f0      	adds	r1, #240	; 0xf0
 8009dd8:	b289      	uxth	r1, r1
 8009dda:	f001 f9e9 	bl	800b1b0 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP_ADDR_ANY);
 8009dde:	4b13      	ldr	r3, [pc, #76]	; (8009e2c <dhcp_select+0xe4>)
 8009de0:	9600      	str	r6, [sp, #0]
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	2343      	movs	r3, #67	; 0x43
 8009de6:	4a12      	ldr	r2, [pc, #72]	; (8009e30 <dhcp_select+0xe8>)
 8009de8:	6921      	ldr	r1, [r4, #16]
 8009dea:	6860      	ldr	r0, [r4, #4]
 8009dec:	f003 fdda 	bl	800d9a4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff fe59 	bl	8009aa8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009df6:	7b63      	ldrb	r3, [r4, #13]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009df8:	4628      	mov	r0, r5
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009dfa:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8009dfc:	bf1c      	itt	ne
 8009dfe:	3301      	addne	r3, #1
 8009e00:	7363      	strbne	r3, [r4, #13]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009e02:	7b62      	ldrb	r2, [r4, #13]
 8009e04:	2a05      	cmp	r2, #5
 8009e06:	bf96      	itet	ls
 8009e08:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8009e0c:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8009e10:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009e12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8009e16:	bf98      	it	ls
 8009e18:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8009e1a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8009e1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e22:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 8009e24:	b003      	add	sp, #12
 8009e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e28:	0802c9d4 	.word	0x0802c9d4
 8009e2c:	0802c9dc 	.word	0x0802c9dc
 8009e30:	0802c9d8 	.word	0x0802c9d8

08009e34 <dhcp_recv>:
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009e34:	8953      	ldrh	r3, [r2, #10]
 8009e36:	2b2b      	cmp	r3, #43	; 0x2b
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	b089      	sub	sp, #36	; 0x24
 8009e40:	4693      	mov	fp, r2
  struct netif *netif = (struct netif *)arg;
  struct dhcp *dhcp = netif->dhcp;
 8009e42:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8009e46:	f240 80b0 	bls.w	8009faa <dhcp_recv+0x176>
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  struct netif *netif = (struct netif *)arg;
  struct dhcp *dhcp = netif->dhcp;
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8009e4a:	6851      	ldr	r1, [r2, #4]
  if (p->len < DHCP_MIN_REPLY_LEN) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8009e4c:	780b      	ldrb	r3, [r1, #0]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	f040 80ab 	bne.w	8009faa <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8009e54:	4602      	mov	r2, r0
 8009e56:	2300      	movs	r3, #0
 8009e58:	f101 001b 	add.w	r0, r1, #27
 8009e5c:	f812 4f2c 	ldrb.w	r4, [r2, #44]!
 8009e60:	b2dd      	uxtb	r5, r3
 8009e62:	42ac      	cmp	r4, r5
 8009e64:	d909      	bls.n	8009e7a <dhcp_recv+0x46>
 8009e66:	2b06      	cmp	r3, #6
 8009e68:	d007      	beq.n	8009e7a <dhcp_recv+0x46>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8009e6a:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8009e6e:	3301      	adds	r3, #1
 8009e70:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8009e74:	42ae      	cmp	r6, r5
 8009e76:	d0f3      	beq.n	8009e60 <dhcp_recv+0x2c>
 8009e78:	e097      	b.n	8009faa <dhcp_recv+0x176>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
 8009e7a:	6848      	ldr	r0, [r1, #4]
 8009e7c:	f7ff fcba 	bl	80097f4 <lwip_ntohl>
 8009e80:	f8da 3000 	ldr.w	r3, [sl]
 8009e84:	4298      	cmp	r0, r3
 8009e86:	f040 8090 	bne.w	8009faa <dhcp_recv+0x176>
  struct pbuf *q;
  int parse_file_as_options = 0;
  int parse_sname_as_options = 0;

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8009e8a:	4aab      	ldr	r2, [pc, #684]	; (800a138 <dhcp_recv+0x304>)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	6053      	str	r3, [r2, #4]
 8009e92:	8113      	strh	r3, [r2, #8]
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8009e94:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8009e98:	2a2b      	cmp	r2, #43	; 0x2b
 8009e9a:	f240 8086 	bls.w	8009faa <dhcp_recv+0x176>
    return ERR_BUF;
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8009e9e:	f8db 2004 	ldr.w	r2, [fp, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8009ea2:	24f0      	movs	r4, #240	; 0xf0
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8009ea4:	f8bb 9008 	ldrh.w	r9, [fp, #8]
  dhcp_clear_all_options(dhcp);
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
    return ERR_BUF;
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8009ea8:	f8ca 2008 	str.w	r2, [sl, #8]
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  int parse_sname_as_options = 0;
 8009eac:	9301      	str	r3, [sp, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8009eae:	465e      	mov	r6, fp
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while ((q != NULL) && (options_idx >= q->len)) {
 8009eb0:	8973      	ldrh	r3, [r6, #10]
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	d84f      	bhi.n	8009f56 <dhcp_recv+0x122>
    options_idx -= q->len;
 8009eb6:	1ae4      	subs	r4, r4, r3
    options_idx_max -= q->len;
 8009eb8:	ebc3 0909 	rsb	r9, r3, r9
    q = q->next;
 8009ebc:	6836      	ldr	r6, [r6, #0]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while ((q != NULL) && (options_idx >= q->len)) {
    options_idx -= q->len;
 8009ebe:	b2a4      	uxth	r4, r4
    options_idx_max -= q->len;
 8009ec0:	fa1f f989 	uxth.w	r9, r9
  options_idx = DHCP_OPTIONS_OFS;
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
again:
  q = p;
  while ((q != NULL) && (options_idx >= q->len)) {
 8009ec4:	2e00      	cmp	r6, #0
 8009ec6:	d1f3      	bne.n	8009eb0 <dhcp_recv+0x7c>
 8009ec8:	e06f      	b.n	8009faa <dhcp_recv+0x176>
  }
  offset = options_idx;
  offset_max = options_idx_max;
  options = (u8_t*)q->payload;
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
 8009eca:	9b02      	ldr	r3, [sp, #8]
 8009ecc:	5d1a      	ldrb	r2, [r3, r4]
 8009ece:	2aff      	cmp	r2, #255	; 0xff
 8009ed0:	d044      	beq.n	8009f5c <dhcp_recv+0x128>
 8009ed2:	454c      	cmp	r4, r9
 8009ed4:	d242      	bcs.n	8009f5c <dhcp_recv+0x128>
    u8_t op = options[offset];
    u8_t len;
    u8_t decode_len = 0;
    int decode_idx = -1;
    u16_t val_offset = offset + 2;
 8009ed6:	1ca3      	adds	r3, r4, #2
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
 8009ed8:	8971      	ldrh	r1, [r6, #10]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
    u8_t op = options[offset];
    u8_t len;
    u8_t decode_len = 0;
    int decode_idx = -1;
    u16_t val_offset = offset + 2;
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	9305      	str	r3, [sp, #20]
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
 8009ede:	1c63      	adds	r3, r4, #1
 8009ee0:	428b      	cmp	r3, r1
 8009ee2:	da40      	bge.n	8009f66 <dhcp_recv+0x132>
      len = options[offset + 1];
 8009ee4:	9b02      	ldr	r3, [sp, #8]
 8009ee6:	4423      	add	r3, r4
 8009ee8:	785b      	ldrb	r3, [r3, #1]
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 8009eea:	2a33      	cmp	r2, #51	; 0x33
 8009eec:	f000 80e4 	beq.w	800a0b8 <dhcp_recv+0x284>
 8009ef0:	f200 8149 	bhi.w	800a186 <dhcp_recv+0x352>
 8009ef4:	2a01      	cmp	r2, #1
 8009ef6:	f000 8119 	beq.w	800a12c <dhcp_recv+0x2f8>
 8009efa:	d24d      	bcs.n	8009f98 <dhcp_recv+0x164>
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
        /* will be increased below */
        offset--;
 8009efc:	3c01      	subs	r4, #1
    decode_len = len;
    switch(op) {
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8009efe:	2500      	movs	r5, #0
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
    u8_t op = options[offset];
    u8_t len;
    u8_t decode_len = 0;
    int decode_idx = -1;
 8009f00:	f04f 37ff 	mov.w	r7, #4294967295
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
        /* will be increased below */
        offset--;
 8009f04:	b2a4      	uxth	r4, r4
    decode_len = len;
    switch(op) {
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8009f06:	462b      	mov	r3, r5
 8009f08:	3402      	adds	r4, #2
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
 8009f0a:	fa13 f484 	uxtah	r4, r3, r4
 8009f0e:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 8009f10:	b1ad      	cbz	r5, 8009f3e <dhcp_recv+0x10a>
      u32_t value = 0;
 8009f12:	ab08      	add	r3, sp, #32
 8009f14:	9700      	str	r7, [sp, #0]
 8009f16:	9304      	str	r3, [sp, #16]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9a04      	ldr	r2, [sp, #16]
 8009f1c:	f842 3d04 	str.w	r3, [r2, #-4]!
 8009f20:	4b85      	ldr	r3, [pc, #532]	; (800a138 <dhcp_recv+0x304>)
 8009f22:	9204      	str	r2, [sp, #16]
 8009f24:	18fb      	adds	r3, r7, r3
 8009f26:	9303      	str	r3, [sp, #12]
 8009f28:	9b00      	ldr	r3, [sp, #0]
 8009f2a:	9a05      	ldr	r2, [sp, #20]
 8009f2c:	1bdb      	subs	r3, r3, r7
 8009f2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8009f32:	9a03      	ldr	r2, [sp, #12]
 8009f34:	7812      	ldrb	r2, [r2, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	2a00      	cmp	r2, #0
 8009f3a:	f000 80c3 	beq.w	800a0c4 <dhcp_recv+0x290>
        }
        dhcp_got_option(dhcp, decode_idx);
        dhcp_set_option_value(dhcp, decode_idx, value);
      }
    }
    if (offset >= q->len) {
 8009f3e:	8973      	ldrh	r3, [r6, #10]
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	d8c2      	bhi.n	8009eca <dhcp_recv+0x96>
      offset -= q->len;
 8009f44:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 8009f46:	ebc3 0909 	rsb	r9, r3, r9
        dhcp_got_option(dhcp, decode_idx);
        dhcp_set_option_value(dhcp, decode_idx, value);
      }
    }
    if (offset >= q->len) {
      offset -= q->len;
 8009f4a:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 8009f4c:	fa1f f989 	uxth.w	r9, r9
      if ((offset < offset_max) && offset_max) {
 8009f50:	454c      	cmp	r4, r9
 8009f52:	d203      	bcs.n	8009f5c <dhcp_recv+0x128>
        q = q->next;
 8009f54:	6836      	ldr	r6, [r6, #0]
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
 8009f56:	6873      	ldr	r3, [r6, #4]
 8009f58:	9302      	str	r3, [sp, #8]
 8009f5a:	e7b6      	b.n	8009eca <dhcp_recv+0x96>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8009f5c:	4a76      	ldr	r2, [pc, #472]	; (800a138 <dhcp_recv+0x304>)
 8009f5e:	7813      	ldrb	r3, [r2, #0]
 8009f60:	4615      	mov	r5, r2
 8009f62:	b93b      	cbnz	r3, 8009f74 <dhcp_recv+0x140>
 8009f64:	e02a      	b.n	8009fbc <dhcp_recv+0x188>
    u16_t val_offset = offset + 2;
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8009f66:	6833      	ldr	r3, [r6, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 80fb 	beq.w	800a164 <dhcp_recv+0x330>
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	e7ba      	b.n	8009eea <dhcp_recv+0xb6>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009f74:	4b71      	ldr	r3, [pc, #452]	; (800a13c <dhcp_recv+0x308>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009f76:	2100      	movs	r1, #0
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009f78:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8009f7a:	7011      	strb	r1, [r2, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	f000 8097 	beq.w	800a0b0 <dhcp_recv+0x27c>
      parse_file_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d105      	bne.n	8009f92 <dhcp_recv+0x15e>
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
 8009f86:	2300      	movs	r3, #0
    options_idx = DHCP_SNAME_OFS;
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8009f88:	f04f 096c 	mov.w	r9, #108	; 0x6c
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
    options_idx = DHCP_SNAME_OFS;
 8009f8c:	242c      	movs	r4, #44	; 0x2c
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
    parse_sname_as_options = 0;
 8009f8e:	9301      	str	r3, [sp, #4]
 8009f90:	e78d      	b.n	8009eae <dhcp_recv+0x7a>
      parse_file_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
      parse_sname_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d112      	bne.n	8009fbc <dhcp_recv+0x188>
 8009f96:	e089      	b.n	800a0ac <dhcp_recv+0x278>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 8009f98:	2a03      	cmp	r2, #3
 8009f9a:	f000 80d3 	beq.w	800a144 <dhcp_recv+0x310>
 8009f9e:	2a06      	cmp	r2, #6
 8009fa0:	f040 80ed 	bne.w	800a17e <dhcp_recv+0x34a>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_ROUTER;
        break;
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
 8009fa4:	079a      	lsls	r2, r3, #30
 8009fa6:	f000 80d3 	beq.w	800a150 <dhcp_recv+0x31c>
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
 8009faa:	2300      	movs	r3, #0
  pbuf_free(p);
 8009fac:	4658      	mov	r0, fp
    dhcp->request_timeout = 0;
    /* remember offered lease */
    dhcp_handle_offer(netif);
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
 8009fae:	f8ca 3008 	str.w	r3, [sl, #8]
  pbuf_free(p);
 8009fb2:	f001 f857 	bl	800b064 <pbuf_free>
}
 8009fb6:	b009      	add	sp, #36	; 0x24
 8009fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
    goto again;
  } else if (parse_sname_as_options) {
 8009fbc:	9b01      	ldr	r3, [sp, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1e1      	bne.n	8009f86 <dhcp_recv+0x152>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8009fc2:	786b      	ldrb	r3, [r5, #1]
 8009fc4:	495c      	ldr	r1, [pc, #368]	; (800a138 <dhcp_recv+0x304>)
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0ef      	beq.n	8009faa <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8009fca:	4b5c      	ldr	r3, [pc, #368]	; (800a13c <dhcp_recv+0x308>)
 8009fcc:	791a      	ldrb	r2, [r3, #4]
 8009fce:	461e      	mov	r6, r3
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8009fd0:	2a05      	cmp	r2, #5
 8009fd2:	d138      	bne.n	800a046 <dhcp_recv+0x212>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009fd4:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d12d      	bne.n	800a038 <dhcp_recv+0x204>
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009fdc:	9b01      	ldr	r3, [sp, #4]
 8009fde:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
 8009fe2:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009fe4:	6363      	str	r3, [r4, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009fe6:	78cb      	ldrb	r3, [r1, #3]
 8009fe8:	b10b      	cbz	r3, 8009fee <dhcp_recv+0x1ba>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8009fea:	68f3      	ldr	r3, [r6, #12]
 8009fec:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009fee:	792b      	ldrb	r3, [r5, #4]
 8009ff0:	b10b      	cbz	r3, 8009ff6 <dhcp_recv+0x1c2>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8009ff2:	6933      	ldr	r3, [r6, #16]
 8009ff4:	e001      	b.n	8009ffa <dhcp_recv+0x1c6>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8009ff6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ff8:	085b      	lsrs	r3, r3, #1
 8009ffa:	63e3      	str	r3, [r4, #60]	; 0x3c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8009ffc:	796b      	ldrb	r3, [r5, #5]
 8009ffe:	b10b      	cbz	r3, 800a004 <dhcp_recv+0x1d0>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800a000:	6973      	ldr	r3, [r6, #20]
 800a002:	e003      	b.n	800a00c <dhcp_recv+0x1d8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800a004:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a006:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800a00a:	08db      	lsrs	r3, r3, #3
 800a00c:	6423      	str	r3, [r4, #64]	; 0x40
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	62e3      	str	r3, [r4, #44]	; 0x2c
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800a014:	79ab      	ldrb	r3, [r5, #6]
 800a016:	b123      	cbz	r3, 800a022 <dhcp_recv+0x1ee>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800a018:	69b0      	ldr	r0, [r6, #24]
 800a01a:	f7ff fbe9 	bl	80097f0 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 800a01e:	2301      	movs	r3, #1
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800a020:	6320      	str	r0, [r4, #48]	; 0x30
    dhcp->subnet_mask_given = 1;
  } else {
    dhcp->subnet_mask_given = 0;
 800a022:	73a3      	strb	r3, [r4, #14]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800a024:	79eb      	ldrb	r3, [r5, #7]
 800a026:	b11b      	cbz	r3, 800a030 <dhcp_recv+0x1fc>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800a028:	69f0      	ldr	r0, [r6, #28]
 800a02a:	f7ff fbe1 	bl	80097f0 <lwip_htonl>
 800a02e:	6360      	str	r0, [r4, #52]	; 0x34
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
      dhcp_handle_ack(netif);
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
 800a030:	4640      	mov	r0, r8
 800a032:	f7ff fd44 	bl	8009abe <dhcp_check>
 800a036:	e7b8      	b.n	8009faa <dhcp_recv+0x176>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800a038:	3b03      	subs	r3, #3
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d8b5      	bhi.n	8009faa <dhcp_recv+0x176>
             (dhcp->state == DHCP_STATE_RENEWING)) {
      dhcp_bind(netif);
 800a03e:	4640      	mov	r0, r8
 800a040:	f7ff fd52 	bl	8009ae8 <dhcp_bind>
 800a044:	e7b1      	b.n	8009faa <dhcp_recv+0x176>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800a046:	2a06      	cmp	r2, #6
 800a048:	d116      	bne.n	800a078 <dhcp_recv+0x244>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800a04a:	f89a 300c 	ldrb.w	r3, [sl, #12]
             (dhcp->state == DHCP_STATE_RENEWING)) {
      dhcp_bind(netif);
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800a04e:	1eda      	subs	r2, r3, #3
 800a050:	2a02      	cmp	r2, #2
 800a052:	d901      	bls.n	800a058 <dhcp_recv+0x224>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800a054:	2b01      	cmp	r3, #1
 800a056:	d1a8      	bne.n	8009faa <dhcp_recv+0x176>
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);
 800a058:	4b39      	ldr	r3, [pc, #228]	; (800a140 <dhcp_recv+0x30c>)
 800a05a:	4640      	mov	r0, r8
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
 800a05c:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);
 800a060:	4619      	mov	r1, r3
 800a062:	461a      	mov	r2, r3
 800a064:	f000 ff7a 	bl	800af5c <netif_set_addr>
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800a068:	4620      	mov	r0, r4
 800a06a:	210c      	movs	r1, #12
 800a06c:	f7ff fc24 	bl	80098b8 <dhcp_set_state>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800a070:	4640      	mov	r0, r8
 800a072:	f7ff fe09 	bl	8009c88 <dhcp_discover>
 800a076:	e798      	b.n	8009faa <dhcp_recv+0x176>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800a078:	2a02      	cmp	r2, #2
 800a07a:	d196      	bne.n	8009faa <dhcp_recv+0x176>
 800a07c:	f89a 200c 	ldrb.w	r2, [sl, #12]
 800a080:	2a06      	cmp	r2, #6
 800a082:	d192      	bne.n	8009faa <dhcp_recv+0x176>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800a084:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800a088:	f8aa 201a 	strh.w	r2, [sl, #26]
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800a08c:	788a      	ldrb	r2, [r1, #2]
 800a08e:	2a00      	cmp	r2, #0
 800a090:	d08b      	beq.n	8009faa <dhcp_recv+0x176>
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
 800a092:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800a096:	6898      	ldr	r0, [r3, #8]
 800a098:	f7ff fbaa 	bl	80097f0 <lwip_htonl>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a09c:	68a3      	ldr	r3, [r4, #8]
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800a09e:	62a0      	str	r0, [r4, #40]	; 0x28
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800a0a0:	4640      	mov	r0, r8
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	62e3      	str	r3, [r4, #44]	; 0x2c
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800a0a6:	f7ff fe4f 	bl	8009d48 <dhcp_select>
 800a0aa:	e77e      	b.n	8009faa <dhcp_recv+0x176>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
      parse_sname_as_options = 1;
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
      parse_sname_as_options = 1;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	9301      	str	r3, [sp, #4]
  }
  if (parse_file_as_options) {
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800a0b0:	f04f 09ec 	mov.w	r9, #236	; 0xec
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
    options_idx = DHCP_FILE_OFS;
 800a0b4:	246c      	movs	r4, #108	; 0x6c
 800a0b6:	e6fa      	b.n	8009eae <dhcp_recv+0x7a>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	f47f af76 	bne.w	8009faa <dhcp_recv+0x176>
 800a0be:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800a0c0:	2703      	movs	r7, #3
 800a0c2:	e721      	b.n	8009f08 <dhcp_recv+0xd4>
      u32_t value = 0;
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
        copy_len = LWIP_MIN(decode_len, 4);
 800a0c4:	2d03      	cmp	r5, #3
        pbuf_copy_partial(q, &value, copy_len, val_offset);
 800a0c6:	9904      	ldr	r1, [sp, #16]
 800a0c8:	4630      	mov	r0, r6
      u32_t value = 0;
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
        copy_len = LWIP_MIN(decode_len, 4);
 800a0ca:	bf94      	ite	ls
 800a0cc:	b2aa      	uxthls	r2, r5
 800a0ce:	2204      	movhi	r2, #4
        pbuf_copy_partial(q, &value, copy_len, val_offset);
 800a0d0:	f001 f905 	bl	800b2de <pbuf_copy_partial>
        if (decode_len > 4) {
 800a0d4:	2d04      	cmp	r5, #4
 800a0d6:	d914      	bls.n	800a102 <dhcp_recv+0x2ce>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800a0d8:	07ab      	lsls	r3, r5, #30
 800a0da:	f47f af66 	bne.w	8009faa <dhcp_recv+0x176>
          dhcp_got_option(dhcp, decode_idx);
 800a0de:	9a03      	ldr	r2, [sp, #12]
 800a0e0:	2301      	movs	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 800a0e2:	9807      	ldr	r0, [sp, #28]
          decode_len -= 4;
 800a0e4:	3d04      	subs	r5, #4
        copy_len = LWIP_MIN(decode_len, 4);
        pbuf_copy_partial(q, &value, copy_len, val_offset);
        if (decode_len > 4) {
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
          dhcp_got_option(dhcp, decode_idx);
 800a0e6:	f802 3b01 	strb.w	r3, [r2], #1
 800a0ea:	9203      	str	r2, [sp, #12]
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 800a0ec:	f7ff fb80 	bl	80097f0 <lwip_htonl>
 800a0f0:	9a00      	ldr	r2, [sp, #0]
          decode_len -= 4;
 800a0f2:	b2ed      	uxtb	r5, r5
        pbuf_copy_partial(q, &value, copy_len, val_offset);
        if (decode_len > 4) {
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
          dhcp_got_option(dhcp, decode_idx);
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
 800a0f4:	4b11      	ldr	r3, [pc, #68]	; (800a13c <dhcp_recv+0x308>)
 800a0f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
          decode_len -= 4;
          val_offset += 4;
          decode_idx++;
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	e712      	b.n	8009f28 <dhcp_recv+0xf4>
          goto decode_next;
        } else if (decode_len == 4) {
 800a102:	d104      	bne.n	800a10e <dhcp_recv+0x2da>
          value = ntohl(value);
 800a104:	9807      	ldr	r0, [sp, #28]
 800a106:	f7ff fb75 	bl	80097f4 <lwip_ntohl>
 800a10a:	9007      	str	r0, [sp, #28]
 800a10c:	e005      	b.n	800a11a <dhcp_recv+0x2e6>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800a10e:	2d01      	cmp	r5, #1
 800a110:	f47f af4b 	bne.w	8009faa <dhcp_recv+0x176>
          value = ((u8_t*)&value)[0];
 800a114:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800a118:	9307      	str	r3, [sp, #28]
        }
        dhcp_got_option(dhcp, decode_idx);
 800a11a:	2301      	movs	r3, #1
 800a11c:	4a06      	ldr	r2, [pc, #24]	; (800a138 <dhcp_recv+0x304>)
 800a11e:	9900      	ldr	r1, [sp, #0]
 800a120:	5453      	strb	r3, [r2, r1]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800a122:	9b07      	ldr	r3, [sp, #28]
 800a124:	4a05      	ldr	r2, [pc, #20]	; (800a13c <dhcp_recv+0x308>)
 800a126:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a12a:	e708      	b.n	8009f3e <dhcp_recv+0x10a>
        decode_len = len = 0;
        /* will be increased below */
        offset--;
        break;
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	f47f af3c 	bne.w	8009faa <dhcp_recv+0x176>
 800a132:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800a134:	2706      	movs	r7, #6
 800a136:	e6e7      	b.n	8009f08 <dhcp_recv+0xd4>
 800a138:	20043104 	.word	0x20043104
 800a13c:	20043110 	.word	0x20043110
 800a140:	0802c9dc 	.word	0x0802c9dc
        break;
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800a144:	2b03      	cmp	r3, #3
 800a146:	f67f af30 	bls.w	8009faa <dhcp_recv+0x176>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800a14a:	2707      	movs	r7, #7
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
        break;
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800a14c:	2504      	movs	r5, #4
 800a14e:	e6db      	b.n	8009f08 <dhcp_recv+0xd4>
        break;
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800a150:	2b08      	cmp	r3, #8
 800a152:	461d      	mov	r5, r3
 800a154:	bf28      	it	cs
 800a156:	2508      	movcs	r5, #8
 800a158:	b2ed      	uxtb	r5, r5
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800a15a:	42ab      	cmp	r3, r5
 800a15c:	f4ff af25 	bcc.w	8009faa <dhcp_recv+0x176>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800a160:	2708      	movs	r7, #8
 800a162:	e6d1      	b.n	8009f08 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a164:	2a06      	cmp	r2, #6
 800a166:	f43f af1d 	beq.w	8009fa4 <dhcp_recv+0x170>
 800a16a:	d831      	bhi.n	800a1d0 <dhcp_recv+0x39c>
 800a16c:	2a01      	cmp	r2, #1
 800a16e:	f43f af1c 	beq.w	8009faa <dhcp_recv+0x176>
 800a172:	f4ff aec3 	bcc.w	8009efc <dhcp_recv+0xc8>
 800a176:	2a03      	cmp	r2, #3
 800a178:	f43f af17 	beq.w	8009faa <dhcp_recv+0x176>
    u16_t val_offset = offset + 2;
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
      len = options[offset + 1];
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800a17c:	2300      	movs	r3, #0
      default:
        decode_len = 0;
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
    }
    offset += len + 2;
 800a17e:	9a05      	ldr	r2, [sp, #20]
 800a180:	441a      	add	r2, r3
 800a182:	b294      	uxth	r4, r2
 800a184:	e6db      	b.n	8009f3e <dhcp_recv+0x10a>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a186:	2a36      	cmp	r2, #54	; 0x36
 800a188:	d105      	bne.n	800a196 <dhcp_recv+0x362>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
        break;
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a18a:	2b04      	cmp	r3, #4
 800a18c:	f47f af0d 	bne.w	8009faa <dhcp_recv+0x176>
 800a190:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800a192:	2702      	movs	r7, #2
 800a194:	e6b8      	b.n	8009f08 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a196:	d80b      	bhi.n	800a1b0 <dhcp_recv+0x37c>
 800a198:	2a34      	cmp	r2, #52	; 0x34
 800a19a:	d105      	bne.n	800a1a8 <dhcp_recv+0x374>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	f47f af04 	bne.w	8009faa <dhcp_recv+0x176>
 800a1a2:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800a1a4:	2700      	movs	r7, #0
 800a1a6:	e6af      	b.n	8009f08 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1a8:	2a35      	cmp	r2, #53	; 0x35
 800a1aa:	d1e8      	bne.n	800a17e <dhcp_recv+0x34a>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
        break;
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	e002      	b.n	800a1b6 <dhcp_recv+0x382>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1b0:	2a3a      	cmp	r2, #58	; 0x3a
 800a1b2:	d105      	bne.n	800a1c0 <dhcp_recv+0x38c>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
        break;
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	f47f aef8 	bne.w	8009faa <dhcp_recv+0x176>
 800a1ba:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800a1bc:	461f      	mov	r7, r3
 800a1be:	e6a3      	b.n	8009f08 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1c0:	2a3b      	cmp	r2, #59	; 0x3b
 800a1c2:	d1dc      	bne.n	800a17e <dhcp_recv+0x34a>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_T1;
        break;
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	f47f aef0 	bne.w	8009faa <dhcp_recv+0x176>
 800a1ca:	461d      	mov	r5, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800a1cc:	2705      	movs	r7, #5
 800a1ce:	e69b      	b.n	8009f08 <dhcp_recv+0xd4>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
    switch(op) {
 800a1d0:	2a33      	cmp	r2, #51	; 0x33
 800a1d2:	d3d3      	bcc.n	800a17c <dhcp_recv+0x348>
 800a1d4:	2a36      	cmp	r2, #54	; 0x36
 800a1d6:	f67f aee8 	bls.w	8009faa <dhcp_recv+0x176>
 800a1da:	3a3a      	subs	r2, #58	; 0x3a
 800a1dc:	2a01      	cmp	r2, #1
 800a1de:	f67f aee4 	bls.w	8009faa <dhcp_recv+0x176>
 800a1e2:	e7cb      	b.n	800a17c <dhcp_recv+0x348>

0800a1e4 <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800a1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d03b      	beq.n	800a264 <dhcp_arp_reply+0x80>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_STATE_CHECKING)) {
 800a1ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a1ee:	2c00      	cmp	r4, #0
 800a1f0:	d038      	beq.n	800a264 <dhcp_arp_reply+0x80>
 800a1f2:	7b23      	ldrb	r3, [r4, #12]
 800a1f4:	2b08      	cmp	r3, #8
 800a1f6:	d135      	bne.n	800a264 <dhcp_arp_reply+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
 800a1f8:	680a      	ldr	r2, [r1, #0]
 800a1fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d131      	bne.n	800a264 <dhcp_arp_reply+0x80>
{
  struct dhcp *dhcp = netif->dhcp;
  err_t result = ERR_OK;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800a200:	210c      	movs	r1, #12
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff fb58 	bl	80098b8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800a208:	2204      	movs	r2, #4
 800a20a:	4621      	mov	r1, r4
 800a20c:	4628      	mov	r0, r5
 800a20e:	f7ff fb9d 	bl	800994c <dhcp_create_msg>
  if (result == ERR_OK) {
 800a212:	bb00      	cbnz	r0, 800a256 <dhcp_arp_reply+0x72>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800a214:	2204      	movs	r2, #4
 800a216:	2132      	movs	r1, #50	; 0x32
 800a218:	4620      	mov	r0, r4
 800a21a:	f7ff fb55 	bl	80098c8 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a21e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a220:	f7ff fae8 	bl	80097f4 <lwip_ntohl>
 800a224:	4601      	mov	r1, r0
 800a226:	4620      	mov	r0, r4
 800a228:	f7ff fb6f 	bl	800990a <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a22c:	4620      	mov	r0, r4
 800a22e:	f7ff fcc1 	bl	8009bb4 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a232:	8b21      	ldrh	r1, [r4, #24]
 800a234:	6920      	ldr	r0, [r4, #16]
 800a236:	31f0      	adds	r1, #240	; 0xf0
 800a238:	b289      	uxth	r1, r1
 800a23a:	f000 ffb9 	bl	800b1b0 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP_ADDR_ANY);
 800a23e:	4b0a      	ldr	r3, [pc, #40]	; (800a268 <dhcp_arp_reply+0x84>)
 800a240:	9500      	str	r5, [sp, #0]
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	2343      	movs	r3, #67	; 0x43
 800a246:	4a09      	ldr	r2, [pc, #36]	; (800a26c <dhcp_arp_reply+0x88>)
 800a248:	6921      	ldr	r1, [r4, #16]
 800a24a:	6860      	ldr	r0, [r4, #4]
 800a24c:	f003 fbaa 	bl	800d9a4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800a250:	4620      	mov	r0, r4
 800a252:	f7ff fc29 	bl	8009aa8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a256:	7b63      	ldrb	r3, [r4, #13]
 800a258:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800a25a:	bf1c      	itt	ne
 800a25c:	3301      	addne	r3, #1
 800a25e:	7363      	strbne	r3, [r4, #13]
  }
  msecs = 10*1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a260:	2314      	movs	r3, #20
 800a262:	8363      	strh	r3, [r4, #26]
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
    }
  }
}
 800a264:	b003      	add	sp, #12
 800a266:	bd30      	pop	{r4, r5, pc}
 800a268:	0802c9dc 	.word	0x0802c9dc
 800a26c:	0802c9d8 	.word	0x0802c9d8

0800a270 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800a270:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif->dhcp;
 800a272:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800a274:	4606      	mov	r6, r0
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800a276:	2105      	movs	r1, #5
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff fb1d 	bl	80098b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a27e:	2203      	movs	r2, #3
 800a280:	4621      	mov	r1, r4
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff fb62 	bl	800994c <dhcp_create_msg>
  if (result == ERR_OK) {
 800a288:	4605      	mov	r5, r0
 800a28a:	b9e0      	cbnz	r0, 800a2c6 <dhcp_renew+0x56>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a28c:	2202      	movs	r2, #2
 800a28e:	2139      	movs	r1, #57	; 0x39
 800a290:	4620      	mov	r0, r4
 800a292:	f7ff fb19 	bl	80098c8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a296:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
 800a298:	4620      	mov	r0, r4
 800a29a:	f7ff fb25 	bl	80098e8 <dhcp_option_short>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7ff fc88 	bl	8009bb4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a2a4:	8b21      	ldrh	r1, [r4, #24]
 800a2a6:	6920      	ldr	r0, [r4, #16]
 800a2a8:	31f0      	adds	r1, #240	; 0xf0
 800a2aa:	b289      	uxth	r1, r1
 800a2ac:	f000 ff80 	bl	800b1b0 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800a2b0:	9600      	str	r6, [sp, #0]
 800a2b2:	2343      	movs	r3, #67	; 0x43
 800a2b4:	f104 0228 	add.w	r2, r4, #40	; 0x28
 800a2b8:	6921      	ldr	r1, [r4, #16]
 800a2ba:	6860      	ldr	r0, [r4, #4]
 800a2bc:	f003 fbc3 	bl	800da46 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f7ff fbf1 	bl	8009aa8 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a2c6:	7b63      	ldrb	r3, [r4, #13]
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 800a2c8:	4628      	mov	r0, r5

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a2ca:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800a2cc:	bf1c      	itt	ne
 800a2ce:	3301      	addne	r3, #1
 800a2d0:	7363      	strbne	r3, [r4, #13]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800a2d2:	7b63      	ldrb	r3, [r4, #13]
 800a2d4:	2b09      	cmp	r3, #9
 800a2d6:	bf96      	itet	ls
 800a2d8:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800a2dc:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 800a2e0:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a2e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800a2e8:	bf9c      	itt	ls
 800a2ea:	011b      	lslls	r3, r3, #4
 800a2ec:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a2ee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a2f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2f6:	8363      	strh	r3, [r4, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
}
 800a2f8:	b002      	add	sp, #8
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}

0800a2fc <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800a2fc:	b510      	push	{r4, lr}
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800a2fe:	b168      	cbz	r0, 800a31c <dhcp_stop+0x20>
  dhcp = netif->dhcp;
 800a300:	6a44      	ldr	r4, [r0, #36]	; 0x24

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800a302:	b15c      	cbz	r4, 800a31c <dhcp_stop+0x20>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
 800a304:	6860      	ldr	r0, [r4, #4]
 800a306:	b118      	cbz	r0, 800a310 <dhcp_stop+0x14>
      udp_remove(dhcp->pcb);
 800a308:	f003 fbfc 	bl	800db04 <udp_remove>
      dhcp->pcb = NULL;
 800a30c:	2300      	movs	r3, #0
 800a30e:	6063      	str	r3, [r4, #4]
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a310:	4620      	mov	r0, r4
 800a312:	2100      	movs	r1, #0
  }
}
 800a314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (dhcp->pcb != NULL) {
      udp_remove(dhcp->pcb);
      dhcp->pcb = NULL;
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a318:	f7ff bace 	b.w	80098b8 <dhcp_set_state>
 800a31c:	bd10      	pop	{r4, pc}
	...

0800a320 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800a320:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a322:	4605      	mov	r5, r0
 800a324:	2800      	cmp	r0, #0
 800a326:	d03c      	beq.n	800a3a2 <dhcp_start+0x82>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a328:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 800a32c:	07da      	lsls	r2, r3, #31
 800a32e:	d538      	bpl.n	800a3a2 <dhcp_start+0x82>
  dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
 800a330:	071b      	lsls	r3, r3, #28
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  dhcp = netif->dhcp;
 800a332:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
 800a334:	d535      	bpl.n	800a3a2 <dhcp_start+0x82>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800a336:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800a338:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a33c:	d32e      	bcc.n	800a39c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800a33e:	b934      	cbnz	r4, 800a34e <dhcp_start+0x2e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800a340:	2044      	movs	r0, #68	; 0x44
 800a342:	f000 fd39 	bl	800adb8 <mem_malloc>
    if (dhcp == NULL) {
 800a346:	4604      	mov	r4, r0
 800a348:	b340      	cbz	r0, 800a39c <dhcp_start+0x7c>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
 800a34a:	6268      	str	r0, [r5, #36]	; 0x24
 800a34c:	e003      	b.n	800a356 <dhcp_start+0x36>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
 800a34e:	6860      	ldr	r0, [r4, #4]
 800a350:	b108      	cbz	r0, 800a356 <dhcp_start+0x36>
      udp_remove(dhcp->pcb);
 800a352:	f003 fbd7 	bl	800db04 <udp_remove>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800a356:	2244      	movs	r2, #68	; 0x44
 800a358:	2100      	movs	r1, #0
 800a35a:	4620      	mov	r0, r4
 800a35c:	f007 fa5e 	bl	801181c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
 800a360:	f003 fbe8 	bl	800db34 <udp_new>
 800a364:	6060      	str	r0, [r4, #4]
  if (dhcp->pcb == NULL) {
 800a366:	b1c8      	cbz	r0, 800a39c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
 800a368:	7a03      	ldrb	r3, [r0, #8]
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 800a36a:	2244      	movs	r2, #68	; 0x44
 800a36c:	490e      	ldr	r1, [pc, #56]	; (800a3a8 <dhcp_start+0x88>)
  dhcp->pcb = udp_new();
  if (dhcp->pcb == NULL) {
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
 800a36e:	f043 0320 	orr.w	r3, r3, #32
 800a372:	7203      	strb	r3, [r0, #8]
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
 800a374:	6860      	ldr	r0, [r4, #4]
 800a376:	f003 fab5 	bl	800d8e4 <udp_bind>
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 800a37a:	2243      	movs	r2, #67	; 0x43
 800a37c:	490a      	ldr	r1, [pc, #40]	; (800a3a8 <dhcp_start+0x88>)
 800a37e:	6860      	ldr	r0, [r4, #4]
 800a380:	f003 fb94 	bl	800daac <udp_connect>
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
 800a384:	6860      	ldr	r0, [r4, #4]
 800a386:	462a      	mov	r2, r5
 800a388:	4908      	ldr	r1, [pc, #32]	; (800a3ac <dhcp_start+0x8c>)
 800a38a:	f003 fbb7 	bl	800dafc <udp_recv>
    return ERR_OK;
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800a38e:	4628      	mov	r0, r5
 800a390:	f7ff fc7a 	bl	8009c88 <dhcp_discover>
  if (result != ERR_OK) {
 800a394:	b138      	cbz	r0, 800a3a6 <dhcp_start+0x86>
    /* free resources allocated above */
    dhcp_stop(netif);
 800a396:	4628      	mov	r0, r5
 800a398:	f7ff ffb0 	bl	800a2fc <dhcp_stop>
    return ERR_MEM;
 800a39c:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a0:	bd38      	pop	{r3, r4, r5, pc}
dhcp_start(struct netif *netif)
{
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a3a2:	f06f 000e 	mvn.w	r0, #14
    /* free resources allocated above */
    dhcp_stop(netif);
    return ERR_MEM;
  }
  return result;
}
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	0802c9dc 	.word	0x0802c9dc
 800a3ac:	08009e35 	.word	0x08009e35

0800a3b0 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(struct netif *netif)
{
  if ((netif != NULL) && (netif->dhcp != NULL)) {
 800a3b0:	b148      	cbz	r0, 800a3c6 <dhcp_supplied_address+0x16>
 800a3b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800a3b4:	b138      	cbz	r0, 800a3c6 <dhcp_supplied_address+0x16>
    if ((netif->dhcp->state == DHCP_STATE_BOUND) ||
 800a3b6:	7b00      	ldrb	r0, [r0, #12]
 800a3b8:	280a      	cmp	r0, #10
 800a3ba:	d003      	beq.n	800a3c4 <dhcp_supplied_address+0x14>
      (netif->dhcp->state == DHCP_STATE_RENEWING)) {
      return 1;
 800a3bc:	1f43      	subs	r3, r0, #5
 800a3be:	4258      	negs	r0, r3
 800a3c0:	4158      	adcs	r0, r3
 800a3c2:	4770      	bx	lr
 800a3c4:	2001      	movs	r0, #1
    }
  }
  return 0;
}
 800a3c6:	4770      	bx	lr

0800a3c8 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800a3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif->dhcp;
 800a3ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800a3cc:	b085      	sub	sp, #20
 800a3ce:	4606      	mov	r6, r0
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800a3d0:	2c00      	cmp	r4, #0
 800a3d2:	d045      	beq.n	800a460 <dhcp_release+0x98>
    return ERR_ARG;
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a3d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a3d6:	9303      	str	r3, [sp, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a3d8:	f7ff ffea 	bl	800a3b0 <dhcp_supplied_address>

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a3dc:	2100      	movs	r1, #0
  if (dhcp == NULL) {
    return ERR_ARG;
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800a3de:	4602      	mov	r2, r0

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	f7ff fa69 	bl	80098b8 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800a3ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a3ec:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a3ee:	6363      	str	r3, [r4, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a3f0:	6423      	str	r3, [r4, #64]	; 0x40
 800a3f2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800a3f4:	63a3      	str	r3, [r4, #56]	; 0x38
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a3f6:	84e3      	strh	r3, [r4, #38]	; 0x26
 800a3f8:	84a3      	strh	r3, [r4, #36]	; 0x24
 800a3fa:	8463      	strh	r3, [r4, #34]	; 0x22
 800a3fc:	8423      	strh	r3, [r4, #32]

  if (!is_dhcp_supplied_address) {
 800a3fe:	b392      	cbz	r2, 800a466 <dhcp_release+0x9e>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a400:	2207      	movs	r2, #7
 800a402:	4621      	mov	r1, r4
 800a404:	4630      	mov	r0, r6
 800a406:	f7ff faa1 	bl	800994c <dhcp_create_msg>
  if (result == ERR_OK) {
 800a40a:	4605      	mov	r5, r0
 800a40c:	bb00      	cbnz	r0, 800a450 <dhcp_release+0x88>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a40e:	af04      	add	r7, sp, #16
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  if (result == ERR_OK) {
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a410:	2204      	movs	r2, #4
 800a412:	2136      	movs	r1, #54	; 0x36
 800a414:	4620      	mov	r0, r4
 800a416:	f7ff fa57 	bl	80098c8 <dhcp_option>
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a41a:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800a41e:	f7ff f9e9 	bl	80097f4 <lwip_ntohl>
 800a422:	4601      	mov	r1, r0
 800a424:	4620      	mov	r0, r4
 800a426:	f7ff fa70 	bl	800990a <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800a42a:	4620      	mov	r0, r4
 800a42c:	f7ff fbc2 	bl	8009bb4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a430:	8b21      	ldrh	r1, [r4, #24]
 800a432:	6920      	ldr	r0, [r4, #16]
 800a434:	31f0      	adds	r1, #240	; 0xf0
 800a436:	b289      	uxth	r1, r1
 800a438:	f000 feba 	bl	800b1b0 <pbuf_realloc>

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800a43c:	9600      	str	r6, [sp, #0]
 800a43e:	2343      	movs	r3, #67	; 0x43
 800a440:	463a      	mov	r2, r7
 800a442:	6921      	ldr	r1, [r4, #16]
 800a444:	6860      	ldr	r0, [r4, #4]
 800a446:	f003 fafe 	bl	800da46 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a44a:	4620      	mov	r0, r4
 800a44c:	f7ff fb2c 	bl	8009aa8 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);
 800a450:	4b06      	ldr	r3, [pc, #24]	; (800a46c <dhcp_release+0xa4>)
 800a452:	4630      	mov	r0, r6
 800a454:	461a      	mov	r2, r3
 800a456:	4619      	mov	r1, r3
 800a458:	f000 fd80 	bl	800af5c <netif_set_addr>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800a45c:	4628      	mov	r0, r5
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);

  return result;
 800a45e:	e003      	b.n	800a468 <dhcp_release+0xa0>
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
    return ERR_ARG;
 800a460:	f06f 000e 	mvn.w	r0, #14
 800a464:	e000      	b.n	800a468 <dhcp_release+0xa0>
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;

  if (!is_dhcp_supplied_address) {
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800a466:	4610      	mov	r0, r2
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY, IP4_ADDR_ANY, IP4_ADDR_ANY);

  return result;
}
 800a468:	b005      	add	sp, #20
 800a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a46c:	0802c9dc 	.word	0x0802c9dc

0800a470 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr(void)
{
  struct netif *netif = netif_list;
 800a470:	4b46      	ldr	r3, [pc, #280]	; (800a58c <dhcp_coarse_tmr+0x11c>)
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr(void)
{
 800a472:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct netif *netif = netif_list;
 800a474:	681d      	ldr	r5, [r3, #0]
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a476:	f240 2619 	movw	r6, #537	; 0x219
dhcp_coarse_tmr(void)
{
  struct netif *netif = netif_list;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800a47a:	2d00      	cmp	r5, #0
 800a47c:	f000 8084 	beq.w	800a588 <dhcp_coarse_tmr+0x118>
    /* only act on DHCP configured interfaces */
    struct dhcp* dhcp = netif->dhcp;
 800a480:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800a482:	2c00      	cmp	r4, #0
 800a484:	d07e      	beq.n	800a584 <dhcp_coarse_tmr+0x114>
 800a486:	7b23      	ldrb	r3, [r4, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d07b      	beq.n	800a584 <dhcp_coarse_tmr+0x114>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800a48c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800a48e:	b161      	cbz	r1, 800a4aa <dhcp_coarse_tmr+0x3a>
 800a490:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
 800a492:	3201      	adds	r2, #1
 800a494:	b292      	uxth	r2, r2
 800a496:	4291      	cmp	r1, r2
 800a498:	84a2      	strh	r2, [r4, #36]	; 0x24
 800a49a:	d106      	bne.n	800a4aa <dhcp_coarse_tmr+0x3a>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800a49c:	4628      	mov	r0, r5
 800a49e:	f7ff ff93 	bl	800a3c8 <dhcp_release>
        dhcp_discover(netif);
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f7ff fbf0 	bl	8009c88 <dhcp_discover>
 800a4a8:	e06c      	b.n	800a584 <dhcp_coarse_tmr+0x114>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800a4aa:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	d052      	beq.n	800a556 <dhcp_coarse_tmr+0xe6>
 800a4b0:	1e51      	subs	r1, r2, #1
 800a4b2:	2a01      	cmp	r2, #1
 800a4b4:	8461      	strh	r1, [r4, #34]	; 0x22
 800a4b6:	d14e      	bne.n	800a556 <dhcp_coarse_tmr+0xe6>
static void
dhcp_t2_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b09      	cmp	r3, #9
 800a4be:	d861      	bhi.n	800a584 <dhcp_coarse_tmr+0x114>
 800a4c0:	fa26 f303 	lsr.w	r3, r6, r3
 800a4c4:	07db      	lsls	r3, r3, #31
 800a4c6:	d55d      	bpl.n	800a584 <dhcp_coarse_tmr+0x114>
{
  struct dhcp *dhcp = netif->dhcp;
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800a4c8:	2104      	movs	r1, #4
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f7ff f9f4 	bl	80098b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	4621      	mov	r1, r4
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	f7ff fa39 	bl	800994c <dhcp_create_msg>
  if (result == ERR_OK) {
 800a4da:	b9d8      	cbnz	r0, 800a514 <dhcp_coarse_tmr+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a4dc:	2202      	movs	r2, #2
 800a4de:	2139      	movs	r1, #57	; 0x39
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f7ff f9f1 	bl	80098c8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a4e6:	8d69      	ldrh	r1, [r5, #42]	; 0x2a
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7ff f9fd 	bl	80098e8 <dhcp_option_short>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f7ff fb60 	bl	8009bb4 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a4f4:	8b21      	ldrh	r1, [r4, #24]
 800a4f6:	6920      	ldr	r0, [r4, #16]
 800a4f8:	31f0      	adds	r1, #240	; 0xf0
 800a4fa:	b289      	uxth	r1, r1
 800a4fc:	f000 fe58 	bl	800b1b0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800a500:	9500      	str	r5, [sp, #0]
 800a502:	2343      	movs	r3, #67	; 0x43
 800a504:	4a22      	ldr	r2, [pc, #136]	; (800a590 <dhcp_coarse_tmr+0x120>)
 800a506:	6921      	ldr	r1, [r4, #16]
 800a508:	6860      	ldr	r0, [r4, #4]
 800a50a:	f003 fa9c 	bl	800da46 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800a50e:	4620      	mov	r0, r4
 800a510:	f7ff faca 	bl	8009aa8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a514:	7b63      	ldrb	r3, [r4, #13]
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
    /* Calculate next timeout */
    if (((netif->dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a516:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    dhcp_delete_msg(dhcp);
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a518:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800a51a:	bf1c      	itt	ne
 800a51c:	3301      	addne	r3, #1
 800a51e:	7363      	strbne	r3, [r4, #13]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a520:	7b63      	ldrb	r3, [r4, #13]
 800a522:	2b09      	cmp	r3, #9
 800a524:	bf96      	itet	ls
 800a526:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800a52a:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800a52e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800a536:	bf9c      	itt	ls
 800a538:	00db      	lslls	r3, r3, #3
 800a53a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a53c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a540:	fb93 f3f2 	sdiv	r3, r3, r2
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
    /* Calculate next timeout */
    if (((netif->dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a544:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  }
  if (dhcp->tries < 255) {
    dhcp->tries++;
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a546:	8363      	strh	r3, [r4, #26]
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
    /* Calculate next timeout */
    if (((netif->dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a548:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a54a:	1a5b      	subs	r3, r3, r1
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	dd19      	ble.n	800a584 <dhcp_coarse_tmr+0x114>
    {
       netif->dhcp->t2_rebind_time = ((netif->dhcp->t0_timeout - dhcp->lease_used) / 2);
 800a550:	105b      	asrs	r3, r3, #1
 800a552:	8453      	strh	r3, [r2, #34]	; 0x22
 800a554:	e016      	b.n	800a584 <dhcp_coarse_tmr+0x114>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800a556:	8c22      	ldrh	r2, [r4, #32]
 800a558:	b1a2      	cbz	r2, 800a584 <dhcp_coarse_tmr+0x114>
 800a55a:	1e51      	subs	r1, r2, #1
 800a55c:	2a01      	cmp	r2, #1
 800a55e:	8421      	strh	r1, [r4, #32]
 800a560:	d110      	bne.n	800a584 <dhcp_coarse_tmr+0x114>
static void
dhcp_t1_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a562:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800a566:	2a01      	cmp	r2, #1
 800a568:	d001      	beq.n	800a56e <dhcp_coarse_tmr+0xfe>
 800a56a:	2b0a      	cmp	r3, #10
 800a56c:	d10a      	bne.n	800a584 <dhcp_coarse_tmr+0x114>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800a56e:	4628      	mov	r0, r5
 800a570:	f7ff fe7e 	bl	800a270 <dhcp_renew>
    /* Calculate next timeout */
    if (((netif->dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a574:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a576:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800a578:	8bd3      	ldrh	r3, [r2, #30]
 800a57a:	1a5b      	subs	r3, r3, r1
 800a57c:	2b01      	cmp	r3, #1
    {
       netif->dhcp->t1_renew_time = ((netif->dhcp->t2_timeout - dhcp->lease_used) / 2);
 800a57e:	bfc4      	itt	gt
 800a580:	105b      	asrgt	r3, r3, #1
 800a582:	8413      	strhgt	r3, [r2, #32]
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800a584:	682d      	ldr	r5, [r5, #0]
 800a586:	e778      	b.n	800a47a <dhcp_coarse_tmr+0xa>
  }
}
 800a588:	b002      	add	sp, #8
 800a58a:	bd70      	pop	{r4, r5, r6, pc}
 800a58c:	20049240 	.word	0x20049240
 800a590:	0802c9d8 	.word	0x0802c9d8

0800a594 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800a594:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 800a596:	4b1d      	ldr	r3, [pc, #116]	; (800a60c <dhcp_fine_tmr+0x78>)
      /* timer is active (non zero), and is about to trigger now */
      if (netif->dhcp->request_timeout > 1) {
        netif->dhcp->request_timeout--;
      }
      else if (netif->dhcp->request_timeout == 1) {
        netif->dhcp->request_timeout--;
 800a598:	2500      	movs	r5, #0
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  struct netif *netif = netif_list;
 800a59a:	681c      	ldr	r4, [r3, #0]
  /* loop through netif's */
  while (netif != NULL) {
 800a59c:	b3a4      	cbz	r4, 800a608 <dhcp_fine_tmr+0x74>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
 800a59e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5a0:	b383      	cbz	r3, 800a604 <dhcp_fine_tmr+0x70>
      /* timer is active (non zero), and is about to trigger now */
      if (netif->dhcp->request_timeout > 1) {
 800a5a2:	8b5a      	ldrh	r2, [r3, #26]
 800a5a4:	2a01      	cmp	r2, #1
 800a5a6:	d902      	bls.n	800a5ae <dhcp_fine_tmr+0x1a>
        netif->dhcp->request_timeout--;
 800a5a8:	3a01      	subs	r2, #1
 800a5aa:	835a      	strh	r2, [r3, #26]
 800a5ac:	e02a      	b.n	800a604 <dhcp_fine_tmr+0x70>
      }
      else if (netif->dhcp->request_timeout == 1) {
 800a5ae:	d129      	bne.n	800a604 <dhcp_fine_tmr+0x70>
dhcp_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a5b0:	7b1a      	ldrb	r2, [r3, #12]
      /* timer is active (non zero), and is about to trigger now */
      if (netif->dhcp->request_timeout > 1) {
        netif->dhcp->request_timeout--;
      }
      else if (netif->dhcp->request_timeout == 1) {
        netif->dhcp->request_timeout--;
 800a5b2:	835d      	strh	r5, [r3, #26]
dhcp_timeout(struct netif *netif)
{
  struct dhcp *dhcp = netif->dhcp;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a5b4:	2a0c      	cmp	r2, #12
 800a5b6:	d00c      	beq.n	800a5d2 <dhcp_fine_tmr+0x3e>
 800a5b8:	2a06      	cmp	r2, #6
 800a5ba:	d00a      	beq.n	800a5d2 <dhcp_fine_tmr+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a5bc:	2a01      	cmp	r2, #1
 800a5be:	d10a      	bne.n	800a5d6 <dhcp_fine_tmr+0x42>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
 800a5c0:	7b5b      	ldrb	r3, [r3, #13]
      dhcp_select(netif);
 800a5c2:	4620      	mov	r0, r4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  /* receiving the requested lease timed out */
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
    if (dhcp->tries <= 5) {
 800a5c4:	2b05      	cmp	r3, #5
 800a5c6:	d802      	bhi.n	800a5ce <dhcp_fine_tmr+0x3a>
      dhcp_select(netif);
 800a5c8:	f7ff fbbe 	bl	8009d48 <dhcp_select>
 800a5cc:	e01a      	b.n	800a604 <dhcp_fine_tmr+0x70>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
      dhcp_release(netif);
 800a5ce:	f7ff fefb 	bl	800a3c8 <dhcp_release>
      dhcp_discover(netif);
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	e014      	b.n	800a600 <dhcp_fine_tmr+0x6c>
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800a5d6:	2a08      	cmp	r2, #8
 800a5d8:	d109      	bne.n	800a5ee <dhcp_fine_tmr+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
 800a5da:	7b5b      	ldrb	r3, [r3, #13]
      dhcp_check(netif);
 800a5dc:	4620      	mov	r0, r4
    }
#if DHCP_DOES_ARP_CHECK
  /* received no ARP reply for the offered address (which is good) */
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
    if (dhcp->tries <= 1) {
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d802      	bhi.n	800a5e8 <dhcp_fine_tmr+0x54>
      dhcp_check(netif);
 800a5e2:	f7ff fa6c 	bl	8009abe <dhcp_check>
 800a5e6:	e00d      	b.n	800a604 <dhcp_fine_tmr+0x70>
    /* no ARP replies on the offered address,
       looks like the IP address is indeed free */
    } else {
      /* bind the interface to the offered address */
      dhcp_bind(netif);
 800a5e8:	f7ff fa7e 	bl	8009ae8 <dhcp_bind>
 800a5ec:	e00a      	b.n	800a604 <dhcp_fine_tmr+0x70>
    }
#endif /* DHCP_DOES_ARP_CHECK */
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800a5ee:	2a03      	cmp	r2, #3
 800a5f0:	d108      	bne.n	800a604 <dhcp_fine_tmr+0x70>
    if (dhcp->tries < REBOOT_TRIES) {
 800a5f2:	7b5b      	ldrb	r3, [r3, #13]
      dhcp_reboot(netif);
 800a5f4:	4620      	mov	r0, r4
      /* bind the interface to the offered address */
      dhcp_bind(netif);
    }
#endif /* DHCP_DOES_ARP_CHECK */
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
    if (dhcp->tries < REBOOT_TRIES) {
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d802      	bhi.n	800a600 <dhcp_fine_tmr+0x6c>
      dhcp_reboot(netif);
 800a5fa:	f7ff faf1 	bl	8009be0 <dhcp_reboot>
 800a5fe:	e001      	b.n	800a604 <dhcp_fine_tmr+0x70>
    } else {
      dhcp_discover(netif);
 800a600:	f7ff fb42 	bl	8009c88 <dhcp_discover>
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800a604:	6824      	ldr	r4, [r4, #0]
 800a606:	e7c9      	b.n	800a59c <dhcp_fine_tmr+0x8>
  }
}
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	20049240 	.word	0x20049240

0800a610 <icmp_input>:
  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
  if (p->len < sizeof(u16_t)*2) {
 800a610:	8943      	ldrh	r3, [r0, #10]
 800a612:	2b03      	cmp	r3, #3
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800a614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a618:	4604      	mov	r4, r0
 800a61a:	b085      	sub	sp, #20
 800a61c:	4688      	mov	r8, r1
  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
  if (p->len < sizeof(u16_t)*2) {
 800a61e:	d968      	bls.n	800a6f2 <icmp_input+0xe2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800a620:	6843      	ldr	r3, [r0, #4]
#if LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	2b08      	cmp	r3, #8
 800a626:	d164      	bne.n	800a6f2 <icmp_input+0xe2>
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
    /* multicast destination address? */
    if (ip_addr_ismulticast(ip_current_dest_addr())) {
 800a628:	4b35      	ldr	r3, [pc, #212]	; (800a700 <icmp_input+0xf0>)
 800a62a:	6958      	ldr	r0, [r3, #20]
 800a62c:	461f      	mov	r7, r3
 800a62e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800a632:	2ae0      	cmp	r2, #224	; 0xe0
 800a634:	d05d      	beq.n	800a6f2 <icmp_input+0xe2>
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800a636:	f8d3 9008 	ldr.w	r9, [r3, #8]
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) {
 800a63a:	6819      	ldr	r1, [r3, #0]

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
 800a63c:	f899 5000 	ldrb.w	r5, [r9]
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) {
 800a640:	f000 f9e1 	bl	800aa06 <ip4_addr_isbroadcast_u32>
 800a644:	2800      	cmp	r0, #0
 800a646:	d154      	bne.n	800a6f2 <icmp_input+0xe2>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a648:	8923      	ldrh	r3, [r4, #8]
 800a64a:	2b07      	cmp	r3, #7
 800a64c:	d951      	bls.n	800a6f2 <icmp_input+0xe2>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
 800a64e:	4620      	mov	r0, r4
 800a650:	f7ff f8fe 	bl	8009850 <inet_chksum_pbuf>
 800a654:	4606      	mov	r6, r0
 800a656:	2800      	cmp	r0, #0
 800a658:	d14b      	bne.n	800a6f2 <icmp_input+0xe2>

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
 800a65a:	f005 050f 	and.w	r5, r5, #15
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a65e:	2122      	movs	r1, #34	; 0x22
 800a660:	4620      	mov	r0, r4

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
  hlen = IPH_HL(iphdr_in) * 4;
 800a662:	00ad      	lsls	r5, r5, #2
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a664:	f000 fcf0 	bl	800b048 <pbuf_header>
 800a668:	b308      	cbz	r0, 800a6ae <icmp_input+0x9e>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800a66a:	8921      	ldrh	r1, [r4, #8]
 800a66c:	4632      	mov	r2, r6
 800a66e:	2002      	movs	r0, #2
 800a670:	4429      	add	r1, r5
 800a672:	b289      	uxth	r1, r1
 800a674:	f000 fd16 	bl	800b0a4 <pbuf_alloc>
      if (r == NULL) {
 800a678:	4606      	mov	r6, r0
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d039      	beq.n	800a6f2 <icmp_input+0xe2>
        goto icmperr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800a67e:	4649      	mov	r1, r9
 800a680:	462a      	mov	r2, r5
 800a682:	6840      	ldr	r0, [r0, #4]
 800a684:	f007 f8bf 	bl	8011806 <memcpy>
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
 800a688:	4269      	negs	r1, r5
 800a68a:	4630      	mov	r0, r6
 800a68c:	f000 fcdc 	bl	800b048 <pbuf_header>
 800a690:	b920      	cbnz	r0, 800a69c <icmp_input+0x8c>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
        pbuf_free(r);
        goto icmperr;
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800a692:	4621      	mov	r1, r4
 800a694:	4630      	mov	r0, r6
 800a696:	f000 fdd4 	bl	800b242 <pbuf_copy>
 800a69a:	b118      	cbz	r0, 800a6a4 <icmp_input+0x94>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        pbuf_free(r);
 800a69c:	4630      	mov	r0, r6
 800a69e:	f000 fce1 	bl	800b064 <pbuf_free>
        goto icmperr;
 800a6a2:	e026      	b.n	800a6f2 <icmp_input+0xe2>
      }
      /* free the original p */
      pbuf_free(p);
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	4634      	mov	r4, r6
 800a6a8:	f000 fcdc 	bl	800b064 <pbuf_free>
 800a6ac:	e005      	b.n	800a6ba <icmp_input+0xaa>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800a6ae:	f06f 0121 	mvn.w	r1, #33	; 0x21
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 fcc8 	bl	800b048 <pbuf_header>
 800a6b8:	b9d8      	cbnz	r0, 800a6f2 <icmp_input+0xe2>
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
    if (pbuf_header(p, hlen)) {
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4620      	mov	r0, r4
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800a6be:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, hlen)) {
 800a6c0:	f000 fcc2 	bl	800b048 <pbuf_header>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	b9a0      	cbnz	r0, 800a6f2 <icmp_input+0xe2>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a6c8:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	610b      	str	r3, [r1, #16]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a6d2:	23ff      	movs	r3, #255	; 0xff
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
      ip4_addr_copy(iphdr->src, *src);
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a6d4:	7030      	strb	r0, [r6, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800a6d6:	70b0      	strb	r0, [r6, #2]
 800a6d8:	70f0      	strb	r0, [r6, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
      IPH_CHKSUM_SET(iphdr, 0);
 800a6da:	7288      	strb	r0, [r1, #10]
 800a6dc:	72c8      	strb	r0, [r1, #11]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a6de:	720b      	strb	r3, [r1, #8]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, IP_HDRINCL,
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	9000      	str	r0, [sp, #0]
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	9101      	str	r1, [sp, #4]
 800a6e8:	f8cd 8008 	str.w	r8, [sp, #8]
 800a6ec:	4905      	ldr	r1, [pc, #20]	; (800a704 <icmp_input+0xf4>)
 800a6ee:	f000 f979 	bl	800a9e4 <ip4_output_if>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a6f2:	4620      	mov	r0, r4
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a6f4:	b005      	add	sp, #20
 800a6f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a6fa:	f000 bcb3 	b.w	800b064 <pbuf_free>
 800a6fe:	bf00      	nop
 800a700:	20043138 	.word	0x20043138
 800a704:	2004314c 	.word	0x2004314c

0800a708 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a708:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a70a:	2200      	movs	r2, #0
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a70c:	b087      	sub	sp, #28
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a712:	2001      	movs	r0, #1
 800a714:	2124      	movs	r1, #36	; 0x24
 800a716:	f000 fcc5 	bl	800b0a4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800a71a:	4605      	mov	r5, r0
 800a71c:	b358      	cbz	r0, 800a776 <icmp_dest_unreach+0x6e>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a71e:	6844      	ldr	r4, [r0, #4]
  icmphdr->type = type;
 800a720:	2303      	movs	r3, #3
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a722:	6871      	ldr	r1, [r6, #4]
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
 800a724:	7023      	strb	r3, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800a726:	2300      	movs	r3, #0
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
 800a728:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800a72a:	7123      	strb	r3, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a72c:	6842      	ldr	r2, [r0, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800a72e:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800a730:	71a3      	strb	r3, [r4, #6]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a732:	3208      	adds	r2, #8

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
  icmphdr->seqno = 0;
 800a734:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a736:	6873      	ldr	r3, [r6, #4]
 800a738:	f103 001c 	add.w	r0, r3, #28
 800a73c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a740:	4283      	cmp	r3, r0
 800a742:	f842 6b04 	str.w	r6, [r2], #4
 800a746:	d1f9      	bne.n	800a73c <icmp_dest_unreach+0x34>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a748:	ae06      	add	r6, sp, #24
 800a74a:	68cb      	ldr	r3, [r1, #12]
 800a74c:	f846 3d04 	str.w	r3, [r6, #-4]!
  netif = ip4_route(&iphdr_src);
 800a750:	4630      	mov	r0, r6
 800a752:	f000 f813 	bl	800a77c <ip4_route>
  if (netif != NULL) {
 800a756:	b158      	cbz	r0, 800a770 <icmp_dest_unreach+0x68>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a758:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a75a:	2301      	movs	r3, #1
 800a75c:	4632      	mov	r2, r6

  ip4_addr_copy(iphdr_src, iphdr->src);
  netif = ip4_route(&iphdr_src);
  if (netif != NULL) {
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a75e:	70a1      	strb	r1, [r4, #2]
 800a760:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a762:	9002      	str	r0, [sp, #8]
 800a764:	4628      	mov	r0, r5
 800a766:	e88d 000a 	stmia.w	sp, {r1, r3}
 800a76a:	23ff      	movs	r3, #255	; 0xff
 800a76c:	f000 f93a 	bl	800a9e4 <ip4_output_if>
  }
  pbuf_free(q);
 800a770:	4628      	mov	r0, r5
 800a772:	f000 fc77 	bl	800b064 <pbuf_free>
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
}
 800a776:	b007      	add	sp, #28
 800a778:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a77c <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a77c:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <ip4_route+0x50>)
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a77e:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	b19b      	cbz	r3, 800a7ac <ip4_route+0x30>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a784:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
 800a788:	f004 0205 	and.w	r2, r4, #5
 800a78c:	2a05      	cmp	r2, #5
 800a78e:	d1f7      	bne.n	800a780 <ip4_route+0x4>
 800a790:	685a      	ldr	r2, [r3, #4]
 800a792:	2a00      	cmp	r2, #0
 800a794:	d0f4      	beq.n	800a780 <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a796:	6801      	ldr	r1, [r0, #0]
 800a798:	689d      	ldr	r5, [r3, #8]
 800a79a:	404a      	eors	r2, r1
 800a79c:	422a      	tst	r2, r5
 800a79e:	d013      	beq.n	800a7c8 <ip4_route+0x4c>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a7a0:	07a2      	lsls	r2, r4, #30
 800a7a2:	d4ed      	bmi.n	800a780 <ip4_route+0x4>
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	4291      	cmp	r1, r2
 800a7a8:	d1ea      	bne.n	800a780 <ip4_route+0x4>
 800a7aa:	e00d      	b.n	800a7c8 <ip4_route+0x4c>
    }
    return NULL;
  }
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a7ac:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <ip4_route+0x54>)
 800a7ae:	6810      	ldr	r0, [r2, #0]
 800a7b0:	b158      	cbz	r0, 800a7ca <ip4_route+0x4e>
 800a7b2:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 800a7b6:	f002 0205 	and.w	r2, r2, #5
 800a7ba:	2a05      	cmp	r2, #5
 800a7bc:	d104      	bne.n	800a7c8 <ip4_route+0x4c>
 800a7be:	6843      	ldr	r3, [r0, #4]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bf08      	it	eq
 800a7c4:	2000      	moveq	r0, #0
 800a7c6:	bd30      	pop	{r4, r5, pc}
 800a7c8:	4618      	mov	r0, r3
  }

  return netif_default;
}
 800a7ca:	bd30      	pop	{r4, r5, pc}
 800a7cc:	20049240 	.word	0x20049240
 800a7d0:	20049244 	.word	0x20049244

0800a7d4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a7d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a7d8:	6847      	ldr	r7, [r0, #4]
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a7da:	4606      	mov	r6, r0
 800a7dc:	4689      	mov	r9, r1
  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  if (IPH_V(iphdr) != 4) {
 800a7de:	f897 8000 	ldrb.w	r8, [r7]
 800a7e2:	ea4f 1318 	mov.w	r3, r8, lsr #4
 800a7e6:	2b04      	cmp	r3, #4
 800a7e8:	d003      	beq.n	800a7f2 <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 fc3a 	bl	800b064 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a7f0:	e0a2      	b.n	800a938 <ip4_input+0x164>
  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800a7f2:	8878      	ldrh	r0, [r7, #2]
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800a7f4:	f008 080f 	and.w	r8, r8, #15
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800a7f8:	f7fe fff7 	bl	80097ea <lwip_ntohs>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a7fc:	8933      	ldrh	r3, [r6, #8]
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800a7fe:	ea4f 0888 	mov.w	r8, r8, lsl #2
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
 800a802:	4604      	mov	r4, r0

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a804:	4283      	cmp	r3, r0
 800a806:	d903      	bls.n	800a810 <ip4_input+0x3c>
    pbuf_realloc(p, iphdr_len);
 800a808:	4601      	mov	r1, r0
 800a80a:	4630      	mov	r0, r6
 800a80c:	f000 fcd0 	bl	800b1b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
 800a810:	8973      	ldrh	r3, [r6, #10]
 800a812:	4543      	cmp	r3, r8
 800a814:	d3e9      	bcc.n	800a7ea <ip4_input+0x16>
 800a816:	8933      	ldrh	r3, [r6, #8]
 800a818:	42a3      	cmp	r3, r4
 800a81a:	d3e6      	bcc.n	800a7ea <ip4_input+0x16>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a81c:	693b      	ldr	r3, [r7, #16]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a81e:	464d      	mov	r5, r9
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a820:	4c47      	ldr	r4, [pc, #284]	; (800a940 <ip4_input+0x16c>)
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800a822:	f04f 0a01 	mov.w	sl, #1
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
        first = 0;
        netif = netif_list;
 800a826:	f8df b11c 	ldr.w	fp, [pc, #284]	; 800a944 <ip4_input+0x170>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a82a:	6163      	str	r3, [r4, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6123      	str	r3, [r4, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a830:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 800a834:	07db      	lsls	r3, r3, #31
 800a836:	d405      	bmi.n	800a844 <ip4_input+0x70>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800a838:	f1ba 0f00 	cmp.w	sl, #0
 800a83c:	d00e      	beq.n	800a85c <ip4_input+0x88>
        first = 0;
        netif = netif_list;
 800a83e:	f8db 5000 	ldr.w	r5, [fp]
 800a842:	e00c      	b.n	800a85e <ip4_input+0x8a>
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a844:	686b      	ldr	r3, [r5, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0f6      	beq.n	800a838 <ip4_input+0x64>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a84a:	6960      	ldr	r0, [r4, #20]
 800a84c:	4283      	cmp	r3, r0
 800a84e:	d063      	beq.n	800a918 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(ip_current_dest_addr(), netif)
 800a850:	4629      	mov	r1, r5
 800a852:	f000 f8d8 	bl	800aa06 <ip4_addr_isbroadcast_u32>
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a856:	2800      	cmp	r0, #0
 800a858:	d0ee      	beq.n	800a838 <ip4_input+0x64>
 800a85a:	e05d      	b.n	800a918 <ip4_input+0x144>
      }
      if (first) {
        first = 0;
        netif = netif_list;
      } else {
        netif = netif->next;
 800a85c:	682d      	ldr	r5, [r5, #0]
      }
      if (netif == inp) {
 800a85e:	454d      	cmp	r5, r9
 800a860:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 800a864:	bf08      	it	eq
 800a866:	682d      	ldreq	r5, [r5, #0]
      }
    } while (netif != NULL);
 800a868:	2d00      	cmp	r5, #0
 800a86a:	d1e1      	bne.n	800a830 <ip4_input+0x5c>
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800a86c:	7a7b      	ldrb	r3, [r7, #9]
 800a86e:	2b11      	cmp	r3, #17
 800a870:	d152      	bne.n	800a918 <ip4_input+0x144>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800a872:	eb07 0308 	add.w	r3, r7, r8
 800a876:	885b      	ldrh	r3, [r3, #2]
 800a878:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800a87c:	d14c      	bne.n	800a918 <ip4_input+0x144>
 800a87e:	464d      	mov	r5, r9
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a880:	2d00      	cmp	r5, #0
 800a882:	d0b2      	beq.n	800a7ea <ip4_input+0x16>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a884:	88fb      	ldrh	r3, [r7, #6]
 800a886:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1ad      	bne.n	800a7ea <ip4_input+0x16>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800a88e:	60a7      	str	r7, [r4, #8]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a890:	f1c8 0100 	rsb	r1, r8, #0
 800a894:	4630      	mov	r0, r6
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a896:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a940 <ip4_input+0x16c>
  ip_data.current_input_netif = inp;
 800a89a:	e884 0220 	stmia.w	r4, {r5, r9}
  ip_data.current_ip4_header = iphdr;
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a89e:	783b      	ldrb	r3, [r7, #0]
 800a8a0:	f003 030f 	and.w	r3, r3, #15
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	81a3      	strh	r3, [r4, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a8a8:	f000 fbce 	bl	800b048 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800a8ac:	7a7b      	ldrb	r3, [r7, #9]
 800a8ae:	2b06      	cmp	r3, #6
 800a8b0:	d00d      	beq.n	800a8ce <ip4_input+0xfa>
 800a8b2:	2b11      	cmp	r3, #17
 800a8b4:	d006      	beq.n	800a8c4 <ip4_input+0xf0>
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d10e      	bne.n	800a8d8 <ip4_input+0x104>
      break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff fea7 	bl	800a610 <icmp_input>
      break;
 800a8c2:	e021      	b.n	800a908 <ip4_input+0x134>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f002 ff6e 	bl	800d7a8 <udp_input>
      break;
 800a8cc:	e01c      	b.n	800a908 <ip4_input+0x134>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f001 fdd3 	bl	800c47c <tcp_input>
      break;
 800a8d6:	e017      	b.n	800a908 <ip4_input+0x134>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(ip_current_dest_addr(), netif) &&
 800a8d8:	4629      	mov	r1, r5
 800a8da:	f8da 0014 	ldr.w	r0, [sl, #20]
 800a8de:	f000 f892 	bl	800aa06 <ip4_addr_isbroadcast_u32>
 800a8e2:	b970      	cbnz	r0, 800a902 <ip4_input+0x12e>
 800a8e4:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a8e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8ec:	2be0      	cmp	r3, #224	; 0xe0
 800a8ee:	d008      	beq.n	800a902 <ip4_input+0x12e>
          !ip_addr_ismulticast(ip_current_dest_addr())) {
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800a8f0:	4641      	mov	r1, r8
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f000 fbaf 	bl	800b056 <pbuf_header_force>
        p->payload = iphdr;
 800a8f8:	6077      	str	r7, [r6, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff ff03 	bl	800a708 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800a902:	4630      	mov	r0, r6
 800a904:	f000 fbae 	bl	800b064 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a908:	2300      	movs	r3, #0
 800a90a:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 800a90c:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 800a90e:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a910:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a912:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a914:	6163      	str	r3, [r4, #20]

  return ERR_OK;
 800a916:	e00f      	b.n	800a938 <ip4_input+0x164>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip_addr_isany_val(*ip_current_src_addr())
 800a918:	6920      	ldr	r0, [r4, #16]
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d0b0      	beq.n	800a880 <ip4_input+0xac>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip_addr_isbroadcast(ip_current_src_addr(), inp)) ||
 800a91e:	4649      	mov	r1, r9
 800a920:	f000 f871 	bl	800aa06 <ip4_addr_isbroadcast_u32>
 800a924:	2800      	cmp	r0, #0
 800a926:	f47f af60 	bne.w	800a7ea <ip4_input+0x16>
 800a92a:	4b05      	ldr	r3, [pc, #20]	; (800a940 <ip4_input+0x16c>)
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a932:	2be0      	cmp	r3, #224	; 0xe0
 800a934:	d1a4      	bne.n	800a880 <ip4_input+0xac>
 800a936:	e758      	b.n	800a7ea <ip4_input+0x16>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800a938:	2000      	movs	r0, #0
 800a93a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93e:	bf00      	nop
 800a940:	20043138 	.word	0x20043138
 800a944:	20049240 	.word	0x20049240

0800a948 <ip_input>:
    }
    return ip4_input(p, inp);
  }
  return ERR_VAL;
#else /* LWIP_IPV6 */
  return ip4_input(p, inp);
 800a948:	f7ff bf44 	b.w	800a7d4 <ip4_input>

0800a94c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a94c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a950:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800a954:	4606      	mov	r6, r0
 800a956:	4689      	mov	r9, r1
 800a958:	469a      	mov	sl, r3
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
 800a95a:	4615      	mov	r5, r2
 800a95c:	b36a      	cbz	r2, 800a9ba <ip4_output_if_src+0x6e>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800a95e:	2114      	movs	r1, #20
 800a960:	f000 fb72 	bl	800b048 <pbuf_header>
 800a964:	4607      	mov	r7, r0
 800a966:	2800      	cmp	r0, #0
 800a968:	d133      	bne.n	800a9d2 <ip4_output_if_src+0x86>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a96a:	6874      	ldr	r4, [r6, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800a96c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a970:	f884 a008 	strb.w	sl, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a974:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a976:	682b      	ldr	r3, [r5, #0]
 800a978:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a97a:	2345      	movs	r3, #69	; 0x45
 800a97c:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800a97e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800a982:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 800a984:	8930      	ldrh	r0, [r6, #8]
 800a986:	f7fe ff2d 	bl	80097e4 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a98a:	71a7      	strb	r7, [r4, #6]
 800a98c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
 800a98e:	4f13      	ldr	r7, [pc, #76]	; (800a9dc <ip4_output_if_src+0x90>)
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
 800a990:	8060      	strh	r0, [r4, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, htons(ip_id));
 800a992:	8838      	ldrh	r0, [r7, #0]
 800a994:	f7fe ff26 	bl	80097e4 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a998:	883b      	ldrh	r3, [r7, #0]
    IPH_LEN_SET(iphdr, htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, htons(ip_id));
 800a99a:	80a0      	strh	r0, [r4, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a99c:	3301      	adds	r3, #1
 800a99e:	803b      	strh	r3, [r7, #0]

    if (src == NULL) {
 800a9a0:	f1b9 0f00 	cmp.w	r9, #0
 800a9a4:	d102      	bne.n	800a9ac <ip4_output_if_src+0x60>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY);
 800a9a6:	4b0e      	ldr	r3, [pc, #56]	; (800a9e0 <ip4_output_if_src+0x94>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	e001      	b.n	800a9b0 <ip4_output_if_src+0x64>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a9ac:	f8d9 3000 	ldr.w	r3, [r9]
 800a9b0:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	72a3      	strb	r3, [r4, #10]
 800a9b6:	72e3      	strb	r3, [r4, #11]
 800a9b8:	e004      	b.n	800a9c4 <ip4_output_if_src+0x78>
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a9ba:	6843      	ldr	r3, [r0, #4]
 800a9bc:	ad02      	add	r5, sp, #8
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	f845 3d04 	str.w	r3, [r5, #-4]!
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a9c4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a9c8:	462a      	mov	r2, r5
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	4640      	mov	r0, r8
 800a9ce:	4798      	blx	r3
 800a9d0:	e001      	b.n	800a9d6 <ip4_output_if_src+0x8a>
    if (pbuf_header(p, IP_HLEN)) {
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a9d2:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800a9d6:	b002      	add	sp, #8
 800a9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9dc:	20042dc4 	.word	0x20042dc4
 800a9e0:	0802c9dc 	.word	0x0802c9dc

0800a9e4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a9e4:	b4f0      	push	{r4, r5, r6, r7}
 800a9e6:	9c06      	ldr	r4, [sp, #24]
 800a9e8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800a9ec:	f89d 6014 	ldrb.w	r6, [sp, #20]
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  if (dest != IP_HDRINCL) {
 800a9f0:	b11a      	cbz	r2, 800a9fa <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800a9f2:	b109      	cbz	r1, 800a9f8 <ip4_output_if+0x14>
 800a9f4:	680f      	ldr	r7, [r1, #0]
 800a9f6:	b907      	cbnz	r7, 800a9fa <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800a9f8:	1d21      	adds	r1, r4, #4

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a9fa:	9406      	str	r4, [sp, #24]
 800a9fc:	9605      	str	r6, [sp, #20]
 800a9fe:	9504      	str	r5, [sp, #16]
#endif /* IP_OPTIONS_SEND */
}
 800aa00:	bcf0      	pop	{r4, r5, r6, r7}

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800aa02:	f7ff bfa3 	b.w	800a94c <ip4_output_if_src>

0800aa06 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800aa06:	1e43      	subs	r3, r0, #1
 800aa08:	3303      	adds	r3, #3
 800aa0a:	d813      	bhi.n	800aa34 <ip4_addr_isbroadcast_u32+0x2e>
 800aa0c:	f891 2033 	ldrb.w	r2, [r1, #51]	; 0x33
 800aa10:	f002 0202 	and.w	r2, r2, #2
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800aa14:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 800aa18:	b17a      	cbz	r2, 800aa3a <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800aa1a:	684a      	ldr	r2, [r1, #4]
 800aa1c:	4290      	cmp	r0, r2
 800aa1e:	d00b      	beq.n	800aa38 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800aa20:	688b      	ldr	r3, [r1, #8]
 800aa22:	4042      	eors	r2, r0
 800aa24:	421a      	tst	r2, r3
 800aa26:	d107      	bne.n	800aa38 <ip4_addr_isbroadcast_u32+0x32>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800aa28:	43db      	mvns	r3, r3
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
      (addr == IPADDR_ANY)) {
    return 1;
 800aa2a:	4383      	bics	r3, r0
 800aa2c:	bf0c      	ite	eq
 800aa2e:	2301      	moveq	r3, #1
 800aa30:	2300      	movne	r3, #0
 800aa32:	e002      	b.n	800aa3a <ip4_addr_isbroadcast_u32+0x34>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e000      	b.n	800aa3a <ip4_addr_isbroadcast_u32+0x34>
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800aa38:	2300      	movs	r3, #0
  }
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	4770      	bx	lr
	...

0800aa40 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;
#if NO_SYS
  u32_t now, diff;
#endif

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aa44:	2008      	movs	r0, #8
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800aa46:	460e      	mov	r6, r1
 800aa48:	4615      	mov	r5, r2
  struct sys_timeo *timeout, *t;
#if NO_SYS
  u32_t now, diff;
#endif

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aa4a:	f000 fa45 	bl	800aed8 <memp_malloc>
  if (timeout == NULL) {
 800aa4e:	b300      	cbz	r0, 800aa92 <sys_timeout+0x52>
  } else {
    diff = now - timeouts_last_time;
  }
#endif

  timeout->next = NULL;
 800aa50:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800aa52:	4910      	ldr	r1, [pc, #64]	; (800aa94 <sys_timeout+0x54>)
    diff = now - timeouts_last_time;
  }
#endif

  timeout->next = NULL;
  timeout->h = handler;
 800aa54:	6086      	str	r6, [r0, #8]
  } else {
    diff = now - timeouts_last_time;
  }
#endif

  timeout->next = NULL;
 800aa56:	6003      	str	r3, [r0, #0]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800aa58:	680b      	ldr	r3, [r1, #0]
  }
#endif

  timeout->next = NULL;
  timeout->h = handler;
  timeout->arg = arg;
 800aa5a:	60c5      	str	r5, [r0, #12]
#if NO_SYS
  timeout->time = msecs + diff;
#else
  timeout->time = msecs;
 800aa5c:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800aa5e:	b12b      	cbz	r3, 800aa6c <sys_timeout+0x2c>
    next_timeout = timeout;
    return;
  }

  if (next_timeout->time > msecs) {
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	4294      	cmp	r4, r2
 800aa64:	d208      	bcs.n	800aa78 <sys_timeout+0x38>
    next_timeout->time -= msecs;
 800aa66:	1b12      	subs	r2, r2, r4
 800aa68:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800aa6a:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800aa6c:	6008      	str	r0, [r1, #0]
 800aa6e:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
      if (t->next == NULL || t->next->time > timeout->time) {
 800aa70:	6854      	ldr	r4, [r2, #4]
 800aa72:	42a1      	cmp	r1, r4
 800aa74:	d308      	bcc.n	800aa88 <sys_timeout+0x48>
 800aa76:	4613      	mov	r3, r2
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
 800aa78:	6842      	ldr	r2, [r0, #4]
 800aa7a:	6859      	ldr	r1, [r3, #4]
 800aa7c:	1a51      	subs	r1, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800aa7e:	681a      	ldr	r2, [r3, #0]
    next_timeout->time -= msecs;
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      timeout->time -= t->time;
 800aa80:	6041      	str	r1, [r0, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800aa82:	2a00      	cmp	r2, #0
 800aa84:	d1f4      	bne.n	800aa70 <sys_timeout+0x30>
 800aa86:	e001      	b.n	800aa8c <sys_timeout+0x4c>
        if (t->next != NULL) {
          t->next->time -= timeout->time;
 800aa88:	1a61      	subs	r1, r4, r1
 800aa8a:	6051      	str	r1, [r2, #4]
        }
        timeout->next = t->next;
 800aa8c:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 800aa8e:	6018      	str	r0, [r3, #0]
        break;
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	20042dcc 	.word	0x20042dcc

0800aa98 <tcp_timer_needed>:
 */
void
tcp_timer_needed(void)
{
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aa98:	4b08      	ldr	r3, [pc, #32]	; (800aabc <tcp_timer_needed+0x24>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	b962      	cbnz	r2, 800aab8 <tcp_timer_needed+0x20>
 800aa9e:	4a08      	ldr	r2, [pc, #32]	; (800aac0 <tcp_timer_needed+0x28>)
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	b912      	cbnz	r2, 800aaaa <tcp_timer_needed+0x12>
 800aaa4:	4a07      	ldr	r2, [pc, #28]	; (800aac4 <tcp_timer_needed+0x2c>)
 800aaa6:	6812      	ldr	r2, [r2, #0]
 800aaa8:	b132      	cbz	r2, 800aab8 <tcp_timer_needed+0x20>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800aaaa:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aaac:	4906      	ldr	r1, [pc, #24]	; (800aac8 <tcp_timer_needed+0x30>)
 800aaae:	20fa      	movs	r0, #250	; 0xfa
tcp_timer_needed(void)
{
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800aab0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aab2:	2200      	movs	r2, #0
 800aab4:	f7ff bfc4 	b.w	800aa40 <sys_timeout>
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	20042dc8 	.word	0x20042dc8
 800aac0:	2004924c 	.word	0x2004924c
 800aac4:	2004925c 	.word	0x2004925c
 800aac8:	0800aacd 	.word	0x0800aacd

0800aacc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800aacc:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800aace:	f000 ffff 	bl	800bad0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800aad2:	4b08      	ldr	r3, [pc, #32]	; (800aaf4 <tcpip_tcp_timer+0x28>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	b913      	cbnz	r3, 800aade <tcpip_tcp_timer+0x12>
 800aad8:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <tcpip_tcp_timer+0x2c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	b133      	cbz	r3, 800aaec <tcpip_tcp_timer+0x20>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aade:	2200      	movs	r2, #0
 800aae0:	4906      	ldr	r1, [pc, #24]	; (800aafc <tcpip_tcp_timer+0x30>)
 800aae2:	20fa      	movs	r0, #250	; 0xfa
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  }
}
 800aae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* call TCP timer handler */
  tcp_tmr();
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aae8:	f7ff bfaa 	b.w	800aa40 <sys_timeout>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800aaec:	4a04      	ldr	r2, [pc, #16]	; (800ab00 <tcpip_tcp_timer+0x34>)
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	bd08      	pop	{r3, pc}
 800aaf2:	bf00      	nop
 800aaf4:	2004924c 	.word	0x2004924c
 800aaf8:	2004925c 	.word	0x2004925c
 800aafc:	0800aacd 	.word	0x0800aacd
 800ab00:	20042dc8 	.word	0x20042dc8

0800ab04 <sys_timeouts_init>:
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ab04:	b508      	push	{r3, lr}
#if LWIP_IPV4
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800ab06:	2200      	movs	r2, #0
 800ab08:	4909      	ldr	r1, [pc, #36]	; (800ab30 <sys_timeouts_init+0x2c>)
 800ab0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ab0e:	f7ff ff97 	bl	800aa40 <sys_timeout>
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 800ab12:	2200      	movs	r2, #0
 800ab14:	4907      	ldr	r1, [pc, #28]	; (800ab34 <sys_timeouts_init+0x30>)
 800ab16:	f64e 2060 	movw	r0, #60000	; 0xea60
 800ab1a:	f7ff ff91 	bl	800aa40 <sys_timeout>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 800ab1e:	2200      	movs	r2, #0
 800ab20:	4905      	ldr	r1, [pc, #20]	; (800ab38 <sys_timeouts_init+0x34>)
 800ab22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
#endif
}
 800ab26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 800ab2a:	f7ff bf89 	b.w	800aa40 <sys_timeout>
 800ab2e:	bf00      	nop
 800ab30:	0800ab75 	.word	0x0800ab75
 800ab34:	0800ab59 	.word	0x0800ab59
 800ab38:	0800ab3d 	.word	0x0800ab3d

0800ab3c <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
 800ab3c:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
 800ab3e:	f7ff fd29 	bl	800a594 <dhcp_fine_tmr>
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 800ab42:	2200      	movs	r2, #0
 800ab44:	4903      	ldr	r1, [pc, #12]	; (800ab54 <dhcp_timer_fine+0x18>)
 800ab46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800ab4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
dhcp_timer_fine(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
 800ab4e:	f7ff bf77 	b.w	800aa40 <sys_timeout>
 800ab52:	bf00      	nop
 800ab54:	0800ab3d 	.word	0x0800ab3d

0800ab58 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
 800ab58:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
 800ab5a:	f7ff fc89 	bl	800a470 <dhcp_coarse_tmr>
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 800ab5e:	2200      	movs	r2, #0
 800ab60:	4903      	ldr	r1, [pc, #12]	; (800ab70 <dhcp_timer_coarse+0x18>)
 800ab62:	f64e 2060 	movw	r0, #60000	; 0xea60
}
 800ab66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
dhcp_timer_coarse(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
 800ab6a:	f7ff bf69 	b.w	800aa40 <sys_timeout>
 800ab6e:	bf00      	nop
 800ab70:	0800ab59 	.word	0x0800ab59

0800ab74 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
 800ab74:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
 800ab76:	f003 f93b 	bl	800ddf0 <etharp_tmr>
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	4903      	ldr	r1, [pc, #12]	; (800ab8c <arp_timer+0x18>)
 800ab7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800ab82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
arp_timer(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
 800ab86:	f7ff bf5b 	b.w	800aa40 <sys_timeout>
 800ab8a:	bf00      	nop
 800ab8c:	0800ab75 	.word	0x0800ab75

0800ab90 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ab90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
 800ab94:	4f16      	ldr	r7, [pc, #88]	; (800abf0 <sys_timeouts_mbox_fetch+0x60>)
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ab96:	4605      	mov	r5, r0
 800ab98:	460e      	mov	r6, r1
 800ab9a:	46b8      	mov	r8, r7
  struct sys_timeo *tmptimeout;
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
 800ab9c:	683a      	ldr	r2, [r7, #0]
 800ab9e:	b92a      	cbnz	r2, 800abac <sys_timeouts_mbox_fetch+0x1c>
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
 800aba0:	4631      	mov	r1, r6
 800aba2:	4628      	mov	r0, r5
      } else {
        next_timeout->time = 0;
      }
    }
  }
}
 800aba4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sys_timeout_handler handler;
  void *arg;

 again:
  if (!next_timeout) {
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
 800aba8:	f003 bb60 	b.w	800e26c <sys_arch_mbox_fetch>
  } else {
    if (next_timeout->time > 0) {
 800abac:	6852      	ldr	r2, [r2, #4]
 800abae:	b97a      	cbnz	r2, 800abd0 <sys_timeouts_mbox_fetch+0x40>

    if (time_needed == SYS_ARCH_TIMEOUT) {
      /* If time == SYS_ARCH_TIMEOUT, a timeout occurred before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
 800abb0:	f8d8 1000 	ldr.w	r1, [r8]
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800abb4:	2008      	movs	r0, #8
    if (time_needed == SYS_ARCH_TIMEOUT) {
      /* If time == SYS_ARCH_TIMEOUT, a timeout occurred before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
      next_timeout = tmptimeout->next;
 800abb6:	680b      	ldr	r3, [r1, #0]
      handler = tmptimeout->h;
 800abb8:	688c      	ldr	r4, [r1, #8]
    if (time_needed == SYS_ARCH_TIMEOUT) {
      /* If time == SYS_ARCH_TIMEOUT, a timeout occurred before a message
         could be fetched. We should now call the timeout handler and
         deallocate the memory allocated for the timeout. */
      tmptimeout = next_timeout;
      next_timeout = tmptimeout->next;
 800abba:	f8c8 3000 	str.w	r3, [r8]
      handler = tmptimeout->h;
      arg = tmptimeout->arg;
 800abbe:	f8d1 900c 	ldr.w	r9, [r1, #12]
      if (handler != NULL) {
        LWIP_DEBUGF(TIMERS_DEBUG, ("stmf calling h=%s arg=%p\n",
          tmptimeout->handler_name, arg));
      }
#endif /* LWIP_DEBUG_TIMERNAMES */
      memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800abc2:	f000 f995 	bl	800aef0 <memp_free>
      if (handler != NULL) {
 800abc6:	2c00      	cmp	r4, #0
 800abc8:	d0e8      	beq.n	800ab9c <sys_timeouts_mbox_fetch+0xc>
        /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
           timeout handler function. */
        LOCK_TCPIP_CORE();
        handler(arg);
 800abca:	4648      	mov	r0, r9
 800abcc:	47a0      	blx	r4
 800abce:	e7e5      	b.n	800ab9c <sys_timeouts_mbox_fetch+0xc>
 again:
  if (!next_timeout) {
    time_needed = sys_arch_mbox_fetch(mbox, msg, 0);
  } else {
    if (next_timeout->time > 0) {
      time_needed = sys_arch_mbox_fetch(mbox, msg, next_timeout->time);
 800abd0:	4631      	mov	r1, r6
 800abd2:	4628      	mov	r0, r5
 800abd4:	f003 fb4a 	bl	800e26c <sys_arch_mbox_fetch>
    } else {
      time_needed = SYS_ARCH_TIMEOUT;
    }

    if (time_needed == SYS_ARCH_TIMEOUT) {
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d0e9      	beq.n	800abb0 <sys_timeouts_mbox_fetch+0x20>
      goto again;
    } else {
      /* If time != SYS_ARCH_TIMEOUT, a message was received before the timeout
         occured. The time variable is set to the number of
         milliseconds we waited for the message. */
      if (time_needed < next_timeout->time) {
 800abdc:	4b04      	ldr	r3, [pc, #16]	; (800abf0 <sys_timeouts_mbox_fetch+0x60>)
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	6853      	ldr	r3, [r2, #4]
 800abe2:	4298      	cmp	r0, r3
        next_timeout->time -= time_needed;
 800abe4:	bf34      	ite	cc
 800abe6:	1a1b      	subcc	r3, r3, r0
      } else {
        next_timeout->time = 0;
 800abe8:	2300      	movcs	r3, #0
 800abea:	6053      	str	r3, [r2, #4]
 800abec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abf0:	20042dcc 	.word	0x20042dcc

0800abf4 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800abf4:	4b0b      	ldr	r3, [pc, #44]	; (800ac24 <mem_init+0x30>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800abf6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800abfa:	4a0b      	ldr	r2, [pc, #44]	; (800ac28 <mem_init+0x34>)
 800abfc:	f023 0303 	bic.w	r3, r3, #3
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ac00:	490a      	ldr	r1, [pc, #40]	; (800ac2c <mem_init+0x38>)

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ac02:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 800ac04:	2200      	movs	r2, #0

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800ac06:	8018      	strh	r0, [r3, #0]
  mem->prev = 0;
 800ac08:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ac0a:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ac0c:	181a      	adds	r2, r3, r0
 800ac0e:	600a      	str	r2, [r1, #0]
  ram_end->used = 1;
 800ac10:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 800ac12:	8010      	strh	r0, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ac14:	8050      	strh	r0, [r2, #2]
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  ram_end->used = 1;
 800ac16:	7111      	strb	r1, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ac18:	4a05      	ldr	r2, [pc, #20]	; (800ac30 <mem_init+0x3c>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ac1a:	4806      	ldr	r0, [pc, #24]	; (800ac34 <mem_init+0x40>)
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ac1c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ac1e:	f003 bb62 	b.w	800e2e6 <sys_sem_new>
 800ac22:	bf00      	nop
 800ac24:	20043153 	.word	0x20043153
 800ac28:	20042ddc 	.word	0x20042ddc
 800ac2c:	20042dd4 	.word	0x20042dd4
 800ac30:	20042dd0 	.word	0x20042dd0
 800ac34:	20042dd8 	.word	0x20042dd8

0800ac38 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d046      	beq.n	800acce <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ac40:	4b23      	ldr	r3, [pc, #140]	; (800acd0 <mem_free+0x98>)
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	461d      	mov	r5, r3
 800ac46:	4290      	cmp	r0, r2
 800ac48:	d341      	bcc.n	800acce <mem_free+0x96>
 800ac4a:	4b22      	ldr	r3, [pc, #136]	; (800acd4 <mem_free+0x9c>)
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	461e      	mov	r6, r3
 800ac50:	4290      	cmp	r0, r2
 800ac52:	d23c      	bcs.n	800acce <mem_free+0x96>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ac54:	2100      	movs	r1, #0
 800ac56:	4820      	ldr	r0, [pc, #128]	; (800acd8 <mem_free+0xa0>)
 800ac58:	f003 fb63 	bl	800e322 <sys_arch_sem_wait>
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 800ac5c:	2300      	movs	r3, #0

  if (mem < lfree) {
 800ac5e:	491f      	ldr	r1, [pc, #124]	; (800acdc <mem_free+0xa4>)
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ac60:	f1a4 0208 	sub.w	r2, r4, #8
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
 800ac64:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 800ac68:	680b      	ldr	r3, [r1, #0]
 800ac6a:	429a      	cmp	r2, r3
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	f834 5c08 	ldrh.w	r5, [r4, #-8]
  /* ... and is now unused. */
  mem->used = 0;

  if (mem < lfree) {
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ac72:	bf38      	it	cc
 800ac74:	600a      	strcc	r2, [r1, #0]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
 800ac76:	1958      	adds	r0, r3, r5
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ac78:	4282      	cmp	r2, r0
 800ac7a:	d010      	beq.n	800ac9e <mem_free+0x66>
 800ac7c:	7907      	ldrb	r7, [r0, #4]
 800ac7e:	b977      	cbnz	r7, 800ac9e <mem_free+0x66>
 800ac80:	6836      	ldr	r6, [r6, #0]
 800ac82:	42b0      	cmp	r0, r6
 800ac84:	d00b      	beq.n	800ac9e <mem_free+0x66>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ac86:	680e      	ldr	r6, [r1, #0]
 800ac88:	42b0      	cmp	r0, r6
      lfree = mem;
 800ac8a:	bf04      	itt	eq
 800ac8c:	4813      	ldreq	r0, [pc, #76]	; (800acdc <mem_free+0xa4>)
 800ac8e:	6002      	streq	r2, [r0, #0]
    }
    mem->next = nmem->next;
 800ac90:	5b58      	ldrh	r0, [r3, r5]
 800ac92:	f824 0c08 	strh.w	r0, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800ac96:	5b58      	ldrh	r0, [r3, r5]
 800ac98:	1ad5      	subs	r5, r2, r3
 800ac9a:	4418      	add	r0, r3
 800ac9c:	8045      	strh	r5, [r0, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800ac9e:	f834 0c06 	ldrh.w	r0, [r4, #-6]
 800aca2:	181d      	adds	r5, r3, r0
  if (pmem != mem && pmem->used == 0) {
 800aca4:	42aa      	cmp	r2, r5
 800aca6:	d00d      	beq.n	800acc4 <mem_free+0x8c>
 800aca8:	792e      	ldrb	r6, [r5, #4]
 800acaa:	b95e      	cbnz	r6, 800acc4 <mem_free+0x8c>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800acac:	6809      	ldr	r1, [r1, #0]
 800acae:	428a      	cmp	r2, r1
      lfree = pmem;
 800acb0:	bf04      	itt	eq
 800acb2:	4a0a      	ldreq	r2, [pc, #40]	; (800acdc <mem_free+0xa4>)
 800acb4:	6015      	streq	r5, [r2, #0]
    }
    pmem->next = mem->next;
 800acb6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800acba:	521a      	strh	r2, [r3, r0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800acbc:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800acc0:	4413      	add	r3, r2
 800acc2:	8058      	strh	r0, [r3, #2]
  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800acc4:	4804      	ldr	r0, [pc, #16]	; (800acd8 <mem_free+0xa0>)
}
 800acc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800acca:	f003 bb4a 	b.w	800e362 <sys_sem_signal>
 800acce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd0:	20042ddc 	.word	0x20042ddc
 800acd4:	20042dd4 	.word	0x20042dd4
 800acd8:	20042dd8 	.word	0x20042dd8
 800acdc:	20042dd0 	.word	0x20042dd0

0800ace0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ace4:	3103      	adds	r1, #3
 800ace6:	f64f 76fc 	movw	r6, #65532	; 0xfffc
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800acea:	4604      	mov	r4, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800acec:	400e      	ands	r6, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800acee:	2e0b      	cmp	r6, #11
 800acf0:	d903      	bls.n	800acfa <mem_trim+0x1a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800acf2:	f5b6 5fa0 	cmp.w	r6, #5120	; 0x1400
 800acf6:	d901      	bls.n	800acfc <mem_trim+0x1c>
 800acf8:	e04f      	b.n	800ad9a <mem_trim+0xba>
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);

  if (newsize < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800acfa:	260c      	movs	r6, #12

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800acfc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800adb4 <mem_trim+0xd4>
 800ad00:	f8d8 5000 	ldr.w	r5, [r8]
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ad04:	42a5      	cmp	r5, r4
 800ad06:	d84b      	bhi.n	800ada0 <mem_trim+0xc0>
 800ad08:	4b27      	ldr	r3, [pc, #156]	; (800ada8 <mem_trim+0xc8>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	429c      	cmp	r4, r3
 800ad0e:	d247      	bcs.n	800ada0 <mem_trim+0xc0>
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ad10:	f1a4 0308 	sub.w	r3, r4, #8

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ad14:	f834 7c08 	ldrh.w	r7, [r4, #-8]
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ad18:	1b5d      	subs	r5, r3, r5

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ad1a:	3f08      	subs	r7, #8
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800ad1c:	b2ad      	uxth	r5, r5

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ad1e:	1b7f      	subs	r7, r7, r5
 800ad20:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
 800ad22:	42b7      	cmp	r7, r6
 800ad24:	d339      	bcc.n	800ad9a <mem_trim+0xba>
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800ad26:	d03b      	beq.n	800ada0 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ad28:	2100      	movs	r1, #0
 800ad2a:	4820      	ldr	r0, [pc, #128]	; (800adac <mem_trim+0xcc>)
 800ad2c:	f003 faf9 	bl	800e322 <sys_arch_sem_wait>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800ad30:	f8d8 3000 	ldr.w	r3, [r8]
 800ad34:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800ad38:	1819      	adds	r1, r3, r0
  if (mem2->used == 0) {
 800ad3a:	790a      	ldrb	r2, [r1, #4]
 800ad3c:	b97a      	cbnz	r2, 800ad5e <mem_trim+0x7e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ad3e:	f105 0208 	add.w	r2, r5, #8
  mem2 = (struct mem *)(void *)&ram[mem->next];
  if (mem2->used == 0) {
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800ad42:	5a1f      	ldrh	r7, [r3, r0]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    if (lfree == mem2) {
 800ad44:	481a      	ldr	r0, [pc, #104]	; (800adb0 <mem_trim+0xd0>)
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ad46:	4432      	add	r2, r6
    if (lfree == mem2) {
 800ad48:	6806      	ldr	r6, [r0, #0]
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ad4a:	b292      	uxth	r2, r2
    if (lfree == mem2) {
 800ad4c:	42b1      	cmp	r1, r6
 800ad4e:	eb03 0102 	add.w	r1, r3, r2
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ad52:	bf08      	it	eq
 800ad54:	6001      	streq	r1, [r0, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
    mem2->used = 0;
 800ad56:	2000      	movs	r0, #0
 800ad58:	7108      	strb	r0, [r1, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ad5a:	529f      	strh	r7, [r3, r2]
 800ad5c:	e010      	b.n	800ad80 <mem_trim+0xa0>
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ad5e:	f106 0214 	add.w	r2, r6, #20
 800ad62:	42ba      	cmp	r2, r7
 800ad64:	d815      	bhi.n	800ad92 <mem_trim+0xb2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ad66:	f105 0108 	add.w	r1, r5, #8
 800ad6a:	1872      	adds	r2, r6, r1
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 800ad6c:	4e10      	ldr	r6, [pc, #64]	; (800adb0 <mem_trim+0xd0>)
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ad6e:	b292      	uxth	r2, r2
    mem2 = (struct mem *)(void *)&ram[ptr2];
    if (mem2 < lfree) {
 800ad70:	6837      	ldr	r7, [r6, #0]
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ad72:	1899      	adds	r1, r3, r2
    if (mem2 < lfree) {
 800ad74:	42b9      	cmp	r1, r7
      lfree = mem2;
 800ad76:	bf38      	it	cc
 800ad78:	6031      	strcc	r1, [r6, #0]
    }
    mem2->used = 0;
 800ad7a:	2600      	movs	r6, #0
 800ad7c:	710e      	strb	r6, [r1, #4]
    mem2->next = mem->next;
 800ad7e:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 800ad80:	804d      	strh	r5, [r1, #2]
    mem->next = ptr2;
 800ad82:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad86:	5a99      	ldrh	r1, [r3, r2]
 800ad88:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ad8c:	bf1c      	itt	ne
 800ad8e:	185b      	addne	r3, r3, r1
 800ad90:	805a      	strhne	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ad92:	4806      	ldr	r0, [pc, #24]	; (800adac <mem_trim+0xcc>)
 800ad94:	f003 fae5 	bl	800e362 <sys_sem_signal>
 800ad98:	e002      	b.n	800ada0 <mem_trim+0xc0>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
    return NULL;
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	4620      	mov	r0, r4
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800ada2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada6:	bf00      	nop
 800ada8:	20042dd4 	.word	0x20042dd4
 800adac:	20042dd8 	.word	0x20042dd8
 800adb0:	20042dd0 	.word	0x20042dd0
 800adb4:	20042ddc 	.word	0x20042ddc

0800adb8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800adbc:	2800      	cmp	r0, #0
 800adbe:	d058      	beq.n	800ae72 <mem_malloc+0xba>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800adc0:	3003      	adds	r0, #3
 800adc2:	f64f 74fc 	movw	r4, #65532	; 0xfffc
 800adc6:	4004      	ands	r4, r0

  if (size < MIN_SIZE_ALIGNED) {
 800adc8:	2c0b      	cmp	r4, #11
 800adca:	d903      	bls.n	800add4 <mem_malloc+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800adcc:	f5b4 5fa0 	cmp.w	r4, #5120	; 0x1400
 800add0:	d901      	bls.n	800add6 <mem_malloc+0x1e>
 800add2:	e04d      	b.n	800ae70 <mem_malloc+0xb8>
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);

  if (size < MIN_SIZE_ALIGNED) {
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800add4:	240c      	movs	r4, #12
  if (size > MEM_SIZE_ALIGNED) {
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800add6:	2100      	movs	r1, #0
 800add8:	4827      	ldr	r0, [pc, #156]	; (800ae78 <mem_malloc+0xc0>)
 800adda:	f003 faa2 	bl	800e322 <sys_arch_sem_wait>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800adde:	4e27      	ldr	r6, [pc, #156]	; (800ae7c <mem_malloc+0xc4>)
 800ade0:	4827      	ldr	r0, [pc, #156]	; (800ae80 <mem_malloc+0xc8>)
 800ade2:	f5c4 58a0 	rsb	r8, r4, #5120	; 0x1400
 800ade6:	6831      	ldr	r1, [r6, #0]
 800ade8:	6802      	ldr	r2, [r0, #0]
 800adea:	1a53      	subs	r3, r2, r1
 800adec:	b29b      	uxth	r3, r3
 800adee:	4543      	cmp	r3, r8
 800adf0:	d23b      	bcs.n	800ae6a <mem_malloc+0xb2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800adf2:	18cd      	adds	r5, r1, r3
 800adf4:	f831 e003 	ldrh.w	lr, [r1, r3]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800adf8:	f895 c004 	ldrb.w	ip, [r5, #4]
 800adfc:	f1bc 0f00 	cmp.w	ip, #0
 800ae00:	d131      	bne.n	800ae66 <mem_malloc+0xae>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ae02:	f1ae 0708 	sub.w	r7, lr, #8
 800ae06:	1aff      	subs	r7, r7, r3
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ae08:	42bc      	cmp	r4, r7
 800ae0a:	d82c      	bhi.n	800ae66 <mem_malloc+0xae>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ae0c:	f104 0814 	add.w	r8, r4, #20
 800ae10:	4547      	cmp	r7, r8
 800ae12:	d312      	bcc.n	800ae3a <mem_malloc+0x82>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800ae14:	3408      	adds	r4, #8
 800ae16:	441c      	add	r4, r3
 800ae18:	b2a4      	uxth	r4, r4
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800ae1a:	190f      	adds	r7, r1, r4
          mem2->used = 0;
 800ae1c:	f887 c004 	strb.w	ip, [r7, #4]
          mem2->next = mem->next;
 800ae20:	f821 e004 	strh.w	lr, [r1, r4]
          mem2->prev = ptr;
 800ae24:	807b      	strh	r3, [r7, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 800ae26:	2301      	movs	r3, #1
          mem2 = (struct mem *)(void *)&ram[ptr2];
          mem2->used = 0;
          mem2->next = mem->next;
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ae28:	802c      	strh	r4, [r5, #0]
          mem->used = 1;
 800ae2a:	712b      	strb	r3, [r5, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae2c:	5b0b      	ldrh	r3, [r1, r4]
 800ae2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ae32:	d004      	beq.n	800ae3e <mem_malloc+0x86>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ae34:	4419      	add	r1, r3
 800ae36:	804c      	strh	r4, [r1, #2]
 800ae38:	e001      	b.n	800ae3e <mem_malloc+0x86>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ae3e:	42aa      	cmp	r2, r5
 800ae40:	d10a      	bne.n	800ae58 <mem_malloc+0xa0>
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ae42:	4b10      	ldr	r3, [pc, #64]	; (800ae84 <mem_malloc+0xcc>)
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ae44:	6831      	ldr	r1, [r6, #0]
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	7914      	ldrb	r4, [r2, #4]
 800ae4a:	b124      	cbz	r4, 800ae56 <mem_malloc+0x9e>
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d002      	beq.n	800ae56 <mem_malloc+0x9e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ae50:	8812      	ldrh	r2, [r2, #0]
 800ae52:	440a      	add	r2, r1
 800ae54:	e7f8      	b.n	800ae48 <mem_malloc+0x90>
          }
          lfree = cur;
 800ae56:	6002      	str	r2, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ae58:	4807      	ldr	r0, [pc, #28]	; (800ae78 <mem_malloc+0xc0>)
 800ae5a:	f003 fa82 	bl	800e362 <sys_sem_signal>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800ae5e:	f105 0008 	add.w	r0, r5, #8
 800ae62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800ae66:	4673      	mov	r3, lr
 800ae68:	e7c1      	b.n	800adee <mem_malloc+0x36>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ae6a:	4803      	ldr	r0, [pc, #12]	; (800ae78 <mem_malloc+0xc0>)
 800ae6c:	f003 fa79 	bl	800e362 <sys_sem_signal>
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
    return NULL;
 800ae70:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 800ae72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae76:	bf00      	nop
 800ae78:	20042dd8 	.word	0x20042dd8
 800ae7c:	20042ddc 	.word	0x20042ddc
 800ae80:	20042dd0 	.word	0x20042dd0
 800ae84:	20042dd4 	.word	0x20042dd4

0800ae88 <memp_init_pool>:
memp_init_pool(const struct memp_desc *desc)
{
  int i;
  struct memp *memp;
  
  *desc->tab = NULL;
 800ae88:	68c3      	ldr	r3, [r0, #12]
 800ae8a:	2200      	movs	r2, #0
#endif /* MEMP_OVERFLOW_CHECK */


void
memp_init_pool(const struct memp_desc *desc)
{
 800ae8c:	b530      	push	{r4, r5, lr}
  int i;
  struct memp *memp;
  
  *desc->tab = NULL;
 800ae8e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ae90:	6883      	ldr	r3, [r0, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ae92:	8844      	ldrh	r4, [r0, #2]
{
  int i;
  struct memp *memp;
  
  *desc->tab = NULL;
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ae94:	3303      	adds	r3, #3
 800ae96:	f023 0303 	bic.w	r3, r3, #3
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ae9a:	42a2      	cmp	r2, r4
 800ae9c:	da07      	bge.n	800aeae <memp_init_pool+0x26>
    memp->next = *desc->tab;
 800ae9e:	68c1      	ldr	r1, [r0, #12]
  struct memp *memp;
  
  *desc->tab = NULL;
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aea0:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800aea2:	680d      	ldr	r5, [r1, #0]
 800aea4:	601d      	str	r5, [r3, #0]
    *desc->tab = memp;
 800aea6:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aea8:	8801      	ldrh	r1, [r0, #0]
 800aeaa:	440b      	add	r3, r1
 800aeac:	e7f5      	b.n	800ae9a <memp_init_pool+0x12>
  }  

#if MEMP_OVERFLOW_CHECK
  memp_overflow_init(desc);
#endif /* MEMP_OVERFLOW_CHECK */
}
 800aeae:	bd30      	pop	{r4, r5, pc}

0800aeb0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	2400      	movs	r4, #0
    MEMP_STATS_AVAIL(avail, i, memp_pools[i]->num);
  }

  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
    memp_init_pool(memp_pools[i]);
 800aeb4:	4d04      	ldr	r5, [pc, #16]	; (800aec8 <memp_init+0x18>)
 800aeb6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800aeba:	3401      	adds	r4, #1
 800aebc:	f7ff ffe4 	bl	800ae88 <memp_init_pool>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_pools[i]->num);
  }

  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
 800aec0:	2c0b      	cmp	r4, #11
 800aec2:	d1f8      	bne.n	800aeb6 <memp_init+0x6>

#if MEMP_OVERFLOW_CHECK
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
 800aec4:	bd38      	pop	{r3, r4, r5, pc}
 800aec6:	bf00      	nop
 800aec8:	2001004c 	.word	0x2001004c

0800aecc <memp_malloc_pool>:
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800aecc:	68c3      	ldr	r3, [r0, #12]
 800aece:	6818      	ldr	r0, [r3, #0]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

  if (memp != NULL) {
 800aed0:	b108      	cbz	r0, 800aed6 <memp_malloc_pool+0xa>
    *desc->tab = memp->next;
 800aed2:	6802      	ldr	r2, [r0, #0]
 800aed4:	601a      	str	r2, [r3, #0]
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
 800aed6:	4770      	bx	lr

0800aed8 <memp_malloc>:
#endif
{
  void *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aed8:	280a      	cmp	r0, #10
 800aeda:	d804      	bhi.n	800aee6 <memp_malloc+0xe>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = memp_malloc_pool(memp_pools[type]);
 800aedc:	4b03      	ldr	r3, [pc, #12]	; (800aeec <memp_malloc+0x14>)
 800aede:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800aee2:	f7ff bff3 	b.w	800aecc <memp_malloc_pool>
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
}
 800aee6:	2000      	movs	r0, #0
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	2001004c 	.word	0x2001004c

0800aef0 <memp_free>:
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aef0:	280a      	cmp	r0, #10
 800aef2:	d806      	bhi.n	800af02 <memp_free+0x12>
  MEMP_STATS_DEC(used, type);

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  do_memp_free_pool(memp_pools[type], mem, &old_first);
#else
  do_memp_free_pool(memp_pools[type], mem);
 800aef4:	4b03      	ldr	r3, [pc, #12]	; (800af04 <memp_free+0x14>)
 800aef6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800aefa:	68db      	ldr	r3, [r3, #12]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

  memp->next = *desc->tab;
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	600a      	str	r2, [r1, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first)
    *old_first = *desc->tab;
#endif

  *desc->tab = memp;
 800af00:	6019      	str	r1, [r3, #0]
 800af02:	4770      	bx	lr
 800af04:	2001004c 	.word	0x2001004c

0800af08 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800af08:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
}

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
 800af0c:	4601      	mov	r1, r0
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800af0e:	071b      	lsls	r3, r3, #28
 800af10:	d502      	bpl.n	800af18 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 800af12:	3104      	adds	r1, #4
 800af14:	f002 bf5c 	b.w	800ddd0 <etharp_request>
 800af18:	4770      	bx	lr

0800af1a <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800af1a:	4770      	bx	lr

0800af1c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	4605      	mov	r5, r0
  ip4_addr_t new_addr = (ipaddr ? *ipaddr : *IP4_ADDR_ANY);
 800af20:	460c      	mov	r4, r1
 800af22:	b109      	cbz	r1, 800af28 <netif_set_ipaddr+0xc>
 800af24:	680b      	ldr	r3, [r1, #0]
 800af26:	e001      	b.n	800af2c <netif_set_ipaddr+0x10>
 800af28:	4b0b      	ldr	r3, [pc, #44]	; (800af58 <netif_set_ipaddr+0x3c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
  /* address is actually being changed? */
  if (ip4_addr_cmp(&new_addr, netif_ip4_addr(netif)) == 0) {
 800af2c:	686a      	ldr	r2, [r5, #4]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d011      	beq.n	800af56 <netif_set_ipaddr+0x3a>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ipv4_addr_changed(netif_ip4_addr(netif), ipaddr);
 800af32:	1d2e      	adds	r6, r5, #4
 800af34:	4621      	mov	r1, r4
 800af36:	4630      	mov	r0, r6
 800af38:	f000 ffbc 	bl	800beb4 <tcp_netif_ipv4_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ipv4_addr_changed(netif_ip4_addr(netif), ipaddr);
 800af3c:	4621      	mov	r1, r4
 800af3e:	4630      	mov	r0, r6
 800af40:	f002 fe06 	bl	800db50 <udp_netif_ipv4_addr_changed>
#endif /* LWIP_UDP */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800af44:	b104      	cbz	r4, 800af48 <netif_set_ipaddr+0x2c>
 800af46:	6824      	ldr	r4, [r4, #0]
 800af48:	606c      	str	r4, [r5, #4]
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af4a:	b124      	cbz	r4, 800af56 <netif_set_ipaddr+0x3a>
 800af4c:	4628      	mov	r0, r5
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800af4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af52:	f7ff bfd9 	b.w	800af08 <netif_issue_reports.part.0>
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	0802c9dc 	.word	0x0802c9dc

0800af5c <netif_set_addr>:
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800af5c:	b102      	cbz	r2, 800af60 <netif_set_addr+0x4>
 800af5e:	6812      	ldr	r2, [r2, #0]
 800af60:	6082      	str	r2, [r0, #8]
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800af62:	b103      	cbz	r3, 800af66 <netif_set_addr+0xa>
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60c3      	str	r3, [r0, #12]
    const ip4_addr_t *gw)
{
  netif_set_netmask(netif, netmask);
  netif_set_gw(netif, gw);
  /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
  netif_set_ipaddr(netif, ipaddr);
 800af68:	f7ff bfd8 	b.w	800af1c <netif_set_ipaddr>

0800af6c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800af6e:	2603      	movs	r6, #3
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 800af70:	4f12      	ldr	r7, [pc, #72]	; (800afbc <netif_add+0x50>)

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800af72:	2500      	movs	r5, #0
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800af74:	4604      	mov	r4, r0
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800af76:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800af7a:	9e06      	ldr	r6, [sp, #24]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800af7c:	6045      	str	r5, [r0, #4]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800af7e:	6206      	str	r6, [r0, #32]
  netif->num = netif_num++;
 800af80:	783e      	ldrb	r6, [r7, #0]
  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  ip_addr_set_zero_ip4(&netif->netmask);
 800af82:	6085      	str	r5, [r0, #8]
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 800af84:	f106 0e01 	add.w	lr, r6, #1
 800af88:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
  netif->input = input;
 800af8c:	9e08      	ldr	r6, [sp, #32]

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  ip_addr_set_zero_ip4(&netif->netmask);
  ip_addr_set_zero_ip4(&netif->gw);
 800af8e:	60c5      	str	r5, [r0, #12]
    netif_ip6_addr_set_state(netif, i, IP6_ADDR_INVALID);
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800af90:	f880 5033 	strb.w	r5, [r0, #51]	; 0x33
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
 800af94:	6245      	str	r5, [r0, #36]	; 0x24
#endif /* LWIP_IPV6_DHCP6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800af96:	61c5      	str	r5, [r0, #28]
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
  netif->input = input;
 800af98:	6106      	str	r6, [r0, #16]
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  netif->num = netif_num++;
 800af9a:	f887 e000 	strb.w	lr, [r7]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800af9e:	f7ff ffdd 	bl	800af5c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800afa2:	4620      	mov	r0, r4
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	4798      	blx	r3
 800afa8:	b928      	cbnz	r0, 800afb6 <netif_add+0x4a>
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <netif_add+0x54>)
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800afac:	4620      	mov	r0, r4
  if (init(netif) != ERR_OK) {
    return NULL;
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800afb2:	601c      	str	r4, [r3, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800afb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  netif_set_addr(netif, ipaddr, netmask, gw);
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
    return NULL;
 800afb6:	4628      	mov	r0, r5
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
}
 800afb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afba:	bf00      	nop
 800afbc:	20042e0c 	.word	0x20042e0c
 800afc0:	20049240 	.word	0x20049240

0800afc4 <netif_set_default>:
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800afc4:	4b01      	ldr	r3, [pc, #4]	; (800afcc <netif_set_default+0x8>)
 800afc6:	6018      	str	r0, [r3, #0]
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	20049244 	.word	0x20049244

0800afd0 <netif_set_up>:
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800afd0:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 800afd4:	07d1      	lsls	r1, r2, #31
 800afd6:	d409      	bmi.n	800afec <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 800afd8:	f042 0101 	orr.w	r1, r2, #1

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800afdc:	0752      	lsls	r2, r2, #29
 */
void
netif_set_up(struct netif *netif)
{
  if (!(netif->flags & NETIF_FLAG_UP)) {
    netif->flags |= NETIF_FLAG_UP;
 800afde:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800afe2:	d503      	bpl.n	800afec <netif_set_up+0x1c>
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800afe4:	6843      	ldr	r3, [r0, #4]
 800afe6:	b10b      	cbz	r3, 800afec <netif_set_up+0x1c>
 800afe8:	f7ff bf8e 	b.w	800af08 <netif_issue_reports.part.0>
 800afec:	4770      	bx	lr

0800afee <pbuf_header_impl.part.0>:
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
 800afee:	2900      	cmp	r1, #0
 *
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
 800aff0:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
 800aff2:	da05      	bge.n	800b000 <pbuf_header_impl.part.0+0x12>
    increment_magnitude = -header_size_increment;
 800aff4:	424c      	negs	r4, r1
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800aff6:	8943      	ldrh	r3, [r0, #10]
  if ((header_size_increment == 0) || (p == NULL)) {
    return 0;
  }

  if (header_size_increment < 0) {
    increment_magnitude = -header_size_increment;
 800aff8:	b2a4      	uxth	r4, r4
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800affa:	42a3      	cmp	r3, r4
 800affc:	d201      	bcs.n	800b002 <pbuf_header_impl.part.0+0x14>
 800affe:	e021      	b.n	800b044 <pbuf_header_impl.part.0+0x56>
  } else {
    increment_magnitude = header_size_increment;
 800b000:	b28c      	uxth	r4, r1
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800b002:	7b05      	ldrb	r5, [r0, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800b004:	6843      	ldr	r3, [r0, #4]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800b006:	b10d      	cbz	r5, 800b00c <pbuf_header_impl.part.0+0x1e>
 800b008:	2d03      	cmp	r5, #3
 800b00a:	d105      	bne.n	800b018 <pbuf_header_impl.part.0+0x2a>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800b00c:	1a5b      	subs	r3, r3, r1
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b00e:	f100 0210 	add.w	r2, r0, #16
 800b012:	4293      	cmp	r3, r2
 800b014:	d20c      	bcs.n	800b030 <pbuf_header_impl.part.0+0x42>
 800b016:	e015      	b.n	800b044 <pbuf_header_impl.part.0+0x56>
      p->payload = payload;
      /* bail out unsuccessfully */
      return 1;
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800b018:	3d01      	subs	r5, #1
 800b01a:	2d01      	cmp	r5, #1
 800b01c:	d812      	bhi.n	800b044 <pbuf_header_impl.part.0+0x56>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800b01e:	2900      	cmp	r1, #0
 800b020:	da03      	bge.n	800b02a <pbuf_header_impl.part.0+0x3c>
 800b022:	8942      	ldrh	r2, [r0, #10]
 800b024:	42a2      	cmp	r2, r4
 800b026:	d30d      	bcc.n	800b044 <pbuf_header_impl.part.0+0x56>
 800b028:	e001      	b.n	800b02e <pbuf_header_impl.part.0+0x40>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
    } else if ((header_size_increment > 0) && force) {
 800b02a:	d00b      	beq.n	800b044 <pbuf_header_impl.part.0+0x56>
 800b02c:	b152      	cbz	r2, 800b044 <pbuf_header_impl.part.0+0x56>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800b02e:	1a5b      	subs	r3, r3, r1
 800b030:	6043      	str	r3, [r0, #4]
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800b032:	b289      	uxth	r1, r1
 800b034:	8943      	ldrh	r3, [r0, #10]
 800b036:	440b      	add	r3, r1
 800b038:	8143      	strh	r3, [r0, #10]
  p->tot_len += header_size_increment;
 800b03a:	8903      	ldrh	r3, [r0, #8]
 800b03c:	4419      	add	r1, r3
 800b03e:	8101      	strh	r1, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800b040:	2000      	movs	r0, #0
 800b042:	bd30      	pop	{r4, r5, pc}
  }

  if (header_size_increment < 0) {
    increment_magnitude = -header_size_increment;
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b044:	2001      	movs	r0, #1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
}
 800b046:	bd30      	pop	{r4, r5, pc}

0800b048 <pbuf_header>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 800b048:	b119      	cbz	r1, 800b052 <pbuf_header+0xa>
 800b04a:	b110      	cbz	r0, 800b052 <pbuf_header+0xa>
 800b04c:	2200      	movs	r2, #0
 800b04e:	f7ff bfce 	b.w	800afee <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
}
 800b052:	2000      	movs	r0, #0
 800b054:	4770      	bx	lr

0800b056 <pbuf_header_force>:
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
 800b056:	b119      	cbz	r1, 800b060 <pbuf_header_force+0xa>
 800b058:	b110      	cbz	r0, 800b060 <pbuf_header_force+0xa>
 800b05a:	2201      	movs	r2, #1
 800b05c:	f7ff bfc7 	b.w	800afee <pbuf_header_impl.part.0>
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
}
 800b060:	2000      	movs	r0, #0
 800b062:	4770      	bx	lr

0800b064 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b064:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b066:	4601      	mov	r1, r0
 800b068:	b1d8      	cbz	r0, 800b0a2 <pbuf_free+0x3e>
 800b06a:	2400      	movs	r4, #0
 800b06c:	b2e0      	uxtb	r0, r4
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b06e:	b1b9      	cbz	r1, 800b0a0 <pbuf_free+0x3c>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b070:	89cb      	ldrh	r3, [r1, #14]
 800b072:	3b01      	subs	r3, #1
 800b074:	b29b      	uxth	r3, r3
 800b076:	81cb      	strh	r3, [r1, #14]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b078:	b99b      	cbnz	r3, 800b0a2 <pbuf_free+0x3e>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800b07a:	7b0b      	ldrb	r3, [r1, #12]
    ref = --(p->ref);
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b07c:	680d      	ldr	r5, [r1, #0]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d101      	bne.n	800b086 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800b082:	200a      	movs	r0, #10
 800b084:	e003      	b.n	800b08e <pbuf_free+0x2a>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800b086:	3b01      	subs	r3, #1
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d803      	bhi.n	800b094 <pbuf_free+0x30>
          memp_free(MEMP_PBUF, p);
 800b08c:	2009      	movs	r0, #9
 800b08e:	f7ff ff2f 	bl	800aef0 <memp_free>
 800b092:	e002      	b.n	800b09a <pbuf_free+0x36>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800b094:	4608      	mov	r0, r1
 800b096:	f7ff fdcf 	bl	800ac38 <mem_free>
 800b09a:	3401      	adds	r4, #1
        }
      }
      count++;
      /* proceed to next pbuf */
      p = q;
 800b09c:	4629      	mov	r1, r5
 800b09e:	e7e5      	b.n	800b06c <pbuf_free+0x8>
 800b0a0:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}

0800b0a4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a8:	460e      	mov	r6, r1
 800b0aa:	4617      	mov	r7, r2
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800b0ac:	2804      	cmp	r0, #4
 800b0ae:	d87c      	bhi.n	800b1aa <pbuf_alloc+0x106>
 800b0b0:	e8df f000 	tbb	[pc, r0]
 800b0b4:	07050309 	.word	0x07050309
 800b0b8:	07          	.byte	0x07
 800b0b9:	00          	.byte	0x00
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
    break;
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b0ba:	2522      	movs	r5, #34	; 0x22
 800b0bc:	e004      	b.n	800b0c8 <pbuf_alloc+0x24>
    break;
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b0be:	250e      	movs	r5, #14
    break;
 800b0c0:	e002      	b.n	800b0c8 <pbuf_alloc+0x24>
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
    break;
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800b0c2:	2500      	movs	r5, #0
    break;
 800b0c4:	e000      	b.n	800b0c8 <pbuf_alloc+0x24>

  /* determine header offset */
  switch (layer) {
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b0c6:	2536      	movs	r5, #54	; 0x36
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  }

  switch (type) {
 800b0c8:	2f03      	cmp	r7, #3
 800b0ca:	d86e      	bhi.n	800b1aa <pbuf_alloc+0x106>
 800b0cc:	e8df f007 	tbb	[pc, r7]
 800b0d0:	025b5b43 	.word	0x025b5b43
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b0d4:	200a      	movs	r0, #10
 800b0d6:	f7ff feff 	bl	800aed8 <memp_malloc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800b0da:	4604      	mov	r4, r0
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d064      	beq.n	800b1aa <pbuf_alloc+0x106>
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
 800b0e0:	2203      	movs	r2, #3
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b0e2:	1943      	adds	r3, r0, r5
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
    p->next = NULL;
 800b0e4:	2700      	movs	r7, #0
    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800b0e6:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b0e8:	4415      	add	r5, r2
    }
    p->type = type;
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b0ea:	3313      	adds	r3, #19
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccessfully */
        return NULL;
      }
      q->type = type;
 800b0ec:	4690      	mov	r8, r2
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
 800b0ee:	7302      	strb	r2, [r0, #12]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b0f0:	f025 0503 	bic.w	r5, r5, #3
    }
    p->type = type;
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b0f4:	f023 0303 	bic.w	r3, r3, #3
    if (p == NULL) {
      PBUF_POOL_IS_EMPTY();
      return NULL;
    }
    p->type = type;
    p->next = NULL;
 800b0f8:	6007      	str	r7, [r0, #0]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b0fa:	f5c5 65be 	rsb	r5, r5, #1520	; 0x5f0
    }
    p->type = type;
    p->next = NULL;

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800b0fe:	6043      	str	r3, [r0, #4]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800b100:	2301      	movs	r3, #1
    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800b102:	8106      	strh	r6, [r0, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b104:	3504      	adds	r5, #4
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800b106:	81c3      	strh	r3, [r0, #14]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800b108:	42b5      	cmp	r5, r6
 800b10a:	bf28      	it	cs
 800b10c:	4635      	movcs	r5, r6
 800b10e:	8145      	strh	r5, [r0, #10]
    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800b110:	1b75      	subs	r5, r6, r5
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800b112:	2d00      	cmp	r5, #0
 800b114:	dd42      	ble.n	800b19c <pbuf_alloc+0xf8>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b116:	200a      	movs	r0, #10
 800b118:	f7ff fede 	bl	800aed8 <memp_malloc>
      if (q == NULL) {
 800b11c:	4606      	mov	r6, r0
 800b11e:	b928      	cbnz	r0, 800b12c <pbuf_alloc+0x88>
        PBUF_POOL_IS_EMPTY();
        /* free chain so far allocated */
        pbuf_free(p);
 800b120:	4620      	mov	r0, r4
 800b122:	f7ff ff9f 	bl	800b064 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800b126:	4630      	mov	r0, r6
 800b128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b12c:	f240 53f4 	movw	r3, #1524	; 0x5f4
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b130:	f100 0210 	add.w	r2, r0, #16
        /* free chain so far allocated */
        pbuf_free(p);
        /* bail out unsuccessfully */
        return NULL;
      }
      q->type = type;
 800b134:	f880 800c 	strb.w	r8, [r0, #12]
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b138:	42ab      	cmp	r3, r5
        pbuf_free(p);
        /* bail out unsuccessfully */
        return NULL;
      }
      q->type = type;
      q->flags = 0;
 800b13a:	7347      	strb	r7, [r0, #13]
      q->next = NULL;
 800b13c:	6007      	str	r7, [r0, #0]
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b13e:	bf28      	it	cs
 800b140:	462b      	movcs	r3, r5
      }
      q->type = type;
      q->flags = 0;
      q->next = NULL;
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800b142:	f8c9 0000 	str.w	r0, [r9]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b146:	6042      	str	r2, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800b148:	2201      	movs	r2, #1
      q->next = NULL;
      /* make previous pbuf point to this pbuf */
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
 800b14a:	8105      	strh	r5, [r0, #8]
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800b14c:	4681      	mov	r9, r0
      r->next = q;
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b14e:	8143      	strh	r3, [r0, #10]
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800b150:	1aed      	subs	r5, r5, r3
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800b152:	81c2      	strh	r2, [r0, #14]
 800b154:	e7dd      	b.n	800b112 <pbuf_alloc+0x6e>
    /*r->next = NULL;*/

    break;
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b156:	f105 0013 	add.w	r0, r5, #19
 800b15a:	1cf3      	adds	r3, r6, #3
 800b15c:	f020 0003 	bic.w	r0, r0, #3
 800b160:	f023 0303 	bic.w	r3, r3, #3
 800b164:	4418      	add	r0, r3
 800b166:	b280      	uxth	r0, r0
 800b168:	f7ff fe26 	bl	800adb8 <mem_malloc>
    if (p == NULL) {
 800b16c:	4604      	mov	r4, r0
 800b16e:	b1e0      	cbz	r0, 800b1aa <pbuf_alloc+0x106>
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b170:	1943      	adds	r3, r0, r5
    p->len = p->tot_len = length;
 800b172:	8106      	strh	r6, [r0, #8]
 800b174:	8146      	strh	r6, [r0, #10]
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
    if (p == NULL) {
      return NULL;
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b176:	3313      	adds	r3, #19
 800b178:	f023 0303 	bic.w	r3, r3, #3
 800b17c:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
    p->next = NULL;
 800b17e:	2300      	movs	r3, #0
 800b180:	6003      	str	r3, [r0, #0]
    p->type = type;
 800b182:	7303      	strb	r3, [r0, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800b184:	e00a      	b.n	800b19c <pbuf_alloc+0xf8>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b186:	2009      	movs	r0, #9
 800b188:	f7ff fea6 	bl	800aed8 <memp_malloc>
    if (p == NULL) {
 800b18c:	4604      	mov	r4, r0
 800b18e:	b160      	cbz	r0, 800b1aa <pbuf_alloc+0x106>
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800b190:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 800b192:	8106      	strh	r6, [r0, #8]
 800b194:	8146      	strh	r6, [r0, #10]
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800b196:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
    p->next = NULL;
 800b198:	6003      	str	r3, [r0, #0]
    p->type = type;
 800b19a:	7307      	strb	r7, [r0, #12]
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
 800b19c:	2301      	movs	r3, #1
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b19e:	4620      	mov	r0, r4
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  }
  /* set reference count */
  p->ref = 1;
 800b1a0:	81e3      	strh	r3, [r4, #14]
  /* set flags */
  p->flags = 0;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	7363      	strb	r3, [r4, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b1a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    p->next = NULL;
    p->type = type;
    break;
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
 800b1aa:	2000      	movs	r0, #0
  p->ref = 1;
  /* set flags */
  p->flags = 0;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
}
 800b1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b1b0 <pbuf_realloc>:
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b1b0:	8902      	ldrh	r2, [r0, #8]
 800b1b2:	428a      	cmp	r2, r1
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4604      	mov	r4, r0
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b1b8:	d91f      	bls.n	800b1fa <pbuf_realloc+0x4a>
 800b1ba:	460d      	mov	r5, r1

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b1bc:	8963      	ldrh	r3, [r4, #10]
 800b1be:	429d      	cmp	r5, r3
 800b1c0:	d907      	bls.n	800b1d2 <pbuf_realloc+0x22>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800b1c2:	1aed      	subs	r5, r5, r3
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 800b1c4:	8923      	ldrh	r3, [r4, #8]
 800b1c6:	1a9b      	subs	r3, r3, r2
  rem_len = new_len;
  q = p;
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800b1c8:	b2ad      	uxth	r5, r5
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
 800b1ca:	440b      	add	r3, r1
 800b1cc:	8123      	strh	r3, [r4, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b1ce:	6824      	ldr	r4, [r4, #0]
 800b1d0:	e7f4      	b.n	800b1bc <pbuf_realloc+0xc>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800b1d2:	7b22      	ldrb	r2, [r4, #12]
 800b1d4:	b94a      	cbnz	r2, 800b1ea <pbuf_realloc+0x3a>
 800b1d6:	429d      	cmp	r5, r3
 800b1d8:	d007      	beq.n	800b1ea <pbuf_realloc+0x3a>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800b1da:	6861      	ldr	r1, [r4, #4]
 800b1dc:	4620      	mov	r0, r4
 800b1de:	1b09      	subs	r1, r1, r4
 800b1e0:	4429      	add	r1, r5
 800b1e2:	b289      	uxth	r1, r1
 800b1e4:	f7ff fd7c 	bl	800ace0 <mem_trim>
 800b1e8:	4604      	mov	r4, r0
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  q->tot_len = q->len;

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b1ea:	6820      	ldr	r0, [r4, #0]
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b1ec:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800b1ee:	8125      	strh	r5, [r4, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b1f0:	b108      	cbz	r0, 800b1f6 <pbuf_realloc+0x46>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b1f2:	f7ff ff37 	bl	800b064 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}

0800b1fc <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
 800b1fc:	4603      	mov	r3, r0
  u8_t len;

  len = 0;
  while (p != NULL) {
 800b1fe:	2200      	movs	r2, #0
 800b200:	b2d0      	uxtb	r0, r2
 800b202:	3201      	adds	r2, #1
 800b204:	b10b      	cbz	r3, 800b20a <pbuf_clen+0xe>
    ++len;
    p = p->next;
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	e7fa      	b.n	800b200 <pbuf_clen+0x4>
  }
  return len;
}
 800b20a:	4770      	bx	lr

0800b20c <pbuf_ref>:
void
pbuf_ref(struct pbuf *p)
{
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
 800b20c:	b110      	cbz	r0, 800b214 <pbuf_ref+0x8>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
 800b20e:	89c3      	ldrh	r3, [r0, #14]
 800b210:	3301      	adds	r3, #1
 800b212:	81c3      	strh	r3, [r0, #14]
 800b214:	4770      	bx	lr

0800b216 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b216:	b510      	push	{r4, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b218:	b150      	cbz	r0, 800b230 <pbuf_cat+0x1a>
 800b21a:	b901      	cbnz	r1, 800b21e <pbuf_cat+0x8>
 800b21c:	bd10      	pop	{r4, pc}
 800b21e:	8902      	ldrh	r2, [r0, #8]
 800b220:	890b      	ldrh	r3, [r1, #8]
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b222:	6804      	ldr	r4, [r0, #0]
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800b224:	4413      	add	r3, r2
 800b226:	8103      	strh	r3, [r0, #8]

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b228:	b10c      	cbz	r4, 800b22e <pbuf_cat+0x18>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800b22a:	4620      	mov	r0, r4
 800b22c:	e7f7      	b.n	800b21e <pbuf_cat+0x8>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b22e:	6001      	str	r1, [r0, #0]
 800b230:	bd10      	pop	{r4, pc}

0800b232 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b232:	b510      	push	{r4, lr}
  pbuf_cat(h, t);
 800b234:	f7ff ffef 	bl	800b216 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b238:	4608      	mov	r0, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  pbuf_cat(h, t);
  /* t is now referenced by h */
  pbuf_ref(t);
 800b23e:	f7ff bfe5 	b.w	800b20c <pbuf_ref>

0800b242 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
 800b242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b246:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b248:	4605      	mov	r5, r0
 800b24a:	b918      	cbnz	r0, 800b254 <pbuf_copy+0x12>
 800b24c:	f06f 000e 	mvn.w	r0, #14
 800b250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b254:	2900      	cmp	r1, #0
 800b256:	d0f9      	beq.n	800b24c <pbuf_copy+0xa>
 800b258:	8902      	ldrh	r2, [r0, #8]
 800b25a:	890b      	ldrh	r3, [r1, #8]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d3f5      	bcc.n	800b24c <pbuf_copy+0xa>
 800b260:	f04f 0800 	mov.w	r8, #0
 800b264:	4647      	mov	r7, r8

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b266:	8966      	ldrh	r6, [r4, #10]
 800b268:	896b      	ldrh	r3, [r5, #10]
 800b26a:	ebc8 0606 	rsb	r6, r8, r6
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b26e:	6868      	ldr	r0, [r5, #4]

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b270:	1bdb      	subs	r3, r3, r7
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b272:	6861      	ldr	r1, [r4, #4]
 800b274:	4438      	add	r0, r7

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b276:	42b3      	cmp	r3, r6
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b278:	4441      	add	r1, r8
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b27a:	bfb4      	ite	lt
 800b27c:	b29e      	uxthlt	r6, r3
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b27e:	b2b6      	uxthge	r6, r6
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b280:	4632      	mov	r2, r6
    offset_to += len;
 800b282:	4437      	add	r7, r6
    offset_from += len;
 800b284:	4446      	add	r6, r8
      len = p_from->len - offset_from;
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b286:	f006 fabe 	bl	8011806 <memcpy>
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 800b28a:	8963      	ldrh	r3, [r4, #10]
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
    offset_to += len;
 800b28c:	b2bf      	uxth	r7, r7
    offset_from += len;
 800b28e:	fa1f f886 	uxth.w	r8, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
 800b292:	4543      	cmp	r3, r8
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800b294:	896b      	ldrh	r3, [r5, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
 800b296:	bf9c      	itt	ls
 800b298:	6824      	ldrls	r4, [r4, #0]
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
      /* on to next p_from (if any) */
      offset_from = 0;
 800b29a:	f04f 0800 	movls.w	r8, #0
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800b29e:	42bb      	cmp	r3, r7
 800b2a0:	d104      	bne.n	800b2ac <pbuf_copy+0x6a>
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800b2a2:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800b2a4:	b90d      	cbnz	r5, 800b2aa <pbuf_copy+0x68>
 800b2a6:	b164      	cbz	r4, 800b2c2 <pbuf_copy+0x80>
 800b2a8:	e7d0      	b.n	800b24c <pbuf_copy+0xa>
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
 800b2aa:	2700      	movs	r7, #0
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b2ac:	b11c      	cbz	r4, 800b2b6 <pbuf_copy+0x74>
 800b2ae:	8962      	ldrh	r2, [r4, #10]
 800b2b0:	8923      	ldrh	r3, [r4, #8]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d008      	beq.n	800b2c8 <pbuf_copy+0x86>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b2b6:	896a      	ldrh	r2, [r5, #10]
 800b2b8:	892b      	ldrh	r3, [r5, #8]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d008      	beq.n	800b2d0 <pbuf_copy+0x8e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b2be:	2c00      	cmp	r4, #0
 800b2c0:	d1d1      	bne.n	800b266 <pbuf_copy+0x24>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d0f3      	beq.n	800b2b6 <pbuf_copy+0x74>
 800b2ce:	e002      	b.n	800b2d6 <pbuf_copy+0x94>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b2d0:	682b      	ldr	r3, [r5, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0f3      	beq.n	800b2be <pbuf_copy+0x7c>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b2d6:	f06f 0005 	mvn.w	r0, #5
 800b2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2de <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b2de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2e2:	4688      	mov	r8, r1
 800b2e4:	4691      	mov	r9, r2
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	b328      	cbz	r0, 800b336 <pbuf_copy_partial+0x58>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b2ea:	b331      	cbz	r1, 800b33a <pbuf_copy_partial+0x5c>
 800b2ec:	2400      	movs	r4, #0
 800b2ee:	4627      	mov	r7, r4
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b2f0:	f1b9 0f00 	cmp.w	r9, #0
 800b2f4:	d024      	beq.n	800b340 <pbuf_copy_partial+0x62>
 800b2f6:	b31e      	cbz	r6, 800b340 <pbuf_copy_partial+0x62>
    if ((offset != 0) && (offset >= p->len)) {
 800b2f8:	b12b      	cbz	r3, 800b306 <pbuf_copy_partial+0x28>
 800b2fa:	8971      	ldrh	r1, [r6, #10]
 800b2fc:	428b      	cmp	r3, r1
 800b2fe:	d302      	bcc.n	800b306 <pbuf_copy_partial+0x28>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800b300:	1a5b      	subs	r3, r3, r1
 800b302:	b29b      	uxth	r3, r3
 800b304:	e015      	b.n	800b332 <pbuf_copy_partial+0x54>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800b306:	8975      	ldrh	r5, [r6, #10]
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b308:	eb08 0007 	add.w	r0, r8, r7
 800b30c:	6871      	ldr	r1, [r6, #4]
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800b30e:	1aed      	subs	r5, r5, r3
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b310:	4419      	add	r1, r3
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800b312:	b2ad      	uxth	r5, r5
 800b314:	454d      	cmp	r5, r9
 800b316:	bf28      	it	cs
 800b318:	464d      	movcs	r5, r9
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b31a:	462a      	mov	r2, r5
      copied_total += buf_copy_len;
 800b31c:	442c      	add	r4, r5
      left += buf_copy_len;
 800b31e:	442f      	add	r7, r5
      len -= buf_copy_len;
 800b320:	ebc5 0509 	rsb	r5, r5, r9
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b324:	f006 fa6f 	bl	8011806 <memcpy>
      copied_total += buf_copy_len;
      left += buf_copy_len;
      len -= buf_copy_len;
      offset = 0;
 800b328:	2300      	movs	r3, #0
      buf_copy_len = p->len - offset;
      if (buf_copy_len > len)
          buf_copy_len = len;
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
      copied_total += buf_copy_len;
 800b32a:	b2a4      	uxth	r4, r4
      left += buf_copy_len;
 800b32c:	b2bf      	uxth	r7, r7
      len -= buf_copy_len;
 800b32e:	fa1f f985 	uxth.w	r9, r5
  if ((buf == NULL) || (dataptr == NULL)) {
    return 0;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b332:	6836      	ldr	r6, [r6, #0]
 800b334:	e7dc      	b.n	800b2f0 <pbuf_copy_partial+0x12>
 800b336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b33a:	4608      	mov	r0, r1
 800b33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b340:	4620      	mov	r0, r4
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800b342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800b348 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b348:	4a12      	ldr	r2, [pc, #72]	; (800b394 <tcp_new_port+0x4c>)
 800b34a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b34e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b350:	8810      	ldrh	r0, [r2, #0]
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b352:	f64f 75ff 	movw	r5, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b356:	4e10      	ldr	r6, [pc, #64]	; (800b398 <tcp_new_port+0x50>)
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b358:	42a8      	cmp	r0, r5
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b35a:	f04f 0100 	mov.w	r1, #0
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b35e:	bf16      	itet	ne
 800b360:	3001      	addne	r0, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b362:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  u8_t i;
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b366:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b368:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 800b36c:	6824      	ldr	r4, [r4, #0]
 800b36e:	b15c      	cbz	r4, 800b388 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 800b370:	8b67      	ldrh	r7, [r4, #26]
 800b372:	4287      	cmp	r7, r0
 800b374:	d106      	bne.n	800b384 <tcp_new_port+0x3c>
 800b376:	3b01      	subs	r3, #1
 800b378:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1ec      	bne.n	800b358 <tcp_new_port+0x10>
 800b37e:	8010      	strh	r0, [r2, #0]
          return 0;
 800b380:	4618      	mov	r0, r3
 800b382:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b384:	68e4      	ldr	r4, [r4, #12]
 800b386:	e7f2      	b.n	800b36e <tcp_new_port+0x26>
 800b388:	3101      	adds	r1, #1
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b38a:	2904      	cmp	r1, #4
 800b38c:	d1ec      	bne.n	800b368 <tcp_new_port+0x20>
 800b38e:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800b390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b392:	bf00      	nop
 800b394:	20010078 	.word	0x20010078
 800b398:	0802cb08 	.word	0x0802cb08

0800b39c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b39c:	4770      	bx	lr
	...

0800b3a0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3a2:	460d      	mov	r5, r1
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  struct tcp_pcb *cpcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	b340      	cbz	r0, 800b3fa <tcp_bind+0x5a>
    return ERR_VAL;
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b3a8:	7e03      	ldrb	r3, [r0, #24]
 800b3aa:	bb33      	cbnz	r3, 800b3fa <tcp_bind+0x5a>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800b3ac:	b922      	cbnz	r2, 800b3b8 <tcp_bind+0x18>
    port = tcp_new_port();
 800b3ae:	f7ff ffcb 	bl	800b348 <tcp_new_port>
    if (port == 0) {
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	b9a0      	cbnz	r0, 800b3e0 <tcp_bind+0x40>
 800b3b6:	e023      	b.n	800b400 <tcp_bind+0x60>
      return ERR_BUF;
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b3b8:	4f14      	ldr	r7, [pc, #80]	; (800b40c <tcp_bind+0x6c>)
 800b3ba:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800b3be:	6808      	ldr	r0, [r1, #0]
 800b3c0:	b158      	cbz	r0, 800b3da <tcp_bind+0x3a>
        if (cpcb->local_port == port) {
 800b3c2:	8b41      	ldrh	r1, [r0, #26]
 800b3c4:	4291      	cmp	r1, r2
 800b3c6:	d106      	bne.n	800b3d6 <tcp_bind+0x36>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if (IP_PCB_IPVER_EQ(pcb, cpcb) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800b3c8:	6806      	ldr	r6, [r0, #0]
 800b3ca:	b1e6      	cbz	r6, 800b406 <tcp_bind+0x66>
 800b3cc:	b1dd      	cbz	r5, 800b406 <tcp_bind+0x66>
                ip_addr_isany(ipaddr) ||
 800b3ce:	6829      	ldr	r1, [r5, #0]
 800b3d0:	b1c9      	cbz	r1, 800b406 <tcp_bind+0x66>
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if (IP_PCB_IPVER_EQ(pcb, cpcb) &&
 800b3d2:	428e      	cmp	r6, r1
 800b3d4:	d017      	beq.n	800b406 <tcp_bind+0x66>
      return ERR_BUF;
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b3d6:	68c0      	ldr	r0, [r0, #12]
 800b3d8:	e7f2      	b.n	800b3c0 <tcp_bind+0x20>
    if (port == 0) {
      return ERR_BUF;
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800b3da:	3301      	adds	r3, #1
 800b3dc:	2b04      	cmp	r3, #4
 800b3de:	d1ec      	bne.n	800b3ba <tcp_bind+0x1a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800b3e0:	b115      	cbz	r5, 800b3e8 <tcp_bind+0x48>
 800b3e2:	682b      	ldr	r3, [r5, #0]
 800b3e4:	b103      	cbz	r3, 800b3e8 <tcp_bind+0x48>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b3e6:	6023      	str	r3, [r4, #0]
  }
  pcb->local_port = port;
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b3e8:	4b09      	ldr	r3, [pc, #36]	; (800b410 <tcp_bind+0x70>)
  }

  if (!ip_addr_isany(ipaddr)) {
    ip_addr_set(&pcb->local_ip, ipaddr);
  }
  pcb->local_port = port;
 800b3ea:	8362      	strh	r2, [r4, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	601c      	str	r4, [r3, #0]
 800b3f0:	60e2      	str	r2, [r4, #12]
 800b3f2:	f7ff fb51 	bl	800aa98 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  struct tcp_pcb *cpcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
 800b3fa:	f06f 0005 	mvn.w	r0, #5
 800b3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif /* SO_REUSE */

  if (port == 0) {
    port = tcp_new_port();
    if (port == 0) {
      return ERR_BUF;
 800b400:	f06f 0001 	mvn.w	r0, #1
 800b404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            /* @todo: check accept_any_ip_version */
            if (IP_PCB_IPVER_EQ(pcb, cpcb) &&
                (ip_addr_isany(&cpcb->local_ip) ||
                ip_addr_isany(ipaddr) ||
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
              return ERR_USE;
 800b406:	f06f 0007 	mvn.w	r0, #7
  }
  pcb->local_port = port;
  TCP_REG(&tcp_bound_pcbs, pcb);
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
}
 800b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b40c:	0802cb08 	.word	0x0802cb08
 800b410:	20049258 	.word	0x20049258

0800b414 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800b414:	b538      	push	{r3, r4, r5, lr}
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 800b416:	7e03      	ldrb	r3, [r0, #24]
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800b418:	4605      	mov	r5, r0
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
 800b41a:	b10b      	cbz	r3, 800b420 <tcp_listen_with_backlog+0xc>
 800b41c:	2000      	movs	r0, #0
 800b41e:	bd38      	pop	{r3, r4, r5, pc}
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b420:	2002      	movs	r0, #2
 800b422:	f7ff fd59 	bl	800aed8 <memp_malloc>
  if (lpcb == NULL) {
 800b426:	4604      	mov	r4, r0
 800b428:	2800      	cmp	r0, #0
 800b42a:	d0f7      	beq.n	800b41c <tcp_listen_with_backlog+0x8>
    return NULL;
  }
  lpcb->callback_arg = pcb->callback_arg;
 800b42c:	692b      	ldr	r3, [r5, #16]
 800b42e:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800b430:	8b6b      	ldrh	r3, [r5, #26]
 800b432:	8343      	strh	r3, [r0, #26]
  lpcb->state = LISTEN;
 800b434:	2301      	movs	r3, #1
 800b436:	7603      	strb	r3, [r0, #24]
  lpcb->prio = pcb->prio;
 800b438:	7e6b      	ldrb	r3, [r5, #25]
 800b43a:	7643      	strb	r3, [r0, #25]
  lpcb->so_options = pcb->so_options;
 800b43c:	7a2b      	ldrb	r3, [r5, #8]
 800b43e:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800b440:	7aab      	ldrb	r3, [r5, #10]
 800b442:	7283      	strb	r3, [r0, #10]
  lpcb->tos = pcb->tos;
 800b444:	7a6b      	ldrb	r3, [r5, #9]
 800b446:	7243      	strb	r3, [r0, #9]
#if LWIP_IPV4 && LWIP_IPV6
  PCB_ISIPV6(lpcb) = PCB_ISIPV6(pcb);
  lpcb->accept_any_ip_version = 0;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 800b44c:	8b6b      	ldrh	r3, [r5, #26]
 800b44e:	b17b      	cbz	r3, 800b470 <tcp_listen_with_backlog+0x5c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b450:	4a0e      	ldr	r2, [pc, #56]	; (800b48c <tcp_listen_with_backlog+0x78>)
 800b452:	6813      	ldr	r3, [r2, #0]
 800b454:	429d      	cmp	r5, r3
 800b456:	d103      	bne.n	800b460 <tcp_listen_with_backlog+0x4c>
 800b458:	68eb      	ldr	r3, [r5, #12]
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	e006      	b.n	800b46c <tcp_listen_with_backlog+0x58>
 800b45e:	4613      	mov	r3, r2
 800b460:	b123      	cbz	r3, 800b46c <tcp_listen_with_backlog+0x58>
 800b462:	68da      	ldr	r2, [r3, #12]
 800b464:	4295      	cmp	r5, r2
 800b466:	d1fa      	bne.n	800b45e <tcp_listen_with_backlog+0x4a>
 800b468:	68ea      	ldr	r2, [r5, #12]
 800b46a:	60da      	str	r2, [r3, #12]
 800b46c:	2300      	movs	r3, #0
 800b46e:	60eb      	str	r3, [r5, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800b470:	4629      	mov	r1, r5
 800b472:	2001      	movs	r0, #1
 800b474:	f7ff fd3c 	bl	800aef0 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800b478:	4b05      	ldr	r3, [pc, #20]	; (800b490 <tcp_listen_with_backlog+0x7c>)
 800b47a:	6163      	str	r3, [r4, #20]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b47c:	4b05      	ldr	r3, [pc, #20]	; (800b494 <tcp_listen_with_backlog+0x80>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	601c      	str	r4, [r3, #0]
 800b482:	60e2      	str	r2, [r4, #12]
 800b484:	f7ff fb08 	bl	800aa98 <tcp_timer_needed>
  return (struct tcp_pcb *)lpcb;
 800b488:	4620      	mov	r0, r4
}
 800b48a:	bd38      	pop	{r3, r4, r5, pc}
 800b48c:	20049258 	.word	0x20049258
 800b490:	0800bc07 	.word	0x0800bc07
 800b494:	20049254 	.word	0x20049254

0800b498 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b498:	b570      	push	{r4, r5, r6, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b49a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b49c:	4602      	mov	r2, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b49e:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
 800b4a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800b4a2:	1a73      	subs	r3, r6, r1

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b4a4:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 800b4a6:	1918      	adds	r0, r3, r4
 800b4a8:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800b4ac:	429d      	cmp	r5, r3
 800b4ae:	bf94      	ite	ls
 800b4b0:	1b43      	subls	r3, r0, r5
 800b4b2:	1ac3      	subhi	r3, r0, r3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	db01      	blt.n	800b4bc <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b4b8:	85d6      	strh	r6, [r2, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b4bc:	1a63      	subs	r3, r4, r1
 800b4be:	2000      	movs	r0, #0
 800b4c0:	2b00      	cmp	r3, #0
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b4c2:	bfd6      	itet	le
 800b4c4:	1b09      	suble	r1, r1, r4
    return new_right_edge - pcb->rcv_ann_right_edge;
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b4c6:	85d0      	strhgt	r0, [r2, #46]	; 0x2e
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b4c8:	85d1      	strhle	r1, [r2, #46]	; 0x2e
    }
    return 0;
  }
}
 800b4ca:	bd70      	pop	{r4, r5, r6, pc}

0800b4cc <tcp_recved>:

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b4cc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800b4ce:	4419      	add	r1, r3
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b4d0:	f640 3368 	movw	r3, #2920	; 0xb68

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b4d4:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b4d6:	4299      	cmp	r1, r3
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	4604      	mov	r4, r0

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b4dc:	8581      	strh	r1, [r0, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b4de:	d903      	bls.n	800b4e8 <tcp_recved+0x1c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b4e0:	f640 3368 	movw	r3, #2920	; 0xb68
 800b4e4:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800b4e6:	e005      	b.n	800b4f4 <tcp_recved+0x28>
  } else if (pcb->rcv_wnd == 0) {
 800b4e8:	b921      	cbnz	r1, 800b4f4 <tcp_recved+0x28>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800b4ea:	7e03      	ldrb	r3, [r0, #24]
 800b4ec:	2b07      	cmp	r3, #7
 800b4ee:	d0f7      	beq.n	800b4e0 <tcp_recved+0x14>
 800b4f0:	2b09      	cmp	r3, #9
 800b4f2:	d0f5      	beq.n	800b4e0 <tcp_recved+0x14>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f7ff ffcf 	bl	800b498 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b4fa:	f240 23d9 	movw	r3, #729	; 0x2d9
 800b4fe:	4298      	cmp	r0, r3
 800b500:	dd08      	ble.n	800b514 <tcp_recved+0x48>
    tcp_ack_now(pcb);
 800b502:	7fa3      	ldrb	r3, [r4, #30]
    tcp_output(pcb);
 800b504:	4620      	mov	r0, r4
  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    tcp_ack_now(pcb);
 800b506:	f043 0302 	orr.w	r3, r3, #2
 800b50a:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, TCP_WND_MAX(pcb) - pcb->rcv_wnd));
}
 800b50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
    tcp_ack_now(pcb);
    tcp_output(pcb);
 800b510:	f001 bed0 	b.w	800d2b4 <tcp_output>
 800b514:	bd10      	pop	{r4, pc}

0800b516 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b516:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800b518:	4604      	mov	r4, r0
 800b51a:	b148      	cbz	r0, 800b530 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800b51c:	6840      	ldr	r0, [r0, #4]
 800b51e:	b108      	cbz	r0, 800b524 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800b520:	f7ff fda0 	bl	800b064 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b524:	4621      	mov	r1, r4
 800b526:	2003      	movs	r0, #3
  }
}
 800b528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      pbuf_free(seg->p);
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b52c:	f7ff bce0 	b.w	800aef0 <memp_free>
 800b530:	bd10      	pop	{r4, pc}

0800b532 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b532:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800b534:	b120      	cbz	r0, 800b540 <tcp_segs_free+0xe>
    struct tcp_seg *next = seg->next;
 800b536:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800b538:	f7ff ffed 	bl	800b516 <tcp_seg_free>
    seg = next;
 800b53c:	4620      	mov	r0, r4
 800b53e:	e7f9      	b.n	800b534 <tcp_segs_free+0x2>
  }
}
 800b540:	bd10      	pop	{r4, pc}

0800b542 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
 800b542:	6101      	str	r1, [r0, #16]
 800b544:	4770      	bx	lr

0800b546 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
 800b546:	67c1      	str	r1, [r0, #124]	; 0x7c
 800b548:	4770      	bx	lr

0800b54a <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
 800b54a:	6781      	str	r1, [r0, #120]	; 0x78
 800b54c:	4770      	bx	lr

0800b54e <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
 800b54e:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 800b552:	4770      	bx	lr

0800b554 <tcp_accept>:
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
 800b554:	6141      	str	r1, [r0, #20]
 800b556:	4770      	bx	lr

0800b558 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b558:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b55c:	f880 2020 	strb.w	r2, [r0, #32]
 800b560:	4770      	bx	lr

0800b562 <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 800b562:	7e03      	ldrb	r3, [r0, #24]
 800b564:	2b01      	cmp	r3, #1
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b566:	b510      	push	{r4, lr}
 800b568:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800b56a:	d915      	bls.n	800b598 <tcp_pcb_purge+0x36>
 800b56c:	2b0a      	cmp	r3, #10
 800b56e:	d013      	beq.n	800b598 <tcp_pcb_purge+0x36>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
 800b570:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800b572:	b118      	cbz	r0, 800b57c <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b574:	f7ff fd76 	bl	800b064 <pbuf_free>
      pcb->refused_data = NULL;
 800b578:	2300      	movs	r3, #0
 800b57a:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b57c:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 800b580:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b582:	86a3      	strh	r3, [r4, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
 800b584:	f7ff ffd5 	bl	800b532 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b588:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b58a:	f7ff ffd2 	bl	800b532 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b592:	6723      	str	r3, [r4, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b594:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b598:	bd10      	pop	{r4, pc}
	...

0800b59c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
 800b5a0:	4da2      	ldr	r5, [pc, #648]	; (800b82c <tcp_slowtmr+0x290>)
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b5a2:	b087      	sub	sp, #28
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);

      tcp_active_pcbs_changed = 0;
 800b5a4:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 800b848 <tcp_slowtmr+0x2ac>
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;

  ++tcp_ticks;
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	46c2      	mov	sl, r8
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800b5b0:	4b9f      	ldr	r3, [pc, #636]	; (800b830 <tcp_slowtmr+0x294>)
 800b5b2:	781a      	ldrb	r2, [r3, #0]
 800b5b4:	469b      	mov	fp, r3
 800b5b6:	3201      	adds	r2, #1
 800b5b8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  pcb = tcp_active_pcbs;
 800b5ba:	4f9e      	ldr	r7, [pc, #632]	; (800b834 <tcp_slowtmr+0x298>)
  ++tcp_ticks;
  ++tcp_timer_ctr;

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b5bc:	2600      	movs	r6, #0
  pcb = tcp_active_pcbs;
 800b5be:	683c      	ldr	r4, [r7, #0]
 800b5c0:	9703      	str	r7, [sp, #12]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b5c2:	2c00      	cmp	r4, #0
 800b5c4:	f000 8112 	beq.w	800b7ec <tcp_slowtmr+0x250>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
 800b5c8:	f89b 3000 	ldrb.w	r3, [fp]
 800b5cc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d102      	bne.n	800b5da <tcp_slowtmr+0x3e>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800b5d4:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800b5d8:	e0e5      	b.n	800b7a6 <tcp_slowtmr+0x20a>
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 800b5da:	7e21      	ldrb	r1, [r4, #24]
    if (pcb->last_timer == tcp_timer_ctr) {
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;
 800b5dc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb_remove = 0;
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
 800b5e0:	2902      	cmp	r1, #2
 800b5e2:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800b5e6:	d101      	bne.n	800b5ec <tcp_slowtmr+0x50>
 800b5e8:	2a06      	cmp	r2, #6
 800b5ea:	d057      	beq.n	800b69c <tcp_slowtmr+0x100>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
 800b5ec:	2a0c      	cmp	r2, #12
 800b5ee:	d055      	beq.n	800b69c <tcp_slowtmr+0x100>
      ++pcb_remove;
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b5f0:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800b5f4:	b1eb      	cbz	r3, 800b632 <tcp_slowtmr+0x96>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800b5f6:	4a90      	ldr	r2, [pc, #576]	; (800b838 <tcp_slowtmr+0x29c>)
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f813 2c01 	ldrb.w	r2, [r3, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 800b5fe:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b602:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 800b604:	bf84      	itt	hi
 800b606:	3301      	addhi	r3, #1
 800b608:	f884 3090 	strbhi.w	r3, [r4, #144]	; 0x90
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800b60c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800b610:	4293      	cmp	r3, r2
 800b612:	d341      	bcc.n	800b698 <tcp_slowtmr+0xfc>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800b614:	4620      	mov	r0, r4
 800b616:	f002 f871 	bl	800d6fc <tcp_zero_window_probe>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d13c      	bne.n	800b698 <tcp_slowtmr+0xfc>
            pcb->persist_cnt = 0;
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b61e:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
        if (pcb->persist_cnt < backoff_cnt) {
          pcb->persist_cnt++;
        }
        if (pcb->persist_cnt >= backoff_cnt) {
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
            pcb->persist_cnt = 0;
 800b622:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b626:	2a06      	cmp	r2, #6
 800b628:	d836      	bhi.n	800b698 <tcp_slowtmr+0xfc>
              pcb->persist_backoff++;
 800b62a:	3201      	adds	r2, #1
 800b62c:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
 800b630:	e032      	b.n	800b698 <tcp_slowtmr+0xfc>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800b632:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800b636:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 800b638:	bfa4      	itt	ge
 800b63a:	3301      	addge	r3, #1
 800b63c:	86a3      	strhge	r3, [r4, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800b63e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b640:	b353      	cbz	r3, 800b698 <tcp_slowtmr+0xfc>
 800b642:	f9b4 0034 	ldrsh.w	r0, [r4, #52]	; 0x34
 800b646:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
 800b64a:	4298      	cmp	r0, r3
 800b64c:	db24      	blt.n	800b698 <tcp_slowtmr+0xfc>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800b64e:	2902      	cmp	r1, #2
 800b650:	d00a      	beq.n	800b668 <tcp_slowtmr+0xcc>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
 800b652:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800b656:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800b65a:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b65e:	4977      	ldr	r1, [pc, #476]	; (800b83c <tcp_slowtmr+0x2a0>)
 800b660:	5c8a      	ldrb	r2, [r1, r2]
 800b662:	4093      	lsls	r3, r2
 800b664:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800b668:	2300      	movs	r3, #0

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b66a:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b66e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800b670:	4620      	mov	r0, r4
          if (pcb->state != SYN_SENT) {
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800b672:	86a3      	strh	r3, [r4, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b674:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
            pcb->ssthresh = (pcb->mss << 1);
          }
          pcb->cwnd = pcb->mss;
 800b678:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b67c:	4293      	cmp	r3, r2
 800b67e:	bf28      	it	cs
 800b680:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b682:	004a      	lsls	r2, r1, #1
          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b684:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b686:	b292      	uxth	r2, r2
          /* Reset the retransmission timer. */
          pcb->rtime = 0;

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
          pcb->ssthresh = eff_wnd >> 1;
 800b688:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b68c:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 800b68e:	bf38      	it	cc
 800b690:	f8a4 204e 	strhcc.w	r2, [r4, #78]	; 0x4e
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800b694:	f001 ff9e 	bl	800d5d4 <tcp_rexmit_rto>
      pcb = pcb->next;
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
 800b698:	2300      	movs	r3, #0
 800b69a:	e000      	b.n	800b69e <tcp_slowtmr+0x102>
    pcb_reset = 0;

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
      ++pcb_remove;
 800b69c:	2301      	movs	r3, #1
          tcp_rexmit_rto(pcb);
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b69e:	7e21      	ldrb	r1, [r4, #24]
 800b6a0:	2906      	cmp	r1, #6
 800b6a2:	d109      	bne.n	800b6b8 <tcp_slowtmr+0x11c>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b6a4:	7fa2      	ldrb	r2, [r4, #30]
 800b6a6:	06d2      	lsls	r2, r2, #27
 800b6a8:	d506      	bpl.n	800b6b8 <tcp_slowtmr+0x11c>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6aa:	682a      	ldr	r2, [r5, #0]
 800b6ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b6ae:	1a12      	subs	r2, r2, r0
 800b6b0:	2a28      	cmp	r2, #40	; 0x28
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b6b2:	bf84      	itt	hi
 800b6b4:	3301      	addhi	r3, #1
 800b6b6:	b2db      	uxtbhi	r3, r3
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b6b8:	7a22      	ldrb	r2, [r4, #8]
 800b6ba:	f002 0208 	and.w	r2, r2, #8
 800b6be:	f002 09ff 	and.w	r9, r2, #255	; 0xff
 800b6c2:	b37a      	cbz	r2, 800b724 <tcp_slowtmr+0x188>
 800b6c4:	2904      	cmp	r1, #4
 800b6c6:	d001      	beq.n	800b6cc <tcp_slowtmr+0x130>
       ((pcb->state == ESTABLISHED) ||
 800b6c8:	2907      	cmp	r1, #7
 800b6ca:	d129      	bne.n	800b720 <tcp_slowtmr+0x184>
        (pcb->state == CLOSE_WAIT))) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b6ce:	f44f 7efa 	mov.w	lr, #500	; 0x1f4
 800b6d2:	6828      	ldr	r0, [r5, #0]
 800b6d4:	1a80      	subs	r0, r0, r2
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800b6d6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
       ((pcb->state == ESTABLISHED) ||
        (pcb->state == CLOSE_WAIT))) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6da:	f502 2124 	add.w	r1, r2, #671744	; 0xa4000
 800b6de:	f601 41b8 	addw	r1, r1, #3256	; 0xcb8
 800b6e2:	fbb1 f1fe 	udiv	r1, r1, lr
 800b6e6:	4288      	cmp	r0, r1
 800b6e8:	d904      	bls.n	800b6f4 <tcp_slowtmr+0x158>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b6ea:	3301      	adds	r3, #1
        ++pcb_reset;
 800b6ec:	f04f 0901 	mov.w	r9, #1
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	e017      	b.n	800b724 <tcp_slowtmr+0x188>
        ++pcb_reset;
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6f4:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 800b6f8:	4f51      	ldr	r7, [pc, #324]	; (800b840 <tcp_slowtmr+0x2a4>)
 800b6fa:	fb07 2201 	mla	r2, r7, r1, r2
 800b6fe:	fbb2 f2fe 	udiv	r2, r2, lr
 800b702:	4290      	cmp	r0, r2
 800b704:	d90c      	bls.n	800b720 <tcp_slowtmr+0x184>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
                / TCP_SLOW_INTERVAL)
      {
        err = tcp_keepalive(pcb);
 800b706:	4620      	mov	r0, r4
 800b708:	9304      	str	r3, [sp, #16]
 800b70a:	f001 ffcd 	bl	800d6a8 <tcp_keepalive>
        if (err == ERR_OK) {
 800b70e:	9b04      	ldr	r3, [sp, #16]
 800b710:	b930      	cbnz	r0, 800b720 <tcp_slowtmr+0x184>
          pcb->keep_cnt_sent++;
 800b712:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
 800b716:	4681      	mov	r9, r0
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
                / TCP_SLOW_INTERVAL)
      {
        err = tcp_keepalive(pcb);
        if (err == ERR_OK) {
          pcb->keep_cnt_sent++;
 800b718:	3201      	adds	r2, #1
 800b71a:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
 800b71e:	e001      	b.n	800b724 <tcp_slowtmr+0x188>
      continue;
    }
    pcb->last_timer = tcp_timer_ctr;

    pcb_remove = 0;
    pcb_reset = 0;
 800b720:	f04f 0900 	mov.w	r9, #0
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b724:	7e22      	ldrb	r2, [r4, #24]
 800b726:	2a03      	cmp	r2, #3
 800b728:	d104      	bne.n	800b734 <tcp_slowtmr+0x198>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b72a:	682a      	ldr	r2, [r5, #0]
 800b72c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b72e:	1a52      	subs	r2, r2, r1
 800b730:	2a28      	cmp	r2, #40	; 0x28
 800b732:	e005      	b.n	800b740 <tcp_slowtmr+0x1a4>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b734:	2a09      	cmp	r2, #9
 800b736:	d104      	bne.n	800b742 <tcp_slowtmr+0x1a6>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b738:	682a      	ldr	r2, [r5, #0]
 800b73a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b73c:	1a52      	subs	r2, r2, r1
 800b73e:	2af0      	cmp	r2, #240	; 0xf0
 800b740:	d801      	bhi.n	800b746 <tcp_slowtmr+0x1aa>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b742:	2b00      	cmp	r3, #0
 800b744:	d031      	beq.n	800b7aa <tcp_slowtmr+0x20e>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff ff0b 	bl	800b562 <tcp_pcb_purge>
 800b74c:	68e3      	ldr	r3, [r4, #12]
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b74e:	b10e      	cbz	r6, 800b754 <tcp_slowtmr+0x1b8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
 800b750:	60f3      	str	r3, [r6, #12]
 800b752:	e001      	b.n	800b758 <tcp_slowtmr+0x1bc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
 800b754:	9a03      	ldr	r2, [sp, #12]
 800b756:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b758:	f1b9 0f00 	cmp.w	r9, #0
 800b75c:	d009      	beq.n	800b772 <tcp_slowtmr+0x1d6>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b75e:	8ba3      	ldrh	r3, [r4, #28]
 800b760:	4622      	mov	r2, r4
 800b762:	9301      	str	r3, [sp, #4]
 800b764:	8b63      	ldrh	r3, [r4, #26]
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	1d23      	adds	r3, r4, #4
 800b76a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b76c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b76e:	f001 fee9 	bl	800d544 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 800b772:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
 800b776:	4621      	mov	r1, r4
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
                 pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
      err_arg = pcb->callback_arg;
 800b778:	6922      	ldr	r2, [r4, #16]
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);
 800b77a:	2001      	movs	r0, #1
      if (pcb_reset) {
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
                 pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
 800b77c:	9305      	str	r3, [sp, #20]
      err_arg = pcb->callback_arg;
 800b77e:	9204      	str	r2, [sp, #16]
      pcb2 = pcb;
      pcb = pcb->next;
 800b780:	f8d4 900c 	ldr.w	r9, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800b784:	f7ff fbb4 	bl	800aef0 <memp_free>

      tcp_active_pcbs_changed = 0;
 800b788:	2100      	movs	r1, #0
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 800b78a:	9b05      	ldr	r3, [sp, #20]
      err_arg = pcb->callback_arg;
      pcb2 = pcb;
      pcb = pcb->next;
      memp_free(MEMP_TCP_PCB, pcb2);

      tcp_active_pcbs_changed = 0;
 800b78c:	f888 1000 	strb.w	r1, [r8]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
 800b790:	b123      	cbz	r3, 800b79c <tcp_slowtmr+0x200>
 800b792:	9a04      	ldr	r2, [sp, #16]
 800b794:	f06f 010b 	mvn.w	r1, #11
 800b798:	4610      	mov	r0, r2
 800b79a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b79c:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f47f af0a 	bne.w	800b5ba <tcp_slowtmr+0x1e>
 800b7a6:	4634      	mov	r4, r6
 800b7a8:	e01d      	b.n	800b7e6 <tcp_slowtmr+0x24a>
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7aa:	7fe2      	ldrb	r2, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 800b7ac:	f894 1020 	ldrb.w	r1, [r4, #32]
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7b0:	3201      	adds	r2, #1
        goto tcp_slowtmr_start;
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;
 800b7b2:	f8d4 900c 	ldr.w	r9, [r4, #12]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7b6:	b2d2      	uxtb	r2, r2
      if (prev->polltmr >= prev->pollinterval) {
 800b7b8:	4291      	cmp	r1, r2
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b7ba:	77e2      	strb	r2, [r4, #31]
      if (prev->polltmr >= prev->pollinterval) {
 800b7bc:	d813      	bhi.n	800b7e6 <tcp_slowtmr+0x24a>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
 800b7be:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      pcb = pcb->next;

      /* We check if we should poll the connection. */
      ++prev->polltmr;
      if (prev->polltmr >= prev->pollinterval) {
        prev->polltmr = 0;
 800b7c2:	77e3      	strb	r3, [r4, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b7c4:	f888 3000 	strb.w	r3, [r8]
        TCP_EVENT_POLL(prev, err);
 800b7c8:	b11a      	cbz	r2, 800b7d2 <tcp_slowtmr+0x236>
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	6920      	ldr	r0, [r4, #16]
 800b7ce:	4790      	blx	r2
 800b7d0:	e000      	b.n	800b7d4 <tcp_slowtmr+0x238>
 800b7d2:	4618      	mov	r0, r3
        if (tcp_active_pcbs_changed) {
 800b7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f47f aeee 	bne.w	800b5ba <tcp_slowtmr+0x1e>
          goto tcp_slowtmr_start;
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b7de:	b910      	cbnz	r0, 800b7e6 <tcp_slowtmr+0x24a>
          tcp_output(prev);
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f001 fd67 	bl	800d2b4 <tcp_output>
 800b7e6:	4626      	mov	r6, r4
 800b7e8:	464c      	mov	r4, r9
 800b7ea:	e6ea      	b.n	800b5c2 <tcp_slowtmr+0x26>
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  pcb = tcp_tw_pcbs;
 800b7ec:	4b15      	ldr	r3, [pc, #84]	; (800b844 <tcp_slowtmr+0x2a8>)
 800b7ee:	681e      	ldr	r6, [r3, #0]
 800b7f0:	4698      	mov	r8, r3
  while (pcb != NULL) {
 800b7f2:	b1c6      	cbz	r6, 800b826 <tcp_slowtmr+0x28a>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b7f8:	1a9b      	subs	r3, r3, r2
 800b7fa:	2bf0      	cmp	r3, #240	; 0xf0
 800b7fc:	d911      	bls.n	800b822 <tcp_slowtmr+0x286>
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7ff feaf 	bl	800b562 <tcp_pcb_purge>
 800b804:	68f3      	ldr	r3, [r6, #12]
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b806:	b10c      	cbz	r4, 800b80c <tcp_slowtmr+0x270>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
 800b808:	60e3      	str	r3, [r4, #12]
 800b80a:	e001      	b.n	800b810 <tcp_slowtmr+0x274>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
 800b80c:	f8c8 3000 	str.w	r3, [r8]
      }
      pcb2 = pcb;
      pcb = pcb->next;
 800b810:	68f7      	ldr	r7, [r6, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800b812:	4631      	mov	r1, r6
 800b814:	4626      	mov	r6, r4
 800b816:	2001      	movs	r0, #1
 800b818:	f7ff fb6a 	bl	800aef0 <memp_free>
 800b81c:	4634      	mov	r4, r6
 800b81e:	463e      	mov	r6, r7
 800b820:	e7e7      	b.n	800b7f2 <tcp_slowtmr+0x256>
    } else {
      prev = pcb;
      pcb = pcb->next;
 800b822:	68f7      	ldr	r7, [r6, #12]
 800b824:	e7fa      	b.n	800b81c <tcp_slowtmr+0x280>
    }
  }
}
 800b826:	b007      	add	sp, #28
 800b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b82c:	20049250 	.word	0x20049250
 800b830:	20042e0e 	.word	0x20042e0e
 800b834:	2004924c 	.word	0x2004924c
 800b838:	0802cb25 	.word	0x0802cb25
 800b83c:	0802cb18 	.word	0x0802cb18
 800b840:	000124f8 	.word	0x000124f8
 800b844:	2004925c 	.word	0x2004925c
 800b848:	20049248 	.word	0x20049248

0800b84c <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800b84c:	6803      	ldr	r3, [r0, #0]
 800b84e:	428b      	cmp	r3, r1
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b850:	b510      	push	{r4, lr}
 800b852:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800b854:	d103      	bne.n	800b85e <tcp_pcb_remove+0x12>
 800b856:	68cb      	ldr	r3, [r1, #12]
 800b858:	6003      	str	r3, [r0, #0]
 800b85a:	e006      	b.n	800b86a <tcp_pcb_remove+0x1e>
 800b85c:	4613      	mov	r3, r2
 800b85e:	b123      	cbz	r3, 800b86a <tcp_pcb_remove+0x1e>
 800b860:	68da      	ldr	r2, [r3, #12]
 800b862:	4294      	cmp	r4, r2
 800b864:	d1fa      	bne.n	800b85c <tcp_pcb_remove+0x10>
 800b866:	68e2      	ldr	r2, [r4, #12]
 800b868:	60da      	str	r2, [r3, #12]
 800b86a:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800b86c:	4620      	mov	r0, r4
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800b86e:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 800b870:	f7ff fe77 	bl	800b562 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800b874:	7e23      	ldrb	r3, [r4, #24]
 800b876:	2b0a      	cmp	r3, #10
 800b878:	d00a      	beq.n	800b890 <tcp_pcb_remove+0x44>
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d008      	beq.n	800b890 <tcp_pcb_remove+0x44>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 800b87e:	7fa3      	ldrb	r3, [r4, #30]

  tcp_pcb_purge(pcb);

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
 800b880:	07da      	lsls	r2, r3, #31
 800b882:	d505      	bpl.n	800b890 <tcp_pcb_remove+0x44>
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
 800b884:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b888:	4620      	mov	r0, r4

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
    pcb->flags |= TF_ACK_NOW;
 800b88a:	77a3      	strb	r3, [r4, #30]
    tcp_output(pcb);
 800b88c:	f001 fd12 	bl	800d2b4 <tcp_output>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b890:	2300      	movs	r3, #0
 800b892:	7623      	strb	r3, [r4, #24]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b894:	8363      	strh	r3, [r4, #26]
 800b896:	bd10      	pop	{r4, pc}

0800b898 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b89a:	7e03      	ldrb	r3, [r0, #24]
 800b89c:	4604      	mov	r4, r0
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b89e:	2900      	cmp	r1, #0
 800b8a0:	d042      	beq.n	800b928 <tcp_close_shutdown+0x90>
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	d001      	beq.n	800b8aa <tcp_close_shutdown+0x12>
 800b8a6:	2b07      	cmp	r3, #7
 800b8a8:	d13e      	bne.n	800b928 <tcp_close_shutdown+0x90>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b8aa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b8ac:	b922      	cbnz	r2, 800b8b8 <tcp_close_shutdown+0x20>
 800b8ae:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800b8b0:	f640 3268 	movw	r2, #2920	; 0xb68
 800b8b4:	4291      	cmp	r1, r2
 800b8b6:	d037      	beq.n	800b928 <tcp_close_shutdown+0x90>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b8b8:	8ba3      	ldrh	r3, [r4, #28]
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	8b63      	ldrh	r3, [r4, #26]
 800b8c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	1d23      	adds	r3, r4, #4
 800b8c8:	f001 fe3c 	bl	800d544 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	f7ff fe48 	bl	800b562 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b8d2:	4a36      	ldr	r2, [pc, #216]	; (800b9ac <tcp_close_shutdown+0x114>)
 800b8d4:	6813      	ldr	r3, [r2, #0]
 800b8d6:	429c      	cmp	r4, r3
 800b8d8:	d103      	bne.n	800b8e2 <tcp_close_shutdown+0x4a>
 800b8da:	68e3      	ldr	r3, [r4, #12]
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	e006      	b.n	800b8ee <tcp_close_shutdown+0x56>
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	b123      	cbz	r3, 800b8ee <tcp_close_shutdown+0x56>
 800b8e4:	68da      	ldr	r2, [r3, #12]
 800b8e6:	4294      	cmp	r4, r2
 800b8e8:	d1fa      	bne.n	800b8e0 <tcp_close_shutdown+0x48>
 800b8ea:	68e2      	ldr	r2, [r4, #12]
 800b8ec:	60da      	str	r2, [r3, #12]
 800b8ee:	4b30      	ldr	r3, [pc, #192]	; (800b9b0 <tcp_close_shutdown+0x118>)
 800b8f0:	2001      	movs	r0, #1
 800b8f2:	2500      	movs	r5, #0
 800b8f4:	7018      	strb	r0, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800b8f6:	7e23      	ldrb	r3, [r4, #24]
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
      TCP_RMV_ACTIVE(pcb);
 800b8f8:	60e5      	str	r5, [r4, #12]
      if (pcb->state == ESTABLISHED) {
 800b8fa:	2b04      	cmp	r3, #4
 800b8fc:	d108      	bne.n	800b910 <tcp_close_shutdown+0x78>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800b8fe:	230a      	movs	r3, #10
 800b900:	7623      	strb	r3, [r4, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b902:	4b2c      	ldr	r3, [pc, #176]	; (800b9b4 <tcp_close_shutdown+0x11c>)
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	601c      	str	r4, [r3, #0]
 800b908:	60e2      	str	r2, [r4, #12]
 800b90a:	f7ff f8c5 	bl	800aa98 <tcp_timer_needed>
 800b90e:	e005      	b.n	800b91c <tcp_close_shutdown+0x84>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800b910:	4b29      	ldr	r3, [pc, #164]	; (800b9b8 <tcp_close_shutdown+0x120>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	429c      	cmp	r4, r3
 800b916:	d103      	bne.n	800b920 <tcp_close_shutdown+0x88>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800b918:	f001 f9d2 	bl	800ccc0 <tcp_trigger_input_pcb_close>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
        }
      }
      return ERR_OK;
 800b91c:	4628      	mov	r0, r5
 800b91e:	e042      	b.n	800b9a6 <tcp_close_shutdown+0x10e>
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800b920:	4621      	mov	r1, r4
 800b922:	f7ff fae5 	bl	800aef0 <memp_free>
 800b926:	e7f9      	b.n	800b91c <tcp_close_shutdown+0x84>
      }
      return ERR_OK;
    }
  }

  switch (pcb->state) {
 800b928:	2b07      	cmp	r3, #7
 800b92a:	d83b      	bhi.n	800b9a4 <tcp_close_shutdown+0x10c>
 800b92c:	e8df f003 	tbb	[pc, r3]
 800b930:	2b201904 	.word	0x2b201904
 800b934:	313a3a2b 	.word	0x313a3a2b
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
    if (pcb->local_port != 0) {
 800b938:	8b63      	ldrh	r3, [r4, #26]
 800b93a:	b17b      	cbz	r3, 800b95c <tcp_close_shutdown+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b93c:	4a1f      	ldr	r2, [pc, #124]	; (800b9bc <tcp_close_shutdown+0x124>)
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	429c      	cmp	r4, r3
 800b942:	d103      	bne.n	800b94c <tcp_close_shutdown+0xb4>
 800b944:	68e3      	ldr	r3, [r4, #12]
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	e006      	b.n	800b958 <tcp_close_shutdown+0xc0>
 800b94a:	4613      	mov	r3, r2
 800b94c:	b123      	cbz	r3, 800b958 <tcp_close_shutdown+0xc0>
 800b94e:	68da      	ldr	r2, [r3, #12]
 800b950:	4294      	cmp	r4, r2
 800b952:	d1fa      	bne.n	800b94a <tcp_close_shutdown+0xb2>
 800b954:	68e2      	ldr	r2, [r4, #12]
 800b956:	60da      	str	r2, [r3, #12]
 800b958:	2300      	movs	r3, #0
 800b95a:	60e3      	str	r3, [r4, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800b95c:	4621      	mov	r1, r4
 800b95e:	2001      	movs	r0, #1
 800b960:	e00e      	b.n	800b980 <tcp_close_shutdown+0xe8>
    pcb = NULL;
    break;
  case LISTEN:
    err = ERR_OK;
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b962:	4621      	mov	r1, r4
 800b964:	4816      	ldr	r0, [pc, #88]	; (800b9c0 <tcp_close_shutdown+0x128>)
 800b966:	f7ff ff71 	bl	800b84c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b96a:	4621      	mov	r1, r4
 800b96c:	2002      	movs	r0, #2
 800b96e:	e007      	b.n	800b980 <tcp_close_shutdown+0xe8>
    pcb = NULL;
    break;
  case SYN_SENT:
    err = ERR_OK;
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800b970:	4621      	mov	r1, r4
 800b972:	480e      	ldr	r0, [pc, #56]	; (800b9ac <tcp_close_shutdown+0x114>)
 800b974:	f7ff ff6a 	bl	800b84c <tcp_pcb_remove>
 800b978:	2001      	movs	r0, #1
 800b97a:	4b0d      	ldr	r3, [pc, #52]	; (800b9b0 <tcp_close_shutdown+0x118>)
    memp_free(MEMP_TCP_PCB, pcb);
 800b97c:	4621      	mov	r1, r4
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
    pcb = NULL;
    break;
  case SYN_SENT:
    err = ERR_OK;
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800b97e:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800b980:	f7ff fab6 	bl	800aef0 <memp_free>
    pcb = NULL;
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800b984:	e00e      	b.n	800b9a4 <tcp_close_shutdown+0x10c>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800b986:	4620      	mov	r0, r4
 800b988:	f001 fc3d 	bl	800d206 <tcp_send_fin>
    if (err == ERR_OK) {
 800b98c:	b958      	cbnz	r0, 800b9a6 <tcp_close_shutdown+0x10e>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800b98e:	2305      	movs	r3, #5
 800b990:	e004      	b.n	800b99c <tcp_close_shutdown+0x104>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
    }
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800b992:	4620      	mov	r0, r4
 800b994:	f001 fc37 	bl	800d206 <tcp_send_fin>
    if (err == ERR_OK) {
 800b998:	b928      	cbnz	r0, 800b9a6 <tcp_close_shutdown+0x10e>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800b99a:	2309      	movs	r3, #9
 800b99c:	7623      	strb	r3, [r4, #24]
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f001 fc88 	bl	800d2b4 <tcp_output>
 800b9a4:	2000      	movs	r0, #0
  }
  return err;
}
 800b9a6:	b003      	add	sp, #12
 800b9a8:	bd30      	pop	{r4, r5, pc}
 800b9aa:	bf00      	nop
 800b9ac:	2004924c 	.word	0x2004924c
 800b9b0:	20049248 	.word	0x20049248
 800b9b4:	2004925c 	.word	0x2004925c
 800b9b8:	20049260 	.word	0x20049260
 800b9bc:	20049258 	.word	0x20049258
 800b9c0:	20049254 	.word	0x20049254

0800b9c4 <tcp_close>:
tcp_close(struct tcp_pcb *pcb)
{
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b9c4:	7e03      	ldrb	r3, [r0, #24]
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b9c6:	2101      	movs	r1, #1
tcp_close(struct tcp_pcb *pcb)
{
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b9c8:	2b01      	cmp	r3, #1
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800b9ca:	bf1e      	ittt	ne
 800b9cc:	7f83      	ldrbne	r3, [r0, #30]
 800b9ce:	f043 0310 	orrne.w	r3, r3, #16
 800b9d2:	7783      	strbne	r3, [r0, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b9d4:	f7ff bf60 	b.w	800b898 <tcp_close_shutdown>

0800b9d8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b9d8:	b510      	push	{r4, lr}
 800b9da:	4608      	mov	r0, r1
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800b9dc:	4614      	mov	r4, r2
 800b9de:	b132      	cbz	r2, 800b9ee <tcp_recv_null+0x16>
    tcp_recved(pcb, p->tot_len);
 800b9e0:	8911      	ldrh	r1, [r2, #8]
 800b9e2:	f7ff fd73 	bl	800b4cc <tcp_recved>
    pbuf_free(p);
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f7ff fb3c 	bl	800b064 <pbuf_free>
 800b9ec:	e004      	b.n	800b9f8 <tcp_recv_null+0x20>
  } else if (err == ERR_OK) {
 800b9ee:	b91b      	cbnz	r3, 800b9f8 <tcp_recv_null+0x20>
    return tcp_close(pcb);
  }
  return ERR_OK;
}
 800b9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
    tcp_recved(pcb, p->tot_len);
    pbuf_free(p);
  } else if (err == ERR_OK) {
    return tcp_close(pcb);
 800b9f4:	f7ff bfe6 	b.w	800b9c4 <tcp_close>
  }
  return ERR_OK;
}
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	bd10      	pop	{r4, pc}

0800b9fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b9fe:	6f45      	ldr	r5, [r0, #116]	; 0x74
    struct pbuf *refused_data = pcb->refused_data;
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ba00:	2300      	movs	r3, #0
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ba02:	6fc6      	ldr	r6, [r0, #124]	; 0x7c
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ba04:	4604      	mov	r4, r0
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ba06:	7b6f      	ldrb	r7, [r5, #13]
    struct pbuf *refused_data = pcb->refused_data;
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ba08:	6743      	str	r3, [r0, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ba0a:	b126      	cbz	r6, 800ba16 <tcp_process_refused_data+0x1a>
 800ba0c:	4601      	mov	r1, r0
 800ba0e:	462a      	mov	r2, r5
 800ba10:	6900      	ldr	r0, [r0, #16]
 800ba12:	47b0      	blx	r6
 800ba14:	e005      	b.n	800ba22 <tcp_process_refused_data+0x26>
 800ba16:	4601      	mov	r1, r0
 800ba18:	4633      	mov	r3, r6
 800ba1a:	462a      	mov	r2, r5
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f7ff ffdb 	bl	800b9d8 <tcp_recv_null>
    if (err == ERR_OK) {
 800ba22:	b9b0      	cbnz	r0, 800ba52 <tcp_process_refused_data+0x56>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ba24:	06bb      	lsls	r3, r7, #26
 800ba26:	d512      	bpl.n	800ba4e <tcp_process_refused_data+0x52>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba28:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800ba2a:	f640 3268 	movw	r2, #2920	; 0xb68
          pcb->rcv_wnd++;
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ba2e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ba30:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800ba32:	bf1c      	itt	ne
 800ba34:	3301      	addne	r3, #1
 800ba36:	85a3      	strhne	r3, [r4, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ba38:	b14d      	cbz	r5, 800ba4e <tcp_process_refused_data+0x52>
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	6920      	ldr	r0, [r4, #16]
 800ba40:	461a      	mov	r2, r3
 800ba42:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800ba44:	300c      	adds	r0, #12
 800ba46:	d102      	bne.n	800ba4e <tcp_process_refused_data+0x52>
          return ERR_ABRT;
 800ba48:	f06f 000b 	mvn.w	r0, #11
 800ba4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
      return ERR_INPROGRESS;
    }
  }
  return ERR_OK;
 800ba4e:	2000      	movs	r0, #0
 800ba50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_EVENT_CLOSED(pcb, err);
        if (err == ERR_ABRT) {
          return ERR_ABRT;
        }
      }
    } else if (err == ERR_ABRT) {
 800ba52:	300c      	adds	r0, #12
 800ba54:	d0f8      	beq.n	800ba48 <tcp_process_refused_data+0x4c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ba56:	6765      	str	r5, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800ba58:	f06f 0004 	mvn.w	r0, #4
    }
  }
  return ERR_OK;
}
 800ba5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba60 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ba60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ba64:	4d17      	ldr	r5, [pc, #92]	; (800bac4 <tcp_fasttmr+0x64>)

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ba66:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800bacc <tcp_fasttmr+0x6c>
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ba6a:	782b      	ldrb	r3, [r5, #0]

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 800ba6c:	4e16      	ldr	r6, [pc, #88]	; (800bac8 <tcp_fasttmr+0x68>)
void
tcp_fasttmr(void)
{
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ba6e:	3301      	adds	r3, #1
 800ba70:	702b      	strb	r3, [r5, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ba72:	f8d8 4000 	ldr.w	r4, [r8]

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 800ba76:	2700      	movs	r7, #0
  ++tcp_timer_ctr;

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;

  while (pcb != NULL) {
 800ba78:	b314      	cbz	r4, 800bac0 <tcp_fasttmr+0x60>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ba7a:	782b      	ldrb	r3, [r5, #0]
 800ba7c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d019      	beq.n	800bab8 <tcp_fasttmr+0x58>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ba84:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ba88:	7fa3      	ldrb	r3, [r4, #30]
 800ba8a:	07da      	lsls	r2, r3, #31
 800ba8c:	d509      	bpl.n	800baa2 <tcp_fasttmr+0x42>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ba8e:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800ba92:	4620      	mov	r0, r4
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ba94:	77a3      	strb	r3, [r4, #30]
        tcp_output(pcb);
 800ba96:	f001 fc0d 	bl	800d2b4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ba9a:	7fa3      	ldrb	r3, [r4, #30]
 800ba9c:	f023 0303 	bic.w	r3, r3, #3
 800baa0:	77a3      	strb	r3, [r4, #30]
      }

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800baa2:	6f63      	ldr	r3, [r4, #116]	; 0x74
        tcp_ack_now(pcb);
        tcp_output(pcb);
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
      }

      next = pcb->next;
 800baa4:	f8d4 900c 	ldr.w	r9, [r4, #12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800baa8:	b143      	cbz	r3, 800babc <tcp_fasttmr+0x5c>
        tcp_active_pcbs_changed = 0;
        tcp_process_refused_data(pcb);
 800baaa:	4620      	mov	r0, r4

      next = pcb->next;

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
        tcp_active_pcbs_changed = 0;
 800baac:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800baae:	f7ff ffa5 	bl	800b9fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bab2:	7833      	ldrb	r3, [r6, #0]
 800bab4:	b113      	cbz	r3, 800babc <tcp_fasttmr+0x5c>
 800bab6:	e7dc      	b.n	800ba72 <tcp_fasttmr+0x12>
          goto tcp_fasttmr_start;
        }
      }
      pcb = next;
    } else {
      pcb = pcb->next;
 800bab8:	f8d4 900c 	ldr.w	r9, [r4, #12]
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800babc:	464c      	mov	r4, r9
 800babe:	e7db      	b.n	800ba78 <tcp_fasttmr+0x18>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800bac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bac4:	20042e0e 	.word	0x20042e0e
 800bac8:	20049248 	.word	0x20049248
 800bacc:	2004924c 	.word	0x2004924c

0800bad0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bad0:	b508      	push	{r3, lr}
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bad2:	f7ff ffc5 	bl	800ba60 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bad6:	4a06      	ldr	r2, [pc, #24]	; (800baf0 <tcp_tmr+0x20>)
 800bad8:	7813      	ldrb	r3, [r2, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	b2db      	uxtb	r3, r3
 800bade:	7013      	strb	r3, [r2, #0]
 800bae0:	07db      	lsls	r3, r3, #31
 800bae2:	d503      	bpl.n	800baec <tcp_tmr+0x1c>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  }
}
 800bae4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  tcp_fasttmr();

  if (++tcp_timer & 1) {
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bae8:	f7ff bd58 	b.w	800b59c <tcp_slowtmr>
 800baec:	bd08      	pop	{r3, pc}
 800baee:	bf00      	nop
 800baf0:	20042e0d 	.word	0x20042e0d

0800baf4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800baf4:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state == LISTEN) {
 800baf6:	7e05      	ldrb	r5, [r0, #24]
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800baf8:	4604      	mov	r4, r0
 800bafa:	4616      	mov	r6, r2
  if (pcb->state == LISTEN) {
 800bafc:	2d01      	cmp	r5, #1
 800bafe:	d019      	beq.n	800bb34 <tcp_shutdown+0x40>
    return ERR_CONN;
  }
  if (shut_rx) {
 800bb00:	b161      	cbz	r1, 800bb1c <tcp_shutdown+0x28>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800bb02:	7f83      	ldrb	r3, [r0, #30]
 800bb04:	f043 0310 	orr.w	r3, r3, #16
 800bb08:	7783      	strb	r3, [r0, #30]
    if (shut_tx) {
 800bb0a:	b10a      	cbz	r2, 800bb10 <tcp_shutdown+0x1c>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800bb0c:	2101      	movs	r1, #1
 800bb0e:	e00d      	b.n	800bb2c <tcp_shutdown+0x38>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800bb10:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800bb12:	b190      	cbz	r0, 800bb3a <tcp_shutdown+0x46>
      pbuf_free(pcb->refused_data);
 800bb14:	f7ff faa6 	bl	800b064 <pbuf_free>
      pcb->refused_data = NULL;
 800bb18:	6766      	str	r6, [r4, #116]	; 0x74
 800bb1a:	e00e      	b.n	800bb3a <tcp_shutdown+0x46>
    }
  }
  if (shut_tx) {
 800bb1c:	b16a      	cbz	r2, 800bb3a <tcp_shutdown+0x46>
 800bb1e:	2d07      	cmp	r5, #7
 800bb20:	d808      	bhi.n	800bb34 <tcp_shutdown+0x40>
 800bb22:	2301      	movs	r3, #1
 800bb24:	40ab      	lsls	r3, r5
 800bb26:	f013 0f98 	tst.w	r3, #152	; 0x98
 800bb2a:	d003      	beq.n	800bb34 <tcp_shutdown+0x40>
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
    }
  }
  return ERR_OK;
}
 800bb2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800bb30:	f7ff beb2 	b.w	800b898 <tcp_close_shutdown>
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  if (pcb->state == LISTEN) {
    return ERR_CONN;
 800bb34:	f06f 000a 	mvn.w	r0, #10
 800bb38:	bd70      	pop	{r4, r5, r6, pc}
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
    }
  }
  return ERR_OK;
 800bb3a:	2000      	movs	r0, #0
}
 800bb3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bb40 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bb40:	7e03      	ldrb	r3, [r0, #24]
 800bb42:	2b0a      	cmp	r3, #10
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bb44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb48:	4604      	mov	r4, r0
 800bb4a:	460f      	mov	r7, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bb4c:	d10a      	bne.n	800bb64 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bb4e:	4601      	mov	r1, r0
 800bb50:	4827      	ldr	r0, [pc, #156]	; (800bbf0 <tcp_abandon+0xb0>)
 800bb52:	f7ff fe7b 	bl	800b84c <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800bb56:	4621      	mov	r1, r4
 800bb58:	2001      	movs	r0, #1
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
 800bb5a:	b002      	add	sp, #8
 800bb5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
 800bb60:	f7ff b9c6 	b.w	800aef0 <memp_free>
  } else {
    int send_rst = 0;
    u16_t local_port = 0;
    seqno = pcb->snd_nxt;
 800bb64:	f8d0 9050 	ldr.w	r9, [r0, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800bb68:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bb6c:	f8d0 6088 	ldr.w	r6, [r0, #136]	; 0x88
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bb70:	f8d0 8010 	ldr.w	r8, [r0, #16]
 800bb74:	8b45      	ldrh	r5, [r0, #26]
    if ((pcb->state == CLOSED) && (pcb->local_port != 0)) {
 800bb76:	b993      	cbnz	r3, 800bb9e <tcp_abandon+0x5e>
 800bb78:	b18d      	cbz	r5, 800bb9e <tcp_abandon+0x5e>
      /* bound, not yet opened */
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb7a:	4a1e      	ldr	r2, [pc, #120]	; (800bbf4 <tcp_abandon+0xb4>)
 800bb7c:	6813      	ldr	r3, [r2, #0]
 800bb7e:	4298      	cmp	r0, r3
 800bb80:	d103      	bne.n	800bb8a <tcp_abandon+0x4a>
 800bb82:	68c3      	ldr	r3, [r0, #12]
 800bb84:	6013      	str	r3, [r2, #0]
 800bb86:	e006      	b.n	800bb96 <tcp_abandon+0x56>
 800bb88:	4613      	mov	r3, r2
 800bb8a:	b123      	cbz	r3, 800bb96 <tcp_abandon+0x56>
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	4294      	cmp	r4, r2
 800bb90:	d1fa      	bne.n	800bb88 <tcp_abandon+0x48>
 800bb92:	68e2      	ldr	r2, [r4, #12]
 800bb94:	60da      	str	r2, [r3, #12]
 800bb96:	2500      	movs	r5, #0
 800bb98:	60e5      	str	r5, [r4, #12]
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
    memp_free(MEMP_TCP_PCB, pcb);
  } else {
    int send_rst = 0;
 800bb9a:	462f      	mov	r7, r5
    errf = pcb->errf;
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
    if ((pcb->state == CLOSED) && (pcb->local_port != 0)) {
      /* bound, not yet opened */
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb9c:	e006      	b.n	800bbac <tcp_abandon+0x6c>
    } else {
      send_rst = reset;
      local_port = pcb->local_port;
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bb9e:	4621      	mov	r1, r4
 800bba0:	4815      	ldr	r0, [pc, #84]	; (800bbf8 <tcp_abandon+0xb8>)
 800bba2:	f7ff fe53 	bl	800b84c <tcp_pcb_remove>
 800bba6:	2201      	movs	r2, #1
 800bba8:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <tcp_abandon+0xbc>)
 800bbaa:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bbac:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bbae:	b108      	cbz	r0, 800bbb4 <tcp_abandon+0x74>
      tcp_segs_free(pcb->unacked);
 800bbb0:	f7ff fcbf 	bl	800b532 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bbb4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800bbb6:	b108      	cbz	r0, 800bbbc <tcp_abandon+0x7c>
      tcp_segs_free(pcb->unsent);
 800bbb8:	f7ff fcbb 	bl	800b532 <tcp_segs_free>
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    if (send_rst) {
 800bbbc:	b147      	cbz	r7, 800bbd0 <tcp_abandon+0x90>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bbbe:	8ba3      	ldrh	r3, [r4, #28]
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	9500      	str	r5, [sp, #0]
 800bbc4:	4651      	mov	r1, sl
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	4648      	mov	r0, r9
 800bbca:	1d23      	adds	r3, r4, #4
 800bbcc:	f001 fcba 	bl	800d544 <tcp_rst>
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	f7ff f98c 	bl	800aef0 <memp_free>
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 800bbd8:	b13e      	cbz	r6, 800bbea <tcp_abandon+0xaa>
 800bbda:	f06f 010b 	mvn.w	r1, #11
 800bbde:	4640      	mov	r0, r8
 800bbe0:	4633      	mov	r3, r6
  }
}
 800bbe2:	b002      	add	sp, #8
 800bbe4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (send_rst) {
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
 800bbe8:	4718      	bx	r3
  }
}
 800bbea:	b002      	add	sp, #8
 800bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf0:	2004925c 	.word	0x2004925c
 800bbf4:	20049258 	.word	0x20049258
 800bbf8:	2004924c 	.word	0x2004924c
 800bbfc:	20049248 	.word	0x20049248

0800bc00 <tcp_abort>:
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  tcp_abandon(pcb, 1);
 800bc00:	2101      	movs	r1, #1
 800bc02:	f7ff bf9d 	b.w	800bb40 <tcp_abandon>

0800bc06 <tcp_accept_null>:
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800bc06:	4608      	mov	r0, r1
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bc08:	b508      	push	{r3, lr}
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800bc0a:	f7ff fff9 	bl	800bc00 <tcp_abort>

  return ERR_ABRT;
}
 800bc0e:	f06f 000b 	mvn.w	r0, #11
 800bc12:	bd08      	pop	{r3, pc}

0800bc14 <tcp_netif_ipv4_addr_changed_pcblist>:

#if LWIP_IPV4
/** Helper function for tcp_netif_ipv4_addr_changed() that iterates a pcb list */
static void
tcp_netif_ipv4_addr_changed_pcblist(const ip4_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800bc18:	b149      	cbz	r1, 800bc2e <tcp_netif_ipv4_addr_changed_pcblist+0x1a>
    /* PCB bound to current local interface address? */
    if (!IP_IS_V6_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), old_addr)
 800bc1a:	680a      	ldr	r2, [r1, #0]
 800bc1c:	682b      	ldr	r3, [r5, #0]
 800bc1e:	68cc      	ldr	r4, [r1, #12]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d102      	bne.n	800bc2a <tcp_netif_ipv4_addr_changed_pcblist+0x16>
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800bc24:	4608      	mov	r0, r1
 800bc26:	f7ff ffeb 	bl	800bc00 <tcp_abort>
      pcb = next;
    } else {
      pcb = pcb->next;
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	e7f4      	b.n	800bc18 <tcp_netif_ipv4_addr_changed_pcblist+0x4>
    }
  }
}
 800bc2e:	bd38      	pop	{r3, r4, r5, pc}

0800bc30 <tcp_kill_state>:

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc30:	4b0c      	ldr	r3, [pc, #48]	; (800bc64 <tcp_kill_state+0x34>)
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bc32:	b430      	push	{r4, r5}

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc34:	6819      	ldr	r1, [r3, #0]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
 800bc36:	2400      	movs	r4, #0
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->state == state) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc38:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <tcp_kill_state+0x38>)
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));

  inactivity = 0;
  inactive = NULL;
 800bc3a:	4622      	mov	r2, r4
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->state == state) {
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc3c:	681d      	ldr	r5, [r3, #0]

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc3e:	b151      	cbz	r1, 800bc56 <tcp_kill_state+0x26>
    if (pcb->state == state) {
 800bc40:	7e0b      	ldrb	r3, [r1, #24]
 800bc42:	4283      	cmp	r3, r0
 800bc44:	d105      	bne.n	800bc52 <tcp_kill_state+0x22>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc46:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bc48:	1aeb      	subs	r3, r5, r3
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	bf9c      	itt	ls
 800bc4e:	461c      	movls	r4, r3
 800bc50:	460a      	movls	r2, r1

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc52:	68c9      	ldr	r1, [r1, #12]
 800bc54:	e7f3      	b.n	800bc3e <tcp_kill_state+0xe>
        inactivity = tcp_ticks - pcb->tmr;
        inactive = pcb;
      }
    }
  }
  if (inactive != NULL) {
 800bc56:	b11a      	cbz	r2, 800bc60 <tcp_kill_state+0x30>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bc58:	4610      	mov	r0, r2
  }
}
 800bc5a:	bc30      	pop	{r4, r5}
  }
  if (inactive != NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bc5c:	f7ff bf70 	b.w	800bb40 <tcp_abandon>
  }
}
 800bc60:	bc30      	pop	{r4, r5}
 800bc62:	4770      	bx	lr
 800bc64:	2004924c 	.word	0x2004924c
 800bc68:	20049250 	.word	0x20049250

0800bc6c <tcp_next_iss>:
u32_t
tcp_next_iss(void)
{
  static u32_t iss = 6510;

  iss += tcp_ticks;       /* XXX */
 800bc6c:	4a03      	ldr	r2, [pc, #12]	; (800bc7c <tcp_next_iss+0x10>)
 800bc6e:	4b04      	ldr	r3, [pc, #16]	; (800bc80 <tcp_next_iss+0x14>)
 800bc70:	6810      	ldr	r0, [r2, #0]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4418      	add	r0, r3
 800bc76:	6010      	str	r0, [r2, #0]
  return iss;
}
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	2001007c 	.word	0x2001007c
 800bc80:	20049250 	.word	0x20049250

0800bc84 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	4606      	mov	r6, r0
  struct tcp_pcb *pcb;
  u32_t iss;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f7ff f925 	bl	800aed8 <memp_malloc>
 800bc8e:	4d41      	ldr	r5, [pc, #260]	; (800bd94 <tcp_alloc+0x110>)
  if (pcb == NULL) {
 800bc90:	4604      	mov	r4, r0
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d143      	bne.n	800bd1e <tcp_alloc+0x9a>
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc96:	4b40      	ldr	r3, [pc, #256]	; (800bd98 <tcp_alloc+0x114>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc98:	6829      	ldr	r1, [r5, #0]
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	b13b      	cbz	r3, 800bcae <tcp_alloc+0x2a>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bca0:	1a8a      	subs	r2, r1, r2
 800bca2:	42a2      	cmp	r2, r4
 800bca4:	bf24      	itt	cs
 800bca6:	4618      	movcs	r0, r3
 800bca8:	4614      	movcs	r4, r2
  u32_t inactivity;

  inactivity = 0;
  inactive = NULL;
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	e7f6      	b.n	800bc9c <tcp_alloc+0x18>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
    }
  }
  if (inactive != NULL) {
 800bcae:	b108      	cbz	r0, 800bcb4 <tcp_alloc+0x30>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bcb0:	f7ff ffa6 	bl	800bc00 <tcp_abort>
  if (pcb == NULL) {
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcb4:	2001      	movs	r0, #1
 800bcb6:	f7ff f90f 	bl	800aed8 <memp_malloc>
    if (pcb == NULL) {
 800bcba:	4604      	mov	r4, r0
 800bcbc:	bb78      	cbnz	r0, 800bd1e <tcp_alloc+0x9a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bcbe:	2009      	movs	r0, #9
 800bcc0:	f7ff ffb6 	bl	800bc30 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcc4:	2001      	movs	r0, #1
 800bcc6:	f7ff f907 	bl	800aed8 <memp_malloc>
      if (pcb == NULL) {
 800bcca:	4604      	mov	r4, r0
 800bccc:	bb38      	cbnz	r0, 800bd1e <tcp_alloc+0x9a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bcce:	2008      	movs	r0, #8
 800bcd0:	f7ff ffae 	bl	800bc30 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	f7ff f8ff 	bl	800aed8 <memp_malloc>
        if (pcb == NULL) {
 800bcda:	4604      	mov	r4, r0
 800bcdc:	b9f8      	cbnz	r0, 800bd1e <tcp_alloc+0x9a>
{
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bcde:	f016 0f80 	tst.w	r6, #128	; 0x80

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bce2:	4b2e      	ldr	r3, [pc, #184]	; (800bd9c <tcp_alloc+0x118>)
    if (pcb->prio <= mprio &&
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bce4:	f8d5 e000 	ldr.w	lr, [r5]
{
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bce8:	bf0c      	ite	eq
 800bcea:	4631      	moveq	r1, r6
 800bcec:	217f      	movne	r1, #127	; 0x7f

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	b163      	cbz	r3, 800bd0c <tcp_alloc+0x88>
    if (pcb->prio <= mprio &&
 800bcf2:	7e5f      	ldrb	r7, [r3, #25]
 800bcf4:	428f      	cmp	r7, r1
 800bcf6:	d807      	bhi.n	800bd08 <tcp_alloc+0x84>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bcf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcfa:	ebc2 020e 	rsb	r2, r2, lr

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    if (pcb->prio <= mprio &&
 800bcfe:	42a2      	cmp	r2, r4
 800bd00:	bf22      	ittt	cs
 800bd02:	4639      	movcs	r1, r7
 800bd04:	4614      	movcs	r4, r2
 800bd06:	4618      	movcs	r0, r3
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  inactive = NULL;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	e7f1      	b.n	800bcf0 <tcp_alloc+0x6c>
      inactivity = tcp_ticks - pcb->tmr;
      inactive = pcb;
      mprio = pcb->prio;
    }
  }
  if (inactive != NULL) {
 800bd0c:	b108      	cbz	r0, 800bd12 <tcp_alloc+0x8e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bd0e:	f7ff ff77 	bl	800bc00 <tcp_abort>
        if (pcb == NULL) {
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bd12:	2001      	movs	r0, #1
 800bd14:	f7ff f8e0 	bl	800aed8 <memp_malloc>
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bd18:	4604      	mov	r4, r0
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d037      	beq.n	800bd8e <tcp_alloc+0x10a>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bd1e:	2294      	movs	r2, #148	; 0x94
 800bd20:	2100      	movs	r1, #0
 800bd22:	4620      	mov	r0, r4
 800bd24:	f005 fd7a 	bl	801181c <memset>
    pcb->prio = prio;
    pcb->snd_buf = TCP_SND_BUF;
 800bd28:	f241 63d0 	movw	r3, #5840	; 0x16d0
    pcb->snd_queuelen = 0;
 800bd2c:	2100      	movs	r1, #0
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
    memset(pcb, 0, sizeof(struct tcp_pcb));
    pcb->prio = prio;
 800bd2e:	7666      	strb	r6, [r4, #25]
    pcb->snd_buf = TCP_SND_BUF;
 800bd30:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    pcb->snd_queuelen = 0;
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bd34:	f640 3368 	movw	r3, #2920	; 0xb68
  }
  if (pcb != NULL) {
    memset(pcb, 0, sizeof(struct tcp_pcb));
    pcb->prio = prio;
    pcb->snd_buf = TCP_SND_BUF;
    pcb->snd_queuelen = 0;
 800bd38:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bd3c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800bd3e:	85a3      	strh	r3, [r4, #44]	; 0x2c
    /* snd_scale and rcv_scale are zero unless both sides agree to use scaling */
    pcb->snd_scale = 0;
    pcb->rcv_scale = 0;
#endif
    pcb->tos = 0;
    pcb->ttl = TCP_TTL;
 800bd40:	23ff      	movs	r3, #255	; 0xff
#if LWIP_WND_SCALE
    /* snd_scale and rcv_scale are zero unless both sides agree to use scaling */
    pcb->snd_scale = 0;
    pcb->rcv_scale = 0;
#endif
    pcb->tos = 0;
 800bd42:	7261      	strb	r1, [r4, #9]
    pcb->ttl = TCP_TTL;
 800bd44:	72a3      	strb	r3, [r4, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 800bd46:	f44f 7306 	mov.w	r3, #536	; 0x218
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
    pcb->sa = 0;
 800bd4a:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
#endif
    pcb->tos = 0;
    pcb->ttl = TCP_TTL;
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 800bd4e:	86e3      	strh	r3, [r4, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bd50:	2306      	movs	r3, #6
 800bd52:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    pcb->sa = 0;
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bd56:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
    pcb->rtime = -1;
 800bd5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd5e:	86a3      	strh	r3, [r4, #52]	; 0x34
    pcb->cwnd = 1;
 800bd60:	2301      	movs	r3, #1
 800bd62:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    iss = tcp_next_iss();
 800bd66:	f7ff ff81 	bl	800bc6c <tcp_next_iss>
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
 800bd6a:	682b      	ldr	r3, [r5, #0]
    pcb->sa = 0;
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
 800bd6c:	65a0      	str	r0, [r4, #88]	; 0x58
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
 800bd6e:	6263      	str	r3, [r4, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
 800bd70:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <tcp_alloc+0x11c>)
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
 800bd72:	6520      	str	r0, [r4, #80]	; 0x50
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
    pcb->last_timer = tcp_timer_ctr;
 800bd74:	781b      	ldrb	r3, [r3, #0]
    pcb->rtime = -1;
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
 800bd76:	64a0      	str	r0, [r4, #72]	; 0x48
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
    pcb->last_timer = tcp_timer_ctr;
 800bd78:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    pcb->polltmr = 0;

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bd7c:	4b09      	ldr	r3, [pc, #36]	; (800bda4 <tcp_alloc+0x120>)
    pcb->cwnd = 1;
    iss = tcp_next_iss();
    pcb->snd_wl2 = iss;
    pcb->snd_nxt = iss;
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
 800bd7e:	65e0      	str	r0, [r4, #92]	; 0x5c
    pcb->last_timer = tcp_timer_ctr;

    pcb->polltmr = 0;

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bd80:	67e3      	str	r3, [r4, #124]	; 0x7c
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bd82:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <tcp_alloc+0x124>)
    pcb->lastack = iss;
    pcb->snd_lbb = iss;
    pcb->tmr = tcp_ticks;
    pcb->last_timer = tcp_timer_ctr;

    pcb->polltmr = 0;
 800bd84:	77e1      	strb	r1, [r4, #31]
#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bd86:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
 800bd8a:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
  }
  return pcb;
}
 800bd8e:	4620      	mov	r0, r4
 800bd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20049250 	.word	0x20049250
 800bd98:	2004925c 	.word	0x2004925c
 800bd9c:	2004924c 	.word	0x2004924c
 800bda0:	20042e0e 	.word	0x20042e0e
 800bda4:	0800b9d9 	.word	0x0800b9d9
 800bda8:	006ddd00 	.word	0x006ddd00

0800bdac <tcp_new>:
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  return tcp_alloc(TCP_PRIO_NORMAL);
 800bdac:	2040      	movs	r0, #64	; 0x40
 800bdae:	f7ff bf69 	b.w	800bc84 <tcp_alloc>

0800bdb2 <tcp_eff_send_mss_impl>:
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
#if LWIP_IPV6 && LWIP_IPV4
                     , u8_t isipv6
#endif /* LWIP_IPV6 && LWIP_IPV4 */
                     )
{
 800bdb2:	b510      	push	{r4, lr}
 800bdb4:	4604      	mov	r4, r0
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(isipv6, src, dest);
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	f7fe fce0 	bl	800a77c <ip4_route>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bdbc:	b130      	cbz	r0, 800bdcc <tcp_eff_send_mss_impl+0x1a>
      return sendmss;
    }
    mtu = outif->mtu;
 800bdbe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bdc0:	b123      	cbz	r3, 800bdcc <tcp_eff_send_mss_impl+0x1a>
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bdc2:	3b28      	subs	r3, #40	; 0x28
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	429c      	cmp	r4, r3
 800bdc8:	bf28      	it	cs
 800bdca:	461c      	movcs	r4, r3
  }
  return sendmss;
}
 800bdcc:	4620      	mov	r0, r4
 800bdce:	bd10      	pop	{r4, pc}

0800bdd0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd2:	461f      	mov	r7, r3
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800bdd4:	4604      	mov	r4, r0
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d05f      	beq.n	800be9a <tcp_connect+0xca>
    return ERR_VAL;
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800bdda:	7e03      	ldrb	r3, [r0, #24]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d159      	bne.n	800be94 <tcp_connect+0xc4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
 800bde0:	2900      	cmp	r1, #0
 800bde2:	d05a      	beq.n	800be9a <tcp_connect+0xca>
    ip_addr_set(&pcb->remote_ip, ipaddr);
 800bde4:	680b      	ldr	r3, [r1, #0]
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
 800bde6:	8382      	strh	r2, [r0, #28]

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
    ip_addr_set(&pcb->remote_ip, ipaddr);
 800bde8:	6043      	str	r3, [r0, #4]
    return ERR_VAL;
  }
  pcb->remote_port = port;

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bdea:	6803      	ldr	r3, [r0, #0]
 800bdec:	b933      	cbnz	r3, 800bdfc <tcp_connect+0x2c>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800bdee:	3004      	adds	r0, #4
 800bdf0:	f7fe fcc4 	bl	800a77c <ip4_route>
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d053      	beq.n	800bea0 <tcp_connect+0xd0>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bdf8:	6843      	ldr	r3, [r0, #4]
 800bdfa:	6023      	str	r3, [r4, #0]
  }

  old_local_port = pcb->local_port;
 800bdfc:	8b66      	ldrh	r6, [r4, #26]
  if (pcb->local_port == 0) {
 800bdfe:	b316      	cbz	r6, 800be46 <tcp_connect+0x76>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss();
 800be00:	f7ff ff34 	bl	800bc6c <tcp_next_iss>
  pcb->rcv_nxt = 0;
  pcb->snd_nxt = iss;
 800be04:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 800be06:	3801      	subs	r0, #1
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss();
  pcb->rcv_nxt = 0;
 800be08:	2300      	movs	r3, #0
  pcb->snd_nxt = iss;
  pcb->lastack = iss - 1;
  pcb->snd_lbb = iss - 1;
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800be0a:	f640 3568 	movw	r5, #2920	; 0xb68
  pcb->snd_wnd = TCP_WND;
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 800be0e:	1d21      	adds	r1, r4, #4
  }

  iss = tcp_next_iss();
  pcb->rcv_nxt = 0;
  pcb->snd_nxt = iss;
  pcb->lastack = iss - 1;
 800be10:	64a0      	str	r0, [r4, #72]	; 0x48
  pcb->snd_lbb = iss - 1;
 800be12:	65e0      	str	r0, [r4, #92]	; 0x5c
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  pcb->snd_wnd = TCP_WND;
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 800be14:	f44f 7006 	mov.w	r0, #536	; 0x218
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss();
  pcb->rcv_nxt = 0;
 800be18:	62a3      	str	r3, [r4, #40]	; 0x28
  pcb->lastack = iss - 1;
  pcb->snd_lbb = iss - 1;
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800be1a:	6323      	str	r3, [r4, #48]	; 0x30
  pcb->snd_nxt = iss;
  pcb->lastack = iss - 1;
  pcb->snd_lbb = iss - 1;
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800be1c:	85e5      	strh	r5, [r4, #46]	; 0x2e
 800be1e:	85a5      	strh	r5, [r4, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  pcb->snd_wnd = TCP_WND;
 800be20:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
 800be24:	86e0      	strh	r0, [r4, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 800be26:	f7ff ffc4 	bl	800bdb2 <tcp_eff_send_mss_impl>
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800be2a:	2301      	movs	r3, #1
  pcb->snd_wnd = TCP_WND;
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 800be2c:	86e0      	strh	r0, [r4, #54]	; 0x36
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800be2e:	2102      	movs	r1, #2
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800be30:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800be34:	4620      	mov	r0, r4
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  pcb->ssthresh = TCP_WND;
 800be36:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800be3a:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800be3e:	f001 f990 	bl	800d162 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800be42:	b140      	cbz	r0, 800be56 <tcp_connect+0x86>
 800be44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ip_addr_copy(pcb->local_ip, *local_ip);
  }

  old_local_port = pcb->local_port;
  if (pcb->local_port == 0) {
    pcb->local_port = tcp_new_port();
 800be46:	f7ff fa7f 	bl	800b348 <tcp_new_port>
 800be4a:	8360      	strh	r0, [r4, #26]
    if (pcb->local_port == 0) {
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d1d7      	bne.n	800be00 <tcp_connect+0x30>
      return ERR_BUF;
 800be50:	f06f 0001 	mvn.w	r0, #1
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
  }
  return ret;
}
 800be54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  if (ret == ERR_OK) {
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800be56:	2302      	movs	r3, #2
 800be58:	7623      	strb	r3, [r4, #24]
    if (old_local_port != 0) {
 800be5a:	b16e      	cbz	r6, 800be78 <tcp_connect+0xa8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800be5c:	4a12      	ldr	r2, [pc, #72]	; (800bea8 <tcp_connect+0xd8>)
 800be5e:	6813      	ldr	r3, [r2, #0]
 800be60:	429c      	cmp	r4, r3
 800be62:	d103      	bne.n	800be6c <tcp_connect+0x9c>
 800be64:	68e3      	ldr	r3, [r4, #12]
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	e006      	b.n	800be78 <tcp_connect+0xa8>
 800be6a:	4613      	mov	r3, r2
 800be6c:	b123      	cbz	r3, 800be78 <tcp_connect+0xa8>
 800be6e:	68da      	ldr	r2, [r3, #12]
 800be70:	4294      	cmp	r4, r2
 800be72:	d1fa      	bne.n	800be6a <tcp_connect+0x9a>
 800be74:	68e2      	ldr	r2, [r4, #12]
 800be76:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800be78:	4b0c      	ldr	r3, [pc, #48]	; (800beac <tcp_connect+0xdc>)
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	601c      	str	r4, [r3, #0]
 800be7e:	60e2      	str	r2, [r4, #12]
 800be80:	f7fe fe0a 	bl	800aa98 <tcp_timer_needed>
 800be84:	2201      	movs	r2, #1
 800be86:	4b0a      	ldr	r3, [pc, #40]	; (800beb0 <tcp_connect+0xe0>)
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800be88:	4620      	mov	r0, r4
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
    if (old_local_port != 0) {
      TCP_RMV(&tcp_bound_pcbs, pcb);
    }
    TCP_REG_ACTIVE(pcb);
 800be8a:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800be8c:	f001 fa12 	bl	800d2b4 <tcp_output>
 800be90:	2000      	movs	r0, #0
 800be92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800be94:	f06f 0009 	mvn.w	r0, #9
 800be98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
 800be9a:	f06f 0005 	mvn.w	r0, #5
 800be9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip, netif, local_ip);
    if ((netif == NULL) || (local_ip == NULL)) {
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800bea0:	f06f 0003 	mvn.w	r0, #3
 800bea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20049258 	.word	0x20049258
 800beac:	2004924c 	.word	0x2004924c
 800beb0:	20049248 	.word	0x20049248

0800beb4 <tcp_netif_ipv4_addr_changed>:
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change or NULL if netif has been removed
 */
void tcp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 800beb4:	b538      	push	{r3, r4, r5, lr}
  struct tcp_pcb_listen *lpcb, *next;

  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800beb6:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <tcp_netif_ipv4_addr_changed+0x3c>)
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change or NULL if netif has been removed
 */
void tcp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 800beb8:	460c      	mov	r4, r1
 800beba:	4605      	mov	r5, r0
  struct tcp_pcb_listen *lpcb, *next;

  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bebc:	6819      	ldr	r1, [r3, #0]
 800bebe:	f7ff fea9 	bl	800bc14 <tcp_netif_ipv4_addr_changed_pcblist>
  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bec2:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <tcp_netif_ipv4_addr_changed+0x40>)
 800bec4:	4628      	mov	r0, r5
 800bec6:	6819      	ldr	r1, [r3, #0]
 800bec8:	f7ff fea4 	bl	800bc14 <tcp_netif_ipv4_addr_changed_pcblist>

  if (!ip4_addr_isany(new_addr)) {
 800becc:	b174      	cbz	r4, 800beec <tcp_netif_ipv4_addr_changed+0x38>
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	b163      	cbz	r3, 800beec <tcp_netif_ipv4_addr_changed+0x38>
    /* PCB bound to current local interface address? */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800bed2:	4b09      	ldr	r3, [pc, #36]	; (800bef8 <tcp_netif_ipv4_addr_changed+0x44>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	b14b      	cbz	r3, 800beec <tcp_netif_ipv4_addr_changed+0x38>
      next = lpcb->next;
      /* Is this an IPv4 pcb? */
      if (!IP_IS_V6_VAL(lpcb->local_ip)) {
        /* PCB bound to current local interface address? */
        if ((!(ip4_addr_isany(ip_2_ip4(&lpcb->local_ip)))) &&
 800bed8:	681a      	ldr	r2, [r3, #0]
  tcp_netif_ipv4_addr_changed_pcblist(old_addr, tcp_bound_pcbs);

  if (!ip4_addr_isany(new_addr)) {
    /* PCB bound to current local interface address? */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
      next = lpcb->next;
 800beda:	68d9      	ldr	r1, [r3, #12]
      /* Is this an IPv4 pcb? */
      if (!IP_IS_V6_VAL(lpcb->local_ip)) {
        /* PCB bound to current local interface address? */
        if ((!(ip4_addr_isany(ip_2_ip4(&lpcb->local_ip)))) &&
 800bedc:	b122      	cbz	r2, 800bee8 <tcp_netif_ipv4_addr_changed+0x34>
 800bede:	6828      	ldr	r0, [r5, #0]
 800bee0:	4282      	cmp	r2, r0
            (ip4_addr_cmp(ip_2_ip4(&lpcb->local_ip), old_addr))) {
          /* The PCB is listening to the old ipaddr and
           * is set to listen to the new one instead */
              ip_addr_copy_from_ip4(lpcb->local_ip, *new_addr);
 800bee2:	bf04      	itt	eq
 800bee4:	6822      	ldreq	r2, [r4, #0]
 800bee6:	601a      	streq	r2, [r3, #0]
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change or NULL if netif has been removed
 */
void tcp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 800bee8:	460b      	mov	r3, r1
 800beea:	e7f4      	b.n	800bed6 <tcp_netif_ipv4_addr_changed+0x22>
 800beec:	bd38      	pop	{r3, r4, r5, pc}
 800beee:	bf00      	nop
 800bef0:	2004924c 	.word	0x2004924c
 800bef4:	20049258 	.word	0x20049258
 800bef8:	20049254 	.word	0x20049254

0800befc <tcp_receive>:
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800befc:	4ba1      	ldr	r3, [pc, #644]	; (800c184 <tcp_receive+0x288>)
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800befe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800bf02:	781b      	ldrb	r3, [r3, #0]
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800bf04:	4604      	mov	r4, r0
 800bf06:	4ea0      	ldr	r6, [pc, #640]	; (800c188 <tcp_receive+0x28c>)
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
 800bf08:	f013 0f10 	tst.w	r3, #16
 800bf0c:	f000 8169 	beq.w	800c1e2 <tcp_receive+0x2e6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf10:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800bf12:	6831      	ldr	r1, [r6, #0]
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bf14:	f8b0 7060 	ldrh.w	r7, [r0, #96]	; 0x60
 800bf18:	6d82      	ldr	r2, [r0, #88]	; 0x58

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf1a:	1a58      	subs	r0, r3, r1
 800bf1c:	4d9b      	ldr	r5, [pc, #620]	; (800c18c <tcp_receive+0x290>)
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	db0d      	blt.n	800bf3e <tcp_receive+0x42>
 800bf22:	428b      	cmp	r3, r1
 800bf24:	d103      	bne.n	800bf2e <tcp_receive+0x32>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf26:	682b      	ldr	r3, [r5, #0]
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	db07      	blt.n	800bf3e <tcp_receive+0x42>
 800bf2e:	682b      	ldr	r3, [r5, #0]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d11e      	bne.n	800bf72 <tcp_receive+0x76>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bf34:	4b96      	ldr	r3, [pc, #600]	; (800c190 <tcp_receive+0x294>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	89db      	ldrh	r3, [r3, #14]
 800bf3a:	42bb      	cmp	r3, r7
 800bf3c:	d919      	bls.n	800bf72 <tcp_receive+0x76>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf3e:	4b94      	ldr	r3, [pc, #592]	; (800c190 <tcp_receive+0x294>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bf40:	f8b4 e062 	ldrh.w	lr, [r4, #98]	; 0x62

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	89d8      	ldrh	r0, [r3, #14]
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 800bf48:	6561      	str	r1, [r4, #84]	; 0x54
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bf4a:	4586      	cmp	lr, r0
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 800bf4c:	6829      	ldr	r1, [r5, #0]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf4e:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 800bf52:	65a1      	str	r1, [r4, #88]	; 0x58
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bf54:	bf38      	it	cc
 800bf56:	f8a4 0062 	strhcc.w	r0, [r4, #98]	; 0x62
 800bf5a:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
      if (pcb->snd_wnd == 0) {
 800bf5e:	b920      	cbnz	r0, 800bf6a <tcp_receive+0x6e>
        if (pcb->persist_backoff == 0) {
 800bf60:	b939      	cbnz	r1, 800bf72 <tcp_receive+0x76>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800bf62:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
          pcb->persist_backoff = 1;
 800bf66:	2301      	movs	r3, #1
 800bf68:	e001      	b.n	800bf6e <tcp_receive+0x72>
        }
      } else if (pcb->persist_backoff > 0) {
 800bf6a:	b111      	cbz	r1, 800bf72 <tcp_receive+0x76>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bf72:	6829      	ldr	r1, [r5, #0]
 800bf74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800bf76:	1a0b      	subs	r3, r1, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	dc34      	bgt.n	800bfe6 <tcp_receive+0xea>
      pcb->acked = 0;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
 800bf82:	4b84      	ldr	r3, [pc, #528]	; (800c194 <tcp_receive+0x298>)
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f040 81f9 	bne.w	800c37e <tcp_receive+0x482>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bf8c:	443a      	add	r2, r7
 800bf8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf90:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 800bf94:	443b      	add	r3, r7
 800bf96:	429a      	cmp	r2, r3
 800bf98:	f040 81f1 	bne.w	800c37e <tcp_receive+0x482>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bf9c:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f2c0 81ec 	blt.w	800c37e <tcp_receive+0x482>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bfa6:	4281      	cmp	r1, r0
 800bfa8:	f040 81e9 	bne.w	800c37e <tcp_receive+0x482>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bfac:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800bfb0:	1c53      	adds	r3, r2, #1
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800bfb6:	bf38      	it	cc
 800bfb8:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
 800bfbc:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800bfc0:	2b03      	cmp	r3, #3
 800bfc2:	d90a      	bls.n	800bfda <tcp_receive+0xde>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800bfc4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 800bfc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800bfca:	4413      	add	r3, r2
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	f080 808e 	bcs.w	800c0f0 <tcp_receive+0x1f4>
                  pcb->cwnd += pcb->mss;
 800bfd4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800bfd8:	e08a      	b.n	800c0f0 <tcp_receive+0x1f4>
                }
              } else if (pcb->dupacks == 3) {
 800bfda:	f040 8089 	bne.w	800c0f0 <tcp_receive+0x1f4>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f001 fb39 	bl	800d656 <tcp_rexmit_fast>
 800bfe4:	e084      	b.n	800c0f0 <tcp_receive+0x1f4>
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800bfe6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800bfe8:	1a8a      	subs	r2, r1, r2
 800bfea:	2a00      	cmp	r2, #0
 800bfec:	dc7a      	bgt.n	800c0e4 <tcp_receive+0x1e8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bfee:	7fa2      	ldrb	r2, [r4, #30]
      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;

      /* Update the send buffer space. Diff between the two can never exceed 64K
         unless window scaling is used. */
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bff0:	b29b      	uxth	r3, r3

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800bff2:	f9b4 7040 	ldrsh.w	r7, [r4, #64]	; 0x40
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bff6:	0750      	lsls	r0, r2, #29
      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;

      /* Update the send buffer space. Diff between the two can never exceed 64K
         unless window scaling is used. */
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800bff8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        pcb->flags &= ~TF_INFR;
        pcb->cwnd = pcb->ssthresh;
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bffc:	f04f 0000 	mov.w	r0, #0

      pcb->snd_buf += pcb->acked;

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
      pcb->lastack = ackno;
 800c000:	64a1      	str	r1, [r4, #72]	; 0x48

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
        pcb->flags &= ~TF_INFR;
 800c002:	bf48      	it	mi
 800c004:	f022 0204 	bicmi.w	r2, r2, #4
        pcb->cwnd = pcb->ssthresh;
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c008:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
        pcb->flags &= ~TF_INFR;
 800c00c:	bf44      	itt	mi
 800c00e:	77a2      	strbmi	r2, [r4, #30]
        pcb->cwnd = pcb->ssthresh;
 800c010:	f8b4 204e 	ldrhmi.w	r2, [r4, #78]	; 0x4e
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);

      pcb->snd_buf += pcb->acked;

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c014:	f884 0047 	strb.w	r0, [r4, #71]	; 0x47
      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
        pcb->flags &= ~TF_INFR;
        pcb->cwnd = pcb->ssthresh;
 800c018:	bf48      	it	mi
 800c01a:	f8a4 204c 	strhmi.w	r2, [r4, #76]	; 0x4c

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c01e:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 800c022:	eb02 02e7 	add.w	r2, r2, r7, asr #3
 800c026:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44

      /* Update the send buffer space. Diff between the two can never exceed 64K
         unless window scaling is used. */
      pcb->acked = (tcpwnd_size_t)(ackno - pcb->lastack);

      pcb->snd_buf += pcb->acked;
 800c02a:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800c02e:	4413      	add	r3, r2
 800c030:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->dupacks = 0;
      pcb->lastack = ackno;

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c034:	7e23      	ldrb	r3, [r4, #24]
 800c036:	2b03      	cmp	r3, #3
 800c038:	d947      	bls.n	800c0ca <tcp_receive+0x1ce>
        if (pcb->cwnd < pcb->ssthresh) {
 800c03a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 800c03e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 800c042:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c044:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
            pcb->cwnd += pcb->mss;
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800c046:	bf9c      	itt	ls
 800c048:	435b      	mulls	r3, r3
 800c04a:	fb93 f3f2 	sdivls	r3, r3, r2
 800c04e:	4413      	add	r3, r2
 800c050:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800c052:	429a      	cmp	r2, r3
 800c054:	d239      	bcs.n	800c0ca <tcp_receive+0x1ce>
            pcb->cwnd = new_cwnd;
 800c056:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800c05a:	e036      	b.n	800c0ca <tcp_receive+0x1ce>
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	6858      	ldr	r0, [r3, #4]
 800c060:	f7fd fbc8 	bl	80097f4 <lwip_ntohl>
 800c064:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c066:	4607      	mov	r7, r0
 800c068:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	8998      	ldrh	r0, [r3, #12]
 800c070:	f7fd fbbb 	bl	80097ea <lwip_ntohs>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c074:	682b      	ldr	r3, [r5, #0]
 800c076:	f010 0003 	ands.w	r0, r0, #3
 800c07a:	ebc3 0808 	rsb	r8, r3, r8
 800c07e:	bf18      	it	ne
 800c080:	2001      	movne	r0, #1
 800c082:	4447      	add	r7, r8
 800c084:	4438      	add	r0, r7
 800c086:	2800      	cmp	r0, #0
 800c088:	dc22      	bgt.n	800c0d0 <tcp_receive+0x1d4>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800c08a:	6f27      	ldr	r7, [r4, #112]	; 0x70
        pcb->unacked = pcb->unacked->next;
 800c08c:	683b      	ldr	r3, [r7, #0]

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c08e:	6878      	ldr	r0, [r7, #4]
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
        pcb->unacked = pcb->unacked->next;
 800c090:	6723      	str	r3, [r4, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c092:	f7ff f8b3 	bl	800b1fc <pbuf_clen>
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 800c096:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c09a:	b15b      	cbz	r3, 800c0b4 <tcp_receive+0x1b8>
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	8998      	ldrh	r0, [r3, #12]
 800c0a0:	f7fd fba3 	bl	80097ea <lwip_ntohs>
 800c0a4:	07c1      	lsls	r1, r0, #31
          pcb->acked--;
 800c0a6:	bf42      	ittt	mi
 800c0a8:	f8b4 3064 	ldrhmi.w	r3, [r4, #100]	; 0x64
 800c0ac:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c0b0:	f8a4 3064 	strhmi.w	r3, [r4, #100]	; 0x64
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f7ff f8a1 	bl	800b1fc <pbuf_clen>
 800c0ba:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800c0be:	1a18      	subs	r0, r3, r0
 800c0c0:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
        tcp_seg_free(next);
 800c0c4:	4638      	mov	r0, r7
 800c0c6:	f7ff fa26 	bl	800b516 <tcp_seg_free>
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800c0ca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1c5      	bne.n	800c05c <tcp_receive+0x160>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c0d0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	b91a      	cbnz	r2, 800c0de <tcp_receive+0x1e2>
        pcb->rtime = -1;
 800c0d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0da:	86a2      	strh	r2, [r4, #52]	; 0x34
 800c0dc:	e000      	b.n	800c0e0 <tcp_receive+0x1e4>
      } else {
        pcb->rtime = 0;
 800c0de:	86a3      	strh	r3, [r4, #52]	; 0x34
      }

      pcb->polltmr = 0;
 800c0e0:	77e3      	strb	r3, [r4, #31]
 800c0e2:	e005      	b.n	800c0f0 <tcp_receive+0x1f4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 800c0e4:	2300      	movs	r3, #0
      tcp_send_empty_ack(pcb);
 800c0e6:	4620      	mov	r0, r4
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
 800c0e8:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      tcp_send_empty_ack(pcb);
 800c0ec:	f001 f8ad 	bl	800d24a <tcp_send_empty_ack>
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 800c0f0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800c18c <tcp_receive+0x290>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c0f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c0f6:	b91b      	cbnz	r3, 800c100 <tcp_receive+0x204>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c0f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d14c      	bne.n	800c198 <tcp_receive+0x29c>
 800c0fe:	e070      	b.n	800c1e2 <tcp_receive+0x2e6>
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	682f      	ldr	r7, [r5, #0]
 800c104:	6858      	ldr	r0, [r3, #4]
 800c106:	f7fd fb75 	bl	80097f4 <lwip_ntohl>
 800c10a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c10c:	4681      	mov	r9, r0
 800c10e:	f8b3 a008 	ldrh.w	sl, [r3, #8]
 800c112:	691b      	ldr	r3, [r3, #16]
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c114:	ebca 0707 	rsb	r7, sl, r7
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 800c118:	8998      	ldrh	r0, [r3, #12]
 800c11a:	f7fd fb66 	bl	80097ea <lwip_ntohs>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800c11e:	f010 0003 	ands.w	r0, r0, #3
 800c122:	ebc9 0707 	rsb	r7, r9, r7
 800c126:	bf18      	it	ne
 800c128:	2001      	movne	r0, #1
 800c12a:	1a3f      	subs	r7, r7, r0
 800c12c:	2f00      	cmp	r7, #0
 800c12e:	dbe3      	blt.n	800c0f8 <tcp_receive+0x1fc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) +
 800c130:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c132:	f8d8 3000 	ldr.w	r3, [r8]
 800c136:	1a9b      	subs	r3, r3, r2
 800c138:	2b00      	cmp	r3, #0
 800c13a:	dcdd      	bgt.n	800c0f8 <tcp_receive+0x1fc>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800c13c:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
      pcb->unsent = pcb->unsent->next;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	66e3      	str	r3, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c142:	b90b      	cbnz	r3, 800c148 <tcp_receive+0x24c>
        pcb->unsent_oversize = 0;
 800c144:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff f857 	bl	800b1fc <pbuf_clen>
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 800c14e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c152:	b15b      	cbz	r3, 800c16c <tcp_receive+0x270>
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	8998      	ldrh	r0, [r3, #12]
 800c158:	f7fd fb47 	bl	80097ea <lwip_ntohs>
 800c15c:	07c2      	lsls	r2, r0, #31
        pcb->acked--;
 800c15e:	bf42      	ittt	mi
 800c160:	f8b4 3064 	ldrhmi.w	r3, [r4, #100]	; 0x64
 800c164:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c168:	f8a4 3064 	strhmi.w	r3, [r4, #100]	; 0x64
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff f845 	bl	800b1fc <pbuf_clen>
 800c172:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800c176:	1a18      	subs	r0, r3, r0
 800c178:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      tcp_seg_free(next);
 800c17c:	4638      	mov	r0, r7
 800c17e:	f7ff f9ca 	bl	800b516 <tcp_seg_free>
 800c182:	e7b7      	b.n	800c0f4 <tcp_receive+0x1f8>
 800c184:	20042e24 	.word	0x20042e24
 800c188:	20042e14 	.word	0x20042e14
 800c18c:	20042e20 	.word	0x20042e20
 800c190:	20042e28 	.word	0x20042e28
 800c194:	20042e1c 	.word	0x20042e1c
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c198:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c19a:	682b      	ldr	r3, [r5, #0]
 800c19c:	1ad2      	subs	r2, r2, r3
 800c19e:	2a00      	cmp	r2, #0
 800c1a0:	da1f      	bge.n	800c1e2 <tcp_receive+0x2e6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c1a2:	4b7a      	ldr	r3, [pc, #488]	; (800c38c <tcp_receive+0x490>)

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800c1a4:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	1a1b      	subs	r3, r3, r0
 800c1ac:	eba3 03e1 	sub.w	r3, r3, r1, asr #3
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	b21a      	sxth	r2, r3
      pcb->sa += m;
 800c1b4:	4419      	add	r1, r3
      if (m < 0) {
 800c1b6:	2a00      	cmp	r2, #0
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
      pcb->sa += m;
 800c1b8:	b209      	sxth	r1, r1
      if (m < 0) {
        m = -m;
 800c1ba:	bfb8      	it	lt
 800c1bc:	425b      	neglt	r3, r3
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
      pcb->sa += m;
 800c1be:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (m < 0) {
        m = -m;
 800c1c2:	bfb8      	it	lt
 800c1c4:	b21a      	sxthlt	r2, r3
      }
      m = m - (pcb->sv >> 2);
 800c1c6:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
      pcb->sv += m;
 800c1ca:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
 800c1ce:	441a      	add	r2, r3
 800c1d0:	b293      	uxth	r3, r2
 800c1d2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c1d6:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800c1da:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	63a3      	str	r3, [r4, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c1e2:	4f6b      	ldr	r7, [pc, #428]	; (800c390 <tcp_receive+0x494>)
 800c1e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c1e6:	883d      	ldrh	r5, [r7, #0]
 800c1e8:	2d00      	cmp	r5, #0
 800c1ea:	f000 80b8 	beq.w	800c35e <tcp_receive+0x462>
 800c1ee:	7e23      	ldrb	r3, [r4, #24]
 800c1f0:	2b06      	cmp	r3, #6
 800c1f2:	f200 80b4 	bhi.w	800c35e <tcp_receive+0x462>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c1f6:	6833      	ldr	r3, [r6, #0]
 800c1f8:	1ad1      	subs	r1, r2, r3
 800c1fa:	2901      	cmp	r1, #1
 800c1fc:	d428      	bmi.n	800c250 <tcp_receive+0x354>
 800c1fe:	1c50      	adds	r0, r2, #1
 800c200:	1ac0      	subs	r0, r0, r3
 800c202:	1b40      	subs	r0, r0, r5
 800c204:	2800      	cmp	r0, #0
 800c206:	dc23      	bgt.n	800c250 <tcp_receive+0x354>
         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
      p = inseg.p;
 800c208:	4d62      	ldr	r5, [pc, #392]	; (800c394 <tcp_receive+0x498>)

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
 800c20a:	460b      	mov	r3, r1
      p = inseg.p;
 800c20c:	6868      	ldr	r0, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
 800c20e:	8942      	ldrh	r2, [r0, #10]
 800c210:	4291      	cmp	r1, r2
 800c212:	dd0f      	ble.n	800c234 <tcp_receive+0x338>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c214:	8902      	ldrh	r2, [r0, #8]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800c216:	f04f 0e00 	mov.w	lr, #0
      p = inseg.p;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c21a:	1a52      	subs	r2, r2, r1
 800c21c:	b292      	uxth	r2, r2
        while (p->len < off) {
 800c21e:	8941      	ldrh	r1, [r0, #10]
 800c220:	428b      	cmp	r3, r1
 800c222:	dd05      	ble.n	800c230 <tcp_receive+0x334>
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800c224:	8102      	strh	r2, [r0, #8]
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
        while (p->len < off) {
          off -= p->len;
 800c226:	1a5b      	subs	r3, r3, r1
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800c228:	f8a0 e00a 	strh.w	lr, [r0, #10]
          p = p->next;
 800c22c:	6800      	ldr	r0, [r0, #0]
 800c22e:	e7f6      	b.n	800c21e <tcp_receive+0x322>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800c230:	4259      	negs	r1, r3
 800c232:	e000      	b.n	800c236 <tcp_receive+0x33a>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800c234:	4249      	negs	r1, r1
 800c236:	b209      	sxth	r1, r1
 800c238:	f7fe ff06 	bl	800b048 <pbuf_header>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c23c:	6831      	ldr	r1, [r6, #0]
 800c23e:	892b      	ldrh	r3, [r5, #8]
 800c240:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c242:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c244:	6032      	str	r2, [r6, #0]
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800c246:	1a9b      	subs	r3, r3, r2
 800c248:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c24a:	692b      	ldr	r3, [r5, #16]
 800c24c:	605a      	str	r2, [r3, #4]
 800c24e:	e006      	b.n	800c25e <tcp_receive+0x362>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c250:	1a9b      	subs	r3, r3, r2
 800c252:	2b00      	cmp	r3, #0
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c254:	bfbe      	ittt	lt
 800c256:	7fa3      	ldrblt	r3, [r4, #30]
 800c258:	f043 0302 	orrlt.w	r3, r3, #2
 800c25c:	77a3      	strblt	r3, [r4, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c25e:	6831      	ldr	r1, [r6, #0]
 800c260:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c262:	1a8b      	subs	r3, r1, r2
 800c264:	2b00      	cmp	r3, #0
 800c266:	db75      	blt.n	800c354 <tcp_receive+0x458>
 800c268:	1c4b      	adds	r3, r1, #1
 800c26a:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 800c26c:	1a9b      	subs	r3, r3, r2
 800c26e:	1a1b      	subs	r3, r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	dc6f      	bgt.n	800c354 <tcp_receive+0x458>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c274:	4291      	cmp	r1, r2
 800c276:	d16d      	bne.n	800c354 <tcp_receive+0x458>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c278:	4d46      	ldr	r5, [pc, #280]	; (800c394 <tcp_receive+0x498>)
 800c27a:	692b      	ldr	r3, [r5, #16]
 800c27c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c280:	8998      	ldrh	r0, [r3, #12]
 800c282:	f7fd fab2 	bl	80097ea <lwip_ntohs>
 800c286:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 800c28a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c28c:	bf18      	it	ne
 800c28e:	2001      	movne	r0, #1
 800c290:	4440      	add	r0, r8
 800c292:	b280      	uxth	r0, r0

        if (tcplen > pcb->rcv_wnd) {
 800c294:	4283      	cmp	r3, r0
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c296:	8038      	strh	r0, [r7, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c298:	d236      	bcs.n	800c308 <tcp_receive+0x40c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c29a:	692b      	ldr	r3, [r5, #16]
 800c29c:	8998      	ldrh	r0, [r3, #12]
 800c29e:	f7fd faa4 	bl	80097ea <lwip_ntohs>
 800c2a2:	07c3      	lsls	r3, r0, #31
 800c2a4:	d510      	bpl.n	800c2c8 <tcp_receive+0x3cc>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c2a6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800c2aa:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800c2b4:	f7fd fa99 	bl	80097ea <lwip_ntohs>
 800c2b8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c2bc:	f7fd fa92 	bl	80097e4 <lwip_htons>
 800c2c0:	ea40 0008 	orr.w	r0, r0, r8
 800c2c4:	f8a9 000c 	strh.w	r0, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c2c8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800c2ca:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800c394 <tcp_receive+0x498>
 800c2ce:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c2d0:	692b      	ldr	r3, [r5, #16]
 800c2d2:	8998      	ldrh	r0, [r3, #12]
 800c2d4:	f7fd fa89 	bl	80097ea <lwip_ntohs>
 800c2d8:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c2da:	6868      	ldr	r0, [r5, #4]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
            inseg.len -= 1;
 800c2dc:	bf42      	ittt	mi
 800c2de:	f8b8 3008 	ldrhmi.w	r3, [r8, #8]
 800c2e2:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c2e6:	f8a8 3008 	strhmi.w	r3, [r8, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c2ea:	8929      	ldrh	r1, [r5, #8]
 800c2ec:	f7fe ff60 	bl	800b1b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c2f0:	692b      	ldr	r3, [r5, #16]
 800c2f2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800c2f6:	8998      	ldrh	r0, [r3, #12]
 800c2f8:	f7fd fa77 	bl	80097ea <lwip_ntohs>
 800c2fc:	f010 0003 	ands.w	r0, r0, #3
 800c300:	bf18      	it	ne
 800c302:	2001      	movne	r0, #1
 800c304:	4440      	add	r0, r8
 800c306:	8038      	strh	r0, [r7, #0]
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c308:	8839      	ldrh	r1, [r7, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;

        tcp_update_rcv_ann_wnd(pcb);
 800c30a:	4620      	mov	r0, r4

        pcb->rcv_nxt = seqno + tcplen;

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800c30c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c30e:	6832      	ldr	r2, [r6, #0]

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800c310:	1a5b      	subs	r3, r3, r1
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c312:	440a      	add	r2, r1

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
 800c314:	85a3      	strh	r3, [r4, #44]	; 0x2c
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c316:	62a2      	str	r2, [r4, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;

        tcp_update_rcv_ann_wnd(pcb);
 800c318:	f7ff f8be 	bl	800b498 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c31c:	686b      	ldr	r3, [r5, #4]
 800c31e:	891a      	ldrh	r2, [r3, #8]
 800c320:	b122      	cbz	r2, 800c32c <tcp_receive+0x430>
          recv_data = inseg.p;
 800c322:	4a1d      	ldr	r2, [pc, #116]	; (800c398 <tcp_receive+0x49c>)
 800c324:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c326:	2200      	movs	r2, #0
 800c328:	4b1a      	ldr	r3, [pc, #104]	; (800c394 <tcp_receive+0x498>)
 800c32a:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c32c:	692b      	ldr	r3, [r5, #16]
 800c32e:	8998      	ldrh	r0, [r3, #12]
 800c330:	f7fd fa5b 	bl	80097ea <lwip_ntohs>
 800c334:	07c1      	lsls	r1, r0, #31
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c336:	bf41      	itttt	mi
 800c338:	4a18      	ldrmi	r2, [pc, #96]	; (800c39c <tcp_receive+0x4a0>)
 800c33a:	7813      	ldrbmi	r3, [r2, #0]
 800c33c:	f043 0320 	orrmi.w	r3, r3, #32
 800c340:	7013      	strbmi	r3, [r2, #0]
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c342:	7fa3      	ldrb	r3, [r4, #30]
 800c344:	07da      	lsls	r2, r3, #31
 800c346:	d502      	bpl.n	800c34e <tcp_receive+0x452>
 800c348:	f023 0301 	bic.w	r3, r3, #1
 800c34c:	e012      	b.n	800c374 <tcp_receive+0x478>
 800c34e:	f043 0301 	orr.w	r3, r3, #1
 800c352:	e011      	b.n	800c378 <tcp_receive+0x47c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800c354:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 800c356:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800c35a:	f000 bf76 	b.w	800d24a <tcp_send_empty_ack>
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c35e:	6833      	ldr	r3, [r6, #0]
 800c360:	1a99      	subs	r1, r3, r2
 800c362:	2900      	cmp	r1, #0
 800c364:	db05      	blt.n	800c372 <tcp_receive+0x476>
 800c366:	3301      	adds	r3, #1
 800c368:	1a9b      	subs	r3, r3, r2
 800c36a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c36c:	1a9b      	subs	r3, r3, r2
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dd09      	ble.n	800c386 <tcp_receive+0x48a>
      tcp_ack_now(pcb);
 800c372:	7fa3      	ldrb	r3, [r4, #30]
 800c374:	f043 0302 	orr.w	r3, r3, #2
 800c378:	77a3      	strb	r3, [r4, #30]
    }
  }
}
 800c37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
        pcb->dupacks = 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800c384:	e6b4      	b.n	800c0f0 <tcp_receive+0x1f4>
 800c386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c38a:	bf00      	nop
 800c38c:	20049250 	.word	0x20049250
 800c390:	20042e1c 	.word	0x20042e1c
 800c394:	20042e34 	.word	0x20042e34
 800c398:	20042e2c 	.word	0x20042e2c
 800c39c:	20042e25 	.word	0x20042e25

0800c3a0 <tcp_getoptbyte>:
}

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c3a0:	4b0b      	ldr	r3, [pc, #44]	; (800c3d0 <tcp_getoptbyte+0x30>)
 800c3a2:	4a0c      	ldr	r2, [pc, #48]	; (800c3d4 <tcp_getoptbyte+0x34>)
 800c3a4:	6819      	ldr	r1, [r3, #0]
  }
}

static u8_t
tcp_getoptbyte(void)
{
 800c3a6:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800c3a8:	b121      	cbz	r1, 800c3b4 <tcp_getoptbyte+0x14>
 800c3aa:	480b      	ldr	r0, [pc, #44]	; (800c3d8 <tcp_getoptbyte+0x38>)
 800c3ac:	8813      	ldrh	r3, [r2, #0]
 800c3ae:	8800      	ldrh	r0, [r0, #0]
 800c3b0:	4283      	cmp	r3, r0
 800c3b2:	d207      	bcs.n	800c3c4 <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800c3b4:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <tcp_getoptbyte+0x3c>)
 800c3b6:	6819      	ldr	r1, [r3, #0]
    return opts[tcp_optidx++];
 800c3b8:	8813      	ldrh	r3, [r2, #0]
 800c3ba:	1c58      	adds	r0, r3, #1
 800c3bc:	440b      	add	r3, r1
 800c3be:	8010      	strh	r0, [r2, #0]
 800c3c0:	7d18      	ldrb	r0, [r3, #20]
 800c3c2:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c3c4:	1c5c      	adds	r4, r3, #1
    return tcphdr_opt2[idx];
 800c3c6:	1a1b      	subs	r3, r3, r0
 800c3c8:	b2db      	uxtb	r3, r3
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[tcp_optidx++];
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800c3ca:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 800c3cc:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800c3ce:	bd10      	pop	{r4, pc}
 800c3d0:	20042e18 	.word	0x20042e18
 800c3d4:	20042e10 	.word	0x20042e10
 800c3d8:	20042e30 	.word	0x20042e30
 800c3dc:	20042e28 	.word	0x20042e28

0800c3e0 <tcp_parseopt.isra.1>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 800c3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
 800c3e4:	4c23      	ldr	r4, [pc, #140]	; (800c474 <tcp_parseopt.isra.1+0x94>)
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 800c3e6:	4680      	mov	r8, r0
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	8998      	ldrh	r0, [r3, #12]
 800c3ec:	f7fd f9fd 	bl	80097ea <lwip_ntohs>
 800c3f0:	f3c0 300f 	ubfx	r0, r0, #12, #16
 800c3f4:	2805      	cmp	r0, #5
 800c3f6:	d93a      	bls.n	800c46e <tcp_parseopt.isra.1+0x8e>
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c3f8:	6823      	ldr	r3, [r4, #0]
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
        mss |= tcp_getoptbyte();
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c3fa:	f240 59b3 	movw	r9, #1459	; 0x5b3
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c3fe:	4e1e      	ldr	r6, [pc, #120]	; (800c478 <tcp_parseopt.isra.1+0x98>)
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
        mss |= tcp_getoptbyte();
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c400:	f240 5ab4 	movw	sl, #1460	; 0x5b4
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c404:	8998      	ldrh	r0, [r3, #12]
 800c406:	f7fd f9f0 	bl	80097ea <lwip_ntohs>
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c40a:	4637      	mov	r7, r6
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c40c:	0b00      	lsrs	r0, r0, #12
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c40e:	2300      	movs	r3, #0
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c410:	1f45      	subs	r5, r0, #5
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c412:	8033      	strh	r3, [r6, #0]
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (TCPH_HDRLEN(tcphdr) > 0x5) {
    u16_t max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 800c414:	00ad      	lsls	r5, r5, #2
 800c416:	b2ad      	uxth	r5, r5
    for (tcp_optidx = 0; tcp_optidx < max_c; ) {
 800c418:	8833      	ldrh	r3, [r6, #0]
 800c41a:	42ab      	cmp	r3, r5
 800c41c:	d227      	bcs.n	800c46e <tcp_parseopt.isra.1+0x8e>
      u8_t opt = tcp_getoptbyte();
 800c41e:	f7ff ffbf 	bl	800c3a0 <tcp_getoptbyte>
      switch (opt) {
 800c422:	2801      	cmp	r0, #1
 800c424:	d0f8      	beq.n	800c418 <tcp_parseopt.isra.1+0x38>
 800c426:	d322      	bcc.n	800c46e <tcp_parseopt.isra.1+0x8e>
 800c428:	2802      	cmp	r0, #2
 800c42a:	d117      	bne.n	800c45c <tcp_parseopt.isra.1+0x7c>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > max_c) {
 800c42c:	f7ff ffb8 	bl	800c3a0 <tcp_getoptbyte>
 800c430:	2804      	cmp	r0, #4
 800c432:	d11c      	bne.n	800c46e <tcp_parseopt.isra.1+0x8e>
 800c434:	883b      	ldrh	r3, [r7, #0]
 800c436:	3301      	adds	r3, #1
 800c438:	42ab      	cmp	r3, r5
 800c43a:	da18      	bge.n	800c46e <tcp_parseopt.isra.1+0x8e>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800c43c:	f7ff ffb0 	bl	800c3a0 <tcp_getoptbyte>
 800c440:	0200      	lsls	r0, r0, #8
 800c442:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 800c444:	f7ff ffac 	bl	800c3a0 <tcp_getoptbyte>
 800c448:	4320      	orrs	r0, r4
 800c44a:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c44c:	1e43      	subs	r3, r0, #1
 800c44e:	b29b      	uxth	r3, r3
 800c450:	454b      	cmp	r3, r9
 800c452:	bf88      	it	hi
 800c454:	4650      	movhi	r0, sl
 800c456:	f8a8 0000 	strh.w	r0, [r8]
 800c45a:	e7dd      	b.n	800c418 <tcp_parseopt.isra.1+0x38>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800c45c:	f7ff ffa0 	bl	800c3a0 <tcp_getoptbyte>
        if (data < 2) {
 800c460:	2801      	cmp	r0, #1
 800c462:	d904      	bls.n	800c46e <tcp_parseopt.isra.1+0x8e>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800c464:	883b      	ldrh	r3, [r7, #0]
 800c466:	3b02      	subs	r3, #2
 800c468:	4418      	add	r0, r3
 800c46a:	8038      	strh	r0, [r7, #0]
 800c46c:	e7d4      	b.n	800c418 <tcp_parseopt.isra.1+0x38>
 800c46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c472:	bf00      	nop
 800c474:	20042e28 	.word	0x20042e28
 800c478:	20042e10 	.word	0x20042e10

0800c47c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c480:	6843      	ldr	r3, [r0, #4]
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c482:	b089      	sub	sp, #36	; 0x24
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c484:	4db5      	ldr	r5, [pc, #724]	; (800c75c <tcp_input+0x2e0>)
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c486:	4680      	mov	r8, r0
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c488:	602b      	str	r3, [r5, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < sizeof(struct tcp_hdr)) {
 800c48a:	8943      	ldrh	r3, [r0, #10]
 800c48c:	2b13      	cmp	r3, #19
 800c48e:	f240 80d0 	bls.w	800c632 <tcp_input+0x1b6>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (
#if LWIP_IPV4
      (!ip_current_is_v6() && ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) ||
 800c492:	4eb3      	ldr	r6, [pc, #716]	; (800c760 <tcp_input+0x2e4>)
 800c494:	6831      	ldr	r1, [r6, #0]
 800c496:	6970      	ldr	r0, [r6, #20]
 800c498:	f7fe fab5 	bl	800aa06 <ip4_addr_isbroadcast_u32>
 800c49c:	9603      	str	r6, [sp, #12]
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (
 800c49e:	4682      	mov	sl, r0
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	f040 80c6 	bne.w	800c632 <tcp_input+0x1b6>
#if LWIP_IPV4
      (!ip_current_is_v6() && ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif())) ||
 800c4a6:	6973      	ldr	r3, [r6, #20]
 800c4a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4ac:	2be0      	cmp	r3, #224	; 0xe0
 800c4ae:	f000 80c0 	beq.w	800c632 <tcp_input+0x1b6>
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 800c4b2:	682b      	ldr	r3, [r5, #0]
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 800c4b4:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 800c790 <tcp_input+0x314>
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
 800c4b8:	8998      	ldrh	r0, [r3, #12]
 800c4ba:	f7fd f996 	bl	80097ea <lwip_ntohs>
 800c4be:	f3c0 300f 	ubfx	r0, r0, #12, #16
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
  tcphdr_opt2 = NULL;
  if (p->len < hdrlen * 4) {
 800c4c2:	f8b8 300a 	ldrh.w	r3, [r8, #10]
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 800c4c6:	1f44      	subs	r4, r0, #5
  tcphdr_opt2 = NULL;
 800c4c8:	4fa6      	ldr	r7, [pc, #664]	; (800c764 <tcp_input+0x2e8>)
  if (p->len < hdrlen * 4) {
 800c4ca:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 800c4ce:	ea4f 0484 	mov.w	r4, r4, lsl #2
  tcphdr_opt2 = NULL;
 800c4d2:	f8c7 a000 	str.w	sl, [r7]
#endif /* CHECKSUM_CHECK_TCP */

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  tcphdr_opt1len = (hdrlen * 4) - TCP_HLEN;
 800c4d6:	b2a4      	uxth	r4, r4
 800c4d8:	f8a9 4000 	strh.w	r4, [r9]
  tcphdr_opt2 = NULL;
  if (p->len < hdrlen * 4) {
 800c4dc:	da24      	bge.n	800c528 <tcp_input+0xac>
    if (p->len >= TCP_HLEN) {
 800c4de:	2b13      	cmp	r3, #19
 800c4e0:	f240 80a7 	bls.w	800c632 <tcp_input+0x1b6>
      /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
      u16_t optlen = tcphdr_opt1len;
      pbuf_header(p, -TCP_HLEN); /* cannot fail */
 800c4e4:	f06f 0113 	mvn.w	r1, #19
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	f7fe fdad 	bl	800b048 <pbuf_header>
      LWIP_ASSERT("tcphdr_opt1len >= p->len", tcphdr_opt1len >= p->len);
      LWIP_ASSERT("p->next != NULL", p->next != NULL);
      tcphdr_opt1len = p->len;
 800c4ee:	f8b8 100a 	ldrh.w	r1, [r8, #10]
      if (optlen > tcphdr_opt1len) {
 800c4f2:	428c      	cmp	r4, r1
      /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
      u16_t optlen = tcphdr_opt1len;
      pbuf_header(p, -TCP_HLEN); /* cannot fail */
      LWIP_ASSERT("tcphdr_opt1len >= p->len", tcphdr_opt1len >= p->len);
      LWIP_ASSERT("p->next != NULL", p->next != NULL);
      tcphdr_opt1len = p->len;
 800c4f4:	f8a9 1000 	strh.w	r1, [r9]
      if (optlen > tcphdr_opt1len) {
 800c4f8:	d91d      	bls.n	800c536 <tcp_input+0xba>
        s16_t opt2len;
        /* options continue in the next pbuf: set p to zero length and hide the
           options in the next pbuf (adjusting p->tot_len) */
        u8_t phret = pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800c4fa:	4249      	negs	r1, r1
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	b209      	sxth	r1, r1
 800c500:	f7fe fda2 	bl	800b048 <pbuf_header>
        LWIP_ASSERT("phret == 0", phret == 0);
        tcphdr_opt2 = (u8_t*)p->next->payload;
 800c504:	f8d8 0000 	ldr.w	r0, [r8]
 800c508:	6843      	ldr	r3, [r0, #4]
 800c50a:	603b      	str	r3, [r7, #0]
        opt2len = optlen - tcphdr_opt1len;
 800c50c:	f8b9 3000 	ldrh.w	r3, [r9]
 800c510:	1ae4      	subs	r4, r4, r3
 800c512:	b2a4      	uxth	r4, r4
        phret = pbuf_header(p->next, -opt2len);
 800c514:	4261      	negs	r1, r4
 800c516:	b209      	sxth	r1, r1
 800c518:	f7fe fd96 	bl	800b048 <pbuf_header>
        LWIP_ASSERT("phret == 0", phret == 0);
        /* p->next->payload now points to the TCP data */
        /* manually adjust p->tot_len to changed p->next->tot_len change */
        p->tot_len -= opt2len;
 800c51c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c520:	1b1c      	subs	r4, r3, r4
 800c522:	f8a8 4008 	strh.w	r4, [r8, #8]
 800c526:	e006      	b.n	800c536 <tcp_input+0xba>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }
  } else {
    pbuf_header(p, -(hdrlen * 4)); /* cannot fail */
 800c528:	ebc0 3080 	rsb	r0, r0, r0, lsl #14
 800c52c:	0081      	lsls	r1, r0, #2
 800c52e:	4640      	mov	r0, r8
 800c530:	b209      	sxth	r1, r1
 800c532:	f7fe fd89 	bl	800b048 <pbuf_header>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 800c536:	682c      	ldr	r4, [r5, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 800c538:	4f8b      	ldr	r7, [pc, #556]	; (800c768 <tcp_input+0x2ec>)
  } else {
    pbuf_header(p, -(hdrlen * 4)); /* cannot fail */
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
 800c53a:	8820      	ldrh	r0, [r4, #0]
 800c53c:	f7fd f955 	bl	80097ea <lwip_ntohs>
 800c540:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
 800c542:	682c      	ldr	r4, [r5, #0]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800c544:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c794 <tcp_input+0x318>
    pbuf_header(p, -(hdrlen * 4)); /* cannot fail */
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
 800c548:	8860      	ldrh	r0, [r4, #2]
 800c54a:	f7fd f94e 	bl	80097ea <lwip_ntohs>
 800c54e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 800c550:	682c      	ldr	r4, [r5, #0]
 800c552:	6860      	ldr	r0, [r4, #4]
 800c554:	f7fd f94e 	bl	80097f4 <lwip_ntohl>
 800c558:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800c55a:	682c      	ldr	r4, [r5, #0]
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 800c55c:	6038      	str	r0, [r7, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800c55e:	68a0      	ldr	r0, [r4, #8]
 800c560:	f7fd f948 	bl	80097f4 <lwip_ntohl>
 800c564:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 800c566:	682c      	ldr	r4, [r5, #0]

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 800c568:	f8c9 0000 	str.w	r0, [r9]
  tcphdr->wnd = ntohs(tcphdr->wnd);
 800c56c:	89e0      	ldrh	r0, [r4, #14]
 800c56e:	f7fd f93c 	bl	80097ea <lwip_ntohs>

  flags = TCPH_FLAGS(tcphdr);
 800c572:	682b      	ldr	r3, [r5, #0]
  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);
 800c574:	81e0      	strh	r0, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c576:	8998      	ldrh	r0, [r3, #12]
 800c578:	f7fd f937 	bl	80097ea <lwip_ntohs>
 800c57c:	4a7b      	ldr	r2, [pc, #492]	; (800c76c <tcp_input+0x2f0>)
 800c57e:	b2c3      	uxtb	r3, r0
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c580:	f8b8 a008 	ldrh.w	sl, [r8, #8]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c584:	487a      	ldr	r0, [pc, #488]	; (800c770 <tcp_input+0x2f4>)
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
 800c586:	f003 013f 	and.w	r1, r3, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c58a:	f013 0b03 	ands.w	fp, r3, #3

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c58e:	f8d0 e000 	ldr.w	lr, [r0]
  tcphdr->dest = ntohs(tcphdr->dest);
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
 800c592:	7011      	strb	r1, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c594:	bf18      	it	ne
 800c596:	f04f 0b01 	movne.w	fp, #1
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c59a:	9903      	ldr	r1, [sp, #12]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c59c:	4674      	mov	r4, lr
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c59e:	44d3      	add	fp, sl
 800c5a0:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800c798 <tcp_input+0x31c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5a4:	6909      	ldr	r1, [r1, #16]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c5a6:	fa1f fb8b 	uxth.w	fp, fp
 800c5aa:	f8cd 9010 	str.w	r9, [sp, #16]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5ae:	9107      	str	r1, [sp, #28]
 800c5b0:	4681      	mov	r9, r0
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5b2:	9903      	ldr	r1, [sp, #12]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 800c5b4:	682a      	ldr	r2, [r5, #0]
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5b6:	6949      	ldr	r1, [r1, #20]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  tcphdr->wnd = ntohs(tcphdr->wnd);

  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c5b8:	f8ac b000 	strh.w	fp, [ip]
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
        pcb->local_port == tcphdr->dest &&
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c5bc:	9105      	str	r1, [sp, #20]
  flags = TCPH_FLAGS(tcphdr);
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c5be:	2100      	movs	r1, #0
 800c5c0:	f8cd c018 	str.w	ip, [sp, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5c4:	2c00      	cmp	r4, #0
 800c5c6:	d03a      	beq.n	800c63e <tcp_input+0x1c2>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
 800c5c8:	f8b4 c01c 	ldrh.w	ip, [r4, #28]
 800c5cc:	8810      	ldrh	r0, [r2, #0]
 800c5ce:	4584      	cmp	ip, r0
 800c5d0:	d116      	bne.n	800c600 <tcp_input+0x184>
 800c5d2:	f8b4 c01a 	ldrh.w	ip, [r4, #26]
 800c5d6:	8850      	ldrh	r0, [r2, #2]
 800c5d8:	4584      	cmp	ip, r0
 800c5da:	d111      	bne.n	800c600 <tcp_input+0x184>
        pcb->local_port == tcphdr->dest &&
 800c5dc:	6860      	ldr	r0, [r4, #4]
 800c5de:	9e07      	ldr	r6, [sp, #28]
 800c5e0:	42b0      	cmp	r0, r6
 800c5e2:	d10d      	bne.n	800c600 <tcp_input+0x184>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c5e4:	6820      	ldr	r0, [r4, #0]
 800c5e6:	9e05      	ldr	r6, [sp, #20]
 800c5e8:	42b0      	cmp	r0, r6
 800c5ea:	d109      	bne.n	800c600 <tcp_input+0x184>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
 800c5ec:	2900      	cmp	r1, #0
 800c5ee:	f000 8090 	beq.w	800c712 <tcp_input+0x296>
        prev->next = pcb->next;
 800c5f2:	68e0      	ldr	r0, [r4, #12]
 800c5f4:	60c8      	str	r0, [r1, #12]
        pcb->next = tcp_active_pcbs;
        tcp_active_pcbs = pcb;
 800c5f6:	495e      	ldr	r1, [pc, #376]	; (800c770 <tcp_input+0x2f4>)
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
        prev->next = pcb->next;
        pcb->next = tcp_active_pcbs;
 800c5f8:	f8c4 e00c 	str.w	lr, [r4, #12]
        tcp_active_pcbs = pcb;
 800c5fc:	600c      	str	r4, [r1, #0]
 800c5fe:	e088      	b.n	800c712 <tcp_input+0x296>

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c600:	4621      	mov	r1, r4
 800c602:	68e4      	ldr	r4, [r4, #12]
 800c604:	e7de      	b.n	800c5c4 <tcp_input+0x148>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c606:	68c0      	ldr	r0, [r0, #12]
 800c608:	2800      	cmp	r0, #0
 800c60a:	d03a      	beq.n	800c682 <tcp_input+0x206>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 800c60c:	8b81      	ldrh	r1, [r0, #28]
 800c60e:	f8b2 e000 	ldrh.w	lr, [r2]
 800c612:	458e      	cmp	lr, r1
 800c614:	d1f7      	bne.n	800c606 <tcp_input+0x18a>
          pcb->local_port == tcphdr->dest &&
 800c616:	8b41      	ldrh	r1, [r0, #26]
  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
 800c618:	8854      	ldrh	r4, [r2, #2]
 800c61a:	428c      	cmp	r4, r1
 800c61c:	d1f3      	bne.n	800c606 <tcp_input+0x18a>
          pcb->local_port == tcphdr->dest &&
 800c61e:	6841      	ldr	r1, [r0, #4]
 800c620:	9e07      	ldr	r6, [sp, #28]
 800c622:	428e      	cmp	r6, r1
 800c624:	d1ef      	bne.n	800c606 <tcp_input+0x18a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c626:	6801      	ldr	r1, [r0, #0]
 800c628:	9e05      	ldr	r6, [sp, #20]
 800c62a:	428e      	cmp	r6, r1
 800c62c:	d1eb      	bne.n	800c606 <tcp_input+0x18a>
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c62e:	075e      	lsls	r6, r3, #29
 800c630:	d508      	bpl.n	800c644 <tcp_input+0x1c8>
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c632:	4640      	mov	r0, r8
}
 800c634:	b009      	add	sp, #36	; 0x24
 800c636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_STOP("tcp_input");
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c63a:	f7fe bd13 	b.w	800b064 <pbuf_free>
  }

  if (pcb == NULL) {
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c63e:	494d      	ldr	r1, [pc, #308]	; (800c774 <tcp_input+0x2f8>)
 800c640:	6808      	ldr	r0, [r1, #0]
 800c642:	e7e1      	b.n	800c608 <tcp_input+0x18c>
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
    return ERR_OK;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c644:	079d      	lsls	r5, r3, #30
 800c646:	d50d      	bpl.n	800c664 <tcp_input+0x1e8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c64c:	1acb      	subs	r3, r1, r3
 800c64e:	d40e      	bmi.n	800c66e <tcp_input+0x1f2>
 800c650:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800c652:	1a9b      	subs	r3, r3, r2
 800c654:	2b00      	cmp	r3, #0
 800c656:	dc0a      	bgt.n	800c66e <tcp_input+0x1f2>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c658:	4b47      	ldr	r3, [pc, #284]	; (800c778 <tcp_input+0x2fc>)
 800c65a:	4459      	add	r1, fp
 800c65c:	e88d 4010 	stmia.w	sp, {r4, lr}
 800c660:	1d1a      	adds	r2, r3, #4
 800c662:	e040      	b.n	800c6e6 <tcp_input+0x26a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
      return ERR_OK;
    }
  } else if (flags & TCP_FIN) {
 800c664:	07dc      	lsls	r4, r3, #31
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c666:	bf42      	ittt	mi
 800c668:	4b44      	ldrmi	r3, [pc, #272]	; (800c77c <tcp_input+0x300>)
 800c66a:	681b      	ldrmi	r3, [r3, #0]
 800c66c:	6243      	strmi	r3, [r0, #36]	; 0x24
  }

  if ((tcplen > 0)) {
 800c66e:	f1bb 0f00 	cmp.w	fp, #0
 800c672:	d0de      	beq.n	800c632 <tcp_input+0x1b6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800c674:	7f83      	ldrb	r3, [r0, #30]
 800c676:	f043 0302 	orr.w	r3, r3, #2
 800c67a:	7783      	strb	r3, [r0, #30]
    return tcp_output(pcb);
 800c67c:	f000 fe1a 	bl	800d2b4 <tcp_output>
 800c680:	e7d7      	b.n	800c632 <tcp_input+0x1b6>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c682:	493f      	ldr	r1, [pc, #252]	; (800c780 <tcp_input+0x304>)
 800c684:	680c      	ldr	r4, [r1, #0]
 800c686:	46a2      	mov	sl, r4
 800c688:	f1ba 0f00 	cmp.w	sl, #0
 800c68c:	d030      	beq.n	800c6f0 <tcp_input+0x274>
      if (lpcb->local_port == tcphdr->dest) {
 800c68e:	f8ba 101a 	ldrh.w	r1, [sl, #26]
 800c692:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 800c696:	458e      	cmp	lr, r1
 800c698:	d107      	bne.n	800c6aa <tcp_input+0x22e>
          break;
#endif /* SO_REUSE */
        } else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
        if (IP_PCB_IPVER_INPUT_MATCH(lpcb)) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c69a:	f8da e000 	ldr.w	lr, [sl]
 800c69e:	9e05      	ldr	r6, [sp, #20]
 800c6a0:	4576      	cmp	r6, lr
 800c6a2:	d006      	beq.n	800c6b2 <tcp_input+0x236>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c6a4:	f1be 0f00 	cmp.w	lr, #0
 800c6a8:	d003      	beq.n	800c6b2 <tcp_input+0x236>
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	f8da a00c 	ldr.w	sl, [sl, #12]
 800c6b0:	e7ea      	b.n	800c688 <tcp_input+0x20c>
#endif /* SO_REUSE */
    if (lpcb != NULL) {
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c6b2:	b138      	cbz	r0, 800c6c4 <tcp_input+0x248>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c6b4:	f8da 600c 	ldr.w	r6, [sl, #12]
 800c6b8:	60c6      	str	r6, [r0, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c6ba:	4831      	ldr	r0, [pc, #196]	; (800c780 <tcp_input+0x304>)
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c6bc:	f8ca 400c 	str.w	r4, [sl, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c6c0:	f8c0 a000 	str.w	sl, [r0]
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
 800c6c4:	0758      	lsls	r0, r3, #29
 800c6c6:	d4b4      	bmi.n	800c632 <tcp_input+0x1b6>
    return ERR_OK;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c6c8:	f003 0010 	and.w	r0, r3, #16
 800c6cc:	f000 04ff 	and.w	r4, r0, #255	; 0xff
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	f000 8288 	beq.w	800cbe6 <tcp_input+0x76a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6d6:	8813      	ldrh	r3, [r2, #0]
 800c6d8:	6838      	ldr	r0, [r7, #0]
 800c6da:	e88d 000a 	stmia.w	sp, {r1, r3}
 800c6de:	4b26      	ldr	r3, [pc, #152]	; (800c778 <tcp_input+0x2fc>)
 800c6e0:	eb0b 0100 	add.w	r1, fp, r0
 800c6e4:	1d1a      	adds	r2, r3, #4
 800c6e6:	9804      	ldr	r0, [sp, #16]
 800c6e8:	6800      	ldr	r0, [r0, #0]
 800c6ea:	f000 ff2b 	bl	800d544 <tcp_rst>
 800c6ee:	e7a0      	b.n	800c632 <tcp_input+0x1b6>
  } else {

    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c6f0:	8990      	ldrh	r0, [r2, #12]
 800c6f2:	f7fd f87a 	bl	80097ea <lwip_ntohs>
 800c6f6:	0743      	lsls	r3, r0, #29
 800c6f8:	d49b      	bmi.n	800c632 <tcp_input+0x1b6>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6fa:	682b      	ldr	r3, [r5, #0]
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6fc:	9a06      	ldr	r2, [sp, #24]
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	8810      	ldrh	r0, [r2, #0]
 800c702:	881a      	ldrh	r2, [r3, #0]
 800c704:	4401      	add	r1, r0
 800c706:	9201      	str	r2, [sp, #4]
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	4b1a      	ldr	r3, [pc, #104]	; (800c778 <tcp_input+0x2fc>)
 800c70e:	1d1a      	adds	r2, r3, #4
 800c710:	e7e9      	b.n	800c6e6 <tcp_input+0x26a>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c712:	481c      	ldr	r0, [pc, #112]	; (800c784 <tcp_input+0x308>)
 800c714:	2100      	movs	r1, #0
    inseg.len = p->tot_len;
    inseg.p = p;
    inseg.tcphdr = tcphdr;

    recv_data = NULL;
    recv_flags = 0;
 800c716:	4e1c      	ldr	r6, [pc, #112]	; (800c788 <tcp_input+0x30c>)

    if (flags & TCP_PSH) {
 800c718:	f013 0f08 	tst.w	r3, #8

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
    inseg.len = p->tot_len;
    inseg.p = p;
    inseg.tcphdr = tcphdr;
 800c71c:	6102      	str	r2, [r0, #16]
 800c71e:	4681      	mov	r9, r0

    recv_data = NULL;
 800c720:	4a1a      	ldr	r2, [pc, #104]	; (800c78c <tcp_input+0x310>)
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
    inseg.len = p->tot_len;
 800c722:	f8a0 a008 	strh.w	sl, [r0, #8]
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c726:	6001      	str	r1, [r0, #0]
 800c728:	4692      	mov	sl, r2
    inseg.len = p->tot_len;
    inseg.p = p;
 800c72a:	f8c0 8004 	str.w	r8, [r0, #4]
    inseg.tcphdr = tcphdr;

    recv_data = NULL;
 800c72e:	6011      	str	r1, [r2, #0]
    recv_flags = 0;
 800c730:	7031      	strb	r1, [r6, #0]

    if (flags & TCP_PSH) {
 800c732:	d005      	beq.n	800c740 <tcp_input+0x2c4>
      p->flags |= PBUF_FLAG_PUSH;
 800c734:	f898 300d 	ldrb.w	r3, [r8, #13]
 800c738:	f043 0301 	orr.w	r3, r3, #1
 800c73c:	f888 300d 	strb.w	r3, [r8, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c740:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c742:	f8df b058 	ldr.w	fp, [pc, #88]	; 800c79c <tcp_input+0x320>
 800c746:	bb5b      	cbnz	r3, 800c7a0 <tcp_input+0x324>
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c748:	4a08      	ldr	r2, [pc, #32]	; (800c76c <tcp_input+0x2f0>)
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
 800c74a:	f8cb 4000 	str.w	r4, [fp]
  err_t err;

  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c74e:	7813      	ldrb	r3, [r2, #0]
 800c750:	4690      	mov	r8, r2
 800c752:	f013 0f04 	tst.w	r3, #4
 800c756:	d132      	bne.n	800c7be <tcp_input+0x342>
 800c758:	e046      	b.n	800c7e8 <tcp_input+0x36c>
 800c75a:	bf00      	nop
 800c75c:	20042e28 	.word	0x20042e28
 800c760:	20043138 	.word	0x20043138
 800c764:	20042e18 	.word	0x20042e18
 800c768:	20042e14 	.word	0x20042e14
 800c76c:	20042e24 	.word	0x20042e24
 800c770:	2004924c 	.word	0x2004924c
 800c774:	2004925c 	.word	0x2004925c
 800c778:	20043148 	.word	0x20043148
 800c77c:	20049250 	.word	0x20049250
 800c780:	20049254 	.word	0x20049254
 800c784:	20042e34 	.word	0x20042e34
 800c788:	20042e25 	.word	0x20042e25
 800c78c:	20042e2c 	.word	0x20042e2c
 800c790:	20042e30 	.word	0x20042e30
 800c794:	20042e20 	.word	0x20042e20
 800c798:	20042e1c 	.word	0x20042e1c
 800c79c:	20049260 	.word	0x20049260
      p->flags |= PBUF_FLAG_PUSH;
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c7a0:	4620      	mov	r0, r4
 800c7a2:	f7ff f92b 	bl	800b9fc <tcp_process_refused_data>
 800c7a6:	300c      	adds	r0, #12
 800c7a8:	f000 820f 	beq.w	800cbca <tcp_input+0x74e>
 800c7ac:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0ca      	beq.n	800c748 <tcp_input+0x2cc>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c7b2:	4bab      	ldr	r3, [pc, #684]	; (800ca60 <tcp_input+0x5e4>)
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	f040 8207 	bne.w	800cbca <tcp_input+0x74e>
 800c7bc:	e7c4      	b.n	800c748 <tcp_input+0x2cc>
  err = ERR_OK;

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c7be:	7e23      	ldrb	r3, [r4, #24]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d106      	bne.n	800c7d2 <tcp_input+0x356>
      if (ackno == pcb->snd_nxt) {
 800c7c4:	4ba7      	ldr	r3, [pc, #668]	; (800ca64 <tcp_input+0x5e8>)
 800c7c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	f040 818f 	bne.w	800caee <tcp_input+0x672>
 800c7d0:	e260      	b.n	800cc94 <tcp_input+0x818>
        acceptable = 1;
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c7d6:	1a9b      	subs	r3, r3, r2
 800c7d8:	f100 8189 	bmi.w	800caee <tcp_input+0x672>
 800c7dc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f300 8184 	bgt.w	800caee <tcp_input+0x672>
 800c7e6:	e255      	b.n	800cc94 <tcp_input+0x818>
       seqno, pcb->rcv_nxt));
      return ERR_OK;
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c7e8:	f013 0f02 	tst.w	r3, #2
 800c7ec:	7fa3      	ldrb	r3, [r4, #30]
 800c7ee:	d003      	beq.n	800c7f8 <tcp_input+0x37c>
 800c7f0:	7e22      	ldrb	r2, [r4, #24]
 800c7f2:	3a02      	subs	r2, #2
 800c7f4:	2a01      	cmp	r2, #1
 800c7f6:	d86b      	bhi.n	800c8d0 <tcp_input+0x454>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
    return ERR_OK;
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c7f8:	06d8      	lsls	r0, r3, #27
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  }
  pcb->keep_cnt_sent = 0;

  tcp_parseopt(pcb);
 800c7fa:	f104 0036 	add.w	r0, r4, #54	; 0x36
    return ERR_OK;
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c7fe:	bf5e      	ittt	pl
 800c800:	4b99      	ldrpl	r3, [pc, #612]	; (800ca68 <tcp_input+0x5ec>)
 800c802:	681b      	ldrpl	r3, [r3, #0]
 800c804:	6263      	strpl	r3, [r4, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92

  tcp_parseopt(pcb);
 800c80c:	f7ff fde8 	bl	800c3e0 <tcp_parseopt.isra.1>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c810:	7e23      	ldrb	r3, [r4, #24]
 800c812:	3b02      	subs	r3, #2
 800c814:	2b07      	cmp	r3, #7
 800c816:	f200 816a 	bhi.w	800caee <tcp_input+0x672>
 800c81a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c81e:	0008      	.short	0x0008
 800c820:	00cb0077 	.word	0x00cb0077
 800c824:	010800d8 	.word	0x010800d8
 800c828:	012d00cb 	.word	0x012d00cb
 800c82c:	0158      	.short	0x0158
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c82e:	f898 3000 	ldrb.w	r3, [r8]
 800c832:	f003 0312 	and.w	r3, r3, #18
 800c836:	2b12      	cmp	r3, #18
 800c838:	d155      	bne.n	800c8e6 <tcp_input+0x46a>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 800c83a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	6858      	ldr	r0, [r3, #4]
 800c840:	f7fc ffd8 	bl	80097f4 <lwip_ntohl>
 800c844:	4b87      	ldr	r3, [pc, #540]	; (800ca64 <tcp_input+0x5e8>)
 800c846:	3001      	adds	r0, #1
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4298      	cmp	r0, r3
 800c84c:	d14b      	bne.n	800c8e6 <tcp_input+0x46a>
      pcb->snd_buf++;
 800c84e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
 800c852:	64a0      	str	r0, [r4, #72]	; 0x48
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
 800c854:	3301      	adds	r3, #1
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 800c856:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
 800c858:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	1c5a      	adds	r2, r3, #1
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c860:	3b01      	subs	r3, #1
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
 800c862:	62a2      	str	r2, [r4, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c864:	6322      	str	r2, [r4, #48]	; 0x30
      pcb->lastack = ackno;
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c866:	682a      	ldr	r2, [r5, #0]
 800c868:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c86a:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->state = ESTABLISHED;
 800c86c:	2304      	movs	r3, #4
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c86e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 800c872:	18e1      	adds	r1, r4, r3
      pcb->snd_buf++;
      pcb->rcv_nxt = seqno + 1;
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
      pcb->lastack = ackno;
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
      pcb->snd_wnd_max = pcb->snd_wnd;
 800c874:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;
 800c878:	7623      	strb	r3, [r4, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 800c87a:	f7ff fa9a 	bl	800bdb2 <tcp_eff_send_mss_impl>
        PCB_ISIPV6(pcb));
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing 'mss' and 'snd_wnd' */
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 800c87e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c882:	f241 121c 	movw	r2, #4380	; 0x111c
      pcb->snd_wnd_max = pcb->snd_wnd;
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
      pcb->state = ESTABLISHED;

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip,
 800c886:	86e0      	strh	r0, [r4, #54]	; 0x36
        PCB_ISIPV6(pcb));
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing 'mss' and 'snd_wnd' */
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 800c888:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c88c:	0043      	lsls	r3, r0, #1
 800c88e:	0080      	lsls	r0, r0, #2
 800c890:	4293      	cmp	r3, r2
 800c892:	bf38      	it	cc
 800c894:	4613      	movcc	r3, r2
 800c896:	4298      	cmp	r0, r3
 800c898:	bf28      	it	cs
 800c89a:	4618      	movcs	r0, r3
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 800c89c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing 'mss' and 'snd_wnd' */
      pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c8a0:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 800c8a4:	3b01      	subs	r3, #1
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800c8a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
 800c8a8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
      pcb->unacked = rseg->next;
 800c8ac:	6803      	ldr	r3, [r0, #0]
 800c8ae:	6723      	str	r3, [r4, #112]	; 0x70
      tcp_seg_free(rseg);
 800c8b0:	f7fe fe31 	bl	800b516 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c8b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c8b6:	b91b      	cbnz	r3, 800c8c0 <tcp_input+0x444>
        pcb->rtime = -1;
 800c8b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8bc:	86a3      	strh	r3, [r4, #52]	; 0x34
 800c8be:	e003      	b.n	800c8c8 <tcp_input+0x44c>
      } else {
        pcb->rtime = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	86a3      	strh	r3, [r4, #52]	; 0x34
        pcb->nrtx = 0;
 800c8c4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c8c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c8cc:	b923      	cbnz	r3, 800c8d8 <tcp_input+0x45c>
      if (err == ERR_ABRT) {
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
 800c8ce:	7fa3      	ldrb	r3, [r4, #30]
 800c8d0:	f043 0302 	orr.w	r3, r3, #2
 800c8d4:	77a3      	strb	r3, [r4, #30]
 800c8d6:	e10a      	b.n	800caee <tcp_input+0x672>
        pcb->nrtx = 0;
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c8d8:	2200      	movs	r2, #0
 800c8da:	4621      	mov	r1, r4
 800c8dc:	6920      	ldr	r0, [r4, #16]
 800c8de:	4798      	blx	r3
      if (err == ERR_ABRT) {
 800c8e0:	300c      	adds	r0, #12
 800c8e2:	d1f4      	bne.n	800c8ce <tcp_input+0x452>
 800c8e4:	e171      	b.n	800cbca <tcp_input+0x74e>
        return ERR_ABRT;
      }
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
 800c8e6:	f898 3000 	ldrb.w	r3, [r8]
 800c8ea:	06d9      	lsls	r1, r3, #27
 800c8ec:	f140 80ff 	bpl.w	800caee <tcp_input+0x672>
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8f0:	682b      	ldr	r3, [r5, #0]
      tcp_ack_now(pcb);
    }
    /* received ACK? possibly a half-open connection */
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8f2:	9a06      	ldr	r2, [sp, #24]
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	8810      	ldrh	r0, [r2, #0]
 800c8f8:	881a      	ldrh	r2, [r3, #0]
 800c8fa:	4401      	add	r1, r0
 800c8fc:	9804      	ldr	r0, [sp, #16]
 800c8fe:	9201      	str	r2, [sp, #4]
 800c900:	885b      	ldrh	r3, [r3, #2]
 800c902:	9300      	str	r3, [sp, #0]
 800c904:	4b59      	ldr	r3, [pc, #356]	; (800ca6c <tcp_input+0x5f0>)
 800c906:	6800      	ldr	r0, [r0, #0]
 800c908:	1d1a      	adds	r2, r3, #4
 800c90a:	e042      	b.n	800c992 <tcp_input+0x516>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
    }
    break;
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800c90c:	f898 3000 	ldrb.w	r3, [r8]
 800c910:	06da      	lsls	r2, r3, #27
 800c912:	d541      	bpl.n	800c998 <tcp_input+0x51c>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c914:	4b53      	ldr	r3, [pc, #332]	; (800ca64 <tcp_input+0x5e8>)
 800c916:	6818      	ldr	r0, [r3, #0]
 800c918:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c91a:	43db      	mvns	r3, r3
 800c91c:	42c3      	cmn	r3, r0
 800c91e:	d42d      	bmi.n	800c97c <tcp_input+0x500>
 800c920:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c922:	1ac3      	subs	r3, r0, r3
 800c924:	2b00      	cmp	r3, #0
 800c926:	dc29      	bgt.n	800c97c <tcp_input+0x500>
        pcb->state = ESTABLISHED;
 800c928:	2304      	movs	r3, #4
 800c92a:	7623      	strb	r3, [r4, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 800c92c:	6963      	ldr	r3, [r4, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	f000 8115 	beq.w	800cb5e <tcp_input+0x6e2>
 800c934:	2200      	movs	r2, #0
 800c936:	4621      	mov	r1, r4
 800c938:	6920      	ldr	r0, [r4, #16]
 800c93a:	4798      	blx	r3
        if (err != ERR_OK) {
 800c93c:	b118      	cbz	r0, 800c946 <tcp_input+0x4ca>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800c93e:	300c      	adds	r0, #12
 800c940:	f000 8143 	beq.w	800cbca <tcp_input+0x74e>
 800c944:	e10b      	b.n	800cb5e <tcp_input+0x6e2>
          }
          return ERR_ABRT;
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800c946:	4620      	mov	r0, r4
 800c948:	f7ff fad8 	bl	800befc <tcp_receive>

        /* passive open: update initial ssthresh now that the correct window is
           known: if the remote side supports window scaling, the window sent
           with the initial SYN can be smaller than the one used later */
        pcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(pcb);
 800c94c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800c950:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
 800c954:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c958:	b113      	cbz	r3, 800c960 <tcp_input+0x4e4>
          pcb->acked--;
 800c95a:	3b01      	subs	r3, #1
 800c95c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c960:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800c962:	f241 111c 	movw	r1, #4380	; 0x111c
 800c966:	005a      	lsls	r2, r3, #1
 800c968:	009b      	lsls	r3, r3, #2
 800c96a:	428a      	cmp	r2, r1
 800c96c:	bf38      	it	cc
 800c96e:	460a      	movcc	r2, r1
 800c970:	4293      	cmp	r3, r2
 800c972:	bf28      	it	cs
 800c974:	4613      	movcs	r3, r2
 800c976:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800c97a:	e01e      	b.n	800c9ba <tcp_input+0x53e>
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c97c:	682b      	ldr	r3, [r5, #0]
          tcp_ack_now(pcb);
          pcb->state = CLOSE_WAIT;
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c97e:	9a06      	ldr	r2, [sp, #24]
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	8815      	ldrh	r5, [r2, #0]
 800c984:	881a      	ldrh	r2, [r3, #0]
 800c986:	4429      	add	r1, r5
 800c988:	9201      	str	r2, [sp, #4]
 800c98a:	885b      	ldrh	r3, [r3, #2]
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	4b37      	ldr	r3, [pc, #220]	; (800ca6c <tcp_input+0x5f0>)
 800c990:	1d1a      	adds	r2, r3, #4
 800c992:	f000 fdd7 	bl	800d544 <tcp_rst>
 800c996:	e0aa      	b.n	800caee <tcp_input+0x672>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c998:	079d      	lsls	r5, r3, #30
 800c99a:	f140 80a8 	bpl.w	800caee <tcp_input+0x672>
 800c99e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c9a0:	4a33      	ldr	r2, [pc, #204]	; (800ca70 <tcp_input+0x5f4>)
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	6812      	ldr	r2, [r2, #0]
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	f040 80a1 	bne.w	800caee <tcp_input+0x672>
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f000 fe2a 	bl	800d606 <tcp_rexmit>
 800c9b2:	e09c      	b.n	800caee <tcp_input+0x672>
    }
    break;
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f7ff faa1 	bl	800befc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c9ba:	7833      	ldrb	r3, [r6, #0]
 800c9bc:	0698      	lsls	r0, r3, #26
 800c9be:	f140 8096 	bpl.w	800caee <tcp_input+0x672>
      tcp_ack_now(pcb);
 800c9c2:	7fa3      	ldrb	r3, [r4, #30]
 800c9c4:	f043 0302 	orr.w	r3, r3, #2
 800c9c8:	77a3      	strb	r3, [r4, #30]
      pcb->state = CLOSE_WAIT;
 800c9ca:	2307      	movs	r3, #7
 800c9cc:	e024      	b.n	800ca18 <tcp_input+0x59c>
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f7ff fa94 	bl	800befc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c9d4:	7833      	ldrb	r3, [r6, #0]
 800c9d6:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800c9da:	f898 3000 	ldrb.w	r3, [r8]
      pcb->state = CLOSE_WAIT;
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) {
 800c9de:	d01d      	beq.n	800ca1c <tcp_input+0x5a0>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800c9e0:	f013 0f10 	tst.w	r3, #16
 800c9e4:	7fa3      	ldrb	r3, [r4, #30]
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c9e6:	f043 0302 	orr.w	r3, r3, #2
    }
    break;
  case FIN_WAIT_1:
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) {
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800c9ea:	d013      	beq.n	800ca14 <tcp_input+0x598>
 800c9ec:	4a1d      	ldr	r2, [pc, #116]	; (800ca64 <tcp_input+0x5e8>)
 800c9ee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c9f0:	6812      	ldr	r2, [r2, #0]
 800c9f2:	4291      	cmp	r1, r2
 800c9f4:	d10e      	bne.n	800ca14 <tcp_input+0x598>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c9f6:	77a3      	strb	r3, [r4, #30]
        tcp_pcb_purge(pcb);
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f7fe fdb2 	bl	800b562 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c9fe:	4a1d      	ldr	r2, [pc, #116]	; (800ca74 <tcp_input+0x5f8>)
 800ca00:	6813      	ldr	r3, [r2, #0]
 800ca02:	429c      	cmp	r4, r3
 800ca04:	d04b      	beq.n	800ca9e <tcp_input+0x622>
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d055      	beq.n	800cab6 <tcp_input+0x63a>
 800ca0a:	68da      	ldr	r2, [r3, #12]
 800ca0c:	4294      	cmp	r4, r2
 800ca0e:	d049      	beq.n	800caa4 <tcp_input+0x628>
 800ca10:	4613      	mov	r3, r2
 800ca12:	e7f8      	b.n	800ca06 <tcp_input+0x58a>
        pcb->state = TIME_WAIT;
        TCP_REG(&tcp_tw_pcbs, pcb);
      } else {
        tcp_ack_now(pcb);
 800ca14:	77a3      	strb	r3, [r4, #30]
        pcb->state = CLOSING;
 800ca16:	2308      	movs	r3, #8
 800ca18:	7623      	strb	r3, [r4, #24]
 800ca1a:	e068      	b.n	800caee <tcp_input+0x672>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 800ca1c:	06d9      	lsls	r1, r3, #27
 800ca1e:	d566      	bpl.n	800caee <tcp_input+0x672>
 800ca20:	4b10      	ldr	r3, [pc, #64]	; (800ca64 <tcp_input+0x5e8>)
 800ca22:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d161      	bne.n	800caee <tcp_input+0x672>
      pcb->state = FIN_WAIT_2;
 800ca2a:	2306      	movs	r3, #6
 800ca2c:	e7f4      	b.n	800ca18 <tcp_input+0x59c>
    }
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f7ff fa64 	bl	800befc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ca34:	7833      	ldrb	r3, [r6, #0]
 800ca36:	069a      	lsls	r2, r3, #26
 800ca38:	d559      	bpl.n	800caee <tcp_input+0x672>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800ca3a:	7fa3      	ldrb	r3, [r4, #30]
      tcp_pcb_purge(pcb);
 800ca3c:	4620      	mov	r0, r4
    break;
  case FIN_WAIT_2:
    tcp_receive(pcb);
    if (recv_flags & TF_GOT_FIN) {
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800ca3e:	f043 0302 	orr.w	r3, r3, #2
 800ca42:	77a3      	strb	r3, [r4, #30]
      tcp_pcb_purge(pcb);
 800ca44:	f7fe fd8d 	bl	800b562 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ca48:	4a0a      	ldr	r2, [pc, #40]	; (800ca74 <tcp_input+0x5f8>)
 800ca4a:	6813      	ldr	r3, [r2, #0]
 800ca4c:	429c      	cmp	r4, r3
 800ca4e:	d026      	beq.n	800ca9e <tcp_input+0x622>
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d030      	beq.n	800cab6 <tcp_input+0x63a>
 800ca54:	68da      	ldr	r2, [r3, #12]
 800ca56:	4294      	cmp	r4, r2
 800ca58:	d024      	beq.n	800caa4 <tcp_input+0x628>
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	e7f8      	b.n	800ca50 <tcp_input+0x5d4>
 800ca5e:	bf00      	nop
 800ca60:	20042e1c 	.word	0x20042e1c
 800ca64:	20042e20 	.word	0x20042e20
 800ca68:	20049250 	.word	0x20049250
 800ca6c:	20043148 	.word	0x20043148
 800ca70:	20042e14 	.word	0x20042e14
 800ca74:	2004924c 	.word	0x2004924c
      pcb->state = TIME_WAIT;
      TCP_REG(&tcp_tw_pcbs, pcb);
    }
    break;
  case CLOSING:
    tcp_receive(pcb);
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f7ff fa3f 	bl	800befc <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 800ca7e:	f898 3000 	ldrb.w	r3, [r8]
 800ca82:	06db      	lsls	r3, r3, #27
 800ca84:	d533      	bpl.n	800caee <tcp_input+0x672>
 800ca86:	4b89      	ldr	r3, [pc, #548]	; (800ccac <tcp_input+0x830>)
 800ca88:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d12e      	bne.n	800caee <tcp_input+0x672>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800ca90:	4620      	mov	r0, r4
 800ca92:	f7fe fd66 	bl	800b562 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ca96:	4a86      	ldr	r2, [pc, #536]	; (800ccb0 <tcp_input+0x834>)
 800ca98:	6813      	ldr	r3, [r2, #0]
 800ca9a:	429c      	cmp	r4, r3
 800ca9c:	d109      	bne.n	800cab2 <tcp_input+0x636>
 800ca9e:	68e3      	ldr	r3, [r4, #12]
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	e008      	b.n	800cab6 <tcp_input+0x63a>
 800caa4:	68e2      	ldr	r2, [r4, #12]
 800caa6:	60da      	str	r2, [r3, #12]
 800caa8:	e005      	b.n	800cab6 <tcp_input+0x63a>
 800caaa:	68da      	ldr	r2, [r3, #12]
 800caac:	4294      	cmp	r4, r2
 800caae:	d0f9      	beq.n	800caa4 <tcp_input+0x628>
 800cab0:	4613      	mov	r3, r2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1f9      	bne.n	800caaa <tcp_input+0x62e>
 800cab6:	2201      	movs	r2, #1
 800cab8:	4b7e      	ldr	r3, [pc, #504]	; (800ccb4 <tcp_input+0x838>)
 800caba:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800cabc:	230a      	movs	r3, #10
 800cabe:	7623      	strb	r3, [r4, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800cac0:	4b7d      	ldr	r3, [pc, #500]	; (800ccb8 <tcp_input+0x83c>)
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	601c      	str	r4, [r3, #0]
 800cac6:	60e2      	str	r2, [r4, #12]
 800cac8:	f7fd ffe6 	bl	800aa98 <tcp_timer_needed>
 800cacc:	e00f      	b.n	800caee <tcp_input+0x672>
    }
    break;
  case LAST_ACK:
    tcp_receive(pcb);
 800cace:	4620      	mov	r0, r4
 800cad0:	f7ff fa14 	bl	800befc <tcp_receive>
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 800cad4:	f898 3000 	ldrb.w	r3, [r8]
 800cad8:	06df      	lsls	r7, r3, #27
 800cada:	d508      	bpl.n	800caee <tcp_input+0x672>
 800cadc:	4b73      	ldr	r3, [pc, #460]	; (800ccac <tcp_input+0x830>)
 800cade:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	429a      	cmp	r2, r3
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800cae4:	bf02      	ittt	eq
 800cae6:	7833      	ldrbeq	r3, [r6, #0]
 800cae8:	f043 0310 	orreq.w	r3, r3, #16
 800caec:	7033      	strbeq	r3, [r6, #0]
    tcp_input_pcb = pcb;
    err = tcp_process(pcb);
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
      if (recv_flags & TF_RESET) {
 800caee:	7833      	ldrb	r3, [r6, #0]
 800caf0:	071d      	lsls	r5, r3, #28
 800caf2:	d505      	bpl.n	800cb00 <tcp_input+0x684>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 800caf4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800caf8:	b1e3      	cbz	r3, 800cb34 <tcp_input+0x6b8>
 800cafa:	f06f 010c 	mvn.w	r1, #12
 800cafe:	e017      	b.n	800cb30 <tcp_input+0x6b4>
      } else {
        err = ERR_OK;
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
 800cb00:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800cb04:	b91a      	cbnz	r2, 800cb0e <tcp_input+0x692>
            if (err == ERR_ABRT) {
              goto aborted;
            }
          }
        }
        if (recv_flags & TF_CLOSED) {
 800cb06:	7833      	ldrb	r3, [r6, #0]
 800cb08:	06d8      	lsls	r0, r3, #27
 800cb0a:	d409      	bmi.n	800cb20 <tcp_input+0x6a4>
 800cb0c:	e01b      	b.n	800cb46 <tcp_input+0x6ca>
            pcb_acked -= acked;
#else
          {
            acked = pcb->acked;
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked, err);
 800cb0e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d0f8      	beq.n	800cb06 <tcp_input+0x68a>
 800cb14:	4621      	mov	r1, r4
 800cb16:	6920      	ldr	r0, [r4, #16]
 800cb18:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800cb1a:	300c      	adds	r0, #12
 800cb1c:	d1f3      	bne.n	800cb06 <tcp_input+0x68a>
 800cb1e:	e054      	b.n	800cbca <tcp_input+0x74e>
          }
        }
        if (recv_flags & TF_CLOSED) {
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
 800cb20:	7fa3      	ldrb	r3, [r4, #30]
 800cb22:	06d9      	lsls	r1, r3, #27
 800cb24:	d406      	bmi.n	800cb34 <tcp_input+0x6b8>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 800cb26:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800cb2a:	b11b      	cbz	r3, 800cb34 <tcp_input+0x6b8>
 800cb2c:	f06f 010d 	mvn.w	r1, #13
 800cb30:	6920      	ldr	r0, [r4, #16]
 800cb32:	4798      	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cb34:	4621      	mov	r1, r4
 800cb36:	485e      	ldr	r0, [pc, #376]	; (800ccb0 <tcp_input+0x834>)
 800cb38:	f7fe fe88 	bl	800b84c <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	2001      	movs	r0, #1
 800cb40:	f7fe f9d6 	bl	800aef0 <memp_free>
          goto aborted;
 800cb44:	e041      	b.n	800cbca <tcp_input+0x74e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cb46:	f8da 2000 	ldr.w	r2, [sl]
 800cb4a:	b1f2      	cbz	r2, 800cb8a <tcp_input+0x70e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
 800cb4c:	7fa1      	ldrb	r1, [r4, #30]
 800cb4e:	f001 0110 	and.w	r1, r1, #16
 800cb52:	f001 03ff 	and.w	r3, r1, #255	; 0xff
 800cb56:	b131      	cbz	r1, 800cb66 <tcp_input+0x6ea>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cb58:	4610      	mov	r0, r2
 800cb5a:	f7fe fa83 	bl	800b064 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f7ff f84e 	bl	800bc00 <tcp_abort>
            goto aborted;
 800cb64:	e031      	b.n	800cbca <tcp_input+0x74e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cb66:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800cb68:	b11d      	cbz	r5, 800cb72 <tcp_input+0x6f6>
 800cb6a:	4621      	mov	r1, r4
 800cb6c:	6920      	ldr	r0, [r4, #16]
 800cb6e:	47a8      	blx	r5
 800cb70:	e004      	b.n	800cb7c <tcp_input+0x700>
 800cb72:	462b      	mov	r3, r5
 800cb74:	4621      	mov	r1, r4
 800cb76:	4628      	mov	r0, r5
 800cb78:	f7fe ff2e 	bl	800b9d8 <tcp_recv_null>
          if (err == ERR_ABRT) {
 800cb7c:	f110 0f0c 	cmn.w	r0, #12
 800cb80:	d023      	beq.n	800cbca <tcp_input+0x74e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cb82:	b110      	cbz	r0, 800cb8a <tcp_input+0x70e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cb84:	f8da 3000 	ldr.w	r3, [sl]
 800cb88:	6763      	str	r3, [r4, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cb8a:	7833      	ldrb	r3, [r6, #0]
 800cb8c:	069a      	lsls	r2, r3, #26
 800cb8e:	d516      	bpl.n	800cbbe <tcp_input+0x742>
          if (pcb->refused_data != NULL) {
 800cb90:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cb92:	b123      	cbz	r3, 800cb9e <tcp_input+0x722>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cb94:	7b5a      	ldrb	r2, [r3, #13]
 800cb96:	f042 0220 	orr.w	r2, r2, #32
 800cb9a:	735a      	strb	r2, [r3, #13]
 800cb9c:	e00f      	b.n	800cbbe <tcp_input+0x742>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cb9e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800cba0:	f640 3268 	movw	r2, #2920	; 0xb68
              pcb->rcv_wnd++;
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cba4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cba6:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800cba8:	bf1c      	itt	ne
 800cbaa:	3301      	addne	r3, #1
 800cbac:	85a3      	strhne	r3, [r4, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cbae:	b135      	cbz	r5, 800cbbe <tcp_input+0x742>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	6920      	ldr	r0, [r4, #16]
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800cbba:	300c      	adds	r0, #12
 800cbbc:	d005      	beq.n	800cbca <tcp_input+0x74e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cbbe:	2300      	movs	r3, #0
        /* Try to send something out. */
        tcp_output(pcb);
 800cbc0:	4620      	mov	r0, r4
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cbc2:	f8cb 3000 	str.w	r3, [fp]
        /* Try to send something out. */
        tcp_output(pcb);
 800cbc6:	f000 fb75 	bl	800d2b4 <tcp_output>
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800cbca:	2400      	movs	r4, #0
    recv_data = NULL;

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800cbcc:	f8d9 0004 	ldr.w	r0, [r9, #4]
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800cbd0:	f8cb 4000 	str.w	r4, [fp]
    recv_data = NULL;
 800cbd4:	f8ca 4000 	str.w	r4, [sl]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d063      	beq.n	800cca4 <tcp_input+0x828>
    {
      pbuf_free(inseg.p);
 800cbdc:	f7fe fa42 	bl	800b064 <pbuf_free>
      inseg.p = NULL;
 800cbe0:	4b36      	ldr	r3, [pc, #216]	; (800ccbc <tcp_input+0x840>)
 800cbe2:	605c      	str	r4, [r3, #4]
 800cbe4:	e05e      	b.n	800cca4 <tcp_input+0x828>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  } else if (flags & TCP_SYN) {
 800cbe6:	079e      	lsls	r6, r3, #30
 800cbe8:	f57f ad23 	bpl.w	800c632 <tcp_input+0x1b6>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
 800cbec:	f89a 0019 	ldrb.w	r0, [sl, #25]
 800cbf0:	f7ff f848 	bl	800bc84 <tcp_alloc>
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
 800cbf4:	4683      	mov	fp, r0
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	f43f ad1b 	beq.w	800c632 <tcp_input+0x1b6>
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
#if LWIP_IPV4 && LWIP_IPV6
    PCB_ISIPV6(npcb) = ip_current_is_v6();
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cbfc:	9b03      	ldr	r3, [sp, #12]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
    npcb->local_port = pcb->local_port;
    npcb->remote_port = tcphdr->src;
 800cbfe:	682a      	ldr	r2, [r5, #0]
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
#if LWIP_IPV4 && LWIP_IPV6
    PCB_ISIPV6(npcb) = ip_current_is_v6();
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cc00:	695b      	ldr	r3, [r3, #20]
 800cc02:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cc04:	9b03      	ldr	r3, [sp, #12]
 800cc06:	691b      	ldr	r3, [r3, #16]
 800cc08:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800cc0a:	f8ba 301a 	ldrh.w	r3, [sl, #26]
 800cc0e:	8343      	strh	r3, [r0, #26]
    npcb->remote_port = tcphdr->src;
 800cc10:	7813      	ldrb	r3, [r2, #0]
 800cc12:	7852      	ldrb	r2, [r2, #1]
 800cc14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cc18:	8383      	strh	r3, [r0, #28]
    npcb->state = SYN_RCVD;
 800cc1a:	2303      	movs	r3, #3
 800cc1c:	7603      	strb	r3, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	1c5a      	adds	r2, r3, #1
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cc22:	3b01      	subs	r3, #1
 800cc24:	6543      	str	r3, [r0, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800cc26:	f8da 3010 	ldr.w	r3, [sl, #16]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
    npcb->local_port = pcb->local_port;
    npcb->remote_port = tcphdr->src;
    npcb->state = SYN_RCVD;
    npcb->rcv_nxt = seqno + 1;
 800cc2a:	6282      	str	r2, [r0, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
    npcb->callback_arg = pcb->callback_arg;
 800cc2c:	6103      	str	r3, [r0, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 800cc2e:	f8da 3014 	ldr.w	r3, [sl, #20]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
    npcb->local_port = pcb->local_port;
    npcb->remote_port = tcphdr->src;
    npcb->state = SYN_RCVD;
    npcb->rcv_nxt = seqno + 1;
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cc32:	6302      	str	r2, [r0, #48]	; 0x30
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
    npcb->callback_arg = pcb->callback_arg;
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
 800cc34:	6143      	str	r3, [r0, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cc36:	f89a 3008 	ldrb.w	r3, [sl, #8]
 800cc3a:	f003 030c 	and.w	r3, r3, #12
 800cc3e:	7203      	strb	r3, [r0, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 800cc40:	f8d9 3000 	ldr.w	r3, [r9]
 800cc44:	f8c9 0000 	str.w	r0, [r9]
 800cc48:	60c3      	str	r3, [r0, #12]
 800cc4a:	f7fd ff25 	bl	800aa98 <tcp_timer_needed>
 800cc4e:	2201      	movs	r2, #1
 800cc50:	4b18      	ldr	r3, [pc, #96]	; (800ccb4 <tcp_input+0x838>)

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 800cc52:	f10b 0036 	add.w	r0, fp, #54	; 0x36
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
 800cc56:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
 800cc58:	f7ff fbc2 	bl	800c3e0 <tcp_parseopt.isra.1>
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 800cc5c:	682b      	ldr	r3, [r5, #0]
    npcb->snd_wnd_max = npcb->snd_wnd;
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);

#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip,
 800cc5e:	f10b 0104 	add.w	r1, fp, #4
 800cc62:	f8bb 0036 	ldrh.w	r0, [fp, #54]	; 0x36
       for it. */
    TCP_REG_ACTIVE(npcb);

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
 800cc66:	89db      	ldrh	r3, [r3, #14]
 800cc68:	f8ab 3060 	strh.w	r3, [fp, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cc6c:	f8ab 3062 	strh.w	r3, [fp, #98]	; 0x62
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);
 800cc70:	f8ab 304e 	strh.w	r3, [fp, #78]	; 0x4e

#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip,
 800cc74:	f7ff f89d 	bl	800bdb2 <tcp_eff_send_mss_impl>
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    MIB2_STATS_INC(mib2.tcppassiveopens);

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cc78:	2112      	movs	r1, #18
    npcb->snd_wnd = SND_WND_SCALE(npcb, tcphdr->wnd);
    npcb->snd_wnd_max = npcb->snd_wnd;
    npcb->ssthresh = LWIP_TCP_INITIAL_SSTHRESH(npcb);

#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip,
 800cc7a:	f8ab 0036 	strh.w	r0, [fp, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    MIB2_STATS_INC(mib2.tcppassiveopens);

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cc7e:	4658      	mov	r0, fp
 800cc80:	f000 fa6f 	bl	800d162 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800cc84:	b120      	cbz	r0, 800cc90 <tcp_input+0x814>
      tcp_abandon(npcb, 0);
 800cc86:	4621      	mov	r1, r4
 800cc88:	4658      	mov	r0, fp
 800cc8a:	f7fe ff59 	bl	800bb40 <tcp_abandon>
 800cc8e:	e4d0      	b.n	800c632 <tcp_input+0x1b6>
      return rc;
    }
    return tcp_output(npcb);
 800cc90:	4658      	mov	r0, fp
 800cc92:	e4f3      	b.n	800c67c <tcp_input+0x200>
    }

    if (acceptable) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
 800cc94:	7833      	ldrb	r3, [r6, #0]
 800cc96:	f043 0308 	orr.w	r3, r3, #8
 800cc9a:	7033      	strb	r3, [r6, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800cc9c:	7fa3      	ldrb	r3, [r4, #30]
 800cc9e:	f023 0301 	bic.w	r3, r3, #1
 800cca2:	e617      	b.n	800c8d4 <tcp_input+0x458>
  return;
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
}
 800cca4:	b009      	add	sp, #36	; 0x24
 800cca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccaa:	bf00      	nop
 800ccac:	20042e20 	.word	0x20042e20
 800ccb0:	2004924c 	.word	0x2004924c
 800ccb4:	20049248 	.word	0x20049248
 800ccb8:	2004925c 	.word	0x2004925c
 800ccbc:	20042e34 	.word	0x20042e34

0800ccc0 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ccc0:	4a02      	ldr	r2, [pc, #8]	; (800cccc <tcp_trigger_input_pcb_close+0xc>)
 800ccc2:	7813      	ldrb	r3, [r2, #0]
 800ccc4:	f043 0310 	orr.w	r3, r3, #16
 800ccc8:	7013      	strb	r3, [r2, #0]
 800ccca:	4770      	bx	lr
 800cccc:	20042e25 	.word	0x20042e25

0800ccd0 <tcp_pbuf_prealloc>:
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ccd0:	4291      	cmp	r1, r2
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ccd2:	b538      	push	{r3, r4, r5, lr}
 800ccd4:	461d      	mov	r5, r3
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	9b04      	ldr	r3, [sp, #16]
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ccda:	d216      	bcs.n	800cd0a <tcp_pbuf_prealloc+0x3a>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ccdc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800cce0:	0789      	lsls	r1, r1, #30
 800cce2:	d409      	bmi.n	800ccf8 <tcp_pbuf_prealloc+0x28>
 800cce4:	7f99      	ldrb	r1, [r3, #30]
 800cce6:	0649      	lsls	r1, r1, #25
 800cce8:	d40f      	bmi.n	800cd0a <tcp_pbuf_prealloc+0x3a>
        (!(pcb->flags & TF_NODELAY) &&
 800ccea:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ccee:	b119      	cbz	r1, 800ccf8 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 800ccf0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ccf2:	b909      	cbnz	r1, 800ccf8 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 800ccf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccf6:	b143      	cbz	r3, 800cd0a <tcp_pbuf_prealloc+0x3a>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ccf8:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
 800ccfc:	f021 0103 	bic.w	r1, r1, #3
 800cd00:	428a      	cmp	r2, r1
 800cd02:	bf28      	it	cs
 800cd04:	460a      	movcs	r2, r1
 800cd06:	b291      	uxth	r1, r2
 800cd08:	e000      	b.n	800cd0c <tcp_pbuf_prealloc+0x3c>
 800cd0a:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f7fe f9c9 	bl	800b0a4 <pbuf_alloc>
  if (p == NULL) {
 800cd12:	b120      	cbz	r0, 800cd1e <tcp_pbuf_prealloc+0x4e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
 800cd14:	8942      	ldrh	r2, [r0, #10]
 800cd16:	1b12      	subs	r2, r2, r4
 800cd18:	802a      	strh	r2, [r5, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800cd1a:	8104      	strh	r4, [r0, #8]
 800cd1c:	8144      	strh	r4, [r0, #10]
  return p;
}
 800cd1e:	bd38      	pop	{r3, r4, r5, pc}

0800cd20 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800cd20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd24:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
 800cd28:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cd2a:	2003      	movs	r0, #3
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800cd2c:	460e      	mov	r6, r1
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cd2e:	f01b 0f01 	tst.w	fp, #1
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800cd32:	4691      	mov	r9, r2
 800cd34:	469a      	mov	sl, r3
 800cd36:	f04f 0700 	mov.w	r7, #0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800cd3a:	bf14      	ite	ne
 800cd3c:	2504      	movne	r5, #4
 800cd3e:	2500      	moveq	r5, #0

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cd40:	f7fe f8ca 	bl	800aed8 <memp_malloc>
 800cd44:	4604      	mov	r4, r0
 800cd46:	b918      	cbnz	r0, 800cd50 <tcp_create_segment+0x30>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cd48:	4630      	mov	r0, r6
 800cd4a:	f7fe f98b 	bl	800b064 <pbuf_free>
 800cd4e:	e035      	b.n	800cdbc <tcp_create_segment+0x9c>
    return NULL;
  }
  seg->flags = optflags;
 800cd50:	f880 b00c 	strb.w	fp, [r0, #12]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800cd54:	2114      	movs	r1, #20
  }
  seg->flags = optflags;
  seg->next = NULL;
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800cd56:	8933      	ldrh	r3, [r6, #8]
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  seg->next = NULL;
  seg->p = p;
 800cd58:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800cd5a:	1b5b      	subs	r3, r3, r5
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
    return NULL;
  }
  seg->flags = optflags;
  seg->next = NULL;
 800cd5c:	6007      	str	r7, [r0, #0]
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800cd5e:	8147      	strh	r7, [r0, #10]
  }
  seg->flags = optflags;
  seg->next = NULL;
  seg->p = p;
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  seg->len = p->tot_len - optlen;
 800cd60:	8103      	strh	r3, [r0, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800cd62:	4630      	mov	r0, r6
 800cd64:	f7fe f970 	bl	800b048 <pbuf_header>
 800cd68:	4606      	mov	r6, r0
 800cd6a:	b128      	cbz	r0, 800cd78 <tcp_create_segment+0x58>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cd6c:	4620      	mov	r0, r4
 800cd6e:	f7fe fbd2 	bl	800b516 <tcp_seg_free>
    return NULL;
 800cd72:	4638      	mov	r0, r7
 800cd74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cd78:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = htons(pcb->local_port);
 800cd7a:	f8b8 001a 	ldrh.w	r0, [r8, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
    return NULL;
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cd7e:	685f      	ldr	r7, [r3, #4]
 800cd80:	6127      	str	r7, [r4, #16]
  seg->tcphdr->src = htons(pcb->local_port);
 800cd82:	f7fc fd2f 	bl	80097e4 <lwip_htons>
 800cd86:	8038      	strh	r0, [r7, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
 800cd88:	6927      	ldr	r7, [r4, #16]
 800cd8a:	f8b8 001c 	ldrh.w	r0, [r8, #28]
 800cd8e:	f7fc fd29 	bl	80097e4 <lwip_htons>
 800cd92:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = htonl(seqno);
 800cd94:	6927      	ldr	r7, [r4, #16]
 800cd96:	4650      	mov	r0, sl
 800cd98:	f7fc fd2a 	bl	80097f0 <lwip_htonl>
 800cd9c:	6078      	str	r0, [r7, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800cd9e:	2d00      	cmp	r5, #0
 800cda0:	bf14      	ite	ne
 800cda2:	f44f 40c0 	movne.w	r0, #24576	; 0x6000
 800cda6:	f44f 40a0 	moveq.w	r0, #20480	; 0x5000
 800cdaa:	6927      	ldr	r7, [r4, #16]
 800cdac:	ea40 0009 	orr.w	r0, r0, r9
 800cdb0:	f7fc fd18 	bl	80097e4 <lwip_htons>
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cdb4:	6923      	ldr	r3, [r4, #16]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  seg->tcphdr->src = htons(pcb->local_port);
  seg->tcphdr->dest = htons(pcb->remote_port);
  seg->tcphdr->seqno = htonl(seqno);
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800cdb6:	81b8      	strh	r0, [r7, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cdb8:	749e      	strb	r6, [r3, #18]
 800cdba:	74de      	strb	r6, [r3, #19]
  return seg;
 800cdbc:	4620      	mov	r0, r4
}
 800cdbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cdc2 <tcp_output_alloc_header.constprop.1>:
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cdc2:	3114      	adds	r1, #20
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800cdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cdc6:	b289      	uxth	r1, r1
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800cdc8:	4605      	mov	r5, r0
 800cdca:	4617      	mov	r7, r2
                      u32_t seqno_be /* already in network byte order */)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cdcc:	2001      	movs	r0, #1
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f7fe f968 	bl	800b0a4 <pbuf_alloc>
  if (p != NULL) {
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	b1f8      	cbz	r0, 800ce18 <tcp_output_alloc_header.constprop.1+0x56>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cdd8:	6844      	ldr	r4, [r0, #4]
    tcphdr->src = htons(pcb->local_port);
 800cdda:	8b68      	ldrh	r0, [r5, #26]
 800cddc:	f7fc fd02 	bl	80097e4 <lwip_htons>
 800cde0:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = htons(pcb->remote_port);
 800cde2:	8ba8      	ldrh	r0, [r5, #28]
 800cde4:	f7fc fcfe 	bl	80097e4 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800cde8:	6067      	str	r7, [r4, #4]
  if (p != NULL) {
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = htons(pcb->local_port);
    tcphdr->dest = htons(pcb->remote_port);
 800cdea:	8060      	strh	r0, [r4, #2]
    tcphdr->seqno = seqno_be;
    tcphdr->ackno = htonl(pcb->rcv_nxt);
 800cdec:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800cdee:	f7fc fcff 	bl	80097f0 <lwip_htonl>
 800cdf2:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800cdf4:	f245 0010 	movw	r0, #20496	; 0x5010
 800cdf8:	f7fc fcf4 	bl	80097e4 <lwip_htons>
 800cdfc:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cdfe:	8de8      	ldrh	r0, [r5, #46]	; 0x2e
 800ce00:	f7fc fcf0 	bl	80097e4 <lwip_htons>
    tcphdr->chksum = 0;
 800ce04:	2300      	movs	r3, #0
    tcphdr->urgp = 0;

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ce06:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    tcphdr->dest = htons(pcb->remote_port);
    tcphdr->seqno = seqno_be;
    tcphdr->ackno = htonl(pcb->rcv_nxt);
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
    tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
    tcphdr->chksum = 0;
 800ce08:	7423      	strb	r3, [r4, #16]
 800ce0a:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800ce0c:	74a3      	strb	r3, [r4, #18]
 800ce0e:	74e3      	strb	r3, [r4, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ce10:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    tcphdr->src = htons(pcb->local_port);
    tcphdr->dest = htons(pcb->remote_port);
    tcphdr->seqno = seqno_be;
    tcphdr->ackno = htonl(pcb->rcv_nxt);
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
    tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ce12:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
    tcphdr->urgp = 0;

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ce14:	4413      	add	r3, r2
 800ce16:	632b      	str	r3, [r5, #48]	; 0x30
  }
  return p;
}
 800ce18:	4630      	mov	r0, r6
 800ce1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce1c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	b08f      	sub	sp, #60	; 0x3c
 800ce22:	4692      	mov	sl, r2
 800ce24:	4605      	mov	r5, r0
 800ce26:	9307      	str	r3, [sp, #28]
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ce28:	2300      	movs	r3, #0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ce2a:	9106      	str	r1, [sp, #24]
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ce2c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800ce30:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ce38:	9a04      	ldr	r2, [sp, #16]
 800ce3a:	085b      	lsrs	r3, r3, #1
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	bf28      	it	cs
 800ce40:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	bf18      	it	ne
 800ce46:	461a      	movne	r2, r3
 800ce48:	9204      	str	r2, [sp, #16]
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ce4a:	2900      	cmp	r1, #0
 800ce4c:	f000 809e 	beq.w	800cf8c <tcp_write+0x170>
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ce50:	7e03      	ldrb	r3, [r0, #24]
 800ce52:	2b07      	cmp	r3, #7
 800ce54:	d003      	beq.n	800ce5e <tcp_write+0x42>
      (pcb->state != CLOSE_WAIT) &&
 800ce56:	3b02      	subs	r3, #2
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	f200 817d 	bhi.w	800d158 <tcp_write+0x33c>
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  } else if (len == 0) {
 800ce5e:	f1ba 0f00 	cmp.w	sl, #0
 800ce62:	f000 8096 	beq.w	800cf92 <tcp_write+0x176>
    return ERR_OK;
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ce66:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800ce6a:	4553      	cmp	r3, sl
 800ce6c:	d204      	bcs.n	800ce78 <tcp_write+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800ce6e:	7fab      	ldrb	r3, [r5, #30]
 800ce70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce74:	77ab      	strb	r3, [r5, #30]
 800ce76:	e086      	b.n	800cf86 <tcp_write+0x16a>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ce78:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 800ce7c:	2b07      	cmp	r3, #7
 800ce7e:	f240 8088 	bls.w	800cf92 <tcp_write+0x176>
 800ce82:	e7f4      	b.n	800ce6e <tcp_write+0x52>
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800ce84:	7b23      	ldrb	r3, [r4, #12]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ce86:	8927      	ldrh	r7, [r4, #8]
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800ce88:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ce8c:	9b04      	ldr	r3, [sp, #16]
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800ce8e:	bf18      	it	ne
 800ce90:	2204      	movne	r2, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ce92:	eba3 0307 	sub.w	r3, r3, r7
    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800ce96:	bf08      	it	eq
 800ce98:	2200      	moveq	r2, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ce9a:	1a9a      	subs	r2, r3, r2
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ce9c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
         last_unsent = last_unsent->next);

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cea0:	b292      	uxth	r2, r2
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
    if (oversize > 0) {
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 8084 	beq.w	800cfb0 <tcp_write+0x194>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
 800cea8:	459a      	cmp	sl, r3
 800ceaa:	46d0      	mov	r8, sl
 800ceac:	46a3      	mov	fp, r4
 800ceae:	bf28      	it	cs
 800ceb0:	4698      	movcs	r8, r3
      pos += oversize_used;
      oversize -= oversize_used;
 800ceb2:	ebc8 0303 	rsb	r3, r8, r3
      space -= oversize_used;
 800ceb6:	ebc8 0202 	rsb	r2, r8, r2
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ceba:	45c2      	cmp	sl, r8
    if (oversize > 0) {
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
      oversize_used = oversize < len ? oversize : len;
      pos += oversize_used;
      oversize -= oversize_used;
 800cebc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
      space -= oversize_used;
 800cec0:	b292      	uxth	r2, r2
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cec2:	f240 80e5 	bls.w	800d090 <tcp_write+0x274>
 800cec6:	2a00      	cmp	r2, #0
 800cec8:	f000 8089 	beq.w	800cfde <tcp_write+0x1c2>
 800cecc:	2f00      	cmp	r7, #0
 800cece:	f000 8089 	beq.w	800cfe4 <tcp_write+0x1c8>
      u16_t seglen = space < len - pos ? space : len - pos;
 800ced2:	ebc8 060a 	rsb	r6, r8, sl
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ced6:	9b07      	ldr	r3, [sp, #28]
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
      u16_t seglen = space < len - pos ? space : len - pos;
 800ced8:	4296      	cmp	r6, r2
 800ceda:	bfa8      	it	ge
 800cedc:	4616      	movge	r6, r2
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cede:	07db      	lsls	r3, r3, #31
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
      u16_t seglen = space < len - pos ? space : len - pos;
 800cee0:	b2b6      	uxth	r6, r6
      seg = last_unsent;

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cee2:	d56f      	bpl.n	800cfc4 <tcp_write+0x1a8>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cee4:	2301      	movs	r3, #1
 800cee6:	9500      	str	r5, [sp, #0]
 800cee8:	4631      	mov	r1, r6
 800ceea:	2004      	movs	r0, #4
 800ceec:	9302      	str	r3, [sp, #8]
 800ceee:	9b07      	ldr	r3, [sp, #28]
 800cef0:	9301      	str	r3, [sp, #4]
 800cef2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800cef6:	f7ff feeb 	bl	800ccd0 <tcp_pbuf_prealloc>
 800cefa:	4607      	mov	r7, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	f000 811e 	beq.w	800d13e <tcp_write+0x322>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
 800cf02:	8962      	ldrh	r2, [r4, #10]
 800cf04:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cf08:	6840      	ldr	r0, [r0, #4]
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
 800cf0a:	4413      	add	r3, r2
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cf0c:	4632      	mov	r2, r6
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
 800cf0e:	8163      	strh	r3, [r4, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cf10:	9b06      	ldr	r3, [sp, #24]
 800cf12:	eb03 0108 	add.w	r1, r3, r8
 800cf16:	f004 fc76 	bl	8011806 <memcpy>
        /* reference the non-volatile payload data */
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
      }

      pos += seglen;
      queuelen += pbuf_clen(concat_p);
 800cf1a:	4638      	mov	r0, r7
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
      }

      pos += seglen;
 800cf1c:	4446      	add	r6, r8
      queuelen += pbuf_clen(concat_p);
 800cf1e:	f7fe f96d 	bl	800b1fc <pbuf_clen>
 800cf22:	9b05      	ldr	r3, [sp, #20]
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
      }

      pos += seglen;
 800cf24:	b2b6      	uxth	r6, r6
      queuelen += pbuf_clen(concat_p);
 800cf26:	46a3      	mov	fp, r4
 800cf28:	4403      	add	r3, r0
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	9305      	str	r3, [sp, #20]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cf2e:	9b07      	ldr	r3, [sp, #28]
 800cf30:	f04f 0900 	mov.w	r9, #0
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800cf3c:	9308      	str	r3, [sp, #32]
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800cf3e:	4556      	cmp	r6, sl
 800cf40:	f080 80a2 	bcs.w	800d088 <tcp_write+0x26c>
    struct pbuf *p;
    u16_t left = len - pos;
    u16_t max_len = mss_local - optlen;
    u16_t seglen = left > max_len ? max_len : left;
 800cf44:	ebc6 030a 	rsb	r3, r6, sl
 800cf48:	9a04      	ldr	r2, [sp, #16]
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	bf28      	it	cs
 800cf50:	4613      	movcs	r3, r2
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	9309      	str	r3, [sp, #36]	; 0x24
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cf56:	9b08      	ldr	r3, [sp, #32]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d145      	bne.n	800cfe8 <tcp_write+0x1cc>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf60:	9808      	ldr	r0, [sp, #32]
 800cf62:	f7fe f89f 	bl	800b0a4 <pbuf_alloc>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d155      	bne.n	800d016 <tcp_write+0x1fa>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800cf6a:	7fab      	ldrb	r3, [r5, #30]
 800cf6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf70:	77ab      	strb	r3, [r5, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800cf72:	b117      	cbz	r7, 800cf7a <tcp_write+0x15e>
    pbuf_free(concat_p);
 800cf74:	4638      	mov	r0, r7
 800cf76:	f7fe f875 	bl	800b064 <pbuf_free>
  }
  if (queue != NULL) {
 800cf7a:	f1b9 0f00 	cmp.w	r9, #0
 800cf7e:	d002      	beq.n	800cf86 <tcp_write+0x16a>
    tcp_segs_free(queue);
 800cf80:	4648      	mov	r0, r9
 800cf82:	f7fe fad6 	bl	800b532 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800cf86:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8a:	e0e7      	b.n	800d15c <tcp_write+0x340>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cf8c:	f06f 000e 	mvn.w	r0, #14
 800cf90:	e0e4      	b.n	800d15c <tcp_write+0x340>

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
 800cf92:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cf96:	6eec      	ldr	r4, [r5, #108]	; 0x6c

  err = tcp_write_checks(pcb, len);
  if (err != ERR_OK) {
    return err;
  }
  queuelen = pcb->snd_queuelen;
 800cf98:	9305      	str	r3, [sp, #20]
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cf9a:	2c00      	cmp	r4, #0
 800cf9c:	f000 80d7 	beq.w	800d14e <tcp_write+0x332>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cfa0:	f8d4 9000 	ldr.w	r9, [r4]
 800cfa4:	f1b9 0f00 	cmp.w	r9, #0
 800cfa8:	f43f af6c 	beq.w	800ce84 <tcp_write+0x68>
 800cfac:	464c      	mov	r4, r9
 800cfae:	e7f7      	b.n	800cfa0 <tcp_write+0x184>
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800cfb0:	f8ad 9036 	strh.w	r9, [sp, #54]	; 0x36
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cfb4:	f1ba 0f00 	cmp.w	sl, #0
 800cfb8:	d101      	bne.n	800cfbe <tcp_write+0x1a2>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cfba:	46d3      	mov	fp, sl
 800cfbc:	e099      	b.n	800d0f2 <tcp_write+0x2d6>
 800cfbe:	46cb      	mov	fp, r9
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cfc0:	46c8      	mov	r8, r9
 800cfc2:	e780      	b.n	800cec6 <tcp_write+0xaa>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	2004      	movs	r0, #4
 800cfca:	f7fe f86b 	bl	800b0a4 <pbuf_alloc>
 800cfce:	4607      	mov	r7, r0
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	f000 80b4 	beq.w	800d13e <tcp_write+0x322>
        tcp_seg_add_chksum(~inet_chksum((const u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800cfd6:	9b06      	ldr	r3, [sp, #24]
 800cfd8:	4443      	add	r3, r8
 800cfda:	6043      	str	r3, [r0, #4]
 800cfdc:	e79d      	b.n	800cf1a <tcp_write+0xfe>
 800cfde:	4646      	mov	r6, r8
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800cfe0:	4617      	mov	r7, r2
 800cfe2:	e7a4      	b.n	800cf2e <tcp_write+0x112>
 800cfe4:	4646      	mov	r6, r8
 800cfe6:	e7a2      	b.n	800cf2e <tcp_write+0x112>
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cfe8:	fab9 f389 	clz	r3, r9
 800cfec:	9500      	str	r5, [sp, #0]
 800cfee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cff0:	2000      	movs	r0, #0
 800cff2:	095b      	lsrs	r3, r3, #5
 800cff4:	9302      	str	r3, [sp, #8]
 800cff6:	9b07      	ldr	r3, [sp, #28]
 800cff8:	9301      	str	r3, [sp, #4]
 800cffa:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800cffe:	f7ff fe67 	bl	800ccd0 <tcp_pbuf_prealloc>
 800d002:	4683      	mov	fp, r0
 800d004:	2800      	cmp	r0, #0
 800d006:	d0b0      	beq.n	800cf6a <tcp_write+0x14e>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800d008:	9b06      	ldr	r3, [sp, #24]
 800d00a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d00c:	1999      	adds	r1, r3, r6
 800d00e:	6840      	ldr	r0, [r0, #4]
 800d010:	f004 fbf9 	bl	8011806 <memcpy>
 800d014:	e010      	b.n	800d038 <tcp_write+0x21c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800d016:	9a06      	ldr	r2, [sp, #24]
 800d018:	900b      	str	r0, [sp, #44]	; 0x2c
 800d01a:	4432      	add	r2, r6
 800d01c:	6042      	str	r2, [r0, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d01e:	9a08      	ldr	r2, [sp, #32]
 800d020:	4611      	mov	r1, r2
 800d022:	4610      	mov	r0, r2
 800d024:	f7fe f83e 	bl	800b0a4 <pbuf_alloc>
 800d028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d02a:	4683      	mov	fp, r0
 800d02c:	b908      	cbnz	r0, 800d032 <tcp_write+0x216>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d02e:	4618      	mov	r0, r3
 800d030:	e00c      	b.n	800d04c <tcp_write+0x230>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d032:	4619      	mov	r1, r3
 800d034:	f7fe f8ef 	bl	800b216 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d038:	4658      	mov	r0, fp
 800d03a:	f7fe f8df 	bl	800b1fc <pbuf_clen>
 800d03e:	9b05      	ldr	r3, [sp, #20]
 800d040:	4403      	add	r3, r0
 800d042:	b29b      	uxth	r3, r3

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d044:	2b08      	cmp	r3, #8
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
    }

    queuelen += pbuf_clen(p);
 800d046:	9305      	str	r3, [sp, #20]

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800d048:	d903      	bls.n	800d052 <tcp_write+0x236>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d04a:	4658      	mov	r0, fp
 800d04c:	f7fe f80a 	bl	800b064 <pbuf_free>
      goto memerr;
 800d050:	e78b      	b.n	800cf6a <tcp_write+0x14e>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d052:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800d054:	2200      	movs	r2, #0
 800d056:	4659      	mov	r1, fp
 800d058:	4628      	mov	r0, r5
 800d05a:	9200      	str	r2, [sp, #0]
 800d05c:	4433      	add	r3, r6
 800d05e:	f7ff fe5f 	bl	800cd20 <tcp_create_segment>
 800d062:	4683      	mov	fp, r0
 800d064:	2800      	cmp	r0, #0
 800d066:	d080      	beq.n	800cf6a <tcp_write+0x14e>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 800d068:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d06c:	8143      	strh	r3, [r0, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d06e:	f1b9 0f00 	cmp.w	r9, #0
 800d072:	d002      	beq.n	800d07a <tcp_write+0x25e>
      queue = seg;
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
 800d074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d076:	6018      	str	r0, [r3, #0]
 800d078:	e000      	b.n	800d07c <tcp_write+0x260>
 800d07a:	4681      	mov	r9, r0

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800d082:	441e      	add	r6, r3
 800d084:	b2b6      	uxth	r6, r6
 800d086:	e75a      	b.n	800cf3e <tcp_write+0x122>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d088:	f1b8 0f00 	cmp.w	r8, #0
 800d08c:	d01f      	beq.n	800d0ce <tcp_write+0x2b2>
 800d08e:	e003      	b.n	800d098 <tcp_write+0x27c>
 800d090:	f1b8 0f00 	cmp.w	r8, #0
 800d094:	d02d      	beq.n	800d0f2 <tcp_write+0x2d6>
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800d096:	464f      	mov	r7, r9
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d098:	6866      	ldr	r6, [r4, #4]
 800d09a:	b186      	cbz	r6, 800d0be <tcp_write+0x2a2>
      p->tot_len += oversize_used;
 800d09c:	8933      	ldrh	r3, [r6, #8]
 800d09e:	4443      	add	r3, r8
 800d0a0:	8133      	strh	r3, [r6, #8]
      if (p->next == NULL) {
 800d0a2:	6833      	ldr	r3, [r6, #0]
 800d0a4:	b94b      	cbnz	r3, 800d0ba <tcp_write+0x29e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d0a6:	6873      	ldr	r3, [r6, #4]
 800d0a8:	4642      	mov	r2, r8
 800d0aa:	8970      	ldrh	r0, [r6, #10]
 800d0ac:	9906      	ldr	r1, [sp, #24]
 800d0ae:	4418      	add	r0, r3
 800d0b0:	f004 fba9 	bl	8011806 <memcpy>
        p->len += oversize_used;
 800d0b4:	8973      	ldrh	r3, [r6, #10]
 800d0b6:	4443      	add	r3, r8
 800d0b8:	8173      	strh	r3, [r6, #10]
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d0ba:	6836      	ldr	r6, [r6, #0]
 800d0bc:	e7ed      	b.n	800d09a <tcp_write+0x27e>
      if (p->next == NULL) {
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
        p->len += oversize_used;
      }
    }
    last_unsent->len += oversize_used;
 800d0be:	8923      	ldrh	r3, [r4, #8]
 800d0c0:	4443      	add	r3, r8
 800d0c2:	8123      	strh	r3, [r4, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 800d0c4:	8963      	ldrh	r3, [r4, #10]
 800d0c6:	ebc8 0803 	rsb	r8, r8, r3
 800d0ca:	f8a4 800a 	strh.w	r8, [r4, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d0ce:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d0d2:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
 800d0d6:	b147      	cbz	r7, 800d0ea <tcp_write+0x2ce>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d0d8:	4639      	mov	r1, r7
 800d0da:	6860      	ldr	r0, [r4, #4]
 800d0dc:	f7fe f89b 	bl	800b216 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d0e0:	8922      	ldrh	r2, [r4, #8]
 800d0e2:	893b      	ldrh	r3, [r7, #8]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	8123      	strh	r3, [r4, #8]
 800d0e8:	e007      	b.n	800d0fa <tcp_write+0x2de>

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d0ea:	b934      	cbnz	r4, 800d0fa <tcp_write+0x2de>
    pcb->unsent = queue;
 800d0ec:	f8c5 906c 	str.w	r9, [r5, #108]	; 0x6c
 800d0f0:	e005      	b.n	800d0fe <tcp_write+0x2e2>
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d0f2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d0f6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
   * is harmless
   */
  if (last_unsent == NULL) {
    pcb->unsent = queue;
  } else {
    last_unsent->next = queue;
 800d0fa:	f8c4 9000 	str.w	r9, [r4]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d0fe:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800d100:	4453      	add	r3, sl
 800d102:	65eb      	str	r3, [r5, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d104:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800d108:	ebca 0a03 	rsb	sl, sl, r3
  pcb->snd_queuelen = queuelen;
 800d10c:	f8bd 3014 	ldrh.w	r3, [sp, #20]

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  pcb->snd_buf -= len;
 800d110:	f8a5 a066 	strh.w	sl, [r5, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
 800d114:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800d118:	f1bb 0f00 	cmp.w	fp, #0
 800d11c:	d011      	beq.n	800d142 <tcp_write+0x326>
 800d11e:	f8db 4010 	ldr.w	r4, [fp, #16]
 800d122:	b184      	cbz	r4, 800d146 <tcp_write+0x32a>
 800d124:	9b07      	ldr	r3, [sp, #28]
 800d126:	f003 0302 	and.w	r3, r3, #2
 800d12a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
 800d12e:	b963      	cbnz	r3, 800d14a <tcp_write+0x32e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d130:	89a5      	ldrh	r5, [r4, #12]
 800d132:	2008      	movs	r0, #8
 800d134:	f7fc fb56 	bl	80097e4 <lwip_htons>
 800d138:	4328      	orrs	r0, r5
 800d13a:	81a0      	strh	r0, [r4, #12]
 800d13c:	e001      	b.n	800d142 <tcp_write+0x326>
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800d13e:	2700      	movs	r7, #0
 800d140:	e713      	b.n	800cf6a <tcp_write+0x14e>
  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  }

  return ERR_OK;
 800d142:	4658      	mov	r0, fp
 800d144:	e00a      	b.n	800d15c <tcp_write+0x340>
 800d146:	4620      	mov	r0, r4
 800d148:	e008      	b.n	800d15c <tcp_write+0x340>
 800d14a:	2000      	movs	r0, #0
 800d14c:	e006      	b.n	800d15c <tcp_write+0x340>
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d14e:	46a3      	mov	fp, r4
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
  u16_t oversize_used = 0;
 800d150:	46a0      	mov	r8, r4
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  u16_t pos = 0; /* position in 'arg' data */
 800d152:	4626      	mov	r6, r4
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  struct pbuf *concat_p = NULL;
 800d154:	4627      	mov	r7, r4
 800d156:	e6ea      	b.n	800cf2e <tcp_write+0x112>
  if ((pcb->state != ESTABLISHED) &&
      (pcb->state != CLOSE_WAIT) &&
      (pcb->state != SYN_SENT) &&
      (pcb->state != SYN_RCVD)) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d158:	f06f 000a 	mvn.w	r0, #10
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 800d15c:	b00f      	add	sp, #60	; 0x3c
 800d15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d162 <tcp_enqueue_flags>:

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d162:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800d166:	2b07      	cmp	r3, #7
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d16a:	4604      	mov	r4, r0
 800d16c:	460d      	mov	r5, r1
 800d16e:	f001 0603 	and.w	r6, r1, #3

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800d172:	d901      	bls.n	800d178 <tcp_enqueue_flags+0x16>
 800d174:	07ca      	lsls	r2, r1, #31
 800d176:	d518      	bpl.n	800d1aa <tcp_enqueue_flags+0x48>
 800d178:	f005 0302 	and.w	r3, r5, #2
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d17c:	2b00      	cmp	r3, #0

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 800d17e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d182:	bf13      	iteet	ne
 800d184:	2701      	movne	r7, #1
 800d186:	2700      	moveq	r7, #0
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d188:	2100      	moveq	r1, #0
 800d18a:	2104      	movne	r1, #4

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d036      	beq.n	800d1fe <tcp_enqueue_flags+0x9c>
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d190:	2200      	movs	r2, #0
 800d192:	4610      	mov	r0, r2
 800d194:	f7fd ff86 	bl	800b0a4 <pbuf_alloc>
 800d198:	4601      	mov	r1, r0
 800d19a:	b130      	cbz	r0, 800d1aa <tcp_enqueue_flags+0x48>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d19c:	9700      	str	r7, [sp, #0]
 800d19e:	462a      	mov	r2, r5
 800d1a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f7ff fdbc 	bl	800cd20 <tcp_create_segment>
 800d1a8:	b920      	cbnz	r0, 800d1b4 <tcp_enqueue_flags+0x52>
    pcb->flags |= TF_NAGLEMEMERR;
 800d1aa:	7fa3      	ldrb	r3, [r4, #30]
 800d1ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1b0:	77a3      	strb	r3, [r4, #30]
 800d1b2:	e024      	b.n	800d1fe <tcp_enqueue_flags+0x9c>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d1b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d1b6:	b90b      	cbnz	r3, 800d1bc <tcp_enqueue_flags+0x5a>
    pcb->unsent = seg;
 800d1b8:	66e0      	str	r0, [r4, #108]	; 0x6c
 800d1ba:	e004      	b.n	800d1c6 <tcp_enqueue_flags+0x64>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	b10a      	cbz	r2, 800d1c4 <tcp_enqueue_flags+0x62>
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	e7fb      	b.n	800d1bc <tcp_enqueue_flags+0x5a>
    useg->next = seg;
 800d1c4:	6018      	str	r0, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d1cc:	b13e      	cbz	r6, 800d1de <tcp_enqueue_flags+0x7c>
    pcb->snd_lbb++;
 800d1ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
 800d1d4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
 800d1de:	07eb      	lsls	r3, r5, #31
    pcb->flags |= TF_FIN;
 800d1e0:	bf42      	ittt	mi
 800d1e2:	7fa3      	ldrbmi	r3, [r4, #30]
 800d1e4:	f043 0320 	orrmi.w	r3, r3, #32
 800d1e8:	77a3      	strbmi	r3, [r4, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d1ea:	6840      	ldr	r0, [r0, #4]
 800d1ec:	f7fe f806 	bl	800b1fc <pbuf_clen>
 800d1f0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800d1f4:	4418      	add	r0, r3
 800d1f6:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	e001      	b.n	800d202 <tcp_enqueue_flags+0xa0>
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d1fe:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800d202:	b003      	add	sp, #12
 800d204:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d206 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d208:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d20a:	4605      	mov	r5, r0
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d20c:	b154      	cbz	r4, 800d224 <tcp_send_fin+0x1e>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d20e:	6823      	ldr	r3, [r4, #0]
 800d210:	b10b      	cbz	r3, 800d216 <tcp_send_fin+0x10>
 800d212:	461c      	mov	r4, r3
 800d214:	e7fb      	b.n	800d20e <tcp_send_fin+0x8>
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d216:	6923      	ldr	r3, [r4, #16]
 800d218:	8998      	ldrh	r0, [r3, #12]
 800d21a:	f7fc fae6 	bl	80097ea <lwip_ntohs>
 800d21e:	f010 0707 	ands.w	r7, r0, #7
 800d222:	d005      	beq.n	800d230 <tcp_send_fin+0x2a>
      pcb->flags |= TF_FIN;
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d224:	4628      	mov	r0, r5
 800d226:	2101      	movs	r1, #1
}
 800d228:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      pcb->flags |= TF_FIN;
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d22c:	f7ff bf99 	b.w	800d162 <tcp_enqueue_flags>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d230:	6926      	ldr	r6, [r4, #16]
 800d232:	2001      	movs	r0, #1
 800d234:	89b4      	ldrh	r4, [r6, #12]
 800d236:	f7fc fad5 	bl	80097e4 <lwip_htons>
 800d23a:	4320      	orrs	r0, r4
 800d23c:	81b0      	strh	r0, [r6, #12]
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
}
 800d23e:	4638      	mov	r0, r7
         last_unsent = last_unsent->next);

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
      pcb->flags |= TF_FIN;
 800d240:	7fab      	ldrb	r3, [r5, #30]
 800d242:	f043 0320 	orr.w	r3, r3, #32
 800d246:	77ab      	strb	r3, [r5, #30]
      return ERR_OK;
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
}
 800d248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d24a <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d24a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d24c:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
 800d24e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800d250:	f7fc face 	bl	80097f0 <lwip_htonl>
 800d254:	2100      	movs	r1, #0
 800d256:	4602      	mov	r2, r0
 800d258:	4620      	mov	r0, r4
 800d25a:	f7ff fdb2 	bl	800cdc2 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 800d25e:	4606      	mov	r6, r0
 800d260:	b930      	cbnz	r0, 800d270 <tcp_send_empty_ack+0x26>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d262:	7fa3      	ldrb	r3, [r4, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d264:	f06f 0001 	mvn.w	r0, #1
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  if (p == NULL) {
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d268:	f043 0303 	orr.w	r3, r3, #3
 800d26c:	77a3      	strb	r3, [r4, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d26e:	e01f      	b.n	800d2b0 <tcp_send_empty_ack+0x66>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d270:	1d25      	adds	r5, r4, #4
 800d272:	4628      	mov	r0, r5
 800d274:	f7fd fa82 	bl	800a77c <ip4_route>
  if (netif == NULL) {
 800d278:	b160      	cbz	r0, 800d294 <tcp_send_empty_ack+0x4a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip,
 800d27a:	2206      	movs	r2, #6
 800d27c:	9002      	str	r0, [sp, #8]
 800d27e:	7aa3      	ldrb	r3, [r4, #10]
 800d280:	4621      	mov	r1, r4
 800d282:	9201      	str	r2, [sp, #4]
 800d284:	4630      	mov	r0, r6
 800d286:	7a62      	ldrb	r2, [r4, #9]
 800d288:	9200      	str	r2, [sp, #0]
 800d28a:	462a      	mov	r2, r5
 800d28c:	f7fd fbaa 	bl	800a9e4 <ip4_output_if>
 800d290:	4605      	mov	r5, r0
 800d292:	e001      	b.n	800d298 <tcp_send_empty_ack+0x4e>
  }
#endif

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    err = ERR_RTE;
 800d294:	f06f 0503 	mvn.w	r5, #3
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip,
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d298:	4630      	mov	r0, r6
 800d29a:	f7fd fee3 	bl	800b064 <pbuf_free>
 800d29e:	7fa3      	ldrb	r3, [r4, #30]

  if (err != ERR_OK) {
 800d2a0:	b115      	cbz	r5, 800d2a8 <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800d2a2:	f043 0303 	orr.w	r3, r3, #3
 800d2a6:	e001      	b.n	800d2ac <tcp_send_empty_ack+0x62>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d2a8:	f023 0303 	bic.w	r3, r3, #3
 800d2ac:	4628      	mov	r0, r5
 800d2ae:	77a3      	strb	r3, [r4, #30]
  }

  return err;
}
 800d2b0:	b004      	add	sp, #16
 800d2b2:	bd70      	pop	{r4, r5, r6, pc}

0800d2b4 <tcp_output>:

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d2b4:	4ba1      	ldr	r3, [pc, #644]	; (800d53c <tcp_output+0x288>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4298      	cmp	r0, r3
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d2ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2be:	4604      	mov	r4, r0
 800d2c0:	b085      	sub	sp, #20

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d2c2:	f000 8131 	beq.w	800d528 <tcp_output+0x274>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d2c6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800d2ca:	f8b0 804c 	ldrh.w	r8, [r0, #76]	; 0x4c

  seg = pcb->unsent;
 800d2ce:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d2d0:	4598      	cmp	r8, r3
 800d2d2:	bf28      	it	cs
 800d2d4:	4698      	movcs	r8, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800d2d6:	7f83      	ldrb	r3, [r0, #30]
 800d2d8:	079b      	lsls	r3, r3, #30
 800d2da:	d510      	bpl.n	800d2fe <tcp_output+0x4a>
 800d2dc:	b92d      	cbnz	r5, 800d2ea <tcp_output+0x36>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800d2de:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800d2e0:	b005      	add	sp, #20
 800d2e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800d2e6:	f7ff bfb0 	b.w	800d24a <tcp_send_empty_ack>
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800d2ea:	692b      	ldr	r3, [r5, #16]
 800d2ec:	6858      	ldr	r0, [r3, #4]
 800d2ee:	f7fc fa81 	bl	80097f4 <lwip_ntohl>
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
     (seg == NULL ||
 800d2f2:	892b      	ldrh	r3, [r5, #8]
 800d2f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d2f6:	1a9b      	subs	r3, r3, r2
 800d2f8:	4418      	add	r0, r3
 800d2fa:	4580      	cmp	r8, r0
 800d2fc:	d3ef      	bcc.n	800d2de <tcp_output+0x2a>
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d2fe:	6f26      	ldr	r6, [r4, #112]	; 0x70
  if (useg != NULL) {
 800d300:	b91e      	cbnz	r6, 800d30a <tcp_output+0x56>
    if (pcb->state != SYN_SENT) {
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800d302:	2700      	movs	r7, #0
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  }

  if (pcb->rttest == 0) {
    pcb->rttest = tcp_ticks;
 800d304:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800d540 <tcp_output+0x28c>
 800d308:	e0b1      	b.n	800d46e <tcp_output+0x1ba>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  if (useg != NULL) {
    for (; useg->next != NULL; useg = useg->next);
 800d30a:	6833      	ldr	r3, [r6, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d0f8      	beq.n	800d302 <tcp_output+0x4e>
 800d310:	461e      	mov	r6, r3
 800d312:	e7fa      	b.n	800d30a <tcp_output+0x56>
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d314:	692b      	ldr	r3, [r5, #16]
 800d316:	6858      	ldr	r0, [r3, #4]
 800d318:	f7fc fa6c 	bl	80097f4 <lwip_ntohl>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d31c:	892b      	ldrh	r3, [r5, #8]
 800d31e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800d320:	1a9b      	subs	r3, r3, r2
 800d322:	4418      	add	r0, r3
 800d324:	4580      	cmp	r8, r0
 800d326:	f0c0 80a5 	bcc.w	800d474 <tcp_output+0x1c0>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d32a:	692b      	ldr	r3, [r5, #16]
 800d32c:	8998      	ldrh	r0, [r3, #12]
 800d32e:	f7fc fa5c 	bl	80097ea <lwip_ntohs>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 800d332:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d334:	2b00      	cmp	r3, #0
 800d336:	f040 80a3 	bne.w	800d480 <tcp_output+0x1cc>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d33a:	7e23      	ldrb	r3, [r4, #24]
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d00a      	beq.n	800d356 <tcp_output+0xa2>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d340:	f8d5 b010 	ldr.w	fp, [r5, #16]
 800d344:	2010      	movs	r0, #16
 800d346:	f8bb a00c 	ldrh.w	sl, [fp, #12]
 800d34a:	f7fc fa4b 	bl	80097e4 <lwip_htons>
 800d34e:	ea4a 0000 	orr.w	r0, sl, r0
 800d352:	f8ab 000c 	strh.w	r0, [fp, #12]
  /** @bug Exclude retransmitted segments from this count. */
  MIB2_STATS_INC(mib2.tcpoutsegs);

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 800d356:	f8d5 a010 	ldr.w	sl, [r5, #16]
    if (pcb->state != SYN_SENT) {
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 800d35a:	816f      	strh	r7, [r5, #10]
  /** @bug Exclude retransmitted segments from this count. */
  MIB2_STATS_INC(mib2.tcpoutsegs);

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
 800d35c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800d35e:	f7fc fa47 	bl	80097f0 <lwip_htonl>
 800d362:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d366:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 800d368:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d36c:	f7fc fa3a 	bl	80097e4 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d370:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800d372:	6aa2      	ldr	r2, [r4, #40]	; 0x28
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d374:	f8aa 000e 	strh.w	r0, [sl, #14]
 800d378:	f104 0a04 	add.w	sl, r4, #4
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d37c:	4413      	add	r3, r2
 800d37e:	6323      	str	r3, [r4, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800d380:	7b2b      	ldrb	r3, [r5, #12]
 800d382:	f013 0f01 	tst.w	r3, #1
 800d386:	d00c      	beq.n	800d3a2 <tcp_output+0xee>

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800d388:	f8d5 b010 	ldr.w	fp, [r5, #16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip, PCB_ISIPV6(pcb));
 800d38c:	4651      	mov	r1, sl
 800d38e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800d392:	f7fe fd0e 	bl	800bdb2 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800d396:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800d39a:	f7fc fa29 	bl	80097f0 <lwip_htonl>
 800d39e:	f8cb 0014 	str.w	r0, [fp, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 800d3a2:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    pcb->rtime = 0;
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d3a6:	4650      	mov	r0, sl
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
 800d3a8:	3301      	adds	r3, #1
    pcb->rtime = 0;
 800d3aa:	bf08      	it	eq
 800d3ac:	86a7      	strheq	r7, [r4, #52]	; 0x34
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d3ae:	f7fd f9e5 	bl	800a77c <ip4_route>
  if (netif == NULL) {
 800d3b2:	4683      	mov	fp, r0
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d07d      	beq.n	800d4b4 <tcp_output+0x200>
    return ERR_RTE;
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d3b8:	6823      	ldr	r3, [r4, #0]
 800d3ba:	b90b      	cbnz	r3, 800d3c0 <tcp_output+0x10c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(PCB_ISIPV6(pcb), netif,
      &pcb->remote_ip);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d3bc:	6843      	ldr	r3, [r0, #4]
 800d3be:	6023      	str	r3, [r4, #0]
  }

  if (pcb->rttest == 0) {
 800d3c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3c2:	b93b      	cbnz	r3, 800d3d4 <tcp_output+0x120>
    pcb->rttest = tcp_ticks;
 800d3c4:	f8d9 3000 	ldr.w	r3, [r9]
 800d3c8:	63a3      	str	r3, [r4, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
 800d3ca:	692b      	ldr	r3, [r5, #16]
 800d3cc:	6858      	ldr	r0, [r3, #4]
 800d3ce:	f7fc fa11 	bl	80097f4 <lwip_ntohl>
 800d3d2:	63e0      	str	r0, [r4, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d3d4:	6868      	ldr	r0, [r5, #4]
 800d3d6:	692a      	ldr	r2, [r5, #16]
 800d3d8:	6843      	ldr	r3, [r0, #4]

  seg->p->len -= len;
 800d3da:	8941      	ldrh	r1, [r0, #10]
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d3dc:	1ad3      	subs	r3, r2, r3

  seg->p->len -= len;
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800d3de:	6042      	str	r2, [r0, #4]
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d3e0:	b29b      	uxth	r3, r3

  seg->p->len -= len;
 800d3e2:	1ac9      	subs	r1, r1, r3
 800d3e4:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800d3e6:	8901      	ldrh	r1, [r0, #8]
 800d3e8:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(PCB_ISIPV6(pcb), seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d3ea:	4621      	mov	r1, r4
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);

  seg->p->len -= len;
  seg->p->tot_len -= len;
 800d3ec:	8103      	strh	r3, [r0, #8]

  seg->p->payload = seg->tcphdr;

  seg->tcphdr->chksum = 0;
 800d3ee:	7417      	strb	r7, [r2, #16]
 800d3f0:	7457      	strb	r7, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(PCB_ISIPV6(pcb), seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d3f2:	2206      	movs	r2, #6
 800d3f4:	7aa3      	ldrb	r3, [r4, #10]
 800d3f6:	9201      	str	r2, [sp, #4]
 800d3f8:	7a62      	ldrb	r2, [r4, #9]
 800d3fa:	f8cd b008 	str.w	fp, [sp, #8]
 800d3fe:	9200      	str	r2, [sp, #0]
 800d400:	4652      	mov	r2, sl
 800d402:	f7fd faef 	bl	800a9e4 <ip4_output_if>

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb);
    if (err != ERR_OK) {
 800d406:	2800      	cmp	r0, #0
 800d408:	d156      	bne.n	800d4b8 <tcp_output+0x204>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
      return err;
    }
    pcb->unsent = seg->next;
 800d40a:	682b      	ldr	r3, [r5, #0]
 800d40c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d40e:	7e23      	ldrb	r3, [r4, #24]
 800d410:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d412:	bf1e      	ittt	ne
 800d414:	7fa3      	ldrbne	r3, [r4, #30]
 800d416:	f023 0303 	bicne.w	r3, r3, #3
 800d41a:	77a3      	strbne	r3, [r4, #30]
    }
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d41c:	692b      	ldr	r3, [r5, #16]
 800d41e:	6858      	ldr	r0, [r3, #4]
 800d420:	f7fc f9e8 	bl	80097f4 <lwip_ntohl>
 800d424:	692b      	ldr	r3, [r5, #16]
 800d426:	4683      	mov	fp, r0
 800d428:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800d42c:	8998      	ldrh	r0, [r3, #12]
 800d42e:	f7fc f9dc 	bl	80097ea <lwip_ntohs>
 800d432:	f010 0003 	ands.w	r0, r0, #3
 800d436:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d438:	6d23      	ldr	r3, [r4, #80]	; 0x50
    }
    pcb->unsent = seg->next;
    if (pcb->state != SYN_SENT) {
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d43a:	bf18      	it	ne
 800d43c:	2001      	movne	r0, #1
 800d43e:	4450      	add	r0, sl
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
      pcb->snd_nxt = snd_nxt;
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d440:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    pcb->unsent = seg->next;
    if (pcb->state != SYN_SENT) {
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d444:	1a1b      	subs	r3, r3, r0
 800d446:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d448:	692b      	ldr	r3, [r5, #16]
    if (pcb->state != SYN_SENT) {
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
    }
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
      pcb->snd_nxt = snd_nxt;
 800d44a:	bfb8      	it	lt
 800d44c:	6520      	strlt	r0, [r4, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d44e:	8998      	ldrh	r0, [r3, #12]
 800d450:	f7fc f9cb 	bl	80097ea <lwip_ntohs>
 800d454:	f010 0003 	ands.w	r0, r0, #3
 800d458:	bf18      	it	ne
 800d45a:	2001      	movne	r0, #1
 800d45c:	eb10 0f0a 	cmn.w	r0, sl
 800d460:	d059      	beq.n	800d516 <tcp_output+0x262>
      seg->next = NULL;
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d462:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
      pcb->snd_nxt = snd_nxt;
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
      seg->next = NULL;
 800d464:	602f      	str	r7, [r5, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d466:	bb63      	cbnz	r3, 800d4c2 <tcp_output+0x20e>
        pcb->unacked = seg;
 800d468:	6725      	str	r5, [r4, #112]	; 0x70
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
 800d46a:	462e      	mov	r6, r5
 800d46c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d46e:	2d00      	cmp	r5, #0
 800d470:	f47f af50 	bne.w	800d314 <tcp_output+0x60>
      tcp_seg_free(seg);
    }
    seg = pcb->unsent;
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d474:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d476:	2b00      	cmp	r3, #0
 800d478:	d152      	bne.n	800d520 <tcp_output+0x26c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d47a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800d47e:	e04f      	b.n	800d520 <tcp_output+0x26c>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 800d480:	7fa2      	ldrb	r2, [r4, #30]
 800d482:	f012 0f44 	tst.w	r2, #68	; 0x44
 800d486:	f47f af58 	bne.w	800d33a <tcp_output+0x86>
 800d48a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d48c:	b143      	cbz	r3, 800d4a0 <tcp_output+0x1ec>
 800d48e:	6819      	ldr	r1, [r3, #0]
 800d490:	2900      	cmp	r1, #0
 800d492:	f47f af52 	bne.w	800d33a <tcp_output+0x86>
 800d496:	8919      	ldrh	r1, [r3, #8]
 800d498:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800d49a:	4299      	cmp	r1, r3
 800d49c:	f4bf af4d 	bcs.w	800d33a <tcp_output+0x86>
 800d4a0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f43f af48 	beq.w	800d33a <tcp_output+0x86>
 800d4aa:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800d4ae:	2b07      	cmp	r3, #7
 800d4b0:	d93c      	bls.n	800d52c <tcp_output+0x278>
 800d4b2:	e742      	b.n	800d33a <tcp_output+0x86>
    pcb->rtime = 0;
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    return ERR_RTE;
 800d4b4:	f06f 0003 	mvn.w	r0, #3
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb);
    if (err != ERR_OK) {
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800d4b8:	7fa3      	ldrb	r3, [r4, #30]
 800d4ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4be:	77a3      	strb	r3, [r4, #30]
      return err;
 800d4c0:	e039      	b.n	800d536 <tcp_output+0x282>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
 800d4c2:	692b      	ldr	r3, [r5, #16]
 800d4c4:	6858      	ldr	r0, [r3, #4]
 800d4c6:	f7fc f995 	bl	80097f4 <lwip_ntohl>
 800d4ca:	6933      	ldr	r3, [r6, #16]
 800d4cc:	4682      	mov	sl, r0
 800d4ce:	6858      	ldr	r0, [r3, #4]
 800d4d0:	f7fc f990 	bl	80097f4 <lwip_ntohl>
 800d4d4:	ebc0 000a 	rsb	r0, r0, sl
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	da1a      	bge.n	800d512 <tcp_output+0x25e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d4dc:	f104 0a70 	add.w	sl, r4, #112	; 0x70
          while (*cur_seg &&
 800d4e0:	f8da 3000 	ldr.w	r3, [sl]
 800d4e4:	b92b      	cbnz	r3, 800d4f2 <tcp_output+0x23e>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
          }
          seg->next = (*cur_seg);
 800d4e6:	f8da 3000 	ldr.w	r3, [sl]
 800d4ea:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800d4ec:	f8ca 5000 	str.w	r5, [sl]
 800d4f0:	e014      	b.n	800d51c <tcp_output+0x268>
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	6858      	ldr	r0, [r3, #4]
 800d4f6:	f7fc f97d 	bl	80097f4 <lwip_ntohl>
 800d4fa:	692b      	ldr	r3, [r5, #16]
 800d4fc:	4683      	mov	fp, r0
 800d4fe:	6858      	ldr	r0, [r3, #4]
 800d500:	f7fc f978 	bl	80097f4 <lwip_ntohl>
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
          while (*cur_seg &&
 800d504:	ebc0 000b 	rsb	r0, r0, fp
 800d508:	2800      	cmp	r0, #0
 800d50a:	daec      	bge.n	800d4e6 <tcp_output+0x232>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800d50c:	f8da a000 	ldr.w	sl, [sl]
 800d510:	e7e6      	b.n	800d4e0 <tcp_output+0x22c>
          }
          seg->next = (*cur_seg);
          (*cur_seg) = seg;
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d512:	6035      	str	r5, [r6, #0]
 800d514:	e7a9      	b.n	800d46a <tcp_output+0x1b6>
          useg = useg->next;
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d516:	4628      	mov	r0, r5
 800d518:	f7fd fffd 	bl	800b516 <tcp_seg_free>
 800d51c:	4635      	mov	r5, r6
 800d51e:	e7a4      	b.n	800d46a <tcp_output+0x1b6>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800d520:	7fa3      	ldrb	r3, [r4, #30]
 800d522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d526:	77a3      	strb	r3, [r4, #30]
  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
    return ERR_OK;
 800d528:	2000      	movs	r0, #0
 800d52a:	e004      	b.n	800d536 <tcp_output+0x282>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
 800d52c:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800d530:	f47f af03 	bne.w	800d33a <tcp_output+0x86>
 800d534:	e79e      	b.n	800d474 <tcp_output+0x1c0>
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800d536:	b005      	add	sp, #20
 800d538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d53c:	20049260 	.word	0x20049260
 800d540:	20049250 	.word	0x20049250

0800d544 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800d544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d548:	b085      	sub	sp, #20
 800d54a:	4681      	mov	r9, r0
 800d54c:	460d      	mov	r5, r1
 800d54e:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d550:	2114      	movs	r1, #20
 800d552:	2200      	movs	r2, #0
 800d554:	2001      	movs	r0, #1
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800d556:	461f      	mov	r7, r3
 800d558:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800d55c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d560:	f7fd fda0 	bl	800b0a4 <pbuf_alloc>
  if (p == NULL) {
 800d564:	4606      	mov	r6, r0
 800d566:	b390      	cbz	r0, 800d5ce <tcp_rst+0x8a>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800d568:	6844      	ldr	r4, [r0, #4]
  tcphdr->src = htons(local_port);
 800d56a:	4658      	mov	r0, fp
 800d56c:	f7fc f93a 	bl	80097e4 <lwip_htons>
 800d570:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = htons(remote_port);
 800d572:	4650      	mov	r0, sl
 800d574:	f7fc f936 	bl	80097e4 <lwip_htons>
 800d578:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = htonl(seqno);
 800d57a:	4648      	mov	r0, r9
 800d57c:	f7fc f938 	bl	80097f0 <lwip_htonl>
 800d580:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = htonl(ackno);
 800d582:	4628      	mov	r0, r5
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d584:	2500      	movs	r5, #0

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = htons(local_port);
  tcphdr->dest = htons(remote_port);
  tcphdr->seqno = htonl(seqno);
  tcphdr->ackno = htonl(ackno);
 800d586:	f7fc f933 	bl	80097f0 <lwip_htonl>
 800d58a:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d58c:	f245 0014 	movw	r0, #20500	; 0x5014
 800d590:	f7fc f928 	bl	80097e4 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d594:	230b      	movs	r3, #11
  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = htons(local_port);
  tcphdr->dest = htons(remote_port);
  tcphdr->seqno = htonl(seqno);
  tcphdr->ackno = htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d596:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(IP_IS_V6(remote_ip), local_ip, remote_ip);
 800d598:	4638      	mov	r0, r7
  tcphdr->ackno = htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d59a:	73a3      	strb	r3, [r4, #14]
 800d59c:	2368      	movs	r3, #104	; 0x68
#endif
  tcphdr->chksum = 0;
 800d59e:	7425      	strb	r5, [r4, #16]
  tcphdr->ackno = htonl(ackno);
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d5a0:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800d5a2:	7465      	strb	r5, [r4, #17]
  tcphdr->urgp = 0;
 800d5a4:	74a5      	strb	r5, [r4, #18]
 800d5a6:	74e5      	strb	r5, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(IP_IS_V6(remote_ip), local_ip, remote_ip);
 800d5a8:	f7fd f8e8 	bl	800a77c <ip4_route>
  if (netif != NULL) {
 800d5ac:	b148      	cbz	r0, 800d5c2 <tcp_rst+0x7e>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(IP_IS_V6(remote_ip), p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800d5ae:	2306      	movs	r3, #6
 800d5b0:	9002      	str	r0, [sp, #8]
 800d5b2:	9500      	str	r5, [sp, #0]
 800d5b4:	463a      	mov	r2, r7
 800d5b6:	9301      	str	r3, [sp, #4]
 800d5b8:	4641      	mov	r1, r8
 800d5ba:	23ff      	movs	r3, #255	; 0xff
 800d5bc:	4630      	mov	r0, r6
 800d5be:	f7fd fa11 	bl	800a9e4 <ip4_output_if>
  }
  pbuf_free(p);
 800d5c2:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d5c4:	b005      	add	sp, #20
 800d5c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(IP_IS_V6(remote_ip), p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  }
  pbuf_free(p);
 800d5ca:	f7fd bd4b 	b.w	800b064 <pbuf_free>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d5ce:	b005      	add	sp, #20
 800d5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5d4 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800d5d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800d5d6:	b1aa      	cbz	r2, 800d604 <tcp_rexmit_rto+0x30>
 800d5d8:	4613      	mov	r3, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800d5da:	6819      	ldr	r1, [r3, #0]
 800d5dc:	b109      	cbz	r1, 800d5e2 <tcp_rexmit_rto+0xe>
 800d5de:	460b      	mov	r3, r1
 800d5e0:	e7fb      	b.n	800d5da <tcp_rexmit_rto+0x6>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d5e2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800d5e4:	6019      	str	r1, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 800d5e6:	b911      	cbnz	r1, 800d5ee <tcp_rexmit_rto+0x1a>
    pcb->unsent_oversize = seg->oversize_left;
 800d5e8:	895b      	ldrh	r3, [r3, #10]
 800d5ea:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800d5ee:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800d5f2:	66c2      	str	r2, [r0, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d5f4:	2200      	movs	r2, #0

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800d5f6:	3301      	adds	r3, #1
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d5f8:	6702      	str	r2, [r0, #112]	; 0x70

  /* increment number of retransmissions */
  ++pcb->nrtx;
 800d5fa:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d5fe:	6382      	str	r2, [r0, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
 800d600:	f7ff be58 	b.w	800d2b4 <tcp_output>
 800d604:	4770      	bx	lr

0800d606 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800d608:	6f05      	ldr	r5, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d60a:	4604      	mov	r4, r0
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800d60c:	b315      	cbz	r5, 800d654 <tcp_rexmit+0x4e>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800d60e:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 800d610:	f100 066c 	add.w	r6, r0, #108	; 0x6c
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800d614:	6703      	str	r3, [r0, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800d616:	6833      	ldr	r3, [r6, #0]
 800d618:	b93b      	cbnz	r3, 800d62a <tcp_rexmit+0x24>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800d61a:	6833      	ldr	r3, [r6, #0]
 800d61c:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800d61e:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	b983      	cbnz	r3, 800d646 <tcp_rexmit+0x40>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d624:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800d628:	e00d      	b.n	800d646 <tcp_rexmit+0x40>
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
 800d62a:	691b      	ldr	r3, [r3, #16]
 800d62c:	6858      	ldr	r0, [r3, #4]
 800d62e:	f7fc f8e1 	bl	80097f4 <lwip_ntohl>
 800d632:	692b      	ldr	r3, [r5, #16]
 800d634:	4607      	mov	r7, r0
 800d636:	6858      	ldr	r0, [r3, #4]
 800d638:	f7fc f8dc 	bl	80097f4 <lwip_ntohl>
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;

  cur_seg = &(pcb->unsent);
  while (*cur_seg &&
 800d63c:	1a38      	subs	r0, r7, r0
 800d63e:	2800      	cmp	r0, #0
 800d640:	daeb      	bge.n	800d61a <tcp_rexmit+0x14>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800d642:	6836      	ldr	r6, [r6, #0]
 800d644:	e7e7      	b.n	800d616 <tcp_rexmit+0x10>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
 800d646:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d64a:	3301      	adds	r3, #1
 800d64c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	63a3      	str	r3, [r4, #56]	; 0x38
 800d654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d656 <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d656:	6f03      	ldr	r3, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d658:	b510      	push	{r4, lr}
 800d65a:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d65c:	b31b      	cbz	r3, 800d6a6 <tcp_rexmit_fast+0x50>
 800d65e:	7f83      	ldrb	r3, [r0, #30]
 800d660:	075b      	lsls	r3, r3, #29
 800d662:	d420      	bmi.n	800d6a6 <tcp_rexmit_fast+0x50>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800d664:	f7ff ffcf 	bl	800d606 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
 800d668:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 800d66c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800d670:	4293      	cmp	r3, r2
      pcb->ssthresh = pcb->snd_wnd / 2;
 800d672:	bf8a      	itet	hi
 800d674:	0852      	lsrhi	r2, r2, #1
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 800d676:	085b      	lsrls	r3, r3, #1
    tcp_rexmit(pcb);

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
      pcb->ssthresh = pcb->snd_wnd / 2;
 800d678:	f8a4 204e 	strhhi.w	r2, [r4, #78]	; 0x4e
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d67c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
      pcb->ssthresh = pcb->snd_wnd / 2;
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
 800d67e:	bf98      	it	ls
 800d680:	f8a4 304e 	strhls.w	r3, [r4, #78]	; 0x4e
    }

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d684:	0053      	lsls	r3, r2, #1
 800d686:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 800d68a:	4299      	cmp	r1, r3
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
 800d68c:	bf38      	it	cc
 800d68e:	f8a4 304e 	strhcc.w	r3, [r4, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d692:	4413      	add	r3, r2
 800d694:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
 800d698:	4413      	add	r3, r2
 800d69a:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    pcb->flags |= TF_INFR;
 800d69e:	7fa3      	ldrb	r3, [r4, #30]
 800d6a0:	f043 0304 	orr.w	r3, r3, #4
 800d6a4:	77a3      	strb	r3, [r4, #30]
 800d6a6:	bd10      	pop	{r4, pc}

0800d6a8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d6a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d6aa:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
 800d6ac:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800d6ae:	3801      	subs	r0, #1
 800d6b0:	f7fc f89e 	bl	80097f0 <lwip_htonl>
 800d6b4:	2100      	movs	r1, #0
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f7ff fb82 	bl	800cdc2 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 800d6be:	4605      	mov	r5, r0
 800d6c0:	b1c0      	cbz	r0, 800d6f4 <tcp_keepalive+0x4c>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d6c2:	1d26      	adds	r6, r4, #4
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f7fd f859 	bl	800a77c <ip4_route>
  if (netif == NULL) {
 800d6ca:	b160      	cbz	r0, 800d6e6 <tcp_keepalive+0x3e>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	2206      	movs	r2, #6
 800d6d0:	7aa3      	ldrb	r3, [r4, #10]
 800d6d2:	9002      	str	r0, [sp, #8]
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	e88d 0006 	stmia.w	sp, {r1, r2}
 800d6da:	4621      	mov	r1, r4
 800d6dc:	4632      	mov	r2, r6
 800d6de:	f7fd f981 	bl	800a9e4 <ip4_output_if>
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	e001      	b.n	800d6ea <tcp_keepalive+0x42>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    err = ERR_RTE;
 800d6e6:	f06f 0403 	mvn.w	r4, #3
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f7fd fcba 	bl	800b064 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	e001      	b.n	800d6f8 <tcp_keepalive+0x50>

  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  if (p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d6f4:	f04f 30ff 	mov.w	r0, #4294967295
  pbuf_free(p);

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d6f8:	b004      	add	sp, #16
 800d6fa:	bd70      	pop	{r4, r5, r6, pc}

0800d6fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d6fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800d700:	6f04      	ldr	r4, [r0, #112]	; 0x70
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d702:	4606      	mov	r6, r0
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;

  if (seg == NULL) {
 800d704:	b914      	cbnz	r4, 800d70c <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800d706:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  }
  if (seg == NULL) {
 800d708:	2c00      	cmp	r4, #0
 800d70a:	d045      	beq.n	800d798 <tcp_zero_window_probe+0x9c>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d70c:	6923      	ldr	r3, [r4, #16]
 800d70e:	8998      	ldrh	r0, [r3, #12]
 800d710:	f7fc f86b 	bl	80097ea <lwip_ntohs>
 800d714:	f010 0001 	ands.w	r0, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d718:	6923      	ldr	r3, [r4, #16]
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d71a:	bf14      	ite	ne
 800d71c:	8925      	ldrhne	r5, [r4, #8]
 800d71e:	4605      	moveq	r5, r0
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d720:	685a      	ldr	r2, [r3, #4]
 800d722:	4630      	mov	r0, r6
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d724:	bf1c      	itt	ne
 800d726:	fab5 f585 	clzne	r5, r5
 800d72a:	096d      	lsrne	r5, r5, #5
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d72c:	f085 0101 	eor.w	r1, r5, #1
 800d730:	f7ff fb47 	bl	800cdc2 <tcp_output_alloc_header.constprop.1>
  if (p == NULL) {
 800d734:	4607      	mov	r7, r0
 800d736:	b388      	cbz	r0, 800d79c <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d738:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800d73c:	b15d      	cbz	r5, 800d756 <tcp_zero_window_probe+0x5a>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d73e:	f8b8 400c 	ldrh.w	r4, [r8, #12]
 800d742:	2011      	movs	r0, #17
 800d744:	f7fc f84e 	bl	80097e4 <lwip_htons>
 800d748:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800d74c:	b2a4      	uxth	r4, r4
 800d74e:	4320      	orrs	r0, r4
 800d750:	f8a8 000c 	strh.w	r0, [r8, #12]
 800d754:	e009      	b.n	800d76a <tcp_zero_window_probe+0x6e>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d756:	6860      	ldr	r0, [r4, #4]
 800d758:	f108 0114 	add.w	r1, r8, #20
 800d75c:	8922      	ldrh	r2, [r4, #8]
 800d75e:	8903      	ldrh	r3, [r0, #8]
 800d760:	1a9b      	subs	r3, r3, r2
 800d762:	2201      	movs	r2, #1
 800d764:	b29b      	uxth	r3, r3
 800d766:	f7fd fdba 	bl	800b2de <pbuf_copy_partial>
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
 800d76a:	1d34      	adds	r4, r6, #4
 800d76c:	4620      	mov	r0, r4
 800d76e:	f7fd f805 	bl	800a77c <ip4_route>
  if (netif == NULL) {
 800d772:	b160      	cbz	r0, 800d78e <tcp_zero_window_probe+0x92>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d774:	2100      	movs	r1, #0
 800d776:	2206      	movs	r2, #6
 800d778:	9002      	str	r0, [sp, #8]
 800d77a:	4638      	mov	r0, r7
 800d77c:	7ab3      	ldrb	r3, [r6, #10]
 800d77e:	e88d 0006 	stmia.w	sp, {r1, r2}
 800d782:	4622      	mov	r2, r4
 800d784:	4631      	mov	r1, r6
 800d786:	f7fd f92d 	bl	800a9e4 <ip4_output_if>
 800d78a:	4604      	mov	r4, r0
 800d78c:	e001      	b.n	800d792 <tcp_zero_window_probe+0x96>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, &pcb->remote_ip);
  if (netif == NULL) {
    err = ERR_RTE;
 800d78e:	f06f 0403 	mvn.w	r4, #3
    err = ip_output_if(PCB_ISIPV6(pcb), p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800d792:	4638      	mov	r0, r7
 800d794:	f7fd fc66 	bl	800b064 <pbuf_free>
  if (seg == NULL) {
    seg = pcb->unsent;
  }
  if (seg == NULL) {
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800d798:	4620      	mov	r0, r4
 800d79a:	e001      	b.n	800d7a0 <tcp_zero_window_probe+0xa4>
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  if (p == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d79c:	f04f 30ff 	mov.w	r0, #4294967295

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d7a0:	b004      	add	sp, #16
 800d7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d7a6 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d7a6:	4770      	bx	lr

0800d7a8 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d7a8:	8943      	ldrh	r3, [r0, #10]
 800d7aa:	2b07      	cmp	r3, #7
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	b085      	sub	sp, #20
 800d7b4:	4689      	mov	r9, r1
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d7b6:	d805      	bhi.n	800d7c4 <udp_input+0x1c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d7b8:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d7ba:	b005      	add	sp, #20
 800d7bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d7c0:	f7fd bc50 	b.w	800b064 <pbuf_free>

  udphdr = (struct udp_hdr *)p->payload;

#if LWIP_IPV4
  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d7c4:	4d44      	ldr	r5, [pc, #272]	; (800d8d8 <udp_input+0x130>)
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d7c6:	6844      	ldr	r4, [r0, #4]

#if LWIP_IPV4
  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d7c8:	6829      	ldr	r1, [r5, #0]
 800d7ca:	6968      	ldr	r0, [r5, #20]
 800d7cc:	f7fd f91b 	bl	800aa06 <ip4_addr_isbroadcast_u32>
 800d7d0:	4607      	mov	r7, r0
#endif /* LWIP_IPV4 */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
 800d7d2:	8820      	ldrh	r0, [r4, #0]
 800d7d4:	f7fc f809 	bl	80097ea <lwip_ntohs>
 800d7d8:	4680      	mov	r8, r0
  dest = ntohs(udphdr->dest);
 800d7da:	8860      	ldrh	r0, [r4, #2]
 800d7dc:	f7fc f805 	bl	80097ea <lwip_ntohs>

#if LWIP_DHCP
  pcb = NULL;
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
 800d7e0:	2844      	cmp	r0, #68	; 0x44
 800d7e2:	d110      	bne.n	800d806 <udp_input+0x5e>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
 800d7e4:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
 800d7e8:	d13b      	bne.n	800d862 <udp_input+0xba>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
 800d7ea:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d037      	beq.n	800d862 <udp_input+0xba>
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d034      	beq.n	800d862 <udp_input+0xba>
        /* accept the packet if
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src
           (no need to check for IPv6 since the dhcp struct always uses IPv4) */
        if (ip_addr_isany_val(inp->dhcp->pcb->remote_ip) ||
 800d7f8:	685a      	ldr	r2, [r3, #4]
 800d7fa:	2a00      	cmp	r2, #0
 800d7fc:	d069      	beq.n	800d8d2 <udp_input+0x12a>
 800d7fe:	6929      	ldr	r1, [r5, #16]
 800d800:	428a      	cmp	r2, r1
 800d802:	d12e      	bne.n	800d862 <udp_input+0xba>
 800d804:	e065      	b.n	800d8d2 <udp_input+0x12a>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d806:	4935      	ldr	r1, [pc, #212]	; (800d8dc <udp_input+0x134>)
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
    local_match = 0;
    uncon_pcb = NULL;
 800d808:	2400      	movs	r4, #0
#if LWIP_IPV4
#if !LWIP_IPV6
            (
#endif /* !LWIP_IPV6 */
            ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
            ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr()) ||
 800d80a:	f8d5 a014 	ldr.w	sl, [r5, #20]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d80e:	f8d1 c000 	ldr.w	ip, [r1]
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
 800d812:	46a6      	mov	lr, r4
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
            (ip_addr_isany_val(pcb->remote_ip) ||
              ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d814:	f8d5 b010 	ldr.w	fp, [r5, #16]
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d818:	4663      	mov	r3, ip
 800d81a:	9103      	str	r1, [sp, #12]
 800d81c:	b303      	cbz	r3, 800d860 <udp_input+0xb8>
      LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
      ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
      LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
 800d81e:	8a5a      	ldrh	r2, [r3, #18]
 800d820:	4282      	cmp	r2, r0
 800d822:	d11a      	bne.n	800d85a <udp_input+0xb2>
 800d824:	681a      	ldr	r2, [r3, #0]
        if (
 800d826:	b907      	cbnz	r7, 800d82a <udp_input+0x82>
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
#if !LWIP_IPV6
            (
#endif /* !LWIP_IPV6 */
            ((!broadcast && ip_addr_isany(&pcb->local_ip)) ||
 800d828:	b14a      	cbz	r2, 800d83e <udp_input+0x96>
 800d82a:	4552      	cmp	r2, sl
 800d82c:	d007      	beq.n	800d83e <udp_input+0x96>
            ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr()) ||
 800d82e:	b1a7      	cbz	r7, 800d85a <udp_input+0xb2>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), netif_ip4_netmask(inp))))))
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
 800d830:	b12a      	cbz	r2, 800d83e <udp_input+0x96>
 800d832:	ea82 020a 	eor.w	r2, r2, sl
 800d836:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800d83a:	420a      	tst	r2, r1
 800d83c:	d10d      	bne.n	800d85a <udp_input+0xb2>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), netif_ip4_netmask(inp))))))
#endif /* IP_SOF_BROADCAST_RECV */
#endif /* LWIP_IPV4 */
              ) {
          local_match = 1;
          if ((uncon_pcb == NULL) &&
 800d83e:	b924      	cbnz	r4, 800d84a <udp_input+0xa2>
 800d840:	7c1a      	ldrb	r2, [r3, #16]
 800d842:	f012 0f04 	tst.w	r2, #4
 800d846:	bf08      	it	eq
 800d848:	461c      	moveq	r4, r3
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
 800d84a:	8a9a      	ldrh	r2, [r3, #20]
 800d84c:	4542      	cmp	r2, r8
 800d84e:	d104      	bne.n	800d85a <udp_input+0xb2>
            (ip_addr_isany_val(pcb->remote_ip) ||
 800d850:	685a      	ldr	r2, [r3, #4]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
 800d852:	2a00      	cmp	r2, #0
 800d854:	d033      	beq.n	800d8be <udp_input+0x116>
            (ip_addr_isany_val(pcb->remote_ip) ||
 800d856:	455a      	cmp	r2, fp
 800d858:	d031      	beq.n	800d8be <udp_input+0x116>
    uncon_pcb = NULL;
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d85a:	469e      	mov	lr, r3
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	e7dd      	b.n	800d81c <udp_input+0x74>
      pcb = uncon_pcb;
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d860:	b92c      	cbnz	r4, 800d86e <udp_input+0xc6>
    {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
    }
#endif /* LWIP_IPV4 */
  }
  if (for_us) {
 800d862:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800d866:	696b      	ldr	r3, [r5, #20]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d1a5      	bne.n	800d7b8 <udp_input+0x10>
 800d86c:	2400      	movs	r4, #0
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800d86e:	f06f 0107 	mvn.w	r1, #7
 800d872:	4630      	mov	r0, r6
 800d874:	f7fd fbe8 	bl	800b048 <pbuf_header>
 800d878:	2800      	cmp	r0, #0
 800d87a:	d19d      	bne.n	800d7b8 <udp_input+0x10>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
      goto end;
    }
    if (pcb != NULL) {
 800d87c:	b164      	cbz	r4, 800d898 <udp_input+0xf0>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d87e:	69a5      	ldr	r5, [r4, #24]
 800d880:	2d00      	cmp	r5, #0
 800d882:	d099      	beq.n	800d7b8 <udp_input+0x10>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d884:	f8cd 8000 	str.w	r8, [sp]
 800d888:	4632      	mov	r2, r6
 800d88a:	4b15      	ldr	r3, [pc, #84]	; (800d8e0 <udp_input+0x138>)
 800d88c:	4621      	mov	r1, r4
 800d88e:	69e0      	ldr	r0, [r4, #28]
 800d890:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d892:	b005      	add	sp, #20
 800d894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP || LWIP_ICMP6
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (
 800d898:	2f00      	cmp	r7, #0
 800d89a:	d18d      	bne.n	800d7b8 <udp_input+0x10>
#if LWIP_IPV4
          !broadcast && !ip_addr_ismulticast(ip_current_dest_addr())
 800d89c:	696b      	ldr	r3, [r5, #20]
 800d89e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d8a2:	2be0      	cmp	r3, #224	; 0xe0
 800d8a4:	d088      	beq.n	800d7b8 <udp_input+0x10>
#if LWIP_IPV6
          !ip6_addr_ismulticast(ip6_current_dest_addr())
#endif /* LWIP_IPV6 */
          ) {
        /* move payload pointer back to ip header */
        pbuf_header_force(p, ip_current_header_tot_len() + UDP_HLEN);
 800d8a6:	4b0c      	ldr	r3, [pc, #48]	; (800d8d8 <udp_input+0x130>)
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	8999      	ldrh	r1, [r3, #12]
 800d8ac:	3108      	adds	r1, #8
 800d8ae:	b209      	sxth	r1, r1
 800d8b0:	f7fd fbd1 	bl	800b056 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d8b4:	2103      	movs	r1, #3
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f7fc ff26 	bl	800a708 <icmp_dest_unreach>
 800d8bc:	e77c      	b.n	800d7b8 <udp_input+0x10>
      if ((local_match != 0) &&
          (pcb->remote_port == src) && IP_PCB_IPVER_INPUT_MATCH(pcb) &&
            (ip_addr_isany_val(pcb->remote_ip) ||
              ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d8be:	f1be 0f00 	cmp.w	lr, #0
 800d8c2:	d006      	beq.n	800d8d2 <udp_input+0x12a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d8c4:	68da      	ldr	r2, [r3, #12]
 800d8c6:	f8ce 200c 	str.w	r2, [lr, #12]
          pcb->next = udp_pcbs;
          udp_pcbs = pcb;
 800d8ca:	9a03      	ldr	r2, [sp, #12]
        /* the first fully matching PCB */
        if (prev != NULL) {
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 800d8cc:	f8c3 c00c 	str.w	ip, [r3, #12]
          udp_pcbs = pcb;
 800d8d0:	6013      	str	r3, [r2, #0]
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), netif_ip4_netmask(inp))))))
#endif /* IP_SOF_BROADCAST_RECV */
#endif /* LWIP_IPV4 */
              ) {
          local_match = 1;
          if ((uncon_pcb == NULL) &&
 800d8d2:	461c      	mov	r4, r3
 800d8d4:	e7cb      	b.n	800d86e <udp_input+0xc6>
 800d8d6:	bf00      	nop
 800d8d8:	20043138 	.word	0x20043138
 800d8dc:	20049264 	.word	0x20049264
 800d8e0:	20043148 	.word	0x20043148

0800d8e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct udp_pcb *ipcb;
  u8_t rebind;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d04f      	beq.n	800d98c <udp_bind+0xa8>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d8ec:	4f2b      	ldr	r7, [pc, #172]	; (800d99c <udp_bind+0xb8>)
 800d8ee:	f8d7 e000 	ldr.w	lr, [r7]
 800d8f2:	4673      	mov	r3, lr
 800d8f4:	b11b      	cbz	r3, 800d8fe <udp_bind+0x1a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d8f6:	4283      	cmp	r3, r0
 800d8f8:	d003      	beq.n	800d902 <udp_bind+0x1e>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	e7fa      	b.n	800d8f4 <udp_bind+0x10>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d8fe:	461e      	mov	r6, r3
 800d900:	e000      	b.n	800d904 <udp_bind+0x20>
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
      rebind = 1;
 800d902:	2601      	movs	r6, #1
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800d904:	b10a      	cbz	r2, 800d90a <udp_bind+0x26>
 800d906:	4673      	mov	r3, lr
 800d908:	e022      	b.n	800d950 <udp_bind+0x6c>
 800d90a:	4b25      	ldr	r3, [pc, #148]	; (800d9a0 <udp_bind+0xbc>)
 800d90c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
{
  u16_t n = 0;
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d910:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800d914:	881d      	ldrh	r5, [r3, #0]
 800d916:	4565      	cmp	r5, ip
 800d918:	bf16      	itet	ne
 800d91a:	3501      	addne	r5, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d91c:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
{
  u16_t n = 0;
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d920:	b2aa      	uxthne	r2, r5
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d922:	4675      	mov	r5, lr
 800d924:	b17d      	cbz	r5, 800d946 <udp_bind+0x62>
    if (pcb->local_port == udp_port) {
 800d926:	f8b5 8012 	ldrh.w	r8, [r5, #18]
 800d92a:	4590      	cmp	r8, r2
 800d92c:	d109      	bne.n	800d942 <udp_bind+0x5e>
 800d92e:	3c01      	subs	r4, #1
 800d930:	4615      	mov	r5, r2
 800d932:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d934:	2c00      	cmp	r4, #0
 800d936:	d1ee      	bne.n	800d916 <udp_bind+0x32>
 800d938:	801a      	strh	r2, [r3, #0]
  if (port == 0) {
    port = udp_new_port();
    if (port == 0) {
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d93a:	f06f 0007 	mvn.w	r0, #7
 800d93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d942:	68ed      	ldr	r5, [r5, #12]
 800d944:	e7ee      	b.n	800d924 <udp_bind+0x40>
 800d946:	801a      	strh	r2, [r3, #0]
 800d948:	e015      	b.n	800d976 <udp_bind+0x92>
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
      if (pcb != ipcb) {
 800d94a:	4283      	cmp	r3, r0
 800d94c:	d103      	bne.n	800d956 <udp_bind+0x72>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1fa      	bne.n	800d94a <udp_bind+0x66>
 800d954:	e00f      	b.n	800d976 <udp_bind+0x92>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) && IP_PCB_IPVER_EQ(pcb, ipcb) &&
 800d956:	8a5c      	ldrh	r4, [r3, #18]
 800d958:	4294      	cmp	r4, r2
 800d95a:	d1f8      	bne.n	800d94e <udp_bind+0x6a>
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d0ec      	beq.n	800d93a <udp_bind+0x56>
              /* IP address matches, or one is IP_ADDR_ANY? */
                (ip_addr_isany(&ipcb->local_ip) ||
 800d960:	681d      	ldr	r5, [r3, #0]
 800d962:	2d00      	cmp	r5, #0
 800d964:	d0e9      	beq.n	800d93a <udp_bind+0x56>
 800d966:	2900      	cmp	r1, #0
 800d968:	d0e7      	beq.n	800d93a <udp_bind+0x56>
                 ip_addr_isany(ipaddr) ||
 800d96a:	680c      	ldr	r4, [r1, #0]
 800d96c:	2c00      	cmp	r4, #0
 800d96e:	d0e4      	beq.n	800d93a <udp_bind+0x56>
 800d970:	42a5      	cmp	r5, r4
 800d972:	d1ec      	bne.n	800d94e <udp_bind+0x6a>
 800d974:	e7e1      	b.n	800d93a <udp_bind+0x56>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d976:	b101      	cbz	r1, 800d97a <udp_bind+0x96>
 800d978:	6809      	ldr	r1, [r1, #0]
 800d97a:	6001      	str	r1, [r0, #0]

  pcb->local_port = port;
 800d97c:	8242      	strh	r2, [r0, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d97e:	b94e      	cbnz	r6, 800d994 <udp_bind+0xb0>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d980:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 800d984:	6038      	str	r0, [r7, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d986:	4630      	mov	r0, r6
 800d988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
  struct udp_pcb *ipcb;
  u8_t rebind;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
 800d98c:	f06f 0005 	mvn.w	r0, #5
 800d990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d994:	2000      	movs	r0, #0
}
 800d996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d99a:	bf00      	nop
 800d99c:	20049264 	.word	0x20049264
 800d9a0:	20010080 	.word	0x20010080

0800d9a4 <udp_sendto_if_src>:

/** Same as udp_sendto_if(), but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800d9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9a8:	460e      	mov	r6, r1
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	4690      	mov	r8, r2
 800d9ae:	4699      	mov	r9, r3
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d03d      	beq.n	800da32 <udp_sendto_if_src+0x8e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800d9b6:	8a42      	ldrh	r2, [r0, #18]
 800d9b8:	b132      	cbz	r2, 800d9c8 <udp_sendto_if_src+0x24>
      return err;
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800d9ba:	2108      	movs	r1, #8
 800d9bc:	4630      	mov	r0, r6
 800d9be:	f7fd fb43 	bl	800b048 <pbuf_header>
 800d9c2:	b938      	cbnz	r0, 800d9d4 <udp_sendto_if_src+0x30>
 800d9c4:	4635      	mov	r5, r6
 800d9c6:	e011      	b.n	800d9ec <udp_sendto_if_src+0x48>
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d9c8:	4601      	mov	r1, r0
 800d9ca:	f7ff ff8b 	bl	800d8e4 <udp_bind>
    if (err != ERR_OK) {
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d0f3      	beq.n	800d9ba <udp_sendto_if_src+0x16>
 800d9d2:	e035      	b.n	800da40 <udp_sendto_if_src+0x9c>
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2108      	movs	r1, #8
 800d9d8:	2001      	movs	r0, #1
 800d9da:	f7fd fb63 	bl	800b0a4 <pbuf_alloc>
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800d9de:	4605      	mov	r5, r0
 800d9e0:	b350      	cbz	r0, 800da38 <udp_sendto_if_src+0x94>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
    }
    if (p->tot_len != 0) {
 800d9e2:	8933      	ldrh	r3, [r6, #8]
 800d9e4:	b113      	cbz	r3, 800d9ec <udp_sendto_if_src+0x48>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	f7fd fc23 	bl	800b232 <pbuf_chain>
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800d9ec:	686f      	ldr	r7, [r5, #4]
  udphdr->src = htons(pcb->local_port);
 800d9ee:	8a60      	ldrh	r0, [r4, #18]
 800d9f0:	f7fb fef8 	bl	80097e4 <lwip_htons>
 800d9f4:	8038      	strh	r0, [r7, #0]
  udphdr->dest = htons(dst_port);
 800d9f6:	4648      	mov	r0, r9
 800d9f8:	f7fb fef4 	bl	80097e4 <lwip_htons>
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800d9fc:	2300      	movs	r3, #0
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  udphdr->src = htons(pcb->local_port);
  udphdr->dest = htons(dst_port);
 800d9fe:	8078      	strh	r0, [r7, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800da00:	71bb      	strb	r3, [r7, #6]
 800da02:	71fb      	strb	r3, [r7, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 800da04:	8928      	ldrh	r0, [r5, #8]
 800da06:	f7fb feed 	bl	80097e4 <lwip_htons>

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(PCB_ISIPV6(pcb), q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800da0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
 800da0c:	80b8      	strh	r0, [r7, #4]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(PCB_ISIPV6(pcb), q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800da0e:	4628      	mov	r0, r5
 800da10:	7aa3      	ldrb	r3, [r4, #10]
 800da12:	9202      	str	r2, [sp, #8]
 800da14:	2211      	movs	r2, #17
 800da16:	990d      	ldr	r1, [sp, #52]	; 0x34
 800da18:	9201      	str	r2, [sp, #4]
 800da1a:	7a62      	ldrb	r2, [r4, #9]
 800da1c:	9200      	str	r2, [sp, #0]
 800da1e:	4642      	mov	r2, r8
 800da20:	f7fc ff94 	bl	800a94c <ip4_output_if_src>

  /* TODO: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800da24:	42b5      	cmp	r5, r6

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(PCB_ISIPV6(pcb), q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800da26:	4604      	mov	r4, r0

  /* TODO: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800da28:	d009      	beq.n	800da3e <udp_sendto_if_src+0x9a>
    /* free the header pbuf */
    pbuf_free(q);
 800da2a:	4628      	mov	r0, r5
 800da2c:	f7fd fb1a 	bl	800b064 <pbuf_free>
 800da30:	e005      	b.n	800da3e <udp_sendto_if_src+0x9a>
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800da32:	f06f 0005 	mvn.w	r0, #5
 800da36:	e003      	b.n	800da40 <udp_sendto_if_src+0x9c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800da38:	f04f 30ff 	mov.w	r0, #4294967295
 800da3c:	e000      	b.n	800da40 <udp_sendto_if_src+0x9c>
    q = NULL;
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800da3e:	4620      	mov	r0, r4
}
 800da40:	b005      	add	sp, #20
 800da42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800da46 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800da46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da48:	9c06      	ldr	r4, [sp, #24]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800da4a:	b160      	cbz	r0, 800da66 <udp_sendto_if+0x20>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 800da4c:	6805      	ldr	r5, [r0, #0]
 800da4e:	b90d      	cbnz	r5, 800da54 <udp_sendto_if+0xe>
    /* use outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800da50:	1d25      	adds	r5, r4, #4
 800da52:	e003      	b.n	800da5c <udp_sendto_if+0x16>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800da54:	6866      	ldr	r6, [r4, #4]
 800da56:	42b5      	cmp	r5, r6
 800da58:	d105      	bne.n	800da66 <udp_sendto_if+0x20>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 800da5a:	4605      	mov	r5, r0
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800da5c:	e88d 0030 	stmia.w	sp, {r4, r5}
 800da60:	f7ff ffa0 	bl	800d9a4 <udp_sendto_if_src>
 800da64:	e001      	b.n	800da6a <udp_sendto_if+0x24>
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800da66:	f06f 0005 	mvn.w	r0, #5
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800da6a:	b002      	add	sp, #8
 800da6c:	bd70      	pop	{r4, r5, r6, pc}

0800da6e <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800da6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da70:	460e      	mov	r6, r1
 800da72:	4615      	mov	r5, r2
 800da74:	461f      	mov	r7, r3
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800da76:	4604      	mov	r4, r0
 800da78:	b158      	cbz	r0, 800da92 <udp_sendto+0x24>
    }
  }
#endif /* LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) */

  /* find the outgoing network interface for this packet */
  netif = ip_route(PCB_ISIPV6(pcb), &pcb->local_ip, dst_ip_route);
 800da7a:	4610      	mov	r0, r2
 800da7c:	f7fc fe7e 	bl	800a77c <ip4_route>

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800da80:	b150      	cbz	r0, 800da98 <udp_sendto+0x2a>
    return ERR_RTE;
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800da82:	9000      	str	r0, [sp, #0]
 800da84:	463b      	mov	r3, r7
 800da86:	462a      	mov	r2, r5
 800da88:	4631      	mov	r1, r6
 800da8a:	4620      	mov	r0, r4
 800da8c:	f7ff ffdb 	bl	800da46 <udp_sendto_if>
 800da90:	e004      	b.n	800da9c <udp_sendto+0x2e>
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800da92:	f06f 0005 	mvn.w	r0, #5
 800da96:	e001      	b.n	800da9c <udp_sendto+0x2e>
  if (netif == NULL) {
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800da98:	f06f 0003 	mvn.w	r0, #3
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800da9c:	b003      	add	sp, #12
 800da9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800daa0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800daa0:	4602      	mov	r2, r0
  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800daa2:	8a83      	ldrh	r3, [r0, #20]
 800daa4:	3204      	adds	r2, #4
 800daa6:	f7ff bfe2 	b.w	800da6e <udp_sendto>
	...

0800daac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800daac:	b570      	push	{r4, r5, r6, lr}
 800daae:	460d      	mov	r5, r1
 800dab0:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
 800dab2:	4604      	mov	r4, r0
 800dab4:	b1d8      	cbz	r0, 800daee <udp_connect+0x42>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800dab6:	8a42      	ldrh	r2, [r0, #18]
 800dab8:	b112      	cbz	r2, 800dac0 <udp_connect+0x14>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800daba:	b13d      	cbz	r5, 800dacc <udp_connect+0x20>
 800dabc:	682d      	ldr	r5, [r5, #0]
 800dabe:	e005      	b.n	800dacc <udp_connect+0x20>
  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dac0:	4601      	mov	r1, r0
 800dac2:	f7ff ff0f 	bl	800d8e4 <udp_bind>
    if (err != ERR_OK) {
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d0f7      	beq.n	800daba <udp_connect+0xe>
 800daca:	bd70      	pop	{r4, r5, r6, pc}
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800dacc:	7c23      	ldrb	r3, [r4, #16]
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800dace:	6065      	str	r5, [r4, #4]
  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800dad0:	f043 0304 	orr.w	r3, r3, #4
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  pcb->remote_port = port;
 800dad4:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800dad6:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dad8:	4b07      	ldr	r3, [pc, #28]	; (800daf8 <udp_connect+0x4c>)
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	4610      	mov	r0, r2
 800dade:	b118      	cbz	r0, 800dae8 <udp_connect+0x3c>
    if (pcb == ipcb) {
 800dae0:	42a0      	cmp	r0, r4
 800dae2:	d007      	beq.n	800daf4 <udp_connect+0x48>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dae4:	68c0      	ldr	r0, [r0, #12]
 800dae6:	e7fa      	b.n	800dade <udp_connect+0x32>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800dae8:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800daea:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800daec:	bd70      	pop	{r4, r5, r6, pc}
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
    return ERR_VAL;
 800daee:	f06f 0005 	mvn.w	r0, #5
 800daf2:	bd70      	pop	{r4, r5, r6, pc}

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
    if (pcb == ipcb) {
      /* already on the list, just return */
      return ERR_OK;
 800daf4:	2000      	movs	r0, #0
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
 800daf8:	20049264 	.word	0x20049264

0800dafc <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800dafc:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800dafe:	61c2      	str	r2, [r0, #28]
 800db00:	4770      	bx	lr
	...

0800db04 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800db04:	4a0a      	ldr	r2, [pc, #40]	; (800db30 <udp_remove+0x2c>)
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800db06:	4601      	mov	r1, r0
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800db08:	6813      	ldr	r3, [r2, #0]
 800db0a:	4283      	cmp	r3, r0
 800db0c:	d105      	bne.n	800db1a <udp_remove+0x16>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800db0e:	68c3      	ldr	r3, [r0, #12]
 800db10:	6013      	str	r3, [r2, #0]
 800db12:	e009      	b.n	800db28 <udp_remove+0x24>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800db14:	68da      	ldr	r2, [r3, #12]
 800db16:	b91a      	cbnz	r2, 800db20 <udp_remove+0x1c>
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800db18:	4613      	mov	r3, r2
  if (udp_pcbs == pcb) {
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1fa      	bne.n	800db14 <udp_remove+0x10>
 800db1e:	e003      	b.n	800db28 <udp_remove+0x24>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800db20:	4291      	cmp	r1, r2
 800db22:	d1f9      	bne.n	800db18 <udp_remove+0x14>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800db24:	68ca      	ldr	r2, [r1, #12]
 800db26:	60da      	str	r2, [r3, #12]
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800db28:	2000      	movs	r0, #0
 800db2a:	f7fd b9e1 	b.w	800aef0 <memp_free>
 800db2e:	bf00      	nop
 800db30:	20049264 	.word	0x20049264

0800db34 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800db34:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800db36:	2000      	movs	r0, #0
 800db38:	f7fd f9ce 	bl	800aed8 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800db3c:	4604      	mov	r4, r0
 800db3e:	b128      	cbz	r0, 800db4c <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800db40:	2220      	movs	r2, #32
 800db42:	2100      	movs	r1, #0
 800db44:	f003 fe6a 	bl	801181c <memset>
    pcb->ttl = UDP_TTL;
 800db48:	23ff      	movs	r3, #255	; 0xff
 800db4a:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    pcb->mcast_ttl = UDP_TTL;
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800db4c:	4620      	mov	r0, r4
 800db4e:	bd10      	pop	{r4, pc}

0800db50 <udp_netif_ipv4_addr_changed>:
 *
 * @param old_addr IPv4 address of the netif before change
 * @param new_addr IPv4 address of the netif after change
 */
void udp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
 800db50:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip4_addr_isany(new_addr)) {
 800db52:	b169      	cbz	r1, 800db70 <udp_netif_ipv4_addr_changed+0x20>
 800db54:	680b      	ldr	r3, [r1, #0]
 800db56:	b15b      	cbz	r3, 800db70 <udp_netif_ipv4_addr_changed+0x20>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db58:	4b06      	ldr	r3, [pc, #24]	; (800db74 <udp_netif_ipv4_addr_changed+0x24>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	b143      	cbz	r3, 800db70 <udp_netif_ipv4_addr_changed+0x20>
      /* Is this an IPv4 pcb? */
      if (!IP_IS_V6_VAL(upcb->local_ip)) {
        /* PCB bound to current local interface address? */
        if (!ip4_addr_isany(ip_2_ip4(&upcb->local_ip)) &&
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	b122      	cbz	r2, 800db6c <udp_netif_ipv4_addr_changed+0x1c>
 800db62:	6804      	ldr	r4, [r0, #0]
 800db64:	42a2      	cmp	r2, r4
            ip4_addr_cmp(ip_2_ip4(&upcb->local_ip), old_addr)) {
          /* The PCB is bound to the old ipaddr and
            * is set to bound to the new one instead */
          ip_addr_copy_from_ip4(upcb->local_ip, *new_addr);
 800db66:	bf04      	itt	eq
 800db68:	680a      	ldreq	r2, [r1, #0]
 800db6a:	601a      	streq	r2, [r3, #0]
void udp_netif_ipv4_addr_changed(const ip4_addr_t* old_addr, const ip4_addr_t* new_addr)
{
  struct udp_pcb* upcb;

  if (!ip4_addr_isany(new_addr)) {
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	e7f5      	b.n	800db5c <udp_netif_ipv4_addr_changed+0xc>
 800db70:	bd10      	pop	{r4, pc}
 800db72:	bf00      	nop
 800db74:	20049264 	.word	0x20049264

0800db78 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800db78:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800db7a:	2618      	movs	r6, #24
 800db7c:	4d09      	ldr	r5, [pc, #36]	; (800dba4 <etharp_free_entry+0x2c>)
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800db7e:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800db80:	4346      	muls	r6, r0
 800db82:	59a8      	ldr	r0, [r5, r6]
 800db84:	b118      	cbz	r0, 800db8e <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800db86:	f7fd fa6d 	bl	800b064 <pbuf_free>
    arp_table[i].q = NULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800db8e:	2018      	movs	r0, #24
 800db90:	2300      	movs	r3, #0
 800db92:	fb00 5004 	mla	r0, r0, r4, r5
 800db96:	7503      	strb	r3, [r0, #20]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 800db98:	8243      	strh	r3, [r0, #18]
  arp_table[i].netif = NULL;
 800db9a:	6083      	str	r3, [r0, #8]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 800db9c:	6043      	str	r3, [r0, #4]
  arp_table[i].ethaddr = ethzero;
 800db9e:	60c3      	str	r3, [r0, #12]
 800dba0:	8203      	strh	r3, [r0, #16]
 800dba2:	bd70      	pop	{r4, r5, r6, pc}
 800dba4:	20042e4c 	.word	0x20042e4c

0800dba8 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, const struct eth_addr *dst)
{
 800dba8:	b430      	push	{r4, r5}
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
 800dbaa:	684c      	ldr	r4, [r1, #4]
  if (!LWIP_HOOK_VLAN_SET(netif, ethhdr, vlanhdr)) {
    /* packet shall not contain VLAN header, so hide it and set correct ethertype */
    pbuf_header(p, -SIZEOF_VLAN_HDR);
    ethhdr = (struct eth_hdr *)p->payload;
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    ethhdr->type = PP_HTONS(ETHTYPE_IP);
 800dbac:	2508      	movs	r5, #8
 800dbae:	7325      	strb	r5, [r4, #12]
 800dbb0:	2500      	movs	r5, #0
 800dbb2:	7365      	strb	r5, [r4, #13]
#if ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET)
  }
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800dbb4:	681d      	ldr	r5, [r3, #0]
 800dbb6:	6025      	str	r5, [r4, #0]
 800dbb8:	889b      	ldrh	r3, [r3, #4]
 800dbba:	80a3      	strh	r3, [r4, #4]
  ETHADDR16_COPY(&ethhdr->src, src);
 800dbbc:	6813      	ldr	r3, [r2, #0]
 800dbbe:	f8c4 3006 	str.w	r3, [r4, #6]
 800dbc2:	8893      	ldrh	r3, [r2, #4]
 800dbc4:	8163      	strh	r3, [r4, #10]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 800dbc6:	6983      	ldr	r3, [r0, #24]
}
 800dbc8:	bc30      	pop	{r4, r5}
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  ETHADDR32_COPY(&ethhdr->dest, dst);
  ETHADDR16_COPY(&ethhdr->src, src);
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
 800dbca:	4718      	bx	r3

0800dbcc <etharp_find_entry.isra.0>:
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800dbcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd0:	2300      	movs	r3, #0
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800dbd2:	250a      	movs	r5, #10
 *
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	468b      	mov	fp, r1
 800dbd8:	4a31      	ldr	r2, [pc, #196]	; (800dca0 <etharp_find_entry.isra.0+0xd4>)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800dbda:	4628      	mov	r0, r5
 800dbdc:	462c      	mov	r4, r5
  s8_t empty = ARP_TABLE_SIZE;
  u8_t i = 0;
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800dbde:	4698      	mov	r8, r3
 800dbe0:	469c      	mov	ip, r3
 800dbe2:	469e      	mov	lr, r3
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s8_t empty = ARP_TABLE_SIZE;
 800dbe4:	462e      	mov	r6, r5
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dbe6:	2e0a      	cmp	r6, #10
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
 800dbe8:	f892 9000 	ldrb.w	r9, [r2]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800dbec:	d104      	bne.n	800dbf8 <etharp_find_entry.isra.0+0x2c>
 800dbee:	f1b9 0f00 	cmp.w	r9, #0
 800dbf2:	d104      	bne.n	800dbfe <etharp_find_entry.isra.0+0x32>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800dbf4:	b25e      	sxtb	r6, r3
 800dbf6:	e018      	b.n	800dc2a <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dbf8:	f1b9 0f00 	cmp.w	r9, #0
 800dbfc:	d015      	beq.n	800dc2a <etharp_find_entry.isra.0+0x5e>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dbfe:	b147      	cbz	r7, 800dc12 <etharp_find_entry.isra.0+0x46>
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	468a      	mov	sl, r1
 800dc04:	f852 1c10 	ldr.w	r1, [r2, #-16]
 800dc08:	458a      	cmp	sl, r1
 800dc0a:	d102      	bne.n	800dc12 <etharp_find_entry.isra.0+0x46>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dc0c:	b258      	sxtb	r0, r3
 800dc0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dc12:	f1b9 0f01 	cmp.w	r9, #1
 800dc16:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800dc1a:	d13b      	bne.n	800dc94 <etharp_find_entry.isra.0+0xc8>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dc1c:	f852 1c14 	ldr.w	r1, [r2, #-20]
 800dc20:	b399      	cbz	r1, 800dc8a <etharp_find_entry.isra.0+0xbe>
          if (arp_table[i].ctime >= age_queue) {
 800dc22:	45f1      	cmp	r9, lr
 800dc24:	d301      	bcc.n	800dc2a <etharp_find_entry.isra.0+0x5e>
            old_queue = i;
 800dc26:	b25d      	sxtb	r5, r3
 800dc28:	46ce      	mov	lr, r9
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	3218      	adds	r2, #24
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dc2e:	2b0a      	cmp	r3, #10
 800dc30:	d1d9      	bne.n	800dbe6 <etharp_find_entry.isra.0+0x1a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dc32:	f01b 0f02 	tst.w	fp, #2
 800dc36:	d124      	bne.n	800dc82 <etharp_find_entry.isra.0+0xb6>
 800dc38:	2e0a      	cmp	r6, #10
 800dc3a:	d103      	bne.n	800dc44 <etharp_find_entry.isra.0+0x78>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dc3c:	f01b 0f01 	tst.w	fp, #1
 800dc40:	d102      	bne.n	800dc48 <etharp_find_entry.isra.0+0x7c>
 800dc42:	e01e      	b.n	800dc82 <etharp_find_entry.isra.0+0xb6>
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
 800dc44:	b2f4      	uxtb	r4, r6
 800dc46:	e00d      	b.n	800dc64 <etharp_find_entry.isra.0+0x98>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800dc48:	2c0a      	cmp	r4, #10
 800dc4a:	d001      	beq.n	800dc50 <etharp_find_entry.isra.0+0x84>
      /* recycle oldest stable*/
      i = old_stable;
 800dc4c:	b2e4      	uxtb	r4, r4
 800dc4e:	e006      	b.n	800dc5e <etharp_find_entry.isra.0+0x92>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dc50:	280a      	cmp	r0, #10
 800dc52:	d001      	beq.n	800dc58 <etharp_find_entry.isra.0+0x8c>
      /* recycle oldest pending */
      i = old_pending;
 800dc54:	b2c4      	uxtb	r4, r0
 800dc56:	e002      	b.n	800dc5e <etharp_find_entry.isra.0+0x92>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dc58:	2d0a      	cmp	r5, #10
 800dc5a:	d012      	beq.n	800dc82 <etharp_find_entry.isra.0+0xb6>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dc5c:	b2ec      	uxtb	r4, r5
      return (s8_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f7ff ff8a 	bl	800db78 <etharp_free_entry>
 800dc64:	490f      	ldr	r1, [pc, #60]	; (800dca4 <etharp_find_entry.isra.0+0xd8>)
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800dc66:	b127      	cbz	r7, 800dc72 <etharp_find_entry.isra.0+0xa6>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800dc68:	2218      	movs	r2, #24
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	fb02 1204 	mla	r2, r2, r4, r1
 800dc70:	6053      	str	r3, [r2, #4]
  }
  arp_table[i].ctime = 0;
 800dc72:	2318      	movs	r3, #24
 800dc74:	2200      	movs	r2, #0
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800dc76:	b260      	sxtb	r0, r4
  /* IP address given? */
  if (ipaddr != NULL) {
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  }
  arp_table[i].ctime = 0;
 800dc78:	fb03 1304 	mla	r3, r3, r4, r1
 800dc7c:	825a      	strh	r2, [r3, #18]
 800dc7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800dc82:	f04f 30ff 	mov.w	r0, #4294967295
 800dc86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            age_queue = arp_table[i].ctime;
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dc8a:	45e1      	cmp	r9, ip
 800dc8c:	d3cd      	bcc.n	800dc2a <etharp_find_entry.isra.0+0x5e>
            old_pending = i;
 800dc8e:	b258      	sxtb	r0, r3
 800dc90:	46cc      	mov	ip, r9
 800dc92:	e7ca      	b.n	800dc2a <etharp_find_entry.isra.0+0x5e>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dc94:	45c1      	cmp	r9, r8
            old_stable = i;
 800dc96:	bf24      	itt	cs
 800dc98:	b25c      	sxtbcs	r4, r3
 800dc9a:	46c8      	movcs	r8, r9
 800dc9c:	e7c5      	b.n	800dc2a <etharp_find_entry.isra.0+0x5e>
 800dc9e:	bf00      	nop
 800dca0:	20042e60 	.word	0x20042e60
 800dca4:	20042e4c 	.word	0x20042e4c

0800dca8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800dca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcac:	4606      	mov	r6, r0
 800dcae:	4617      	mov	r7, r2
 800dcb0:	4698      	mov	r8, r3
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dcb2:	460c      	mov	r4, r1
 800dcb4:	b919      	cbnz	r1, 800dcbe <etharp_update_arp_entry+0x16>
      ip4_addr_isbroadcast(ipaddr, netif) ||
      ip4_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dcb6:	f06f 000e 	mvn.w	r0, #14
 800dcba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dcbe:	6808      	ldr	r0, [r1, #0]
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d0f8      	beq.n	800dcb6 <etharp_update_arp_entry+0xe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	f7fc fe9e 	bl	800aa06 <ip4_addr_isbroadcast_u32>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800dcca:	4605      	mov	r5, r0
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d1f2      	bne.n	800dcb6 <etharp_update_arp_entry+0xe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800dcd0:	6822      	ldr	r2, [r4, #0]
 800dcd2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800dcd6:	2ae0      	cmp	r2, #224	; 0xe0
 800dcd8:	d0ed      	beq.n	800dcb6 <etharp_update_arp_entry+0xe>
      ip4_addr_ismulticast(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800dcda:	4641      	mov	r1, r8
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f7ff ff75 	bl	800dbcc <etharp_find_entry.isra.0>
  /* bail out if no entry could be found */
  if (i < 0) {
 800dce2:	2800      	cmp	r0, #0
 800dce4:	db1f      	blt.n	800dd26 <etharp_update_arp_entry+0x7e>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dce6:	2318      	movs	r3, #24
 800dce8:	4910      	ldr	r1, [pc, #64]	; (800dd2c <etharp_update_arp_entry+0x84>)
 800dcea:	4343      	muls	r3, r0
 800dcec:	2002      	movs	r0, #2
 800dcee:	18ca      	adds	r2, r1, r3
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800dcf0:	f103 0408 	add.w	r4, r3, #8
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dcf4:	7510      	strb	r0, [r2, #20]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800dcf6:	440c      	add	r4, r1
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dcf8:	6096      	str	r6, [r2, #8]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800dcfa:	6838      	ldr	r0, [r7, #0]
 800dcfc:	6060      	str	r0, [r4, #4]
 800dcfe:	88b8      	ldrh	r0, [r7, #4]
 800dd00:	8120      	strh	r0, [r4, #8]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dd02:	58cc      	ldr	r4, [r1, r3]

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dd04:	8255      	strh	r5, [r2, #18]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800dd06:	b16c      	cbz	r4, 800dd24 <etharp_update_arp_entry+0x7c>
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
 800dd08:	50cd      	str	r5, [r1, r3]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 800dd0a:	f106 022d 	add.w	r2, r6, #45	; 0x2d
 800dd0e:	463b      	mov	r3, r7
 800dd10:	4621      	mov	r1, r4
 800dd12:	4630      	mov	r0, r6
 800dd14:	f7ff ff48 	bl	800dba8 <etharp_send_ip>
    /* free the queued IP packet */
    pbuf_free(p);
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f7fd f9a3 	bl	800b064 <pbuf_free>
  }
  return ERR_OK;
 800dd1e:	4628      	mov	r0, r5
 800dd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd24:	4620      	mov	r0, r4
}
 800dd26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd2a:	bf00      	nop
 800dd2c:	20042e4c 	.word	0x20042e4c

0800dd30 <etharp_raw.constprop.2>:
 */
#if !LWIP_AUTOIP
static
#endif /* LWIP_AUTOIP */
err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 800dd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd34:	4606      	mov	r6, r0
 800dd36:	460f      	mov	r7, r1
 800dd38:	4690      	mov	r8, r2
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW_TX, SIZEOF_ETHARP_PACKET_TX, PBUF_RAM);
 800dd3a:	212a      	movs	r1, #42	; 0x2a
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	2003      	movs	r0, #3
 */
#if !LWIP_AUTOIP
static
#endif /* LWIP_AUTOIP */
err_t
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
 800dd40:	4699      	mov	r9, r3
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW_TX, SIZEOF_ETHARP_PACKET_TX, PBUF_RAM);
 800dd42:	f7fd f9af 	bl	800b0a4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800dd46:	4605      	mov	r5, r0
 800dd48:	2800      	cmp	r0, #0
 800dd4a:	d03a      	beq.n	800ddc2 <etharp_raw.constprop.2+0x92>
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET_TX));

  ethhdr = (struct eth_hdr *)p->payload;
 800dd4c:	6844      	ldr	r4, [r0, #4]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 800dd4e:	2001      	movs	r0, #1
 800dd50:	f7fb fd48 	bl	80097e4 <lwip_htons>

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
  hdr->protolen = sizeof(ip4_addr_t);
 800dd54:	2104      	movs	r1, #4
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
 800dd56:	82a0      	strh	r0, [r4, #20]
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);

  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800dd58:	4630      	mov	r0, r6
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip4_addr_islinklocal(ipsrc_addr) ? (const u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800dd5a:	f8d9 3000 	ldr.w	r3, [r9]
 800dd5e:	f8c4 3016 	str.w	r3, [r4, #22]
 800dd62:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800dd66:	8363      	strh	r3, [r4, #26]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800dd68:	4b18      	ldr	r3, [pc, #96]	; (800ddcc <etharp_raw.constprop.2+0x9c>)
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	889b      	ldrh	r3, [r3, #4]
 800dd6e:	6222      	str	r2, [r4, #32]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800dd70:	2201      	movs	r2, #1
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip4_addr_islinklocal(ipsrc_addr) ? (const u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800dd72:	84a3      	strh	r3, [r4, #36]	; 0x24
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800dd74:	9b08      	ldr	r3, [sp, #32]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	61e3      	str	r3, [r4, #28]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800dd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd7c:	681b      	ldr	r3, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800dd7e:	73e2      	strb	r2, [r4, #15]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dd80:	2208      	movs	r2, #8
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800dd82:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800dd86:	2300      	movs	r3, #0
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dd88:	7422      	strb	r2, [r4, #16]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800dd8a:	73a3      	strb	r3, [r4, #14]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800dd8c:	7463      	strb	r3, [r4, #17]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 800dd8e:	2306      	movs	r3, #6
  hdr->protolen = sizeof(ip4_addr_t);
 800dd90:	74e1      	strb	r1, [r4, #19]
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);

  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800dd92:	4629      	mov	r1, r5
  if (!LWIP_HOOK_VLAN_SET(netif, ethhdr, vlanhdr)) {
    /* packet shall not contain VLAN header, so hide it and set correct ethertype */
    pbuf_header(p, -SIZEOF_VLAN_HDR);
    ethhdr = (struct eth_hdr *)p->payload;
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 800dd94:	7322      	strb	r2, [r4, #12]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
 800dd96:	74a3      	strb	r3, [r4, #18]
  if (!LWIP_HOOK_VLAN_SET(netif, ethhdr, vlanhdr)) {
    /* packet shall not contain VLAN header, so hide it and set correct ethertype */
    pbuf_header(p, -SIZEOF_VLAN_HDR);
    ethhdr = (struct eth_hdr *)p->payload;
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    ethhdr->type = PP_HTONS(ETHTYPE_ARP);
 800dd98:	7363      	strb	r3, [r4, #13]

  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
 800dd9a:	f8d8 3000 	ldr.w	r3, [r8]
 800dd9e:	6023      	str	r3, [r4, #0]
 800dda0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800dda4:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	f8c4 3006 	str.w	r3, [r4, #6]
 800ddac:	88bb      	ldrh	r3, [r7, #4]
 800ddae:	8163      	strh	r3, [r4, #10]

  /* send ARP query */
  result = netif->linkoutput(netif, p);
 800ddb0:	69b3      	ldr	r3, [r6, #24]
 800ddb2:	4798      	blx	r3
 800ddb4:	4604      	mov	r4, r0
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ddb6:	4628      	mov	r0, r5
 800ddb8:	f7fd f954 	bl	800b064 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800ddc2:	f04f 30ff 	mov.w	r0, #4294967295
  pbuf_free(p);
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
}
 800ddc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddca:	bf00      	nop
 800ddcc:	0802cb32 	.word	0x0802cb32

0800ddd0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ddd0:	b507      	push	{r0, r1, r2, lr}
 800ddd2:	4602      	mov	r2, r0
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ddd4:	f100 032d 	add.w	r3, r0, #45	; 0x2d
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ddd8:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ddda:	3204      	adds	r2, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800dddc:	4619      	mov	r1, r3
 800ddde:	9200      	str	r2, [sp, #0]
 800dde0:	4a02      	ldr	r2, [pc, #8]	; (800ddec <etharp_request+0x1c>)
 800dde2:	f7ff ffa5 	bl	800dd30 <etharp_raw.constprop.2>
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800dde6:	b003      	add	sp, #12
 800dde8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddec:	0802cb2c 	.word	0x0802cb2c

0800ddf0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ddf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf2:	4c13      	ldr	r4, [pc, #76]	; (800de40 <etharp_tmr+0x50>)
 800ddf4:	2500      	movs	r5, #0
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ddf6:	2602      	movs	r6, #2
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ddf8:	2704      	movs	r7, #4
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
 800ddfa:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800ddfc:	b1b2      	cbz	r2, 800de2c <etharp_tmr+0x3c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800ddfe:	89e3      	ldrh	r3, [r4, #14]
 800de00:	3301      	adds	r3, #1
 800de02:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800de04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    if (state != ETHARP_STATE_EMPTY
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800de08:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800de0a:	d203      	bcs.n	800de14 <etharp_tmr+0x24>
 800de0c:	2a01      	cmp	r2, #1
 800de0e:	d105      	bne.n	800de1c <etharp_tmr+0x2c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800de10:	2b04      	cmp	r3, #4
 800de12:	d907      	bls.n	800de24 <etharp_tmr+0x34>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800de14:	4628      	mov	r0, r5
 800de16:	f7ff feaf 	bl	800db78 <etharp_free_entry>
 800de1a:	e007      	b.n	800de2c <etharp_tmr+0x3c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800de1c:	2a03      	cmp	r2, #3
 800de1e:	d10a      	bne.n	800de36 <etharp_tmr+0x46>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800de20:	7427      	strb	r7, [r4, #16]
 800de22:	e003      	b.n	800de2c <etharp_tmr+0x3c>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800de24:	4621      	mov	r1, r4
 800de26:	6860      	ldr	r0, [r4, #4]
 800de28:	f7ff ffd2 	bl	800ddd0 <etharp_request>
 800de2c:	3501      	adds	r5, #1
 800de2e:	3418      	adds	r4, #24
{
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800de30:	2d0a      	cmp	r5, #10
 800de32:	d1e2      	bne.n	800ddfa <etharp_tmr+0xa>
 800de34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800de36:	2a04      	cmp	r2, #4
 800de38:	d1f8      	bne.n	800de2c <etharp_tmr+0x3c>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800de3a:	7426      	strb	r6, [r4, #16]
 800de3c:	e7f6      	b.n	800de2c <etharp_tmr+0x3c>
 800de3e:	bf00      	nop
 800de40:	20042e50 	.word	0x20042e50

0800de44 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800de44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de48:	4616      	mov	r6, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de4a:	2218      	movs	r2, #24
 800de4c:	4d16      	ldr	r5, [pc, #88]	; (800dea8 <etharp_output_to_arp_index+0x64>)
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800de4e:	4607      	mov	r7, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de50:	4372      	muls	r2, r6
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800de52:	4688      	mov	r8, r1
 800de54:	f100 092d 	add.w	r9, r0, #45	; 0x2d
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800de58:	18ac      	adds	r4, r5, r2
 800de5a:	7d23      	ldrb	r3, [r4, #20]
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d117      	bne.n	800de90 <etharp_output_to_arp_index+0x4c>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800de60:	8a63      	ldrh	r3, [r4, #18]
 800de62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800de66:	d903      	bls.n	800de70 <etharp_output_to_arp_index+0x2c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800de68:	1d21      	adds	r1, r4, #4
 800de6a:	f7ff ffb1 	bl	800ddd0 <etharp_request>
 800de6e:	e00c      	b.n	800de8a <etharp_output_to_arp_index+0x46>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800de70:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800de74:	d30c      	bcc.n	800de90 <etharp_output_to_arp_index+0x4c>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800de76:	1d23      	adds	r3, r4, #4
 800de78:	442a      	add	r2, r5
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800de7a:	4649      	mov	r1, r9
 800de7c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800de7e:	1d03      	adds	r3, r0, #4
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800de80:	320c      	adds	r2, #12
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	464b      	mov	r3, r9
 800de86:	f7ff ff53 	bl	800dd30 <etharp_raw.constprop.2>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800de8a:	b908      	cbnz	r0, 800de90 <etharp_output_to_arp_index+0x4c>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800de8c:	2303      	movs	r3, #3
 800de8e:	7523      	strb	r3, [r4, #20]
      }
    }
  }

  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
    &arp_table[arp_idx].ethaddr);
 800de90:	2318      	movs	r3, #24
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    }
  }

  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800de92:	464a      	mov	r2, r9
 800de94:	4641      	mov	r1, r8
 800de96:	4638      	mov	r0, r7
    &arp_table[arp_idx].ethaddr);
 800de98:	fb03 5306 	mla	r3, r3, r6, r5
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    }
  }

  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800de9c:	330c      	adds	r3, #12
    &arp_table[arp_idx].ethaddr);
}
 800de9e:	b003      	add	sp, #12
 800dea0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
      }
    }
  }

  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
 800dea4:	f7ff be80 	b.w	800dba8 <etharp_send_ip>
 800dea8:	20042e4c 	.word	0x20042e4c

0800deac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800deac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb0:	4688      	mov	r8, r1
 800deb2:	4607      	mov	r7, r0
  err_t result = ERR_MEM;
  int is_new_entry = 0;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800deb4:	4601      	mov	r1, r0
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800deb6:	4614      	mov	r4, r2
  err_t result = ERR_MEM;
  int is_new_entry = 0;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800deb8:	f8d8 0000 	ldr.w	r0, [r8]
 800debc:	f7fc fda3 	bl	800aa06 <ip4_addr_isbroadcast_u32>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d137      	bne.n	800df34 <etharp_query+0x88>
      ip4_addr_ismulticast(ipaddr) ||
 800dec4:	f8d8 3000 	ldr.w	r3, [r8]
  err_t result = ERR_MEM;
  int is_new_entry = 0;
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800dec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800decc:	2ae0      	cmp	r2, #224	; 0xe0
 800dece:	d031      	beq.n	800df34 <etharp_query+0x88>
      ip4_addr_ismulticast(ipaddr) ||
      ip4_addr_isany(ipaddr)) {
 800ded0:	b383      	cbz	r3, 800df34 <etharp_query+0x88>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ded2:	2101      	movs	r1, #1
 800ded4:	4640      	mov	r0, r8
 800ded6:	f7ff fe79 	bl	800dbcc <etharp_find_entry.isra.0>

  /* could not find or create entry? */
  if (i < 0) {
 800deda:	1e05      	subs	r5, r0, #0
 800dedc:	db2e      	blt.n	800df3c <etharp_query+0x90>
    }
    return (err_t)i;
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800dede:	4e30      	ldr	r6, [pc, #192]	; (800dfa0 <etharp_query+0xf4>)
 800dee0:	2318      	movs	r3, #24
 800dee2:	fb03 6305 	mla	r3, r3, r5, r6
 800dee6:	7d1a      	ldrb	r2, [r3, #20]
 800dee8:	bb72      	cbnz	r2, 800df48 <etharp_query+0x9c>
    is_new_entry = 1;
    arp_table[i].state = ETHARP_STATE_PENDING;
 800deea:	2201      	movs	r2, #1
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800deec:	609f      	str	r7, [r3, #8]
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
    is_new_entry = 1;
    arp_table[i].state = ETHARP_STATE_PENDING;
 800deee:	751a      	strb	r2, [r3, #20]
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800def0:	4641      	mov	r1, r8
 800def2:	4638      	mov	r0, r7
 800def4:	f7ff ff6c 	bl	800ddd0 <etharp_request>
 800def8:	4602      	mov	r2, r0
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800defa:	2c00      	cmp	r4, #0
 800defc:	d04e      	beq.n	800df9c <etharp_query+0xf0>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800defe:	2318      	movs	r3, #24
 800df00:	436b      	muls	r3, r5
 800df02:	18f1      	adds	r1, r6, r3
 800df04:	7d09      	ldrb	r1, [r1, #20]
 800df06:	2901      	cmp	r1, #1
 800df08:	d90c      	bls.n	800df24 <etharp_query+0x78>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800df0a:	4a26      	ldr	r2, [pc, #152]	; (800dfa4 <etharp_query+0xf8>)
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800df0c:	4621      	mov	r1, r4
 800df0e:	4638      	mov	r0, r7
  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800df10:	7015      	strb	r5, [r2, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800df12:	4a23      	ldr	r2, [pc, #140]	; (800dfa0 <etharp_query+0xf4>)
 800df14:	4413      	add	r3, r2
 800df16:	f107 022d 	add.w	r2, r7, #45	; 0x2d
 800df1a:	330c      	adds	r3, #12
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
    }
  }
  return result;
}
 800df1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 800df20:	f7ff be42 	b.w	800dba8 <etharp_send_ip>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800df24:	d10d      	bne.n	800df42 <etharp_query+0x96>
 800df26:	4623      	mov	r3, r4
    int copy_needed = 0;
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
    while (p) {
 800df28:	b19b      	cbz	r3, 800df52 <etharp_query+0xa6>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if (p->type != PBUF_ROM) {
 800df2a:	7b1a      	ldrb	r2, [r3, #12]
 800df2c:	2a01      	cmp	r2, #1
 800df2e:	d122      	bne.n	800df76 <etharp_query+0xca>
        copy_needed = 1;
        break;
      }
      p = p->next;
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	e7f9      	b.n	800df28 <etharp_query+0x7c>
  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
      ip4_addr_ismulticast(ipaddr) ||
      ip4_addr_isany(ipaddr)) {
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800df34:	f06f 000e 	mvn.w	r0, #14
 800df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df3c:	4628      	mov	r0, r5
 800df3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df42:	4610      	mov	r0, r2
 800df44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800df48:	2c00      	cmp	r4, #0
 800df4a:	d0d1      	beq.n	800def0 <etharp_query+0x44>
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  err_t result = ERR_MEM;
 800df4c:	f04f 32ff 	mov.w	r2, #4294967295
 800df50:	e7d5      	b.n	800defe <etharp_query+0x52>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
      pbuf_ref(p);
 800df52:	4620      	mov	r0, r4
 800df54:	f7fd f95a 	bl	800b20c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800df58:	b1f4      	cbz	r4, 800df98 <etharp_query+0xec>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800df5a:	2318      	movs	r3, #24
 800df5c:	fb03 f205 	mul.w	r2, r3, r5
 800df60:	461f      	mov	r7, r3
 800df62:	58b0      	ldr	r0, [r6, r2]
 800df64:	b108      	cbz	r0, 800df6a <etharp_query+0xbe>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800df66:	f7fd f87d 	bl	800b064 <pbuf_free>
      }
      arp_table[i].q = p;
 800df6a:	fb07 f005 	mul.w	r0, r7, r5
 800df6e:	5034      	str	r4, [r6, r0]
      result = ERR_OK;
 800df70:	2000      	movs	r0, #0
 800df72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      }
      p = p->next;
    }
    if (copy_needed) {
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW_TX, p->tot_len, PBUF_RAM);
 800df76:	2200      	movs	r2, #0
 800df78:	8919      	ldrh	r1, [r3, #8]
 800df7a:	2003      	movs	r0, #3
 800df7c:	f7fd f892 	bl	800b0a4 <pbuf_alloc>
      if (p != NULL) {
 800df80:	4607      	mov	r7, r0
 800df82:	b148      	cbz	r0, 800df98 <etharp_query+0xec>
        if (pbuf_copy(p, q) != ERR_OK) {
 800df84:	4621      	mov	r1, r4
 800df86:	f7fd f95c 	bl	800b242 <pbuf_copy>
 800df8a:	b118      	cbz	r0, 800df94 <etharp_query+0xe8>
          pbuf_free(p);
 800df8c:	4638      	mov	r0, r7
 800df8e:	f7fd f869 	bl	800b064 <pbuf_free>
 800df92:	e001      	b.n	800df98 <etharp_query+0xec>
 800df94:	463c      	mov	r4, r7
 800df96:	e7e0      	b.n	800df5a <etharp_query+0xae>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800df98:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }
  return result;
}
 800df9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa0:	20042e4c 	.word	0x20042e4c
 800dfa4:	20042e48 	.word	0x20042e48

0800dfa8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dfa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dfaa:	460e      	mov	r6, r1
 800dfac:	4604      	mov	r4, r0

  /* make room for Ethernet header - should not fail */
#if ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET)
  if (pbuf_header(q, sizeof(struct eth_hdr) + SIZEOF_VLAN_HDR) != 0) {
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 800dfae:	210e      	movs	r1, #14
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dfb0:	4615      	mov	r5, r2

  /* make room for Ethernet header - should not fail */
#if ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET)
  if (pbuf_header(q, sizeof(struct eth_hdr) + SIZEOF_VLAN_HDR) != 0) {
#else /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f7fd f848 	bl	800b048 <pbuf_header>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d15e      	bne.n	800e07a <etharp_output+0xd2>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	6828      	ldr	r0, [r5, #0]
 800dfc0:	f7fc fd21 	bl	800aa06 <ip4_addr_isbroadcast_u32>
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d150      	bne.n	800e06a <etharp_output+0xc2>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800dfce:	2ae0      	cmp	r2, #224	; 0xe0
 800dfd0:	d114      	bne.n	800dffc <etharp_output+0x54>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 800dfd2:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
 800dfd4:	f88d 0001 	strb.w	r0, [sp, #1]
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
 800dfd8:	f88d 3000 	strb.w	r3, [sp]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
 800dfdc:	235e      	movs	r3, #94	; 0x5e
 800dfde:	f88d 3002 	strb.w	r3, [sp, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dfe2:	786b      	ldrb	r3, [r5, #1]
 800dfe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe8:	f88d 3003 	strb.w	r3, [sp, #3]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dfec:	78ab      	ldrb	r3, [r5, #2]
 800dfee:	f88d 3004 	strb.w	r3, [sp, #4]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dff2:	78eb      	ldrb	r3, [r5, #3]
 800dff4:	f88d 3005 	strb.w	r3, [sp, #5]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dff8:	466b      	mov	r3, sp
 800dffa:	e037      	b.n	800e06c <etharp_output+0xc4>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dffc:	6862      	ldr	r2, [r4, #4]
 800dffe:	68a1      	ldr	r1, [r4, #8]
 800e000:	405a      	eors	r2, r3
 800e002:	420a      	tst	r2, r1
 800e004:	d009      	beq.n	800e01a <etharp_output+0x72>
 800e006:	b29b      	uxth	r3, r3
 800e008:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800e00c:	4293      	cmp	r3, r2
 800e00e:	d004      	beq.n	800e01a <etharp_output+0x72>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e010:	68e3      	ldr	r3, [r4, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d034      	beq.n	800e080 <etharp_output+0xd8>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e016:	f104 050c 	add.w	r5, r4, #12
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e01a:	4b1b      	ldr	r3, [pc, #108]	; (800e088 <etharp_output+0xe0>)
 800e01c:	2118      	movs	r1, #24
 800e01e:	481b      	ldr	r0, [pc, #108]	; (800e08c <etharp_output+0xe4>)
 800e020:	781a      	ldrb	r2, [r3, #0]
 800e022:	fb01 0002 	mla	r0, r1, r2, r0
 800e026:	7d01      	ldrb	r1, [r0, #20]
 800e028:	2901      	cmp	r1, #1
 800e02a:	4619      	mov	r1, r3
 800e02c:	d903      	bls.n	800e036 <etharp_output+0x8e>
 800e02e:	682f      	ldr	r7, [r5, #0]
 800e030:	6843      	ldr	r3, [r0, #4]
 800e032:	429f      	cmp	r7, r3
 800e034:	d00a      	beq.n	800e04c <etharp_output+0xa4>
 800e036:	4b15      	ldr	r3, [pc, #84]	; (800e08c <etharp_output+0xe4>)
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e038:	2200      	movs	r2, #0
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e03a:	7d18      	ldrb	r0, [r3, #20]
 800e03c:	2801      	cmp	r0, #1
 800e03e:	d90a      	bls.n	800e056 <etharp_output+0xae>
 800e040:	682f      	ldr	r7, [r5, #0]
 800e042:	6858      	ldr	r0, [r3, #4]
 800e044:	4287      	cmp	r7, r0
 800e046:	d106      	bne.n	800e056 <etharp_output+0xae>
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800e048:	b2d2      	uxtb	r2, r2
 800e04a:	700a      	strb	r2, [r1, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e04c:	4631      	mov	r1, r6
 800e04e:	4620      	mov	r0, r4
 800e050:	f7ff fef8 	bl	800de44 <etharp_output_to_arp_index>
 800e054:	e016      	b.n	800e084 <etharp_output+0xdc>
 800e056:	3201      	adds	r2, #1
 800e058:	3318      	adds	r3, #24
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e05a:	2a0a      	cmp	r2, #10
 800e05c:	d1ed      	bne.n	800e03a <etharp_output+0x92>
        return etharp_output_to_arp_index(netif, q, i);
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e05e:	4632      	mov	r2, r6
 800e060:	4629      	mov	r1, r5
 800e062:	4620      	mov	r0, r4
 800e064:	f7ff ff22 	bl	800deac <etharp_query>
 800e068:	e00c      	b.n	800e084 <etharp_output+0xdc>
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e06a:	4b09      	ldr	r3, [pc, #36]	; (800e090 <etharp_output+0xe8>)
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 800e06c:	f104 022d 	add.w	r2, r4, #45	; 0x2d
 800e070:	4631      	mov	r1, r6
 800e072:	4620      	mov	r0, r4
 800e074:	f7ff fd98 	bl	800dba8 <etharp_send_ip>
 800e078:	e004      	b.n	800e084 <etharp_output+0xdc>
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
 800e07a:	f06f 0001 	mvn.w	r0, #1
 800e07e:	e001      	b.n	800e084 <etharp_output+0xdc>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e080:	f06f 0003 	mvn.w	r0, #3

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
}
 800e084:	b003      	add	sp, #12
 800e086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e088:	20042e48 	.word	0x20042e48
 800e08c:	20042e4c 	.word	0x20042e4c
 800e090:	0802cb2c 	.word	0x0802cb2c

0800e094 <ethernet_input>:
 * @param p the received packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800e098:	8947      	ldrh	r7, [r0, #10]
 * @param p the received packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e09a:	4605      	mov	r5, r0
 800e09c:	460e      	mov	r6, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800e09e:	2f0e      	cmp	r7, #14
 800e0a0:	f240 80a2 	bls.w	800e1e8 <ethernet_input+0x154>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e0a4:	6844      	ldr	r4, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e0a6:	7823      	ldrb	r3, [r4, #0]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
 800e0a8:	f8b4 800c 	ldrh.w	r8, [r4, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e0ac:	07da      	lsls	r2, r3, #31
 800e0ae:	d514      	bpl.n	800e0da <ethernet_input+0x46>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d108      	bne.n	800e0c6 <ethernet_input+0x32>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
 800e0b4:	7863      	ldrb	r3, [r4, #1]
 800e0b6:	b983      	cbnz	r3, 800e0da <ethernet_input+0x46>
 800e0b8:	78a3      	ldrb	r3, [r4, #2]
 800e0ba:	2b5e      	cmp	r3, #94	; 0x5e
 800e0bc:	d10d      	bne.n	800e0da <ethernet_input+0x46>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e0be:	7b43      	ldrb	r3, [r0, #13]
 800e0c0:	f043 0310 	orr.w	r3, r3, #16
 800e0c4:	e008      	b.n	800e0d8 <ethernet_input+0x44>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e0c6:	2206      	movs	r2, #6
 800e0c8:	494b      	ldr	r1, [pc, #300]	; (800e1f8 <ethernet_input+0x164>)
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f003 fb8c 	bl	80117e8 <memcmp>
 800e0d0:	b918      	cbnz	r0, 800e0da <ethernet_input+0x46>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e0d2:	7b6b      	ldrb	r3, [r5, #13]
 800e0d4:	f043 0308 	orr.w	r3, r3, #8
 800e0d8:	736b      	strb	r3, [r5, #13]
    }
  }

  switch (type) {
 800e0da:	f1b8 0f08 	cmp.w	r8, #8
 800e0de:	d003      	beq.n	800e0e8 <ethernet_input+0x54>
 800e0e0:	f5b8 6fc1 	cmp.w	r8, #1544	; 0x608
 800e0e4:	d021      	beq.n	800e12a <ethernet_input+0x96>
 800e0e6:	e07f      	b.n	800e1e8 <ethernet_input+0x154>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e0e8:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 800e0ec:	0718      	lsls	r0, r3, #28
 800e0ee:	d57b      	bpl.n	800e1e8 <ethernet_input+0x154>
  if (ethhdr->type == PP_HTONS(ETHTYPE_VLAN)) {
    iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e0f0:	f8d4 201a 	ldr.w	r2, [r4, #26]

  /* source is not on the local network? */
  if (!ip4_addr_netcmp(&iphdr_src, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e0f4:	6873      	ldr	r3, [r6, #4]
  if (ethhdr->type == PP_HTONS(ETHTYPE_VLAN)) {
    iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e0f6:	9201      	str	r2, [sp, #4]

  /* source is not on the local network? */
  if (!ip4_addr_netcmp(&iphdr_src, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e0f8:	4053      	eors	r3, r2
 800e0fa:	68b2      	ldr	r2, [r6, #8]
 800e0fc:	4213      	tst	r3, r2
 800e0fe:	d105      	bne.n	800e10c <ethernet_input+0x78>

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
  /* update the source IP address in the cache, if present */
  /* @todo We could use ETHARP_FLAG_TRY_HARD if we think we are going to talk
   * back soon (for example, if the destination IP address is ours. */
  etharp_update_arp_entry(netif, &iphdr_src, &(ethhdr->src), ETHARP_FLAG_FIND_ONLY);
 800e100:	2302      	movs	r3, #2
 800e102:	1da2      	adds	r2, r4, #6
 800e104:	a901      	add	r1, sp, #4
 800e106:	4630      	mov	r0, r6
 800e108:	f7ff fdce 	bl	800dca8 <etharp_update_arp_entry>
#if ETHARP_TRUST_IP_MAC
      /* update ARP table */
      etharp_ip_input(netif, p);
#endif /* ETHARP_TRUST_IP_MAC */
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e10c:	896b      	ldrh	r3, [r5, #10]
 800e10e:	2b0d      	cmp	r3, #13
 800e110:	dd6a      	ble.n	800e1e8 <ethernet_input+0x154>
 800e112:	f06f 010d 	mvn.w	r1, #13
 800e116:	4628      	mov	r0, r5
 800e118:	f7fc ff96 	bl	800b048 <pbuf_header>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d163      	bne.n	800e1e8 <ethernet_input+0x154>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 800e120:	4631      	mov	r1, r6
 800e122:	4628      	mov	r0, r5
 800e124:	f7fc fb56 	bl	800a7d4 <ip4_input>
      }
      break;
 800e128:	e061      	b.n	800e1ee <ethernet_input+0x15a>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e12a:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
 800e12e:	0719      	lsls	r1, r3, #28
 800e130:	d55a      	bpl.n	800e1e8 <ethernet_input+0x154>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
 800e132:	2f29      	cmp	r7, #41	; 0x29
 800e134:	d958      	bls.n	800e1e8 <ethernet_input+0x154>
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800e136:	89e3      	ldrh	r3, [r4, #14]
 800e138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e13c:	d154      	bne.n	800e1e8 <ethernet_input+0x154>
 800e13e:	7ca3      	ldrb	r3, [r4, #18]
 800e140:	2b06      	cmp	r3, #6
 800e142:	d151      	bne.n	800e1e8 <ethernet_input+0x154>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
 800e144:	7ce3      	ldrb	r3, [r4, #19]
 800e146:	2b04      	cmp	r3, #4
 800e148:	d14e      	bne.n	800e1e8 <ethernet_input+0x154>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e14a:	8a23      	ldrh	r3, [r4, #16]
 800e14c:	2b08      	cmp	r3, #8
 800e14e:	d14b      	bne.n	800e1e8 <ethernet_input+0x154>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800e150:	46a1      	mov	r9, r4
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e152:	6877      	ldr	r7, [r6, #4]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800e154:	f859 0f1c 	ldr.w	r0, [r9, #28]!
 800e158:	9000      	str	r0, [sp, #0]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800e15a:	f8d4 0026 	ldr.w	r0, [r4, #38]	; 0x26
 800e15e:	9001      	str	r0, [sp, #4]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e160:	b11f      	cbz	r7, 800e16a <ethernet_input+0xd6>
    for_us = 0;
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e162:	9b01      	ldr	r3, [sp, #4]
 800e164:	1bda      	subs	r2, r3, r7
 800e166:	4257      	negs	r7, r2
 800e168:	4157      	adcs	r7, r2
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e16a:	2f00      	cmp	r7, #0
 800e16c:	f104 0816 	add.w	r8, r4, #22
 800e170:	4669      	mov	r1, sp
 800e172:	4630      	mov	r0, r6
 800e174:	bf14      	ite	ne
 800e176:	2301      	movne	r3, #1
 800e178:	2302      	moveq	r3, #2
 800e17a:	4642      	mov	r2, r8
 800e17c:	f7ff fd94 	bl	800dca8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e180:	8aa3      	ldrh	r3, [r4, #20]
 800e182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e186:	d007      	beq.n	800e198 <ethernet_input+0x104>
 800e188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e18c:	d12c      	bne.n	800e1e8 <ethernet_input+0x154>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
 800e18e:	4669      	mov	r1, sp
 800e190:	4630      	mov	r0, r6
 800e192:	f7fc f827 	bl	800a1e4 <dhcp_arp_reply>
 800e196:	e027      	b.n	800e1e8 <ethernet_input+0x154>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
 800e198:	b337      	cbz	r7, 800e1e8 <ethernet_input+0x154>

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 800e19a:	2002      	movs	r0, #2
    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
        goto free_and_return;
      }
      /* pass p to ARP module */
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 800e19c:	4637      	mov	r7, r6

      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for our IP address\n"));
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);
 800e19e:	f7fb fb21 	bl	80097e4 <lwip_htons>
 800e1a2:	82a0      	strh	r0, [r4, #20]

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 800e1a4:	f8d9 3000 	ldr.w	r3, [r9]

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 800e1a8:	4629      	mov	r1, r5
 800e1aa:	4630      	mov	r0, r6
      /* Re-use pbuf to send ARP reply.
         Since we are re-using an existing pbuf, we can't call etharp_raw since
         that would allocate a new pbuf. */
      hdr->opcode = htons(ARP_REPLY);

      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
 800e1ac:	f8c4 3026 	str.w	r3, [r4, #38]	; 0x26
      IPADDR2_COPY(&hdr->sipaddr, netif_ip4_addr(netif));
 800e1b0:	6873      	ldr	r3, [r6, #4]
 800e1b2:	61e3      	str	r3, [r4, #28]
       * 'sender IP address' MUST be sent using link-layer broadcast instead of
       * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
      ethdst_hwaddr = ip4_addr_islinklocal(netif_ip4_addr(netif)) ? (const u8_t*)(ethbroadcast.addr) : hdr->shwaddr.addr;
#endif /* LWIP_AUTOIP */

      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
 800e1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800e1b8:	6223      	str	r3, [r4, #32]
 800e1ba:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800e1be:	84a3      	strh	r3, [r4, #36]	; 0x24
#if LWIP_AUTOIP
      ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
 800e1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800e1c4:	6023      	str	r3, [r4, #0]
 800e1c6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 800e1ca:	80a3      	strh	r3, [r4, #4]
#endif /* LWIP_AUTOIP */
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
 800e1cc:	f857 3f2d 	ldr.w	r3, [r7, #45]!
 800e1d0:	f8c4 3016 	str.w	r3, [r4, #22]
 800e1d4:	88bb      	ldrh	r3, [r7, #4]
 800e1d6:	f8a8 3004 	strh.w	r3, [r8, #4]
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	f8c4 3006 	str.w	r3, [r4, #6]
 800e1e0:	88bb      	ldrh	r3, [r7, #4]
 800e1e2:	8163      	strh	r3, [r4, #10]

      /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
         are already correct, we tested that before */

      /* return ARP reply */
      netif->linkoutput(netif, p);
 800e1e4:	69b3      	ldr	r3, [r6, #24]
 800e1e6:	4798      	blx	r3
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	f7fc ff3b 	bl	800b064 <pbuf_free>
  return ERR_OK;
}
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	b003      	add	sp, #12
 800e1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1f6:	bf00      	nop
 800e1f8:	0802cb2c 	.word	0x0802cb2c

0800e1fc <sys_mbox_new>:


/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e1fc:	b510      	push	{r4, lr}
 800e1fe:	4604      	mov	r4, r0
	(void ) size;
	
	*mbox = xQueueCreate( archMESG_QUEUE_LENGTH, sizeof( void * ) );
 800e200:	2200      	movs	r2, #0
 800e202:	2104      	movs	r1, #4
 800e204:	2006      	movs	r0, #6
 800e206:	f7f9 f8c1 	bl	800738c <xQueueGenericCreate>
 800e20a:	6020      	str	r0, [r4, #0]
 800e20c:	fab0 f080 	clz	r0, r0
 800e210:	0940      	lsrs	r0, r0, #5
#endif /* SYS_STATS */
 if (*mbox == NULL)
  return ERR_MEM;
 
 return ERR_OK;
}
 800e212:	4240      	negs	r0, r0
 800e214:	bd10      	pop	{r4, pc}

0800e216 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800e216:	b510      	push	{r4, lr}
 800e218:	4604      	mov	r4, r0
	if( uxQueueMessagesWaiting( *mbox ) )
 800e21a:	6800      	ldr	r0, [r0, #0]
 800e21c:	f7f9 fb92 	bl	8007944 <uxQueueMessagesWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	vQueueDelete( *mbox );
 800e220:	6820      	ldr	r0, [r4, #0]

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800e222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	vQueueDelete( *mbox );
 800e226:	f7f9 bbb5 	b.w	8007994 <vQueueDelete>

0800e22a <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800e22a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e22c:	4605      	mov	r5, r0
 800e22e:	ac02      	add	r4, sp, #8
 800e230:	f844 1d04 	str.w	r1, [r4, #-4]!
	while ( xQueueSendToBack(*mbox, &data, portMAX_DELAY ) != pdTRUE ){}
 800e234:	2300      	movs	r3, #0
 800e236:	f04f 32ff 	mov.w	r2, #4294967295
 800e23a:	4621      	mov	r1, r4
 800e23c:	6828      	ldr	r0, [r5, #0]
 800e23e:	f7f9 f8db 	bl	80073f8 <xQueueGenericSend>
 800e242:	2801      	cmp	r0, #1
 800e244:	d1f6      	bne.n	800e234 <sys_mbox_post+0xa>
}
 800e246:	b003      	add	sp, #12
 800e248:	bd30      	pop	{r4, r5, pc}

0800e24a <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e24a:	b513      	push	{r0, r1, r4, lr}
err_t result;

   if ( xQueueSend( *mbox, &msg, 0 ) == pdPASS )
 800e24c:	2300      	movs	r3, #0


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e24e:	ac02      	add	r4, sp, #8
err_t result;

   if ( xQueueSend( *mbox, &msg, 0 ) == pdPASS )
 800e250:	6800      	ldr	r0, [r0, #0]


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e252:	f844 1d04 	str.w	r1, [r4, #-4]!
err_t result;

   if ( xQueueSend( *mbox, &msg, 0 ) == pdPASS )
 800e256:	461a      	mov	r2, r3
 800e258:	4621      	mov	r1, r4
 800e25a:	f7f9 f8cd 	bl	80073f8 <xQueueGenericSend>
#endif /* SYS_STATS */
			
   }

   return result;
}
 800e25e:	f110 30ff 	adds.w	r0, r0, #4294967295
 800e262:	bf18      	it	ne
 800e264:	f04f 30ff 	movne.w	r0, #4294967295
 800e268:	b002      	add	sp, #8
 800e26a:	bd10      	pop	{r4, pc}

0800e26c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e26c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e26e:	460d      	mov	r5, r1
 800e270:	4606      	mov	r6, r0
 800e272:	4617      	mov	r7, r2
void *dummyptr;
portTickType StartTime, EndTime, Elapsed;

	StartTime = xTaskGetTickCount();
 800e274:	f7f9 fd96 	bl	8007da4 <xTaskGetTickCount>
 800e278:	4604      	mov	r4, r0

	if ( msg == NULL )
 800e27a:	b905      	cbnz	r5, 800e27e <sys_arch_mbox_fetch+0x12>
	{
		msg = &dummyptr;
 800e27c:	ad01      	add	r5, sp, #4
	}
		
	if ( timeout != 0 )
 800e27e:	b167      	cbz	r7, 800e29a <sys_arch_mbox_fetch+0x2e>
	{
		if ( pdTRUE == xQueueReceive( *mbox, &(*msg), timeout / portTICK_RATE_MS ) )
 800e280:	2300      	movs	r3, #0
 800e282:	463a      	mov	r2, r7
 800e284:	4629      	mov	r1, r5
 800e286:	6830      	ldr	r0, [r6, #0]
 800e288:	f7f9 fa56 	bl	8007738 <xQueueGenericReceive>
 800e28c:	2801      	cmp	r0, #1
 800e28e:	d00d      	beq.n	800e2ac <sys_arch_mbox_fetch+0x40>
			
			return ( Elapsed );
		}
		else // timed out blocking for message
		{
			*msg = NULL;
 800e290:	2300      	movs	r3, #0
			
			return SYS_ARCH_TIMEOUT;
 800e292:	f04f 30ff 	mov.w	r0, #4294967295
			
			return ( Elapsed );
		}
		else // timed out blocking for message
		{
			*msg = NULL;
 800e296:	602b      	str	r3, [r5, #0]
			
			return SYS_ARCH_TIMEOUT;
 800e298:	e00b      	b.n	800e2b2 <sys_arch_mbox_fetch+0x46>
		}
	}
	else // block forever for a message.
	{
		while( pdTRUE != xQueueReceive( *mbox, &(*msg), portMAX_DELAY ) ){} // time is arbitrary
 800e29a:	2300      	movs	r3, #0
 800e29c:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	6830      	ldr	r0, [r6, #0]
 800e2a4:	f7f9 fa48 	bl	8007738 <xQueueGenericReceive>
 800e2a8:	2801      	cmp	r0, #1
 800e2aa:	d1f6      	bne.n	800e29a <sys_arch_mbox_fetch+0x2e>
		EndTime = xTaskGetTickCount();
 800e2ac:	f7f9 fd7a 	bl	8007da4 <xTaskGetTickCount>
		Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;
 800e2b0:	1b00      	subs	r0, r0, r4
		
		return ( Elapsed ); // return time blocked TODO test	
	}
}
 800e2b2:	b003      	add	sp, #12
 800e2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e2b6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800e2b6:	b507      	push	{r0, r1, r2, lr}
void *dummyptr;

	if ( msg == NULL )
 800e2b8:	b901      	cbnz	r1, 800e2bc <sys_arch_mbox_tryfetch+0x6>
	{
		msg = &dummyptr;
 800e2ba:	a901      	add	r1, sp, #4
	}

   if ( pdTRUE == xQueueReceive( *mbox, &(*msg), 0 ) )
 800e2bc:	2300      	movs	r3, #0
 800e2be:	6800      	ldr	r0, [r0, #0]
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	f7f9 fa39 	bl	8007738 <xQueueGenericReceive>
   }
   else
   {
      return SYS_MBOX_EMPTY;
   }
}
 800e2c6:	f110 30ff 	adds.w	r0, r0, #4294967295
 800e2ca:	bf18      	it	ne
 800e2cc:	f04f 30ff 	movne.w	r0, #4294967295
 800e2d0:	b003      	add	sp, #12
 800e2d2:	f85d fb04 	ldr.w	pc, [sp], #4

0800e2d6 <sys_mbox_valid>:
 800e2d6:	6800      	ldr	r0, [r0, #0]
 800e2d8:	3000      	adds	r0, #0
 800e2da:	bf18      	it	ne
 800e2dc:	2001      	movne	r0, #1
 800e2de:	4770      	bx	lr

0800e2e0 <sys_mbox_set_invalid>:
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	6003      	str	r3, [r0, #0]
 800e2e4:	4770      	bx	lr

0800e2e6 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800e2e6:	b538      	push	{r3, r4, r5, lr}
 800e2e8:	4605      	mov	r5, r0
 800e2ea:	460c      	mov	r4, r1
	vSemaphoreCreateBinary(*sem );
 800e2ec:	2203      	movs	r2, #3
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	2001      	movs	r0, #1
 800e2f2:	f7f9 f84b 	bl	800738c <xQueueGenericCreate>
 800e2f6:	6028      	str	r0, [r5, #0]
 800e2f8:	b120      	cbz	r0, 800e304 <sys_sem_new+0x1e>
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	4619      	mov	r1, r3
 800e300:	f7f9 f87a 	bl	80073f8 <xQueueGenericSend>
	if(*sem == NULL)
 800e304:	6828      	ldr	r0, [r5, #0]
 800e306:	b138      	cbz	r0, 800e318 <sys_sem_new+0x32>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
	}
	
	if(count == 0)	// Means it can't be taken
 800e308:	b94c      	cbnz	r4, 800e31e <sys_sem_new+0x38>
	{
		xSemaphoreTake(*sem,1);
 800e30a:	4623      	mov	r3, r4
 800e30c:	2201      	movs	r2, #1
 800e30e:	4621      	mov	r1, r4
 800e310:	f7f9 fa12 	bl	8007738 <xQueueGenericReceive>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 800e314:	4620      	mov	r0, r4
 800e316:	bd38      	pop	{r3, r4, r5, pc}
	if(*sem == NULL)
	{
#if SYS_STATS
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
 800e318:	f04f 30ff 	mov.w	r0, #4294967295
 800e31c:	bd38      	pop	{r3, r4, r5, pc}
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 800e31e:	2000      	movs	r0, #0
}
 800e320:	bd38      	pop	{r3, r4, r5, pc}

0800e322 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800e322:	b570      	push	{r4, r5, r6, lr}
 800e324:	460e      	mov	r6, r1
 800e326:	4605      	mov	r5, r0
portTickType StartTime, EndTime, Elapsed;

	StartTime = xTaskGetTickCount();
 800e328:	f7f9 fd3c 	bl	8007da4 <xTaskGetTickCount>
 800e32c:	4604      	mov	r4, r0

	if(	timeout != 0)
 800e32e:	b146      	cbz	r6, 800e342 <sys_arch_sem_wait+0x20>
	{
		if( xSemaphoreTake( *sem, timeout / portTICK_RATE_MS ) == pdTRUE )
 800e330:	2300      	movs	r3, #0
 800e332:	4632      	mov	r2, r6
 800e334:	6828      	ldr	r0, [r5, #0]
 800e336:	4619      	mov	r1, r3
 800e338:	f7f9 f9fe 	bl	8007738 <xQueueGenericReceive>
 800e33c:	2801      	cmp	r0, #1
 800e33e:	d10d      	bne.n	800e35c <sys_arch_sem_wait+0x3a>
 800e340:	e008      	b.n	800e354 <sys_arch_sem_wait+0x32>
			return SYS_ARCH_TIMEOUT;
		}
	}
	else // must block without a timeout
	{
		while( xSemaphoreTake(*sem, portMAX_DELAY) != pdTRUE){}
 800e342:	2300      	movs	r3, #0
 800e344:	f04f 32ff 	mov.w	r2, #4294967295
 800e348:	6828      	ldr	r0, [r5, #0]
 800e34a:	4619      	mov	r1, r3
 800e34c:	f7f9 f9f4 	bl	8007738 <xQueueGenericReceive>
 800e350:	2801      	cmp	r0, #1
 800e352:	d1f6      	bne.n	800e342 <sys_arch_sem_wait+0x20>
		EndTime = xTaskGetTickCount();
 800e354:	f7f9 fd26 	bl	8007da4 <xTaskGetTickCount>
		Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;
 800e358:	1b00      	subs	r0, r0, r4

		return ( Elapsed ); // return time blocked	
 800e35a:	bd70      	pop	{r4, r5, r6, pc}
			
			return (Elapsed); // return time blocked TODO test	
		}
		else
		{
			return SYS_ARCH_TIMEOUT;
 800e35c:	f04f 30ff 	mov.w	r0, #4294967295
		Elapsed = (EndTime - StartTime) * portTICK_RATE_MS;

		return ( Elapsed ); // return time blocked	
		
	}
}
 800e360:	bd70      	pop	{r4, r5, r6, pc}

0800e362 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
	xSemaphoreGive(*sem);
 800e362:	2300      	movs	r3, #0
 800e364:	6800      	ldr	r0, [r0, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	4619      	mov	r1, r3
 800e36a:	f7f9 b845 	b.w	80073f8 <xQueueGenericSend>

0800e36e <sys_sem_free>:
{
#if SYS_STATS
      --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
			
	vQueueDelete(*sem);
 800e36e:	6800      	ldr	r0, [r0, #0]
 800e370:	f7f9 bb10 	b.w	8007994 <vQueueDelete>

0800e374 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
 800e374:	6800      	ldr	r0, [r0, #0]
  if (*sem == SYS_SEM_NULL)
    return 0;
  else
    return 1;                                       
}
 800e376:	3000      	adds	r0, #0
 800e378:	bf18      	it	ne
 800e37a:	2001      	movne	r0, #1
 800e37c:	4770      	bx	lr

0800e37e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 800e37e:	2300      	movs	r3, #0
 800e380:	6003      	str	r3, [r0, #0]
 800e382:	4770      	bx	lr

0800e384 <sys_init>:
/*-----------------------------------------------------------------------------------*/
// Initialize sys arch
void sys_init(void)
{
	// keep track of how many threads have been created
	s_nextthread = 0;
 800e384:	2200      	movs	r2, #0
 800e386:	4b01      	ldr	r3, [pc, #4]	; (800e38c <sys_init+0x8>)
 800e388:	801a      	strh	r2, [r3, #0]
 800e38a:	4770      	bx	lr
 800e38c:	20042f3c 	.word	0x20042f3c

0800e390 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e390:	b510      	push	{r4, lr}
 800e392:	4604      	mov	r4, r0
 800e394:	4608      	mov	r0, r1
 800e396:	4619      	mov	r1, r3
xTaskHandle CreatedTask;
int result;

   if ( s_nextthread < SYS_THREAD_MAX )
 800e398:	4b0b      	ldr	r3, [pc, #44]	; (800e3c8 <sys_thread_new+0x38>)
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e39a:	b086      	sub	sp, #24
xTaskHandle CreatedTask;
int result;

   if ( s_nextthread < SYS_THREAD_MAX )
 800e39c:	881b      	ldrh	r3, [r3, #0]
 800e39e:	2b05      	cmp	r3, #5
 800e3a0:	d901      	bls.n	800e3a6 <sys_thread_new+0x16>
		   return NULL;
	   }
   }
   else
   {
      return NULL;
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	e00e      	b.n	800e3c4 <sys_thread_new+0x34>
xTaskHandle CreatedTask;
int result;

   if ( s_nextthread < SYS_THREAD_MAX )
   {
      result = xTaskCreate( thread, name, stacksize, arg, prio, &CreatedTask );
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	9303      	str	r3, [sp, #12]
 800e3aa:	9302      	str	r3, [sp, #8]
 800e3ac:	ab05      	add	r3, sp, #20
 800e3ae:	9301      	str	r3, [sp, #4]
 800e3b0:	9b08      	ldr	r3, [sp, #32]
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	b28a      	uxth	r2, r1
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	f7f9 fc26 	bl	8007c0a <xTaskGenericCreate>

	   // For each task created, store the task handle (pid) in the timers array.
	   // This scheme doesn't allow for threads to be deleted
	   //s_timeoutlist[s_nextthread++].pid = CreatedTask;

	   if(result == pdPASS)
 800e3be:	2801      	cmp	r0, #1
 800e3c0:	d1ef      	bne.n	800e3a2 <sys_thread_new+0x12>
	   {
		   return CreatedTask;
 800e3c2:	9805      	ldr	r0, [sp, #20]
   }
   else
   {
      return NULL;
   }
}
 800e3c4:	b006      	add	sp, #24
 800e3c6:	bd10      	pop	{r4, pc}
 800e3c8:	20042f3c 	.word	0x20042f3c

0800e3cc <low_level_output>:
 * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
 800e3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t *) (EthHandle.TxDesc->Buffer1Addr);
 800e3d0:	4a25      	ldr	r2, [pc, #148]	; (800e468 <low_level_output+0x9c>)
	uint32_t bufferoffset = 0;
	uint32_t byteslefttocopy = 0;
	uint32_t payloadoffset = 0;

	DmaTxDesc = EthHandle.TxDesc;
	bufferoffset = 0;
 800e3d2:	f04f 0800 	mov.w	r8, #0
 * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 *       strange results. You might consider waiting for space in the DMA queue
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
 800e3d6:	460d      	mov	r5, r1
		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
		payloadoffset = 0;

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 800e3d8:	f240 5bf4 	movw	fp, #1524	; 0x5f4
 *       dropped because of memory failure (except for the TCP timers).
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t *) (EthHandle.TxDesc->Buffer1Addr);
 800e3dc:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	__IO ETH_DMADescTypeDef *DmaTxDesc;
	uint32_t framelength = 0;
 800e3de:	4647      	mov	r7, r8
 800e3e0:	9200      	str	r2, [sp, #0]
 *       dropped because of memory failure (except for the TCP timers).
 */
static err_t low_level_output(struct netif *netif, struct pbuf *p) {
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t *) (EthHandle.TxDesc->Buffer1Addr);
 800e3e2:	68b3      	ldr	r3, [r6, #8]

	DmaTxDesc = EthHandle.TxDesc;
	bufferoffset = 0;

	/* copy frame from pbufs to driver buffers */
	for (q = p; q != NULL; q = q->next) {
 800e3e4:	b35d      	cbz	r5, 800e43e <low_level_output+0x72>
		/* Is this buffer available? If not, goto error */
		if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 800e3e6:	6832      	ldr	r2, [r6, #0]
 800e3e8:	2a00      	cmp	r2, #0
 800e3ea:	da02      	bge.n	800e3f2 <low_level_output+0x26>
			errval = ERR_USE;
 800e3ec:	f06f 0007 	mvn.w	r0, #7
 800e3f0:	e02a      	b.n	800e448 <low_level_output+0x7c>
			goto error;
		}

		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
 800e3f2:	f8b5 900a 	ldrh.w	r9, [r5, #10]
		payloadoffset = 0;

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 800e3f6:	4644      	mov	r4, r8
			goto error;
		}

		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
		payloadoffset = 0;
 800e3f8:	f04f 0a00 	mov.w	sl, #0

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
 800e3fc:	eb04 0809 	add.w	r8, r4, r9
 800e400:	1918      	adds	r0, r3, r4
 800e402:	6869      	ldr	r1, [r5, #4]
 800e404:	45d8      	cmp	r8, fp
 800e406:	d911      	bls.n	800e42c <low_level_output+0x60>
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
					(ETH_TX_BUF_SIZE - bufferoffset));
 800e408:	f5c4 64be 	rsb	r4, r4, #1520	; 0x5f0
		payloadoffset = 0;

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800e40c:	4451      	add	r1, sl
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
					(ETH_TX_BUF_SIZE - bufferoffset));
 800e40e:	3404      	adds	r4, #4
		payloadoffset = 0;

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE) {
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800e410:	4622      	mov	r2, r4
 800e412:	f003 f9f8 	bl	8011806 <memcpy>
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
					(ETH_TX_BUF_SIZE - bufferoffset));

			/* Point to next descriptor */
			DmaTxDesc = (ETH_DMADescTypeDef *) (DmaTxDesc->Buffer2NextDescAddr);
 800e416:	68f6      	ldr	r6, [r6, #12]

			/* Check if the buffer is available */
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
 800e418:	6833      	ldr	r3, [r6, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	dbe6      	blt.n	800e3ec <low_level_output+0x20>

			buffer = (uint8_t *) (DmaTxDesc->Buffer1Addr);

			byteslefttocopy = byteslefttocopy
					- (ETH_TX_BUF_SIZE - bufferoffset);
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800e41e:	44a2      	add	sl, r4
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800e420:	4427      	add	r7, r4
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET) {
				errval = ERR_USE;
				goto error;
			}

			buffer = (uint8_t *) (DmaTxDesc->Buffer1Addr);
 800e422:	68b3      	ldr	r3, [r6, #8]

			byteslefttocopy = byteslefttocopy
 800e424:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
					- (ETH_TX_BUF_SIZE - bufferoffset);
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
			bufferoffset = 0;
 800e428:	2400      	movs	r4, #0
 800e42a:	e7e7      	b.n	800e3fc <low_level_output+0x30>
		}

		/* Copy the remaining bytes */
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800e42c:	464a      	mov	r2, r9
 800e42e:	4451      	add	r1, sl
 800e430:	9301      	str	r3, [sp, #4]
				(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
				byteslefttocopy);
		bufferoffset = bufferoffset + byteslefttocopy;
		framelength = framelength + byteslefttocopy;
 800e432:	444f      	add	r7, r9
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
			bufferoffset = 0;
		}

		/* Copy the remaining bytes */
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800e434:	f003 f9e7 	bl	8011806 <memcpy>

	DmaTxDesc = EthHandle.TxDesc;
	bufferoffset = 0;

	/* copy frame from pbufs to driver buffers */
	for (q = p; q != NULL; q = q->next) {
 800e438:	682d      	ldr	r5, [r5, #0]
 800e43a:	9b01      	ldr	r3, [sp, #4]
 800e43c:	e7d2      	b.n	800e3e4 <low_level_output+0x18>
		bufferoffset = bufferoffset + byteslefttocopy;
		framelength = framelength + byteslefttocopy;
	}

	/* Prepare transmit descriptors to give to DMA */
	HAL_ETH_TransmitFrame(&EthHandle, framelength);
 800e43e:	4639      	mov	r1, r7
 800e440:	4809      	ldr	r0, [pc, #36]	; (800e468 <low_level_output+0x9c>)
 800e442:	f7f5 fd9d 	bl	8003f80 <HAL_ETH_TransmitFrame>

	errval = ERR_OK;
 800e446:	4628      	mov	r0, r5

	error:

	/* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t) RESET) {
 800e448:	9b00      	ldr	r3, [sp, #0]
 800e44a:	f241 0214 	movw	r2, #4116	; 0x1014
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	5899      	ldr	r1, [r3, r2]
 800e452:	0689      	lsls	r1, r1, #26
 800e454:	d505      	bpl.n	800e462 <low_level_output+0x96>
		/* Clear TUS ETHERNET DMA flag */
		EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 800e456:	2120      	movs	r1, #32
 800e458:	5099      	str	r1, [r3, r2]

		/* Resume DMA transmission*/
		EthHandle.Instance->DMATPDR = 0;
 800e45a:	2100      	movs	r1, #0
 800e45c:	f241 0204 	movw	r2, #4100	; 0x1004
 800e460:	5099      	str	r1, [r3, r2]
	}
	return errval;
}
 800e462:	b003      	add	sp, #12
 800e464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e468:	20049268 	.word	0x20049268

0800e46c <ethernetif_input>:
 * interface. Then the type of the received packet is determined and
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument) {
 800e46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e470:	4682      	mov	sl, r0
	struct pbuf *p;
	struct netif *netif = (struct netif *) argument;

	for (;;) {
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK) {
 800e472:	4c37      	ldr	r4, [pc, #220]	; (800e550 <ethernetif_input+0xe4>)
 800e474:	f04f 31ff 	mov.w	r1, #4294967295
 800e478:	6820      	ldr	r0, [r4, #0]
 800e47a:	f7f8 fa9b 	bl	80069b4 <osSemaphoreWait>
 800e47e:	2800      	cmp	r0, #0
 800e480:	d1f8      	bne.n	800e474 <ethernetif_input+0x8>
	uint32_t payloadoffset = 0;
	uint32_t byteslefttocopy = 0;
	uint32_t i = 0;

	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 800e482:	4d34      	ldr	r5, [pc, #208]	; (800e554 <ethernetif_input+0xe8>)
 800e484:	4628      	mov	r0, r5
 800e486:	f7f5 fdf1 	bl	800406c <HAL_ETH_GetReceivedFrame_IT>
 800e48a:	4606      	mov	r6, r0
 800e48c:	2800      	cmp	r0, #0
 800e48e:	d1f0      	bne.n	800e472 <ethernetif_input+0x6>
		return NULL;

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = EthHandle.RxFrameInfos.length;
	buffer = (uint8_t *) EthHandle.RxFrameInfos.buffer;
 800e490:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
		return NULL;

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = EthHandle.RxFrameInfos.length;
 800e492:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
	buffer = (uint8_t *) EthHandle.RxFrameInfos.buffer;
 800e494:	9301      	str	r3, [sp, #4]

	if (len > 0) {
 800e496:	b909      	cbnz	r1, 800e49c <ethernetif_input+0x30>
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif) {
	struct pbuf *p = NULL, *q = NULL;
 800e498:	2700      	movs	r7, #0
 800e49a:	e031      	b.n	800e500 <ethernetif_input+0x94>
	len = EthHandle.RxFrameInfos.length;
	buffer = (uint8_t *) EthHandle.RxFrameInfos.buffer;

	if (len > 0) {
		/* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800e49c:	2203      	movs	r2, #3
 800e49e:	2004      	movs	r0, #4
 800e4a0:	f7fc fe00 	bl	800b0a4 <pbuf_alloc>
	}

	if (p != NULL) {
 800e4a4:	4607      	mov	r7, r0
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d0f6      	beq.n	800e498 <ethernetif_input+0x2c>
		dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 800e4aa:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 800e4ae:	4680      	mov	r8, r0
		bufferoffset = 0;

		for (q = p; q != NULL; q = q->next) {
			byteslefttocopy = q->len;
 800e4b0:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800e4b4:	4634      	mov	r4, r6
			payloadoffset = 0;
 800e4b6:	f04f 0900 	mov.w	r9, #0

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
 800e4ba:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800e4be:	18a6      	adds	r6, r4, r2
 800e4c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e4c4:	429e      	cmp	r6, r3
 800e4c6:	9b01      	ldr	r3, [sp, #4]
 800e4c8:	eb03 0104 	add.w	r1, r3, r4
 800e4cc:	d910      	bls.n	800e4f0 <ethernetif_input+0x84>
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
						(ETH_RX_BUF_SIZE - bufferoffset));
 800e4ce:	f5c4 64be 	rsb	r4, r4, #1520	; 0x5f0
			payloadoffset = 0;

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800e4d2:	4448      	add	r0, r9
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
						(ETH_RX_BUF_SIZE - bufferoffset));
 800e4d4:	3404      	adds	r4, #4
			payloadoffset = 0;

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800e4d6:	4622      	mov	r2, r4
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);

				byteslefttocopy = byteslefttocopy
						- (ETH_RX_BUF_SIZE - bufferoffset);
				payloadoffset = payloadoffset
 800e4d8:	44a1      	add	r9, r4
			payloadoffset = 0;

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size */
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE) {
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800e4da:	f003 f994 	bl	8011806 <memcpy>
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
						(ETH_RX_BUF_SIZE - bufferoffset));

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 800e4de:	f8db b00c 	ldr.w	fp, [fp, #12]
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);

				byteslefttocopy = byteslefttocopy
 800e4e2:	f2a6 52f4 	subw	r2, r6, #1524	; 0x5f4
						- (ETH_RX_BUF_SIZE - bufferoffset);
				payloadoffset = payloadoffset
						+ (ETH_RX_BUF_SIZE - bufferoffset);
				bufferoffset = 0;
 800e4e6:	2400      	movs	r4, #0
						(ETH_RX_BUF_SIZE - bufferoffset));

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
				buffer = (uint8_t *) (dmarxdesc->Buffer1Addr);
 800e4e8:	f8db 3008 	ldr.w	r3, [fp, #8]
 800e4ec:	9301      	str	r3, [sp, #4]
 800e4ee:	e7e4      	b.n	800e4ba <ethernetif_input+0x4e>
						+ (ETH_RX_BUF_SIZE - bufferoffset);
				bufferoffset = 0;
			}

			/* Copy remaining data in pbuf */
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800e4f0:	4448      	add	r0, r9
 800e4f2:	f003 f988 	bl	8011806 <memcpy>

	if (p != NULL) {
		dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
		bufferoffset = 0;

		for (q = p; q != NULL; q = q->next) {
 800e4f6:	f8d8 8000 	ldr.w	r8, [r8]
 800e4fa:	f1b8 0f00 	cmp.w	r8, #0
 800e4fe:	d1d7      	bne.n	800e4b0 <ethernetif_input+0x44>
		}
	}

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 800e500:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < EthHandle.RxFrameInfos.SegCount; i++) {
 800e502:	2200      	movs	r2, #0
 800e504:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800e506:	4282      	cmp	r2, r0
 800e508:	d006      	beq.n	800e518 <ethernetif_input+0xac>
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e50a:	6819      	ldr	r1, [r3, #0]

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < EthHandle.RxFrameInfos.SegCount; i++) {
 800e50c:	3201      	adds	r2, #1
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800e50e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800e512:	6019      	str	r1, [r3, #0]
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	e7f6      	b.n	800e506 <ethernetif_input+0x9a>

	/* Clear Segment_Count */
	EthHandle.RxFrameInfos.SegCount = 0;

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 800e518:	682b      	ldr	r3, [r5, #0]
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
	}

	/* Clear Segment_Count */
	EthHandle.RxFrameInfos.SegCount = 0;
 800e51a:	2100      	movs	r1, #0

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 800e51c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
		dmarxdesc = (ETH_DMADescTypeDef *) (dmarxdesc->Buffer2NextDescAddr);
	}

	/* Clear Segment_Count */
	EthHandle.RxFrameInfos.SegCount = 0;
 800e520:	63a9      	str	r1, [r5, #56]	; 0x38

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
 800e522:	6950      	ldr	r0, [r2, #20]
 800e524:	3214      	adds	r2, #20
 800e526:	0600      	lsls	r0, r0, #24
 800e528:	d504      	bpl.n	800e534 <ethernetif_input+0xc8>
		/* Clear RBUS ETHERNET DMA flag */
		EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 800e52a:	2080      	movs	r0, #128	; 0x80
		/* Resume DMA reception */
		EthHandle.Instance->DMARPDR = 0;
 800e52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
	EthHandle.RxFrameInfos.SegCount = 0;

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET) {
		/* Clear RBUS ETHERNET DMA flag */
		EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 800e530:	6010      	str	r0, [r2, #0]
		/* Resume DMA reception */
		EthHandle.Instance->DMARPDR = 0;
 800e532:	6099      	str	r1, [r3, #8]

	for (;;) {
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK) {
			do {
				p = low_level_input(netif);
				if (p != NULL) {
 800e534:	2f00      	cmp	r7, #0
 800e536:	d09c      	beq.n	800e472 <ethernetif_input+0x6>
					if (netif->input(p, netif) != ERR_OK) {
 800e538:	f8da 3010 	ldr.w	r3, [sl, #16]
 800e53c:	4651      	mov	r1, sl
 800e53e:	4638      	mov	r0, r7
 800e540:	4798      	blx	r3
 800e542:	2800      	cmp	r0, #0
 800e544:	d09d      	beq.n	800e482 <ethernetif_input+0x16>
						pbuf_free(p);
 800e546:	4638      	mov	r0, r7
 800e548:	f7fc fd8c 	bl	800b064 <pbuf_free>
 800e54c:	e799      	b.n	800e482 <ethernetif_input+0x16>
 800e54e:	bf00      	nop
 800e550:	20042f40 	.word	0x20042f40
 800e554:	20049268 	.word	0x20049268

0800e558 <HAL_ETH_MspInit>:
/**
 * @brief  Initializes the ETH MSP.
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth) {
 800e558:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800e55a:	4c2f      	ldr	r4, [pc, #188]	; (800e618 <HAL_ETH_MspInit+0xc0>)
/**
 * @brief  Initializes the ETH MSP.
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth) {
 800e55c:	b08c      	sub	sp, #48	; 0x30
	 */

	/* Configure PA1, PA2 and PA7 */
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800e55e:	2600      	movs	r6, #0
	GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800e560:	482e      	ldr	r0, [pc, #184]	; (800e61c <HAL_ETH_MspInit+0xc4>)
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800e562:	6b23      	ldr	r3, [r4, #48]	; 0x30
	/* Configure PA1, PA2 and PA7 */
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800e564:	ad0c      	add	r5, sp, #48	; 0x30
 */
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth) {
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800e566:	f043 0301 	orr.w	r3, r3, #1
 800e56a:	6323      	str	r3, [r4, #48]	; 0x30
 800e56c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e56e:	f003 0301 	and.w	r3, r3, #1
 800e572:	9301      	str	r3, [sp, #4]
 800e574:	9b01      	ldr	r3, [sp, #4]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800e576:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e578:	f043 0304 	orr.w	r3, r3, #4
 800e57c:	6323      	str	r3, [r4, #48]	; 0x30
 800e57e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e580:	f003 0304 	and.w	r3, r3, #4
 800e584:	9302      	str	r3, [sp, #8]
 800e586:	9b02      	ldr	r3, [sp, #8]
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800e588:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e58a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e58e:	6323      	str	r3, [r4, #48]	; 0x30
 800e590:	6b23      	ldr	r3, [r4, #48]	; 0x30
	 */

	/* Configure PA1, PA2 and PA7 */
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800e592:	9609      	str	r6, [sp, #36]	; 0x24
	/* Enable GPIOs clocks */
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800e594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e598:	9303      	str	r3, [sp, #12]
 800e59a:	9b03      	ldr	r3, [sp, #12]
	 RMII_MII_TXD0 ---------------------> PG13
	 RMII_MII_TXD1 ---------------------> PG14
	 */

	/* Configure PA1, PA2 and PA7 */
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800e59c:	2303      	movs	r3, #3
 800e59e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800e5a0:	2302      	movs	r3, #2
 800e5a2:	9308      	str	r3, [sp, #32]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
	GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800e5a4:	230b      	movs	r3, #11
 800e5a6:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800e5a8:	2386      	movs	r3, #134	; 0x86
 800e5aa:	f845 3d14 	str.w	r3, [r5, #-20]!
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800e5ae:	4629      	mov	r1, r5
 800e5b0:	f7f5 ff84 	bl	80044bc <HAL_GPIO_Init>

	/* Configure PC1, PC4 and PC5 */
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800e5b4:	2332      	movs	r3, #50	; 0x32
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	4819      	ldr	r0, [pc, #100]	; (800e620 <HAL_ETH_MspInit+0xc8>)
	GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);

	/* Configure PC1, PC4 and PC5 */
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800e5ba:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800e5bc:	f7f5 ff7e 	bl	80044bc <HAL_GPIO_Init>

	/* Configure PG2, PG11, PG13 and PG14 */
	GPIO_InitStructure.Pin = GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13
 800e5c0:	f646 0304 	movw	r3, #26628	; 0x6804
			| GPIO_PIN_14;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	4817      	ldr	r0, [pc, #92]	; (800e624 <HAL_ETH_MspInit+0xcc>)
	/* Configure PC1, PC4 and PC5 */
	GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);

	/* Configure PG2, PG11, PG13 and PG14 */
	GPIO_InitStructure.Pin = GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13
 800e5c8:	9307      	str	r3, [sp, #28]
			| GPIO_PIN_14;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800e5ca:	f7f5 ff77 	bl	80044bc <HAL_GPIO_Init>

	/* Enable the Ethernet global Interrupt */
	HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 800e5ce:	4632      	mov	r2, r6
 800e5d0:	2107      	movs	r1, #7
 800e5d2:	203d      	movs	r0, #61	; 0x3d
 800e5d4:	f7f4 fffa 	bl	80035cc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e5d8:	203d      	movs	r0, #61	; 0x3d
 800e5da:	f7f5 f82f 	bl	800363c <HAL_NVIC_EnableIRQ>

	/* Enable ETHERNET clock  */
	__HAL_RCC_ETH_CLK_ENABLE()
 800e5de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e5e4:	6323      	str	r3, [r4, #48]	; 0x30
 800e5e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5ec:	9304      	str	r3, [sp, #16]
 800e5ee:	9b04      	ldr	r3, [sp, #16]
 800e5f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e5f6:	6323      	str	r3, [r4, #48]	; 0x30
 800e5f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e5fe:	9305      	str	r3, [sp, #20]
 800e600:	9b05      	ldr	r3, [sp, #20]
 800e602:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e604:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e608:	6323      	str	r3, [r4, #48]	; 0x30
 800e60a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e60c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e610:	9306      	str	r3, [sp, #24]
 800e612:	9b06      	ldr	r3, [sp, #24]
	;
}
 800e614:	b00c      	add	sp, #48	; 0x30
 800e616:	bd70      	pop	{r4, r5, r6, pc}
 800e618:	40023800 	.word	0x40023800
 800e61c:	40020000 	.word	0x40020000
 800e620:	40020800 	.word	0x40020800
 800e624:	40021800 	.word	0x40021800

0800e628 <HAL_ETH_RxCpltCallback>:
 * @brief  Ethernet Rx Transfer completed callback
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth) {
	osSemaphoreRelease(s_xSemaphore);
 800e628:	4b01      	ldr	r3, [pc, #4]	; (800e630 <HAL_ETH_RxCpltCallback+0x8>)
 800e62a:	6818      	ldr	r0, [r3, #0]
 800e62c:	f7f8 b9ea 	b.w	8006a04 <osSemaphoreRelease>
 800e630:	20042f40 	.word	0x20042f40

0800e634 <ETHERNET_IRQHandler>:
 * @brief  Ethernet IRQ Handler
 * @param  None
 * @retval None
 */
void ETHERNET_IRQHandler(void) {
	HAL_ETH_IRQHandler(&EthHandle);
 800e634:	4801      	ldr	r0, [pc, #4]	; (800e63c <ETHERNET_IRQHandler+0x8>)
 800e636:	f7f5 bd60 	b.w	80040fa <HAL_ETH_IRQHandler>
 800e63a:	bf00      	nop
 800e63c:	20049268 	.word	0x20049268

0800e640 <ethernetif_init>:
#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 800e640:	2373      	movs	r3, #115	; 0x73
 */
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
 800e642:	4a3a      	ldr	r2, [pc, #232]	; (800e72c <ethernetif_init+0xec>)
	EthHandle.Init.MACAddr = macaddress;
	EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
	EthHandle.Init.Speed = ETH_SPEED_100M;
 800e644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif) {
 800e648:	b5f0      	push	{r4, r5, r6, r7, lr}
#if LWIP_NETIF_HOSTNAME
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 800e64a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
	netif->name[1] = IFNAME1;
 800e64e:	2374      	movs	r3, #116	; 0x74
 * @param netif the lwip network interface structure for this ethernetif
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif) {
 800e650:	b089      	sub	sp, #36	; 0x24
 800e652:	4604      	mov	r4, r0
	/* Initialize interface hostname */
	netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
	netif->name[1] = IFNAME1;
 800e654:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35

	netif->output = etharp_output;
 800e658:	4b35      	ldr	r3, [pc, #212]	; (800e730 <ethernetif_init+0xf0>)
 800e65a:	6143      	str	r3, [r0, #20]
	netif->linkoutput = low_level_output;
 800e65c:	4b35      	ldr	r3, [pc, #212]	; (800e734 <ethernetif_init+0xf4>)
 800e65e:	6183      	str	r3, [r0, #24]
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
 800e660:	2302      	movs	r3, #2
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
 800e662:	4835      	ldr	r0, [pc, #212]	; (800e738 <ethernetif_init+0xf8>)
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
 800e664:	f88d 3004 	strb.w	r3, [sp, #4]
 800e668:	2300      	movs	r3, #0
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
 800e66a:	6002      	str	r2, [r0, #0]
	EthHandle.Init.MACAddr = macaddress;
 800e66c:	aa01      	add	r2, sp, #4
	EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
	EthHandle.Init.Speed = ETH_SPEED_100M;
 800e66e:	6081      	str	r1, [r0, #8]
	EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e670:	f44f 6100 	mov.w	r1, #2048	; 0x800
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
	EthHandle.Init.MACAddr = macaddress;
 800e674:	6142      	str	r2, [r0, #20]
	EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800e676:	2201      	movs	r2, #1
	EthHandle.Init.Speed = ETH_SPEED_100M;
	EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800e678:	60c1      	str	r1, [r0, #12]
	EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e67a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif) {
	uint8_t macaddress[6] = { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3,
 800e67e:	f88d 3005 	strb.w	r3, [sp, #5]
 800e682:	f88d 3006 	strb.w	r3, [sp, #6]
 800e686:	f88d 3007 	strb.w	r3, [sp, #7]
 800e68a:	f88d 3008 	strb.w	r3, [sp, #8]
 800e68e:	f88d 3009 	strb.w	r3, [sp, #9]
			MAC_ADDR4, MAC_ADDR5 };

	EthHandle.Instance = ETH;
	EthHandle.Init.MACAddr = macaddress;
	EthHandle.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800e692:	6042      	str	r2, [r0, #4]
	EthHandle.Init.Speed = ETH_SPEED_100M;
	EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
	EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800e694:	6201      	str	r1, [r0, #32]
	EthHandle.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800e696:	6182      	str	r2, [r0, #24]
	EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800e698:	61c3      	str	r3, [r0, #28]
	EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800e69a:	8203      	strh	r3, [r0, #16]

	/* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
	if (HAL_ETH_Init(&EthHandle) == HAL_OK) {
 800e69c:	f7f5 fdd8 	bl	8004250 <HAL_ETH_Init>
 800e6a0:	b928      	cbnz	r0, 800e6ae <ethernetif_init+0x6e>
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP;
 800e6a2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800e6a6:	f043 0304 	orr.w	r3, r3, #4
 800e6aa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	}

	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0],
 800e6ae:	2305      	movs	r3, #5
 800e6b0:	4a22      	ldr	r2, [pc, #136]	; (800e73c <ethernetif_init+0xfc>)
 800e6b2:	4923      	ldr	r1, [pc, #140]	; (800e740 <ethernetif_init+0x100>)
	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
 800e6b4:	2500      	movs	r5, #0
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP;
	}

	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0],
 800e6b6:	4820      	ldr	r0, [pc, #128]	; (800e738 <ethernetif_init+0xf8>)
	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 800e6b8:	ae03      	add	r6, sp, #12
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP;
	}

	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0],
 800e6ba:	f7f5 fbe7 	bl	8003e8c <HAL_ETH_DMATxDescListInit>
			ETH_TXBUFNB);

	/* Initialize Rx Descriptors list: Chain Mode  */
	HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0],
 800e6be:	4a21      	ldr	r2, [pc, #132]	; (800e744 <ethernetif_init+0x104>)
 800e6c0:	2305      	movs	r3, #5
 800e6c2:	4921      	ldr	r1, [pc, #132]	; (800e748 <ethernetif_init+0x108>)
 800e6c4:	481c      	ldr	r0, [pc, #112]	; (800e738 <ethernetif_init+0xf8>)
 800e6c6:	f7f5 fc1e 	bl	8003f06 <HAL_ETH_DMARxDescListInit>
			ETH_RXBUFNB);

	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;
 800e6ca:	2306      	movs	r3, #6

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
 800e6cc:	a808      	add	r0, sp, #32
	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
 800e6ce:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
	/* Initialize Rx Descriptors list: Chain Mode  */
	HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0],
			ETH_RXBUFNB);

	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;
 800e6d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
 800e6d6:	2302      	movs	r3, #2
	netif->hwaddr[1] = MAC_ADDR1;
	netif->hwaddr[2] = MAC_ADDR2;
 800e6d8:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e6dc:	2101      	movs	r1, #1

	/* set netif MAC hardware address length */
	netif->hwaddr_len = ETHARP_HWADDR_LEN;

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
 800e6de:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	netif->hwaddr[3] = MAC_ADDR3;
	netif->hwaddr[4] = MAC_ADDR4;
	netif->hwaddr[5] = MAC_ADDR5;

	/* set netif maximum transfer unit */
	netif->mtu = 1500;
 800e6e2:	f240 53dc 	movw	r3, #1500	; 0x5dc

	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
	netif->hwaddr[2] = MAC_ADDR2;
	netif->hwaddr[3] = MAC_ADDR3;
 800e6e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
	netif->hwaddr[4] = MAC_ADDR4;
	netif->hwaddr[5] = MAC_ADDR5;

	/* set netif maximum transfer unit */
	netif->mtu = 1500;
 800e6ea:	8563      	strh	r3, [r4, #42]	; 0x2a

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e6ec:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	/* set netif MAC hardware address */
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
	netif->hwaddr[2] = MAC_ADDR2;
	netif->hwaddr[3] = MAC_ADDR3;
	netif->hwaddr[4] = MAC_ADDR4;
 800e6f0:	f884 5031 	strb.w	r5, [r4, #49]	; 0x31

	/* set netif maximum transfer unit */
	netif->mtu = 1500;

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e6f4:	f043 030a 	orr.w	r3, r3, #10
	netif->hwaddr[0] = MAC_ADDR0;
	netif->hwaddr[1] = MAC_ADDR1;
	netif->hwaddr[2] = MAC_ADDR2;
	netif->hwaddr[3] = MAC_ADDR3;
	netif->hwaddr[4] = MAC_ADDR4;
	netif->hwaddr[5] = MAC_ADDR5;
 800e6f8:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
 800e6fc:	f840 5d20 	str.w	r5, [r0, #-32]!

	/* set netif maximum transfer unit */
	netif->mtu = 1500;

	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e700:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e704:	f7f8 f942 	bl	800698c <osSemaphoreCreate>

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 800e708:	4f10      	ldr	r7, [pc, #64]	; (800e74c <ethernetif_init+0x10c>)
	/* Accept broadcast address and ARP traffic */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800e70a:	4b11      	ldr	r3, [pc, #68]	; (800e750 <ethernetif_init+0x110>)
 800e70c:	6018      	str	r0, [r3, #0]

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 800e70e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e710:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e712:	683b      	ldr	r3, [r7, #0]
			INTERFACE_THREAD_STACK_SIZE);
	osThreadCreate(osThread(EthIf), netif);
 800e714:	4621      	mov	r1, r4
 800e716:	a803      	add	r0, sp, #12
	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 800e718:	6033      	str	r3, [r6, #0]
			INTERFACE_THREAD_STACK_SIZE);
	osThreadCreate(osThread(EthIf), netif);
 800e71a:	f7f8 f899 	bl	8006850 <osThreadCreate>

	/* Enable MAC and DMA transmission and reception */
	HAL_ETH_Start(&EthHandle);
 800e71e:	4806      	ldr	r0, [pc, #24]	; (800e738 <ethernetif_init+0xf8>)
 800e720:	f7f5 fe8e 	bl	8004440 <HAL_ETH_Start>

	/* initialize the hardware */
	low_level_init(netif);

	return ERR_OK;
}
 800e724:	4628      	mov	r0, r5
 800e726:	b009      	add	sp, #36	; 0x24
 800e728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e72a:	bf00      	nop
 800e72c:	40028000 	.word	0x40028000
 800e730:	0800dfa9 	.word	0x0800dfa9
 800e734:	0800e3cd 	.word	0x0800e3cd
 800e738:	20049268 	.word	0x20049268
 800e73c:	20012434 	.word	0x20012434
 800e740:	200141f8 	.word	0x200141f8
 800e744:	20010670 	.word	0x20010670
 800e748:	200105d0 	.word	0x200105d0
 800e74c:	08015580 	.word	0x08015580
 800e750:	20042f40 	.word	0x20042f40

0800e754 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e756:	2003      	movs	r0, #3
 800e758:	f7f4 ff26 	bl	80035a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800e75c:	2200      	movs	r2, #0
 800e75e:	f06f 000b 	mvn.w	r0, #11
 800e762:	4611      	mov	r1, r2
 800e764:	f7f4 ff32 	bl	80035cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800e768:	2200      	movs	r2, #0
 800e76a:	f06f 000a 	mvn.w	r0, #10
 800e76e:	4611      	mov	r1, r2
 800e770:	f7f4 ff2c 	bl	80035cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800e774:	2200      	movs	r2, #0
 800e776:	f06f 0009 	mvn.w	r0, #9
 800e77a:	4611      	mov	r1, r2
 800e77c:	f7f4 ff26 	bl	80035cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800e780:	2200      	movs	r2, #0
 800e782:	f06f 0004 	mvn.w	r0, #4
 800e786:	4611      	mov	r1, r2
 800e788:	f7f4 ff20 	bl	80035cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800e78c:	2200      	movs	r2, #0
 800e78e:	f06f 0003 	mvn.w	r0, #3
 800e792:	4611      	mov	r1, r2
 800e794:	f7f4 ff1a 	bl	80035cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e798:	2200      	movs	r2, #0
 800e79a:	210f      	movs	r1, #15
 800e79c:	f06f 0001 	mvn.w	r0, #1
 800e7a0:	f7f4 ff14 	bl	80035cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	210f      	movs	r1, #15
 800e7a8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e7ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800e7b0:	f7f4 bf0c 	b.w	80035cc <HAL_NVIC_SetPriority>

0800e7b4 <HAL_DMA2D_MspInit>:
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{

  if(hdma2d->Instance==DMA2D)
 800e7b4:	6802      	ldr	r2, [r0, #0]

  /* USER CODE END MspInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800e7b6:	b082      	sub	sp, #8

  if(hdma2d->Instance==DMA2D)
 800e7b8:	4b07      	ldr	r3, [pc, #28]	; (800e7d8 <HAL_DMA2D_MspInit+0x24>)
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d10a      	bne.n	800e7d4 <HAL_DMA2D_MspInit+0x20>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800e7be:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800e7c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e7c8:	631a      	str	r2, [r3, #48]	; 0x30
 800e7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800e7d4:	b002      	add	sp, #8
 800e7d6:	4770      	bx	lr
 800e7d8:	4002b000 	.word	0x4002b000

0800e7dc <HAL_I2C_MspInit>:
  /* USER CODE END DMA2D_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e7dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 800e7de:	6802      	ldr	r2, [r0, #0]
 800e7e0:	4b0f      	ldr	r3, [pc, #60]	; (800e820 <HAL_I2C_MspInit+0x44>)
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d119      	bne.n	800e81a <HAL_I2C_MspInit+0x3e>
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800e7e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e7ea:	480e      	ldr	r0, [pc, #56]	; (800e824 <HAL_I2C_MspInit+0x48>)
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800e7ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e7ee:	2312      	movs	r3, #18
 800e7f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7f6:	2303      	movs	r3, #3
 800e7f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800e7fa:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e7fc:	eb0d 0103 	add.w	r1, sp, r3
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800e800:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e802:	f7f5 fe5b 	bl	80044bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800e806:	4b08      	ldr	r3, [pc, #32]	; (800e828 <HAL_I2C_MspInit+0x4c>)
 800e808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e80a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e80e:	641a      	str	r2, [r3, #64]	; 0x40
 800e810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800e81a:	b007      	add	sp, #28
 800e81c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e820:	40005c00 	.word	0x40005c00
 800e824:	40021c00 	.word	0x40021c00
 800e828:	40023800 	.word	0x40023800

0800e82c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{

  if(hi2c->Instance==I2C3)
 800e82c:	6802      	ldr	r2, [r0, #0]
 800e82e:	4b07      	ldr	r3, [pc, #28]	; (800e84c <HAL_I2C_MspDeInit+0x20>)
 800e830:	429a      	cmp	r2, r3
 800e832:	d109      	bne.n	800e848 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800e834:	4a06      	ldr	r2, [pc, #24]	; (800e850 <HAL_I2C_MspDeInit+0x24>)
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800e836:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800e83a:	4806      	ldr	r0, [pc, #24]	; (800e854 <HAL_I2C_MspDeInit+0x28>)
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800e83c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e83e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e842:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800e844:	f7f5 bf26 	b.w	8004694 <HAL_GPIO_DeInit>
 800e848:	4770      	bx	lr
 800e84a:	bf00      	nop
 800e84c:	40005c00 	.word	0x40005c00
 800e850:	40023800 	.word	0x40023800
 800e854:	40021c00 	.word	0x40021c00

0800e858 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800e858:	6802      	ldr	r2, [r0, #0]
 800e85a:	4b25      	ldr	r3, [pc, #148]	; (800e8f0 <HAL_LTDC_MspInit+0x98>)
 800e85c:	429a      	cmp	r2, r3
  /* USER CODE END I2C3_MspDeInit 1 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800e85e:	b570      	push	{r4, r5, r6, lr}
 800e860:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 800e862:	d143      	bne.n	800e8ec <HAL_LTDC_MspInit+0x94>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e864:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e868:	2400      	movs	r4, #0
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e86a:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e86c:	260e      	movs	r6, #14
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e86e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800e870:	a901      	add	r1, sp, #4
 800e872:	4820      	ldr	r0, [pc, #128]	; (800e8f4 <HAL_LTDC_MspInit+0x9c>)
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e874:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e878:	645a      	str	r2, [r3, #68]	; 0x44
 800e87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e87c:	9502      	str	r5, [sp, #8]
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e87e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e882:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e884:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	9b00      	ldr	r3, [sp, #0]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800e88a:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e88c:	9605      	str	r6, [sp, #20]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800e88e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800e890:	f7f5 fe14 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800e894:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e898:	a901      	add	r1, sp, #4
 800e89a:	4817      	ldr	r0, [pc, #92]	; (800e8f8 <HAL_LTDC_MspInit+0xa0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800e89c:	9301      	str	r3, [sp, #4]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e89e:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8a0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8a2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e8a4:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800e8a6:	f7f5 fe09 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800e8aa:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800e8ac:	a901      	add	r1, sp, #4
 800e8ae:	4813      	ldr	r0, [pc, #76]	; (800e8fc <HAL_LTDC_MspInit+0xa4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800e8b0:	9301      	str	r3, [sp, #4]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8b2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8b4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8b6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e8b8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800e8ba:	f7f5 fdff 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800e8be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800e8c2:	a901      	add	r1, sp, #4
 800e8c4:	480e      	ldr	r0, [pc, #56]	; (800e900 <HAL_LTDC_MspInit+0xa8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800e8c6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800e8c8:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8ca:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800e8cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_B4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8ce:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8d0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800e8d2:	f7f5 fdf3 	bl	80044bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800e8d6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e8da:	a901      	add	r1, sp, #4
 800e8dc:	4809      	ldr	r0, [pc, #36]	; (800e904 <HAL_LTDC_MspInit+0xac>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800e8de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8e0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8e2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e8e4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800e8e6:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800e8e8:	f7f5 fde8 	bl	80044bc <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800e8ec:	b006      	add	sp, #24
 800e8ee:	bd70      	pop	{r4, r5, r6, pc}
 800e8f0:	40016800 	.word	0x40016800
 800e8f4:	40021000 	.word	0x40021000
 800e8f8:	40022400 	.word	0x40022400
 800e8fc:	40022800 	.word	0x40022800
 800e900:	40021800 	.word	0x40021800
 800e904:	40022000 	.word	0x40022000

0800e908 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800e908:	4b2b      	ldr	r3, [pc, #172]	; (800e9b8 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800e90a:	b5f0      	push	{r4, r5, r6, r7, lr}
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800e90c:	681c      	ldr	r4, [r3, #0]
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800e90e:	b087      	sub	sp, #28
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800e910:	2c00      	cmp	r4, #0
 800e912:	d14e      	bne.n	800e9b2 <HAL_SDRAM_MspInit+0xaa>
    return;
  }
  FMC_Initialized = 1;
 800e914:	2201      	movs	r2, #1
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e916:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e918:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e91a:	250c      	movs	r5, #12
  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
 800e91c:	601a      	str	r2, [r3, #0]
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e91e:	a901      	add	r1, sp, #4
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e920:	4b26      	ldr	r3, [pc, #152]	; (800e9bc <HAL_SDRAM_MspInit+0xb4>)
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e922:	4827      	ldr	r0, [pc, #156]	; (800e9c0 <HAL_SDRAM_MspInit+0xb8>)
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e926:	f042 0201 	orr.w	r2, r2, #1
 800e92a:	639a      	str	r2, [r3, #56]	; 0x38
 800e92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e92e:	9702      	str	r7, [sp, #8]
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e930:	f003 0301 	and.w	r3, r3, #1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e934:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e936:	9604      	str	r6, [sp, #16]
  if (FMC_Initialized) {
    return;
  }
  FMC_Initialized = 1;
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	9b00      	ldr	r3, [sp, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
 800e93c:	f64f 7383 	movw	r3, #65411	; 0xff83
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e940:	9505      	str	r5, [sp, #20]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|FMC_D5_Pin|FMC_D6_Pin 
 800e942:	9301      	str	r3, [sp, #4]
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800e944:	f7f5 fdba 	bl	80044bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 800e948:	f248 1333 	movw	r3, #33075	; 0x8133
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e94c:	a901      	add	r1, sp, #4
 800e94e:	481d      	ldr	r0, [pc, #116]	; (800e9c4 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 800e950:	9301      	str	r3, [sp, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e952:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e954:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e956:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e958:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e95a:	f7f5 fdaf 	bl	80044bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800e95e:	f24c 7303 	movw	r3, #50947	; 0xc703
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e962:	a901      	add	r1, sp, #4
 800e964:	4818      	ldr	r0, [pc, #96]	; (800e9c8 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800e966:	9301      	str	r3, [sp, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e968:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e96a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e96c:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e96e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e970:	f7f5 fda4 	bl	80044bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800e974:	f64f 033f 	movw	r3, #63551	; 0xf83f
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e978:	a901      	add	r1, sp, #4
 800e97a:	4814      	ldr	r0, [pc, #80]	; (800e9cc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800e97c:	9301      	str	r3, [sp, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e97e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e980:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e982:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e984:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800e986:	f7f5 fd99 	bl	80044bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|GPIO_PIN_3;
 800e98a:	2328      	movs	r3, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e98c:	a901      	add	r1, sp, #4
 800e98e:	4810      	ldr	r0, [pc, #64]	; (800e9d0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|GPIO_PIN_3;
 800e990:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e992:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e994:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e996:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e998:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800e99a:	f7f5 fd8f 	bl	80044bc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e99e:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9a0:	a901      	add	r1, sp, #4
 800e9a2:	480c      	ldr	r0, [pc, #48]	; (800e9d4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e9a4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9a6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9a8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9aa:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800e9ac:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e9ae:	f7f5 fd85 	bl	80044bc <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800e9b2:	b007      	add	sp, #28
 800e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20042f48 	.word	0x20042f48
 800e9bc:	40023800 	.word	0x40023800
 800e9c0:	40021000 	.word	0x40021000
 800e9c4:	40021800 	.word	0x40021800
 800e9c8:	40020c00 	.word	0x40020c00
 800e9cc:	40021400 	.word	0x40021400
 800e9d0:	40021c00 	.word	0x40021c00
 800e9d4:	40020800 	.word	0x40020800

0800e9d8 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800e9d8:	6802      	ldr	r2, [r0, #0]
 800e9da:	4b22      	ldr	r3, [pc, #136]	; (800ea64 <HAL_SAI_MspInit+0x8c>)
 800e9dc:	429a      	cmp	r2, r3
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800e9de:	b510      	push	{r4, lr}
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800e9e4:	d11b      	bne.n	800ea1e <HAL_SAI_MspInit+0x46>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800e9e6:	4b20      	ldr	r3, [pc, #128]	; (800ea68 <HAL_SAI_MspInit+0x90>)
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	b94a      	cbnz	r2, 800ea00 <HAL_SAI_MspInit+0x28>
    {
      __HAL_RCC_SAI2_CLK_ENABLE();
 800e9ec:	491f      	ldr	r1, [pc, #124]	; (800ea6c <HAL_SAI_MspInit+0x94>)
 800e9ee:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800e9f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e9f4:	6448      	str	r0, [r1, #68]	; 0x44
 800e9f6:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800e9f8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800e9fc:	9101      	str	r1, [sp, #4]
 800e9fe:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 800ea00:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ea02:	a903      	add	r1, sp, #12
 800ea04:	481a      	ldr	r0, [pc, #104]	; (800ea70 <HAL_SAI_MspInit+0x98>)
    /* Peripheral clock enable */
    if (SAI2_client == 0)
    {
      __HAL_RCC_SAI2_CLK_ENABLE();
    }
    SAI2_client ++;
 800ea06:	601a      	str	r2, [r3, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800ea08:	23f0      	movs	r3, #240	; 0xf0
 800ea0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea0c:	2302      	movs	r3, #2
 800ea0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea10:	2300      	movs	r3, #0
 800ea12:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea14:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800ea16:	230a      	movs	r3, #10
 800ea18:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ea1a:	f7f5 fd4f 	bl	80044bc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800ea1e:	6822      	ldr	r2, [r4, #0]
 800ea20:	4b14      	ldr	r3, [pc, #80]	; (800ea74 <HAL_SAI_MspInit+0x9c>)
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d11c      	bne.n	800ea60 <HAL_SAI_MspInit+0x88>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800ea26:	4b10      	ldr	r3, [pc, #64]	; (800ea68 <HAL_SAI_MspInit+0x90>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	b94a      	cbnz	r2, 800ea40 <HAL_SAI_MspInit+0x68>
      {
      __HAL_RCC_SAI2_CLK_ENABLE();
 800ea2c:	490f      	ldr	r1, [pc, #60]	; (800ea6c <HAL_SAI_MspInit+0x94>)
 800ea2e:	6c48      	ldr	r0, [r1, #68]	; 0x44
 800ea30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800ea34:	6448      	str	r0, [r1, #68]	; 0x44
 800ea36:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800ea38:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800ea3c:	9102      	str	r1, [sp, #8]
 800ea3e:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 800ea40:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800ea42:	a903      	add	r1, sp, #12
 800ea44:	480c      	ldr	r0, [pc, #48]	; (800ea78 <HAL_SAI_MspInit+0xa0>)
      /* Peripheral clock enable */
      if (SAI2_client == 0)
      {
      __HAL_RCC_SAI2_CLK_ENABLE();
      }
    SAI2_client ++;
 800ea46:	601a      	str	r2, [r3, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800ea48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea4e:	2302      	movs	r3, #2
 800ea50:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea52:	2300      	movs	r3, #0
 800ea54:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea56:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800ea58:	230a      	movs	r3, #10
 800ea5a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800ea5c:	f7f5 fd2e 	bl	80044bc <HAL_GPIO_Init>

    }
}
 800ea60:	b008      	add	sp, #32
 800ea62:	bd10      	pop	{r4, pc}
 800ea64:	40015c04 	.word	0x40015c04
 800ea68:	20042f44 	.word	0x20042f44
 800ea6c:	40023800 	.word	0x40023800
 800ea70:	40022000 	.word	0x40022000
 800ea74:	40015c24 	.word	0x40015c24
 800ea78:	40021800 	.word	0x40021800

0800ea7c <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{

/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800ea7c:	6802      	ldr	r2, [r0, #0]
 800ea7e:	4b14      	ldr	r3, [pc, #80]	; (800ead0 <HAL_SAI_MspDeInit+0x54>)
 800ea80:	429a      	cmp	r2, r3

    }
}

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 800ea82:	b510      	push	{r4, lr}
 800ea84:	4604      	mov	r4, r0

/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800ea86:	d10d      	bne.n	800eaa4 <HAL_SAI_MspDeInit+0x28>
    {
    SAI2_client --;
 800ea88:	4a12      	ldr	r2, [pc, #72]	; (800ead4 <HAL_SAI_MspDeInit+0x58>)
 800ea8a:	6813      	ldr	r3, [r2, #0]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 800ea90:	b923      	cbnz	r3, 800ea9c <HAL_SAI_MspDeInit+0x20>
      {
      /* Peripheral clock disable */ 
       __HAL_RCC_SAI2_CLK_DISABLE();
 800ea92:	4a11      	ldr	r2, [pc, #68]	; (800ead8 <HAL_SAI_MspDeInit+0x5c>)
 800ea94:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800ea96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ea9a:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 800ea9c:	21f0      	movs	r1, #240	; 0xf0
 800ea9e:	480f      	ldr	r0, [pc, #60]	; (800eadc <HAL_SAI_MspDeInit+0x60>)
 800eaa0:	f7f5 fdf8 	bl	8004694 <HAL_GPIO_DeInit>

    }
    if(hsai->Instance==SAI2_Block_B)
 800eaa4:	6822      	ldr	r2, [r4, #0]
 800eaa6:	4b0e      	ldr	r3, [pc, #56]	; (800eae0 <HAL_SAI_MspDeInit+0x64>)
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d110      	bne.n	800eace <HAL_SAI_MspDeInit+0x52>
    {
    SAI2_client --;
 800eaac:	4a09      	ldr	r2, [pc, #36]	; (800ead4 <HAL_SAI_MspDeInit+0x58>)
 800eaae:	6813      	ldr	r3, [r2, #0]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 800eab4:	b923      	cbnz	r3, 800eac0 <HAL_SAI_MspDeInit+0x44>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 800eab6:	4a08      	ldr	r2, [pc, #32]	; (800ead8 <HAL_SAI_MspDeInit+0x5c>)
 800eab8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800eaba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eabe:	6453      	str	r3, [r2, #68]	; 0x44
      }
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 800eac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eac4:	4807      	ldr	r0, [pc, #28]	; (800eae4 <HAL_SAI_MspDeInit+0x68>)

    }
}
 800eac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      }
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 800eaca:	f7f5 bde3 	b.w	8004694 <HAL_GPIO_DeInit>
 800eace:	bd10      	pop	{r4, pc}
 800ead0:	40015c04 	.word	0x40015c04
 800ead4:	20042f44 	.word	0x20042f44
 800ead8:	40023800 	.word	0x40023800
 800eadc:	40022000 	.word	0x40022000
 800eae0:	40015c24 	.word	0x40015c24
 800eae4:	40021800 	.word	0x40021800

0800eae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eae8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800eaea:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800eaec:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800eaee:	2200      	movs	r2, #0
 800eaf0:	2019      	movs	r0, #25
 800eaf2:	f7f4 fd6b 	bl	80035cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800eaf6:	2019      	movs	r0, #25
 800eaf8:	f7f4 fda0 	bl	800363c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800eafc:	4b14      	ldr	r3, [pc, #80]	; (800eb50 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800eafe:	a901      	add	r1, sp, #4
 800eb00:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800eb02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800eb04:	4c13      	ldr	r4, [pc, #76]	; (800eb54 <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800eb06:	f042 0201 	orr.w	r2, r2, #1
 800eb0a:	645a      	str	r2, [r3, #68]	; 0x44
 800eb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	9302      	str	r3, [sp, #8]
 800eb14:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800eb16:	f7f6 fd45 	bl	80055a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800eb1a:	f7f6 fd2b 	bl	8005574 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800eb1e:	4b0e      	ldr	r3, [pc, #56]	; (800eb58 <HAL_InitTick+0x70>)
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
 800eb20:	0040      	lsls	r0, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800eb22:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800eb24:	f240 33e7 	movw	r3, #999	; 0x3e7
 800eb28:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800eb2a:	4b0c      	ldr	r3, [pc, #48]	; (800eb5c <HAL_InitTick+0x74>)
 800eb2c:	fbb0 f0f3 	udiv	r0, r0, r3
 800eb30:	3801      	subs	r0, #1
  htim1.Init.ClockDivision = 0;
 800eb32:	2300      	movs	r3, #0
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
 800eb34:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800eb36:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800eb38:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb3a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800eb3c:	f7f7 fdb2 	bl	80066a4 <HAL_TIM_Base_Init>
 800eb40:	b918      	cbnz	r0, 800eb4a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800eb42:	4620      	mov	r0, r4
 800eb44:	f7f7 fc8c 	bl	8006460 <HAL_TIM_Base_Start_IT>
 800eb48:	e000      	b.n	800eb4c <HAL_InitTick+0x64>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800eb4a:	2001      	movs	r0, #1
}
 800eb4c:	b008      	add	sp, #32
 800eb4e:	bd10      	pop	{r4, pc}
 800eb50:	40023800 	.word	0x40023800
 800eb54:	200492b0 	.word	0x200492b0
 800eb58:	40010000 	.word	0x40010000
 800eb5c:	000f4240 	.word	0x000f4240

0800eb60 <audioRecorderInit>:
 * @param volume: 0 - mute, 80 - 0 dB, 100 - 17.625 dB
 * @retval AUDIO_OK - no errors
 */
uint8_t audioRecorderInit(uint16_t inputDevice, uint8_t volume,
		uint32_t audioFreq) {
	inputDeviceStat = inputDevice;
 800eb60:	4b02      	ldr	r3, [pc, #8]	; (800eb6c <audioRecorderInit+0xc>)
 800eb62:	8018      	strh	r0, [r3, #0]
	volumeStat = volume;
 800eb64:	4b02      	ldr	r3, [pc, #8]	; (800eb70 <audioRecorderInit+0x10>)
 800eb66:	7019      	strb	r1, [r3, #0]
	audioFreqStat = audioFreq;
	return BSP_AUDIO_IN_Init(inputDevice, volume, audioFreq);
 800eb68:	f7f3 b9ba 	b.w	8001ee0 <BSP_AUDIO_IN_Init>
 800eb6c:	20042f54 	.word	0x20042f54
 800eb70:	20042f4c 	.word	0x20042f4c

0800eb74 <audioRecorderStartRecording>:
 * @brief The function sets the 16 bit audio buffer (must have allocated memory) by \p audioBuffer and \p audioBufferSize.
 * @retval AUDIO_OK - no errors
 */
uint8_t audioRecorderStartRecording(uint16_t* audioBuffer,
		uint32_t audioBufferSize) {
	audioBufferStat = audioBuffer;
 800eb74:	4b02      	ldr	r3, [pc, #8]	; (800eb80 <audioRecorderStartRecording+0xc>)
 800eb76:	6018      	str	r0, [r3, #0]
	audioBufferSizeStat = audioBufferSize;
 800eb78:	4b02      	ldr	r3, [pc, #8]	; (800eb84 <audioRecorderStartRecording+0x10>)
 800eb7a:	6019      	str	r1, [r3, #0]

	return BSP_AUDIO_IN_Record(audioBuffer, audioBufferSize);
 800eb7c:	f7f3 b8d8 	b.w	8001d30 <BSP_AUDIO_IN_Record>
 800eb80:	20042f50 	.word	0x20042f50
 800eb84:	20042f58 	.word	0x20042f58

0800eb88 <audioRecorderSetSamplingFrequency>:
uint8_t audioRecorderSetVolume(uint8_t volume) {
	volumeStat = volume;
	return BSP_AUDIO_IN_SetVolume(volume);
}

uint8_t audioRecorderSetSamplingFrequency(uint32_t frequency) {
 800eb88:	b510      	push	{r4, lr}
 800eb8a:	4604      	mov	r4, r0
	BSP_AUDIO_IN_Pause();
 800eb8c:	f7f3 f8f6 	bl	8001d7c <BSP_AUDIO_IN_Pause>
	BSP_AUDIO_IN_Stop(CODEC_PDWN_HW);
 800eb90:	2001      	movs	r0, #1
 800eb92:	f7f3 f8d7 	bl	8001d44 <BSP_AUDIO_IN_Stop>
	audioFreqStat = frequency;

	uint8_t status = audioRecorderInit(inputDeviceStat, volumeStat,
 800eb96:	4b08      	ldr	r3, [pc, #32]	; (800ebb8 <audioRecorderSetSamplingFrequency+0x30>)
 800eb98:	4622      	mov	r2, r4
 800eb9a:	7819      	ldrb	r1, [r3, #0]
 800eb9c:	4b07      	ldr	r3, [pc, #28]	; (800ebbc <audioRecorderSetSamplingFrequency+0x34>)
 800eb9e:	8818      	ldrh	r0, [r3, #0]
 800eba0:	f7ff ffde 	bl	800eb60 <audioRecorderInit>
			audioFreqStat);
	if (status != AUDIO_OK)
 800eba4:	b938      	cbnz	r0, 800ebb6 <audioRecorderSetSamplingFrequency+0x2e>
		return status;

	return audioRecorderStartRecording(audioBufferStat, audioBufferSizeStat);
 800eba6:	4b06      	ldr	r3, [pc, #24]	; (800ebc0 <audioRecorderSetSamplingFrequency+0x38>)
 800eba8:	6819      	ldr	r1, [r3, #0]
 800ebaa:	4b06      	ldr	r3, [pc, #24]	; (800ebc4 <audioRecorderSetSamplingFrequency+0x3c>)
}
 800ebac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint8_t status = audioRecorderInit(inputDeviceStat, volumeStat,
			audioFreqStat);
	if (status != AUDIO_OK)
		return status;

	return audioRecorderStartRecording(audioBufferStat, audioBufferSizeStat);
 800ebb0:	6818      	ldr	r0, [r3, #0]
 800ebb2:	f7ff bfdf 	b.w	800eb74 <audioRecorderStartRecording>
}
 800ebb6:	bd10      	pop	{r4, pc}
 800ebb8:	20042f4c 	.word	0x20042f4c
 800ebbc:	20042f54 	.word	0x20042f54
 800ebc0:	20042f58 	.word	0x20042f58
 800ebc4:	20042f50 	.word	0x20042f50

0800ebc8 <audioRecordingSoundMailFill>:
 * @param audioBufferSize buffer size
 * @param frequency sampling frequency
 */
void audioRecordingSoundMailFill(SoundMailStr* soundStructure,
		uint16_t* audioBuffer, uint32_t audioBufferSize, uint32_t frequency) {
	soundStructure->frequency = frequency;
 800ebc8:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
	soundStructure->soundBufferSize = audioBufferSize;

	for (uint32_t iterator = 0; iterator < audioBufferSize; iterator++) {
 800ebcc:	2300      	movs	r3, #0
 * @param frequency sampling frequency
 */
void audioRecordingSoundMailFill(SoundMailStr* soundStructure,
		uint16_t* audioBuffer, uint32_t audioBufferSize, uint32_t frequency) {
	soundStructure->frequency = frequency;
	soundStructure->soundBufferSize = audioBufferSize;
 800ebce:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
 * @param audioBuffer 16 bit data array
 * @param audioBufferSize buffer size
 * @param frequency sampling frequency
 */
void audioRecordingSoundMailFill(SoundMailStr* soundStructure,
		uint16_t* audioBuffer, uint32_t audioBufferSize, uint32_t frequency) {
 800ebd2:	b510      	push	{r4, lr}
	soundStructure->frequency = frequency;
	soundStructure->soundBufferSize = audioBufferSize;

	for (uint32_t iterator = 0; iterator < audioBufferSize; iterator++) {
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d005      	beq.n	800ebe4 <audioRecordingSoundMailFill+0x1c>
		soundStructure->soundBuffer[iterator] = audioBuffer[iterator];
 800ebd8:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
 800ebdc:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
void audioRecordingSoundMailFill(SoundMailStr* soundStructure,
		uint16_t* audioBuffer, uint32_t audioBufferSize, uint32_t frequency) {
	soundStructure->frequency = frequency;
	soundStructure->soundBufferSize = audioBufferSize;

	for (uint32_t iterator = 0; iterator < audioBufferSize; iterator++) {
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	e7f7      	b.n	800ebd4 <audioRecordingSoundMailFill+0xc>
		soundStructure->soundBuffer[iterator] = audioBuffer[iterator];
	}
}
 800ebe4:	bd10      	pop	{r4, pc}

0800ebe6 <audioRecordingUpdateSoundBuffer>:
 * @param soundBuffer: pointer to SoundBuffer (destination)
 * @param SoundMail: pointer to SoundMail (source)
 */
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;
 800ebe6:	f242 0304 	movw	r3, #8196	; 0x2004
 800ebea:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 800ebee:	50c2      	str	r2, [r0, r3]
 800ebf0:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 * @brief This function updates the sound buffer using "small" sound package of sound mail.
 * @param soundBuffer: pointer to SoundBuffer (destination)
 * @param SoundMail: pointer to SoundMail (source)
 */
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
 800ebf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebf6:	eb01 0443 	add.w	r4, r1, r3, lsl #1
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
 800ebfa:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
		if (soundBuffer->iterator >= soundBuffer->size)
 800ebfe:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
			soundBuffer->iterator = 0;
 800ec02:	2600      	movs	r6, #0
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
 800ec04:	3308      	adds	r3, #8
 */
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
 800ec06:	42a1      	cmp	r1, r4
 800ec08:	d00c      	beq.n	800ec24 <audioRecordingUpdateSoundBuffer+0x3e>
		soundBuffer->iterator++;
 800ec0a:	681a      	ldr	r2, [r3, #0]
		if (soundBuffer->iterator >= soundBuffer->size)
 800ec0c:	682f      	ldr	r7, [r5, #0]
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
 800ec0e:	3201      	adds	r2, #1
		if (soundBuffer->iterator >= soundBuffer->size)
 800ec10:	42ba      	cmp	r2, r7
void audioRecordingUpdateSoundBuffer(SoundBufferStr* soundBuffer,
		SoundMailStr* soundMail) {
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
 800ec12:	601a      	str	r2, [r3, #0]
		if (soundBuffer->iterator >= soundBuffer->size)
			soundBuffer->iterator = 0;
		soundBuffer->soundBuffer[soundBuffer->iterator] =
				soundMail->soundBuffer[i];
 800ec14:	f831 7b02 	ldrh.w	r7, [r1], #2
	soundBuffer->frequency = soundMail->frequency;

	for (uint32_t i = 0; i < soundMail->soundBufferSize; i++) {
		soundBuffer->iterator++;
		if (soundBuffer->iterator >= soundBuffer->size)
			soundBuffer->iterator = 0;
 800ec18:	bf28      	it	cs
 800ec1a:	601e      	strcs	r6, [r3, #0]
		soundBuffer->soundBuffer[soundBuffer->iterator] =
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	f820 7012 	strh.w	r7, [r0, r2, lsl #1]
 800ec22:	e7f0      	b.n	800ec06 <audioRecordingUpdateSoundBuffer+0x20>
				soundMail->soundBuffer[i];
	}
}
 800ec24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ec28 <printAddress>:
 */
void printAddress(const struct netif* gnetif, uint8_t addressType) {
	char addrType[8];
	char msg[40];
	uint32_t address = 0;
	switch (addressType) {
 800ec28:	2901      	cmp	r1, #1
/**
 * @brief Used for printing the IP, netmask or gateway address
 * @param gnetif: pointer to \ref netif structure
 * @param addressType: type of address (IP_ADDRESS etc.)
 */
void printAddress(const struct netif* gnetif, uint8_t addressType) {
 800ec2a:	b510      	push	{r4, lr}
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	b090      	sub	sp, #64	; 0x40
	char addrType[8];
	char msg[40];
	uint32_t address = 0;
	switch (addressType) {
 800ec30:	d00e      	beq.n	800ec50 <printAddress+0x28>
 800ec32:	d307      	bcc.n	800ec44 <printAddress+0x1c>
 800ec34:	2902      	cmp	r1, #2
 800ec36:	d111      	bne.n	800ec5c <printAddress+0x34>
		strcpy(addrType, "Netmask");
		address = gnetif->netmask.addr;
		break;
	}
	case GATEWAY_ADDRESS: {
		strcpy(addrType, "Gateway");
 800ec38:	4912      	ldr	r1, [pc, #72]	; (800ec84 <printAddress+0x5c>)
 800ec3a:	a804      	add	r0, sp, #16
 800ec3c:	f002 fe74 	bl	8011928 <strcpy>
		address = gnetif->gw.addr;
 800ec40:	68e3      	ldr	r3, [r4, #12]
		break;
 800ec42:	e00c      	b.n	800ec5e <printAddress+0x36>
	char addrType[8];
	char msg[40];
	uint32_t address = 0;
	switch (addressType) {
	case IP_ADDRESS: {
		strcpy(addrType, "IP");
 800ec44:	4910      	ldr	r1, [pc, #64]	; (800ec88 <printAddress+0x60>)
 800ec46:	a804      	add	r0, sp, #16
 800ec48:	f002 fe6e 	bl	8011928 <strcpy>
		address = gnetif->ip_addr.addr;
 800ec4c:	6863      	ldr	r3, [r4, #4]
		break;
 800ec4e:	e006      	b.n	800ec5e <printAddress+0x36>
	}
	case NETMASK_ADDRESS: {
		strcpy(addrType, "Netmask");
 800ec50:	490e      	ldr	r1, [pc, #56]	; (800ec8c <printAddress+0x64>)
 800ec52:	a804      	add	r0, sp, #16
 800ec54:	f002 fe68 	bl	8011928 <strcpy>
		address = gnetif->netmask.addr;
 800ec58:	68a3      	ldr	r3, [r4, #8]
		break;
 800ec5a:	e000      	b.n	800ec5e <printAddress+0x36>
 * @param addressType: type of address (IP_ADDRESS etc.)
 */
void printAddress(const struct netif* gnetif, uint8_t addressType) {
	char addrType[8];
	char msg[40];
	uint32_t address = 0;
 800ec5c:	2300      	movs	r3, #0
		break;
	}
	default:
		break;
	}
	sprintf(msg, "%s address: %d.%d.%d.%d", addrType, (uint8_t) (address),
 800ec5e:	0e1a      	lsrs	r2, r3, #24
 800ec60:	490b      	ldr	r1, [pc, #44]	; (800ec90 <printAddress+0x68>)
 800ec62:	a806      	add	r0, sp, #24
 800ec64:	9202      	str	r2, [sp, #8]
 800ec66:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ec6a:	9201      	str	r2, [sp, #4]
 800ec6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	9200      	str	r2, [sp, #0]
 800ec74:	aa04      	add	r2, sp, #16
 800ec76:	f002 fe25 	bl	80118c4 <sprintf>
			(uint8_t) (address >> 8), (uint8_t) (address >> 16),
			(uint8_t) (address >> 24));
	logMsg(msg);
 800ec7a:	a806      	add	r0, sp, #24
 800ec7c:	f000 f952 	bl	800ef24 <logMsg>
}
 800ec80:	b010      	add	sp, #64	; 0x40
 800ec82:	bd10      	pop	{r4, pc}
 800ec84:	0802cb46 	.word	0x0802cb46
 800ec88:	0802ce41 	.word	0x0802ce41
 800ec8c:	0802cb3e 	.word	0x0802cb3e
 800ec90:	0802cb4e 	.word	0x0802cb4e

0800ec94 <isEthernetCableConnected>:

/**
 * @brief The function checks state of ethernet cable (is it connected or not).
 * @retval \ref ETHERNET_CABLE_NOT_CONNECTED or \ref ETHERNET_CABLE_CONNECTED
 */
uint32_t isEthernetCableConnected() {
 800ec94:	b507      	push	{r0, r1, r2, lr}
	uint32_t val;

	// reads from PHY register
	HAL_ETH_ReadPHYRegister(&EthHandle, 1, &val);
 800ec96:	2101      	movs	r1, #1
 800ec98:	aa01      	add	r2, sp, #4
 800ec9a:	4804      	ldr	r0, [pc, #16]	; (800ecac <isEthernetCableConnected+0x18>)
 800ec9c:	f7f5 fa65 	bl	800416a <HAL_ETH_ReadPHYRegister>
	val = val & (1 << 2);
	return val;
}
 800eca0:	9801      	ldr	r0, [sp, #4]
 800eca2:	f000 0004 	and.w	r0, r0, #4
 800eca6:	b003      	add	sp, #12
 800eca8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ecac:	20049268 	.word	0x20049268

0800ecb0 <isNetconnStatusOk>:
 * @brief The functions checks the returned \ref err_t because sometimes LWIP functions returns \ref ERR_RST if the ethernet cable is disconnected.
 * @param status: error code
 * @retval returns 0 if there are no errors
 */
uint8_t isNetconnStatusOk(err_t status) {
	if (status != ERR_OK && status != ERR_RST)
 800ecb0:	b128      	cbz	r0, 800ecbe <isNetconnStatusOk+0xe>
		return 0;
 800ecb2:	f110 0f0d 	cmn.w	r0, #13
 800ecb6:	bf14      	ite	ne
 800ecb8:	2000      	movne	r0, #0
 800ecba:	2001      	moveq	r0, #1
 800ecbc:	4770      	bx	lr
	return 1;
 800ecbe:	2001      	movs	r0, #1
}
 800ecc0:	4770      	bx	lr

0800ecc2 <udpSend>:
 * @param client: pointer to \ref netconn
 * @param buf: pointer to the beginning of data
 * @param buffSize: data length
 * @retval returns \ref ERR_OK if there are no errors
 */
err_t udpSend(struct netconn *client, void* buf, uint32_t buffSize) {
 800ecc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc4:	460c      	mov	r4, r1
 800ecc6:	4617      	mov	r7, r2
 800ecc8:	4606      	mov	r6, r0
	err_t err;
	struct netbuf* netBuf = netbuf_new();
 800ecca:	f7fa fca2 	bl	8009612 <netbuf_new>
	err = netbuf_ref(netBuf, buf, buffSize);
 800ecce:	4621      	mov	r1, r4
 800ecd0:	b2ba      	uxth	r2, r7
 * @param buffSize: data length
 * @retval returns \ref ERR_OK if there are no errors
 */
err_t udpSend(struct netconn *client, void* buf, uint32_t buffSize) {
	err_t err;
	struct netbuf* netBuf = netbuf_new();
 800ecd2:	4605      	mov	r5, r0
	err = netbuf_ref(netBuf, buf, buffSize);
 800ecd4:	f7fa fcb9 	bl	800964a <netbuf_ref>
	if (err != ERR_OK) {
 800ecd8:	4604      	mov	r4, r0
 800ecda:	b920      	cbnz	r0, 800ece6 <udpSend+0x24>
		netbuf_delete(netBuf);
		return err;
	}
	err = netconn_send(client, netBuf);
 800ecdc:	4629      	mov	r1, r5
 800ecde:	4630      	mov	r0, r6
 800ece0:	f7f9 fe84 	bl	80089ec <netconn_send>
 800ece4:	4604      	mov	r4, r0
	netbuf_delete(netBuf);
 800ece6:	4628      	mov	r0, r5
 800ece8:	f7fa fc9e 	bl	8009628 <netbuf_delete>
	return err;
 800ecec:	4620      	mov	r0, r4
}
 800ecee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ecf0 <sendSpectrum>:
 * @brief The function sends the \p ampStr by UDP to \p client.
 * @param ampStr: pointer to \ref AmplitudeStr
 * @param client: pointer to \ref netconn
 * @retval returns \ref ERR_OK if there are no errors
 */
err_t sendSpectrum(SpectrumStr* ampStr, struct netconn *client) {
 800ecf0:	b508      	push	{r3, lr}
	err_t status;

	if (client != NULL)
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	b161      	cbz	r1, 800ed10 <sendSpectrum+0x20>
		if (client->state != NETCONN_CLOSE) {
 800ecf6:	784a      	ldrb	r2, [r1, #1]
 800ecf8:	2a04      	cmp	r2, #4
 800ecfa:	d009      	beq.n	800ed10 <sendSpectrum+0x20>
			status = udpSend(client, ampStr->amplitudeVector,
 800ecfc:	4601      	mov	r1, r0
 800ecfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff ffdd 	bl	800ecc2 <udpSend>
 800ed08:	4603      	mov	r3, r0
			ETHERNET_AMP_BUFFER_SIZE * sizeof(float32_t));
			if (!isNetconnStatusOk(status))
 800ed0a:	f7ff ffd1 	bl	800ecb0 <isNetconnStatusOk>
 800ed0e:	b108      	cbz	r0, 800ed14 <sendSpectrum+0x24>
				return status;
		}
	return ERR_OK;
 800ed10:	2000      	movs	r0, #0
 800ed12:	bd08      	pop	{r3, pc}
	if (client != NULL)
		if (client->state != NETCONN_CLOSE) {
			status = udpSend(client, ampStr->amplitudeVector,
			ETHERNET_AMP_BUFFER_SIZE * sizeof(float32_t));
			if (!isNetconnStatusOk(status))
				return status;
 800ed14:	4618      	mov	r0, r3
		}
	return ERR_OK;
}
 800ed16:	bd08      	pop	{r3, pc}

0800ed18 <getRequestType>:
/**
 * @brief Returns the request type
 * @param buf: pointer to \ref netbuf structure
 * @retval GET_REQUEST, PUT_REQUEST or NOT_SUPPORTED_REQUEST
 */
uint16_t getRequestType(struct netbuf* buf) {
 800ed18:	b513      	push	{r0, r1, r4, lr}
	void* data;
	uint16_t length;
	netbuf_data(buf, &data, &length);
 800ed1a:	a901      	add	r1, sp, #4
 800ed1c:	f10d 0202 	add.w	r2, sp, #2
 800ed20:	f7fa fcb0 	bl	8009684 <netbuf_data>
	char* fullMsg = (char*) data;
 800ed24:	9c01      	ldr	r4, [sp, #4]

	if (strstr(fullMsg, "GET") != NULL)
 800ed26:	4908      	ldr	r1, [pc, #32]	; (800ed48 <getRequestType+0x30>)
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f002 fe1a 	bl	8011962 <strstr>
 800ed2e:	b940      	cbnz	r0, 800ed42 <getRequestType+0x2a>
		return GET_REQUEST;
	else if (strstr(fullMsg, "PUT") != NULL)
 800ed30:	4906      	ldr	r1, [pc, #24]	; (800ed4c <getRequestType+0x34>)
 800ed32:	4620      	mov	r0, r4
 800ed34:	f002 fe15 	bl	8011962 <strstr>
 800ed38:	2800      	cmp	r0, #0
		return PUT_REQUEST;
	else
		return NOT_SUPPORTED_REQUEST;
 800ed3a:	bf14      	ite	ne
 800ed3c:	2002      	movne	r0, #2
 800ed3e:	2000      	moveq	r0, #0
 800ed40:	e000      	b.n	800ed44 <getRequestType+0x2c>
	uint16_t length;
	netbuf_data(buf, &data, &length);
	char* fullMsg = (char*) data;

	if (strstr(fullMsg, "GET") != NULL)
		return GET_REQUEST;
 800ed42:	2001      	movs	r0, #1
	else if (strstr(fullMsg, "PUT") != NULL)
		return PUT_REQUEST;
	else
		return NOT_SUPPORTED_REQUEST;
}
 800ed44:	b002      	add	sp, #8
 800ed46:	bd10      	pop	{r4, pc}
 800ed48:	0802cb68 	.word	0x0802cb68
 800ed4c:	0802cb6c 	.word	0x0802cb6c

0800ed50 <sendConfiguration>:
 * @brief Sens the device configuration to the client
 * @param config: pointer to \ref StmConfig structure
 * @param client: pointer to \ref netconn structure (represents endpoint client)
 * @retval ERR_OK if there are no errors
 */
err_t sendConfiguration(StmConfig* config, struct netconn* client) {
 800ed50:	b510      	push	{r4, lr}
 800ed52:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
 800ed56:	460c      	mov	r4, r1
	err_t netStatus;

	char configContent[256];
	char configResponse[512];

	stmConfigToString(config, configContent);
 800ed58:	a902      	add	r1, sp, #8
 800ed5a:	f000 f86f 	bl	800ee3c <stmConfigToString>
	sprintf(configResponse, httpOkHeaderPattern, strlen(configContent),
 800ed5e:	a802      	add	r0, sp, #8
 800ed60:	f7f1 fab6 	bl	80002d0 <strlen>
 800ed64:	ab02      	add	r3, sp, #8
 800ed66:	4602      	mov	r2, r0
 800ed68:	4908      	ldr	r1, [pc, #32]	; (800ed8c <sendConfiguration+0x3c>)
 800ed6a:	a842      	add	r0, sp, #264	; 0x108
 800ed6c:	f002 fdaa 	bl	80118c4 <sprintf>
			configContent);

	netStatus = netconn_write(client, configResponse, strlen(configResponse),
 800ed70:	a842      	add	r0, sp, #264	; 0x108
 800ed72:	f7f1 faad 	bl	80002d0 <strlen>
 800ed76:	2300      	movs	r3, #0
 800ed78:	4602      	mov	r2, r0
 800ed7a:	a942      	add	r1, sp, #264	; 0x108
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f7f9 fe46 	bl	8008a10 <netconn_write_partly>
			NETCONN_NOCOPY);
	if (netStatus != ERR_OK)
		return netStatus;
	return netStatus;
}
 800ed84:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 800ed88:	bd10      	pop	{r4, pc}
 800ed8a:	bf00      	nop
 800ed8c:	0802cb78 	.word	0x0802cb78

0800ed90 <sendString>:
	char response[256];
	sprintf(response, httpOkHeaderPattern, 0, "");
	return sendString(client, response);
}

err_t sendString(struct netconn* client, const char* array) {
 800ed90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed92:	4605      	mov	r5, r0
 800ed94:	460c      	mov	r4, r1
	return netconn_write(client, array, strlen(array), NETCONN_NOCOPY);
 800ed96:	4608      	mov	r0, r1
 800ed98:	f7f1 fa9a 	bl	80002d0 <strlen>
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4602      	mov	r2, r0
 800eda0:	4621      	mov	r1, r4
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	4628      	mov	r0, r5
 800eda6:	f7f9 fe33 	bl	8008a10 <netconn_write_partly>
}
 800edaa:	b003      	add	sp, #12
 800edac:	bd30      	pop	{r4, r5, pc}
	...

0800edb0 <sendHttpOk>:
	if (netStatus != ERR_OK)
		return netStatus;
	return netStatus;
}

err_t sendHttpOk(struct netconn* client) {
 800edb0:	b510      	push	{r4, lr}
 800edb2:	b0c0      	sub	sp, #256	; 0x100
 800edb4:	4604      	mov	r4, r0
	char response[256];
	sprintf(response, httpOkHeaderPattern, 0, "");
 800edb6:	4b06      	ldr	r3, [pc, #24]	; (800edd0 <sendHttpOk+0x20>)
 800edb8:	2200      	movs	r2, #0
 800edba:	4906      	ldr	r1, [pc, #24]	; (800edd4 <sendHttpOk+0x24>)
 800edbc:	4668      	mov	r0, sp
 800edbe:	f002 fd81 	bl	80118c4 <sprintf>
	return sendString(client, response);
 800edc2:	4669      	mov	r1, sp
 800edc4:	4620      	mov	r0, r4
 800edc6:	f7ff ffe3 	bl	800ed90 <sendString>
}
 800edca:	b040      	add	sp, #256	; 0x100
 800edcc:	bd10      	pop	{r4, pc}
 800edce:	bf00      	nop
 800edd0:	0802d173 	.word	0x0802d173
 800edd4:	0802cb78 	.word	0x0802cb78

0800edd8 <isConfigRequest>:
/**
 * @brief Check if the request includes '/config' text
 * @param buf: pointer to \ref netbuf structure
 * @retval 1 if request includes '/config'
 */
uint8_t isConfigRequest(struct netbuf* buf) {
 800edd8:	b507      	push	{r0, r1, r2, lr}
	void* data;
	uint16_t length;
	netbuf_data(buf, &data, &length);
 800edda:	f10d 0202 	add.w	r2, sp, #2
 800edde:	a901      	add	r1, sp, #4
 800ede0:	f7fa fc50 	bl	8009684 <netbuf_data>
	char* fullMsg = (char*) data;

	if (strstr(fullMsg, "/config") != NULL)
 800ede4:	4904      	ldr	r1, [pc, #16]	; (800edf8 <isConfigRequest+0x20>)
 800ede6:	9801      	ldr	r0, [sp, #4]
 800ede8:	f002 fdbb 	bl	8011962 <strstr>
		return 1;
	return 0;
}
 800edec:	3000      	adds	r0, #0
 800edee:	bf18      	it	ne
 800edf0:	2001      	movne	r0, #1
 800edf2:	b003      	add	sp, #12
 800edf4:	f85d fb04 	ldr.w	pc, [sp], #4
 800edf8:	0802cb70 	.word	0x0802cb70

0800edfc <parseJSON>:
#include "jsonConfiguration.h"

/**
 * @brief Parses \netbuf (JSON data) to \StmConfig structure
 */
void parseJSON(struct netbuf* buf, StmConfig* config) {
 800edfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edfe:	460d      	mov	r5, r1
	void* data;
	uint16_t length;
	netbuf_data(buf, &data, &length);
 800ee00:	f10d 0202 	add.w	r2, sp, #2
 800ee04:	a901      	add	r1, sp, #4
 800ee06:	f7fa fc3d 	bl	8009684 <netbuf_data>
	char* jsonData = (char*) data;

	cJSON* parser = cJSON_Parse(jsonData);
 800ee0a:	9801      	ldr	r0, [sp, #4]
 800ee0c:	f002 fa3e 	bl	801128c <cJSON_Parse>
	/*config->started = cJSON_GetObjectItem(parser, "Started")->valueint;
	 char* udpEndpoint =
	 cJSON_GetObjectItem(parser, "UdpEndpointIP")->valuestring;
	 config->udpEndpointPort =
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
 800ee10:	4908      	ldr	r1, [pc, #32]	; (800ee34 <parseJSON+0x38>)
	void* data;
	uint16_t length;
	netbuf_data(buf, &data, &length);
	char* jsonData = (char*) data;

	cJSON* parser = cJSON_Parse(jsonData);
 800ee12:	4604      	mov	r4, r0
	/*config->started = cJSON_GetObjectItem(parser, "Started")->valueint;
	 char* udpEndpoint =
	 cJSON_GetObjectItem(parser, "UdpEndpointIP")->valuestring;
	 config->udpEndpointPort =
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
 800ee14:	f002 fa43 	bl	801129e <cJSON_GetObjectItem>
 800ee18:	6943      	ldr	r3, [r0, #20]
			"AmplitudeSamplingDelay")->valueint;
	config->audioSamplingFrequency = cJSON_GetObjectItem(parser,
 800ee1a:	4907      	ldr	r1, [pc, #28]	; (800ee38 <parseJSON+0x3c>)
 800ee1c:	4620      	mov	r0, r4
	/*config->started = cJSON_GetObjectItem(parser, "Started")->valueint;
	 char* udpEndpoint =
	 cJSON_GetObjectItem(parser, "UdpEndpointIP")->valuestring;
	 config->udpEndpointPort =
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
 800ee1e:	702b      	strb	r3, [r5, #0]
			"AmplitudeSamplingDelay")->valueint;
	config->audioSamplingFrequency = cJSON_GetObjectItem(parser,
 800ee20:	f002 fa3d 	bl	801129e <cJSON_GetObjectItem>
 800ee24:	6943      	ldr	r3, [r0, #20]
	 "SamplingFrequency")->valueint;

	 /*sscanf(udpEndpoint, "%d.%d.%d.%d", (int*)&(config->udpEndpointAddr[0]),
	 (int*)&(config->udpEndpointAddr[1]), (int*)&(config->udpEndpointAddr[2]),
	 (int*)&(config->udpEndpointAddr[3]));*/
	cJSON_Delete(parser);
 800ee26:	4620      	mov	r0, r4
	 cJSON_GetObjectItem(parser, "UdpEndpointIP")->valuestring;
	 config->udpEndpointPort =
	 cJSON_GetObjectItem(parser, "UdpEndpointPort")->valueint;*/
	config->amplitudeSamplingDelay = cJSON_GetObjectItem(parser,
			"AmplitudeSamplingDelay")->valueint;
	config->audioSamplingFrequency = cJSON_GetObjectItem(parser,
 800ee28:	606b      	str	r3, [r5, #4]
	 "SamplingFrequency")->valueint;

	 /*sscanf(udpEndpoint, "%d.%d.%d.%d", (int*)&(config->udpEndpointAddr[0]),
	 (int*)&(config->udpEndpointAddr[1]), (int*)&(config->udpEndpointAddr[2]),
	 (int*)&(config->udpEndpointAddr[3]));*/
	cJSON_Delete(parser);
 800ee2a:	f002 f9d5 	bl	80111d8 <cJSON_Delete>
}
 800ee2e:	b003      	add	sp, #12
 800ee30:	bd30      	pop	{r4, r5, pc}
 800ee32:	bf00      	nop
 800ee34:	0802cbd0 	.word	0x0802cbd0
 800ee38:	0802cbe7 	.word	0x0802cbe7

0800ee3c <stmConfigToString>:
/**
 * @brief Converts \ref StmConfig structure to JSON string
 * @param config: pointer to \ref StmConfig structure
 * @param str: pointer to output of the JSON string (must have allocated memory)
 */
void stmConfigToString(StmConfig* config, char* str) {
 800ee3c:	b570      	push	{r4, r5, r6, lr}
 800ee3e:	4606      	mov	r6, r0
 800ee40:	460d      	mov	r5, r1
	cJSON *jsonCreator;
	jsonCreator = cJSON_CreateObject();
 800ee42:	f002 fa74 	bl	801132e <cJSON_CreateObject>
 800ee46:	4604      	mov	r4, r0
	/*cJSON_AddBoolToObject(jsonCreator, "Started", config->started);
	 cJSON_AddNumberToObject(jsonCreator, "UdpEndpointPort",
	 config->udpEndpointPort);
	 cJSON_AddNumberToObject(jsonCreator, "FrequencyResolution",
	 config->frequencyResolution);*/
	cJSON_AddNumberToObject(jsonCreator, "AmplitudeSamplingDelay",
 800ee48:	7830      	ldrb	r0, [r6, #0]
 800ee4a:	f7f1 fbdb 	bl	8000604 <__aeabi_ui2d>
 800ee4e:	ec41 0b10 	vmov	d0, r0, r1
 800ee52:	f002 fa57 	bl	8011304 <cJSON_CreateNumber>
 800ee56:	4908      	ldr	r1, [pc, #32]	; (800ee78 <stmConfigToString+0x3c>)
 800ee58:	4602      	mov	r2, r0
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f002 fa3a 	bl	80112d4 <cJSON_AddItemToObject>
	 sprintf(ip, "%d.%d.%d.%d", config->udpEndpointAddr[0],
	 config->udpEndpointAddr[1], config->udpEndpointAddr[2],
	 config->udpEndpointAddr[3]);
	 cJSON_AddStringToObject(jsonCreator, "UdpEndpointIP", ip);*/

	strcpy(str, cJSON_Print(jsonCreator));
 800ee60:	4620      	mov	r0, r4
 800ee62:	f002 fa17 	bl	8011294 <cJSON_Print>
 800ee66:	4601      	mov	r1, r0
 800ee68:	4628      	mov	r0, r5
 800ee6a:	f002 fd5d 	bl	8011928 <strcpy>
	cJSON_Delete(jsonCreator);
 800ee6e:	4620      	mov	r0, r4
}
 800ee70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 config->udpEndpointAddr[1], config->udpEndpointAddr[2],
	 config->udpEndpointAddr[3]);
	 cJSON_AddStringToObject(jsonCreator, "UdpEndpointIP", ip);*/

	strcpy(str, cJSON_Print(jsonCreator));
	cJSON_Delete(jsonCreator);
 800ee74:	f002 b9b0 	b.w	80111d8 <cJSON_Delete>
 800ee78:	0802cbd0 	.word	0x0802cbd0

0800ee7c <copyConfig>:
 * @brief Copies \ref StmConfig structure to another \ref StmConfig structure
 * @param destination: pointer (output) to \ref StmConfig structure
 * @param source: pointer to \ref StmConfig structure
 */
void copyConfig(StmConfig* destination, StmConfig* source) {
	destination->amplitudeSamplingDelay = source->amplitudeSamplingDelay;
 800ee7c:	780b      	ldrb	r3, [r1, #0]
 800ee7e:	7003      	strb	r3, [r0, #0]
	destination->audioSamplingFrequency = source->audioSamplingFrequency;
 800ee80:	684b      	ldr	r3, [r1, #4]
 800ee82:	6043      	str	r3, [r0, #4]
 800ee84:	4770      	bx	lr
	...

0800ee88 <disp>:
/**
 * @brief Displays the \p msg
 * @param msg: text message
 * @param col: font color
 */
static void disp(char* msg, uint32_t col) {
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	4604      	mov	r4, r0
	BSP_LCD_SetTextColor(col);
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	f7f3 f8f3 	bl	8002078 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(row++, (uint8_t*) msg);
 800ee92:	4b05      	ldr	r3, [pc, #20]	; (800eea8 <disp+0x20>)
 800ee94:	4621      	mov	r1, r4
 800ee96:	6818      	ldr	r0, [r3, #0]
 800ee98:	1c42      	adds	r2, r0, #1
 800ee9a:	b280      	uxth	r0, r0
}
 800ee9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @param msg: text message
 * @param col: font color
 */
static void disp(char* msg, uint32_t col) {
	BSP_LCD_SetTextColor(col);
	BSP_LCD_DisplayStringAtLine(row++, (uint8_t*) msg);
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	f7f3 b9f3 	b.w	800228c <BSP_LCD_DisplayStringAtLine>
 800eea6:	bf00      	nop
 800eea8:	20042f5c 	.word	0x20042f5c

0800eeac <updateRow>:

/**
 * @brief Checks if the row is too large
 */
static void updateRow() {
	if (row > LOG_MAX_ROWS) {
 800eeac:	4b05      	ldr	r3, [pc, #20]	; (800eec4 <updateRow+0x18>)
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	2a16      	cmp	r2, #22
 800eeb2:	dd05      	ble.n	800eec0 <updateRow+0x14>
		row = 0;
 800eeb4:	2200      	movs	r2, #0
		BSP_LCD_Clear(LOG_BACKGROUND_COLOR);
 800eeb6:	f04f 30ff 	mov.w	r0, #4294967295
/**
 * @brief Checks if the row is too large
 */
static void updateRow() {
	if (row > LOG_MAX_ROWS) {
		row = 0;
 800eeba:	601a      	str	r2, [r3, #0]
		BSP_LCD_Clear(LOG_BACKGROUND_COLOR);
 800eebc:	f7f3 b8f4 	b.w	80020a8 <BSP_LCD_Clear>
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	20042f5c 	.word	0x20042f5c

0800eec8 <lcdInit>:
}

/**
 * @brief Initializes LCD logging feature. At first initializes and clears the LCD. Then allocates memory for \ref fullMsg.
 */
void lcdInit() {
 800eec8:	b510      	push	{r4, lr}
	BSP_LCD_Init();
 800eeca:	f7f3 fac3 	bl	8002454 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800eece:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800eed2:	2000      	movs	r0, #0
	BSP_LCD_Clear(LOG_BACKGROUND_COLOR);
	BSP_LCD_SetTextColor(LOG_FONT_COLOR);
	BSP_LCD_SetFont(LOG_FONT);

	row = 0;
	if (flag == 0) {
 800eed4:	4c0f      	ldr	r4, [pc, #60]	; (800ef14 <lcdInit+0x4c>)
/**
 * @brief Initializes LCD logging feature. At first initializes and clears the LCD. Then allocates memory for \ref fullMsg.
 */
void lcdInit() {
	BSP_LCD_Init();
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800eed6:	f7f3 f88d 	bl	8001ff4 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 800eeda:	2000      	movs	r0, #0
 800eedc:	f7f3 f8c6 	bl	800206c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 800eee0:	f7f3 f9ec 	bl	80022bc <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LOG_BACKGROUND_COLOR);
 800eee4:	f04f 30ff 	mov.w	r0, #4294967295
 800eee8:	f7f3 f8de 	bl	80020a8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LOG_FONT_COLOR);
 800eeec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800eef0:	f7f3 f8c2 	bl	8002078 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(LOG_FONT);
 800eef4:	4808      	ldr	r0, [pc, #32]	; (800ef18 <lcdInit+0x50>)
 800eef6:	f7f3 f8cb 	bl	8002090 <BSP_LCD_SetFont>

	row = 0;
 800eefa:	4b08      	ldr	r3, [pc, #32]	; (800ef1c <lcdInit+0x54>)
 800eefc:	2200      	movs	r2, #0
 800eefe:	601a      	str	r2, [r3, #0]
	if (flag == 0) {
 800ef00:	6823      	ldr	r3, [r4, #0]
 800ef02:	b933      	cbnz	r3, 800ef12 <lcdInit+0x4a>
		fullMsg = malloc(LOG_MAX_MESSAGE_LENGTH);
 800ef04:	2032      	movs	r0, #50	; 0x32
 800ef06:	f002 fa3f 	bl	8011388 <malloc>
 800ef0a:	4b05      	ldr	r3, [pc, #20]	; (800ef20 <lcdInit+0x58>)
 800ef0c:	6018      	str	r0, [r3, #0]
		flag = 1;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	6023      	str	r3, [r4, #0]
 800ef12:	bd10      	pop	{r4, pc}
 800ef14:	20042f64 	.word	0x20042f64
 800ef18:	20010030 	.word	0x20010030
 800ef1c:	20042f5c 	.word	0x20042f5c
 800ef20:	20042f60 	.word	0x20042f60

0800ef24 <logMsg>:

/**
 * @brief The function displays info \p msg on the LCD in the next row.
 * @param msg: log message
 */
void logMsg(char* msg) {
 800ef24:	b510      	push	{r4, lr}
 800ef26:	4604      	mov	r4, r0
	updateRow();
 800ef28:	f7ff ffc0 	bl	800eeac <updateRow>
	disp(msg, LOG_FONT_COLOR);
 800ef2c:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 800ef30:	4620      	mov	r0, r4
}
 800ef32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @brief The function displays info \p msg on the LCD in the next row.
 * @param msg: log message
 */
void logMsg(char* msg) {
	updateRow();
	disp(msg, LOG_FONT_COLOR);
 800ef36:	f7ff bfa7 	b.w	800ee88 <disp>
	...

0800ef3c <logErr>:

/**
 * @brief The function displays error \p msg on the LCD in the next row.
 * @param msg: log message
 */
void logErr(char* msg) {
 800ef3c:	b510      	push	{r4, lr}
 800ef3e:	4604      	mov	r4, r0
	updateRow();
 800ef40:	f7ff ffb4 	bl	800eeac <updateRow>
	disp(msg, LCD_COLOR_RED);
 800ef44:	4902      	ldr	r1, [pc, #8]	; (800ef50 <logErr+0x14>)
 800ef46:	4620      	mov	r0, r4
}
 800ef48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * @brief The function displays error \p msg on the LCD in the next row.
 * @param msg: log message
 */
void logErr(char* msg) {
	updateRow();
	disp(msg, LCD_COLOR_RED);
 800ef4c:	f7ff bf9c 	b.w	800ee88 <disp>
 800ef50:	ffff0000 	.word	0xffff0000

0800ef54 <logMsgVal>:
/**
 * @brief The function displays info \p msg concatenated with \val number on the LCD in the next row .
 * @param msg: log message
 * @param val: value to concatenate
 */
void logMsgVal(char* msg, int val) {
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	4605      	mov	r5, r0
 800ef58:	460e      	mov	r6, r1
	updateRow();
	sprintf(fullMsg, "%s%d", msg, val);
 800ef5a:	4c08      	ldr	r4, [pc, #32]	; (800ef7c <logMsgVal+0x28>)
 * @brief The function displays info \p msg concatenated with \val number on the LCD in the next row .
 * @param msg: log message
 * @param val: value to concatenate
 */
void logMsgVal(char* msg, int val) {
	updateRow();
 800ef5c:	f7ff ffa6 	bl	800eeac <updateRow>
	sprintf(fullMsg, "%s%d", msg, val);
 800ef60:	4633      	mov	r3, r6
 800ef62:	462a      	mov	r2, r5
 800ef64:	4906      	ldr	r1, [pc, #24]	; (800ef80 <logMsgVal+0x2c>)
 800ef66:	6820      	ldr	r0, [r4, #0]
 800ef68:	f002 fcac 	bl	80118c4 <sprintf>
	disp(fullMsg, LOG_FONT_COLOR);
 800ef6c:	6820      	ldr	r0, [r4, #0]
 800ef6e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
}
 800ef72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param val: value to concatenate
 */
void logMsgVal(char* msg, int val) {
	updateRow();
	sprintf(fullMsg, "%s%d", msg, val);
	disp(fullMsg, LOG_FONT_COLOR);
 800ef76:	f7ff bf87 	b.w	800ee88 <disp>
 800ef7a:	bf00      	nop
 800ef7c:	20042f60 	.word	0x20042f60
 800ef80:	0802cbf9 	.word	0x0802cbf9

0800ef84 <logErrVal>:
/**
 * @brief The function displays error \p msg concatenated with \val number on the LCD in the next row .
 * @param msg: log message
 * @param val: value to concatenate
 */
void logErrVal(char* msg, int val) {
 800ef84:	b570      	push	{r4, r5, r6, lr}
 800ef86:	4605      	mov	r5, r0
 800ef88:	460e      	mov	r6, r1
	updateRow();
	sprintf(fullMsg, "%s%d", msg, val);
 800ef8a:	4c07      	ldr	r4, [pc, #28]	; (800efa8 <logErrVal+0x24>)
 * @brief The function displays error \p msg concatenated with \val number on the LCD in the next row .
 * @param msg: log message
 * @param val: value to concatenate
 */
void logErrVal(char* msg, int val) {
	updateRow();
 800ef8c:	f7ff ff8e 	bl	800eeac <updateRow>
	sprintf(fullMsg, "%s%d", msg, val);
 800ef90:	4633      	mov	r3, r6
 800ef92:	462a      	mov	r2, r5
 800ef94:	4905      	ldr	r1, [pc, #20]	; (800efac <logErrVal+0x28>)
 800ef96:	6820      	ldr	r0, [r4, #0]
 800ef98:	f002 fc94 	bl	80118c4 <sprintf>
	disp(fullMsg, LCD_COLOR_RED);
 800ef9c:	6820      	ldr	r0, [r4, #0]
 800ef9e:	4904      	ldr	r1, [pc, #16]	; (800efb0 <logErrVal+0x2c>)
}
 800efa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param val: value to concatenate
 */
void logErrVal(char* msg, int val) {
	updateRow();
	sprintf(fullMsg, "%s%d", msg, val);
	disp(fullMsg, LCD_COLOR_RED);
 800efa4:	f7ff bf70 	b.w	800ee88 <disp>
 800efa8:	20042f60 	.word	0x20042f60
 800efac:	0802cbf9 	.word	0x0802cbf9
 800efb0:	ffff0000 	.word	0xffff0000

0800efb4 <MX_LWIP_Init>:
/* USER CODE END 2 */

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
 800efb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 800efb6:	2100      	movs	r1, #0
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2,
			NETMASK_ADDR3);
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&ethernetInterfaceHandler, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 800efb8:	4c0f      	ldr	r4, [pc, #60]	; (800eff8 <MX_LWIP_Init+0x44>)
/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 800efba:	4608      	mov	r0, r1
 800efbc:	f7fa fbf0 	bl	80097a0 <tcpip_init>

	/* IP addresses initialization with DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800efc0:	490e      	ldr	r1, [pc, #56]	; (800effc <MX_LWIP_Init+0x48>)
 800efc2:	4b0f      	ldr	r3, [pc, #60]	; (800f000 <MX_LWIP_Init+0x4c>)
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2,
 800efc4:	4a0f      	ldr	r2, [pc, #60]	; (800f004 <MX_LWIP_Init+0x50>)
void MX_LWIP_Init(void) {
	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);

	/* IP addresses initialization with DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 800efc6:	600b      	str	r3, [r1, #0]
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2,
 800efc8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
			NETMASK_ADDR3);
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800efcc:	480e      	ldr	r0, [pc, #56]	; (800f008 <MX_LWIP_Init+0x54>)
	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);

	/* IP addresses initialization with DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
	IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2,
 800efce:	6013      	str	r3, [r2, #0]
			NETMASK_ADDR3);
	IP4_ADDR(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 800efd0:	4b0e      	ldr	r3, [pc, #56]	; (800f00c <MX_LWIP_Init+0x58>)
 800efd2:	6018      	str	r0, [r3, #0]

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&ethernetInterfaceHandler, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 800efd4:	480e      	ldr	r0, [pc, #56]	; (800f010 <MX_LWIP_Init+0x5c>)
 800efd6:	9002      	str	r0, [sp, #8]
 800efd8:	480e      	ldr	r0, [pc, #56]	; (800f014 <MX_LWIP_Init+0x60>)
 800efda:	9001      	str	r0, [sp, #4]
 800efdc:	2000      	movs	r0, #0
 800efde:	9000      	str	r0, [sp, #0]
 800efe0:	4620      	mov	r0, r4
 800efe2:	f7fb ffc3 	bl	800af6c <netif_add>
			&tcpip_input);

	/* Registers the default network interface */
	netif_set_default(&ethernetInterfaceHandler);
 800efe6:	4620      	mov	r0, r4
 800efe8:	f7fb ffec 	bl	800afc4 <netif_set_default>

	//if (netif_is_link_up(&gnetif)) {
		/* When the netif is fully configured this function must be called */
		netif_set_up(&ethernetInterfaceHandler);
 800efec:	4620      	mov	r0, r4
	//	netif_set_down(&gnetif);
	//}
	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 800efee:	b004      	add	sp, #16
 800eff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	/* Registers the default network interface */
	netif_set_default(&ethernetInterfaceHandler);

	//if (netif_is_link_up(&gnetif)) {
		/* When the netif is fully configured this function must be called */
		netif_set_up(&ethernetInterfaceHandler);
 800eff4:	f7fb bfec 	b.w	800afd0 <netif_set_up>
 800eff8:	2004956c 	.word	0x2004956c
 800effc:	20049444 	.word	0x20049444
 800f000:	0b01a8c0 	.word	0x0b01a8c0
 800f004:	200494f0 	.word	0x200494f0
 800f008:	0101a8c0 	.word	0x0101a8c0
 800f00c:	200494f4 	.word	0x200494f4
 800f010:	0800971d 	.word	0x0800971d
 800f014:	0800e641 	.word	0x0800e641

0800f018 <main>:
#include "main.h"

/**
 * Main function
 */
int main(void) {
 800f018:	b508      	push	{r3, lr}
	/* CORE INITIALIZATION */

	/* HAL initialization */
	HAL_Init();
 800f01a:	f7f4 fa9d 	bl	8003558 <HAL_Init>

	/* Setting the system clock */
	SystemClock_Config();
 800f01e:	f000 f805 	bl	800f02c <SystemClock_Config>

	/* Initializing threads */
	threadsInit();
 800f022:	f001 f85b 	bl	80100dc <threadsInit>

	/* Tasks scheduler start */
	osKernelStart();
 800f026:	f7f7 fc0e 	bl	8006846 <osKernelStart>
 800f02a:	e7fe      	b.n	800f02a <main+0x12>

0800f02c <SystemClock_Config>:

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 800f02c:	4b30      	ldr	r3, [pc, #192]	; (800f0f0 <SystemClock_Config+0xc4>)
 800f02e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f030:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000

#include "mcuConfig.h"

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 800f034:	b570      	push	{r4, r5, r6, lr}

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 800f036:	641a      	str	r2, [r3, #64]	; 0x40

#include "mcuConfig.h"

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 800f038:	b0b4      	sub	sp, #208	; 0xd0

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 800f03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f03c:	2402      	movs	r4, #2
//	RCC_OscInitStruct.PLL.PLLM = 8;
//	RCC_OscInitStruct.PLL.PLLN = 180;
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f03e:	2601      	movs	r6, #1
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 400;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 8;

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800f040:	a807      	add	r0, sp, #28

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
 800f042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	9b00      	ldr	r3, [sp, #0]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f04a:	4b2a      	ldr	r3, [pc, #168]	; (800f0f4 <SystemClock_Config+0xc8>)
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800f052:	601a      	str	r2, [r3, #0]
 800f054:	681b      	ldr	r3, [r3, #0]
//	RCC_OscInitStruct.PLL.PLLM = 8;
//	RCC_OscInitStruct.PLL.PLLN = 180;
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f056:	9607      	str	r6, [sp, #28]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f05c:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 25;
	RCC_OscInitStruct.PLL.PLLN = 400;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f05e:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	__HAL_RCC_PWR_CLK_ENABLE()
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f060:	9301      	str	r3, [sp, #4]
 800f062:	9b01      	ldr	r3, [sp, #4]
//	RCC_OscInitStruct.PLL.PLLN = 180;
//	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
//	RCC_OscInitStruct.PLL.PLLQ = 2;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f068:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f06a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f06e:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 25;
 800f070:	2319      	movs	r3, #25
 800f072:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 400;
 800f074:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f078:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 8;
 800f07a:	2308      	movs	r3, #8
 800f07c:	9312      	str	r3, [sp, #72]	; 0x48

	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800f07e:	f7f5 fff1 	bl	8005064 <HAL_RCC_OscConfig>
 800f082:	b100      	cbz	r0, 800f086 <SystemClock_Config+0x5a>
 800f084:	e7fe      	b.n	800f084 <SystemClock_Config+0x58>

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f086:	f44f 53a0 	mov.w	r3, #5120	; 0x1400

//	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
//		Error_Handler();
//	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800f08a:	250f      	movs	r5, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f08c:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800f08e:	2105      	movs	r1, #5

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f090:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800f096:	a802      	add	r0, sp, #8

//	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
//		Error_Handler();
//	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800f098:	9502      	str	r5, [sp, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f09a:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f09c:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800f09e:	f7f6 f9b9 	bl	8005414 <HAL_RCC_ClockConfig>
 800f0a2:	b100      	cbz	r0, 800f0a6 <SystemClock_Config+0x7a>
 800f0a4:	e7fe      	b.n	800f0a4 <SystemClock_Config+0x78>
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800f0a6:	4b14      	ldr	r3, [pc, #80]	; (800f0f8 <SystemClock_Config+0xcc>)
			| RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800f0a8:	901b      	str	r0, [sp, #108]	; 0x6c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800f0aa:	9313      	str	r3, [sp, #76]	; 0x4c
			| RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 800f0ac:	23d8      	movs	r3, #216	; 0xd8
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
	PeriphClkInitStruct.PLLSAIDivQ = 1;
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800f0ae:	901e      	str	r0, [sp, #120]	; 0x78
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800f0b0:	9023      	str	r0, [sp, #140]	; 0x8c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800f0b2:	902e      	str	r0, [sp, #184]	; 0xb8
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800f0b4:	a813      	add	r0, sp, #76	; 0x4c
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
			| RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800f0b6:	941a      	str	r4, [sp, #104]	; 0x68
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800f0b8:	9419      	str	r4, [sp, #100]	; 0x64
		Error_Handler();
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
			| RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 216;
 800f0ba:	9318      	str	r3, [sp, #96]	; 0x60
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800f0bc:	961d      	str	r6, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800f0be:	f7f6 fa8f 	bl	80055e0 <HAL_RCCEx_PeriphCLKConfig>
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	b100      	cbz	r0, 800f0c8 <SystemClock_Config+0x9c>
 800f0c6:	e7fe      	b.n	800f0c6 <SystemClock_Config+0x9a>
		Error_Handler();
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800f0c8:	f7f6 fa4e 	bl	8005568 <HAL_RCC_GetHCLKFreq>
 800f0cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f0d0:	fbb0 f0f3 	udiv	r0, r0, r3
 800f0d4:	f7f4 fabe 	bl	8003654 <HAL_SYSTICK_Config>

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800f0d8:	2004      	movs	r0, #4
 800f0da:	f7f4 fad1 	bl	8003680 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800f0de:	4622      	mov	r2, r4
 800f0e0:	4629      	mov	r1, r5
 800f0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e6:	f7f4 fa71 	bl	80035cc <HAL_NVIC_SetPriority>
}
 800f0ea:	b034      	add	sp, #208	; 0xd0
 800f0ec:	bd70      	pop	{r4, r5, r6, pc}
 800f0ee:	bf00      	nop
 800f0f0:	40023800 	.word	0x40023800
 800f0f4:	40007000 	.word	0x40007000
 800f0f8:	00110008 	.word	0x00110008

0800f0fc <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void) {
 800f0fc:	b510      	push	{r4, lr}

	hdma2d.Instance = DMA2D;
 800f0fe:	4b0c      	ldr	r3, [pc, #48]	; (800f130 <MX_DMA2D_Init+0x34>)
	hdma2d.Init.Mode = DMA2D_M2M;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800f100:	2202      	movs	r2, #2
}

/* DMA2D init function */
void MX_DMA2D_Init(void) {

	hdma2d.Instance = DMA2D;
 800f102:	4c0c      	ldr	r4, [pc, #48]	; (800f134 <MX_DMA2D_Init+0x38>)
 800f104:	6023      	str	r3, [r4, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800f106:	2300      	movs	r3, #0
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
	hdma2d.Init.OutputOffset = 0;
	hdma2d.LayerCfg[1].InputOffset = 0;
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800f108:	62e2      	str	r2, [r4, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
	hdma2d.LayerCfg[1].InputAlpha = 0;
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800f10a:	4620      	mov	r0, r4

	hdma2d.Instance = DMA2D;
	hdma2d.Init.Mode = DMA2D_M2M;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
	hdma2d.Init.OutputOffset = 0;
	hdma2d.LayerCfg[1].InputOffset = 0;
 800f10c:	62a3      	str	r3, [r4, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800f10e:	6323      	str	r3, [r4, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800f110:	6363      	str	r3, [r4, #52]	; 0x34

/* DMA2D init function */
void MX_DMA2D_Init(void) {

	hdma2d.Instance = DMA2D;
	hdma2d.Init.Mode = DMA2D_M2M;
 800f112:	6063      	str	r3, [r4, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800f114:	60a2      	str	r2, [r4, #8]
	hdma2d.Init.OutputOffset = 0;
 800f116:	60e3      	str	r3, [r4, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
	hdma2d.LayerCfg[1].InputAlpha = 0;
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800f118:	f7f4 fd00 	bl	8003b1c <HAL_DMA2D_Init>
 800f11c:	b100      	cbz	r0, 800f120 <MX_DMA2D_Init+0x24>
 800f11e:	e7fe      	b.n	800f11e <MX_DMA2D_Init+0x22>
		Error_Handler();
	}

	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 800f120:	2101      	movs	r1, #1
 800f122:	4620      	mov	r0, r4
 800f124:	f7f4 fdc6 	bl	8003cb4 <HAL_DMA2D_ConfigLayer>
 800f128:	b100      	cbz	r0, 800f12c <MX_DMA2D_Init+0x30>
 800f12a:	e7fe      	b.n	800f12a <MX_DMA2D_Init+0x2e>
 800f12c:	bd10      	pop	{r4, pc}
 800f12e:	bf00      	nop
 800f130:	4002b000 	.word	0x4002b000
 800f134:	200494f8 	.word	0x200494f8

0800f138 <MX_LTDC_Init>:
	}

}

/* LTDC init function */
void MX_LTDC_Init(void) {
 800f138:	b570      	push	{r4, r5, r6, lr}
	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
 800f13a:	2207      	movs	r2, #7
void MX_LTDC_Init(void) {

	LTDC_LayerCfgTypeDef pLayerCfg;
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
 800f13c:	4c2e      	ldr	r4, [pc, #184]	; (800f1f8 <MX_LTDC_Init+0xc0>)
 800f13e:	4b2f      	ldr	r3, [pc, #188]	; (800f1fc <MX_LTDC_Init+0xc4>)
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
 800f140:	2505      	movs	r5, #5
	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
 800f142:	6162      	str	r2, [r4, #20]
	hltdc.Init.VerticalSync = 3;
 800f144:	2203      	movs	r2, #3
void MX_LTDC_Init(void) {

	LTDC_LayerCfgTypeDef pLayerCfg;
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
 800f146:	6023      	str	r3, [r4, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800f148:	2300      	movs	r3, #0
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
 800f14a:	61a2      	str	r2, [r4, #24]
	hltdc.Init.AccumulatedHBP = 14;
 800f14c:	220e      	movs	r2, #14
	}

}

/* LTDC init function */
void MX_LTDC_Init(void) {
 800f14e:	b09a      	sub	sp, #104	; 0x68
	hltdc.Init.TotalWidth = 500;
	hltdc.Init.TotalHeigh = 279;
	hltdc.Init.Backcolor.Blue = 0;
	hltdc.Init.Backcolor.Green = 0;
	hltdc.Init.Backcolor.Red = 0;
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 800f150:	4620      	mov	r0, r4
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
 800f152:	61e2      	str	r2, [r4, #28]
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
 800f154:	f44f 72f7 	mov.w	r2, #494	; 0x1ee

	LTDC_LayerCfgTypeDef pLayerCfg;
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800f158:	6063      	str	r3, [r4, #4]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
 800f15a:	6262      	str	r2, [r4, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 277;
 800f15c:	f240 1215 	movw	r2, #277	; 0x115
	LTDC_LayerCfgTypeDef pLayerCfg;
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800f160:	60a3      	str	r3, [r4, #8]
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
	hltdc.Init.AccumulatedActiveH = 277;
 800f162:	62a2      	str	r2, [r4, #40]	; 0x28
	hltdc.Init.TotalWidth = 500;
 800f164:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
	LTDC_LayerCfgTypeDef pLayerCfg1;

	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800f168:	60e3      	str	r3, [r4, #12]
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
	hltdc.Init.AccumulatedActiveH = 277;
	hltdc.Init.TotalWidth = 500;
 800f16a:	62e2      	str	r2, [r4, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 279;
 800f16c:	f240 1217 	movw	r2, #279	; 0x117

	hltdc.Instance = LTDC;
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800f170:	6123      	str	r3, [r4, #16]
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
	hltdc.Init.AccumulatedActiveW = 494;
	hltdc.Init.AccumulatedActiveH = 277;
	hltdc.Init.TotalWidth = 500;
	hltdc.Init.TotalHeigh = 279;
 800f172:	6322      	str	r2, [r4, #48]	; 0x30
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
	hltdc.Init.HorizontalSync = 7;
	hltdc.Init.VerticalSync = 3;
	hltdc.Init.AccumulatedHBP = 14;
	hltdc.Init.AccumulatedVBP = 5;
 800f174:	6225      	str	r5, [r4, #32]
	hltdc.Init.AccumulatedActiveW = 494;
	hltdc.Init.AccumulatedActiveH = 277;
	hltdc.Init.TotalWidth = 500;
	hltdc.Init.TotalHeigh = 279;
	hltdc.Init.Backcolor.Blue = 0;
 800f176:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800f17a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800f17e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 800f182:	f7f5 fecf 	bl	8004f24 <HAL_LTDC_Init>
 800f186:	4602      	mov	r2, r0
 800f188:	b100      	cbz	r0, 800f18c <MX_LTDC_Init+0x54>
 800f18a:	e7fe      	b.n	800f18a <MX_LTDC_Init+0x52>
	pLayerCfg.WindowY0 = 0;
	pLayerCfg.WindowY1 = 0;
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	pLayerCfg.Alpha = 0;
	pLayerCfg.Alpha0 = 0;
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800f18c:	f44f 6680 	mov.w	r6, #1024	; 0x400
	hltdc.Init.Backcolor.Red = 0;
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
		Error_Handler();
	}

	pLayerCfg.WindowX0 = 0;
 800f190:	9000      	str	r0, [sp, #0]
	pLayerCfg.WindowX1 = 0;
 800f192:	9001      	str	r0, [sp, #4]
	pLayerCfg.ImageWidth = 0;
	pLayerCfg.ImageHeight = 0;
	pLayerCfg.Backcolor.Blue = 0;
	pLayerCfg.Backcolor.Green = 0;
	pLayerCfg.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800f194:	4669      	mov	r1, sp
		Error_Handler();
	}

	pLayerCfg.WindowX0 = 0;
	pLayerCfg.WindowX1 = 0;
	pLayerCfg.WindowY0 = 0;
 800f196:	9002      	str	r0, [sp, #8]
	pLayerCfg.WindowY1 = 0;
 800f198:	9003      	str	r0, [sp, #12]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800f19a:	9004      	str	r0, [sp, #16]
	pLayerCfg.Alpha = 0;
 800f19c:	9005      	str	r0, [sp, #20]
	pLayerCfg.Alpha0 = 0;
 800f19e:	9006      	str	r0, [sp, #24]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
	pLayerCfg.FBStartAdress = 0;
 800f1a0:	9009      	str	r0, [sp, #36]	; 0x24
	pLayerCfg.ImageWidth = 0;
 800f1a2:	900a      	str	r0, [sp, #40]	; 0x28
	pLayerCfg.ImageHeight = 0;
 800f1a4:	900b      	str	r0, [sp, #44]	; 0x2c
	pLayerCfg.Backcolor.Blue = 0;
 800f1a6:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
	pLayerCfg.Backcolor.Green = 0;
 800f1aa:	f88d 0031 	strb.w	r0, [sp, #49]	; 0x31
	pLayerCfg.Backcolor.Red = 0;
 800f1ae:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800f1b2:	4620      	mov	r0, r4
	pLayerCfg.WindowY0 = 0;
	pLayerCfg.WindowY1 = 0;
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	pLayerCfg.Alpha = 0;
	pLayerCfg.Alpha0 = 0;
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800f1b4:	9607      	str	r6, [sp, #28]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800f1b6:	9508      	str	r5, [sp, #32]
	pLayerCfg.ImageWidth = 0;
	pLayerCfg.ImageHeight = 0;
	pLayerCfg.Backcolor.Blue = 0;
	pLayerCfg.Backcolor.Green = 0;
	pLayerCfg.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800f1b8:	f7f5 ff28 	bl	800500c <HAL_LTDC_ConfigLayer>
 800f1bc:	b100      	cbz	r0, 800f1c0 <MX_LTDC_Init+0x88>
 800f1be:	e7fe      	b.n	800f1be <MX_LTDC_Init+0x86>
		Error_Handler();
	}

	pLayerCfg1.WindowX0 = 0;
 800f1c0:	900d      	str	r0, [sp, #52]	; 0x34
	pLayerCfg1.ImageWidth = 0;
	pLayerCfg1.ImageHeight = 0;
	pLayerCfg1.Backcolor.Blue = 0;
	pLayerCfg1.Backcolor.Green = 0;
	pLayerCfg1.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800f1c2:	2201      	movs	r2, #1
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
		Error_Handler();
	}

	pLayerCfg1.WindowX0 = 0;
	pLayerCfg1.WindowX1 = 0;
 800f1c4:	900e      	str	r0, [sp, #56]	; 0x38
	pLayerCfg1.ImageWidth = 0;
	pLayerCfg1.ImageHeight = 0;
	pLayerCfg1.Backcolor.Blue = 0;
	pLayerCfg1.Backcolor.Green = 0;
	pLayerCfg1.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800f1c6:	a90d      	add	r1, sp, #52	; 0x34
		Error_Handler();
	}

	pLayerCfg1.WindowX0 = 0;
	pLayerCfg1.WindowX1 = 0;
	pLayerCfg1.WindowY0 = 0;
 800f1c8:	900f      	str	r0, [sp, #60]	; 0x3c
	pLayerCfg1.WindowY1 = 0;
 800f1ca:	9010      	str	r0, [sp, #64]	; 0x40
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800f1cc:	9011      	str	r0, [sp, #68]	; 0x44
	pLayerCfg1.Alpha = 0;
 800f1ce:	9012      	str	r0, [sp, #72]	; 0x48
	pLayerCfg1.Alpha0 = 0;
 800f1d0:	9013      	str	r0, [sp, #76]	; 0x4c
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
	pLayerCfg1.FBStartAdress = 0;
 800f1d2:	9016      	str	r0, [sp, #88]	; 0x58
	pLayerCfg1.ImageWidth = 0;
 800f1d4:	9017      	str	r0, [sp, #92]	; 0x5c
	pLayerCfg1.ImageHeight = 0;
 800f1d6:	9018      	str	r0, [sp, #96]	; 0x60
	pLayerCfg1.Backcolor.Blue = 0;
 800f1d8:	f88d 0064 	strb.w	r0, [sp, #100]	; 0x64
	pLayerCfg1.Backcolor.Green = 0;
 800f1dc:	f88d 0065 	strb.w	r0, [sp, #101]	; 0x65
	pLayerCfg1.Backcolor.Red = 0;
 800f1e0:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800f1e4:	4620      	mov	r0, r4
	pLayerCfg1.WindowY0 = 0;
	pLayerCfg1.WindowY1 = 0;
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	pLayerCfg1.Alpha = 0;
	pLayerCfg1.Alpha0 = 0;
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800f1e6:	9614      	str	r6, [sp, #80]	; 0x50
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800f1e8:	9515      	str	r5, [sp, #84]	; 0x54
	pLayerCfg1.ImageWidth = 0;
	pLayerCfg1.ImageHeight = 0;
	pLayerCfg1.Backcolor.Blue = 0;
	pLayerCfg1.Backcolor.Green = 0;
	pLayerCfg1.Backcolor.Red = 0;
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK) {
 800f1ea:	f7f5 ff0f 	bl	800500c <HAL_LTDC_ConfigLayer>
 800f1ee:	b100      	cbz	r0, 800f1f2 <MX_LTDC_Init+0xba>
 800f1f0:	e7fe      	b.n	800f1f0 <MX_LTDC_Init+0xb8>
		Error_Handler();
	}

}
 800f1f2:	b01a      	add	sp, #104	; 0x68
 800f1f4:	bd70      	pop	{r4, r5, r6, pc}
 800f1f6:	bf00      	nop
 800f1f8:	20049448 	.word	0x20049448
 800f1fc:	40016800 	.word	0x40016800

0800f200 <MX_FMC_Init>:
void MX_FMC_Init(void) {
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800f200:	4810      	ldr	r0, [pc, #64]	; (800f244 <MX_FMC_Init+0x44>)
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800f202:	2140      	movs	r1, #64	; 0x40
void MX_FMC_Init(void) {
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800f204:	4b10      	ldr	r3, [pc, #64]	; (800f248 <MX_FMC_Init+0x48>)
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800f206:	2200      	movs	r2, #0
	}

}

/* FMC initialization function */
void MX_FMC_Init(void) {
 800f208:	b500      	push	{lr}
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800f20a:	6141      	str	r1, [r0, #20]
	}

}

/* FMC initialization function */
void MX_FMC_Init(void) {
 800f20c:	b089      	sub	sp, #36	; 0x24
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800f20e:	2180      	movs	r1, #128	; 0x80
void MX_FMC_Init(void) {
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800f210:	6003      	str	r3, [r0, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800f212:	2310      	movs	r3, #16

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800f214:	6042      	str	r2, [r0, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800f216:	6181      	str	r1, [r0, #24]
	SdramTiming.RowCycleDelay = 16;
	SdramTiming.WriteRecoveryTime = 16;
	SdramTiming.RPDelay = 16;
	SdramTiming.RCDDelay = 16;

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 800f218:	a901      	add	r1, sp, #4
	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800f21a:	6082      	str	r2, [r0, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800f21c:	60c2      	str	r2, [r0, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800f21e:	6103      	str	r3, [r0, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800f220:	61c2      	str	r2, [r0, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800f222:	6202      	str	r2, [r0, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800f224:	6242      	str	r2, [r0, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800f226:	6282      	str	r2, [r0, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 800f228:	9301      	str	r3, [sp, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 800f22a:	9302      	str	r3, [sp, #8]
	SdramTiming.SelfRefreshTime = 16;
 800f22c:	9303      	str	r3, [sp, #12]
	SdramTiming.RowCycleDelay = 16;
 800f22e:	9304      	str	r3, [sp, #16]
	SdramTiming.WriteRecoveryTime = 16;
 800f230:	9305      	str	r3, [sp, #20]
	SdramTiming.RPDelay = 16;
 800f232:	9306      	str	r3, [sp, #24]
	SdramTiming.RCDDelay = 16;
 800f234:	9307      	str	r3, [sp, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 800f236:	f7f7 f8c9 	bl	80063cc <HAL_SDRAM_Init>
 800f23a:	b100      	cbz	r0, 800f23e <MX_FMC_Init+0x3e>
 800f23c:	e7fe      	b.n	800f23c <MX_FMC_Init+0x3c>
		Error_Handler();
	}

}
 800f23e:	b009      	add	sp, #36	; 0x24
 800f240:	f85d fb04 	ldr.w	pc, [sp], #4
 800f244:	20049538 	.word	0x20049538
 800f248:	a0000140 	.word	0xa0000140

0800f24c <MX_GPIO_Init>:
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f24c:	4ba5      	ldr	r3, [pc, #660]	; (800f4e4 <MX_GPIO_Init+0x298>)
 800f24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f250:	f042 0210 	orr.w	r2, r2, #16
 PB11   ------> USB_OTG_HS_ULPI_D4
 PB14   ------> SPI2_MISO
 PB15   ------> SPI2_MOSI
 */

void MX_GPIO_Init(void) {
 800f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f258:	631a      	str	r2, [r3, #48]	; 0x30
 PB11   ------> USB_OTG_HS_ULPI_D4
 PB14   ------> SPI2_MISO
 PB15   ------> SPI2_MOSI
 */

void MX_GPIO_Init(void) {
 800f25a:	b093      	sub	sp, #76	; 0x4c

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOH_CLK_ENABLE()
	;

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f25e:	2400      	movs	r4, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f260:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800f500 <MX_GPIO_Init+0x2b4>
 800f264:	a90d      	add	r1, sp, #52	; 0x34
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f266:	f002 0210 	and.w	r2, r2, #16
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f26a:	2502      	movs	r5, #2

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f26c:	4650      	mov	r0, sl

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f26e:	2603      	movs	r6, #3
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f270:	9202      	str	r2, [sp, #8]
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f272:	2701      	movs	r7, #1
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
 800f274:	9a02      	ldr	r2, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800f276:	f04f 0b80 	mov.w	fp, #128	; 0x80
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800f27a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800f27c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 800f504 <MX_GPIO_Init+0x2b8>
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800f280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800f284:	f8df 9280 	ldr.w	r9, [pc, #640]	; 800f508 <MX_GPIO_Init+0x2bc>
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE()
	;
	__HAL_RCC_GPIOG_CLK_ENABLE()
 800f288:	631a      	str	r2, [r3, #48]	; 0x30
 800f28a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f28c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800f290:	9203      	str	r2, [sp, #12]
 800f292:	9a03      	ldr	r2, [sp, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800f294:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f296:	f042 0202 	orr.w	r2, r2, #2
 800f29a:	631a      	str	r2, [r3, #48]	; 0x30
 800f29c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f29e:	f002 0202 	and.w	r2, r2, #2
 800f2a2:	9204      	str	r2, [sp, #16]
 800f2a4:	9a04      	ldr	r2, [sp, #16]
	;
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800f2a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2a8:	f042 0208 	orr.w	r2, r2, #8
 800f2ac:	631a      	str	r2, [r3, #48]	; 0x30
 800f2ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2b0:	f002 0208 	and.w	r2, r2, #8
 800f2b4:	9205      	str	r2, [sp, #20]
 800f2b6:	9a05      	ldr	r2, [sp, #20]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800f2b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2ba:	f042 0204 	orr.w	r2, r2, #4
 800f2be:	631a      	str	r2, [r3, #48]	; 0x30
 800f2c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2c2:	f002 0204 	and.w	r2, r2, #4
 800f2c6:	9206      	str	r2, [sp, #24]
 800f2c8:	9a06      	ldr	r2, [sp, #24]
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
 800f2ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2cc:	f042 0201 	orr.w	r2, r2, #1
 800f2d0:	631a      	str	r2, [r3, #48]	; 0x30
 800f2d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2d4:	f002 0201 	and.w	r2, r2, #1
 800f2d8:	9207      	str	r2, [sp, #28]
 800f2da:	9a07      	ldr	r2, [sp, #28]
	;
	__HAL_RCC_GPIOJ_CLK_ENABLE()
 800f2dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f2e2:	631a      	str	r2, [r3, #48]	; 0x30
 800f2e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2e6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800f2ea:	9208      	str	r2, [sp, #32]
 800f2ec:	9a08      	ldr	r2, [sp, #32]
	;
	__HAL_RCC_GPIOI_CLK_ENABLE()
 800f2ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f2f4:	631a      	str	r2, [r3, #48]	; 0x30
 800f2f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2f8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f2fc:	9209      	str	r2, [sp, #36]	; 0x24
 800f2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
 800f300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f302:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f306:	631a      	str	r2, [r3, #48]	; 0x30
 800f308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f30a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800f30e:	920a      	str	r2, [sp, #40]	; 0x28
 800f310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
 800f312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f314:	f042 0220 	orr.w	r2, r2, #32
 800f318:	631a      	str	r2, [r3, #48]	; 0x30
 800f31a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f31c:	f002 0220 	and.w	r2, r2, #32
 800f320:	920b      	str	r2, [sp, #44]	; 0x2c
 800f322:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800f324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f326:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f32a:	631a      	str	r2, [r3, #48]	; 0x30
 800f32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	;

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f32e:	940e      	str	r4, [sp, #56]	; 0x38
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800f330:	f003 0380 	and.w	r3, r3, #128	; 0x80
	;

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f334:	940f      	str	r4, [sp, #60]	; 0x3c
	;
	__HAL_RCC_GPIOK_CLK_ENABLE()
	;
	__HAL_RCC_GPIOF_CLK_ENABLE()
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 800f336:	930c      	str	r3, [sp, #48]	; 0x30
 800f338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	;

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800f33a:	2308      	movs	r3, #8
 800f33c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f33e:	f7f5 f8bd 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800f342:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800f344:	a90d      	add	r1, sp, #52	; 0x34
 800f346:	4650      	mov	r0, sl
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f348:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800f34a:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f34c:	2309      	movs	r3, #9
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f34e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f350:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f352:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800f354:	f7f5 f8b2 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 800f358:	f44f 7340 	mov.w	r3, #768	; 0x300
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f35c:	a90d      	add	r1, sp, #52	; 0x34
 800f35e:	4862      	ldr	r0, [pc, #392]	; (800f4e8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 800f360:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f362:	2312      	movs	r3, #18
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f364:	970f      	str	r7, [sp, #60]	; 0x3c
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f366:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f368:	2304      	movs	r3, #4

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f36a:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f36c:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f36e:	f7f5 f8a5 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 800f372:	f643 4323 	movw	r3, #15395	; 0x3c23
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f376:	a90d      	add	r1, sp, #52	; 0x34
 800f378:	485b      	ldr	r0, [pc, #364]	; (800f4e8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 800f37a:	930d      	str	r3, [sp, #52]	; 0x34
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f37c:	230a      	movs	r3, #10

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f37e:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f380:	9311      	str	r3, [sp, #68]	; 0x44
	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f382:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f384:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f386:	f7f5 f899 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800f38a:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800f38c:	a90d      	add	r1, sp, #52	; 0x34
 800f38e:	4856      	ldr	r0, [pc, #344]	; (800f4e8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800f390:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f392:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f394:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f396:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800f398:	9511      	str	r5, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800f39a:	f7f5 f88f 	bl	80044bc <HAL_GPIO_Init>
	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800f39e:	2308      	movs	r3, #8
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800f3a0:	a90d      	add	r1, sp, #52	; 0x34
 800f3a2:	4640      	mov	r0, r8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800f3a4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800f3a8:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3aa:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3ac:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3ae:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800f3b0:	f7f5 f884 	bl	80044bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f3b4:	220c      	movs	r2, #12
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800f3b6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3ba:	a90d      	add	r1, sp, #52	; 0x34
 800f3bc:	484b      	ldr	r0, [pc, #300]	; (800f4ec <MX_GPIO_Init+0x2a0>)
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f3be:	9211      	str	r2, [sp, #68]	; 0x44
 800f3c0:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
	 PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin | SDMMC_D3_Pin | SDMMC_D2_Pin
 800f3c2:	930d      	str	r3, [sp, #52]	; 0x34
			| GPIO_PIN_9 | GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3c4:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3c6:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f3c8:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3ca:	f7f5 f877 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800f3ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800f3d2:	a90d      	add	r1, sp, #52	; 0x34
 800f3d4:	4648      	mov	r0, r9
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3d6:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800f3d8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3da:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3dc:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800f3de:	9711      	str	r7, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800f3e0:	f7f5 f86c 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800f3e4:	2360      	movs	r3, #96	; 0x60
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f3e6:	a90d      	add	r1, sp, #52	; 0x34
 800f3e8:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f3ea:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800f3ec:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f3ee:	230d      	movs	r3, #13
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3f0:	940f      	str	r4, [sp, #60]	; 0x3c

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f3f2:	f50a 6a40 	add.w	sl, sl, #3072	; 0xc00
	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f3f6:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pins : PE5 PE6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3f8:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800f3fa:	f7f5 f85f 	bl	80044bc <HAL_GPIO_Init>
	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f3fe:	2307      	movs	r3, #7
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800f400:	a90d      	add	r1, sp, #52	; 0x34
 800f402:	4839      	ldr	r0, [pc, #228]	; (800f4e8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
 800f404:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f408:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f40a:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f40c:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f40e:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800f410:	f7f5 f854 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800f414:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800f416:	a90d      	add	r1, sp, #52	; 0x34
 800f418:	4833      	ldr	r0, [pc, #204]	; (800f4e8 <MX_GPIO_Init+0x29c>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800f41a:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800f41c:	230a      	movs	r3, #10
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f41e:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800f420:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f422:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f424:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800f426:	f7f5 f849 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800f42a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f42e:	a90d      	add	r1, sp, #52	; 0x34
 800f430:	482f      	ldr	r0, [pc, #188]	; (800f4f0 <MX_GPIO_Init+0x2a4>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800f432:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f434:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f436:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f438:	f7f5 f840 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800f43c:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800f43e:	a90d      	add	r1, sp, #52	; 0x34
 800f440:	4640      	mov	r0, r8
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f442:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800f444:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f446:	4b2b      	ldr	r3, [pc, #172]	; (800f4f4 <MX_GPIO_Init+0x2a8>)
	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f448:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800f50c <MX_GPIO_Init+0x2c0>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f44c:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800f44e:	f7f5 f835 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800f452:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f456:	a90d      	add	r1, sp, #52	; 0x34
 800f458:	4648      	mov	r0, r9
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f45a:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800f45c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f45e:	230a      	movs	r3, #10
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f460:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f462:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f464:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f466:	f7f5 f829 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800f46a:	2320      	movs	r3, #32
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800f46c:	a90d      	add	r1, sp, #52	; 0x34
 800f46e:	4640      	mov	r0, r8
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f470:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800f472:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f474:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f476:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800f478:	f7f5 f820 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f47c:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f47e:	a90d      	add	r1, sp, #52	; 0x34
 800f480:	4640      	mov	r0, r8
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f482:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800f484:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f486:	230d      	movs	r3, #13
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f488:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f48a:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : PD3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f48c:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f48e:	f7f5 f815 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800f492:	f241 030c 	movw	r3, #4108	; 0x100c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f496:	a90d      	add	r1, sp, #52	; 0x34
 800f498:	4658      	mov	r0, fp
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f49a:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 800f49c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f49e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4a0:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800f4a2:	f7f5 f80b 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800f4a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800f4aa:	a90d      	add	r1, sp, #52	; 0x34
 800f4ac:	480f      	ldr	r0, [pc, #60]	; (800f4ec <MX_GPIO_Init+0x2a0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800f4ae:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f4b0:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4b2:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800f4b4:	f7f5 f802 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800f4b8:	2308      	movs	r3, #8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f4ba:	a90d      	add	r1, sp, #52	; 0x34
 800f4bc:	480e      	ldr	r0, [pc, #56]	; (800f4f8 <MX_GPIO_Init+0x2ac>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800f4be:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f4c0:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4c2:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4c4:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800f4c6:	f7f4 fff9 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f4ca:	f44f 7300 	mov.w	r3, #512	; 0x200
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f4ce:	a90d      	add	r1, sp, #52	; 0x34
 800f4d0:	480a      	ldr	r0, [pc, #40]	; (800f4fc <MX_GPIO_Init+0x2b0>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f4d2:	930d      	str	r3, [sp, #52]	; 0x34
 800f4d4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f4d6:	230d      	movs	r3, #13
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4d8:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f4da:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : PG9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4dc:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f4de:	9410      	str	r4, [sp, #64]	; 0x40
 800f4e0:	e016      	b.n	800f510 <MX_GPIO_Init+0x2c4>
 800f4e2:	bf00      	nop
 800f4e4:	40023800 	.word	0x40023800
 800f4e8:	40020400 	.word	0x40020400
 800f4ec:	40020800 	.word	0x40020800
 800f4f0:	40022400 	.word	0x40022400
 800f4f4:	10120000 	.word	0x10120000
 800f4f8:	40022800 	.word	0x40022800
 800f4fc:	40021800 	.word	0x40021800
 800f500:	40021000 	.word	0x40021000
 800f504:	40020c00 	.word	0x40020c00
 800f508:	40020000 	.word	0x40020000
 800f50c:	40022000 	.word	0x40022000
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f510:	f7f4 ffd4 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800f514:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f516:	a90d      	add	r1, sp, #52	; 0x34
 800f518:	4640      	mov	r0, r8
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f51a:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800f51c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f51e:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800f520:	f7f4 ffcc 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800f524:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f526:	9a00      	ldr	r2, [sp, #0]
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800f528:	a90d      	add	r1, sp, #52	; 0x34
 800f52a:	4640      	mov	r0, r8
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800f52c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800f52e:	9211      	str	r2, [sp, #68]	; 0x44
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : SDMMC_D0_Pin */
	GPIO_InitStruct.Pin = SDMMC_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f530:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f532:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f534:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 800f536:	f7f4 ffc1 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800f53a:	f248 0204 	movw	r2, #32772	; 0x8004
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f53e:	a90d      	add	r1, sp, #52	; 0x34
 800f540:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f542:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
	HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 800f544:	920d      	str	r2, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f546:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f548:	f7f4 ffb8 	bl	80044bc <HAL_GPIO_Init>
	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f54c:	2205      	movs	r2, #5
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800f54e:	a90d      	add	r1, sp, #52	; 0x34
 800f550:	4658      	mov	r0, fp
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800f552:	950d      	str	r5, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f554:	9211      	str	r2, [sp, #68]	; 0x44
 800f556:	9200      	str	r2, [sp, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f558:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f55a:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f55c:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800f55e:	f7f4 ffad 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800f562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800f566:	a90d      	add	r1, sp, #52	; 0x34
 800f568:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f56a:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800f56c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f56e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f570:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800f572:	f7f4 ffa3 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PH14 PH12 PH9 PH11
	 PH10 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
 800f576:	f44f 41bc 	mov.w	r1, #24064	; 0x5e00
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f57a:	230d      	movs	r3, #13
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f57c:	4650      	mov	r0, sl

	/*Configure GPIO pins : PH14 PH12 PH9 PH11
	 PH10 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f57e:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PH14 PH12 PH9 PH11
	 PH10 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
 800f580:	910d      	str	r1, [sp, #52]	; 0x34
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f582:	a90d      	add	r1, sp, #52	; 0x34
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f584:	9311      	str	r3, [sp, #68]	; 0x44
	/*Configure GPIO pins : PH14 PH12 PH9 PH11
	 PH10 */
	GPIO_InitStruct.Pin = GPIO_PIN_14 | GPIO_PIN_12 | GPIO_PIN_9 | GPIO_PIN_11
			| GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f586:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f588:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800f58a:	f7f4 ff97 	bl	80044bc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800f58e:	a90d      	add	r1, sp, #52	; 0x34
 800f590:	4658      	mov	r0, fp
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_CS_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 800f592:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f594:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f596:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f598:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800f59a:	9511      	str	r5, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 800f59c:	f7f4 ff8e 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
 800f5a0:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800f5a2:	a90d      	add	r1, sp, #52	; 0x34
 800f5a4:	4648      	mov	r0, r9
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5a6:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
 800f5a8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f5aa:	2307      	movs	r3, #7
	HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5ac:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f5ae:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : VCP_TX_Pin */
	GPIO_InitStruct.Pin = VCP_TX_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5b0:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800f5b2:	f7f4 ff83 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800f5b6:	f44f 7380 	mov.w	r3, #256	; 0x100
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800f5ba:	a90d      	add	r1, sp, #52	; 0x34
 800f5bc:	4648      	mov	r0, r9
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5be:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
	HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 800f5c0:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5c2:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f5c4:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800f5c6:	9711      	str	r7, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);
 800f5c8:	f7f4 ff78 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800f5cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800f5d0:	a90d      	add	r1, sp, #52	; 0x34
 800f5d2:	4658      	mov	r0, fp
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5d4:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
	HAL_GPIO_Init(ARDUINO_PWM_D5_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800f5d6:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800f5d8:	4b54      	ldr	r3, [pc, #336]	; (800f72c <MX_GPIO_Init+0x4e0>)
 800f5da:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800f5dc:	f7f4 ff6e 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800f5e0:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5e2:	a90d      	add	r1, sp, #52	; 0x34
 800f5e4:	4852      	ldr	r0, [pc, #328]	; (800f730 <MX_GPIO_Init+0x4e4>)
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800f5e6:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800f5e8:	2308      	movs	r3, #8
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5ea:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800f5ec:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5ee:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5f0:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f5f2:	f7f4 ff63 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800f5f6:	2310      	movs	r3, #16
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f5f8:	a90d      	add	r1, sp, #52	; 0x34
 800f5fa:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5fc:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800f5fe:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f600:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f602:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f604:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f606:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800f608:	f7f4 ff58 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800f60c:	23c8      	movs	r3, #200	; 0xc8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f60e:	a90d      	add	r1, sp, #52	; 0x34
 800f610:	4848      	ldr	r0, [pc, #288]	; (800f734 <MX_GPIO_Init+0x4e8>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 800f612:	930d      	str	r3, [sp, #52]	; 0x34
 800f614:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f616:	970e      	str	r7, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f618:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f61a:	9410      	str	r4, [sp, #64]	; 0x40
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f61c:	f7f4 ff4e 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
 800f620:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f624:	4844      	ldr	r0, [pc, #272]	; (800f738 <MX_GPIO_Init+0x4ec>)

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f626:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
 800f628:	910d      	str	r1, [sp, #52]	; 0x34
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f62a:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f62c:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800f62e:	f7f4 ff45 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800f632:	9a00      	ldr	r2, [sp, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f634:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f636:	a90d      	add	r1, sp, #52	; 0x34
 800f638:	483d      	ldr	r0, [pc, #244]	; (800f730 <MX_GPIO_Init+0x4e4>)
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800f63a:	920d      	str	r2, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f63c:	9311      	str	r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f63e:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f640:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f642:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f644:	f7f4 ff3a 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f648:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f64a:	a90d      	add	r1, sp, #52	; 0x34
 800f64c:	483b      	ldr	r0, [pc, #236]	; (800f73c <MX_GPIO_Init+0x4f0>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f64e:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f650:	2309      	movs	r3, #9
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f652:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f654:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f656:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f658:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f65a:	f7f4 ff2f 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800f65e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f662:	2309      	movs	r3, #9
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f664:	4640      	mov	r0, r8
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f666:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800f668:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f66a:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800f66c:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f66e:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f670:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f672:	f7f4 ff23 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800f676:	2304      	movs	r3, #4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800f678:	a90d      	add	r1, sp, #52	; 0x34
 800f67a:	482e      	ldr	r0, [pc, #184]	; (800f734 <MX_GPIO_Init+0x4e8>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800f67c:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f67e:	940e      	str	r4, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f680:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800f682:	f7f4 ff1b 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800f686:	a90d      	add	r1, sp, #52	; 0x34
 800f688:	4648      	mov	r0, r9
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800f68a:	970d      	str	r7, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f68c:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f68e:	940f      	str	r4, [sp, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800f690:	f7f4 ff14 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 800f694:	2150      	movs	r1, #80	; 0x50
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f696:	230d      	movs	r3, #13
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f698:	4648      	mov	r0, r9
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f69a:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 800f69c:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f69e:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800f6a0:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : PA4 PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6a2:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6a4:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6a6:	f7f4 ff09 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800f6aa:	2128      	movs	r1, #40	; 0x28
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f6ac:	230a      	movs	r3, #10
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6ae:	4648      	mov	r0, r9
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6b0:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 800f6b2:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6b4:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800f6b6:	9311      	str	r3, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6b8:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6ba:	9610      	str	r6, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6bc:	f7f4 fefe 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800f6c0:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800f6c2:	a90d      	add	r1, sp, #52	; 0x34
 800f6c4:	4650      	mov	r0, sl
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6c6:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800f6c8:	930d      	str	r3, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800f6ca:	2309      	movs	r3, #9
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6cc:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800f6ce:	9311      	str	r3, [sp, #68]	; 0x44

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6d0:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800f6d2:	f7f4 fef3 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800f6d6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f6da:	9a00      	ldr	r2, [sp, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f6dc:	4817      	ldr	r0, [pc, #92]	; (800f73c <MX_GPIO_Init+0x4f0>)
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 800f6de:	910d      	str	r1, [sp, #52]	; 0x34
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f6e0:	a90d      	add	r1, sp, #52	; 0x34
	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f6e2:	9211      	str	r2, [sp, #68]	; 0x44
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6e4:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6e6:	940f      	str	r4, [sp, #60]	; 0x3c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6e8:	9410      	str	r4, [sp, #64]	; 0x40
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f6ea:	f7f4 fee7 	bl	80044bc <HAL_GPIO_Init>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	4640      	mov	r0, r8
 800f6f2:	2120      	movs	r1, #32
 800f6f4:	f7f5 f874 	bl	80047e0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 800f6f8:	4622      	mov	r2, r4
 800f6fa:	4658      	mov	r0, fp
 800f6fc:	f241 010c 	movw	r1, #4108	; 0x100c
 800f700:	f7f5 f86e 	bl	80047e0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800f704:	4622      	mov	r2, r4
 800f706:	2108      	movs	r1, #8
 800f708:	480d      	ldr	r0, [pc, #52]	; (800f740 <MX_GPIO_Init+0x4f4>)
 800f70a:	f7f5 f869 	bl	80047e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800f70e:	4622      	mov	r2, r4
 800f710:	4650      	mov	r0, sl
 800f712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f716:	f7f5 f863 	bl	80047e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 800f71a:	9b01      	ldr	r3, [sp, #4]
 800f71c:	4622      	mov	r2, r4
 800f71e:	4805      	ldr	r0, [pc, #20]	; (800f734 <MX_GPIO_Init+0x4e8>)
 800f720:	4619      	mov	r1, r3
 800f722:	f7f5 f85d 	bl	80047e0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

}
 800f726:	b013      	add	sp, #76	; 0x4c
 800f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f72c:	10120000 	.word	0x10120000
 800f730:	40020800 	.word	0x40020800
 800f734:	40021800 	.word	0x40021800
 800f738:	40021400 	.word	0x40021400
 800f73c:	40020400 	.word	0x40020400
 800f740:	40022800 	.word	0x40022800

0800f744 <HAL_TIM_PeriodElapsedCallback>:
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 800f744:	6802      	ldr	r2, [r0, #0]
 800f746:	4b03      	ldr	r3, [pc, #12]	; (800f754 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800f748:	429a      	cmp	r2, r3
 800f74a:	d101      	bne.n	800f750 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 800f74c:	f7f3 bf10 	b.w	8003570 <HAL_IncTick>
 800f750:	4770      	bx	lr
 800f752:	bf00      	nop
 800f754:	40010000 	.word	0x40010000

0800f758 <soundProcessingGetAmplitudeInstance>:
 * @param cfft_instance: pointer to \ref arm_cfft_instance_f32
 * @param amplitudeStr: pointer to \ref SpectrumStr - destination of amplitude vector
 * @param sourceBuffer: source buffer of audio samples
 */
void soundProcessingGetAmplitudeInstance(arm_cfft_instance_f32* cfft_instance,
		SpectrumStr* amplitudeStr, float32_t* sourceBuffer) {
 800f758:	b570      	push	{r4, r5, r6, lr}
 800f75a:	4614      	mov	r4, r2
 800f75c:	4606      	mov	r6, r0
 800f75e:	460d      	mov	r5, r1
	arm_cfft_f32(cfft_instance, sourceBuffer, 0, 1);
 800f760:	2200      	movs	r2, #0
 800f762:	4621      	mov	r1, r4
 800f764:	2301      	movs	r3, #1
 800f766:	f7f3 fb6f 	bl	8002e48 <arm_cfft_f32>
	arm_cmplx_mag_f32(sourceBuffer, amplitudeStr->amplitudeVector,
 800f76a:	8832      	ldrh	r2, [r6, #0]
 800f76c:	4629      	mov	r1, r5
 800f76e:	4620      	mov	r0, r4
			cfft_instance->fftLen);
}
 800f770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 * @param sourceBuffer: source buffer of audio samples
 */
void soundProcessingGetAmplitudeInstance(arm_cfft_instance_f32* cfft_instance,
		SpectrumStr* amplitudeStr, float32_t* sourceBuffer) {
	arm_cfft_f32(cfft_instance, sourceBuffer, 0, 1);
	arm_cmplx_mag_f32(sourceBuffer, amplitudeStr->amplitudeVector,
 800f774:	f7f3 b826 	b.w	80027c4 <arm_cmplx_mag_f32>

0800f778 <soundProcessingAmplitudeInit>:
 * @param spectrumStr: pointer to \ref SpectrumStr (destination)
 * @param soundBuffer: pointer to \ref SoundBuffer (source)
 * @param destinationBuffer: buffer to temporary hold the audio samples (destination)
 */
void soundProcessingAmplitudeInit(SpectrumStr* spectrumStr,
		SoundBufferStr* soundBuffer, float32_t* destinationBuffer) {
 800f778:	b570      	push	{r4, r5, r6, lr}
	spectrumStr->frequencyResolution = (float32_t) soundBuffer->frequency
 800f77a:	f242 0504 	movw	r5, #8196	; 0x2004
			/ soundBuffer->size * 2;
 800f77e:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 * @param soundBuffer: pointer to \ref SoundBuffer (source)
 * @param destinationBuffer: buffer to temporary hold the audio samples (destination)
 */
void soundProcessingAmplitudeInit(SpectrumStr* spectrumStr,
		SoundBufferStr* soundBuffer, float32_t* destinationBuffer) {
	spectrumStr->frequencyResolution = (float32_t) soundBuffer->frequency
 800f782:	594e      	ldr	r6, [r1, r5]
			/ soundBuffer->size * 2;
 800f784:	681c      	ldr	r4, [r3, #0]
 * @param soundBuffer: pointer to \ref SoundBuffer (source)
 * @param destinationBuffer: buffer to temporary hold the audio samples (destination)
 */
void soundProcessingAmplitudeInit(SpectrumStr* spectrumStr,
		SoundBufferStr* soundBuffer, float32_t* destinationBuffer) {
	spectrumStr->frequencyResolution = (float32_t) soundBuffer->frequency
 800f786:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800f78a:	ee07 6a90 	vmov	s15, r6
 800f78e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f792:	ee07 4a90 	vmov	s15, r4
 800f796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f79a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f79e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f7a2:	edc3 7a02 	vstr	s15, [r3, #8]
			/ soundBuffer->size * 2;
	spectrumStr->vectorSize = soundBuffer->size / 2;
 800f7a6:	0863      	lsrs	r3, r4, #1
 800f7a8:	5143      	str	r3, [r0, r5]

	uint32_t soundBuffIterator = soundBuffer->iterator + 1;
 800f7aa:	f242 0308 	movw	r3, #8200	; 0x2008
 800f7ae:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 800f7b2:	58cb      	ldr	r3, [r1, r3]
 800f7b4:	3301      	adds	r3, #1
	for (uint32_t i = 0; i < soundBuffer->size; i++) {
 800f7b6:	4295      	cmp	r5, r2
 800f7b8:	d00d      	beq.n	800f7d6 <soundProcessingAmplitudeInit+0x5e>
		destinationBuffer[i] = soundBuffer->soundBuffer[soundBuffIterator++];
 800f7ba:	1c58      	adds	r0, r3, #1
 800f7bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f7c0:	ee07 3a90 	vmov	s15, r3
		if (soundBuffIterator >= soundBuffer->size)
			soundBuffIterator = 0;
 800f7c4:	4284      	cmp	r4, r0
 800f7c6:	bf8c      	ite	hi
 800f7c8:	4603      	movhi	r3, r0
 800f7ca:	2300      	movls	r3, #0
			/ soundBuffer->size * 2;
	spectrumStr->vectorSize = soundBuffer->size / 2;

	uint32_t soundBuffIterator = soundBuffer->iterator + 1;
	for (uint32_t i = 0; i < soundBuffer->size; i++) {
		destinationBuffer[i] = soundBuffer->soundBuffer[soundBuffIterator++];
 800f7cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7d0:	ece2 7a01 	vstmia	r2!, {s15}
 800f7d4:	e7ef      	b.n	800f7b6 <soundProcessingAmplitudeInit+0x3e>
		if (soundBuffIterator >= soundBuffer->size)
			soundBuffIterator = 0;
	}
}
 800f7d6:	bd70      	pop	{r4, r5, r6, pc}

0800f7d8 <soundProcessingGetCfftInstance>:
 * @param length: \ref arm_cfft_instance_f32 length
 * The \p length can be only the power of two (from 16 to 4096)
 */
void soundProcessingGetCfftInstance(arm_cfft_instance_f32* instance,
		uint32_t length) {
	switch (length) {
 800f7d8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 * @param instance: pointer to \ref arm_cfft_instance_f32 structure
 * @param length: \ref arm_cfft_instance_f32 length
 * The \p length can be only the power of two (from 16 to 4096)
 */
void soundProcessingGetCfftInstance(arm_cfft_instance_f32* instance,
		uint32_t length) {
 800f7dc:	b510      	push	{r4, lr}
 800f7de:	4604      	mov	r4, r0
	switch (length) {
 800f7e0:	d022      	beq.n	800f828 <soundProcessingGetCfftInstance+0x50>
 800f7e2:	d80a      	bhi.n	800f7fa <soundProcessingGetCfftInstance+0x22>
 800f7e4:	2920      	cmp	r1, #32
 800f7e6:	d019      	beq.n	800f81c <soundProcessingGetCfftInstance+0x44>
 800f7e8:	d802      	bhi.n	800f7f0 <soundProcessingGetCfftInstance+0x18>
 800f7ea:	2910      	cmp	r1, #16
 800f7ec:	d014      	beq.n	800f818 <soundProcessingGetCfftInstance+0x40>
 800f7ee:	bd10      	pop	{r4, pc}
 800f7f0:	2940      	cmp	r1, #64	; 0x40
 800f7f2:	d015      	beq.n	800f820 <soundProcessingGetCfftInstance+0x48>
 800f7f4:	2980      	cmp	r1, #128	; 0x80
 800f7f6:	d015      	beq.n	800f824 <soundProcessingGetCfftInstance+0x4c>
 800f7f8:	bd10      	pop	{r4, pc}
 800f7fa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f7fe:	d017      	beq.n	800f830 <soundProcessingGetCfftInstance+0x58>
 800f800:	d803      	bhi.n	800f80a <soundProcessingGetCfftInstance+0x32>
 800f802:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800f806:	d011      	beq.n	800f82c <soundProcessingGetCfftInstance+0x54>
 800f808:	bd10      	pop	{r4, pc}
 800f80a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800f80e:	d011      	beq.n	800f834 <soundProcessingGetCfftInstance+0x5c>
 800f810:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800f814:	d010      	beq.n	800f838 <soundProcessingGetCfftInstance+0x60>
 800f816:	bd10      	pop	{r4, pc}
	case 16: {
		*instance = arm_cfft_sR_f32_len16;
 800f818:	4b0a      	ldr	r3, [pc, #40]	; (800f844 <soundProcessingGetCfftInstance+0x6c>)
 800f81a:	e00e      	b.n	800f83a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 32: {
		*instance = arm_cfft_sR_f32_len32;
 800f81c:	4b0a      	ldr	r3, [pc, #40]	; (800f848 <soundProcessingGetCfftInstance+0x70>)
 800f81e:	e00c      	b.n	800f83a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 64: {
		*instance = arm_cfft_sR_f32_len64;
 800f820:	4b0a      	ldr	r3, [pc, #40]	; (800f84c <soundProcessingGetCfftInstance+0x74>)
 800f822:	e00a      	b.n	800f83a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 128: {
		*instance = arm_cfft_sR_f32_len128;
 800f824:	4b0a      	ldr	r3, [pc, #40]	; (800f850 <soundProcessingGetCfftInstance+0x78>)
 800f826:	e008      	b.n	800f83a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 256: {
		*instance = arm_cfft_sR_f32_len256;
 800f828:	4b0a      	ldr	r3, [pc, #40]	; (800f854 <soundProcessingGetCfftInstance+0x7c>)
 800f82a:	e006      	b.n	800f83a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 512: {
		*instance = arm_cfft_sR_f32_len512;
 800f82c:	4b0a      	ldr	r3, [pc, #40]	; (800f858 <soundProcessingGetCfftInstance+0x80>)
 800f82e:	e004      	b.n	800f83a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 1024: {
		*instance = arm_cfft_sR_f32_len1024;
 800f830:	4b0a      	ldr	r3, [pc, #40]	; (800f85c <soundProcessingGetCfftInstance+0x84>)
 800f832:	e002      	b.n	800f83a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 2048: {
		*instance = arm_cfft_sR_f32_len2048;
 800f834:	4b0a      	ldr	r3, [pc, #40]	; (800f860 <soundProcessingGetCfftInstance+0x88>)
 800f836:	e000      	b.n	800f83a <soundProcessingGetCfftInstance+0x62>
		break;
	}
	case 4096: {
		*instance = arm_cfft_sR_f32_len4096;
 800f838:	4b0a      	ldr	r3, [pc, #40]	; (800f864 <soundProcessingGetCfftInstance+0x8c>)
 800f83a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f83c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f840:	bd10      	pop	{r4, pc}
 800f842:	bf00      	nop
 800f844:	0802c938 	.word	0x0802c938
 800f848:	0802c948 	.word	0x0802c948
 800f84c:	0802c958 	.word	0x0802c958
 800f850:	0802c978 	.word	0x0802c978
 800f854:	0802c918 	.word	0x0802c918
 800f858:	0802c988 	.word	0x0802c988
 800f85c:	0802c968 	.word	0x0802c968
 800f860:	0802c928 	.word	0x0802c928
 800f864:	0802c998 	.word	0x0802c998

0800f868 <soundProcessingCopyAmplitudeInstance>:
 * @param source: pointer to \ref SpectrumStr structure
 * @param destination: pointer (output) to \ref SpectrumStr structure
 */
void soundProcessingCopyAmplitudeInstance(SpectrumStr* source,
		SpectrumStr* destination) {
	destination->frequencyResolution = source->frequencyResolution;
 800f868:	f500 5300 	add.w	r3, r0, #8192	; 0x2000
 800f86c:	689a      	ldr	r2, [r3, #8]
 800f86e:	f501 5300 	add.w	r3, r1, #8192	; 0x2000
 800f872:	609a      	str	r2, [r3, #8]
	destination->vectorSize = source->vectorSize;
 800f874:	f242 0204 	movw	r2, #8196	; 0x2004
 800f878:	5883      	ldr	r3, [r0, r2]
 800f87a:	508b      	str	r3, [r1, r2]
 800f87c:	eb00 0383 	add.w	r3, r0, r3, lsl #2

	for (uint32_t i = 0; i < destination->vectorSize; i++) {
 800f880:	4298      	cmp	r0, r3
 800f882:	d004      	beq.n	800f88e <soundProcessingCopyAmplitudeInstance+0x26>
		destination->amplitudeVector[i] = source->amplitudeVector[i];
 800f884:	f850 2b04 	ldr.w	r2, [r0], #4
 800f888:	f841 2b04 	str.w	r2, [r1], #4
 800f88c:	e7f8      	b.n	800f880 <soundProcessingCopyAmplitudeInstance+0x18>
	}
}
 800f88e:	4770      	bx	lr

0800f890 <SysTick_Handler>:
 */
void SysTick_Handler(void) {
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	osSystickHandler();
 800f890:	f7f7 ba02 	b.w	8006c98 <osSystickHandler>

0800f894 <TIM1_UP_TIM10_IRQHandler>:
 */
void TIM1_UP_TIM10_IRQHandler(void) {
	/* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/* USER CODE END TIM1_UP_TIM10_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 800f894:	4801      	ldr	r0, [pc, #4]	; (800f89c <TIM1_UP_TIM10_IRQHandler+0x8>)
 800f896:	f7f6 bdf2 	b.w	800647e <HAL_TIM_IRQHandler>
 800f89a:	bf00      	nop
 800f89c:	200492b0 	.word	0x200492b0

0800f8a0 <ETH_IRQHandler>:
 */
void ETH_IRQHandler(void) {
	/* USER CODE BEGIN ETH_IRQn 0 */

	/* USER CODE END ETH_IRQn 0 */
	ETHERNET_IRQHandler();
 800f8a0:	f7fe bec8 	b.w	800e634 <ETHERNET_IRQHandler>

0800f8a4 <DMA2_Stream4_IRQHandler>:
 * @brief This function handles DMA2 Stream 4 interrupt request.
 * @param None
 * @retval None
 */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void) {
	HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800f8a4:	4b01      	ldr	r3, [pc, #4]	; (800f8ac <DMA2_Stream4_IRQHandler+0x8>)
 800f8a6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f8a8:	f7f4 b82a 	b.w	8003900 <HAL_DMA_IRQHandler>
 800f8ac:	2001444c 	.word	0x2001444c

0800f8b0 <DMA2_Stream7_IRQHandler>:
 * @brief This function handles DMA2 Stream 7 interrupt request.
 * @param None
 * @retval None
 */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void) {
	HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800f8b0:	4b01      	ldr	r3, [pc, #4]	; (800f8b8 <DMA2_Stream7_IRQHandler+0x8>)
 800f8b2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800f8b4:	f7f4 b824 	b.w	8003900 <HAL_DMA_IRQHandler>
 800f8b8:	20014368 	.word	0x20014368

0800f8bc <printNullHandle>:
 *      Author: Patryk
 */

#include "usrTaskSupport.h"

void printNullHandle(char* handleName) {
 800f8bc:	b500      	push	{lr}
 800f8be:	b089      	sub	sp, #36	; 0x24
	char msg[30];
	sprintf(msg, "%s is NULL", handleName);
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	4905      	ldr	r1, [pc, #20]	; (800f8d8 <printNullHandle+0x1c>)
 800f8c4:	4668      	mov	r0, sp
 800f8c6:	f001 fffd 	bl	80118c4 <sprintf>
	logErr(msg);
 800f8ca:	4668      	mov	r0, sp
 800f8cc:	f7ff fb36 	bl	800ef3c <logErr>
}
 800f8d0:	b009      	add	sp, #36	; 0x24
 800f8d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f8d6:	bf00      	nop
 800f8d8:	0802cc06 	.word	0x0802cc06

0800f8dc <initTask>:
// OS TASKS

/**
 * @brief Initialization task
 */
void initTask(void const * argument) {
 800f8dc:	b530      	push	{r4, r5, lr}
 800f8de:	b085      	sub	sp, #20
	lcdInit();
	logMsg("Ethernet initialization...");
	MX_LWIP_Init();

	/* DHCP initialization */
	dhcpInitTaskHandle = osThreadCreate(osThread(dhcpInitThread), NULL);
 800f8e0:	4c73      	ldr	r4, [pc, #460]	; (800fab0 <initTask+0x1d4>)
/**
 * @brief Initialization task
 */
void initTask(void const * argument) {
	/* PERIPHERALS INITIALIZATION */
	MX_FMC_Init();
 800f8e2:	f7ff fc8d 	bl	800f200 <MX_FMC_Init>
	MX_LTDC_Init();
 800f8e6:	f7ff fc27 	bl	800f138 <MX_LTDC_Init>
	MX_DMA2D_Init();
 800f8ea:	f7ff fc07 	bl	800f0fc <MX_DMA2D_Init>
	MX_GPIO_Init();
 800f8ee:	f7ff fcad 	bl	800f24c <MX_GPIO_Init>
	lcdInit();
 800f8f2:	f7ff fae9 	bl	800eec8 <lcdInit>
	logMsg("Ethernet initialization...");
 800f8f6:	486f      	ldr	r0, [pc, #444]	; (800fab4 <initTask+0x1d8>)
 800f8f8:	f7ff fb14 	bl	800ef24 <logMsg>
	MX_LWIP_Init();
 800f8fc:	f7ff fb5a 	bl	800efb4 <MX_LWIP_Init>

	/* DHCP initialization */
	dhcpInitTaskHandle = osThreadCreate(osThread(dhcpInitThread), NULL);
 800f900:	2100      	movs	r1, #0
 800f902:	486d      	ldr	r0, [pc, #436]	; (800fab8 <initTask+0x1dc>)
 800f904:	f7f6 ffa4 	bl	8006850 <osThreadCreate>
 800f908:	6020      	str	r0, [r4, #0]

	logMsg("Waiting for DHCP");
 800f90a:	486c      	ldr	r0, [pc, #432]	; (800fabc <initTask+0x1e0>)
 800f90c:	f7ff fb0a 	bl	800ef24 <logMsg>
	osEvent event;
	do {
		// waiting for DHCP initialization
		event = osSignalWait(DHCP_FINISHED_SIGNAL, osWaitForever);
 800f910:	f04f 32ff 	mov.w	r2, #4294967295
 800f914:	2101      	movs	r1, #1
 800f916:	a801      	add	r0, sp, #4
 800f918:	f7f6 ffe8 	bl	80068ec <osSignalWait>
	} while (event.status != osOK && event.status != osEventSignal);
 800f91c:	9b01      	ldr	r3, [sp, #4]
 800f91e:	f033 0308 	bics.w	r3, r3, #8
 800f922:	d1f5      	bne.n	800f910 <initTask+0x34>
	logMsg("DHCP task done");
 800f924:	4866      	ldr	r0, [pc, #408]	; (800fac0 <initTask+0x1e4>)
 800f926:	f7ff fafd 	bl	800ef24 <logMsg>

	// terminating DHCP initialization task
	logMsg("Terminating dhcp");
 800f92a:	4866      	ldr	r0, [pc, #408]	; (800fac4 <initTask+0x1e8>)
 800f92c:	f7ff fafa 	bl	800ef24 <logMsg>
	osThreadTerminate(dhcpInitTaskHandle);
 800f930:	6820      	ldr	r0, [r4, #0]
 800f932:	f7f6 ffa8 	bl	8006886 <osThreadTerminate>

	/* Taska, mutexes, mail queues and memory pools initialization */
	logMsg("Initializing memory pools");
	spectrumBufferPool_id = osPoolCreate(osPool(spectrumBufferPool));
 800f936:	4d64      	ldr	r5, [pc, #400]	; (800fac8 <initTask+0x1ec>)
	// terminating DHCP initialization task
	logMsg("Terminating dhcp");
	osThreadTerminate(dhcpInitTaskHandle);

	/* Taska, mutexes, mail queues and memory pools initialization */
	logMsg("Initializing memory pools");
 800f938:	4864      	ldr	r0, [pc, #400]	; (800facc <initTask+0x1f0>)
 800f93a:	f7ff faf3 	bl	800ef24 <logMsg>
	spectrumBufferPool_id = osPoolCreate(osPool(spectrumBufferPool));
 800f93e:	4864      	ldr	r0, [pc, #400]	; (800fad0 <initTask+0x1f4>)
 800f940:	f7f7 f886 	bl	8006a50 <osPoolCreate>
 800f944:	6028      	str	r0, [r5, #0]
	if (spectrumBufferPool_id == NULL)
 800f946:	b910      	cbnz	r0, 800f94e <initTask+0x72>
		printNullHandle("Spect pool");
 800f948:	4862      	ldr	r0, [pc, #392]	; (800fad4 <initTask+0x1f8>)
 800f94a:	f7ff ffb7 	bl	800f8bc <printNullHandle>
	cfftPool_id = osPoolCreate(osPool(cfftPool));
 800f94e:	4862      	ldr	r0, [pc, #392]	; (800fad8 <initTask+0x1fc>)
 800f950:	f7f7 f87e 	bl	8006a50 <osPoolCreate>
 800f954:	4b61      	ldr	r3, [pc, #388]	; (800fadc <initTask+0x200>)
 800f956:	6018      	str	r0, [r3, #0]
	if (cfftPool_id == NULL)
 800f958:	b910      	cbnz	r0, 800f960 <initTask+0x84>
		printNullHandle("Cfft pool");
 800f95a:	4861      	ldr	r0, [pc, #388]	; (800fae0 <initTask+0x204>)
 800f95c:	f7ff ffae 	bl	800f8bc <printNullHandle>
	soundBufferPool_id = osPoolCreate(osPool(soundBufferPool));
 800f960:	4860      	ldr	r0, [pc, #384]	; (800fae4 <initTask+0x208>)
 800f962:	f7f7 f875 	bl	8006a50 <osPoolCreate>
 800f966:	4b60      	ldr	r3, [pc, #384]	; (800fae8 <initTask+0x20c>)
 800f968:	6018      	str	r0, [r3, #0]
 800f96a:	461c      	mov	r4, r3
	if (soundBufferPool_id == NULL)
 800f96c:	b910      	cbnz	r0, 800f974 <initTask+0x98>
		printNullHandle("Sound pool");
 800f96e:	485f      	ldr	r0, [pc, #380]	; (800faec <initTask+0x210>)
 800f970:	f7ff ffa4 	bl	800f8bc <printNullHandle>
	/*stmConfigPool_id = osPoolCreate(osPool(stmConfigPool));
	 if (stmConfigPool_id == NULL)
	 printHandleNull("Stm config pool");*/

	logMsg("Initializing mail queues");
 800f974:	485e      	ldr	r0, [pc, #376]	; (800faf0 <initTask+0x214>)
 800f976:	f7ff fad5 	bl	800ef24 <logMsg>
	dmaAudioMail_q_id = osMailCreate(osMailQ(dmaAudioMail_q), NULL);
 800f97a:	2100      	movs	r1, #0
 800f97c:	485d      	ldr	r0, [pc, #372]	; (800faf4 <initTask+0x218>)
 800f97e:	f7f7 f8ee 	bl	8006b5e <osMailCreate>
 800f982:	4b5d      	ldr	r3, [pc, #372]	; (800faf8 <initTask+0x21c>)
 800f984:	6018      	str	r0, [r3, #0]
	if (dmaAudioMail_q_id == NULL)
 800f986:	b910      	cbnz	r0, 800f98e <initTask+0xb2>
		printNullHandle("Audio mail q");
 800f988:	485c      	ldr	r0, [pc, #368]	; (800fafc <initTask+0x220>)
 800f98a:	f7ff ff97 	bl	800f8bc <printNullHandle>

	logMsg("Initializing mutexes");
 800f98e:	485c      	ldr	r0, [pc, #368]	; (800fb00 <initTask+0x224>)
 800f990:	f7ff fac8 	bl	800ef24 <logMsg>
	mainSpectrumBufferMutex_id = osMutexCreate(
 800f994:	485b      	ldr	r0, [pc, #364]	; (800fb04 <initTask+0x228>)
 800f996:	f7f6 ffcd 	bl	8006934 <osMutexCreate>
 800f99a:	4b5b      	ldr	r3, [pc, #364]	; (800fb08 <initTask+0x22c>)
 800f99c:	6018      	str	r0, [r3, #0]
			osMutex(mainSpectrumBufferMutex));
	if (mainSpectrumBufferMutex_id == NULL)
 800f99e:	b910      	cbnz	r0, 800f9a6 <initTask+0xca>
		printNullHandle("Spect mut");
 800f9a0:	485a      	ldr	r0, [pc, #360]	; (800fb0c <initTask+0x230>)
 800f9a2:	f7ff ff8b 	bl	800f8bc <printNullHandle>
	mainSoundBufferMutex_id = osMutexCreate(osMutex(mainSoundBufferMutex));
 800f9a6:	485a      	ldr	r0, [pc, #360]	; (800fb10 <initTask+0x234>)
 800f9a8:	f7f6 ffc4 	bl	8006934 <osMutexCreate>
 800f9ac:	4b59      	ldr	r3, [pc, #356]	; (800fb14 <initTask+0x238>)
 800f9ae:	6018      	str	r0, [r3, #0]
	if (mainSoundBufferMutex_id == NULL)
 800f9b0:	b910      	cbnz	r0, 800f9b8 <initTask+0xdc>
		printNullHandle("Audio mut");
 800f9b2:	4859      	ldr	r0, [pc, #356]	; (800fb18 <initTask+0x23c>)
 800f9b4:	f7ff ff82 	bl	800f8bc <printNullHandle>
	ethernetInterfaceMutex_id = osMutexCreate(osMutex(ethernetInterfaceMutex));
 800f9b8:	4858      	ldr	r0, [pc, #352]	; (800fb1c <initTask+0x240>)
 800f9ba:	f7f6 ffbb 	bl	8006934 <osMutexCreate>
 800f9be:	4b58      	ldr	r3, [pc, #352]	; (800fb20 <initTask+0x244>)
 800f9c0:	6018      	str	r0, [r3, #0]
	if (ethernetInterfaceMutex_id == NULL)
 800f9c2:	b910      	cbnz	r0, 800f9ca <initTask+0xee>
		printNullHandle("Eth mut");
 800f9c4:	4857      	ldr	r0, [pc, #348]	; (800fb24 <initTask+0x248>)
 800f9c6:	f7ff ff79 	bl	800f8bc <printNullHandle>

	/* Global variables */
	logMsg("Preparing global variables");
 800f9ca:	4857      	ldr	r0, [pc, #348]	; (800fb28 <initTask+0x24c>)
 800f9cc:	f7ff faaa 	bl	800ef24 <logMsg>
	//configStr = osPoolCAlloc(stmConfigPool_id);
	mainSpectrumBuffer = osPoolCAlloc(spectrumBufferPool_id);
 800f9d0:	6828      	ldr	r0, [r5, #0]
 800f9d2:	f7f7 f8a8 	bl	8006b26 <osPoolCAlloc>
 800f9d6:	4b55      	ldr	r3, [pc, #340]	; (800fb2c <initTask+0x250>)
 800f9d8:	6018      	str	r0, [r3, #0]
	mainSoundBuffer = osPoolCAlloc(soundBufferPool_id);
 800f9da:	6820      	ldr	r0, [r4, #0]
 800f9dc:	f7f7 f8a3 	bl	8006b26 <osPoolCAlloc>
 800f9e0:	4b53      	ldr	r3, [pc, #332]	; (800fb30 <initTask+0x254>)
	mainSoundBuffer->iterator = 0;
 800f9e2:	f242 0208 	movw	r2, #8200	; 0x2008
	mainSoundBuffer->frequency = configStr.audioSamplingFrequency;
 800f9e6:	4c53      	ldr	r4, [pc, #332]	; (800fb34 <initTask+0x258>)

	/* Global variables */
	logMsg("Preparing global variables");
	//configStr = osPoolCAlloc(stmConfigPool_id);
	mainSpectrumBuffer = osPoolCAlloc(spectrumBufferPool_id);
	mainSoundBuffer = osPoolCAlloc(soundBufferPool_id);
 800f9e8:	6018      	str	r0, [r3, #0]
	mainSoundBuffer->iterator = 0;
 800f9ea:	2300      	movs	r3, #0
	mainSoundBuffer->frequency = configStr.audioSamplingFrequency;
 800f9ec:	6861      	ldr	r1, [r4, #4]
	/* Global variables */
	logMsg("Preparing global variables");
	//configStr = osPoolCAlloc(stmConfigPool_id);
	mainSpectrumBuffer = osPoolCAlloc(spectrumBufferPool_id);
	mainSoundBuffer = osPoolCAlloc(soundBufferPool_id);
	mainSoundBuffer->iterator = 0;
 800f9ee:	5083      	str	r3, [r0, r2]
	mainSoundBuffer->frequency = configStr.audioSamplingFrequency;
 800f9f0:	f242 0204 	movw	r2, #8196	; 0x2004
 800f9f4:	5081      	str	r1, [r0, r2]
	mainSoundBuffer->size = MAIN_SOUND_BUFFER_MAX_BUFFER_SIZE;
 800f9f6:	f500 5200 	add.w	r2, r0, #8192	; 0x2000
 800f9fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800f9fe:	6011      	str	r1, [r2, #0]
 800fa00:	1e82      	subs	r2, r0, #2
 800fa02:	f500 50ff 	add.w	r0, r0, #8160	; 0x1fe0
 800fa06:	301e      	adds	r0, #30
	for (uint32_t i = 0; i < mainSoundBuffer->size; i++) {
		mainSoundBuffer->soundBuffer[i] = 0;
 800fa08:	f822 3f02 	strh.w	r3, [r2, #2]!
	mainSpectrumBuffer = osPoolCAlloc(spectrumBufferPool_id);
	mainSoundBuffer = osPoolCAlloc(soundBufferPool_id);
	mainSoundBuffer->iterator = 0;
	mainSoundBuffer->frequency = configStr.audioSamplingFrequency;
	mainSoundBuffer->size = MAIN_SOUND_BUFFER_MAX_BUFFER_SIZE;
	for (uint32_t i = 0; i < mainSoundBuffer->size; i++) {
 800fa0c:	4282      	cmp	r2, r0
 800fa0e:	d1fb      	bne.n	800fa08 <initTask+0x12c>
		mainSoundBuffer->soundBuffer[i] = 0;
	}

	configStr.amplitudeSamplingDelay = CONNECTION_TASK_DELAY_TIME;
 800fa10:	230a      	movs	r3, #10
	configStr.audioSamplingFrequency = 44100;

	logMsg("Preparing audio recording");
 800fa12:	4849      	ldr	r0, [pc, #292]	; (800fb38 <initTask+0x25c>)
	mainSoundBuffer->size = MAIN_SOUND_BUFFER_MAX_BUFFER_SIZE;
	for (uint32_t i = 0; i < mainSoundBuffer->size; i++) {
		mainSoundBuffer->soundBuffer[i] = 0;
	}

	configStr.amplitudeSamplingDelay = CONNECTION_TASK_DELAY_TIME;
 800fa14:	7023      	strb	r3, [r4, #0]
	configStr.audioSamplingFrequency = 44100;
 800fa16:	f64a 4344 	movw	r3, #44100	; 0xac44
 800fa1a:	6063      	str	r3, [r4, #4]

	logMsg("Preparing audio recording");
 800fa1c:	f7ff fa82 	bl	800ef24 <logMsg>
	if (audioRecorderInit(AUDIO_RECORDER_INPUT_MICROPHONE,
 800fa20:	6862      	ldr	r2, [r4, #4]
 800fa22:	2150      	movs	r1, #80	; 0x50
 800fa24:	f44f 7000 	mov.w	r0, #512	; 0x200
 800fa28:	f7ff f89a 	bl	800eb60 <audioRecorderInit>
 800fa2c:	b110      	cbz	r0, 800fa34 <initTask+0x158>
	AUDIO_RECORDER_VOLUME_0DB,
			configStr.audioSamplingFrequency) != AUDIO_RECORDER_OK) {
		logErr("Audio rec init");
 800fa2e:	4843      	ldr	r0, [pc, #268]	; (800fb3c <initTask+0x260>)
 800fa30:	f7ff fa84 	bl	800ef3c <logErr>
	}

	/* Audio recorder - start recording */
	if (audioRecorderStartRecording(dmaAudioBuffer,
 800fa34:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fa38:	4841      	ldr	r0, [pc, #260]	; (800fb40 <initTask+0x264>)
 800fa3a:	f7ff f89b 	bl	800eb74 <audioRecorderStartRecording>
 800fa3e:	b110      	cbz	r0, 800fa46 <initTask+0x16a>
	AUDIO_BUFFER_SIZE) != AUDIO_RECORDER_OK) {
		logErr("Audio buffer start");
 800fa40:	4840      	ldr	r0, [pc, #256]	; (800fb44 <initTask+0x268>)
 800fa42:	f7ff fa7b 	bl	800ef3c <logErr>
	}

	logMsg("Initializing tasks");
 800fa46:	4840      	ldr	r0, [pc, #256]	; (800fb48 <initTask+0x26c>)
 800fa48:	f7ff fa6c 	bl	800ef24 <logMsg>
#ifdef LCD_PRINTER_SUPPORT
	lcdTaskHandle = osThreadCreate(osThread(lcdThread), NULL);
	if (lcdTaskHandle == NULL)
	printNullHandle("Lcd task");
#endif
	soundProcessingTaskHandle = osThreadCreate(osThread(soundProcessingThread),
 800fa4c:	2100      	movs	r1, #0
 800fa4e:	483f      	ldr	r0, [pc, #252]	; (800fb4c <initTask+0x270>)
 800fa50:	f7f6 fefe 	bl	8006850 <osThreadCreate>
 800fa54:	4b3e      	ldr	r3, [pc, #248]	; (800fb50 <initTask+0x274>)
 800fa56:	6018      	str	r0, [r3, #0]
	NULL);
	if (soundProcessingTaskHandle == NULL)
 800fa58:	b910      	cbnz	r0, 800fa60 <initTask+0x184>
		printNullHandle("Sound proc task");
 800fa5a:	483e      	ldr	r0, [pc, #248]	; (800fb54 <initTask+0x278>)
 800fa5c:	f7ff ff2e 	bl	800f8bc <printNullHandle>
	samplingTaskHandle = osThreadCreate(osThread(samplingThread), NULL);
 800fa60:	2100      	movs	r1, #0
 800fa62:	483d      	ldr	r0, [pc, #244]	; (800fb58 <initTask+0x27c>)
 800fa64:	f7f6 fef4 	bl	8006850 <osThreadCreate>
 800fa68:	4b3c      	ldr	r3, [pc, #240]	; (800fb5c <initTask+0x280>)
 800fa6a:	6018      	str	r0, [r3, #0]
	if (samplingTaskHandle == NULL)
 800fa6c:	b910      	cbnz	r0, 800fa74 <initTask+0x198>
		printNullHandle("Samp task");
 800fa6e:	483c      	ldr	r0, [pc, #240]	; (800fb60 <initTask+0x284>)
 800fa70:	f7ff ff24 	bl	800f8bc <printNullHandle>
	streamingTaskHandle = osThreadCreate(osThread(streamingThread), NULL);
 800fa74:	2100      	movs	r1, #0
 800fa76:	483b      	ldr	r0, [pc, #236]	; (800fb64 <initTask+0x288>)
 800fa78:	f7f6 feea 	bl	8006850 <osThreadCreate>
 800fa7c:	4b3a      	ldr	r3, [pc, #232]	; (800fb68 <initTask+0x28c>)
 800fa7e:	6018      	str	r0, [r3, #0]
	if (streamingTaskHandle == NULL)
 800fa80:	b910      	cbnz	r0, 800fa88 <initTask+0x1ac>
		printNullHandle("Stream task");
 800fa82:	483a      	ldr	r0, [pc, #232]	; (800fb6c <initTask+0x290>)
 800fa84:	f7ff ff1a 	bl	800f8bc <printNullHandle>
	httpConfigTaskHandle = osThreadCreate(osThread(httpConfigThread), NULL);
 800fa88:	2100      	movs	r1, #0
 800fa8a:	4839      	ldr	r0, [pc, #228]	; (800fb70 <initTask+0x294>)
 800fa8c:	f7f6 fee0 	bl	8006850 <osThreadCreate>
 800fa90:	4b38      	ldr	r3, [pc, #224]	; (800fb74 <initTask+0x298>)
 800fa92:	6018      	str	r0, [r3, #0]
	if (httpConfigTaskHandle == NULL)
 800fa94:	b910      	cbnz	r0, 800fa9c <initTask+0x1c0>
		printNullHandle("HTTP task");
 800fa96:	4838      	ldr	r0, [pc, #224]	; (800fb78 <initTask+0x29c>)
 800fa98:	f7ff ff10 	bl	800f8bc <printNullHandle>

	logMsg("Terminating init");
 800fa9c:	4837      	ldr	r0, [pc, #220]	; (800fb7c <initTask+0x2a0>)
 800fa9e:	f7ff fa41 	bl	800ef24 <logMsg>
	osThreadTerminate(initTaskHandle);
 800faa2:	4b37      	ldr	r3, [pc, #220]	; (800fb80 <initTask+0x2a4>)
 800faa4:	6818      	ldr	r0, [r3, #0]
}
 800faa6:	b005      	add	sp, #20
 800faa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	httpConfigTaskHandle = osThreadCreate(osThread(httpConfigThread), NULL);
	if (httpConfigTaskHandle == NULL)
		printNullHandle("HTTP task");

	logMsg("Terminating init");
	osThreadTerminate(initTaskHandle);
 800faac:	f7f6 beeb 	b.w	8006886 <osThreadTerminate>
 800fab0:	200497c8 	.word	0x200497c8
 800fab4:	0802cc5c 	.word	0x0802cc5c
 800fab8:	0802d104 	.word	0x0802d104
 800fabc:	0802cc77 	.word	0x0802cc77
 800fac0:	0802cc88 	.word	0x0802cc88
 800fac4:	0802cc97 	.word	0x0802cc97
 800fac8:	200497bc 	.word	0x200497bc
 800facc:	0802cca8 	.word	0x0802cca8
 800fad0:	0802d0e0 	.word	0x0802d0e0
 800fad4:	0802ccc2 	.word	0x0802ccc2
 800fad8:	0802d0f8 	.word	0x0802d0f8
 800fadc:	200497cc 	.word	0x200497cc
 800fae0:	0802cccd 	.word	0x0802cccd
 800fae4:	0802d0ec 	.word	0x0802d0ec
 800fae8:	200497ac 	.word	0x200497ac
 800faec:	0802ccd7 	.word	0x0802ccd7
 800faf0:	0802cce2 	.word	0x0802cce2
 800faf4:	0802d118 	.word	0x0802d118
 800faf8:	200497b8 	.word	0x200497b8
 800fafc:	0802ccfb 	.word	0x0802ccfb
 800fb00:	0802cd08 	.word	0x0802cd08
 800fb04:	0802d0dc 	.word	0x0802d0dc
 800fb08:	200497b4 	.word	0x200497b4
 800fb0c:	0802cd1d 	.word	0x0802cd1d
 800fb10:	0802d14c 	.word	0x0802d14c
 800fb14:	200497b0 	.word	0x200497b0
 800fb18:	0802cd27 	.word	0x0802cd27
 800fb1c:	0802cc58 	.word	0x0802cc58
 800fb20:	200497ec 	.word	0x200497ec
 800fb24:	0802cd31 	.word	0x0802cd31
 800fb28:	0802cd39 	.word	0x0802cd39
 800fb2c:	200497e4 	.word	0x200497e4
 800fb30:	200497c4 	.word	0x200497c4
 800fb34:	200497d8 	.word	0x200497d8
 800fb38:	0802cd54 	.word	0x0802cd54
 800fb3c:	0802cd6e 	.word	0x0802cd6e
 800fb40:	200495ac 	.word	0x200495ac
 800fb44:	0802cd7d 	.word	0x0802cd7d
 800fb48:	0802cd90 	.word	0x0802cd90
 800fb4c:	0802cc44 	.word	0x0802cc44
 800fb50:	200497e0 	.word	0x200497e0
 800fb54:	0802cda3 	.word	0x0802cda3
 800fb58:	0802cc30 	.word	0x0802cc30
 800fb5c:	200495a4 	.word	0x200495a4
 800fb60:	0802cdb3 	.word	0x0802cdb3
 800fb64:	0802d124 	.word	0x0802d124
 800fb68:	200497d0 	.word	0x200497d0
 800fb6c:	0802cdbd 	.word	0x0802cdbd
 800fb70:	0802cc1c 	.word	0x0802cc1c
 800fb74:	200495a8 	.word	0x200495a8
 800fb78:	0802cdc9 	.word	0x0802cdc9
 800fb7c:	0802cdd3 	.word	0x0802cdd3
 800fb80:	200497d4 	.word	0x200497d4

0800fb84 <dhcpTask>:
}

/**
 * @brief DHCP initialization task
 */
void dhcpTask(void const * argument) {
 800fb84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if (isEthernetCableConnected()) {
 800fb88:	f7ff f884 	bl	800ec94 <isEthernetCableConnected>
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d05d      	beq.n	800fc4e <dhcpTask+0xca>
		logMsg("Ethernet cable is connected");
		uint32_t ipAddress;
		dhcpState = DHCP_START;
 800fb92:	4d41      	ldr	r5, [pc, #260]	; (800fc98 <dhcpTask+0x114>)
/**
 * @brief DHCP initialization task
 */
void dhcpTask(void const * argument) {
	if (isEthernetCableConnected()) {
		logMsg("Ethernet cable is connected");
 800fb94:	4841      	ldr	r0, [pc, #260]	; (800fc9c <dhcpTask+0x118>)
 800fb96:	f7ff f9c5 	bl	800ef24 <logMsg>
		uint32_t ipAddress;
		dhcpState = DHCP_START;
		do {
			switch (dhcpState) {
 800fb9a:	462f      	mov	r7, r5
 */
void dhcpTask(void const * argument) {
	if (isEthernetCableConnected()) {
		logMsg("Ethernet cable is connected");
		uint32_t ipAddress;
		dhcpState = DHCP_START;
 800fb9c:	2301      	movs	r3, #1

						ip_addr_t ipaAddress;
						ip_addr_t netmask;
						ip_addr_t gateway;

						IP4_ADDR(&ipaAddress, IP_ADDR0, IP_ADDR1, IP_ADDR2,
 800fb9e:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800fcc0 <dhcpTask+0x13c>
								IP_ADDR3);
						IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
								NETMASK_ADDR2, NETMASK_ADDR3);
						IP4_ADDR(&gateway, GW_ADDR0, GW_ADDR1, GW_ADDR2,
 800fba2:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800fcc4 <dhcpTask+0x140>
 */
void dhcpTask(void const * argument) {
	if (isEthernetCableConnected()) {
		logMsg("Ethernet cable is connected");
		uint32_t ipAddress;
		dhcpState = DHCP_START;
 800fba6:	702b      	strb	r3, [r5, #0]
		do {
			switch (dhcpState) {
 800fba8:	782e      	ldrb	r6, [r5, #0]
 800fbaa:	2e01      	cmp	r6, #1
 800fbac:	d002      	beq.n	800fbb4 <dhcpTask+0x30>
 800fbae:	2e02      	cmp	r6, #2
 800fbb0:	d00d      	beq.n	800fbce <dhcpTask+0x4a>
 800fbb2:	e044      	b.n	800fc3e <dhcpTask+0xba>
			case DHCP_START : {
				ethernetInterfaceHandler.ip_addr.addr = 0;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	483a      	ldr	r0, [pc, #232]	; (800fca0 <dhcpTask+0x11c>)
 800fbb8:	6043      	str	r3, [r0, #4]
				ethernetInterfaceHandler.netmask.addr = 0;
 800fbba:	6083      	str	r3, [r0, #8]
				ethernetInterfaceHandler.gw.addr = 0;
 800fbbc:	60c3      	str	r3, [r0, #12]
				ipAddress = 0;
				dhcp_start(&ethernetInterfaceHandler);
 800fbbe:	f7fa fbaf 	bl	800a320 <dhcp_start>
				dhcpState = DHCP_WAIT_ADDRESS;
 800fbc2:	2302      	movs	r3, #2
				logMsg("Looking for DHCP server ...");
 800fbc4:	4837      	ldr	r0, [pc, #220]	; (800fca4 <dhcpTask+0x120>)
				ethernetInterfaceHandler.ip_addr.addr = 0;
				ethernetInterfaceHandler.netmask.addr = 0;
				ethernetInterfaceHandler.gw.addr = 0;
				ipAddress = 0;
				dhcp_start(&ethernetInterfaceHandler);
				dhcpState = DHCP_WAIT_ADDRESS;
 800fbc6:	703b      	strb	r3, [r7, #0]
				logMsg("Looking for DHCP server ...");
 800fbc8:	f7ff f9ac 	bl	800ef24 <logMsg>
				break;
 800fbcc:	e037      	b.n	800fc3e <dhcpTask+0xba>
			}

			case DHCP_WAIT_ADDRESS : {

				ipAddress = ethernetInterfaceHandler.ip_addr.addr;
 800fbce:	4c34      	ldr	r4, [pc, #208]	; (800fca0 <dhcpTask+0x11c>)

				if (ipAddress != 0) {
 800fbd0:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800fbd4:	f1ba 0f00 	cmp.w	sl, #0
 800fbd8:	d009      	beq.n	800fbee <dhcpTask+0x6a>
					dhcpState = DHCP_ADDRESS_ASSIGNED;
 800fbda:	2303      	movs	r3, #3

					dhcp_stop(&ethernetInterfaceHandler);
 800fbdc:	4620      	mov	r0, r4
			case DHCP_WAIT_ADDRESS : {

				ipAddress = ethernetInterfaceHandler.ip_addr.addr;

				if (ipAddress != 0) {
					dhcpState = DHCP_ADDRESS_ASSIGNED;
 800fbde:	703b      	strb	r3, [r7, #0]

					dhcp_stop(&ethernetInterfaceHandler);
 800fbe0:	f7fa fb8c 	bl	800a2fc <dhcp_stop>

					logMsg("Got IP by DHCP:");
 800fbe4:	4830      	ldr	r0, [pc, #192]	; (800fca8 <dhcpTask+0x124>)
 800fbe6:	f7ff f99d 	bl	800ef24 <logMsg>
					printAddress(&ethernetInterfaceHandler, IP_ADDRESS);
 800fbea:	2100      	movs	r1, #0
 800fbec:	e01c      	b.n	800fc28 <dhcpTask+0xa4>
					printAddress(&ethernetInterfaceHandler, NETMASK_ADDRESS);
					printAddress(&ethernetInterfaceHandler, GATEWAY_ADDRESS);
				} else {
					if (ethernetInterfaceHandler.dhcp->tries > MAX_DHCP_TRIES) {
 800fbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf0:	7b5b      	ldrb	r3, [r3, #13]
 800fbf2:	2b02      	cmp	r3, #2
 800fbf4:	d923      	bls.n	800fc3e <dhcpTask+0xba>
						dhcpState = DHCP_TIMEOUT;
 800fbf6:	2304      	movs	r3, #4

						dhcp_stop(&ethernetInterfaceHandler);
 800fbf8:	4620      	mov	r0, r4
					printAddress(&ethernetInterfaceHandler, IP_ADDRESS);
					printAddress(&ethernetInterfaceHandler, NETMASK_ADDRESS);
					printAddress(&ethernetInterfaceHandler, GATEWAY_ADDRESS);
				} else {
					if (ethernetInterfaceHandler.dhcp->tries > MAX_DHCP_TRIES) {
						dhcpState = DHCP_TIMEOUT;
 800fbfa:	703b      	strb	r3, [r7, #0]

						dhcp_stop(&ethernetInterfaceHandler);
 800fbfc:	f7fa fb7e 	bl	800a2fc <dhcp_stop>
						ip_addr_t netmask;
						ip_addr_t gateway;

						IP4_ADDR(&ipaAddress, IP_ADDR0, IP_ADDR1, IP_ADDR2,
								IP_ADDR3);
						IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
 800fc00:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
								NETMASK_ADDR2, NETMASK_ADDR3);
						IP4_ADDR(&gateway, GW_ADDR0, GW_ADDR1, GW_ADDR2,
								GW_ADDR3);
						netif_set_addr(&ethernetInterfaceHandler, &ipaAddress,
 800fc04:	a901      	add	r1, sp, #4
 800fc06:	aa02      	add	r2, sp, #8
 800fc08:	4620      	mov	r0, r4
						ip_addr_t netmask;
						ip_addr_t gateway;

						IP4_ADDR(&ipaAddress, IP_ADDR0, IP_ADDR1, IP_ADDR2,
								IP_ADDR3);
						IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
 800fc0a:	9302      	str	r3, [sp, #8]
								NETMASK_ADDR2, NETMASK_ADDR3);
						IP4_ADDR(&gateway, GW_ADDR0, GW_ADDR1, GW_ADDR2,
 800fc0c:	ab04      	add	r3, sp, #16

						ip_addr_t ipaAddress;
						ip_addr_t netmask;
						ip_addr_t gateway;

						IP4_ADDR(&ipaAddress, IP_ADDR0, IP_ADDR1, IP_ADDR2,
 800fc0e:	f8cd 8004 	str.w	r8, [sp, #4]
								IP_ADDR3);
						IP4_ADDR(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
								NETMASK_ADDR2, NETMASK_ADDR3);
						IP4_ADDR(&gateway, GW_ADDR0, GW_ADDR1, GW_ADDR2,
 800fc12:	f843 9d04 	str.w	r9, [r3, #-4]!
								GW_ADDR3);
						netif_set_addr(&ethernetInterfaceHandler, &ipaAddress,
 800fc16:	f7fb f9a1 	bl	800af5c <netif_set_addr>
								&netmask, &gateway);

						logErr("DHCP timeout!");
 800fc1a:	4824      	ldr	r0, [pc, #144]	; (800fcac <dhcpTask+0x128>)
 800fc1c:	f7ff f98e 	bl	800ef3c <logErr>
						logMsg("Static IP");
 800fc20:	4823      	ldr	r0, [pc, #140]	; (800fcb0 <dhcpTask+0x12c>)
 800fc22:	f7ff f97f 	bl	800ef24 <logMsg>
						printAddress(&ethernetInterfaceHandler, IP_ADDRESS);
 800fc26:	4651      	mov	r1, sl
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f7fe fffd 	bl	800ec28 <printAddress>
						printAddress(&ethernetInterfaceHandler,
 800fc2e:	2101      	movs	r1, #1
 800fc30:	4620      	mov	r0, r4
 800fc32:	f7fe fff9 	bl	800ec28 <printAddress>
						NETMASK_ADDRESS);
						printAddress(&ethernetInterfaceHandler,
 800fc36:	4631      	mov	r1, r6
 800fc38:	4620      	mov	r0, r4
 800fc3a:	f7fe fff5 	bl	800ec28 <printAddress>
				break;

			default:
				break;
			}
			osDelay(250);
 800fc3e:	20fa      	movs	r0, #250	; 0xfa
 800fc40:	f7f6 fe26 	bl	8006890 <osDelay>
		} while (dhcpState != DHCP_TIMEOUT && dhcpState != DHCP_ADDRESS_ASSIGNED );
 800fc44:	782b      	ldrb	r3, [r5, #0]
 800fc46:	3b03      	subs	r3, #3
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d8ad      	bhi.n	800fba8 <dhcpTask+0x24>
 800fc4c:	e014      	b.n	800fc78 <dhcpTask+0xf4>
	} else {
		dhcp_stop(&ethernetInterfaceHandler);
 800fc4e:	4814      	ldr	r0, [pc, #80]	; (800fca0 <dhcpTask+0x11c>)
 800fc50:	f7fa fb54 	bl	800a2fc <dhcp_stop>
		logErr("Ethernet cable is not connected");
 800fc54:	4817      	ldr	r0, [pc, #92]	; (800fcb4 <dhcpTask+0x130>)
 800fc56:	f7ff f971 	bl	800ef3c <logErr>
		logMsg("Static IP");
 800fc5a:	4815      	ldr	r0, [pc, #84]	; (800fcb0 <dhcpTask+0x12c>)
 800fc5c:	f7ff f962 	bl	800ef24 <logMsg>
		printAddress(&ethernetInterfaceHandler, IP_ADDRESS);
 800fc60:	4621      	mov	r1, r4
 800fc62:	480f      	ldr	r0, [pc, #60]	; (800fca0 <dhcpTask+0x11c>)
 800fc64:	f7fe ffe0 	bl	800ec28 <printAddress>
		printAddress(&ethernetInterfaceHandler, NETMASK_ADDRESS);
 800fc68:	2101      	movs	r1, #1
 800fc6a:	480d      	ldr	r0, [pc, #52]	; (800fca0 <dhcpTask+0x11c>)
 800fc6c:	f7fe ffdc 	bl	800ec28 <printAddress>
		printAddress(&ethernetInterfaceHandler, GATEWAY_ADDRESS);
 800fc70:	2102      	movs	r1, #2
 800fc72:	480b      	ldr	r0, [pc, #44]	; (800fca0 <dhcpTask+0x11c>)
 800fc74:	f7fe ffd8 	bl	800ec28 <printAddress>
	}

	// sending DHCP finished signal to initialization task
	osStatus status = osSignalSet(initTaskHandle, DHCP_FINISHED_SIGNAL);
 800fc78:	4b0f      	ldr	r3, [pc, #60]	; (800fcb8 <dhcpTask+0x134>)
 800fc7a:	2101      	movs	r1, #1
 800fc7c:	6818      	ldr	r0, [r3, #0]
 800fc7e:	f7f6 fe0f 	bl	80068a0 <osSignalSet>
	if (status != osOK) {
 800fc82:	4601      	mov	r1, r0
 800fc84:	b110      	cbz	r0, 800fc8c <dhcpTask+0x108>
		logErrVal("ERROR: DHCP finished signal", status);
 800fc86:	480d      	ldr	r0, [pc, #52]	; (800fcbc <dhcpTask+0x138>)
 800fc88:	f7ff f97c 	bl	800ef84 <logErrVal>
	}

	// waiting forever for termination
	while (1)
		osDelay(osWaitForever);
 800fc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc90:	f7f6 fdfe 	bl	8006890 <osDelay>
 800fc94:	e7fa      	b.n	800fc8c <dhcpTask+0x108>
 800fc96:	bf00      	nop
 800fc98:	200492ec 	.word	0x200492ec
 800fc9c:	0802cde4 	.word	0x0802cde4
 800fca0:	2004956c 	.word	0x2004956c
 800fca4:	0802ce00 	.word	0x0802ce00
 800fca8:	0802ce1c 	.word	0x0802ce1c
 800fcac:	0802ce2c 	.word	0x0802ce2c
 800fcb0:	0802ce3a 	.word	0x0802ce3a
 800fcb4:	0802ce44 	.word	0x0802ce44
 800fcb8:	200497d4 	.word	0x200497d4
 800fcbc:	0802ce64 	.word	0x0802ce64
 800fcc0:	0b01a8c0 	.word	0x0b01a8c0
 800fcc4:	0101a8c0 	.word	0x0101a8c0

0800fcc8 <samplingTask>:
}

/**
 * @brief Asynchronous task which gets audio mails from queue and fills the mainSoundBuffer
 */
void samplingTask(void const * argument) {
 800fcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (1) {
		// waiting for new mail
		osEvent event = osMailGet(dmaAudioMail_q_id, osWaitForever);
 800fcca:	4c18      	ldr	r4, [pc, #96]	; (800fd2c <samplingTask+0x64>)
}

/**
 * @brief Asynchronous task which gets audio mails from queue and fills the mainSoundBuffer
 */
void samplingTask(void const * argument) {
 800fccc:	b085      	sub	sp, #20
		osEvent event = osMailGet(dmaAudioMail_q_id, osWaitForever);
		if (event.status == osEventMail) {
			SoundMailStr *receivedSound = (SoundMailStr *) event.value.p;

			// waiting for access to mailSoundBuffer
			osStatus status = osMutexWait(mainSoundBufferMutex_id,
 800fcce:	4d18      	ldr	r5, [pc, #96]	; (800fd30 <samplingTask+0x68>)
 800fcd0:	4627      	mov	r7, r4
 * @brief Asynchronous task which gets audio mails from queue and fills the mainSoundBuffer
 */
void samplingTask(void const * argument) {
	while (1) {
		// waiting for new mail
		osEvent event = osMailGet(dmaAudioMail_q_id, osWaitForever);
 800fcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800fcd6:	6821      	ldr	r1, [r4, #0]
 800fcd8:	a801      	add	r0, sp, #4
 800fcda:	f7f6 ff9d 	bl	8006c18 <osMailGet>
		if (event.status == osEventMail) {
 800fcde:	9b01      	ldr	r3, [sp, #4]
 800fce0:	2b20      	cmp	r3, #32
 800fce2:	d1f6      	bne.n	800fcd2 <samplingTask+0xa>
			SoundMailStr *receivedSound = (SoundMailStr *) event.value.p;

			// waiting for access to mailSoundBuffer
			osStatus status = osMutexWait(mainSoundBufferMutex_id,
 800fce4:	f04f 31ff 	mov.w	r1, #4294967295
 800fce8:	6828      	ldr	r0, [r5, #0]
void samplingTask(void const * argument) {
	while (1) {
		// waiting for new mail
		osEvent event = osMailGet(dmaAudioMail_q_id, osWaitForever);
		if (event.status == osEventMail) {
			SoundMailStr *receivedSound = (SoundMailStr *) event.value.p;
 800fcea:	9e02      	ldr	r6, [sp, #8]

			// waiting for access to mailSoundBuffer
			osStatus status = osMutexWait(mainSoundBufferMutex_id,
 800fcec:	f7f6 fe26 	bl	800693c <osMutexWait>
			osWaitForever);
			if (status == osOK) {
 800fcf0:	b968      	cbnz	r0, 800fd0e <samplingTask+0x46>
				// filling cyclic buffer
				audioRecordingUpdateSoundBuffer(mainSoundBuffer, receivedSound);
 800fcf2:	4b10      	ldr	r3, [pc, #64]	; (800fd34 <samplingTask+0x6c>)
 800fcf4:	4631      	mov	r1, r6
 800fcf6:	6818      	ldr	r0, [r3, #0]
 800fcf8:	f7fe ff75 	bl	800ebe6 <audioRecordingUpdateSoundBuffer>

				// releasing mutex
				status = osMutexRelease(mainSoundBufferMutex_id);
 800fcfc:	6828      	ldr	r0, [r5, #0]
 800fcfe:	f7f6 fea5 	bl	8006a4c <osMutexRelease>
				if (status != osOK) {
 800fd02:	4601      	mov	r1, r0
 800fd04:	b130      	cbz	r0, 800fd14 <samplingTask+0x4c>
					logErrVal("Sampling mutex release", status);
 800fd06:	480c      	ldr	r0, [pc, #48]	; (800fd38 <samplingTask+0x70>)
 800fd08:	f7ff f93c 	bl	800ef84 <logErrVal>
 800fd0c:	e002      	b.n	800fd14 <samplingTask+0x4c>
				}
			} else {
				logErr("Sampling mutex");
 800fd0e:	480b      	ldr	r0, [pc, #44]	; (800fd3c <samplingTask+0x74>)
 800fd10:	f7ff f914 	bl	800ef3c <logErr>
			}

			// free audio mail memory
			status = osMailFree(dmaAudioMail_q_id, receivedSound);
 800fd14:	4631      	mov	r1, r6
 800fd16:	6838      	ldr	r0, [r7, #0]
 800fd18:	f7f6 ffb8 	bl	8006c8c <osMailFree>
			if (status != osOK) {
 800fd1c:	4601      	mov	r1, r0
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d0d7      	beq.n	800fcd2 <samplingTask+0xa>
				logErrVal("Sound mail free", status);
 800fd22:	4807      	ldr	r0, [pc, #28]	; (800fd40 <samplingTask+0x78>)
 800fd24:	f7ff f92e 	bl	800ef84 <logErrVal>
			}
		}
	}
 800fd28:	e7d3      	b.n	800fcd2 <samplingTask+0xa>
 800fd2a:	bf00      	nop
 800fd2c:	200497b8 	.word	0x200497b8
 800fd30:	200497b0 	.word	0x200497b0
 800fd34:	200497c4 	.word	0x200497c4
 800fd38:	0802ce80 	.word	0x0802ce80
 800fd3c:	0802ce97 	.word	0x0802ce97
 800fd40:	0802cea6 	.word	0x0802cea6

0800fd44 <soundProcessingTask>:
}

/**
 * @brief FFT processing task
 */
void soundProcessingTask(void const * argument) {
 800fd44:	b5f0      	push	{r4, r5, r6, r7, lr}
	arm_cfft_instance_f32* cfftInstance;
	osStatus status;
	osEvent event;

	// allocating memory for temporary spectrum buffer
	temporarySpectrumBufferStr = osPoolCAlloc(spectrumBufferPool_id);
 800fd46:	4b32      	ldr	r3, [pc, #200]	; (800fe10 <soundProcessingTask+0xcc>)
}

/**
 * @brief FFT processing task
 */
void soundProcessingTask(void const * argument) {
 800fd48:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
	arm_cfft_instance_f32* cfftInstance;
	osStatus status;
	osEvent event;

	// allocating memory for temporary spectrum buffer
	temporarySpectrumBufferStr = osPoolCAlloc(spectrumBufferPool_id);
 800fd4c:	6818      	ldr	r0, [r3, #0]
}

/**
 * @brief FFT processing task
 */
void soundProcessingTask(void const * argument) {
 800fd4e:	b085      	sub	sp, #20
	arm_cfft_instance_f32* cfftInstance;
	osStatus status;
	osEvent event;

	// allocating memory for temporary spectrum buffer
	temporarySpectrumBufferStr = osPoolCAlloc(spectrumBufferPool_id);
 800fd50:	f7f6 fee9 	bl	8006b26 <osPoolCAlloc>
	cfftInstance = osPoolCAlloc(cfftPool_id);
 800fd54:	4b2f      	ldr	r3, [pc, #188]	; (800fe14 <soundProcessingTask+0xd0>)
	arm_cfft_instance_f32* cfftInstance;
	osStatus status;
	osEvent event;

	// allocating memory for temporary spectrum buffer
	temporarySpectrumBufferStr = osPoolCAlloc(spectrumBufferPool_id);
 800fd56:	4604      	mov	r4, r0
	cfftInstance = osPoolCAlloc(cfftPool_id);
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	f7f6 fee4 	bl	8006b26 <osPoolCAlloc>
 800fd5e:	4605      	mov	r5, r0

	while (1) {
		// waiting for start signal
		event = osSignalWait(START_SOUND_PROCESSING_SIGNAL, osWaitForever);
 800fd60:	2101      	movs	r1, #1
 800fd62:	f04f 32ff 	mov.w	r2, #4294967295
 800fd66:	a801      	add	r0, sp, #4
 800fd68:	f7f6 fdc0 	bl	80068ec <osSignalWait>
 800fd6c:	9901      	ldr	r1, [sp, #4]

		if (event.status == osEventSignal) {
 800fd6e:	2908      	cmp	r1, #8
 800fd70:	d149      	bne.n	800fe06 <soundProcessingTask+0xc2>

			// waiting for access to main sound buffer
			status = osMutexWait(mainSoundBufferMutex_id, osWaitForever);
 800fd72:	4e29      	ldr	r6, [pc, #164]	; (800fe18 <soundProcessingTask+0xd4>)
 800fd74:	f04f 31ff 	mov.w	r1, #4294967295
 800fd78:	6830      	ldr	r0, [r6, #0]
 800fd7a:	f7f6 fddf 	bl	800693c <osMutexWait>
			if (status == osOK) {
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d13d      	bne.n	800fdfe <soundProcessingTask+0xba>

				// getting FFT instance
				soundProcessingGetCfftInstance(cfftInstance,
						mainSoundBuffer->size / 2);
 800fd82:	4f26      	ldr	r7, [pc, #152]	; (800fe1c <soundProcessingTask+0xd8>)
			// waiting for access to main sound buffer
			status = osMutexWait(mainSoundBufferMutex_id, osWaitForever);
			if (status == osOK) {

				// getting FFT instance
				soundProcessingGetCfftInstance(cfftInstance,
 800fd84:	4628      	mov	r0, r5
						mainSoundBuffer->size / 2);
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
			// waiting for access to main sound buffer
			status = osMutexWait(mainSoundBufferMutex_id, osWaitForever);
			if (status == osOK) {

				// getting FFT instance
				soundProcessingGetCfftInstance(cfftInstance,
 800fd8c:	6819      	ldr	r1, [r3, #0]
 800fd8e:	0849      	lsrs	r1, r1, #1
 800fd90:	f7ff fd22 	bl	800f7d8 <soundProcessingGetCfftInstance>
						mainSoundBuffer->size / 2);

				if (cfftInstance != NULL) {
 800fd94:	b345      	cbz	r5, 800fde8 <soundProcessingTask+0xa4>
					float32_t temporaryAudioBuffer[MAIN_SOUND_BUFFER_MAX_BUFFER_SIZE];

					// spectrum buffer initialization and sound buffer copying
					soundProcessingAmplitudeInit(temporarySpectrumBufferStr,
 800fd96:	6839      	ldr	r1, [r7, #0]
 800fd98:	aa04      	add	r2, sp, #16
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f7ff fcec 	bl	800f778 <soundProcessingAmplitudeInit>
							mainSoundBuffer, temporaryAudioBuffer);

					// releasing mainSoundBufferMutex
					status = osMutexRelease(mainSoundBufferMutex_id);
 800fda0:	6830      	ldr	r0, [r6, #0]
 800fda2:	f7f6 fe53 	bl	8006a4c <osMutexRelease>
					if (status != osOK) {
 800fda6:	4601      	mov	r1, r0
 800fda8:	b110      	cbz	r0, 800fdb0 <soundProcessingTask+0x6c>
						logErrVal("Sampling mutex (sound processing) release",
 800fdaa:	481d      	ldr	r0, [pc, #116]	; (800fe20 <soundProcessingTask+0xdc>)
 800fdac:	f7ff f8ea 	bl	800ef84 <logErrVal>
					// calculating spectrum
					soundProcessingGetAmplitudeInstance(cfftInstance,
							temporarySpectrumBufferStr, temporaryAudioBuffer);

					// waiting for access to main spectrum buffer
					status = osMutexWait(mainSpectrumBufferMutex_id,
 800fdb0:	4e1c      	ldr	r6, [pc, #112]	; (800fe24 <soundProcessingTask+0xe0>)
						logErrVal("Sampling mutex (sound processing) release",
								status);
					}

					// calculating spectrum
					soundProcessingGetAmplitudeInstance(cfftInstance,
 800fdb2:	aa04      	add	r2, sp, #16
 800fdb4:	4621      	mov	r1, r4
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	f7ff fcce 	bl	800f758 <soundProcessingGetAmplitudeInstance>
							temporarySpectrumBufferStr, temporaryAudioBuffer);

					// waiting for access to main spectrum buffer
					status = osMutexWait(mainSpectrumBufferMutex_id,
 800fdbc:	f04f 31ff 	mov.w	r1, #4294967295
 800fdc0:	6830      	ldr	r0, [r6, #0]
 800fdc2:	f7f6 fdbb 	bl	800693c <osMutexWait>
					osWaitForever);
					if (status == osOK) {
 800fdc6:	4601      	mov	r1, r0
 800fdc8:	b960      	cbnz	r0, 800fde4 <soundProcessingTask+0xa0>

						// copying spectrum from temporary buffer to main buffer
						soundProcessingCopyAmplitudeInstance(
 800fdca:	4b17      	ldr	r3, [pc, #92]	; (800fe28 <soundProcessingTask+0xe4>)
 800fdcc:	4620      	mov	r0, r4
 800fdce:	6819      	ldr	r1, [r3, #0]
 800fdd0:	f7ff fd4a 	bl	800f868 <soundProcessingCopyAmplitudeInstance>
								temporarySpectrumBufferStr, mainSpectrumBuffer);

						// releasing main spectrum buffer mutex
						status = osMutexRelease(mainSpectrumBufferMutex_id);
 800fdd4:	6830      	ldr	r0, [r6, #0]
 800fdd6:	f7f6 fe39 	bl	8006a4c <osMutexRelease>
						if (status != osOK) {
 800fdda:	4601      	mov	r1, r0
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d0bf      	beq.n	800fd60 <soundProcessingTask+0x1c>
							logErrVal("Shared amp mutex released", status);
 800fde0:	4812      	ldr	r0, [pc, #72]	; (800fe2c <soundProcessingTask+0xe8>)
 800fde2:	e011      	b.n	800fe08 <soundProcessingTask+0xc4>
						}
					} else {
						logErrVal("Shared amp mutex wait", status);
 800fde4:	4812      	ldr	r0, [pc, #72]	; (800fe30 <soundProcessingTask+0xec>)
 800fde6:	e00f      	b.n	800fe08 <soundProcessingTask+0xc4>
					}

				} else {
					logErr("Cfft NULL");
 800fde8:	4812      	ldr	r0, [pc, #72]	; (800fe34 <soundProcessingTask+0xf0>)
 800fdea:	f7ff f8a7 	bl	800ef3c <logErr>

					// releasing main sound buffer mutex
					status = osMutexRelease(mainSoundBufferMutex_id);
 800fdee:	6830      	ldr	r0, [r6, #0]
 800fdf0:	f7f6 fe2c 	bl	8006a4c <osMutexRelease>
					if (status != osOK) {
 800fdf4:	4601      	mov	r1, r0
 800fdf6:	2800      	cmp	r0, #0
 800fdf8:	d0b2      	beq.n	800fd60 <soundProcessingTask+0x1c>
						logErrVal("Sampling mutex (sound processing) release",
 800fdfa:	4809      	ldr	r0, [pc, #36]	; (800fe20 <soundProcessingTask+0xdc>)
 800fdfc:	e004      	b.n	800fe08 <soundProcessingTask+0xc4>
								status);
					}
				}
			} else {
				logErr("Sampling mutex (sound processing)");
 800fdfe:	480e      	ldr	r0, [pc, #56]	; (800fe38 <soundProcessingTask+0xf4>)
 800fe00:	f7ff f89c 	bl	800ef3c <logErr>
 800fe04:	e7ac      	b.n	800fd60 <soundProcessingTask+0x1c>
			}
		} else
			logErrVal("ST sp wait", event.status);
 800fe06:	480d      	ldr	r0, [pc, #52]	; (800fe3c <soundProcessingTask+0xf8>)
 800fe08:	f7ff f8bc 	bl	800ef84 <logErrVal>
 800fe0c:	e7a8      	b.n	800fd60 <soundProcessingTask+0x1c>
 800fe0e:	bf00      	nop
 800fe10:	200497bc 	.word	0x200497bc
 800fe14:	200497cc 	.word	0x200497cc
 800fe18:	200497b0 	.word	0x200497b0
 800fe1c:	200497c4 	.word	0x200497c4
 800fe20:	0802ceb6 	.word	0x0802ceb6
 800fe24:	200497b4 	.word	0x200497b4
 800fe28:	200497e4 	.word	0x200497e4
 800fe2c:	0802cee0 	.word	0x0802cee0
 800fe30:	0802cefa 	.word	0x0802cefa
 800fe34:	0802cf10 	.word	0x0802cf10
 800fe38:	0802cf1a 	.word	0x0802cf1a
 800fe3c:	0802cf3c 	.word	0x0802cf3c

0800fe40 <streamingTask>:

	ip_addr_t clientIp;
	IP4_ADDR(&clientIp, 192, 168, 1, 10);

	// creating UDP socket
	udpStreamingSocket = netconn_new(NETCONN_UDP);
 800fe40:	2200      	movs	r2, #0
	struct netconn *udpStreamingSocket = NULL;
	err_t status;
	err_t netErr;

	ip_addr_t clientIp;
	IP4_ADDR(&clientIp, 192, 168, 1, 10);
 800fe42:	4b30      	ldr	r3, [pc, #192]	; (800ff04 <streamingTask+0xc4>)
#endif

/**
 * @brief Spectrum UDP streaming
 */
void streamingTask(void const * argument) {
 800fe44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	ip_addr_t clientIp;
	IP4_ADDR(&clientIp, 192, 168, 1, 10);

	// creating UDP socket
	udpStreamingSocket = netconn_new(NETCONN_UDP);
 800fe48:	4611      	mov	r1, r2
 800fe4a:	2020      	movs	r0, #32
	struct netconn *udpStreamingSocket = NULL;
	err_t status;
	err_t netErr;

	ip_addr_t clientIp;
	IP4_ADDR(&clientIp, 192, 168, 1, 10);
 800fe4c:	9301      	str	r3, [sp, #4]

	// creating UDP socket
	udpStreamingSocket = netconn_new(NETCONN_UDP);
 800fe4e:	f7f8 fcd7 	bl	8008800 <netconn_new_with_proto_and_callback>
	if (udpStreamingSocket == NULL)
 800fe52:	4604      	mov	r4, r0
 800fe54:	b918      	cbnz	r0, 800fe5e <streamingTask+0x1e>
		logErr("Null UDP client");
 800fe56:	482c      	ldr	r0, [pc, #176]	; (800ff08 <streamingTask+0xc8>)
 800fe58:	f7ff f870 	bl	800ef3c <logErr>
 800fe5c:	e001      	b.n	800fe62 <streamingTask+0x22>
	else
		udpStreamingSocket->recv_timeout = 1;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	6183      	str	r3, [r0, #24]

	// binding socket to ethernet interface on UDP_STREAMING_PORT
	status = netconn_bind(udpStreamingSocket, &ethernetInterfaceHandler.ip_addr,
 800fe62:	492a      	ldr	r1, [pc, #168]	; (800ff0c <streamingTask+0xcc>)
 800fe64:	f24d 02b2 	movw	r2, #53426	; 0xd0b2
 800fe68:	4620      	mov	r0, r4
 800fe6a:	f7f8 fd15 	bl	8008898 <netconn_bind>
	UDP_STREAMING_PORT);
	if (status != ERR_OK)
 800fe6e:	4601      	mov	r1, r0
 800fe70:	b110      	cbz	r0, 800fe78 <streamingTask+0x38>
		logErrVal("Udp bind", status);
 800fe72:	4827      	ldr	r0, [pc, #156]	; (800ff10 <streamingTask+0xd0>)
 800fe74:	f7ff f886 	bl	800ef84 <logErrVal>

		// delay
		//osDelay(10);

		// waiting for acces to ethernet interface
		osStatus status = osMutexWait(ethernetInterfaceMutex_id, osWaitForever);
 800fe78:	4d26      	ldr	r5, [pc, #152]	; (800ff14 <streamingTask+0xd4>)
 800fe7a:	462f      	mov	r7, r5
	if (status != ERR_OK)
		logErrVal("Udp bind", status);

	while (1) {
		// setting signal to start sound processing
		status = osSignalSet(soundProcessingTaskHandle,
 800fe7c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800ff38 <streamingTask+0xf8>
 800fe80:	2101      	movs	r1, #1
 800fe82:	f8d8 0000 	ldr.w	r0, [r8]
 800fe86:	f7f6 fd0b 	bl	80068a0 <osSignalSet>
		START_SOUND_PROCESSING_SIGNAL);
		osDelay(configStr.amplitudeSamplingDelay);
 800fe8a:	4b23      	ldr	r3, [pc, #140]	; (800ff18 <streamingTask+0xd8>)
 800fe8c:	7818      	ldrb	r0, [r3, #0]
 800fe8e:	f7f6 fcff 	bl	8006890 <osDelay>

		// delay
		//osDelay(10);

		// waiting for acces to ethernet interface
		osStatus status = osMutexWait(ethernetInterfaceMutex_id, osWaitForever);
 800fe92:	f04f 31ff 	mov.w	r1, #4294967295
 800fe96:	6828      	ldr	r0, [r5, #0]
 800fe98:	f7f6 fd50 	bl	800693c <osMutexWait>
		if (status == osOK) {
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	d1ef      	bne.n	800fe80 <streamingTask+0x40>

			// waiting for access to main spectrum buffer
			status = osMutexWait(mainSpectrumBufferMutex_id,
 800fea0:	4e1e      	ldr	r6, [pc, #120]	; (800ff1c <streamingTask+0xdc>)
 800fea2:	f04f 31ff 	mov.w	r1, #4294967295
 800fea6:	6830      	ldr	r0, [r6, #0]
 800fea8:	f7f6 fd48 	bl	800693c <osMutexWait>
			osWaitForever);
			if (status == osOK) {
 800feac:	4601      	mov	r1, r0
 800feae:	b9d8      	cbnz	r0, 800fee8 <streamingTask+0xa8>

				// "connecting" to UDP
				netErr = netconn_connect(udpStreamingSocket, &clientIp,
 800feb0:	a901      	add	r1, sp, #4
 800feb2:	f24d 02b2 	movw	r2, #53426	; 0xd0b2
 800feb6:	4620      	mov	r0, r4
 800feb8:	f7f8 fd02 	bl	80088c0 <netconn_connect>
				UDP_STREAMING_PORT);
				if (netErr)
 800febc:	4601      	mov	r1, r0
 800febe:	b110      	cbz	r0, 800fec6 <streamingTask+0x86>
					logErrVal("UDP connect", netErr);
 800fec0:	4817      	ldr	r0, [pc, #92]	; (800ff20 <streamingTask+0xe0>)
 800fec2:	f7ff f85f 	bl	800ef84 <logErrVal>

				// sending main spectrum buffer by UDP
				netErr = sendSpectrum(mainSpectrumBuffer, udpStreamingSocket);
 800fec6:	4b17      	ldr	r3, [pc, #92]	; (800ff24 <streamingTask+0xe4>)
 800fec8:	4621      	mov	r1, r4
 800feca:	6818      	ldr	r0, [r3, #0]
 800fecc:	f7fe ff10 	bl	800ecf0 <sendSpectrum>
				if (netErr)
 800fed0:	4601      	mov	r1, r0
 800fed2:	b110      	cbz	r0, 800feda <streamingTask+0x9a>
					logErrVal("UDP write", netErr);
 800fed4:	4814      	ldr	r0, [pc, #80]	; (800ff28 <streamingTask+0xe8>)
 800fed6:	f7ff f855 	bl	800ef84 <logErrVal>

				// releasing main spectrum buffer mutex
				status = osMutexRelease(mainSpectrumBufferMutex_id);
 800feda:	6830      	ldr	r0, [r6, #0]
 800fedc:	f7f6 fdb6 	bl	8006a4c <osMutexRelease>
				if (status != osOK)
 800fee0:	4601      	mov	r1, r0
 800fee2:	b120      	cbz	r0, 800feee <streamingTask+0xae>
					logErrVal("UDP main spect mut release", status);
 800fee4:	4811      	ldr	r0, [pc, #68]	; (800ff2c <streamingTask+0xec>)
 800fee6:	e000      	b.n	800feea <streamingTask+0xaa>
			} else {
				logErrVal("UDP eth int mut wait", status);
 800fee8:	4811      	ldr	r0, [pc, #68]	; (800ff30 <streamingTask+0xf0>)
 800feea:	f7ff f84b 	bl	800ef84 <logErrVal>
			}

			// releasing ethernet interface mutex
			status = osMutexRelease(ethernetInterfaceMutex_id);
 800feee:	6838      	ldr	r0, [r7, #0]
 800fef0:	f7f6 fdac 	bl	8006a4c <osMutexRelease>
			if (status != osOK)
 800fef4:	4601      	mov	r1, r0
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d0c2      	beq.n	800fe80 <streamingTask+0x40>
				logErrVal("UDP eth mut release", status);
 800fefa:	480e      	ldr	r0, [pc, #56]	; (800ff34 <streamingTask+0xf4>)
 800fefc:	f7ff f842 	bl	800ef84 <logErrVal>
 800ff00:	e7bc      	b.n	800fe7c <streamingTask+0x3c>
 800ff02:	bf00      	nop
 800ff04:	0a01a8c0 	.word	0x0a01a8c0
 800ff08:	0802cf47 	.word	0x0802cf47
 800ff0c:	20049570 	.word	0x20049570
 800ff10:	0802cf57 	.word	0x0802cf57
 800ff14:	200497ec 	.word	0x200497ec
 800ff18:	200497d8 	.word	0x200497d8
 800ff1c:	200497b4 	.word	0x200497b4
 800ff20:	0802cf60 	.word	0x0802cf60
 800ff24:	200497e4 	.word	0x200497e4
 800ff28:	0802cf6c 	.word	0x0802cf6c
 800ff2c:	0802cf76 	.word	0x0802cf76
 800ff30:	0802cf91 	.word	0x0802cf91
 800ff34:	0802cfa6 	.word	0x0802cfa6
 800ff38:	200497e0 	.word	0x200497e0

0800ff3c <httpConfigTask>:
 */
void httpConfigTask(void const* argument) {
	struct netconn *httpServer = NULL;

	// creating TCP server
	httpServer = netconn_new(NETCONN_TCP);
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	2010      	movs	r0, #16
}

/**
 * @brief Device configuration (by network using HTTP)
 */
void httpConfigTask(void const* argument) {
 800ff40:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct netconn *httpServer = NULL;

	// creating TCP server
	httpServer = netconn_new(NETCONN_TCP);
 800ff42:	4611      	mov	r1, r2
}

/**
 * @brief Device configuration (by network using HTTP)
 */
void httpConfigTask(void const* argument) {
 800ff44:	b085      	sub	sp, #20
	struct netconn *httpServer = NULL;

	// creating TCP server
	httpServer = netconn_new(NETCONN_TCP);
 800ff46:	f7f8 fc5b 	bl	8008800 <netconn_new_with_proto_and_callback>
	if (httpServer == NULL)
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	b910      	cbnz	r0, 800ff54 <httpConfigTask+0x18>
		logErr("Null TCP");
 800ff4e:	4852      	ldr	r0, [pc, #328]	; (8010098 <httpConfigTask+0x15c>)
 800ff50:	f7fe fff4 	bl	800ef3c <logErr>
	httpServer->recv_timeout = HTTP_HOST_ACCEPT_TIMEOUT;
 800ff54:	2301      	movs	r3, #1

	// binding server to ethernet interface on port 80
	err_t netStatus = netconn_bind(httpServer,
 800ff56:	4951      	ldr	r1, [pc, #324]	; (801009c <httpConfigTask+0x160>)
 800ff58:	2250      	movs	r2, #80	; 0x50
 800ff5a:	4620      	mov	r0, r4

	// creating TCP server
	httpServer = netconn_new(NETCONN_TCP);
	if (httpServer == NULL)
		logErr("Null TCP");
	httpServer->recv_timeout = HTTP_HOST_ACCEPT_TIMEOUT;
 800ff5c:	61a3      	str	r3, [r4, #24]

	// binding server to ethernet interface on port 80
	err_t netStatus = netconn_bind(httpServer,
 800ff5e:	f7f8 fc9b 	bl	8008898 <netconn_bind>
			&ethernetInterfaceHandler.ip_addr, 80);
	if (netStatus != ERR_OK)
 800ff62:	4601      	mov	r1, r0
 800ff64:	b110      	cbz	r0, 800ff6c <httpConfigTask+0x30>
		logErrVal("TCP bind", netStatus);
 800ff66:	484e      	ldr	r0, [pc, #312]	; (80100a0 <httpConfigTask+0x164>)
 800ff68:	f7ff f80c 	bl	800ef84 <logErrVal>

	// starting listening
	netStatus = netconn_listen(httpServer);
 800ff6c:	21ff      	movs	r1, #255	; 0xff
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f7f8 fcba 	bl	80088e8 <netconn_listen_with_backlog>
	if (netStatus != ERR_OK)
 800ff74:	4601      	mov	r1, r0
 800ff76:	b110      	cbz	r0, 800ff7e <httpConfigTask+0x42>
		logErrVal("TCP listen", netStatus);
 800ff78:	484a      	ldr	r0, [pc, #296]	; (80100a4 <httpConfigTask+0x168>)
 800ff7a:	f7ff f803 	bl	800ef84 <logErrVal>
		// delay
		osDelay(HTTP_CONFIG_TASK_DELAY_TIME);
		//logMsg("HTTP task");

		// waiting for acces to ethernet interface
		osStatus status = osMutexWait(ethernetInterfaceMutex_id, osWaitForever);
 800ff7e:	4e4a      	ldr	r6, [pc, #296]	; (80100a8 <httpConfigTask+0x16c>)
 800ff80:	4637      	mov	r7, r6
	if (netStatus != ERR_OK)
		logErrVal("TCP listen", netStatus);

	while (1) {
		// delay
		osDelay(HTTP_CONFIG_TASK_DELAY_TIME);
 800ff82:	2064      	movs	r0, #100	; 0x64
 800ff84:	f7f6 fc84 	bl	8006890 <osDelay>
		//logMsg("HTTP task");

		// waiting for acces to ethernet interface
		osStatus status = osMutexWait(ethernetInterfaceMutex_id, osWaitForever);
 800ff88:	f04f 31ff 	mov.w	r1, #4294967295
 800ff8c:	6830      	ldr	r0, [r6, #0]
 800ff8e:	f7f6 fcd5 	bl	800693c <osMutexWait>
		if (status == osOK) {
 800ff92:	4605      	mov	r5, r0
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d1f4      	bne.n	800ff82 <httpConfigTask+0x46>
			struct netconn *newClient = NULL;
 800ff98:	a904      	add	r1, sp, #16
 800ff9a:	f841 0d10 	str.w	r0, [r1, #-16]!

			// accepting incoming client
			netStatus = netconn_accept(httpServer, &newClient);
 800ff9e:	4620      	mov	r0, r4
 800ffa0:	f7f8 fcb4 	bl	800890c <netconn_accept>
			if (netStatus == ERR_OK) {
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d165      	bne.n	8010074 <httpConfigTask+0x138>
				// if there is a client
				logMsg("Got request");
 800ffa8:	4840      	ldr	r0, [pc, #256]	; (80100ac <httpConfigTask+0x170>)
 800ffaa:	f7fe ffbb 	bl	800ef24 <logMsg>

				struct netbuf* recvBuf;
				newClient->recv_timeout = HTTP_RECEIVE_TIMEOUT;
 800ffae:	9800      	ldr	r0, [sp, #0]
 800ffb0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

				// receiving data from client
				err_t netStatus = netconn_recv(newClient, &recvBuf);
 800ffb4:	a901      	add	r1, sp, #4
			if (netStatus == ERR_OK) {
				// if there is a client
				logMsg("Got request");

				struct netbuf* recvBuf;
				newClient->recv_timeout = HTTP_RECEIVE_TIMEOUT;
 800ffb6:	6183      	str	r3, [r0, #24]

				// receiving data from client
				err_t netStatus = netconn_recv(newClient, &recvBuf);
 800ffb8:	f7f8 fcdf 	bl	800897a <netconn_recv>
				if (netStatus == ERR_OK) {
 800ffbc:	4601      	mov	r1, r0
 800ffbe:	2800      	cmp	r0, #0
 800ffc0:	d146      	bne.n	8010050 <httpConfigTask+0x114>

					// encoding HTTP request type
					uint16_t requestType = getRequestType(recvBuf);
 800ffc2:	9801      	ldr	r0, [sp, #4]
 800ffc4:	f7fe fea8 	bl	800ed18 <getRequestType>
 800ffc8:	4605      	mov	r5, r0
					logMsgVal("Request type ", requestType);
 800ffca:	4601      	mov	r1, r0
 800ffcc:	4838      	ldr	r0, [pc, #224]	; (80100b0 <httpConfigTask+0x174>)
 800ffce:	f7fe ffc1 	bl	800ef54 <logMsgVal>

					switch (requestType) {
 800ffd2:	2d01      	cmp	r5, #1
 800ffd4:	d002      	beq.n	800ffdc <httpConfigTask+0xa0>
 800ffd6:	2d02      	cmp	r5, #2
 800ffd8:	d00a      	beq.n	800fff0 <httpConfigTask+0xb4>
 800ffda:	e032      	b.n	8010042 <httpConfigTask+0x106>
					case GET_REQUEST: {
						if (isConfigRequest(recvBuf)) {
 800ffdc:	9801      	ldr	r0, [sp, #4]
 800ffde:	f7fe fefb 	bl	800edd8 <isConfigRequest>
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	d030      	beq.n	8010048 <httpConfigTask+0x10c>
							// if it is GET config request
							sendConfiguration(&configStr, newClient);
 800ffe6:	9900      	ldr	r1, [sp, #0]
 800ffe8:	4832      	ldr	r0, [pc, #200]	; (80100b4 <httpConfigTask+0x178>)
 800ffea:	f7fe feb1 	bl	800ed50 <sendConfiguration>
 800ffee:	e02b      	b.n	8010048 <httpConfigTask+0x10c>
						}
						break;
					}
					case PUT_REQUEST: {
						sendHttpOk(newClient);
 800fff0:	9800      	ldr	r0, [sp, #0]
 800fff2:	f7fe fedd 	bl	800edb0 <sendHttpOk>
						netbuf_delete(recvBuf);
 800fff6:	9801      	ldr	r0, [sp, #4]
 800fff8:	f7f9 fb16 	bl	8009628 <netbuf_delete>

						// receiving JSON data
						err_t netStatus = netconn_recv(newClient, &recvBuf);
 800fffc:	a901      	add	r1, sp, #4
 800fffe:	9800      	ldr	r0, [sp, #0]
 8010000:	f7f8 fcbb 	bl	800897a <netconn_recv>
						if (netStatus == ERR_OK) {
 8010004:	bb00      	cbnz	r0, 8010048 <httpConfigTask+0x10c>

							// parsing JSON data to config structure
							parseJSON(recvBuf, &tempConfigStr);

							// processing new data
							if(tempConfigStr.amplitudeSamplingDelay != configStr.amplitudeSamplingDelay)
 8010006:	4d2b      	ldr	r5, [pc, #172]	; (80100b4 <httpConfigTask+0x178>)
						err_t netStatus = netconn_recv(newClient, &recvBuf);
						if (netStatus == ERR_OK) {
							StmConfig tempConfigStr;

							// parsing JSON data to config structure
							parseJSON(recvBuf, &tempConfigStr);
 8010008:	a902      	add	r1, sp, #8
 801000a:	9801      	ldr	r0, [sp, #4]
 801000c:	f7fe fef6 	bl	800edfc <parseJSON>

							// processing new data
							if(tempConfigStr.amplitudeSamplingDelay != configStr.amplitudeSamplingDelay)
 8010010:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8010014:	782b      	ldrb	r3, [r5, #0]
 8010016:	429a      	cmp	r2, r3
 8010018:	d002      	beq.n	8010020 <httpConfigTask+0xe4>
							{
								logMsg("Delay changed");
 801001a:	4827      	ldr	r0, [pc, #156]	; (80100b8 <httpConfigTask+0x17c>)
 801001c:	f7fe ff82 	bl	800ef24 <logMsg>
							}
							if(tempConfigStr.audioSamplingFrequency != configStr.audioSamplingFrequency)
 8010020:	9803      	ldr	r0, [sp, #12]
 8010022:	686b      	ldr	r3, [r5, #4]
 8010024:	4298      	cmp	r0, r3
 8010026:	d004      	beq.n	8010032 <httpConfigTask+0xf6>
							{
								audioRecorderSetSamplingFrequency(tempConfigStr.audioSamplingFrequency);
 8010028:	f7fe fdae 	bl	800eb88 <audioRecorderSetSamplingFrequency>
								logMsg("Frequency changed");
 801002c:	4823      	ldr	r0, [pc, #140]	; (80100bc <httpConfigTask+0x180>)
 801002e:	f7fe ff79 	bl	800ef24 <logMsg>
							}

							copyConfig(&configStr, &tempConfigStr);
 8010032:	a902      	add	r1, sp, #8
 8010034:	481f      	ldr	r0, [pc, #124]	; (80100b4 <httpConfigTask+0x178>)
 8010036:	f7fe ff21 	bl	800ee7c <copyConfig>
							logMsg("Got configuration");
 801003a:	4821      	ldr	r0, [pc, #132]	; (80100c0 <httpConfigTask+0x184>)
 801003c:	f7fe ff72 	bl	800ef24 <logMsg>
 8010040:	e002      	b.n	8010048 <httpConfigTask+0x10c>
							//configCopy(configStr, &tempConfigStr);
						}
						break;
					}
					default: {
						logErr("HTTP request");
 8010042:	4820      	ldr	r0, [pc, #128]	; (80100c4 <httpConfigTask+0x188>)
 8010044:	f7fe ff7a 	bl	800ef3c <logErr>
						break;
					}
					}

					// deleting socket buffer
					netbuf_delete(recvBuf);
 8010048:	9801      	ldr	r0, [sp, #4]
 801004a:	f7f9 faed 	bl	8009628 <netbuf_delete>
 801004e:	e002      	b.n	8010056 <httpConfigTask+0x11a>
				} else
					logErrVal("TCP no data", netStatus);
 8010050:	481d      	ldr	r0, [pc, #116]	; (80100c8 <httpConfigTask+0x18c>)
 8010052:	f7fe ff97 	bl	800ef84 <logErrVal>

				// closing connectoin
				netStatus = netconn_close(newClient);
 8010056:	9800      	ldr	r0, [sp, #0]
 8010058:	f7f8 fd12 	bl	8008a80 <netconn_close>
				if (netStatus != ERR_OK)
 801005c:	4601      	mov	r1, r0
 801005e:	b110      	cbz	r0, 8010066 <httpConfigTask+0x12a>
					logErrVal("TCP close", netStatus);
 8010060:	481a      	ldr	r0, [pc, #104]	; (80100cc <httpConfigTask+0x190>)
 8010062:	f7fe ff8f 	bl	800ef84 <logErrVal>

				// free client memory
				netStatus = netconn_delete(newClient);
 8010066:	9800      	ldr	r0, [sp, #0]
 8010068:	f7f8 fbfc 	bl	8008864 <netconn_delete>
				if (netStatus != ERR_OK)
 801006c:	4601      	mov	r1, r0
 801006e:	b138      	cbz	r0, 8010080 <httpConfigTask+0x144>
					logErrVal("TCP delete", netStatus);
 8010070:	4817      	ldr	r0, [pc, #92]	; (80100d0 <httpConfigTask+0x194>)
 8010072:	e003      	b.n	801007c <httpConfigTask+0x140>
			} else if (netStatus != ERR_TIMEOUT)
 8010074:	3003      	adds	r0, #3
 8010076:	d003      	beq.n	8010080 <httpConfigTask+0x144>
				logErrVal("TCP accept", status);
 8010078:	4629      	mov	r1, r5
 801007a:	4816      	ldr	r0, [pc, #88]	; (80100d4 <httpConfigTask+0x198>)
 801007c:	f7fe ff82 	bl	800ef84 <logErrVal>

			// releasing ethernet interface mutex
			status = osMutexRelease(ethernetInterfaceMutex_id);
 8010080:	6838      	ldr	r0, [r7, #0]
 8010082:	f7f6 fce3 	bl	8006a4c <osMutexRelease>
			if (status != osOK)
 8010086:	4601      	mov	r1, r0
 8010088:	2800      	cmp	r0, #0
 801008a:	f43f af7a 	beq.w	800ff82 <httpConfigTask+0x46>
				logErrVal("Eth mut release", status);
 801008e:	4812      	ldr	r0, [pc, #72]	; (80100d8 <httpConfigTask+0x19c>)
 8010090:	f7fe ff78 	bl	800ef84 <logErrVal>
 8010094:	e775      	b.n	800ff82 <httpConfigTask+0x46>
 8010096:	bf00      	nop
 8010098:	0802cfba 	.word	0x0802cfba
 801009c:	20049570 	.word	0x20049570
 80100a0:	0802cfc3 	.word	0x0802cfc3
 80100a4:	0802cfcc 	.word	0x0802cfcc
 80100a8:	200497ec 	.word	0x200497ec
 80100ac:	0802cfd7 	.word	0x0802cfd7
 80100b0:	0802cfe3 	.word	0x0802cfe3
 80100b4:	200497d8 	.word	0x200497d8
 80100b8:	0802cff1 	.word	0x0802cff1
 80100bc:	0802cfff 	.word	0x0802cfff
 80100c0:	0802d011 	.word	0x0802d011
 80100c4:	0802d023 	.word	0x0802d023
 80100c8:	0802d030 	.word	0x0802d030
 80100cc:	0802d03c 	.word	0x0802d03c
 80100d0:	0802d046 	.word	0x0802d046
 80100d4:	0802d051 	.word	0x0802d051
 80100d8:	0802d05c 	.word	0x0802d05c

080100dc <threadsInit>:
// FUNCTIONS

/**
 * @brief Function initializes the initialization task
 */
void threadsInit() {
 80100dc:	b508      	push	{r3, lr}
	/* Starting OS task initialization */
	initTaskHandle = osThreadCreate(osThread(initThread), NULL);
 80100de:	2100      	movs	r1, #0
 80100e0:	4802      	ldr	r0, [pc, #8]	; (80100ec <threadsInit+0x10>)
 80100e2:	f7f6 fbb5 	bl	8006850 <osThreadCreate>
 80100e6:	4b02      	ldr	r3, [pc, #8]	; (80100f0 <threadsInit+0x14>)
 80100e8:	6018      	str	r0, [r3, #0]
 80100ea:	bd08      	pop	{r3, pc}
 80100ec:	0802d138 	.word	0x0802d138
 80100f0:	200497d4 	.word	0x200497d4

080100f4 <BSP_AUDIO_IN_TransferComplete_CallBack>:
}

/**
 * @brief Functions called as DMA interrupt
 */
void audioRecorder_FullBufferFilled(void) {
 80100f4:	b538      	push	{r3, r4, r5, lr}
	SoundMailStr *soundSamples;

	// allocating memory for sound mail
	soundSamples = osMailAlloc(dmaAudioMail_q_id, osWaitForever);
 80100f6:	4c0d      	ldr	r4, [pc, #52]	; (801012c <BSP_AUDIO_IN_TransferComplete_CallBack+0x38>)
 80100f8:	f04f 31ff 	mov.w	r1, #4294967295
 80100fc:	6820      	ldr	r0, [r4, #0]
 80100fe:	f7f6 fd59 	bl	8006bb4 <osMailAlloc>
	audioRecordingSoundMailFill(soundSamples, dmaAudioBuffer,
 8010102:	4b0b      	ldr	r3, [pc, #44]	; (8010130 <BSP_AUDIO_IN_TransferComplete_CallBack+0x3c>)
 */
void audioRecorder_FullBufferFilled(void) {
	SoundMailStr *soundSamples;

	// allocating memory for sound mail
	soundSamples = osMailAlloc(dmaAudioMail_q_id, osWaitForever);
 8010104:	4605      	mov	r5, r0
	audioRecordingSoundMailFill(soundSamples, dmaAudioBuffer,
 8010106:	f44f 7280 	mov.w	r2, #256	; 0x100
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	4909      	ldr	r1, [pc, #36]	; (8010134 <BSP_AUDIO_IN_TransferComplete_CallBack+0x40>)
 801010e:	f7fe fd5b 	bl	800ebc8 <audioRecordingSoundMailFill>
	AUDIO_BUFFER_SIZE, configStr.audioSamplingFrequency);

	// sending mail to queue
	osStatus status = osMailPut(dmaAudioMail_q_id, soundSamples);
 8010112:	4629      	mov	r1, r5
 8010114:	6820      	ldr	r0, [r4, #0]
 8010116:	f7f6 fd53 	bl	8006bc0 <osMailPut>
	if (status != osOK)
 801011a:	4601      	mov	r1, r0
 801011c:	b120      	cbz	r0, 8010128 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>
		logErrVal("Audio mail send", status);
 801011e:	4806      	ldr	r0, [pc, #24]	; (8010138 <BSP_AUDIO_IN_TransferComplete_CallBack+0x44>)
}
 8010120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	AUDIO_BUFFER_SIZE, configStr.audioSamplingFrequency);

	// sending mail to queue
	osStatus status = osMailPut(dmaAudioMail_q_id, soundSamples);
	if (status != osOK)
		logErrVal("Audio mail send", status);
 8010124:	f7fe bf2e 	b.w	800ef84 <logErrVal>
 8010128:	bd38      	pop	{r3, r4, r5, pc}
 801012a:	bf00      	nop
 801012c:	200497b8 	.word	0x200497b8
 8010130:	200497d8 	.word	0x200497d8
 8010134:	200495ac 	.word	0x200495ac
 8010138:	0802d06c 	.word	0x0802d06c

0801013c <cJSON_strcasecmp>:
    return global_ep;
}

/* case insensitive strcmp */
static int cJSON_strcasecmp(const char *s1, const char *s2)
{
 801013c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!s1)
 801013e:	b918      	cbnz	r0, 8010148 <cJSON_strcasecmp+0xc>
    {
        return (s1 == s2) ? 0 : 1; /* both NULL? */
 8010140:	1c08      	adds	r0, r1, #0
 8010142:	bf18      	it	ne
 8010144:	2001      	movne	r0, #1
 8010146:	bdf0      	pop	{r4, r5, r6, r7, pc}
    }
    if (!s2)
 8010148:	b349      	cbz	r1, 801019e <cJSON_strcasecmp+0x62>
    {
        return 1;
    }
    for(; tolower(*s1) == tolower(*s2); ++s1, ++s2)
 801014a:	4b16      	ldr	r3, [pc, #88]	; (80101a4 <cJSON_strcasecmp+0x68>)
 801014c:	1e42      	subs	r2, r0, #1
 801014e:	3901      	subs	r1, #1
 8010150:	f8d3 e000 	ldr.w	lr, [r3]
 8010154:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010158:	eb0e 0300 	add.w	r3, lr, r0
 801015c:	785d      	ldrb	r5, [r3, #1]
 801015e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010162:	f005 0503 	and.w	r5, r5, #3
 8010166:	eb0e 0403 	add.w	r4, lr, r3
 801016a:	2d01      	cmp	r5, #1
 801016c:	7864      	ldrb	r4, [r4, #1]
 801016e:	bf0c      	ite	eq
 8010170:	f100 0720 	addeq.w	r7, r0, #32
 8010174:	4607      	movne	r7, r0
 8010176:	f004 0403 	and.w	r4, r4, #3
 801017a:	2c01      	cmp	r4, #1
 801017c:	bf0c      	ite	eq
 801017e:	f103 0620 	addeq.w	r6, r3, #32
 8010182:	461e      	movne	r6, r3
 8010184:	42b7      	cmp	r7, r6
 8010186:	d102      	bne.n	801018e <cJSON_strcasecmp+0x52>
    {
        if (*s1 == 0)
 8010188:	2800      	cmp	r0, #0
 801018a:	d1e3      	bne.n	8010154 <cJSON_strcasecmp+0x18>
 801018c:	e008      	b.n	80101a0 <cJSON_strcasecmp+0x64>
        {
            return 0;
        }
    }

    return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
 801018e:	2d01      	cmp	r5, #1
 8010190:	bf08      	it	eq
 8010192:	3020      	addeq	r0, #32
 8010194:	2c01      	cmp	r4, #1
 8010196:	bf08      	it	eq
 8010198:	3320      	addeq	r3, #32
 801019a:	1ac0      	subs	r0, r0, r3
 801019c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    {
        return (s1 == s2) ? 0 : 1; /* both NULL? */
    }
    if (!s2)
    {
        return 1;
 801019e:	2001      	movs	r0, #1
            return 0;
        }
    }

    return tolower(*(const unsigned char *)s1) - tolower(*(const unsigned char *)s2);
}
 80101a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101a2:	bf00      	nop
 80101a4:	2001008c 	.word	0x2001008c

080101a8 <parse_hex4>:
    return str;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const char *str)
{
 80101a8:	b510      	push	{r4, lr}
    unsigned h = 0;
    /* first digit */
    if ((*str >= '0') && (*str <= '9'))
 80101aa:	7801      	ldrb	r1, [r0, #0]
 80101ac:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80101b0:	b2da      	uxtb	r2, r3
 80101b2:	2a09      	cmp	r2, #9
 80101b4:	d90c      	bls.n	80101d0 <parse_hex4+0x28>
    {
        h += (*str) - '0';
    }
    else if ((*str >= 'A') && (*str <= 'F'))
 80101b6:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80101ba:	2b05      	cmp	r3, #5
 80101bc:	d802      	bhi.n	80101c4 <parse_hex4+0x1c>
    {
        h += 10 + (*str) - 'A';
 80101be:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 80101c2:	e005      	b.n	80101d0 <parse_hex4+0x28>
    }
    else if ((*str >= 'a') && (*str <= 'f'))
 80101c4:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80101c8:	2b05      	cmp	r3, #5
 80101ca:	d841      	bhi.n	8010250 <parse_hex4+0xa8>
    {
        h += 10 + (*str) - 'a';
 80101cc:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57


    /* second digit */
    h = h << 4;
    str++;
    if ((*str >= '0') && (*str <= '9'))
 80101d0:	7844      	ldrb	r4, [r0, #1]
        return 0;
    }


    /* second digit */
    h = h << 4;
 80101d2:	0119      	lsls	r1, r3, #4
    str++;
    if ((*str >= '0') && (*str <= '9'))
 80101d4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80101d8:	b2da      	uxtb	r2, r3
 80101da:	2a09      	cmp	r2, #9
 80101dc:	d90c      	bls.n	80101f8 <parse_hex4+0x50>
    {
        h += (*str) - '0';
    }
    else if ((*str >= 'A') && (*str <= 'F'))
 80101de:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80101e2:	2b05      	cmp	r3, #5
 80101e4:	d802      	bhi.n	80101ec <parse_hex4+0x44>
    {
        h += 10 + (*str) - 'A';
 80101e6:	f1a4 0337 	sub.w	r3, r4, #55	; 0x37
 80101ea:	e005      	b.n	80101f8 <parse_hex4+0x50>
    }
    else if ((*str >= 'a') && (*str <= 'f'))
 80101ec:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80101f0:	2b05      	cmp	r3, #5
 80101f2:	d82d      	bhi.n	8010250 <parse_hex4+0xa8>
    {
        h += 10 + (*str) - 'a';
 80101f4:	f1a4 0357 	sub.w	r3, r4, #87	; 0x57
 80101f8:	440b      	add	r3, r1
    }

    /* third digit */
    h = h << 4;
    str++;
    if ((*str >= '0') && (*str <= '9'))
 80101fa:	7881      	ldrb	r1, [r0, #2]
    {
        return 0;
    }

    /* third digit */
    h = h << 4;
 80101fc:	011a      	lsls	r2, r3, #4
    str++;
    if ((*str >= '0') && (*str <= '9'))
 80101fe:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010202:	b2dc      	uxtb	r4, r3
 8010204:	2c09      	cmp	r4, #9
 8010206:	d90c      	bls.n	8010222 <parse_hex4+0x7a>
    {
        h += (*str) - '0';
    }
    else if ((*str >= 'A') && (*str <= 'F'))
 8010208:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 801020c:	2b05      	cmp	r3, #5
 801020e:	d802      	bhi.n	8010216 <parse_hex4+0x6e>
    {
        h += 10 + (*str) - 'A';
 8010210:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8010214:	e005      	b.n	8010222 <parse_hex4+0x7a>
    }
    else if ((*str >= 'a') && (*str <= 'f'))
 8010216:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 801021a:	2b05      	cmp	r3, #5
 801021c:	d818      	bhi.n	8010250 <parse_hex4+0xa8>
    {
        h += 10 + (*str) - 'a';
 801021e:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
 8010222:	4413      	add	r3, r2
    }

    /* fourth digit */
    h = h << 4;
    str++;
    if ((*str >= '0') && (*str <= '9'))
 8010224:	78c2      	ldrb	r2, [r0, #3]
 8010226:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
    {
        return 0;
    }

    /* fourth digit */
    h = h << 4;
 801022a:	011b      	lsls	r3, r3, #4
    str++;
    if ((*str >= '0') && (*str <= '9'))
 801022c:	b2c1      	uxtb	r1, r0
 801022e:	2909      	cmp	r1, #9
 8010230:	d90c      	bls.n	801024c <parse_hex4+0xa4>
    {
        h += (*str) - '0';
    }
    else if ((*str >= 'A') && (*str <= 'F'))
 8010232:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8010236:	2905      	cmp	r1, #5
 8010238:	d802      	bhi.n	8010240 <parse_hex4+0x98>
    {
        h += 10 + (*str) - 'A';
 801023a:	f1a2 0037 	sub.w	r0, r2, #55	; 0x37
 801023e:	e005      	b.n	801024c <parse_hex4+0xa4>
    }
    else if ((*str >= 'a') && (*str <= 'f'))
 8010240:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
 8010244:	2905      	cmp	r1, #5
 8010246:	d803      	bhi.n	8010250 <parse_hex4+0xa8>
    {
        h += 10 + (*str) - 'a';
 8010248:	f1a2 0057 	sub.w	r0, r2, #87	; 0x57
 801024c:	4418      	add	r0, r3
 801024e:	bd10      	pop	{r4, pc}
    {
        h += 10 + (*str) - 'a';
    }
    else /* invalid */
    {
        return 0;
 8010250:	2000      	movs	r0, #0
    {
        return 0;
    }

    return h;
}
 8010252:	bd10      	pop	{r4, pc}

08010254 <parse_string>:
    0xFC
};

/* Parse the input text into an unescaped cstring, and populate item. */
static const char *parse_string(cJSON *item, const char *str, const char **ep)
{
 8010254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010258:	9200      	str	r2, [sp, #0]
 801025a:	4605      	mov	r5, r0
    int len = 0;
    unsigned uc;
    unsigned uc2;

    /* not a string! */
    if (*str != '\"')
 801025c:	780a      	ldrb	r2, [r1, #0]
    0xFC
};

/* Parse the input text into an unescaped cstring, and populate item. */
static const char *parse_string(cJSON *item, const char *str, const char **ep)
{
 801025e:	460e      	mov	r6, r1
    const char *ptr = str + 1;
    const char *end_ptr =str + 1;
 8010260:	f101 0801 	add.w	r8, r1, #1
    int len = 0;
    unsigned uc;
    unsigned uc2;

    /* not a string! */
    if (*str != '\"')
 8010264:	2a22      	cmp	r2, #34	; 0x22
 8010266:	d114      	bne.n	8010292 <parse_string+0x3e>
 8010268:	4647      	mov	r7, r8
 801026a:	2000      	movs	r0, #0
 801026c:	e01c      	b.n	80102a8 <parse_string+0x54>
        }
        /* escape sequence */
        else
        {
            ptr++;
            switch (*ptr)
 801026e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010272:	286e      	cmp	r0, #110	; 0x6e
 8010274:	d04c      	beq.n	8010310 <parse_string+0xbc>
 8010276:	d939      	bls.n	80102ec <parse_string+0x98>
 8010278:	2874      	cmp	r0, #116	; 0x74
 801027a:	d04c      	beq.n	8010316 <parse_string+0xc2>
 801027c:	2875      	cmp	r0, #117	; 0x75
 801027e:	d13e      	bne.n	80102fe <parse_string+0xaa>
                case 't':
                    *ptr2++ = '\t';
                    break;
                case 'u':
                    /* transcode utf16 to utf8. See RFC2781 and RFC3629. */
                    uc = parse_hex4(ptr + 1); /* get the unicode char. */
 8010280:	f108 0002 	add.w	r0, r8, #2
 8010284:	f7ff ff90 	bl	80101a8 <parse_hex4>
                    ptr += 4;
 8010288:	f108 0205 	add.w	r2, r8, #5
                case 't':
                    *ptr2++ = '\t';
                    break;
                case 'u':
                    /* transcode utf16 to utf8. See RFC2781 and RFC3629. */
                    uc = parse_hex4(ptr + 1); /* get the unicode char. */
 801028c:	4605      	mov	r5, r0
                    ptr += 4;
                    if (ptr >= end_ptr)
 801028e:	4297      	cmp	r7, r2
 8010290:	d845      	bhi.n	801031e <parse_string+0xca>
    unsigned uc2;

    /* not a string! */
    if (*str != '\"')
    {
        *ep = str;
 8010292:	9b00      	ldr	r3, [sp, #0]
 8010294:	601e      	str	r6, [r3, #0]
        if (*end_ptr++ == '\\')
        {
            if (*end_ptr == '\0')
            {
                /* prevent buffer overflow when last input character is a backslash */
                return 0;
 8010296:	2000      	movs	r0, #0
 8010298:	e0b0      	b.n	80103fc <parse_string+0x1a8>
    {
        *ep = str;
        return 0;
    }

    while ((*end_ptr != '\"') && *end_ptr && ++len)
 801029a:	b162      	cbz	r2, 80102b6 <parse_string+0x62>
    {
        if (*end_ptr++ == '\\')
 801029c:	2a5c      	cmp	r2, #92	; 0x5c
 801029e:	d108      	bne.n	80102b2 <parse_string+0x5e>
        {
            if (*end_ptr == '\0')
 80102a0:	787a      	ldrb	r2, [r7, #1]
 80102a2:	2a00      	cmp	r2, #0
 80102a4:	d0f7      	beq.n	8010296 <parse_string+0x42>
            {
                /* prevent buffer overflow when last input character is a backslash */
                return 0;
            }
            /* Skip escaped quotes. */
            end_ptr++;
 80102a6:	3702      	adds	r7, #2
    {
        *ep = str;
        return 0;
    }

    while ((*end_ptr != '\"') && *end_ptr && ++len)
 80102a8:	783a      	ldrb	r2, [r7, #0]
 80102aa:	3001      	adds	r0, #1
 80102ac:	2a22      	cmp	r2, #34	; 0x22
 80102ae:	d1f4      	bne.n	801029a <parse_string+0x46>
 80102b0:	e001      	b.n	80102b6 <parse_string+0x62>
    {
        if (*end_ptr++ == '\\')
 80102b2:	3701      	adds	r7, #1
 80102b4:	e7f8      	b.n	80102a8 <parse_string+0x54>
            end_ptr++;
        }
    }

    /* This is at most how long we need for the string, roughly. */
    out = (char*)cJSON_malloc(len + 1);
 80102b6:	4a53      	ldr	r2, [pc, #332]	; (8010404 <parse_string+0x1b0>)
 80102b8:	6812      	ldr	r2, [r2, #0]
 80102ba:	4790      	blx	r2
    if (!out)
 80102bc:	4604      	mov	r4, r0
 80102be:	2800      	cmp	r0, #0
 80102c0:	d0e9      	beq.n	8010296 <parse_string+0x42>
    {
        return 0;
    }
    item->valuestring = out; /* assign here so out will be deleted during cJSON_Delete() later */
    item->type = cJSON_String;
 80102c2:	2210      	movs	r2, #16
                    break;
                case 'n':
                    *ptr2++ = '\n';
                    break;
                case 'r':
                    *ptr2++ = '\r';
 80102c4:	f04f 090d 	mov.w	r9, #13
        {
            ptr++;
            switch (*ptr)
            {
                case 'b':
                    *ptr2++ = '\b';
 80102c8:	f04f 0a08 	mov.w	sl, #8
                    break;
                case 'f':
                    *ptr2++ = '\f';
 80102cc:	f04f 0b0c 	mov.w	fp, #12
    out = (char*)cJSON_malloc(len + 1);
    if (!out)
    {
        return 0;
    }
    item->valuestring = out; /* assign here so out will be deleted during cJSON_Delete() later */
 80102d0:	6128      	str	r0, [r5, #16]
    item->type = cJSON_String;
 80102d2:	60ea      	str	r2, [r5, #12]

    ptr = str + 1;
    ptr2 = out;
    /* loop through the string literal */
    while (ptr < end_ptr)
 80102d4:	45b8      	cmp	r8, r7
 80102d6:	f080 8088 	bcs.w	80103ea <parse_string+0x196>
    {
        if (*ptr != '\\')
 80102da:	4642      	mov	r2, r8
 80102dc:	f812 0b01 	ldrb.w	r0, [r2], #1
 80102e0:	285c      	cmp	r0, #92	; 0x5c
 80102e2:	d0c4      	beq.n	801026e <parse_string+0x1a>
        {
            *ptr2++ = *ptr++;
 80102e4:	7020      	strb	r0, [r4, #0]
 80102e6:	4690      	mov	r8, r2
 80102e8:	3401      	adds	r4, #1
 80102ea:	e7f3      	b.n	80102d4 <parse_string+0x80>
        }
        /* escape sequence */
        else
        {
            ptr++;
            switch (*ptr)
 80102ec:	2862      	cmp	r0, #98	; 0x62
 80102ee:	f104 0301 	add.w	r3, r4, #1
 80102f2:	d009      	beq.n	8010308 <parse_string+0xb4>
 80102f4:	2866      	cmp	r0, #102	; 0x66
 80102f6:	d173      	bne.n	80103e0 <parse_string+0x18c>
            {
                case 'b':
                    *ptr2++ = '\b';
                    break;
                case 'f':
                    *ptr2++ = '\f';
 80102f8:	f884 b000 	strb.w	fp, [r4]
 80102fc:	e006      	b.n	801030c <parse_string+0xb8>
        }
        /* escape sequence */
        else
        {
            ptr++;
            switch (*ptr)
 80102fe:	2872      	cmp	r0, #114	; 0x72
 8010300:	d16e      	bne.n	80103e0 <parse_string+0x18c>
                    break;
                case 'n':
                    *ptr2++ = '\n';
                    break;
                case 'r':
                    *ptr2++ = '\r';
 8010302:	f884 9000 	strb.w	r9, [r4]
 8010306:	e06c      	b.n	80103e2 <parse_string+0x18e>
        {
            ptr++;
            switch (*ptr)
            {
                case 'b':
                    *ptr2++ = '\b';
 8010308:	f884 a000 	strb.w	sl, [r4]
                    break;
                case 'f':
                    *ptr2++ = '\f';
 801030c:	461c      	mov	r4, r3
                    break;
 801030e:	e069      	b.n	80103e4 <parse_string+0x190>
                case 'n':
                    *ptr2++ = '\n';
 8010310:	f04f 030a 	mov.w	r3, #10
 8010314:	e001      	b.n	801031a <parse_string+0xc6>
                    break;
                case 'r':
                    *ptr2++ = '\r';
                    break;
                case 't':
                    *ptr2++ = '\t';
 8010316:	f04f 0309 	mov.w	r3, #9
 801031a:	7023      	strb	r3, [r4, #0]
 801031c:	e061      	b.n	80103e2 <parse_string+0x18e>
                        /* invalid */
                        *ep = str;
                        return 0;
                    }
                    /* check for invalid. */
                    if (((uc >= 0xDC00) && (uc <= 0xDFFF)) || (uc == 0))
 801031e:	f5a0 405c 	sub.w	r0, r0, #56320	; 0xdc00
 8010322:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010326:	d3b4      	bcc.n	8010292 <parse_string+0x3e>
 8010328:	2d00      	cmp	r5, #0
 801032a:	d0b2      	beq.n	8010292 <parse_string+0x3e>
                        *ep = str;
                        return 0;
                    }

                    /* UTF16 surrogate pairs. */
                    if ((uc >= 0xD800) && (uc<=0xDBFF))
 801032c:	f5a5 4058 	sub.w	r0, r5, #55296	; 0xd800
 8010330:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8010334:	d21f      	bcs.n	8010376 <parse_string+0x122>
                    {
                        if ((ptr + 6) > end_ptr)
 8010336:	f108 020b 	add.w	r2, r8, #11
 801033a:	4297      	cmp	r7, r2
 801033c:	9201      	str	r2, [sp, #4]
 801033e:	d3a8      	bcc.n	8010292 <parse_string+0x3e>
                        {
                            /* invalid */
                            *ep = str;
                            return 0;
                        }
                        if ((ptr[1] != '\\') || (ptr[2] != 'u'))
 8010340:	f898 0006 	ldrb.w	r0, [r8, #6]
 8010344:	285c      	cmp	r0, #92	; 0x5c
 8010346:	d1a4      	bne.n	8010292 <parse_string+0x3e>
 8010348:	f898 0007 	ldrb.w	r0, [r8, #7]
 801034c:	2875      	cmp	r0, #117	; 0x75
 801034e:	d1a0      	bne.n	8010292 <parse_string+0x3e>
                        {
                            /* missing second-half of surrogate. */
                            *ep = str;
                            return 0;
                        }
                        uc2 = parse_hex4(ptr + 3);
 8010350:	f108 0008 	add.w	r0, r8, #8
 8010354:	f7ff ff28 	bl	80101a8 <parse_hex4>
                        ptr += 6; /* \uXXXX */
                        if ((uc2 < 0xDC00) || (uc2 > 0xDFFF))
 8010358:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
 801035c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010360:	d297      	bcs.n	8010292 <parse_string+0x3e>
                            /* invalid second-half of surrogate. */
                            *ep = str;
                            return 0;
                        }
                        /* calculate unicode codepoint from the surrogate pair */
                        uc = 0x10000 + (((uc & 0x3FF) << 10) | (uc2 & 0x3FF));
 8010362:	02ab      	lsls	r3, r5, #10
 8010364:	4d28      	ldr	r5, [pc, #160]	; (8010408 <parse_string+0x1b4>)
 8010366:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801036a:	9a01      	ldr	r2, [sp, #4]
 801036c:	401d      	ands	r5, r3
 801036e:	4305      	orrs	r5, r0
 8010370:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8010374:	e004      	b.n	8010380 <parse_string+0x12c>

                    /* encode as UTF8
                     * takes at maximum 4 bytes to encode:
                     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
                    len = 4;
                    if (uc < 0x80)
 8010376:	2d7f      	cmp	r5, #127	; 0x7f
 8010378:	d908      	bls.n	801038c <parse_string+0x138>
                    {
                        /* normal ascii, encoding 0xxxxxxx */
                        len = 1;
                    }
                    else if (uc < 0x800)
 801037a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 801037e:	d307      	bcc.n	8010390 <parse_string+0x13c>
                        len = 2;
                    }
                    else if (uc < 0x10000)
                    {
                        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
                        len = 3;
 8010380:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8010384:	bf2c      	ite	cs
 8010386:	2304      	movcs	r3, #4
 8010388:	2303      	movcc	r3, #3
 801038a:	e002      	b.n	8010392 <parse_string+0x13e>
                     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
                    len = 4;
                    if (uc < 0x80)
                    {
                        /* normal ascii, encoding 0xxxxxxx */
                        len = 1;
 801038c:	2301      	movs	r3, #1
 801038e:	e000      	b.n	8010392 <parse_string+0x13e>
                    }
                    else if (uc < 0x800)
                    {
                        /* two bytes, encoding 110xxxxx 10xxxxxx */
                        len = 2;
 8010390:	2302      	movs	r3, #2
                        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
                        len = 3;
                    }
                    ptr2 += len;

                    switch (len) {
 8010392:	2b03      	cmp	r3, #3
                    else if (uc < 0x10000)
                    {
                        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
                        len = 3;
                    }
                    ptr2 += len;
 8010394:	eb04 0003 	add.w	r0, r4, r3

                    switch (len) {
 8010398:	d00c      	beq.n	80103b4 <parse_string+0x160>
 801039a:	2b04      	cmp	r3, #4
 801039c:	d002      	beq.n	80103a4 <parse_string+0x150>
 801039e:	2b02      	cmp	r3, #2
 80103a0:	d116      	bne.n	80103d0 <parse_string+0x17c>
 80103a2:	e00e      	b.n	80103c2 <parse_string+0x16e>
                        case 4:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80103a4:	f005 0e3f 	and.w	lr, r5, #63	; 0x3f
                            uc >>= 6;
 80103a8:	09ad      	lsrs	r5, r5, #6
                    ptr2 += len;

                    switch (len) {
                        case 4:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80103aa:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 80103ae:	f800 ec01 	strb.w	lr, [r0, #-1]
 80103b2:	1ce0      	adds	r0, r4, #3
                            uc >>= 6;
                        case 3:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80103b4:	f005 043f 	and.w	r4, r5, #63	; 0x3f
 80103b8:	3801      	subs	r0, #1
                            uc >>= 6;
 80103ba:	09ad      	lsrs	r5, r5, #6
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
                            uc >>= 6;
                        case 3:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80103bc:	f064 047f 	orn	r4, r4, #127	; 0x7f
 80103c0:	7004      	strb	r4, [r0, #0]
                            uc >>= 6;
                        case 2:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80103c2:	f005 043f 	and.w	r4, r5, #63	; 0x3f
 80103c6:	3801      	subs	r0, #1
                            uc >>= 6;
 80103c8:	09ad      	lsrs	r5, r5, #6
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
                            uc >>= 6;
                        case 2:
                            /* 10xxxxxx */
                            *--ptr2 = ((uc | 0x80) & 0xBF);
 80103ca:	f064 047f 	orn	r4, r4, #127	; 0x7f
 80103ce:	7004      	strb	r4, [r0, #0]
                            uc >>= 6;
                        case 1:
                            /* depending on the length in bytes this determines the
                             * encoding ofthe first UTF8 byte */
                            *--ptr2 = (uc | firstByteMark[len]);
 80103d0:	490e      	ldr	r1, [pc, #56]	; (801040c <parse_string+0x1b8>)
 80103d2:	5ccc      	ldrb	r4, [r1, r3]
 80103d4:	4325      	orrs	r5, r4
                    }
                    ptr2 += len;
 80103d6:	1e5c      	subs	r4, r3, #1
                            *--ptr2 = ((uc | 0x80) & 0xBF);
                            uc >>= 6;
                        case 1:
                            /* depending on the length in bytes this determines the
                             * encoding ofthe first UTF8 byte */
                            *--ptr2 = (uc | firstByteMark[len]);
 80103d8:	f800 5c01 	strb.w	r5, [r0, #-1]
                    }
                    ptr2 += len;
 80103dc:	4404      	add	r4, r0
                    break;
 80103de:	e001      	b.n	80103e4 <parse_string+0x190>
                default:
                    *ptr2++ = *ptr;
 80103e0:	7020      	strb	r0, [r4, #0]
 80103e2:	3401      	adds	r4, #1
                    break;
            }
            ptr++;
 80103e4:	f102 0801 	add.w	r8, r2, #1
 80103e8:	e774      	b.n	80102d4 <parse_string+0x80>
        }
    }
    *ptr2 = '\0';
 80103ea:	2200      	movs	r2, #0
 80103ec:	7022      	strb	r2, [r4, #0]
    if (*ptr == '\"')
 80103ee:	f898 2000 	ldrb.w	r2, [r8]
 80103f2:	2a22      	cmp	r2, #34	; 0x22
    {
        ptr++;
 80103f4:	bf0c      	ite	eq
 80103f6:	f108 0001 	addeq.w	r0, r8, #1
 80103fa:	4640      	movne	r0, r8
    }

    return ptr;
}
 80103fc:	b003      	add	sp, #12
 80103fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010402:	bf00      	nop
 8010404:	20010088 	.word	0x20010088
 8010408:	000ffc00 	.word	0x000ffc00
 801040c:	0802d150 	.word	0x0802d150

08010410 <skip>:
static const char *parse_object(cJSON *item, const char *value, const char **ep);
static char *print_object(const cJSON *item, int depth, int fmt, printbuffer *p);

/* Utility to jump whitespace and cr/lf */
static const char *skip(const char *in)
{
 8010410:	4603      	mov	r3, r0
 8010412:	4618      	mov	r0, r3
    while (in && *in && ((unsigned char)*in<=32))
 8010414:	b123      	cbz	r3, 8010420 <skip+0x10>
 8010416:	7802      	ldrb	r2, [r0, #0]
 8010418:	3301      	adds	r3, #1
 801041a:	3a01      	subs	r2, #1
 801041c:	2a1f      	cmp	r2, #31
 801041e:	d9f8      	bls.n	8010412 <skip+0x2>
    {
        in++;
    }

    return in;
}
 8010420:	4770      	bx	lr
	...

08010424 <cJSON_New_Item>:
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
    cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 8010424:	4b06      	ldr	r3, [pc, #24]	; (8010440 <cJSON_New_Item+0x1c>)
 8010426:	2028      	movs	r0, #40	; 0x28
    cJSON_free = (hooks->free_fn) ? hooks->free_fn : free;
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(void)
{
 8010428:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)cJSON_malloc(sizeof(cJSON));
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4798      	blx	r3
    if (node)
 801042e:	4604      	mov	r4, r0
 8010430:	b118      	cbz	r0, 801043a <cJSON_New_Item+0x16>
    {
        memset(node, 0, sizeof(cJSON));
 8010432:	2228      	movs	r2, #40	; 0x28
 8010434:	2100      	movs	r1, #0
 8010436:	f001 f9f1 	bl	801181c <memset>
    }

    return node;
}
 801043a:	4620      	mov	r0, r4
 801043c:	bd10      	pop	{r4, pc}
 801043e:	bf00      	nop
 8010440:	20010088 	.word	0x20010088

08010444 <ensure>:
    int offset;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static char* ensure(printbuffer *p, int needed)
{
 8010444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    char *newbuffer;
    int newsize;
    if (!p || !p->buffer)
 8010446:	4605      	mov	r5, r0
 8010448:	2800      	cmp	r0, #0
 801044a:	d02f      	beq.n	80104ac <ensure+0x68>
 801044c:	6800      	ldr	r0, [r0, #0]
 801044e:	2800      	cmp	r0, #0
 8010450:	d02c      	beq.n	80104ac <ensure+0x68>
    {
        return 0;
    }
    needed += p->offset;
 8010452:	68ab      	ldr	r3, [r5, #8]
    if (needed <= p->length)
 8010454:	686a      	ldr	r2, [r5, #4]
    int newsize;
    if (!p || !p->buffer)
    {
        return 0;
    }
    needed += p->offset;
 8010456:	185c      	adds	r4, r3, r1
    if (needed <= p->length)
 8010458:	4294      	cmp	r4, r2
 801045a:	dc01      	bgt.n	8010460 <ensure+0x1c>
    {
        return p->buffer + p->offset;
 801045c:	4418      	add	r0, r3
 801045e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}

/* calculate the next largest power of 2 */
static int pow2gt (int x)
{
    --x;
 8010460:	3c01      	subs	r4, #1
    {
        return p->buffer + p->offset;
    }

    newsize = pow2gt(needed);
    newbuffer = (char*)cJSON_malloc(newsize);
 8010462:	4b13      	ldr	r3, [pc, #76]	; (80104b0 <ensure+0x6c>)
 8010464:	4f13      	ldr	r7, [pc, #76]	; (80104b4 <ensure+0x70>)
/* calculate the next largest power of 2 */
static int pow2gt (int x)
{
    --x;

    x |= x >> 1;
 8010466:	ea44 0464 	orr.w	r4, r4, r4, asr #1
    {
        return p->buffer + p->offset;
    }

    newsize = pow2gt(needed);
    newbuffer = (char*)cJSON_malloc(newsize);
 801046a:	681b      	ldr	r3, [r3, #0]
static int pow2gt (int x)
{
    --x;

    x |= x >> 1;
    x |= x >> 2;
 801046c:	ea44 04a4 	orr.w	r4, r4, r4, asr #2
    x |= x >> 4;
 8010470:	ea44 1424 	orr.w	r4, r4, r4, asr #4
    x |= x >> 8;
 8010474:	ea44 2424 	orr.w	r4, r4, r4, asr #8
    x |= x >> 16;

    return x + 1;
 8010478:	ea44 4424 	orr.w	r4, r4, r4, asr #16
 801047c:	3401      	adds	r4, #1
    {
        return p->buffer + p->offset;
    }

    newsize = pow2gt(needed);
    newbuffer = (char*)cJSON_malloc(newsize);
 801047e:	4620      	mov	r0, r4
 8010480:	4798      	blx	r3
    if (!newbuffer)
 8010482:	4606      	mov	r6, r0
 8010484:	b930      	cbnz	r0, 8010494 <ensure+0x50>
    {
        cJSON_free(p->buffer);
 8010486:	6828      	ldr	r0, [r5, #0]
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	4798      	blx	r3
        p->length = 0;
 801048c:	606e      	str	r6, [r5, #4]
        p->buffer = 0;
 801048e:	602e      	str	r6, [r5, #0]

        return 0;
 8010490:	4630      	mov	r0, r6
 8010492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    if (newbuffer)
    {
        memcpy(newbuffer, p->buffer, p->length);
 8010494:	e895 0006 	ldmia.w	r5, {r1, r2}
 8010498:	f001 f9b5 	bl	8011806 <memcpy>
    }
    cJSON_free(p->buffer);
 801049c:	6828      	ldr	r0, [r5, #0]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	4798      	blx	r3
    p->length = newsize;
    p->buffer = newbuffer;

    return newbuffer + p->offset;
 80104a2:	68a8      	ldr	r0, [r5, #8]
    if (newbuffer)
    {
        memcpy(newbuffer, p->buffer, p->length);
    }
    cJSON_free(p->buffer);
    p->length = newsize;
 80104a4:	606c      	str	r4, [r5, #4]
    p->buffer = newbuffer;
 80104a6:	602e      	str	r6, [r5, #0]

    return newbuffer + p->offset;
 80104a8:	4430      	add	r0, r6
 80104aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
 80104ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104ae:	bf00      	nop
 80104b0:	20010088 	.word	0x20010088
 80104b4:	20010084 	.word	0x20010084

080104b8 <cJSON_strdup>:

static void *(*cJSON_malloc)(size_t sz) = malloc;
static void (*cJSON_free)(void *ptr) = free;

static char* cJSON_strdup(const char* str)
{
 80104b8:	b570      	push	{r4, r5, r6, lr}
 80104ba:	4606      	mov	r6, r0
    size_t len;
    char* copy;

    len = strlen(str) + 1;
 80104bc:	f7ef ff08 	bl	80002d0 <strlen>
    if (!(copy = (char*)cJSON_malloc(len)))
 80104c0:	4b06      	ldr	r3, [pc, #24]	; (80104dc <cJSON_strdup+0x24>)
static char* cJSON_strdup(const char* str)
{
    size_t len;
    char* copy;

    len = strlen(str) + 1;
 80104c2:	1c44      	adds	r4, r0, #1
    if (!(copy = (char*)cJSON_malloc(len)))
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4620      	mov	r0, r4
 80104c8:	4798      	blx	r3
 80104ca:	4605      	mov	r5, r0
 80104cc:	b118      	cbz	r0, 80104d6 <cJSON_strdup+0x1e>
    {
        return 0;
    }
    memcpy(copy, str, len);
 80104ce:	4622      	mov	r2, r4
 80104d0:	4631      	mov	r1, r6
 80104d2:	f001 f998 	bl	8011806 <memcpy>

    return copy;
}
 80104d6:	4628      	mov	r0, r5
 80104d8:	bd70      	pop	{r4, r5, r6, pc}
 80104da:	bf00      	nop
 80104dc:	20010088 	.word	0x20010088

080104e0 <update>:
    return newbuffer + p->offset;
}

/* calculate the new length of the string in a printbuffer */
static int update(const printbuffer *p)
{
 80104e0:	b510      	push	{r4, lr}
    char *str;
    if (!p || !p->buffer)
 80104e2:	b140      	cbz	r0, 80104f6 <update+0x16>
 80104e4:	6803      	ldr	r3, [r0, #0]
 80104e6:	b12b      	cbz	r3, 80104f4 <update+0x14>
    {
        return 0;
    }
    str = p->buffer + p->offset;
 80104e8:	6884      	ldr	r4, [r0, #8]

    return p->offset + strlen(str);
 80104ea:	1918      	adds	r0, r3, r4
 80104ec:	f7ef fef0 	bl	80002d0 <strlen>
 80104f0:	4420      	add	r0, r4
 80104f2:	bd10      	pop	{r4, pc}
static int update(const printbuffer *p)
{
    char *str;
    if (!p || !p->buffer)
    {
        return 0;
 80104f4:	4618      	mov	r0, r3
    }
    str = p->buffer + p->offset;

    return p->offset + strlen(str);
}
 80104f6:	bd10      	pop	{r4, pc}

080104f8 <print_number>:

/* Render the number nicely from the given item into a string. */
static char *print_number(const cJSON *item, printbuffer *p)
{
 80104f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    char *str = 0;
    double d = item->valuedouble;
 80104fc:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    return p->offset + strlen(str);
}

/* Render the number nicely from the given item into a string. */
static char *print_number(const cJSON *item, printbuffer *p)
{
 8010500:	4605      	mov	r5, r0
 8010502:	460c      	mov	r4, r1
    char *str = 0;
    double d = item->valuedouble;
    /* special case for 0. */
    if (d == 0)
 8010504:	2200      	movs	r2, #0
 8010506:	2300      	movs	r3, #0
 8010508:	4630      	mov	r0, r6
 801050a:	4639      	mov	r1, r7
 801050c:	f7f0 fb58 	bl	8000bc0 <__aeabi_dcmpeq>
 8010510:	b178      	cbz	r0, 8010532 <print_number+0x3a>
    {
        if (p)
 8010512:	b124      	cbz	r4, 801051e <print_number+0x26>
        {
            str = ensure(p, 2);
 8010514:	2102      	movs	r1, #2
 8010516:	4620      	mov	r0, r4
 8010518:	f7ff ff94 	bl	8010444 <ensure>
 801051c:	e003      	b.n	8010526 <print_number+0x2e>
        }
        else
        {
            str = (char*)cJSON_malloc(2);
 801051e:	4b52      	ldr	r3, [pc, #328]	; (8010668 <print_number+0x170>)
 8010520:	2002      	movs	r0, #2
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4798      	blx	r3
 8010526:	4604      	mov	r4, r0
        }
        if (str)
 8010528:	2800      	cmp	r0, #0
 801052a:	f000 8088 	beq.w	801063e <print_number+0x146>
        {
            strcpy(str,"0");
 801052e:	494f      	ldr	r1, [pc, #316]	; (801066c <print_number+0x174>)
 8010530:	e047      	b.n	80105c2 <print_number+0xca>
        }
    }
    /* value is an int */
    else if ((fabs(((double)item->valueint) - d) <= DBL_EPSILON) && (d <= INT_MAX) && (d >= INT_MIN))
 8010532:	6968      	ldr	r0, [r5, #20]
 8010534:	f7f0 f876 	bl	8000624 <__aeabi_i2d>
 8010538:	4632      	mov	r2, r6
 801053a:	463b      	mov	r3, r7
 801053c:	f7ef ff24 	bl	8000388 <__aeabi_dsub>
 8010540:	2200      	movs	r2, #0
 8010542:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010546:	4b4a      	ldr	r3, [pc, #296]	; (8010670 <print_number+0x178>)
 8010548:	f7f0 fb4e 	bl	8000be8 <__aeabi_dcmple>
 801054c:	b300      	cbz	r0, 8010590 <print_number+0x98>
 801054e:	4630      	mov	r0, r6
 8010550:	4639      	mov	r1, r7
 8010552:	a33d      	add	r3, pc, #244	; (adr r3, 8010648 <print_number+0x150>)
 8010554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010558:	f7f0 fb46 	bl	8000be8 <__aeabi_dcmple>
 801055c:	b1c0      	cbz	r0, 8010590 <print_number+0x98>
 801055e:	2200      	movs	r2, #0
 8010560:	4b44      	ldr	r3, [pc, #272]	; (8010674 <print_number+0x17c>)
 8010562:	4630      	mov	r0, r6
 8010564:	4639      	mov	r1, r7
 8010566:	f7f0 fb49 	bl	8000bfc <__aeabi_dcmpge>
 801056a:	b188      	cbz	r0, 8010590 <print_number+0x98>
    {
        if (p)
 801056c:	b124      	cbz	r4, 8010578 <print_number+0x80>
        {
            str = ensure(p, 21);
 801056e:	2115      	movs	r1, #21
 8010570:	4620      	mov	r0, r4
 8010572:	f7ff ff67 	bl	8010444 <ensure>
 8010576:	e003      	b.n	8010580 <print_number+0x88>
        }
        else
        {
            /* 2^64+1 can be represented in 21 chars. */
            str = (char*)cJSON_malloc(21);
 8010578:	4b3b      	ldr	r3, [pc, #236]	; (8010668 <print_number+0x170>)
 801057a:	2015      	movs	r0, #21
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	4798      	blx	r3
 8010580:	4604      	mov	r4, r0
        }
        if (str)
 8010582:	2800      	cmp	r0, #0
 8010584:	d05b      	beq.n	801063e <print_number+0x146>
        {
            sprintf(str, "%d", item->valueint);
 8010586:	696a      	ldr	r2, [r5, #20]
 8010588:	493b      	ldr	r1, [pc, #236]	; (8010678 <print_number+0x180>)
 801058a:	f001 f99b 	bl	80118c4 <sprintf>
 801058e:	e056      	b.n	801063e <print_number+0x146>
        }
    }
    /* value is a floating point number */
    else
    {
        if (p)
 8010590:	b124      	cbz	r4, 801059c <print_number+0xa4>
        {
            /* This is a nice tradeoff. */
            str = ensure(p, 64);
 8010592:	2140      	movs	r1, #64	; 0x40
 8010594:	4620      	mov	r0, r4
 8010596:	f7ff ff55 	bl	8010444 <ensure>
 801059a:	e003      	b.n	80105a4 <print_number+0xac>
        }
        else
        {
            /* This is a nice tradeoff. */
            str=(char*)cJSON_malloc(64);
 801059c:	4b32      	ldr	r3, [pc, #200]	; (8010668 <print_number+0x170>)
 801059e:	2040      	movs	r0, #64	; 0x40
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	4798      	blx	r3
 80105a4:	4604      	mov	r4, r0
        }
        if (str)
 80105a6:	2800      	cmp	r0, #0
 80105a8:	d049      	beq.n	801063e <print_number+0x146>
        {
            /* This checks for NaN and Infinity */
            if ((d * 0) != 0)
 80105aa:	2200      	movs	r2, #0
 80105ac:	2300      	movs	r3, #0
 80105ae:	4630      	mov	r0, r6
 80105b0:	4639      	mov	r1, r7
 80105b2:	f7f0 f89d 	bl	80006f0 <__aeabi_dmul>
 80105b6:	2200      	movs	r2, #0
 80105b8:	2300      	movs	r3, #0
 80105ba:	f7f0 fb01 	bl	8000bc0 <__aeabi_dcmpeq>
 80105be:	b920      	cbnz	r0, 80105ca <print_number+0xd2>
            {
                sprintf(str, "null");
 80105c0:	492e      	ldr	r1, [pc, #184]	; (801067c <print_number+0x184>)
 80105c2:	4620      	mov	r0, r4
 80105c4:	f001 f9b0 	bl	8011928 <strcpy>
 80105c8:	e039      	b.n	801063e <print_number+0x146>
            }
            else if ((fabs(floor(d) - d) <= DBL_EPSILON) && (fabs(d) < 1.0e60))
 80105ca:	ec47 6b10 	vmov	d0, r6, r7
 80105ce:	f003 fe37 	bl	8014240 <floor>
 80105d2:	4632      	mov	r2, r6
 80105d4:	463b      	mov	r3, r7
 80105d6:	ec51 0b10 	vmov	r0, r1, d0
 80105da:	f7ef fed5 	bl	8000388 <__aeabi_dsub>
 80105de:	2200      	movs	r2, #0
 80105e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105e4:	4b22      	ldr	r3, [pc, #136]	; (8010670 <print_number+0x178>)
 80105e6:	f7f0 faff 	bl	8000be8 <__aeabi_dcmple>
 80105ea:	b160      	cbz	r0, 8010606 <print_number+0x10e>
 80105ec:	4630      	mov	r0, r6
 80105ee:	f027 4100 	bic.w	r1, r7, #2147483648	; 0x80000000
 80105f2:	a317      	add	r3, pc, #92	; (adr r3, 8010650 <print_number+0x158>)
 80105f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f8:	f7f0 faec 	bl	8000bd4 <__aeabi_dcmplt>
 80105fc:	b118      	cbz	r0, 8010606 <print_number+0x10e>
            {
                sprintf(str, "%.0f", d);
 80105fe:	4632      	mov	r2, r6
 8010600:	463b      	mov	r3, r7
 8010602:	491f      	ldr	r1, [pc, #124]	; (8010680 <print_number+0x188>)
 8010604:	e018      	b.n	8010638 <print_number+0x140>
            }
            else if ((fabs(d) < 1.0e-6) || (fabs(d) > 1.0e9))
 8010606:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 801060a:	4630      	mov	r0, r6
 801060c:	a312      	add	r3, pc, #72	; (adr r3, 8010658 <print_number+0x160>)
 801060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010612:	4649      	mov	r1, r9
 8010614:	f7f0 fade 	bl	8000bd4 <__aeabi_dcmplt>
 8010618:	b938      	cbnz	r0, 801062a <print_number+0x132>
 801061a:	4630      	mov	r0, r6
 801061c:	4649      	mov	r1, r9
 801061e:	a310      	add	r3, pc, #64	; (adr r3, 8010660 <print_number+0x168>)
 8010620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010624:	f7f0 faf4 	bl	8000c10 <__aeabi_dcmpgt>
 8010628:	b118      	cbz	r0, 8010632 <print_number+0x13a>
            {
                sprintf(str, "%e", d);
 801062a:	4632      	mov	r2, r6
 801062c:	463b      	mov	r3, r7
 801062e:	4915      	ldr	r1, [pc, #84]	; (8010684 <print_number+0x18c>)
 8010630:	e002      	b.n	8010638 <print_number+0x140>
            }
            else
            {
                sprintf(str, "%f", d);
 8010632:	4632      	mov	r2, r6
 8010634:	463b      	mov	r3, r7
 8010636:	4914      	ldr	r1, [pc, #80]	; (8010688 <print_number+0x190>)
 8010638:	4620      	mov	r0, r4
 801063a:	f001 f943 	bl	80118c4 <sprintf>
            }
        }
    }
    return str;
}
 801063e:	4620      	mov	r0, r4
 8010640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010644:	f3af 8000 	nop.w
 8010648:	ffc00000 	.word	0xffc00000
 801064c:	41dfffff 	.word	0x41dfffff
 8010650:	e4c2f344 	.word	0xe4c2f344
 8010654:	4c63e9e4 	.word	0x4c63e9e4
 8010658:	a0b5ed8d 	.word	0xa0b5ed8d
 801065c:	3eb0c6f7 	.word	0x3eb0c6f7
 8010660:	00000000 	.word	0x00000000
 8010664:	41cdcd65 	.word	0x41cdcd65
 8010668:	20010088 	.word	0x20010088
 801066c:	0802d157 	.word	0x0802d157
 8010670:	3cb00000 	.word	0x3cb00000
 8010674:	c1e00000 	.word	0xc1e00000
 8010678:	0802cb63 	.word	0x0802cb63
 801067c:	0802d159 	.word	0x0802d159
 8010680:	0802d15e 	.word	0x0802d15e
 8010684:	0802d163 	.word	0x0802d163
 8010688:	0802d166 	.word	0x0802d166

0801068c <print_string_ptr>:
    return ptr;
}

/* Render the cstring provided to an escaped version that can be printed. */
static char *print_string_ptr(const char *str, printbuffer *p)
{
 801068c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010690:	460d      	mov	r5, r1
    int len = 0;
    int flag = 0;
    unsigned char token;

    /* empty string */
    if (!str)
 8010692:	4607      	mov	r7, r0
 8010694:	b118      	cbz	r0, 801069e <print_string_ptr+0x12>
 8010696:	4606      	mov	r6, r0
 8010698:	4603      	mov	r3, r0
 801069a:	2200      	movs	r2, #0
 801069c:	e01c      	b.n	80106d8 <print_string_ptr+0x4c>
    {
        if (p)
 801069e:	b121      	cbz	r1, 80106aa <print_string_ptr+0x1e>
        {
            out = ensure(p, 3);
 80106a0:	2103      	movs	r1, #3
 80106a2:	4628      	mov	r0, r5
 80106a4:	f7ff fece 	bl	8010444 <ensure>
 80106a8:	e003      	b.n	80106b2 <print_string_ptr+0x26>
        }
        else
        {
            out = (char*)cJSON_malloc(3);
 80106aa:	4b4c      	ldr	r3, [pc, #304]	; (80107dc <print_string_ptr+0x150>)
 80106ac:	2003      	movs	r0, #3
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4798      	blx	r3
 80106b2:	4605      	mov	r5, r0
        }
        if (!out)
 80106b4:	2800      	cmp	r0, #0
 80106b6:	f000 808d 	beq.w	80107d4 <print_string_ptr+0x148>
        {
            return 0;
        }
        strcpy(out, "\"\"");
 80106ba:	4949      	ldr	r1, [pc, #292]	; (80107e0 <print_string_ptr+0x154>)
 80106bc:	f001 f934 	bl	8011928 <strcpy>
 80106c0:	e088      	b.n	80107d4 <print_string_ptr+0x148>
    {
        flag |= (((*ptr > 0) && (*ptr < 32)) /* unprintable characters */
                || (*ptr == '\"') /* double quote */
                || (*ptr == '\\')) /* backslash */
            ? 1
            : 0;
 80106c2:	1e63      	subs	r3, r4, #1
 80106c4:	2b1e      	cmp	r3, #30
 80106c6:	d90d      	bls.n	80106e4 <print_string_ptr+0x58>

    /* set "flag" to 1 if something needs to be escaped */
    for (ptr = str; *ptr; ptr++)
    {
        flag |= (((*ptr > 0) && (*ptr < 32)) /* unprintable characters */
                || (*ptr == '\"') /* double quote */
 80106c8:	2c22      	cmp	r4, #34	; 0x22
 80106ca:	d00b      	beq.n	80106e4 <print_string_ptr+0x58>
                || (*ptr == '\\')) /* backslash */
            ? 1
            : 0;
 80106cc:	f1a4 035c 	sub.w	r3, r4, #92	; 0x5c
 80106d0:	425c      	negs	r4, r3
 80106d2:	415c      	adcs	r4, r3
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (ptr = str; *ptr; ptr++)
    {
        flag |= (((*ptr > 0) && (*ptr < 32)) /* unprintable characters */
 80106d4:	4322      	orrs	r2, r4
 80106d6:	460b      	mov	r3, r1

        return out;
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (ptr = str; *ptr; ptr++)
 80106d8:	4619      	mov	r1, r3
 80106da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106de:	2c00      	cmp	r4, #0
 80106e0:	d1ef      	bne.n	80106c2 <print_string_ptr+0x36>
 80106e2:	e001      	b.n	80106e8 <print_string_ptr+0x5c>
    {
        flag |= (((*ptr > 0) && (*ptr < 32)) /* unprintable characters */
                || (*ptr == '\"') /* double quote */
                || (*ptr == '\\')) /* backslash */
            ? 1
            : 0;
 80106e4:	2401      	movs	r4, #1
 80106e6:	e7f5      	b.n	80106d4 <print_string_ptr+0x48>
    }
    /* no characters have to be escaped */
    if (!flag)
 80106e8:	b10a      	cbz	r2, 80106ee <print_string_ptr+0x62>
 80106ea:	3f01      	subs	r7, #1
 80106ec:	e01e      	b.n	801072c <print_string_ptr+0xa0>
    {
        len = ptr - str;
 80106ee:	1bdc      	subs	r4, r3, r7
 80106f0:	1ce1      	adds	r1, r4, #3
        if (p)
 80106f2:	b11d      	cbz	r5, 80106fc <print_string_ptr+0x70>
        {
            out = ensure(p, len + 3);
 80106f4:	4628      	mov	r0, r5
 80106f6:	f7ff fea5 	bl	8010444 <ensure>
 80106fa:	e003      	b.n	8010704 <print_string_ptr+0x78>
        }
        else
        {
            out = (char*)cJSON_malloc(len + 3);
 80106fc:	4b37      	ldr	r3, [pc, #220]	; (80107dc <print_string_ptr+0x150>)
 80106fe:	4608      	mov	r0, r1
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	4798      	blx	r3
 8010704:	4605      	mov	r5, r0
        }
        if (!out)
 8010706:	2800      	cmp	r0, #0
 8010708:	d064      	beq.n	80107d4 <print_string_ptr+0x148>
        {
            return 0;
        }

        ptr2 = out;
        *ptr2++ = '\"';
 801070a:	1c43      	adds	r3, r0, #1
 801070c:	2622      	movs	r6, #34	; 0x22
        strcpy(ptr2, str);
 801070e:	4639      	mov	r1, r7
        {
            return 0;
        }

        ptr2 = out;
        *ptr2++ = '\"';
 8010710:	7006      	strb	r6, [r0, #0]
        strcpy(ptr2, str);
 8010712:	4618      	mov	r0, r3
 8010714:	f001 f908 	bl	8011928 <strcpy>
        ptr2[len] = '\"';
        ptr2[len + 1] = '\0';
 8010718:	2300      	movs	r3, #0
        }

        ptr2 = out;
        *ptr2++ = '\"';
        strcpy(ptr2, str);
        ptr2[len] = '\"';
 801071a:	5506      	strb	r6, [r0, r4]
        ptr2[len + 1] = '\0';
 801071c:	4404      	add	r4, r0
 801071e:	e058      	b.n	80107d2 <print_string_ptr+0x146>

    ptr = str;
    /* calculate additional space that is needed for escaping */
    while ((token = *ptr) && ++len)
    {
        if (strchr("\"\\\b\f\n\r\t", token))
 8010720:	4641      	mov	r1, r8
 8010722:	4830      	ldr	r0, [pc, #192]	; (80107e4 <print_string_ptr+0x158>)
 8010724:	f001 f8f2 	bl	801190c <strchr>
 8010728:	b130      	cbz	r0, 8010738 <print_string_ptr+0xac>
        {
            len++; /* +1 for the backslash */
 801072a:	3402      	adds	r4, #2
        return out;
    }

    ptr = str;
    /* calculate additional space that is needed for escaping */
    while ((token = *ptr) && ++len)
 801072c:	f817 8f01 	ldrb.w	r8, [r7, #1]!
 8010730:	f1b8 0f00 	cmp.w	r8, #0
 8010734:	d1f4      	bne.n	8010720 <print_string_ptr+0x94>
 8010736:	e005      	b.n	8010744 <print_string_ptr+0xb8>
    {
        if (strchr("\"\\\b\f\n\r\t", token))
        {
            len++; /* +1 for the backslash */
        }
        else if (token < 32)
 8010738:	f1b8 0f1f 	cmp.w	r8, #31
        return out;
    }

    ptr = str;
    /* calculate additional space that is needed for escaping */
    while ((token = *ptr) && ++len)
 801073c:	bf8c      	ite	hi
 801073e:	3401      	addhi	r4, #1
        {
            len++; /* +1 for the backslash */
        }
        else if (token < 32)
        {
            len += 5; /* +5 for \uXXXX */
 8010740:	3406      	addls	r4, #6
 8010742:	e7f3      	b.n	801072c <print_string_ptr+0xa0>
 8010744:	1ce1      	adds	r1, r4, #3
        }
        ptr++;
    }

    if (p)
 8010746:	b11d      	cbz	r5, 8010750 <print_string_ptr+0xc4>
    {
        out = ensure(p, len + 3);
 8010748:	4628      	mov	r0, r5
 801074a:	f7ff fe7b 	bl	8010444 <ensure>
 801074e:	e003      	b.n	8010758 <print_string_ptr+0xcc>
    }
    else
    {
        out = (char*)cJSON_malloc(len + 3);
 8010750:	4b22      	ldr	r3, [pc, #136]	; (80107dc <print_string_ptr+0x150>)
 8010752:	4608      	mov	r0, r1
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	4798      	blx	r3
 8010758:	4605      	mov	r5, r0
    }
    if (!out)
 801075a:	b3d8      	cbz	r0, 80107d4 <print_string_ptr+0x148>
        return 0;
    }

    ptr2 = out;
    ptr = str;
    *ptr2++ = '\"';
 801075c:	2322      	movs	r3, #34	; 0x22
 801075e:	1c44      	adds	r4, r0, #1
            *ptr2++ = *ptr++;
        }
        else
        {
            /* character needs to be escaped */
            *ptr2++ = '\\';
 8010760:	275c      	movs	r7, #92	; 0x5c
                    break;
                case '\b':
                    *ptr2++ = 'b';
                    break;
                case '\f':
                    *ptr2++ = 'f';
 8010762:	f04f 0866 	mov.w	r8, #102	; 0x66
        return 0;
    }

    ptr2 = out;
    ptr = str;
    *ptr2++ = '\"';
 8010766:	7003      	strb	r3, [r0, #0]
    /* copy the string */
    while (*ptr)
 8010768:	f816 3b01 	ldrb.w	r3, [r6], #1
 801076c:	b37b      	cbz	r3, 80107ce <print_string_ptr+0x142>
    {
        if (((unsigned char)*ptr > 31) && (*ptr != '\"') && (*ptr != '\\'))
 801076e:	2b1f      	cmp	r3, #31
 8010770:	d906      	bls.n	8010780 <print_string_ptr+0xf4>
 8010772:	2b22      	cmp	r3, #34	; 0x22
 8010774:	d004      	beq.n	8010780 <print_string_ptr+0xf4>
 8010776:	2b5c      	cmp	r3, #92	; 0x5c
 8010778:	d002      	beq.n	8010780 <print_string_ptr+0xf4>
        {
            /* normal character, copy */
            *ptr2++ = *ptr++;
 801077a:	7023      	strb	r3, [r4, #0]
 801077c:	3401      	adds	r4, #1
 801077e:	e7f3      	b.n	8010768 <print_string_ptr+0xdc>
        }
        else
        {
            /* character needs to be escaped */
            *ptr2++ = '\\';
 8010780:	7027      	strb	r7, [r4, #0]
            switch (token = *ptr++)
 8010782:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010786:	2a0c      	cmp	r2, #12
 8010788:	d012      	beq.n	80107b0 <print_string_ptr+0x124>
 801078a:	d807      	bhi.n	801079c <print_string_ptr+0x110>
 801078c:	2a09      	cmp	r2, #9
 801078e:	d014      	beq.n	80107ba <print_string_ptr+0x12e>
 8010790:	2a0a      	cmp	r2, #10
 8010792:	d010      	beq.n	80107b6 <print_string_ptr+0x12a>
 8010794:	2a08      	cmp	r2, #8
 8010796:	d114      	bne.n	80107c2 <print_string_ptr+0x136>
                    break;
                case '\"':
                    *ptr2++ = '\"';
                    break;
                case '\b':
                    *ptr2++ = 'b';
 8010798:	2362      	movs	r3, #98	; 0x62
 801079a:	e00f      	b.n	80107bc <print_string_ptr+0x130>
        }
        else
        {
            /* character needs to be escaped */
            *ptr2++ = '\\';
            switch (token = *ptr++)
 801079c:	2a22      	cmp	r2, #34	; 0x22
 801079e:	d005      	beq.n	80107ac <print_string_ptr+0x120>
 80107a0:	2a5c      	cmp	r2, #92	; 0x5c
 80107a2:	d003      	beq.n	80107ac <print_string_ptr+0x120>
 80107a4:	2a0d      	cmp	r2, #13
 80107a6:	d10c      	bne.n	80107c2 <print_string_ptr+0x136>
                    break;
                case '\n':
                    *ptr2++ = 'n';
                    break;
                case '\r':
                    *ptr2++ = 'r';
 80107a8:	2372      	movs	r3, #114	; 0x72
 80107aa:	e007      	b.n	80107bc <print_string_ptr+0x130>
            {
                case '\\':
                    *ptr2++ = '\\';
                    break;
                case '\"':
                    *ptr2++ = '\"';
 80107ac:	7062      	strb	r2, [r4, #1]
 80107ae:	e006      	b.n	80107be <print_string_ptr+0x132>
                    break;
                case '\b':
                    *ptr2++ = 'b';
                    break;
                case '\f':
                    *ptr2++ = 'f';
 80107b0:	f884 8001 	strb.w	r8, [r4, #1]
 80107b4:	e003      	b.n	80107be <print_string_ptr+0x132>
                    break;
                case '\n':
                    *ptr2++ = 'n';
 80107b6:	236e      	movs	r3, #110	; 0x6e
 80107b8:	e000      	b.n	80107bc <print_string_ptr+0x130>
                    break;
                case '\r':
                    *ptr2++ = 'r';
                    break;
                case '\t':
                    *ptr2++ = 't';
 80107ba:	2374      	movs	r3, #116	; 0x74
 80107bc:	7063      	strb	r3, [r4, #1]
 80107be:	3402      	adds	r4, #2
                    break;
 80107c0:	e7d2      	b.n	8010768 <print_string_ptr+0xdc>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf(ptr2, "u%04x", token);
 80107c2:	1c60      	adds	r0, r4, #1
 80107c4:	4908      	ldr	r1, [pc, #32]	; (80107e8 <print_string_ptr+0x15c>)
 80107c6:	f001 f87d 	bl	80118c4 <sprintf>
                    ptr2 += 5;
 80107ca:	3406      	adds	r4, #6
                    break;
 80107cc:	e7cc      	b.n	8010768 <print_string_ptr+0xdc>
            }
        }
    }
    *ptr2++ = '\"';
 80107ce:	2222      	movs	r2, #34	; 0x22
 80107d0:	7022      	strb	r2, [r4, #0]
    *ptr2++ = '\0';
 80107d2:	7063      	strb	r3, [r4, #1]
    {
        out = (char*)cJSON_malloc(len + 3);
    }
    if (!out)
    {
        return 0;
 80107d4:	4628      	mov	r0, r5
    }
    *ptr2++ = '\"';
    *ptr2++ = '\0';

    return out;
}
 80107d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107da:	bf00      	nop
 80107dc:	20010088 	.word	0x20010088
 80107e0:	0802d169 	.word	0x0802d169
 80107e4:	0802d16c 	.word	0x0802d16c
 80107e8:	0802d174 	.word	0x0802d174
 80107ec:	00000000 	.word	0x00000000

080107f0 <parse_value>:
}


/* Parser core - when encountering text, process appropriately. */
static const char *parse_value(cJSON *item, const char *value, const char **ep)
{
 80107f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f4:	4605      	mov	r5, r0
 80107f6:	4616      	mov	r6, r2
    if (!value)
 80107f8:	460c      	mov	r4, r1
 80107fa:	2900      	cmp	r1, #0
 80107fc:	f000 8193 	beq.w	8010b26 <parse_value+0x336>
        /* Fail on null. */
        return 0;
    }

    /* parse the different types of values */
    if (!strncmp(value, "null", 4))
 8010800:	2204      	movs	r2, #4
 8010802:	49c3      	ldr	r1, [pc, #780]	; (8010b10 <parse_value+0x320>)
 8010804:	4620      	mov	r0, r4
 8010806:	f001 f897 	bl	8011938 <strncmp>
 801080a:	b918      	cbnz	r0, 8010814 <parse_value+0x24>
    {
        item->type = cJSON_NULL;
 801080c:	2304      	movs	r3, #4
 801080e:	60eb      	str	r3, [r5, #12]
        return value + 4;
 8010810:	18e0      	adds	r0, r4, r3
 8010812:	e189      	b.n	8010b28 <parse_value+0x338>
    }
    if (!strncmp(value, "false", 5))
 8010814:	2205      	movs	r2, #5
 8010816:	49bf      	ldr	r1, [pc, #764]	; (8010b14 <parse_value+0x324>)
 8010818:	4620      	mov	r0, r4
 801081a:	f001 f88d 	bl	8011938 <strncmp>
 801081e:	b918      	cbnz	r0, 8010828 <parse_value+0x38>
    {
        item->type = cJSON_False;
 8010820:	2301      	movs	r3, #1
        return value + 5;
 8010822:	1d60      	adds	r0, r4, #5
        item->type = cJSON_NULL;
        return value + 4;
    }
    if (!strncmp(value, "false", 5))
    {
        item->type = cJSON_False;
 8010824:	60eb      	str	r3, [r5, #12]
        return value + 5;
 8010826:	e17f      	b.n	8010b28 <parse_value+0x338>
    }
    if (!strncmp(value, "true", 4))
 8010828:	2204      	movs	r2, #4
 801082a:	49bb      	ldr	r1, [pc, #748]	; (8010b18 <parse_value+0x328>)
 801082c:	4620      	mov	r0, r4
 801082e:	f001 f883 	bl	8011938 <strncmp>
 8010832:	b928      	cbnz	r0, 8010840 <parse_value+0x50>
    {
        item->type = cJSON_True;
 8010834:	2302      	movs	r3, #2
        item->valueint = 1;
        return value + 4;
 8010836:	1d20      	adds	r0, r4, #4
        item->type = cJSON_False;
        return value + 5;
    }
    if (!strncmp(value, "true", 4))
    {
        item->type = cJSON_True;
 8010838:	60eb      	str	r3, [r5, #12]
        item->valueint = 1;
 801083a:	2301      	movs	r3, #1
 801083c:	616b      	str	r3, [r5, #20]
        return value + 4;
 801083e:	e173      	b.n	8010b28 <parse_value+0x338>
    }
    if (*value == '\"')
 8010840:	7823      	ldrb	r3, [r4, #0]
 8010842:	2b22      	cmp	r3, #34	; 0x22
 8010844:	d107      	bne.n	8010856 <parse_value+0x66>
    {
        return parse_string(item, value, ep);
 8010846:	4632      	mov	r2, r6
 8010848:	4621      	mov	r1, r4
 801084a:	4628      	mov	r0, r5
    {
        return parse_object(item, value, ep);
    }

    *ep=value;return 0;	/* failure. */
}
 801084c:	b003      	add	sp, #12
 801084e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        item->valueint = 1;
        return value + 4;
    }
    if (*value == '\"')
    {
        return parse_string(item, value, ep);
 8010852:	f7ff bcff 	b.w	8010254 <parse_string>
    }
    if ((*value == '-') || ((*value >= '0') && (*value <= '9')))
 8010856:	2b2d      	cmp	r3, #45	; 0x2d
 8010858:	d007      	beq.n	801086a <parse_value+0x7a>
 801085a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801085e:	2a09      	cmp	r2, #9
 8010860:	f200 80a1 	bhi.w	80109a6 <parse_value+0x1b6>

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
 8010864:	ed9f 7ba4 	vldr	d7, [pc, #656]	; 8010af8 <parse_value+0x308>
 8010868:	e002      	b.n	8010870 <parse_value+0x80>
    int signsubscale = 1;

    /* Has sign? */
    if (*num == '-')
    {
        sign = -1;
 801086a:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 8010b00 <parse_value+0x310>
        num++;
 801086e:	3401      	adds	r4, #1
    }
    /* is zero */
    if (*num == '0')
 8010870:	7823      	ldrb	r3, [r4, #0]
    {
        num++;
    }
    /* Number? */
    if ((*num >= '1') && (*num <= '9'))
 8010872:	2600      	movs	r6, #0
 8010874:	2700      	movs	r7, #0
    {
        sign = -1;
        num++;
    }
    /* is zero */
    if (*num == '0')
 8010876:	2b30      	cmp	r3, #48	; 0x30
    {
        num++;
 8010878:	bf08      	it	eq
 801087a:	3401      	addeq	r4, #1
    }
    /* Number? */
    if ((*num >= '1') && (*num <= '9'))
 801087c:	7823      	ldrb	r3, [r4, #0]
 801087e:	3b31      	subs	r3, #49	; 0x31
 8010880:	2b08      	cmp	r3, #8

/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
 8010882:	ed8d 7b00 	vstr	d7, [sp]
    if (*num == '0')
    {
        num++;
    }
    /* Number? */
    if ((*num >= '1') && (*num <= '9'))
 8010886:	d816      	bhi.n	80108b6 <parse_value+0xc6>
    {
        do
        {
            n = (n * 10.0) + (*num++ - '0');
 8010888:	2200      	movs	r2, #0
 801088a:	4ba4      	ldr	r3, [pc, #656]	; (8010b1c <parse_value+0x32c>)
 801088c:	4630      	mov	r0, r6
 801088e:	4639      	mov	r1, r7
 8010890:	f7ef ff2e 	bl	80006f0 <__aeabi_dmul>
 8010894:	4606      	mov	r6, r0
 8010896:	f814 0b01 	ldrb.w	r0, [r4], #1
 801089a:	460f      	mov	r7, r1
 801089c:	3830      	subs	r0, #48	; 0x30
 801089e:	f7ef fec1 	bl	8000624 <__aeabi_i2d>
 80108a2:	463b      	mov	r3, r7
 80108a4:	4632      	mov	r2, r6
 80108a6:	f7ef fd71 	bl	800038c <__adddf3>
        }
        while ((*num >= '0') && (*num<='9'));
 80108aa:	7823      	ldrb	r3, [r4, #0]
    /* Number? */
    if ((*num >= '1') && (*num <= '9'))
    {
        do
        {
            n = (n * 10.0) + (*num++ - '0');
 80108ac:	4606      	mov	r6, r0
 80108ae:	460f      	mov	r7, r1
        }
        while ((*num >= '0') && (*num<='9'));
 80108b0:	3b30      	subs	r3, #48	; 0x30
 80108b2:	2b09      	cmp	r3, #9
 80108b4:	e7e7      	b.n	8010886 <parse_value+0x96>
    }
    /* Fractional part? */
    if ((*num == '.') && (num[1] >= '0') && (num[1] <= '9'))
 80108b6:	7823      	ldrb	r3, [r4, #0]
 80108b8:	2b2e      	cmp	r3, #46	; 0x2e
 80108ba:	d128      	bne.n	801090e <parse_value+0x11e>
 80108bc:	7863      	ldrb	r3, [r4, #1]
 80108be:	3b30      	subs	r3, #48	; 0x30
 80108c0:	2b09      	cmp	r3, #9
 80108c2:	d824      	bhi.n	801090e <parse_value+0x11e>
    {
        num++;
 80108c4:	3401      	adds	r4, #1
/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
    double scale = 0;
 80108c6:	f04f 0800 	mov.w	r8, #0
 80108ca:	f04f 0900 	mov.w	r9, #0
    if ((*num == '.') && (num[1] >= '0') && (num[1] <= '9'))
    {
        num++;
        do
        {
            n = (n  *10.0) + (*num++ - '0');
 80108ce:	2200      	movs	r2, #0
 80108d0:	4b92      	ldr	r3, [pc, #584]	; (8010b1c <parse_value+0x32c>)
 80108d2:	4630      	mov	r0, r6
 80108d4:	4639      	mov	r1, r7
 80108d6:	f7ef ff0b 	bl	80006f0 <__aeabi_dmul>
 80108da:	4606      	mov	r6, r0
 80108dc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80108e0:	460f      	mov	r7, r1
 80108e2:	3830      	subs	r0, #48	; 0x30
 80108e4:	f7ef fe9e 	bl	8000624 <__aeabi_i2d>
 80108e8:	4632      	mov	r2, r6
 80108ea:	463b      	mov	r3, r7
 80108ec:	f7ef fd4e 	bl	800038c <__adddf3>
            scale--;
 80108f0:	4b8b      	ldr	r3, [pc, #556]	; (8010b20 <parse_value+0x330>)
    if ((*num == '.') && (num[1] >= '0') && (num[1] <= '9'))
    {
        num++;
        do
        {
            n = (n  *10.0) + (*num++ - '0');
 80108f2:	4606      	mov	r6, r0
 80108f4:	460f      	mov	r7, r1
            scale--;
 80108f6:	4640      	mov	r0, r8
 80108f8:	4649      	mov	r1, r9
 80108fa:	2200      	movs	r2, #0
 80108fc:	f7ef fd44 	bl	8000388 <__aeabi_dsub>
        } while ((*num >= '0') && (*num <= '9'));
 8010900:	7823      	ldrb	r3, [r4, #0]
    {
        num++;
        do
        {
            n = (n  *10.0) + (*num++ - '0');
            scale--;
 8010902:	4680      	mov	r8, r0
 8010904:	4689      	mov	r9, r1
        } while ((*num >= '0') && (*num <= '9'));
 8010906:	3b30      	subs	r3, #48	; 0x30
 8010908:	2b09      	cmp	r3, #9
 801090a:	d9e0      	bls.n	80108ce <parse_value+0xde>
 801090c:	e003      	b.n	8010916 <parse_value+0x126>
/* Parse the input text to generate a number, and populate the result into item. */
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
    double scale = 0;
 801090e:	f04f 0800 	mov.w	r8, #0
 8010912:	f04f 0900 	mov.w	r9, #0
            n = (n  *10.0) + (*num++ - '0');
            scale--;
        } while ((*num >= '0') && (*num <= '9'));
    }
    /* Exponent? */
    if ((*num == 'e') || (*num == 'E'))
 8010916:	7823      	ldrb	r3, [r4, #0]
 8010918:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801091c:	2b45      	cmp	r3, #69	; 0x45
 801091e:	d11a      	bne.n	8010956 <parse_value+0x166>
    {
        num++;
        /* With sign? */
        if (*num == '+')
 8010920:	7863      	ldrb	r3, [r4, #1]
 8010922:	2b2b      	cmp	r3, #43	; 0x2b
 8010924:	d101      	bne.n	801092a <parse_value+0x13a>
        {
            num++;
 8010926:	1ca0      	adds	r0, r4, #2
 8010928:	e002      	b.n	8010930 <parse_value+0x140>
        }
        else if (*num == '-')
 801092a:	2b2d      	cmp	r3, #45	; 0x2d
 801092c:	d003      	beq.n	8010936 <parse_value+0x146>
        } while ((*num >= '0') && (*num <= '9'));
    }
    /* Exponent? */
    if ((*num == 'e') || (*num == 'E'))
    {
        num++;
 801092e:	1c60      	adds	r0, r4, #1
{
    double n = 0;
    double sign = 1;
    double scale = 0;
    int subscale = 0;
    int signsubscale = 1;
 8010930:	f04f 0b01 	mov.w	fp, #1
 8010934:	e002      	b.n	801093c <parse_value+0x14c>
            num++;
        }
        else if (*num == '-')
        {
            signsubscale = -1;
            num++;
 8010936:	1ca0      	adds	r0, r4, #2
        {
            num++;
        }
        else if (*num == '-')
        {
            signsubscale = -1;
 8010938:	f04f 3bff 	mov.w	fp, #4294967295
 801093c:	f04f 0a00 	mov.w	sl, #0
            num++;
        }
        /* Number? */
        while ((*num>='0') && (*num<='9'))
        {
            subscale = (subscale * 10) + (*num++ - '0');
 8010940:	210a      	movs	r1, #10
 8010942:	4604      	mov	r4, r0
        {
            signsubscale = -1;
            num++;
        }
        /* Number? */
        while ((*num>='0') && (*num<='9'))
 8010944:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010948:	3b30      	subs	r3, #48	; 0x30
 801094a:	b2da      	uxtb	r2, r3
 801094c:	2a09      	cmp	r2, #9
 801094e:	d806      	bhi.n	801095e <parse_value+0x16e>
        {
            subscale = (subscale * 10) + (*num++ - '0');
 8010950:	fb01 3a0a 	mla	sl, r1, sl, r3
 8010954:	e7f5      	b.n	8010942 <parse_value+0x152>
{
    double n = 0;
    double sign = 1;
    double scale = 0;
    int subscale = 0;
    int signsubscale = 1;
 8010956:	f04f 0b01 	mov.w	fp, #1
static const char *parse_number(cJSON *item, const char *num)
{
    double n = 0;
    double sign = 1;
    double scale = 0;
    int subscale = 0;
 801095a:	f04f 0a00 	mov.w	sl, #0
            subscale = (subscale * 10) + (*num++ - '0');
        }
    }

    /* number = +/- number.fraction * 10^+/- exponent */
    n = sign * n * pow(10.0, (scale + subscale * signsubscale));
 801095e:	4630      	mov	r0, r6
 8010960:	4639      	mov	r1, r7
 8010962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010966:	f7ef fec3 	bl	80006f0 <__aeabi_dmul>
 801096a:	4606      	mov	r6, r0
 801096c:	fb0b f00a 	mul.w	r0, fp, sl
 8010970:	460f      	mov	r7, r1
 8010972:	f7ef fe57 	bl	8000624 <__aeabi_i2d>
 8010976:	4642      	mov	r2, r8
 8010978:	464b      	mov	r3, r9
 801097a:	f7ef fd07 	bl	800038c <__adddf3>
 801097e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8010b08 <parse_value+0x318>
 8010982:	ec41 0b11 	vmov	d1, r0, r1
 8010986:	f003 fcdf 	bl	8014348 <pow>
 801098a:	4630      	mov	r0, r6
 801098c:	4639      	mov	r1, r7
 801098e:	ec53 2b10 	vmov	r2, r3, d0
 8010992:	f7ef fead 	bl	80006f0 <__aeabi_dmul>

    item->valuedouble = n;
 8010996:	e9c5 0106 	strd	r0, r1, [r5, #24]
    item->valueint = (int)n;
 801099a:	f7f0 f959 	bl	8000c50 <__aeabi_d2iz>
    item->type = cJSON_Number;
 801099e:	2308      	movs	r3, #8

    /* number = +/- number.fraction * 10^+/- exponent */
    n = sign * n * pow(10.0, (scale + subscale * signsubscale));

    item->valuedouble = n;
    item->valueint = (int)n;
 80109a0:	6168      	str	r0, [r5, #20]
    item->type = cJSON_Number;
 80109a2:	60eb      	str	r3, [r5, #12]
 80109a4:	e064      	b.n	8010a70 <parse_value+0x280>
    }
    if ((*value == '-') || ((*value >= '0') && (*value <= '9')))
    {
        return parse_number(item, value);
    }
    if (*value == '[')
 80109a6:	2b5b      	cmp	r3, #91	; 0x5b
 80109a8:	d13b      	bne.n	8010a22 <parse_value+0x232>
        /* not an array! */
        *ep = value;
        return 0;
    }

    item->type = cJSON_Array;
 80109aa:	2320      	movs	r3, #32
    value = skip(value + 1);
 80109ac:	1c60      	adds	r0, r4, #1
        /* not an array! */
        *ep = value;
        return 0;
    }

    item->type = cJSON_Array;
 80109ae:	60eb      	str	r3, [r5, #12]
    value = skip(value + 1);
 80109b0:	f7ff fd2e 	bl	8010410 <skip>
    if (*value == ']')
 80109b4:	7803      	ldrb	r3, [r0, #0]
        *ep = value;
        return 0;
    }

    item->type = cJSON_Array;
    value = skip(value + 1);
 80109b6:	4604      	mov	r4, r0
    if (*value == ']')
 80109b8:	2b5d      	cmp	r3, #93	; 0x5d
 80109ba:	d03d      	beq.n	8010a38 <parse_value+0x248>
    {
        /* empty array. */
        return value + 1;
    }

    item->child = child = cJSON_New_Item();
 80109bc:	f7ff fd32 	bl	8010424 <cJSON_New_Item>
 80109c0:	4607      	mov	r7, r0
 80109c2:	60a8      	str	r0, [r5, #8]
    if (!item->child)
 80109c4:	2800      	cmp	r0, #0
 80109c6:	f000 80ae 	beq.w	8010b26 <parse_value+0x336>
    {
        /* memory fail */
        return 0;
    }
    /* skip any spacing, get the value. */
    value = skip(parse_value(child, skip(value), ep));
 80109ca:	4620      	mov	r0, r4
 80109cc:	f7ff fd20 	bl	8010410 <skip>
 80109d0:	4632      	mov	r2, r6
 80109d2:	4601      	mov	r1, r0
 80109d4:	4638      	mov	r0, r7
 80109d6:	f7ff ff0b 	bl	80107f0 <parse_value>
 80109da:	f7ff fd19 	bl	8010410 <skip>
    if (!value)
 80109de:	4604      	mov	r4, r0
 80109e0:	2800      	cmp	r0, #0
 80109e2:	f000 80a0 	beq.w	8010b26 <parse_value+0x336>
    {
        return 0;
    }

    /* loop through the comma separated array elements */
    while (*value == ',')
 80109e6:	7823      	ldrb	r3, [r4, #0]
 80109e8:	2b2c      	cmp	r3, #44	; 0x2c
 80109ea:	d117      	bne.n	8010a1c <parse_value+0x22c>
    {
        cJSON *new_item;
        if (!(new_item = cJSON_New_Item()))
 80109ec:	f7ff fd1a 	bl	8010424 <cJSON_New_Item>
 80109f0:	4605      	mov	r5, r0
 80109f2:	2800      	cmp	r0, #0
 80109f4:	f000 8097 	beq.w	8010b26 <parse_value+0x336>
        {
            /* memory fail */
            return 0;
        }
        /* add new item to end of the linked list */
        child->next = new_item;
 80109f8:	6038      	str	r0, [r7, #0]
        new_item->prev = child;
 80109fa:	6047      	str	r7, [r0, #4]
        child = new_item;

        /* go to the next comma */
        value = skip(parse_value(child, skip(value + 1), ep));
 80109fc:	1c60      	adds	r0, r4, #1
 80109fe:	f7ff fd07 	bl	8010410 <skip>
 8010a02:	4632      	mov	r2, r6
 8010a04:	4601      	mov	r1, r0
 8010a06:	4628      	mov	r0, r5
 8010a08:	f7ff fef2 	bl	80107f0 <parse_value>
 8010a0c:	f7ff fd00 	bl	8010410 <skip>
        if (!value)
 8010a10:	4604      	mov	r4, r0
 8010a12:	2800      	cmp	r0, #0
 8010a14:	f000 8087 	beq.w	8010b26 <parse_value+0x336>
 8010a18:	462f      	mov	r7, r5
 8010a1a:	e7e4      	b.n	80109e6 <parse_value+0x1f6>
            /* memory fail */
            return 0;
        }
    }

    if (*value == ']')
 8010a1c:	2b5d      	cmp	r3, #93	; 0x5d
 8010a1e:	d00b      	beq.n	8010a38 <parse_value+0x248>
 8010a20:	e080      	b.n	8010b24 <parse_value+0x334>
    }
    if (*value == '[')
    {
        return parse_array(item, value, ep);
    }
    if (*value == '{')
 8010a22:	2b7b      	cmp	r3, #123	; 0x7b
 8010a24:	d17e      	bne.n	8010b24 <parse_value+0x334>
        /* not an object! */
        *ep = value;
        return 0;
    }

    item->type = cJSON_Object;
 8010a26:	2340      	movs	r3, #64	; 0x40
    value = skip(value + 1);
 8010a28:	1c60      	adds	r0, r4, #1
        /* not an object! */
        *ep = value;
        return 0;
    }

    item->type = cJSON_Object;
 8010a2a:	60eb      	str	r3, [r5, #12]
    value = skip(value + 1);
 8010a2c:	f7ff fcf0 	bl	8010410 <skip>
    if (*value == '}')
 8010a30:	7803      	ldrb	r3, [r0, #0]
        *ep = value;
        return 0;
    }

    item->type = cJSON_Object;
    value = skip(value + 1);
 8010a32:	4604      	mov	r4, r0
    if (*value == '}')
 8010a34:	2b7d      	cmp	r3, #125	; 0x7d
 8010a36:	d101      	bne.n	8010a3c <parse_value+0x24c>
    {
        /* empty object. */
        return value + 1;
 8010a38:	1c60      	adds	r0, r4, #1
 8010a3a:	e075      	b.n	8010b28 <parse_value+0x338>
    }

    child = cJSON_New_Item();
 8010a3c:	f7ff fcf2 	bl	8010424 <cJSON_New_Item>
 8010a40:	4607      	mov	r7, r0
    item->child = child;
 8010a42:	60a8      	str	r0, [r5, #8]
    if (!item->child)
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d06e      	beq.n	8010b26 <parse_value+0x336>
    {
        return 0;
    }
    /* parse first key */
    value = skip(parse_string(child, skip(value), ep));
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f7ff fce1 	bl	8010410 <skip>
 8010a4e:	4632      	mov	r2, r6
 8010a50:	4601      	mov	r1, r0
 8010a52:	4638      	mov	r0, r7
 8010a54:	f7ff fbfe 	bl	8010254 <parse_string>
 8010a58:	f7ff fcda 	bl	8010410 <skip>
    if (!value)
 8010a5c:	2800      	cmp	r0, #0
 8010a5e:	d062      	beq.n	8010b26 <parse_value+0x336>
    {
        return 0;
    }
    /* use string as key, not value */
    child->string = child->valuestring;
 8010a60:	693b      	ldr	r3, [r7, #16]
    child->valuestring = 0;
 8010a62:	2400      	movs	r4, #0
    if (!value)
    {
        return 0;
    }
    /* use string as key, not value */
    child->string = child->valuestring;
 8010a64:	623b      	str	r3, [r7, #32]
    child->valuestring = 0;
 8010a66:	613c      	str	r4, [r7, #16]

    if (*value != ':')
 8010a68:	7803      	ldrb	r3, [r0, #0]
 8010a6a:	2b3a      	cmp	r3, #58	; 0x3a
 8010a6c:	d002      	beq.n	8010a74 <parse_value+0x284>
    {
        /* invalid object. */
        *ep = value;
 8010a6e:	6030      	str	r0, [r6, #0]
        return 0;
 8010a70:	4620      	mov	r0, r4
 8010a72:	e059      	b.n	8010b28 <parse_value+0x338>
    }
    /* skip any spacing, get the value. */
    value = skip(parse_value(child, skip(value + 1), ep));
 8010a74:	3001      	adds	r0, #1
 8010a76:	f7ff fccb 	bl	8010410 <skip>
 8010a7a:	4632      	mov	r2, r6
 8010a7c:	4601      	mov	r1, r0
 8010a7e:	4638      	mov	r0, r7
 8010a80:	f7ff feb6 	bl	80107f0 <parse_value>
 8010a84:	f7ff fcc4 	bl	8010410 <skip>
    if (!value)
 8010a88:	4680      	mov	r8, r0
 8010a8a:	2800      	cmp	r0, #0
 8010a8c:	d04b      	beq.n	8010b26 <parse_value+0x336>
    {
        return 0;
    }

    while (*value == ',')
 8010a8e:	f898 3000 	ldrb.w	r3, [r8]
 8010a92:	2b2c      	cmp	r3, #44	; 0x2c
 8010a94:	d128      	bne.n	8010ae8 <parse_value+0x2f8>
    {
        cJSON *new_item;
        if (!(new_item = cJSON_New_Item()))
 8010a96:	f7ff fcc5 	bl	8010424 <cJSON_New_Item>
 8010a9a:	4605      	mov	r5, r0
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	d042      	beq.n	8010b26 <parse_value+0x336>
        {
            /* memory fail */
            return 0;
        }
        /* add to linked list */
        child->next = new_item;
 8010aa0:	6038      	str	r0, [r7, #0]
        new_item->prev = child;
 8010aa2:	6047      	str	r7, [r0, #4]

        child = new_item;
        value = skip(parse_string(child, skip(value + 1), ep));
 8010aa4:	f108 0001 	add.w	r0, r8, #1
 8010aa8:	f7ff fcb2 	bl	8010410 <skip>
 8010aac:	4632      	mov	r2, r6
 8010aae:	4601      	mov	r1, r0
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	f7ff fbcf 	bl	8010254 <parse_string>
 8010ab6:	f7ff fcab 	bl	8010410 <skip>
        if (!value)
 8010aba:	b3a0      	cbz	r0, 8010b26 <parse_value+0x336>
        {
            return 0;
        }

        /* use string as key, not value */
        child->string = child->valuestring;
 8010abc:	692b      	ldr	r3, [r5, #16]
        child->valuestring = 0;
 8010abe:	612c      	str	r4, [r5, #16]
        {
            return 0;
        }

        /* use string as key, not value */
        child->string = child->valuestring;
 8010ac0:	622b      	str	r3, [r5, #32]
        child->valuestring = 0;

        if (*value != ':')
 8010ac2:	7803      	ldrb	r3, [r0, #0]
 8010ac4:	2b3a      	cmp	r3, #58	; 0x3a
 8010ac6:	d001      	beq.n	8010acc <parse_value+0x2dc>
        {
            /* invalid object. */
            *ep = value;
 8010ac8:	6030      	str	r0, [r6, #0]
 8010aca:	e02c      	b.n	8010b26 <parse_value+0x336>
            return 0;
        }
        /* skip any spacing, get the value. */
        value = skip(parse_value(child, skip(value + 1), ep));
 8010acc:	3001      	adds	r0, #1
 8010ace:	f7ff fc9f 	bl	8010410 <skip>
 8010ad2:	4632      	mov	r2, r6
 8010ad4:	4601      	mov	r1, r0
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	f7ff fe8a 	bl	80107f0 <parse_value>
 8010adc:	f7ff fc98 	bl	8010410 <skip>
        if (!value)
 8010ae0:	4680      	mov	r8, r0
 8010ae2:	b300      	cbz	r0, 8010b26 <parse_value+0x336>
 8010ae4:	462f      	mov	r7, r5
 8010ae6:	e7d2      	b.n	8010a8e <parse_value+0x29e>
        {
            return 0;
        }
    }
    /* end of object */
    if (*value == '}')
 8010ae8:	2b7d      	cmp	r3, #125	; 0x7d
 8010aea:	d102      	bne.n	8010af2 <parse_value+0x302>
    {
        return value + 1;
 8010aec:	f108 0001 	add.w	r0, r8, #1
 8010af0:	e01a      	b.n	8010b28 <parse_value+0x338>
    }

    /* malformed */
    *ep = value;
 8010af2:	f8c6 8000 	str.w	r8, [r6]
 8010af6:	e016      	b.n	8010b26 <parse_value+0x336>
 8010af8:	00000000 	.word	0x00000000
 8010afc:	3ff00000 	.word	0x3ff00000
 8010b00:	00000000 	.word	0x00000000
 8010b04:	bff00000 	.word	0xbff00000
 8010b08:	00000000 	.word	0x00000000
 8010b0c:	40240000 	.word	0x40240000
 8010b10:	0802d159 	.word	0x0802d159
 8010b14:	0802d17a 	.word	0x0802d17a
 8010b18:	0802d180 	.word	0x0802d180
 8010b1c:	40240000 	.word	0x40240000
 8010b20:	3ff00000 	.word	0x3ff00000
    if (*value == '{')
    {
        return parse_object(item, value, ep);
    }

    *ep=value;return 0;	/* failure. */
 8010b24:	6034      	str	r4, [r6, #0]
 8010b26:	2000      	movs	r0, #0
}
 8010b28:	b003      	add	sp, #12
 8010b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2e:	bf00      	nop

08010b30 <print_array.isra.3>:

    return 0;
}

/* Render an array to text */
static char *print_array(const cJSON *item, int depth, int fmt, printbuffer *p)
 8010b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b34:	4680      	mov	r8, r0
 8010b36:	b085      	sub	sp, #20
 8010b38:	468a      	mov	sl, r1
 8010b3a:	4616      	mov	r6, r2
 8010b3c:	461c      	mov	r4, r3
    char **entries;
    char *out = 0;
    char *ptr;
    char *ret;
    int len = 5;
    cJSON *child = item->child;
 8010b3e:	6807      	ldr	r7, [r0, #0]
    int numentries = 0;
 8010b40:	2500      	movs	r5, #0
    int i = 0;
    int fail = 0;
    size_t tmplen = 0;

    /* How many entries in the array? */
    while (child)
 8010b42:	b117      	cbz	r7, 8010b4a <print_array.isra.3+0x1a>
    {
        numentries++;
 8010b44:	3501      	adds	r5, #1
        child = child->next;
 8010b46:	683f      	ldr	r7, [r7, #0]
 8010b48:	e7fb      	b.n	8010b42 <print_array.isra.3+0x12>
    }

    /* Explicitly handle numentries == 0 */
    if (!numentries)
 8010b4a:	b995      	cbnz	r5, 8010b72 <print_array.isra.3+0x42>
    {
        if (p)
 8010b4c:	b124      	cbz	r4, 8010b58 <print_array.isra.3+0x28>
        {
            out = ensure(p, 3);
 8010b4e:	2103      	movs	r1, #3
 8010b50:	4620      	mov	r0, r4
 8010b52:	f7ff fc77 	bl	8010444 <ensure>
 8010b56:	e003      	b.n	8010b60 <print_array.isra.3+0x30>
        }
        else
        {
            out = (char*)cJSON_malloc(3);
 8010b58:	4b74      	ldr	r3, [pc, #464]	; (8010d2c <print_array.isra.3+0x1fc>)
 8010b5a:	2003      	movs	r0, #3
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	4798      	blx	r3
 8010b60:	4603      	mov	r3, r0
        }
        if (out)
 8010b62:	2800      	cmp	r0, #0
 8010b64:	f000 80de 	beq.w	8010d24 <print_array.isra.3+0x1f4>
        {
            strcpy(out,"[]");
 8010b68:	4971      	ldr	r1, [pc, #452]	; (8010d30 <print_array.isra.3+0x200>)
 8010b6a:	f000 fedd 	bl	8011928 <strcpy>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	e0d8      	b.n	8010d24 <print_array.isra.3+0x1f4>
        }

        return out;
    }

    if (p)
 8010b72:	2c00      	cmp	r4, #0
 8010b74:	d049      	beq.n	8010c0a <print_array.isra.3+0xda>
    {
        /* Compose the output array. */
        /* opening square bracket */
        i = p->offset;
 8010b76:	68a3      	ldr	r3, [r4, #8]
        ptr = ensure(p, 1);
 8010b78:	2101      	movs	r1, #1
 8010b7a:	4620      	mov	r0, r4

    if (p)
    {
        /* Compose the output array. */
        /* opening square bracket */
        i = p->offset;
 8010b7c:	9301      	str	r3, [sp, #4]
        ptr = ensure(p, 1);
 8010b7e:	f7ff fc61 	bl	8010444 <ensure>
        if (!ptr)
 8010b82:	2800      	cmp	r0, #0
 8010b84:	f000 8097 	beq.w	8010cb6 <print_array.isra.3+0x186>
        {
            return 0;
        }
        *ptr = '[';
 8010b88:	235b      	movs	r3, #91	; 0x5b
 8010b8a:	2e00      	cmp	r6, #0
        p->offset++;

        child = item->child;
        while (child && !fail)
        {
            print_value(child, depth + 1, fmt, p);
 8010b8c:	f10a 0a01 	add.w	sl, sl, #1
                ptr = ensure(p, len + 1);
                if (!ptr)
                {
                    return 0;
                }
                *ptr++ = ',';
 8010b90:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
        ptr = ensure(p, 1);
        if (!ptr)
        {
            return 0;
        }
        *ptr = '[';
 8010b94:	7003      	strb	r3, [r0, #0]
        p->offset++;
 8010b96:	68a3      	ldr	r3, [r4, #8]

        child = item->child;
 8010b98:	f8d8 5000 	ldr.w	r5, [r8]
 8010b9c:	bf14      	ite	ne
 8010b9e:	f04f 0802 	movne.w	r8, #2
 8010ba2:	f04f 0801 	moveq.w	r8, #1
        if (!ptr)
        {
            return 0;
        }
        *ptr = '[';
        p->offset++;
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	f108 0901 	add.w	r9, r8, #1
 8010bac:	60a3      	str	r3, [r4, #8]

        child = item->child;
        while (child && !fail)
 8010bae:	b1fd      	cbz	r5, 8010bf0 <print_array.isra.3+0xc0>
        {
            print_value(child, depth + 1, fmt, p);
 8010bb0:	4623      	mov	r3, r4
 8010bb2:	4632      	mov	r2, r6
 8010bb4:	4651      	mov	r1, sl
 8010bb6:	4628      	mov	r0, r5
 8010bb8:	f000 f8be 	bl	8010d38 <print_value>
            p->offset = update(p);
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f7ff fc8f 	bl	80104e0 <update>
            if (child->next)
 8010bc2:	682b      	ldr	r3, [r5, #0]

        child = item->child;
        while (child && !fail)
        {
            print_value(child, depth + 1, fmt, p);
            p->offset = update(p);
 8010bc4:	60a0      	str	r0, [r4, #8]
            if (child->next)
 8010bc6:	b18b      	cbz	r3, 8010bec <print_array.isra.3+0xbc>
            {
                len = fmt ? 2 : 1;
                ptr = ensure(p, len + 1);
 8010bc8:	4649      	mov	r1, r9
 8010bca:	4620      	mov	r0, r4
 8010bcc:	f7ff fc3a 	bl	8010444 <ensure>
                if (!ptr)
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d070      	beq.n	8010cb6 <print_array.isra.3+0x186>
                {
                    return 0;
                }
                *ptr++ = ',';
 8010bd4:	f880 b000 	strb.w	fp, [r0]
                if(fmt)
 8010bd8:	b90e      	cbnz	r6, 8010bde <print_array.isra.3+0xae>
                ptr = ensure(p, len + 1);
                if (!ptr)
                {
                    return 0;
                }
                *ptr++ = ',';
 8010bda:	1c43      	adds	r3, r0, #1
 8010bdc:	e002      	b.n	8010be4 <print_array.isra.3+0xb4>
                if(fmt)
                {
                    *ptr++ = ' ';
 8010bde:	2220      	movs	r2, #32
 8010be0:	1c83      	adds	r3, r0, #2
 8010be2:	7042      	strb	r2, [r0, #1]
                }
                *ptr = 0;
 8010be4:	701f      	strb	r7, [r3, #0]
                p->offset += len;
 8010be6:	68a3      	ldr	r3, [r4, #8]
 8010be8:	4443      	add	r3, r8
 8010bea:	60a3      	str	r3, [r4, #8]
            }
            child = child->next;
 8010bec:	682d      	ldr	r5, [r5, #0]
 8010bee:	e7de      	b.n	8010bae <print_array.isra.3+0x7e>
        }
        ptr = ensure(p, 2);
 8010bf0:	2102      	movs	r1, #2
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f7ff fc26 	bl	8010444 <ensure>
        if (!ptr)
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d05c      	beq.n	8010cb6 <print_array.isra.3+0x186>
        {
            return 0;
        }
        *ptr++ = ']';
 8010bfc:	235d      	movs	r3, #93	; 0x5d
        *ptr = '\0';
 8010bfe:	7045      	strb	r5, [r0, #1]
        ptr = ensure(p, 2);
        if (!ptr)
        {
            return 0;
        }
        *ptr++ = ']';
 8010c00:	7003      	strb	r3, [r0, #0]
        *ptr = '\0';
        out = (p->buffer) + i;
 8010c02:	9b01      	ldr	r3, [sp, #4]
 8010c04:	6820      	ldr	r0, [r4, #0]
 8010c06:	4418      	add	r0, r3
 8010c08:	e08d      	b.n	8010d26 <print_array.isra.3+0x1f6>
    }
    else
    {
        /* Allocate an array to hold the pointers to all printed values */
        entries = (char**)cJSON_malloc(numentries * sizeof(char*));
 8010c0a:	f8df b120 	ldr.w	fp, [pc, #288]	; 8010d2c <print_array.isra.3+0x1fc>
 8010c0e:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8010c12:	f8db 3000 	ldr.w	r3, [fp]
 8010c16:	4648      	mov	r0, r9
 8010c18:	4798      	blx	r3
 8010c1a:	f8cd b008 	str.w	fp, [sp, #8]
        if (!entries)
 8010c1e:	4607      	mov	r7, r0
 8010c20:	2800      	cmp	r0, #0
 8010c22:	d048      	beq.n	8010cb6 <print_array.isra.3+0x186>
        {
            return 0;
        }
        memset(entries, 0, numentries * sizeof(char*));
 8010c24:	464a      	mov	r2, r9
 8010c26:	4621      	mov	r1, r4
 8010c28:	f000 fdf8 	bl	801181c <memset>
{
    char **entries;
    char *out = 0;
    char *ptr;
    char *ret;
    int len = 5;
 8010c2c:	f04f 0b05 	mov.w	fp, #5
            return 0;
        }
        memset(entries, 0, numentries * sizeof(char*));

        /* Retrieve all the results: */
        child = item->child;
 8010c30:	f8d8 9000 	ldr.w	r9, [r8]
        while (child && !fail)
        {
            ret = print_value(child, depth + 1, fmt, 0);
 8010c34:	f10a 0a01 	add.w	sl, sl, #1
 8010c38:	f1a7 0804 	sub.w	r8, r7, #4
            return 0;
        }
        memset(entries, 0, numentries * sizeof(char*));

        /* Retrieve all the results: */
        child = item->child;
 8010c3c:	f8cd 8004 	str.w	r8, [sp, #4]
        while (child && !fail)
 8010c40:	f1b9 0f00 	cmp.w	r9, #0
 8010c44:	d018      	beq.n	8010c78 <print_array.isra.3+0x148>
 8010c46:	bb44      	cbnz	r4, 8010c9a <print_array.isra.3+0x16a>
        {
            ret = print_value(child, depth + 1, fmt, 0);
 8010c48:	4632      	mov	r2, r6
 8010c4a:	4623      	mov	r3, r4
 8010c4c:	4651      	mov	r1, sl
 8010c4e:	4648      	mov	r0, r9
 8010c50:	f000 f872 	bl	8010d38 <print_value>
            entries[i++] = ret;
 8010c54:	9a01      	ldr	r2, [sp, #4]
 8010c56:	f842 0f04 	str.w	r0, [r2, #4]!
 8010c5a:	9201      	str	r2, [sp, #4]
            if (ret)
 8010c5c:	b140      	cbz	r0, 8010c70 <print_array.isra.3+0x140>
            {
                len += strlen(ret) + 2 + (fmt ? 1 : 0);
 8010c5e:	f7ef fb37 	bl	80002d0 <strlen>
 8010c62:	1c33      	adds	r3, r6, #0
 8010c64:	bf18      	it	ne
 8010c66:	2301      	movne	r3, #1
 8010c68:	3302      	adds	r3, #2
 8010c6a:	449b      	add	fp, r3
 8010c6c:	4483      	add	fp, r0
 8010c6e:	e000      	b.n	8010c72 <print_array.isra.3+0x142>
            }
            else
            {
                fail = 1;
 8010c70:	2401      	movs	r4, #1
            }
            child = child->next;
 8010c72:	f8d9 9000 	ldr.w	r9, [r9]
 8010c76:	e7e3      	b.n	8010c40 <print_array.isra.3+0x110>
        }

        /* If we didn't fail, try to malloc the output string */
        if (!fail)
 8010c78:	b97c      	cbnz	r4, 8010c9a <print_array.isra.3+0x16a>
        {
            out = (char*)cJSON_malloc(len);
 8010c7a:	9b02      	ldr	r3, [sp, #8]
 8010c7c:	4658      	mov	r0, fp
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4798      	blx	r3
        }
        /* If that fails, we fail. */
        if (!out)
 8010c82:	4681      	mov	r9, r0
 8010c84:	b148      	cbz	r0, 8010c9a <print_array.isra.3+0x16a>
            cJSON_free(entries);
            return 0;
        }

        /* Compose the output array. */
        *out='[';
 8010c86:	235b      	movs	r3, #91	; 0x5b
 8010c88:	4682      	mov	sl, r0
                {
                    *ptr++ = ' ';
                }
                *ptr = 0;
            }
            cJSON_free(entries[i]);
 8010c8a:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8010d34 <print_array.isra.3+0x204>
            cJSON_free(entries);
            return 0;
        }

        /* Compose the output array. */
        *out='[';
 8010c8e:	f80a 3b01 	strb.w	r3, [sl], #1
        for (i = 0; i < numentries; i++)
        {
            tmplen = strlen(entries[i]);
            memcpy(ptr, entries[i], tmplen);
            ptr += tmplen;
            if (i != (numentries - 1))
 8010c92:	1e6b      	subs	r3, r5, #1
        }

        /* Compose the output array. */
        *out='[';
        ptr = out + 1;
        *ptr = '\0';
 8010c94:	7044      	strb	r4, [r0, #1]
        for (i = 0; i < numentries; i++)
        {
            tmplen = strlen(entries[i]);
            memcpy(ptr, entries[i], tmplen);
            ptr += tmplen;
            if (i != (numentries - 1))
 8010c96:	9301      	str	r3, [sp, #4]
 8010c98:	e00f      	b.n	8010cba <print_array.isra.3+0x18a>
{
    char **entries;
    char *out = 0;
    char *ptr;
    char *ret;
    int len = 5;
 8010c9a:	2400      	movs	r4, #0
            /* free all the entries in the array */
            for (i = 0; i < numentries; i++)
            {
                if (entries[i])
                {
                    cJSON_free(entries[i]);
 8010c9c:	4e25      	ldr	r6, [pc, #148]	; (8010d34 <print_array.isra.3+0x204>)
        if (fail)
        {
            /* free all the entries in the array */
            for (i = 0; i < numentries; i++)
            {
                if (entries[i])
 8010c9e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8010ca2:	b108      	cbz	r0, 8010ca8 <print_array.isra.3+0x178>
                {
                    cJSON_free(entries[i]);
 8010ca4:	6833      	ldr	r3, [r6, #0]
 8010ca6:	4798      	blx	r3

        /* Handle failure. */
        if (fail)
        {
            /* free all the entries in the array */
            for (i = 0; i < numentries; i++)
 8010ca8:	3401      	adds	r4, #1
 8010caa:	42a5      	cmp	r5, r4
 8010cac:	dcf7      	bgt.n	8010c9e <print_array.isra.3+0x16e>
                if (entries[i])
                {
                    cJSON_free(entries[i]);
                }
            }
            cJSON_free(entries);
 8010cae:	4b21      	ldr	r3, [pc, #132]	; (8010d34 <print_array.isra.3+0x204>)
 8010cb0:	4638      	mov	r0, r7
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4798      	blx	r3
            return 0;
 8010cb6:	2000      	movs	r0, #0
 8010cb8:	e035      	b.n	8010d26 <print_array.isra.3+0x1f6>
        *out='[';
        ptr = out + 1;
        *ptr = '\0';
        for (i = 0; i < numentries; i++)
        {
            tmplen = strlen(entries[i]);
 8010cba:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8010cbe:	4608      	mov	r0, r1
 8010cc0:	9103      	str	r1, [sp, #12]
 8010cc2:	f7ef fb05 	bl	80002d0 <strlen>
            memcpy(ptr, entries[i], tmplen);
 8010cc6:	9903      	ldr	r1, [sp, #12]
 8010cc8:	4602      	mov	r2, r0
 8010cca:	9002      	str	r0, [sp, #8]
 8010ccc:	4650      	mov	r0, sl
 8010cce:	f000 fd9a 	bl	8011806 <memcpy>
            ptr += tmplen;
 8010cd2:	9b02      	ldr	r3, [sp, #8]
 8010cd4:	449a      	add	sl, r3
            if (i != (numentries - 1))
 8010cd6:	9b01      	ldr	r3, [sp, #4]
 8010cd8:	42a3      	cmp	r3, r4
 8010cda:	d00f      	beq.n	8010cfc <print_array.isra.3+0x1cc>
            {
                *ptr++ = ',';
 8010cdc:	f04f 032c 	mov.w	r3, #44	; 0x2c
 8010ce0:	f88a 3000 	strb.w	r3, [sl]
                if(fmt)
 8010ce4:	b916      	cbnz	r6, 8010cec <print_array.isra.3+0x1bc>
            tmplen = strlen(entries[i]);
            memcpy(ptr, entries[i], tmplen);
            ptr += tmplen;
            if (i != (numentries - 1))
            {
                *ptr++ = ',';
 8010ce6:	f10a 0a01 	add.w	sl, sl, #1
 8010cea:	e004      	b.n	8010cf6 <print_array.isra.3+0x1c6>
                if(fmt)
                {
                    *ptr++ = ' ';
 8010cec:	2320      	movs	r3, #32
 8010cee:	f10a 0a02 	add.w	sl, sl, #2
 8010cf2:	f80a 3c01 	strb.w	r3, [sl, #-1]
                }
                *ptr = 0;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	f88a 3000 	strb.w	r3, [sl]

        /* Compose the output array. */
        *out='[';
        ptr = out + 1;
        *ptr = '\0';
        for (i = 0; i < numentries; i++)
 8010cfc:	3401      	adds	r4, #1
                {
                    *ptr++ = ' ';
                }
                *ptr = 0;
            }
            cJSON_free(entries[i]);
 8010cfe:	f8d8 0000 	ldr.w	r0, [r8]
 8010d02:	f8db 3000 	ldr.w	r3, [fp]
 8010d06:	4798      	blx	r3

        /* Compose the output array. */
        *out='[';
        ptr = out + 1;
        *ptr = '\0';
        for (i = 0; i < numentries; i++)
 8010d08:	42a5      	cmp	r5, r4
 8010d0a:	dcd6      	bgt.n	8010cba <print_array.isra.3+0x18a>
                }
                *ptr = 0;
            }
            cJSON_free(entries[i]);
        }
        cJSON_free(entries);
 8010d0c:	4b09      	ldr	r3, [pc, #36]	; (8010d34 <print_array.isra.3+0x204>)
 8010d0e:	4638      	mov	r0, r7
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	4798      	blx	r3
        *ptr++ = ']';
 8010d14:	235d      	movs	r3, #93	; 0x5d
        *ptr++ = '\0';
 8010d16:	4648      	mov	r0, r9
                *ptr = 0;
            }
            cJSON_free(entries[i]);
        }
        cJSON_free(entries);
        *ptr++ = ']';
 8010d18:	f88a 3000 	strb.w	r3, [sl]
        *ptr++ = '\0';
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	f88a 3001 	strb.w	r3, [sl, #1]
 8010d22:	e000      	b.n	8010d26 <print_array.isra.3+0x1f6>
        }
        else
        {
            out = (char*)cJSON_malloc(3);
        }
        if (out)
 8010d24:	4618      	mov	r0, r3
        *ptr++ = ']';
        *ptr++ = '\0';
    }

    return out;
}
 8010d26:	b005      	add	sp, #20
 8010d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2c:	20010088 	.word	0x20010088
 8010d30:	0802d185 	.word	0x0802d185
 8010d34:	20010084 	.word	0x20010084

08010d38 <print_value>:
    *ep=value;return 0;	/* failure. */
}

/* Render a value to text. */
static char *print_value(const cJSON *item, int depth, int fmt, printbuffer *p)
{
 8010d38:	b570      	push	{r4, r5, r6, lr}
 8010d3a:	461e      	mov	r6, r3
    char *out = 0;

    if (!item)
 8010d3c:	4604      	mov	r4, r0
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	d057      	beq.n	8010df2 <print_value+0xba>
 8010d42:	68c5      	ldr	r5, [r0, #12]
    {
        return 0;
    }
    if (p)
    {
        switch ((item->type) & 0xFF)
 8010d44:	b2ed      	uxtb	r5, r5

    if (!item)
    {
        return 0;
    }
    if (p)
 8010d46:	b32b      	cbz	r3, 8010d94 <print_value+0x5c>
    {
        switch ((item->type) & 0xFF)
 8010d48:	2d08      	cmp	r5, #8
 8010d4a:	d041      	beq.n	8010dd0 <print_value+0x98>
 8010d4c:	dc2d      	bgt.n	8010daa <print_value+0x72>
 8010d4e:	2d02      	cmp	r5, #2
 8010d50:	d016      	beq.n	8010d80 <print_value+0x48>
 8010d52:	2d04      	cmp	r5, #4
 8010d54:	d002      	beq.n	8010d5c <print_value+0x24>
 8010d56:	2d01      	cmp	r5, #1
 8010d58:	d14d      	bne.n	8010df6 <print_value+0xbe>
 8010d5a:	e008      	b.n	8010d6e <print_value+0x36>
        {
            case cJSON_NULL:
                out = ensure(p, 5);
 8010d5c:	2105      	movs	r1, #5
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7ff fb70 	bl	8010444 <ensure>
                if (out)
 8010d64:	4604      	mov	r4, r0
 8010d66:	2800      	cmp	r0, #0
 8010d68:	d043      	beq.n	8010df2 <print_value+0xba>
                {
                    strcpy(out, "null");
 8010d6a:	4924      	ldr	r1, [pc, #144]	; (8010dfc <print_value+0xc4>)
 8010d6c:	e00f      	b.n	8010d8e <print_value+0x56>
                }
                break;
            case cJSON_False:
                out = ensure(p, 6);
 8010d6e:	2106      	movs	r1, #6
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7ff fb67 	bl	8010444 <ensure>
                if (out)
 8010d76:	4604      	mov	r4, r0
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d03a      	beq.n	8010df2 <print_value+0xba>
                {
                    strcpy(out, "false");
 8010d7c:	4920      	ldr	r1, [pc, #128]	; (8010e00 <print_value+0xc8>)
 8010d7e:	e006      	b.n	8010d8e <print_value+0x56>
                }
                break;
            case cJSON_True:
                out = ensure(p, 5);
 8010d80:	2105      	movs	r1, #5
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7ff fb5e 	bl	8010444 <ensure>
                if (out)
 8010d88:	4604      	mov	r4, r0
 8010d8a:	b390      	cbz	r0, 8010df2 <print_value+0xba>
                {
                    strcpy(out, "true");
 8010d8c:	491d      	ldr	r1, [pc, #116]	; (8010e04 <print_value+0xcc>)
 8010d8e:	f000 fdcb 	bl	8011928 <strcpy>
 8010d92:	e02e      	b.n	8010df2 <print_value+0xba>
                break;
        }
    }
    else
    {
        switch ((item->type) & 0xFF)
 8010d94:	2d08      	cmp	r5, #8
 8010d96:	d01b      	beq.n	8010dd0 <print_value+0x98>
 8010d98:	dc07      	bgt.n	8010daa <print_value+0x72>
 8010d9a:	2d02      	cmp	r5, #2
 8010d9c:	d013      	beq.n	8010dc6 <print_value+0x8e>
 8010d9e:	2d04      	cmp	r5, #4
 8010da0:	d00f      	beq.n	8010dc2 <print_value+0x8a>
 8010da2:	2d01      	cmp	r5, #1
 8010da4:	d127      	bne.n	8010df6 <print_value+0xbe>
        {
            case cJSON_NULL:
                out = cJSON_strdup("null");
                break;
            case cJSON_False:
                out = cJSON_strdup("false");
 8010da6:	4816      	ldr	r0, [pc, #88]	; (8010e00 <print_value+0xc8>)
 8010da8:	e00e      	b.n	8010dc8 <print_value+0x90>
                break;
        }
    }
    else
    {
        switch ((item->type) & 0xFF)
 8010daa:	2d20      	cmp	r5, #32
 8010dac:	d015      	beq.n	8010dda <print_value+0xa2>
 8010dae:	2d40      	cmp	r5, #64	; 0x40
 8010db0:	d019      	beq.n	8010de6 <print_value+0xae>
 8010db2:	2d10      	cmp	r5, #16
 8010db4:	d11f      	bne.n	8010df6 <print_value+0xbe>
}

/* Invoke print_string_ptr (which is useful) on an item. */
static char *print_string(const cJSON *item, printbuffer *p)
{
    return print_string_ptr(item->valuestring, p);
 8010db6:	4631      	mov	r1, r6
 8010db8:	6920      	ldr	r0, [r4, #16]
                break;
        }
    }

    return out;
}
 8010dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

/* Invoke print_string_ptr (which is useful) on an item. */
static char *print_string(const cJSON *item, printbuffer *p)
{
    return print_string_ptr(item->valuestring, p);
 8010dbe:	f7ff bc65 	b.w	801068c <print_string_ptr>
    else
    {
        switch ((item->type) & 0xFF)
        {
            case cJSON_NULL:
                out = cJSON_strdup("null");
 8010dc2:	480e      	ldr	r0, [pc, #56]	; (8010dfc <print_value+0xc4>)
 8010dc4:	e000      	b.n	8010dc8 <print_value+0x90>
                break;
            case cJSON_False:
                out = cJSON_strdup("false");
                break;
            case cJSON_True:
                out = cJSON_strdup("true");
 8010dc6:	480f      	ldr	r0, [pc, #60]	; (8010e04 <print_value+0xcc>)
                break;
        }
    }

    return out;
}
 8010dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        {
            case cJSON_NULL:
                out = cJSON_strdup("null");
                break;
            case cJSON_False:
                out = cJSON_strdup("false");
 8010dcc:	f7ff bb74 	b.w	80104b8 <cJSON_strdup>
                break;
            case cJSON_True:
                out = cJSON_strdup("true");
                break;
            case cJSON_Number:
                out = print_number(item, 0);
 8010dd0:	4631      	mov	r1, r6
                break;
        }
    }

    return out;
}
 8010dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                break;
            case cJSON_True:
                out = cJSON_strdup("true");
                break;
            case cJSON_Number:
                out = print_number(item, 0);
 8010dd6:	f7ff bb8f 	b.w	80104f8 <print_number>
                break;
            case cJSON_String:
                out = print_string(item, 0);
                break;
            case cJSON_Array:
                out = print_array(item, depth, fmt, 0);
 8010dda:	f104 0008 	add.w	r0, r4, #8
                break;
        }
    }

    return out;
}
 8010dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                break;
            case cJSON_String:
                out = print_string(item, 0);
                break;
            case cJSON_Array:
                out = print_array(item, depth, fmt, 0);
 8010de2:	f7ff bea5 	b.w	8010b30 <print_array.isra.3>
                break;
            case cJSON_Object:
                out = print_object(item, depth, fmt, 0);
 8010de6:	f104 0008 	add.w	r0, r4, #8
                break;
        }
    }

    return out;
}
 8010dea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                break;
            case cJSON_Array:
                out = print_array(item, depth, fmt, 0);
                break;
            case cJSON_Object:
                out = print_object(item, depth, fmt, 0);
 8010dee:	f000 b80b 	b.w	8010e08 <print_object.isra.2>
 8010df2:	4620      	mov	r0, r4
 8010df4:	bd70      	pop	{r4, r5, r6, pc}
}

/* Render a value to text. */
static char *print_value(const cJSON *item, int depth, int fmt, printbuffer *p)
{
    char *out = 0;
 8010df6:	2000      	movs	r0, #0
                break;
        }
    }

    return out;
}
 8010df8:	bd70      	pop	{r4, r5, r6, pc}
 8010dfa:	bf00      	nop
 8010dfc:	0802d159 	.word	0x0802d159
 8010e00:	0802d17a 	.word	0x0802d17a
 8010e04:	0802d180 	.word	0x0802d180

08010e08 <print_object.isra.2>:
    *ep = value;
    return 0;
}

/* Render an object to text. */
static char *print_object(const cJSON *item, int depth, int fmt, printbuffer *p)
 8010e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e0c:	4615      	mov	r5, r2
 8010e0e:	b087      	sub	sp, #28
 8010e10:	461c      	mov	r4, r3
    char *str;
    int len = 7;
    int i = 0;
    int j;
    cJSON *child = item->child;
    int numentries = 0;
 8010e12:	2200      	movs	r2, #0
    *ep = value;
    return 0;
}

/* Render an object to text. */
static char *print_object(const cJSON *item, int depth, int fmt, printbuffer *p)
 8010e14:	4606      	mov	r6, r0
 8010e16:	468a      	mov	sl, r1
    char *ret;
    char *str;
    int len = 7;
    int i = 0;
    int j;
    cJSON *child = item->child;
 8010e18:	6803      	ldr	r3, [r0, #0]
    int numentries = 0;
 8010e1a:	9200      	str	r2, [sp, #0]
    int fail = 0;
    size_t tmplen = 0;

    /* Count the number of entries. */
    while (child)
 8010e1c:	b123      	cbz	r3, 8010e28 <print_object.isra.2+0x20>
    {
        numentries++;
 8010e1e:	9a00      	ldr	r2, [sp, #0]
        child = child->next;
 8010e20:	681b      	ldr	r3, [r3, #0]
    size_t tmplen = 0;

    /* Count the number of entries. */
    while (child)
    {
        numentries++;
 8010e22:	3201      	adds	r2, #1
 8010e24:	9200      	str	r2, [sp, #0]
 8010e26:	e7f9      	b.n	8010e1c <print_object.isra.2+0x14>
        child = child->next;
    }

    /* Explicitly handle empty object case */
    if (!numentries)
 8010e28:	9b00      	ldr	r3, [sp, #0]
 8010e2a:	bb6b      	cbnz	r3, 8010e88 <print_object.isra.2+0x80>
    {
        if (p)
 8010e2c:	b144      	cbz	r4, 8010e40 <print_object.isra.2+0x38>
        {
            out = ensure(p, fmt ? depth + 4 : 3);
 8010e2e:	b115      	cbz	r5, 8010e36 <print_object.isra.2+0x2e>
 8010e30:	f10a 0104 	add.w	r1, sl, #4
 8010e34:	e000      	b.n	8010e38 <print_object.isra.2+0x30>
 8010e36:	2103      	movs	r1, #3
 8010e38:	4620      	mov	r0, r4
 8010e3a:	f7ff fb03 	bl	8010444 <ensure>
 8010e3e:	e007      	b.n	8010e50 <print_object.isra.2+0x48>
        }
        else
        {
            out = (char*)cJSON_malloc(fmt ? depth + 4 : 3);
 8010e40:	4ba3      	ldr	r3, [pc, #652]	; (80110d0 <print_object.isra.2+0x2c8>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	b115      	cbz	r5, 8010e4c <print_object.isra.2+0x44>
 8010e46:	f10a 0004 	add.w	r0, sl, #4
 8010e4a:	e000      	b.n	8010e4e <print_object.isra.2+0x46>
 8010e4c:	2003      	movs	r0, #3
 8010e4e:	4798      	blx	r3
        }
        if (!out)
 8010e50:	2800      	cmp	r0, #0
 8010e52:	f000 8135 	beq.w	80110c0 <print_object.isra.2+0x2b8>
        {
            return 0;
        }
        ptr = out;
        *ptr++ = '{';
 8010e56:	237b      	movs	r3, #123	; 0x7b
 8010e58:	7003      	strb	r3, [r0, #0]
        if (fmt) {
 8010e5a:	b90d      	cbnz	r5, 8010e60 <print_object.isra.2+0x58>
        if (!out)
        {
            return 0;
        }
        ptr = out;
        *ptr++ = '{';
 8010e5c:	1c43      	adds	r3, r0, #1
 8010e5e:	e00e      	b.n	8010e7e <print_object.isra.2+0x76>
        if (fmt) {
            *ptr++ = '\n';
 8010e60:	220a      	movs	r2, #10
 8010e62:	1c83      	adds	r3, r0, #2
            for (i = 0; i < depth; i++)
            {
                *ptr++ = '\t';
 8010e64:	2409      	movs	r4, #9
            return 0;
        }
        ptr = out;
        *ptr++ = '{';
        if (fmt) {
            *ptr++ = '\n';
 8010e66:	7042      	strb	r2, [r0, #1]
 8010e68:	461a      	mov	r2, r3
            for (i = 0; i < depth; i++)
 8010e6a:	1ad1      	subs	r1, r2, r3
 8010e6c:	458a      	cmp	sl, r1
 8010e6e:	dd02      	ble.n	8010e76 <print_object.isra.2+0x6e>
            {
                *ptr++ = '\t';
 8010e70:	f802 4b01 	strb.w	r4, [r2], #1
 8010e74:	e7f9      	b.n	8010e6a <print_object.isra.2+0x62>
 8010e76:	f1ba 0f00 	cmp.w	sl, #0
 8010e7a:	bfa8      	it	ge
 8010e7c:	4453      	addge	r3, sl
            }
        }
        *ptr++ = '}';
 8010e7e:	227d      	movs	r2, #125	; 0x7d
 8010e80:	701a      	strb	r2, [r3, #0]
        *ptr++ = '\0';
 8010e82:	2200      	movs	r2, #0
 8010e84:	705a      	strb	r2, [r3, #1]
 8010e86:	e1a2      	b.n	80111ce <print_object.isra.2+0x3c6>

        return out;
    }

    if (p)
 8010e88:	2c00      	cmp	r4, #0
 8010e8a:	f000 809c 	beq.w	8010fc6 <print_object.isra.2+0x1be>
    {
        /* Compose the output: */
        i = p->offset;
        len = fmt ? 2 : 1; /* fmt: {\n */
 8010e8e:	2d00      	cmp	r5, #0
        ptr = ensure(p, len + 1);
 8010e90:	4620      	mov	r0, r4
    }

    if (p)
    {
        /* Compose the output: */
        i = p->offset;
 8010e92:	f8d4 8008 	ldr.w	r8, [r4, #8]
        len = fmt ? 2 : 1; /* fmt: {\n */
 8010e96:	bf14      	ite	ne
 8010e98:	2702      	movne	r7, #2
 8010e9a:	2701      	moveq	r7, #1
        ptr = ensure(p, len + 1);
 8010e9c:	1c79      	adds	r1, r7, #1
 8010e9e:	f7ff fad1 	bl	8010444 <ensure>
        if (!ptr)
 8010ea2:	2800      	cmp	r0, #0
 8010ea4:	f000 810c 	beq.w	80110c0 <print_object.isra.2+0x2b8>
        {
            return 0;
        }

        *ptr++ = '{';
 8010ea8:	237b      	movs	r3, #123	; 0x7b
 8010eaa:	7003      	strb	r3, [r0, #0]
        if (fmt)
 8010eac:	b90d      	cbnz	r5, 8010eb2 <print_object.isra.2+0xaa>
        if (!ptr)
        {
            return 0;
        }

        *ptr++ = '{';
 8010eae:	1c43      	adds	r3, r0, #1
 8010eb0:	e002      	b.n	8010eb8 <print_object.isra.2+0xb0>
        if (fmt)
        {
            *ptr++ = '\n';
 8010eb2:	220a      	movs	r2, #10
 8010eb4:	1c83      	adds	r3, r0, #2
 8010eb6:	7042      	strb	r2, [r0, #1]
        }
        *ptr = '\0';
 8010eb8:	2200      	movs	r2, #0
                {
                    return 0;
                }
                for (j = 0; j < depth; j++)
                {
                    *ptr++ = '\t';
 8010eba:	f04f 0b09 	mov.w	fp, #9
        *ptr++ = '{';
        if (fmt)
        {
            *ptr++ = '\n';
        }
        *ptr = '\0';
 8010ebe:	701a      	strb	r2, [r3, #0]
 8010ec0:	4295      	cmp	r5, r2
        p->offset += len;
 8010ec2:	68a3      	ldr	r3, [r4, #8]

        child = item->child;
 8010ec4:	6836      	ldr	r6, [r6, #0]
 8010ec6:	bf18      	it	ne
 8010ec8:	f04f 0902 	movne.w	r9, #2
        if (fmt)
        {
            *ptr++ = '\n';
        }
        *ptr = '\0';
        p->offset += len;
 8010ecc:	441f      	add	r7, r3
 8010ece:	bf08      	it	eq
 8010ed0:	f04f 0901 	moveq.w	r9, #1
 8010ed4:	60a7      	str	r7, [r4, #8]

        child = item->child;
        depth++;
 8010ed6:	f10a 0701 	add.w	r7, sl, #1
        while (child)
 8010eda:	2e00      	cmp	r6, #0
 8010edc:	d055      	beq.n	8010f8a <print_object.isra.2+0x182>
        {
            if (fmt)
 8010ede:	b185      	cbz	r5, 8010f02 <print_object.isra.2+0xfa>
            {
                ptr = ensure(p, depth);
 8010ee0:	4639      	mov	r1, r7
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f7ff faae 	bl	8010444 <ensure>
                if (!ptr)
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	f000 80e9 	beq.w	80110c0 <print_object.isra.2+0x2b8>
 8010eee:	4603      	mov	r3, r0
                {
                    return 0;
                }
                for (j = 0; j < depth; j++)
 8010ef0:	1a1a      	subs	r2, r3, r0
 8010ef2:	4297      	cmp	r7, r2
 8010ef4:	dd02      	ble.n	8010efc <print_object.isra.2+0xf4>
                {
                    *ptr++ = '\t';
 8010ef6:	f803 bb01 	strb.w	fp, [r3], #1
 8010efa:	e7f9      	b.n	8010ef0 <print_object.isra.2+0xe8>
                }
                p->offset += depth;
 8010efc:	68a3      	ldr	r3, [r4, #8]
 8010efe:	443b      	add	r3, r7
 8010f00:	60a3      	str	r3, [r4, #8]
            }

            /* print key */
            print_string_ptr(child->string, p);
 8010f02:	4621      	mov	r1, r4
 8010f04:	6a30      	ldr	r0, [r6, #32]
 8010f06:	f7ff fbc1 	bl	801068c <print_string_ptr>
            p->offset = update(p);
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f7ff fae8 	bl	80104e0 <update>

            len = fmt ? 2 : 1;
            ptr = ensure(p, len);
 8010f10:	4649      	mov	r1, r9
                p->offset += depth;
            }

            /* print key */
            print_string_ptr(child->string, p);
            p->offset = update(p);
 8010f12:	60a0      	str	r0, [r4, #8]

            len = fmt ? 2 : 1;
            ptr = ensure(p, len);
 8010f14:	4620      	mov	r0, r4
 8010f16:	f7ff fa95 	bl	8010444 <ensure>
            if (!ptr)
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	f000 80d0 	beq.w	80110c0 <print_object.isra.2+0x2b8>
            {
                return 0;
            }
            *ptr++ = ':';
 8010f20:	f04f 033a 	mov.w	r3, #58	; 0x3a
 8010f24:	7003      	strb	r3, [r0, #0]
            if (fmt)
 8010f26:	b10d      	cbz	r5, 8010f2c <print_object.isra.2+0x124>
            {
                *ptr++ = '\t';
 8010f28:	f880 b001 	strb.w	fp, [r0, #1]
            }
            p->offset+=len;
 8010f2c:	68a3      	ldr	r3, [r4, #8]

            /* print value */
            print_value(child, depth, fmt, p);
 8010f2e:	462a      	mov	r2, r5
 8010f30:	4639      	mov	r1, r7
 8010f32:	4630      	mov	r0, r6
            *ptr++ = ':';
            if (fmt)
            {
                *ptr++ = '\t';
            }
            p->offset+=len;
 8010f34:	444b      	add	r3, r9
 8010f36:	60a3      	str	r3, [r4, #8]

            /* print value */
            print_value(child, depth, fmt, p);
 8010f38:	4623      	mov	r3, r4
 8010f3a:	f7ff fefd 	bl	8010d38 <print_value>
            p->offset = update(p);
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f7ff face 	bl	80104e0 <update>

            /* print comma if not last */
            len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
 8010f44:	1c2b      	adds	r3, r5, #0
 8010f46:	6832      	ldr	r2, [r6, #0]
 8010f48:	bf18      	it	ne
 8010f4a:	2301      	movne	r3, #1
            }
            p->offset+=len;

            /* print value */
            print_value(child, depth, fmt, p);
            p->offset = update(p);
 8010f4c:	60a0      	str	r0, [r4, #8]

            /* print comma if not last */
            len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
            ptr = ensure(p, len + 1);
 8010f4e:	4620      	mov	r0, r4
            /* print value */
            print_value(child, depth, fmt, p);
            p->offset = update(p);

            /* print comma if not last */
            len = (fmt ? 1 : 0) + (child->next ? 1 : 0);
 8010f50:	2a00      	cmp	r2, #0
 8010f52:	bf18      	it	ne
 8010f54:	3301      	addne	r3, #1
            ptr = ensure(p, len + 1);
 8010f56:	1c59      	adds	r1, r3, #1
 8010f58:	9300      	str	r3, [sp, #0]
 8010f5a:	f7ff fa73 	bl	8010444 <ensure>
            if (!ptr)
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	f000 80ae 	beq.w	80110c0 <print_object.isra.2+0x2b8>
            {
                return 0;
            }
            if (child->next)
 8010f64:	6832      	ldr	r2, [r6, #0]
 8010f66:	9b00      	ldr	r3, [sp, #0]
 8010f68:	b11a      	cbz	r2, 8010f72 <print_object.isra.2+0x16a>
            {
                *ptr++ = ',';
 8010f6a:	222c      	movs	r2, #44	; 0x2c
 8010f6c:	3001      	adds	r0, #1
 8010f6e:	f800 2c01 	strb.w	r2, [r0, #-1]
            }

            if (fmt)
 8010f72:	b11d      	cbz	r5, 8010f7c <print_object.isra.2+0x174>
            {
                *ptr++ = '\n';
 8010f74:	220a      	movs	r2, #10
 8010f76:	3001      	adds	r0, #1
 8010f78:	f800 2c01 	strb.w	r2, [r0, #-1]
            }
            *ptr = '\0';
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	7002      	strb	r2, [r0, #0]
            p->offset += len;
 8010f80:	68a2      	ldr	r2, [r4, #8]

            child = child->next;
 8010f82:	6836      	ldr	r6, [r6, #0]
            if (fmt)
            {
                *ptr++ = '\n';
            }
            *ptr = '\0';
            p->offset += len;
 8010f84:	4413      	add	r3, r2
 8010f86:	60a3      	str	r3, [r4, #8]
 8010f88:	e7a7      	b.n	8010eda <print_object.isra.2+0xd2>

            child = child->next;
        }

        ptr = ensure(p, fmt ? (depth + 1) : 2);
 8010f8a:	b115      	cbz	r5, 8010f92 <print_object.isra.2+0x18a>
 8010f8c:	f10a 0102 	add.w	r1, sl, #2
 8010f90:	e000      	b.n	8010f94 <print_object.isra.2+0x18c>
 8010f92:	2102      	movs	r1, #2
 8010f94:	4620      	mov	r0, r4
 8010f96:	f7ff fa55 	bl	8010444 <ensure>
        if (!ptr)
 8010f9a:	2800      	cmp	r0, #0
 8010f9c:	f000 8090 	beq.w	80110c0 <print_object.isra.2+0x2b8>
        {
            return 0;
        }
        if (fmt)
 8010fa0:	b155      	cbz	r5, 8010fb8 <print_object.isra.2+0x1b0>
 8010fa2:	4603      	mov	r3, r0
        {
            for (i = 0; i < (depth - 1); i++)
            {
                *ptr++ = '\t';
 8010fa4:	2109      	movs	r1, #9
        {
            return 0;
        }
        if (fmt)
        {
            for (i = 0; i < (depth - 1); i++)
 8010fa6:	1a1a      	subs	r2, r3, r0
 8010fa8:	4592      	cmp	sl, r2
 8010faa:	dd02      	ble.n	8010fb2 <print_object.isra.2+0x1aa>
            {
                *ptr++ = '\t';
 8010fac:	f803 1b01 	strb.w	r1, [r3], #1
 8010fb0:	e7f9      	b.n	8010fa6 <print_object.isra.2+0x19e>
 8010fb2:	ea2a 78ea 	bic.w	r8, sl, sl, asr #31
 8010fb6:	4440      	add	r0, r8
            }
        }
        *ptr++ = '}';
 8010fb8:	237d      	movs	r3, #125	; 0x7d
 8010fba:	7003      	strb	r3, [r0, #0]
        *ptr = '\0';
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	7043      	strb	r3, [r0, #1]
        out = (p->buffer) + i;
 8010fc0:	6820      	ldr	r0, [r4, #0]
 8010fc2:	4440      	add	r0, r8
 8010fc4:	e103      	b.n	80111ce <print_object.isra.2+0x3c6>
    }
    else
    {
        /* Allocate space for the names and the objects */
        entries = (char**)cJSON_malloc(numentries * sizeof(char*));
 8010fc6:	9b00      	ldr	r3, [sp, #0]
 8010fc8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80110d0 <print_object.isra.2+0x2c8>
 8010fcc:	009f      	lsls	r7, r3, #2
 8010fce:	f8d8 3000 	ldr.w	r3, [r8]
 8010fd2:	4638      	mov	r0, r7
 8010fd4:	4798      	blx	r3
        if (!entries)
 8010fd6:	4683      	mov	fp, r0
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d071      	beq.n	80110c0 <print_object.isra.2+0x2b8>
        {
            return 0;
        }
        names = (char**)cJSON_malloc(numentries * sizeof(char*));
 8010fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	4798      	blx	r3
        if (!names)
 8010fe4:	9001      	str	r0, [sp, #4]
 8010fe6:	b920      	cbnz	r0, 8010ff2 <print_object.isra.2+0x1ea>
        {
            cJSON_free(entries);
 8010fe8:	4b3a      	ldr	r3, [pc, #232]	; (80110d4 <print_object.isra.2+0x2cc>)
 8010fea:	4658      	mov	r0, fp
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	4798      	blx	r3
 8010ff0:	e0ec      	b.n	80111cc <print_object.isra.2+0x3c4>
            return 0;
        }
        memset(entries,0, sizeof(char*) * numentries);
 8010ff2:	463a      	mov	r2, r7
 8010ff4:	4621      	mov	r1, r4
 8010ff6:	4658      	mov	r0, fp
 8010ff8:	f000 fc10 	bl	801181c <memset>
        memset(names, 0, sizeof(char*) * numentries);
 8010ffc:	463a      	mov	r2, r7
 8010ffe:	4621      	mov	r1, r4
 8011000:	9801      	ldr	r0, [sp, #4]
 8011002:	f000 fc0b 	bl	801181c <memset>

        /* Collect all the results into our arrays: */
        child = item->child;
        depth++;
 8011006:	f10a 0301 	add.w	r3, sl, #1
        }
        memset(entries,0, sizeof(char*) * numentries);
        memset(names, 0, sizeof(char*) * numentries);

        /* Collect all the results into our arrays: */
        child = item->child;
 801100a:	6837      	ldr	r7, [r6, #0]
        depth++;
 801100c:	9303      	str	r3, [sp, #12]
        if (fmt)
 801100e:	b115      	cbz	r5, 8011016 <print_object.isra.2+0x20e>
        {
            len += depth;
 8011010:	f10a 0408 	add.w	r4, sl, #8
 8011014:	e000      	b.n	8011018 <print_object.isra.2+0x210>
    char **names = 0;
    char *out = 0;
    char *ptr;
    char *ret;
    char *str;
    int len = 7;
 8011016:	2407      	movs	r4, #7
 8011018:	2d00      	cmp	r5, #0
        {
            names[i] = str = print_string_ptr(child->string, 0); /* print key */
            entries[i++] = ret = print_value(child, depth, fmt, 0);
            if (str && ret)
            {
                len += strlen(ret) + strlen(str) + 2 + (fmt ? 2 + depth : 0);
 801101a:	f10a 0303 	add.w	r3, sl, #3
 801101e:	9a01      	ldr	r2, [sp, #4]
 8011020:	f04f 0600 	mov.w	r6, #0
 8011024:	bf08      	it	eq
 8011026:	2300      	moveq	r3, #0
 8011028:	f1a2 0904 	sub.w	r9, r2, #4
 801102c:	f1ab 0204 	sub.w	r2, fp, #4
 8011030:	3302      	adds	r3, #2
 8011032:	9202      	str	r2, [sp, #8]
 8011034:	9304      	str	r3, [sp, #16]
        depth++;
        if (fmt)
        {
            len += depth;
        }
        while (child && !fail)
 8011036:	b327      	cbz	r7, 8011082 <print_object.isra.2+0x27a>
 8011038:	bb56      	cbnz	r6, 8011090 <print_object.isra.2+0x288>
        {
            names[i] = str = print_string_ptr(child->string, 0); /* print key */
 801103a:	4631      	mov	r1, r6
 801103c:	6a38      	ldr	r0, [r7, #32]
 801103e:	f7ff fb25 	bl	801068c <print_string_ptr>
            entries[i++] = ret = print_value(child, depth, fmt, 0);
 8011042:	462a      	mov	r2, r5
        {
            len += depth;
        }
        while (child && !fail)
        {
            names[i] = str = print_string_ptr(child->string, 0); /* print key */
 8011044:	f849 0f04 	str.w	r0, [r9, #4]!
 8011048:	4680      	mov	r8, r0
            entries[i++] = ret = print_value(child, depth, fmt, 0);
 801104a:	4633      	mov	r3, r6
 801104c:	9903      	ldr	r1, [sp, #12]
 801104e:	4638      	mov	r0, r7
 8011050:	f7ff fe72 	bl	8010d38 <print_value>
 8011054:	9a02      	ldr	r2, [sp, #8]
 8011056:	f842 0f04 	str.w	r0, [r2, #4]!
 801105a:	9202      	str	r2, [sp, #8]
            if (str && ret)
 801105c:	f1b8 0f00 	cmp.w	r8, #0
 8011060:	d00c      	beq.n	801107c <print_object.isra.2+0x274>
 8011062:	b158      	cbz	r0, 801107c <print_object.isra.2+0x274>
            {
                len += strlen(ret) + strlen(str) + 2 + (fmt ? 2 + depth : 0);
 8011064:	f7ef f934 	bl	80002d0 <strlen>
 8011068:	9005      	str	r0, [sp, #20]
 801106a:	4640      	mov	r0, r8
 801106c:	f7ef f930 	bl	80002d0 <strlen>
 8011070:	9b04      	ldr	r3, [sp, #16]
 8011072:	441c      	add	r4, r3
 8011074:	9b05      	ldr	r3, [sp, #20]
 8011076:	441c      	add	r4, r3
 8011078:	4404      	add	r4, r0
 801107a:	e000      	b.n	801107e <print_object.isra.2+0x276>
            }
            else
            {
                fail = 1;
 801107c:	2601      	movs	r6, #1
            }
            child = child->next;
 801107e:	683f      	ldr	r7, [r7, #0]
 8011080:	e7d9      	b.n	8011036 <print_object.isra.2+0x22e>
        }

        /* Try to allocate the output string */
        if (!fail)
 8011082:	b92e      	cbnz	r6, 8011090 <print_object.isra.2+0x288>
        {
            out = (char*)cJSON_malloc(len);
 8011084:	4b12      	ldr	r3, [pc, #72]	; (80110d0 <print_object.isra.2+0x2c8>)
 8011086:	4620      	mov	r0, r4
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	4798      	blx	r3
        }
        if (!out)
 801108c:	4604      	mov	r4, r0
 801108e:	b9c8      	cbnz	r0, 80110c4 <print_object.isra.2+0x2bc>
        {
            names[i] = str = print_string_ptr(child->string, 0); /* print key */
            entries[i++] = ret = print_value(child, depth, fmt, 0);
            if (str && ret)
            {
                len += strlen(ret) + strlen(str) + 2 + (fmt ? 2 + depth : 0);
 8011090:	2400      	movs	r4, #0
            /* free all the printed keys and values */
            for (i = 0; i < numentries; i++)
            {
                if (names[i])
                {
                    cJSON_free(names[i]);
 8011092:	4d10      	ldr	r5, [pc, #64]	; (80110d4 <print_object.isra.2+0x2cc>)
        if (fail)
        {
            /* free all the printed keys and values */
            for (i = 0; i < numentries; i++)
            {
                if (names[i])
 8011094:	9b01      	ldr	r3, [sp, #4]
 8011096:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801109a:	b108      	cbz	r0, 80110a0 <print_object.isra.2+0x298>
                {
                    cJSON_free(names[i]);
 801109c:	682b      	ldr	r3, [r5, #0]
 801109e:	4798      	blx	r3
                }
                if (entries[i])
 80110a0:	f85b 0024 	ldr.w	r0, [fp, r4, lsl #2]
 80110a4:	b108      	cbz	r0, 80110aa <print_object.isra.2+0x2a2>
                {
                    cJSON_free(entries[i]);
 80110a6:	682b      	ldr	r3, [r5, #0]
 80110a8:	4798      	blx	r3

        /* Handle failure */
        if (fail)
        {
            /* free all the printed keys and values */
            for (i = 0; i < numentries; i++)
 80110aa:	3401      	adds	r4, #1
 80110ac:	9b00      	ldr	r3, [sp, #0]
 80110ae:	42a3      	cmp	r3, r4
 80110b0:	dcf0      	bgt.n	8011094 <print_object.isra.2+0x28c>
                if (entries[i])
                {
                    cJSON_free(entries[i]);
                }
            }
            cJSON_free(names);
 80110b2:	4c08      	ldr	r4, [pc, #32]	; (80110d4 <print_object.isra.2+0x2cc>)
 80110b4:	9801      	ldr	r0, [sp, #4]
 80110b6:	6823      	ldr	r3, [r4, #0]
 80110b8:	4798      	blx	r3
            cJSON_free(entries);
 80110ba:	6823      	ldr	r3, [r4, #0]
 80110bc:	4658      	mov	r0, fp
 80110be:	4798      	blx	r3
            return 0;
 80110c0:	2000      	movs	r0, #0
 80110c2:	e084      	b.n	80111ce <print_object.isra.2+0x3c6>
        }

        /* Compose the output: */
        *out = '{';
 80110c4:	237b      	movs	r3, #123	; 0x7b
 80110c6:	7003      	strb	r3, [r0, #0]
        ptr = out + 1;
        if (fmt)
 80110c8:	b935      	cbnz	r5, 80110d8 <print_object.isra.2+0x2d0>
            return 0;
        }

        /* Compose the output: */
        *out = '{';
        ptr = out + 1;
 80110ca:	1c46      	adds	r6, r0, #1
 80110cc:	e007      	b.n	80110de <print_object.isra.2+0x2d6>
 80110ce:	bf00      	nop
 80110d0:	20010088 	.word	0x20010088
 80110d4:	20010084 	.word	0x20010084
        if (fmt)
        {
            *ptr++ = '\n';
 80110d8:	220a      	movs	r2, #10
 80110da:	1c86      	adds	r6, r0, #2
 80110dc:	7042      	strb	r2, [r0, #1]
        }
        *ptr = 0;
 80110de:	2200      	movs	r2, #0
 80110e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80110e4:	465f      	mov	r7, fp
 80110e6:	7032      	strb	r2, [r6, #0]
        for (i = 0; i < numentries; i++)
 80110e8:	9202      	str	r2, [sp, #8]
        {
            if (fmt)
 80110ea:	46b0      	mov	r8, r6
 80110ec:	b14d      	cbz	r5, 8011102 <print_object.isra.2+0x2fa>
            {
                for (j = 0; j < depth; j++)
 80110ee:	ebc6 0208 	rsb	r2, r6, r8
 80110f2:	9b03      	ldr	r3, [sp, #12]
 80110f4:	4293      	cmp	r3, r2
 80110f6:	dd04      	ble.n	8011102 <print_object.isra.2+0x2fa>
                {
                    *ptr++='\t';
 80110f8:	f04f 0309 	mov.w	r3, #9
 80110fc:	f808 3b01 	strb.w	r3, [r8], #1
 8011100:	e7f5      	b.n	80110ee <print_object.isra.2+0x2e6>
                }
            }
            tmplen = strlen(names[i]);
 8011102:	f8d9 1000 	ldr.w	r1, [r9]
 8011106:	f8cd 9010 	str.w	r9, [sp, #16]
 801110a:	4608      	mov	r0, r1
 801110c:	9105      	str	r1, [sp, #20]
 801110e:	f7ef f8df 	bl	80002d0 <strlen>
            memcpy(ptr, names[i], tmplen);
 8011112:	9905      	ldr	r1, [sp, #20]
                for (j = 0; j < depth; j++)
                {
                    *ptr++='\t';
                }
            }
            tmplen = strlen(names[i]);
 8011114:	4606      	mov	r6, r0
            memcpy(ptr, names[i], tmplen);
 8011116:	4602      	mov	r2, r0
 8011118:	4640      	mov	r0, r8
 801111a:	f000 fb74 	bl	8011806 <memcpy>
            ptr += tmplen;
            *ptr++ = ':';
 801111e:	223a      	movs	r2, #58	; 0x3a
                    *ptr++='\t';
                }
            }
            tmplen = strlen(names[i]);
            memcpy(ptr, names[i], tmplen);
            ptr += tmplen;
 8011120:	eb08 0306 	add.w	r3, r8, r6
            *ptr++ = ':';
 8011124:	f808 2006 	strb.w	r2, [r8, r6]
            if (fmt)
 8011128:	b915      	cbnz	r5, 8011130 <print_object.isra.2+0x328>
                }
            }
            tmplen = strlen(names[i]);
            memcpy(ptr, names[i], tmplen);
            ptr += tmplen;
            *ptr++ = ':';
 801112a:	3601      	adds	r6, #1
 801112c:	44b0      	add	r8, r6
 801112e:	e004      	b.n	801113a <print_object.isra.2+0x332>
            if (fmt)
            {
                *ptr++ = '\t';
 8011130:	f04f 0209 	mov.w	r2, #9
 8011134:	f103 0802 	add.w	r8, r3, #2
 8011138:	705a      	strb	r2, [r3, #1]
            }
            strcpy(ptr, entries[i]);
 801113a:	6839      	ldr	r1, [r7, #0]
 801113c:	4640      	mov	r0, r8
 801113e:	9705      	str	r7, [sp, #20]
 8011140:	f000 fbf2 	bl	8011928 <strcpy>
            ptr += strlen(entries[i]);
 8011144:	6838      	ldr	r0, [r7, #0]
 8011146:	f7ef f8c3 	bl	80002d0 <strlen>
            if (i != (numentries - 1))
 801114a:	9b00      	ldr	r3, [sp, #0]
            if (fmt)
            {
                *ptr++ = '\t';
            }
            strcpy(ptr, entries[i]);
            ptr += strlen(entries[i]);
 801114c:	eb08 0600 	add.w	r6, r8, r0
            if (i != (numentries - 1))
 8011150:	1e5a      	subs	r2, r3, #1
 8011152:	9b02      	ldr	r3, [sp, #8]
 8011154:	429a      	cmp	r2, r3
            {
                *ptr++ = ',';
 8011156:	bf1e      	ittt	ne
 8011158:	222c      	movne	r2, #44	; 0x2c
 801115a:	3601      	addne	r6, #1
 801115c:	f808 2000 	strbne.w	r2, [r8, r0]
            }
            if (fmt)
 8011160:	b11d      	cbz	r5, 801116a <print_object.isra.2+0x362>
            {
                *ptr++ = '\n';
 8011162:	220a      	movs	r2, #10
 8011164:	3601      	adds	r6, #1
 8011166:	f806 2c01 	strb.w	r2, [r6, #-1]
            }
            *ptr = 0;
            cJSON_free(names[i]);
 801116a:	9b04      	ldr	r3, [sp, #16]
            }
            if (fmt)
            {
                *ptr++ = '\n';
            }
            *ptr = 0;
 801116c:	2200      	movs	r2, #0
            cJSON_free(names[i]);
 801116e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80111d4 <print_object.isra.2+0x3cc>
 8011172:	f109 0904 	add.w	r9, r9, #4
            }
            if (fmt)
            {
                *ptr++ = '\n';
            }
            *ptr = 0;
 8011176:	7032      	strb	r2, [r6, #0]
 8011178:	3704      	adds	r7, #4
            cJSON_free(names[i]);
 801117a:	6818      	ldr	r0, [r3, #0]
 801117c:	f8d8 2000 	ldr.w	r2, [r8]
 8011180:	4790      	blx	r2
            cJSON_free(entries[i]);
 8011182:	9b05      	ldr	r3, [sp, #20]
 8011184:	f8d8 2000 	ldr.w	r2, [r8]
 8011188:	6818      	ldr	r0, [r3, #0]
 801118a:	4790      	blx	r2
        if (fmt)
        {
            *ptr++ = '\n';
        }
        *ptr = 0;
        for (i = 0; i < numentries; i++)
 801118c:	9b02      	ldr	r3, [sp, #8]
 801118e:	3301      	adds	r3, #1
 8011190:	9302      	str	r3, [sp, #8]
 8011192:	9a02      	ldr	r2, [sp, #8]
 8011194:	9b00      	ldr	r3, [sp, #0]
 8011196:	4293      	cmp	r3, r2
 8011198:	dca7      	bgt.n	80110ea <print_object.isra.2+0x2e2>
            *ptr = 0;
            cJSON_free(names[i]);
            cJSON_free(entries[i]);
        }

        cJSON_free(names);
 801119a:	f8d8 2000 	ldr.w	r2, [r8]
 801119e:	9801      	ldr	r0, [sp, #4]
 80111a0:	4790      	blx	r2
        cJSON_free(entries);
 80111a2:	f8d8 2000 	ldr.w	r2, [r8]
 80111a6:	4658      	mov	r0, fp
 80111a8:	4790      	blx	r2
        if (fmt)
 80111aa:	b15d      	cbz	r5, 80111c4 <print_object.isra.2+0x3bc>
 80111ac:	4632      	mov	r2, r6
        {
            for (i = 0; i < (depth - 1); i++)
            {
                *ptr++ = '\t';
 80111ae:	2009      	movs	r0, #9

        cJSON_free(names);
        cJSON_free(entries);
        if (fmt)
        {
            for (i = 0; i < (depth - 1); i++)
 80111b0:	1b91      	subs	r1, r2, r6
 80111b2:	458a      	cmp	sl, r1
 80111b4:	dd02      	ble.n	80111bc <print_object.isra.2+0x3b4>
            {
                *ptr++ = '\t';
 80111b6:	f802 0b01 	strb.w	r0, [r2], #1
 80111ba:	e7f9      	b.n	80111b0 <print_object.isra.2+0x3a8>
 80111bc:	f1ba 0f00 	cmp.w	sl, #0
 80111c0:	bfa8      	it	ge
 80111c2:	4456      	addge	r6, sl
            }
        }
        *ptr++ = '}';
 80111c4:	227d      	movs	r2, #125	; 0x7d
 80111c6:	7032      	strb	r2, [r6, #0]
        *ptr++ = '\0';
 80111c8:	2200      	movs	r2, #0
 80111ca:	7072      	strb	r2, [r6, #1]
 80111cc:	4620      	mov	r0, r4
    }

    return out;
}
 80111ce:	b007      	add	sp, #28
 80111d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d4:	20010084 	.word	0x20010084

080111d8 <cJSON_Delete>:
    return node;
}

/* Delete a cJSON structure. */
void cJSON_Delete(cJSON *c)
{
 80111d8:	b570      	push	{r4, r5, r6, lr}
 80111da:	4604      	mov	r4, r0
 80111dc:	4d0e      	ldr	r5, [pc, #56]	; (8011218 <cJSON_Delete+0x40>)
    cJSON *next;
    while (c)
 80111de:	b1d4      	cbz	r4, 8011216 <cJSON_Delete+0x3e>
    {
        next = c->next;
        if (!(c->type & cJSON_IsReference) && c->child)
 80111e0:	68e3      	ldr	r3, [r4, #12]
void cJSON_Delete(cJSON *c)
{
    cJSON *next;
    while (c)
    {
        next = c->next;
 80111e2:	6826      	ldr	r6, [r4, #0]
        if (!(c->type & cJSON_IsReference) && c->child)
 80111e4:	05d9      	lsls	r1, r3, #23
 80111e6:	d403      	bmi.n	80111f0 <cJSON_Delete+0x18>
 80111e8:	68a0      	ldr	r0, [r4, #8]
 80111ea:	b108      	cbz	r0, 80111f0 <cJSON_Delete+0x18>
        {
            cJSON_Delete(c->child);
 80111ec:	f7ff fff4 	bl	80111d8 <cJSON_Delete>
        }
        if (!(c->type & cJSON_IsReference) && c->valuestring)
 80111f0:	68e3      	ldr	r3, [r4, #12]
 80111f2:	05da      	lsls	r2, r3, #23
 80111f4:	d403      	bmi.n	80111fe <cJSON_Delete+0x26>
 80111f6:	6920      	ldr	r0, [r4, #16]
 80111f8:	b108      	cbz	r0, 80111fe <cJSON_Delete+0x26>
        {
            cJSON_free(c->valuestring);
 80111fa:	682b      	ldr	r3, [r5, #0]
 80111fc:	4798      	blx	r3
        }
        if (!(c->type & cJSON_StringIsConst) && c->string)
 80111fe:	68e3      	ldr	r3, [r4, #12]
 8011200:	059b      	lsls	r3, r3, #22
 8011202:	d403      	bmi.n	801120c <cJSON_Delete+0x34>
 8011204:	6a20      	ldr	r0, [r4, #32]
 8011206:	b108      	cbz	r0, 801120c <cJSON_Delete+0x34>
        {
            cJSON_free(c->string);
 8011208:	682b      	ldr	r3, [r5, #0]
 801120a:	4798      	blx	r3
        }
        cJSON_free(c);
 801120c:	4620      	mov	r0, r4
 801120e:	682b      	ldr	r3, [r5, #0]
 8011210:	4798      	blx	r3
        c = next;
 8011212:	4634      	mov	r4, r6
 8011214:	e7e3      	b.n	80111de <cJSON_Delete+0x6>
    }
}
 8011216:	bd70      	pop	{r4, r5, r6, pc}
 8011218:	20010084 	.word	0x20010084

0801121c <cJSON_ParseWithOpts>:
    return in;
}

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value, const char **return_parse_end, int require_null_terminated)
{
 801121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const char *end = 0;
    /* use global error pointer if no specific one was given */
    const char **ep = return_parse_end ? return_parse_end : &global_ep;
 8011220:	4e19      	ldr	r6, [pc, #100]	; (8011288 <cJSON_ParseWithOpts+0x6c>)
    cJSON *c = cJSON_New_Item();
    *ep = 0;
 8011222:	f04f 0800 	mov.w	r8, #0
    return in;
}

/* Parse an object - create a new root, and populate. */
cJSON *cJSON_ParseWithOpts(const char *value, const char **return_parse_end, int require_null_terminated)
{
 8011226:	4605      	mov	r5, r0
 8011228:	4691      	mov	r9, r2
    const char *end = 0;
    /* use global error pointer if no specific one was given */
    const char **ep = return_parse_end ? return_parse_end : &global_ep;
 801122a:	2900      	cmp	r1, #0
 801122c:	bf18      	it	ne
 801122e:	460e      	movne	r6, r1
 8011230:	460f      	mov	r7, r1
    cJSON *c = cJSON_New_Item();
 8011232:	f7ff f8f7 	bl	8010424 <cJSON_New_Item>
    *ep = 0;
    if (!c) /* memory fail */
 8011236:	4604      	mov	r4, r0
{
    const char *end = 0;
    /* use global error pointer if no specific one was given */
    const char **ep = return_parse_end ? return_parse_end : &global_ep;
    cJSON *c = cJSON_New_Item();
    *ep = 0;
 8011238:	f8c6 8000 	str.w	r8, [r6]
    if (!c) /* memory fail */
 801123c:	b300      	cbz	r0, 8011280 <cJSON_ParseWithOpts+0x64>
    {
        return 0;
    }

    end = parse_value(c, skip(value), ep);
 801123e:	4628      	mov	r0, r5
 8011240:	f7ff f8e6 	bl	8010410 <skip>
 8011244:	4632      	mov	r2, r6
 8011246:	4601      	mov	r1, r0
 8011248:	4620      	mov	r0, r4
 801124a:	f7ff fad1 	bl	80107f0 <parse_value>
    if (!end)
 801124e:	4605      	mov	r5, r0
 8011250:	b928      	cbnz	r0, 801125e <cJSON_ParseWithOpts+0x42>
    {
        /* parse failure. ep is set. */
        cJSON_Delete(c);
 8011252:	4620      	mov	r0, r4
 8011254:	f7ff ffc0 	bl	80111d8 <cJSON_Delete>
        return 0;
 8011258:	4628      	mov	r0, r5
 801125a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 801125e:	f1b9 0f00 	cmp.w	r9, #0
 8011262:	d00b      	beq.n	801127c <cJSON_ParseWithOpts+0x60>
    {
        end = skip(end);
 8011264:	f7ff f8d4 	bl	8010410 <skip>
        if (*end)
 8011268:	7803      	ldrb	r3, [r0, #0]
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
    {
        end = skip(end);
 801126a:	4605      	mov	r5, r0
        if (*end)
 801126c:	b133      	cbz	r3, 801127c <cJSON_ParseWithOpts+0x60>
        {
            cJSON_Delete(c);
 801126e:	4620      	mov	r0, r4
 8011270:	f7ff ffb2 	bl	80111d8 <cJSON_Delete>
            *ep = end;
 8011274:	6035      	str	r5, [r6, #0]
            return 0;
 8011276:	4640      	mov	r0, r8
 8011278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
    }
    if (return_parse_end)
 801127c:	b107      	cbz	r7, 8011280 <cJSON_ParseWithOpts+0x64>
    {
        *return_parse_end = end;
 801127e:	603d      	str	r5, [r7, #0]
 8011280:	4620      	mov	r0, r4
    }

    return c;
}
 8011282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011286:	bf00      	nop
 8011288:	20042f68 	.word	0x20042f68

0801128c <cJSON_Parse>:

/* Default options for cJSON_Parse */
cJSON *cJSON_Parse(const char *value)
{
    return cJSON_ParseWithOpts(value, 0, 0);
 801128c:	2200      	movs	r2, #0
 801128e:	4611      	mov	r1, r2
 8011290:	f7ff bfc4 	b.w	801121c <cJSON_ParseWithOpts>

08011294 <cJSON_Print>:
}

/* Render a cJSON item/entity/structure to text. */
char *cJSON_Print(const cJSON *item)
{
    return print_value(item, 0, 1, 0);
 8011294:	2300      	movs	r3, #0
 8011296:	2201      	movs	r2, #1
 8011298:	4619      	mov	r1, r3
 801129a:	f7ff bd4d 	b.w	8010d38 <print_value>

0801129e <cJSON_GetObjectItem>:

    return c;
}

cJSON *cJSON_GetObjectItem(const cJSON *object, const char *string)
{
 801129e:	b538      	push	{r3, r4, r5, lr}
 80112a0:	460d      	mov	r5, r1
    cJSON *c = object ? object->child : 0;
 80112a2:	b140      	cbz	r0, 80112b6 <cJSON_GetObjectItem+0x18>
 80112a4:	6884      	ldr	r4, [r0, #8]
    while (c && cJSON_strcasecmp(c->string, string))
 80112a6:	b13c      	cbz	r4, 80112b8 <cJSON_GetObjectItem+0x1a>
 80112a8:	4629      	mov	r1, r5
 80112aa:	6a20      	ldr	r0, [r4, #32]
 80112ac:	f7fe ff46 	bl	801013c <cJSON_strcasecmp>
 80112b0:	b110      	cbz	r0, 80112b8 <cJSON_GetObjectItem+0x1a>
    {
        c = c->next;
 80112b2:	6824      	ldr	r4, [r4, #0]
 80112b4:	e7f7      	b.n	80112a6 <cJSON_GetObjectItem+0x8>
 80112b6:	4604      	mov	r4, r0
    }
    return c;
}
 80112b8:	4620      	mov	r0, r4
 80112ba:	bd38      	pop	{r3, r4, r5, pc}

080112bc <cJSON_AddItemToArray>:
}

/* Add item to array/object. */
void   cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
    cJSON *c = array->child;
 80112bc:	6883      	ldr	r3, [r0, #8]
    if (!item)
 80112be:	b141      	cbz	r1, 80112d2 <cJSON_AddItemToArray+0x16>
    {
        return;
    }
    if (!c)
 80112c0:	b90b      	cbnz	r3, 80112c6 <cJSON_AddItemToArray+0xa>
    {
        /* list is empty, start new one */
        array->child = item;
 80112c2:	6081      	str	r1, [r0, #8]
 80112c4:	4770      	bx	lr
    }
    else
    {
        /* append to the end */
        while (c && c->next)
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	b10a      	cbz	r2, 80112ce <cJSON_AddItemToArray+0x12>
 80112ca:	4613      	mov	r3, r2
 80112cc:	e7fb      	b.n	80112c6 <cJSON_AddItemToArray+0xa>
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
    prev->next = item;
 80112ce:	6019      	str	r1, [r3, #0]
    item->prev = prev;
 80112d0:	604b      	str	r3, [r1, #4]
 80112d2:	4770      	bx	lr

080112d4 <cJSON_AddItemToObject>:
        suffix_object(c, item);
    }
}

void   cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
{
 80112d4:	b570      	push	{r4, r5, r6, lr}
 80112d6:	4605      	mov	r5, r0
 80112d8:	460e      	mov	r6, r1
    if (!item)
 80112da:	4614      	mov	r4, r2
 80112dc:	b172      	cbz	r2, 80112fc <cJSON_AddItemToObject+0x28>
    {
        return;
    }

    /* free old key and set new one */
    if (item->string)
 80112de:	6a10      	ldr	r0, [r2, #32]
 80112e0:	b110      	cbz	r0, 80112e8 <cJSON_AddItemToObject+0x14>
    {
        cJSON_free(item->string);
 80112e2:	4b07      	ldr	r3, [pc, #28]	; (8011300 <cJSON_AddItemToObject+0x2c>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	4798      	blx	r3
    }
    item->string = cJSON_strdup(string);
 80112e8:	4630      	mov	r0, r6
 80112ea:	f7ff f8e5 	bl	80104b8 <cJSON_strdup>

    cJSON_AddItemToArray(object,item);
 80112ee:	4621      	mov	r1, r4
    /* free old key and set new one */
    if (item->string)
    {
        cJSON_free(item->string);
    }
    item->string = cJSON_strdup(string);
 80112f0:	6220      	str	r0, [r4, #32]

    cJSON_AddItemToArray(object,item);
 80112f2:	4628      	mov	r0, r5
}
 80112f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    {
        cJSON_free(item->string);
    }
    item->string = cJSON_strdup(string);

    cJSON_AddItemToArray(object,item);
 80112f8:	f7ff bfe0 	b.w	80112bc <cJSON_AddItemToArray>
 80112fc:	bd70      	pop	{r4, r5, r6, pc}
 80112fe:	bf00      	nop
 8011300:	20010084 	.word	0x20010084

08011304 <cJSON_CreateNumber>:

    return item;
}

cJSON *cJSON_CreateNumber(double num)
{
 8011304:	b513      	push	{r0, r1, r4, lr}
 8011306:	ed8d 0b00 	vstr	d0, [sp]
    cJSON *item = cJSON_New_Item();
 801130a:	f7ff f88b 	bl	8010424 <cJSON_New_Item>
    if(item)
 801130e:	4604      	mov	r4, r0
 8011310:	b150      	cbz	r0, 8011328 <cJSON_CreateNumber+0x24>
    {
        item->type = cJSON_Number;
 8011312:	2308      	movs	r3, #8
        item->valuedouble = num;
 8011314:	ed9d 0b00 	vldr	d0, [sp]
cJSON *cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item();
    if(item)
    {
        item->type = cJSON_Number;
 8011318:	60c3      	str	r3, [r0, #12]
        item->valuedouble = num;
 801131a:	ed80 0b06 	vstr	d0, [r0, #24]
        item->valueint = (int)num;
 801131e:	ec51 0b10 	vmov	r0, r1, d0
 8011322:	f7ef fc95 	bl	8000c50 <__aeabi_d2iz>
 8011326:	6160      	str	r0, [r4, #20]
    }

    return item;
}
 8011328:	4620      	mov	r0, r4
 801132a:	b002      	add	sp, #8
 801132c:	bd10      	pop	{r4, pc}

0801132e <cJSON_CreateObject>:

    return item;
}

cJSON *cJSON_CreateObject(void)
{
 801132e:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item();
 8011330:	f7ff f878 	bl	8010424 <cJSON_New_Item>
    if (item)
 8011334:	b108      	cbz	r0, 801133a <cJSON_CreateObject+0xc>
    {
        item->type = cJSON_Object;
 8011336:	2340      	movs	r3, #64	; 0x40
 8011338:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
 801133a:	bd08      	pop	{r3, pc}

0801133c <__libc_init_array>:
 801133c:	b570      	push	{r4, r5, r6, lr}
 801133e:	4b0e      	ldr	r3, [pc, #56]	; (8011378 <__libc_init_array+0x3c>)
 8011340:	4c0e      	ldr	r4, [pc, #56]	; (801137c <__libc_init_array+0x40>)
 8011342:	1ae4      	subs	r4, r4, r3
 8011344:	10a4      	asrs	r4, r4, #2
 8011346:	2500      	movs	r5, #0
 8011348:	461e      	mov	r6, r3
 801134a:	42a5      	cmp	r5, r4
 801134c:	d004      	beq.n	8011358 <__libc_init_array+0x1c>
 801134e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011352:	4798      	blx	r3
 8011354:	3501      	adds	r5, #1
 8011356:	e7f8      	b.n	801134a <__libc_init_array+0xe>
 8011358:	f004 f906 	bl	8015568 <_init>
 801135c:	4c08      	ldr	r4, [pc, #32]	; (8011380 <__libc_init_array+0x44>)
 801135e:	4b09      	ldr	r3, [pc, #36]	; (8011384 <__libc_init_array+0x48>)
 8011360:	1ae4      	subs	r4, r4, r3
 8011362:	10a4      	asrs	r4, r4, #2
 8011364:	2500      	movs	r5, #0
 8011366:	461e      	mov	r6, r3
 8011368:	42a5      	cmp	r5, r4
 801136a:	d004      	beq.n	8011376 <__libc_init_array+0x3a>
 801136c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011370:	4798      	blx	r3
 8011372:	3501      	adds	r5, #1
 8011374:	e7f8      	b.n	8011368 <__libc_init_array+0x2c>
 8011376:	bd70      	pop	{r4, r5, r6, pc}
 8011378:	0802d440 	.word	0x0802d440
 801137c:	0802d440 	.word	0x0802d440
 8011380:	0802d444 	.word	0x0802d444
 8011384:	0802d440 	.word	0x0802d440

08011388 <malloc>:
 8011388:	4b02      	ldr	r3, [pc, #8]	; (8011394 <malloc+0xc>)
 801138a:	4601      	mov	r1, r0
 801138c:	6818      	ldr	r0, [r3, #0]
 801138e:	f000 b80b 	b.w	80113a8 <_malloc_r>
 8011392:	bf00      	nop
 8011394:	20010590 	.word	0x20010590

08011398 <free>:
 8011398:	4b02      	ldr	r3, [pc, #8]	; (80113a4 <free+0xc>)
 801139a:	4601      	mov	r1, r0
 801139c:	6818      	ldr	r0, [r3, #0]
 801139e:	f002 b945 	b.w	801362c <_free_r>
 80113a2:	bf00      	nop
 80113a4:	20010590 	.word	0x20010590

080113a8 <_malloc_r>:
 80113a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ac:	f101 040b 	add.w	r4, r1, #11
 80113b0:	2c16      	cmp	r4, #22
 80113b2:	b085      	sub	sp, #20
 80113b4:	4681      	mov	r9, r0
 80113b6:	d903      	bls.n	80113c0 <_malloc_r+0x18>
 80113b8:	f034 0407 	bics.w	r4, r4, #7
 80113bc:	d501      	bpl.n	80113c2 <_malloc_r+0x1a>
 80113be:	e002      	b.n	80113c6 <_malloc_r+0x1e>
 80113c0:	2410      	movs	r4, #16
 80113c2:	428c      	cmp	r4, r1
 80113c4:	d203      	bcs.n	80113ce <_malloc_r+0x26>
 80113c6:	230c      	movs	r3, #12
 80113c8:	f8c9 3000 	str.w	r3, [r9]
 80113cc:	e1ea      	b.n	80117a4 <_malloc_r+0x3fc>
 80113ce:	4648      	mov	r0, r9
 80113d0:	f000 fa2c 	bl	801182c <__malloc_lock>
 80113d4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80113d8:	4d9e      	ldr	r5, [pc, #632]	; (8011654 <_malloc_r+0x2ac>)
 80113da:	d217      	bcs.n	801140c <_malloc_r+0x64>
 80113dc:	f104 0208 	add.w	r2, r4, #8
 80113e0:	442a      	add	r2, r5
 80113e2:	f1a2 0108 	sub.w	r1, r2, #8
 80113e6:	6856      	ldr	r6, [r2, #4]
 80113e8:	428e      	cmp	r6, r1
 80113ea:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80113ee:	d102      	bne.n	80113f6 <_malloc_r+0x4e>
 80113f0:	68d6      	ldr	r6, [r2, #12]
 80113f2:	42b2      	cmp	r2, r6
 80113f4:	d008      	beq.n	8011408 <_malloc_r+0x60>
 80113f6:	6873      	ldr	r3, [r6, #4]
 80113f8:	68f2      	ldr	r2, [r6, #12]
 80113fa:	68b1      	ldr	r1, [r6, #8]
 80113fc:	f023 0303 	bic.w	r3, r3, #3
 8011400:	60ca      	str	r2, [r1, #12]
 8011402:	4433      	add	r3, r6
 8011404:	6091      	str	r1, [r2, #8]
 8011406:	e02f      	b.n	8011468 <_malloc_r+0xc0>
 8011408:	3302      	adds	r3, #2
 801140a:	e03d      	b.n	8011488 <_malloc_r+0xe0>
 801140c:	0a63      	lsrs	r3, r4, #9
 801140e:	d01a      	beq.n	8011446 <_malloc_r+0x9e>
 8011410:	2b04      	cmp	r3, #4
 8011412:	d802      	bhi.n	801141a <_malloc_r+0x72>
 8011414:	09a3      	lsrs	r3, r4, #6
 8011416:	3338      	adds	r3, #56	; 0x38
 8011418:	e018      	b.n	801144c <_malloc_r+0xa4>
 801141a:	2b14      	cmp	r3, #20
 801141c:	d801      	bhi.n	8011422 <_malloc_r+0x7a>
 801141e:	335b      	adds	r3, #91	; 0x5b
 8011420:	e014      	b.n	801144c <_malloc_r+0xa4>
 8011422:	2b54      	cmp	r3, #84	; 0x54
 8011424:	d802      	bhi.n	801142c <_malloc_r+0x84>
 8011426:	0b23      	lsrs	r3, r4, #12
 8011428:	336e      	adds	r3, #110	; 0x6e
 801142a:	e00f      	b.n	801144c <_malloc_r+0xa4>
 801142c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8011430:	d802      	bhi.n	8011438 <_malloc_r+0x90>
 8011432:	0be3      	lsrs	r3, r4, #15
 8011434:	3377      	adds	r3, #119	; 0x77
 8011436:	e009      	b.n	801144c <_malloc_r+0xa4>
 8011438:	f240 5254 	movw	r2, #1364	; 0x554
 801143c:	4293      	cmp	r3, r2
 801143e:	d804      	bhi.n	801144a <_malloc_r+0xa2>
 8011440:	0ca3      	lsrs	r3, r4, #18
 8011442:	337c      	adds	r3, #124	; 0x7c
 8011444:	e002      	b.n	801144c <_malloc_r+0xa4>
 8011446:	233f      	movs	r3, #63	; 0x3f
 8011448:	e000      	b.n	801144c <_malloc_r+0xa4>
 801144a:	237e      	movs	r3, #126	; 0x7e
 801144c:	1c5a      	adds	r2, r3, #1
 801144e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8011452:	f1a2 0008 	sub.w	r0, r2, #8
 8011456:	6856      	ldr	r6, [r2, #4]
 8011458:	e00c      	b.n	8011474 <_malloc_r+0xcc>
 801145a:	2900      	cmp	r1, #0
 801145c:	68f1      	ldr	r1, [r6, #12]
 801145e:	db08      	blt.n	8011472 <_malloc_r+0xca>
 8011460:	68b3      	ldr	r3, [r6, #8]
 8011462:	60d9      	str	r1, [r3, #12]
 8011464:	608b      	str	r3, [r1, #8]
 8011466:	18b3      	adds	r3, r6, r2
 8011468:	685a      	ldr	r2, [r3, #4]
 801146a:	f042 0201 	orr.w	r2, r2, #1
 801146e:	605a      	str	r2, [r3, #4]
 8011470:	e1a3      	b.n	80117ba <_malloc_r+0x412>
 8011472:	460e      	mov	r6, r1
 8011474:	4286      	cmp	r6, r0
 8011476:	d006      	beq.n	8011486 <_malloc_r+0xde>
 8011478:	6872      	ldr	r2, [r6, #4]
 801147a:	f022 0203 	bic.w	r2, r2, #3
 801147e:	1b11      	subs	r1, r2, r4
 8011480:	290f      	cmp	r1, #15
 8011482:	ddea      	ble.n	801145a <_malloc_r+0xb2>
 8011484:	3b01      	subs	r3, #1
 8011486:	3301      	adds	r3, #1
 8011488:	4a72      	ldr	r2, [pc, #456]	; (8011654 <_malloc_r+0x2ac>)
 801148a:	692e      	ldr	r6, [r5, #16]
 801148c:	f102 0708 	add.w	r7, r2, #8
 8011490:	42be      	cmp	r6, r7
 8011492:	4639      	mov	r1, r7
 8011494:	d079      	beq.n	801158a <_malloc_r+0x1e2>
 8011496:	6870      	ldr	r0, [r6, #4]
 8011498:	f020 0003 	bic.w	r0, r0, #3
 801149c:	ebc4 0e00 	rsb	lr, r4, r0
 80114a0:	f1be 0f0f 	cmp.w	lr, #15
 80114a4:	dd0d      	ble.n	80114c2 <_malloc_r+0x11a>
 80114a6:	1933      	adds	r3, r6, r4
 80114a8:	f044 0401 	orr.w	r4, r4, #1
 80114ac:	6074      	str	r4, [r6, #4]
 80114ae:	6153      	str	r3, [r2, #20]
 80114b0:	6113      	str	r3, [r2, #16]
 80114b2:	f04e 0201 	orr.w	r2, lr, #1
 80114b6:	60df      	str	r7, [r3, #12]
 80114b8:	609f      	str	r7, [r3, #8]
 80114ba:	605a      	str	r2, [r3, #4]
 80114bc:	f843 e00e 	str.w	lr, [r3, lr]
 80114c0:	e17b      	b.n	80117ba <_malloc_r+0x412>
 80114c2:	f1be 0f00 	cmp.w	lr, #0
 80114c6:	6157      	str	r7, [r2, #20]
 80114c8:	6117      	str	r7, [r2, #16]
 80114ca:	db05      	blt.n	80114d8 <_malloc_r+0x130>
 80114cc:	4430      	add	r0, r6
 80114ce:	6843      	ldr	r3, [r0, #4]
 80114d0:	f043 0301 	orr.w	r3, r3, #1
 80114d4:	6043      	str	r3, [r0, #4]
 80114d6:	e170      	b.n	80117ba <_malloc_r+0x412>
 80114d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80114dc:	d215      	bcs.n	801150a <_malloc_r+0x162>
 80114de:	08c0      	lsrs	r0, r0, #3
 80114e0:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80114e4:	2701      	movs	r7, #1
 80114e6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80114ea:	6857      	ldr	r7, [r2, #4]
 80114ec:	3001      	adds	r0, #1
 80114ee:	ea4e 0707 	orr.w	r7, lr, r7
 80114f2:	6057      	str	r7, [r2, #4]
 80114f4:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80114f8:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 80114fc:	f8c6 e008 	str.w	lr, [r6, #8]
 8011500:	3f08      	subs	r7, #8
 8011502:	60f7      	str	r7, [r6, #12]
 8011504:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8011508:	e03d      	b.n	8011586 <_malloc_r+0x1de>
 801150a:	0a42      	lsrs	r2, r0, #9
 801150c:	2a04      	cmp	r2, #4
 801150e:	d802      	bhi.n	8011516 <_malloc_r+0x16e>
 8011510:	0982      	lsrs	r2, r0, #6
 8011512:	3238      	adds	r2, #56	; 0x38
 8011514:	e015      	b.n	8011542 <_malloc_r+0x19a>
 8011516:	2a14      	cmp	r2, #20
 8011518:	d801      	bhi.n	801151e <_malloc_r+0x176>
 801151a:	325b      	adds	r2, #91	; 0x5b
 801151c:	e011      	b.n	8011542 <_malloc_r+0x19a>
 801151e:	2a54      	cmp	r2, #84	; 0x54
 8011520:	d802      	bhi.n	8011528 <_malloc_r+0x180>
 8011522:	0b02      	lsrs	r2, r0, #12
 8011524:	326e      	adds	r2, #110	; 0x6e
 8011526:	e00c      	b.n	8011542 <_malloc_r+0x19a>
 8011528:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 801152c:	d802      	bhi.n	8011534 <_malloc_r+0x18c>
 801152e:	0bc2      	lsrs	r2, r0, #15
 8011530:	3277      	adds	r2, #119	; 0x77
 8011532:	e006      	b.n	8011542 <_malloc_r+0x19a>
 8011534:	f240 5754 	movw	r7, #1364	; 0x554
 8011538:	42ba      	cmp	r2, r7
 801153a:	bf9a      	itte	ls
 801153c:	0c82      	lsrls	r2, r0, #18
 801153e:	327c      	addls	r2, #124	; 0x7c
 8011540:	227e      	movhi	r2, #126	; 0x7e
 8011542:	1c57      	adds	r7, r2, #1
 8011544:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8011548:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 801154c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8011654 <_malloc_r+0x2ac>
 8011550:	45be      	cmp	lr, r7
 8011552:	d10d      	bne.n	8011570 <_malloc_r+0x1c8>
 8011554:	2001      	movs	r0, #1
 8011556:	1092      	asrs	r2, r2, #2
 8011558:	fa00 f202 	lsl.w	r2, r0, r2
 801155c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8011560:	4310      	orrs	r0, r2
 8011562:	f8cc 0004 	str.w	r0, [ip, #4]
 8011566:	4672      	mov	r2, lr
 8011568:	e009      	b.n	801157e <_malloc_r+0x1d6>
 801156a:	68bf      	ldr	r7, [r7, #8]
 801156c:	45be      	cmp	lr, r7
 801156e:	d004      	beq.n	801157a <_malloc_r+0x1d2>
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	f022 0203 	bic.w	r2, r2, #3
 8011576:	4290      	cmp	r0, r2
 8011578:	d3f7      	bcc.n	801156a <_malloc_r+0x1c2>
 801157a:	68fa      	ldr	r2, [r7, #12]
 801157c:	46be      	mov	lr, r7
 801157e:	60f2      	str	r2, [r6, #12]
 8011580:	f8c6 e008 	str.w	lr, [r6, #8]
 8011584:	6096      	str	r6, [r2, #8]
 8011586:	f8ce 600c 	str.w	r6, [lr, #12]
 801158a:	2001      	movs	r0, #1
 801158c:	109a      	asrs	r2, r3, #2
 801158e:	fa00 f202 	lsl.w	r2, r0, r2
 8011592:	6868      	ldr	r0, [r5, #4]
 8011594:	4282      	cmp	r2, r0
 8011596:	d85f      	bhi.n	8011658 <_malloc_r+0x2b0>
 8011598:	4202      	tst	r2, r0
 801159a:	d106      	bne.n	80115aa <_malloc_r+0x202>
 801159c:	f023 0303 	bic.w	r3, r3, #3
 80115a0:	0052      	lsls	r2, r2, #1
 80115a2:	4202      	tst	r2, r0
 80115a4:	f103 0304 	add.w	r3, r3, #4
 80115a8:	d0fa      	beq.n	80115a0 <_malloc_r+0x1f8>
 80115aa:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80115ae:	46c2      	mov	sl, r8
 80115b0:	469c      	mov	ip, r3
 80115b2:	f8da 600c 	ldr.w	r6, [sl, #12]
 80115b6:	4556      	cmp	r6, sl
 80115b8:	d02c      	beq.n	8011614 <_malloc_r+0x26c>
 80115ba:	6870      	ldr	r0, [r6, #4]
 80115bc:	68f7      	ldr	r7, [r6, #12]
 80115be:	f020 0003 	bic.w	r0, r0, #3
 80115c2:	ebc4 0e00 	rsb	lr, r4, r0
 80115c6:	f1be 0f0f 	cmp.w	lr, #15
 80115ca:	dd11      	ble.n	80115f0 <_malloc_r+0x248>
 80115cc:	1933      	adds	r3, r6, r4
 80115ce:	f044 0401 	orr.w	r4, r4, #1
 80115d2:	6074      	str	r4, [r6, #4]
 80115d4:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80115d8:	60d7      	str	r7, [r2, #12]
 80115da:	60ba      	str	r2, [r7, #8]
 80115dc:	f04e 0201 	orr.w	r2, lr, #1
 80115e0:	616b      	str	r3, [r5, #20]
 80115e2:	612b      	str	r3, [r5, #16]
 80115e4:	60d9      	str	r1, [r3, #12]
 80115e6:	6099      	str	r1, [r3, #8]
 80115e8:	605a      	str	r2, [r3, #4]
 80115ea:	f843 e00e 	str.w	lr, [r3, lr]
 80115ee:	e00b      	b.n	8011608 <_malloc_r+0x260>
 80115f0:	f1be 0f00 	cmp.w	lr, #0
 80115f4:	db0c      	blt.n	8011610 <_malloc_r+0x268>
 80115f6:	1833      	adds	r3, r6, r0
 80115f8:	685a      	ldr	r2, [r3, #4]
 80115fa:	f042 0201 	orr.w	r2, r2, #1
 80115fe:	605a      	str	r2, [r3, #4]
 8011600:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8011604:	60df      	str	r7, [r3, #12]
 8011606:	60bb      	str	r3, [r7, #8]
 8011608:	4648      	mov	r0, r9
 801160a:	f000 f910 	bl	801182e <__malloc_unlock>
 801160e:	e0d8      	b.n	80117c2 <_malloc_r+0x41a>
 8011610:	463e      	mov	r6, r7
 8011612:	e7d0      	b.n	80115b6 <_malloc_r+0x20e>
 8011614:	f10c 0c01 	add.w	ip, ip, #1
 8011618:	f01c 0f03 	tst.w	ip, #3
 801161c:	f10a 0a08 	add.w	sl, sl, #8
 8011620:	d1c7      	bne.n	80115b2 <_malloc_r+0x20a>
 8011622:	0798      	lsls	r0, r3, #30
 8011624:	d104      	bne.n	8011630 <_malloc_r+0x288>
 8011626:	686b      	ldr	r3, [r5, #4]
 8011628:	ea23 0302 	bic.w	r3, r3, r2
 801162c:	606b      	str	r3, [r5, #4]
 801162e:	e005      	b.n	801163c <_malloc_r+0x294>
 8011630:	f858 0908 	ldr.w	r0, [r8], #-8
 8011634:	4580      	cmp	r8, r0
 8011636:	f103 33ff 	add.w	r3, r3, #4294967295
 801163a:	d0f2      	beq.n	8011622 <_malloc_r+0x27a>
 801163c:	6868      	ldr	r0, [r5, #4]
 801163e:	0052      	lsls	r2, r2, #1
 8011640:	4282      	cmp	r2, r0
 8011642:	d809      	bhi.n	8011658 <_malloc_r+0x2b0>
 8011644:	b142      	cbz	r2, 8011658 <_malloc_r+0x2b0>
 8011646:	4663      	mov	r3, ip
 8011648:	4202      	tst	r2, r0
 801164a:	d1ae      	bne.n	80115aa <_malloc_r+0x202>
 801164c:	3304      	adds	r3, #4
 801164e:	0052      	lsls	r2, r2, #1
 8011650:	e7fa      	b.n	8011648 <_malloc_r+0x2a0>
 8011652:	bf00      	nop
 8011654:	20010090 	.word	0x20010090
 8011658:	f8d5 b008 	ldr.w	fp, [r5, #8]
 801165c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8011660:	f026 0603 	bic.w	r6, r6, #3
 8011664:	42b4      	cmp	r4, r6
 8011666:	d803      	bhi.n	8011670 <_malloc_r+0x2c8>
 8011668:	1b33      	subs	r3, r6, r4
 801166a:	2b0f      	cmp	r3, #15
 801166c:	f300 809c 	bgt.w	80117a8 <_malloc_r+0x400>
 8011670:	4a56      	ldr	r2, [pc, #344]	; (80117cc <_malloc_r+0x424>)
 8011672:	4957      	ldr	r1, [pc, #348]	; (80117d0 <_malloc_r+0x428>)
 8011674:	6812      	ldr	r2, [r2, #0]
 8011676:	6808      	ldr	r0, [r1, #0]
 8011678:	9101      	str	r1, [sp, #4]
 801167a:	f102 0810 	add.w	r8, r2, #16
 801167e:	4a55      	ldr	r2, [pc, #340]	; (80117d4 <_malloc_r+0x42c>)
 8011680:	9203      	str	r2, [sp, #12]
 8011682:	3001      	adds	r0, #1
 8011684:	bf18      	it	ne
 8011686:	f102 31ff 	addne.w	r1, r2, #4294967295
 801168a:	44a0      	add	r8, r4
 801168c:	bf1e      	ittt	ne
 801168e:	4488      	addne	r8, r1
 8011690:	4251      	negne	r1, r2
 8011692:	ea01 0808 	andne.w	r8, r1, r8
 8011696:	eb0b 0306 	add.w	r3, fp, r6
 801169a:	4641      	mov	r1, r8
 801169c:	4648      	mov	r0, r9
 801169e:	9302      	str	r3, [sp, #8]
 80116a0:	f000 f900 	bl	80118a4 <_sbrk_r>
 80116a4:	1c42      	adds	r2, r0, #1
 80116a6:	4607      	mov	r7, r0
 80116a8:	d06f      	beq.n	801178a <_malloc_r+0x3e2>
 80116aa:	9b02      	ldr	r3, [sp, #8]
 80116ac:	9a03      	ldr	r2, [sp, #12]
 80116ae:	4283      	cmp	r3, r0
 80116b0:	d901      	bls.n	80116b6 <_malloc_r+0x30e>
 80116b2:	45ab      	cmp	fp, r5
 80116b4:	d169      	bne.n	801178a <_malloc_r+0x3e2>
 80116b6:	f8df a128 	ldr.w	sl, [pc, #296]	; 80117e0 <_malloc_r+0x438>
 80116ba:	f8df c128 	ldr.w	ip, [pc, #296]	; 80117e4 <_malloc_r+0x43c>
 80116be:	f8da 0000 	ldr.w	r0, [sl]
 80116c2:	42bb      	cmp	r3, r7
 80116c4:	4440      	add	r0, r8
 80116c6:	f8ca 0000 	str.w	r0, [sl]
 80116ca:	d108      	bne.n	80116de <_malloc_r+0x336>
 80116cc:	ea13 0f0c 	tst.w	r3, ip
 80116d0:	d105      	bne.n	80116de <_malloc_r+0x336>
 80116d2:	68ab      	ldr	r3, [r5, #8]
 80116d4:	4446      	add	r6, r8
 80116d6:	f046 0601 	orr.w	r6, r6, #1
 80116da:	605e      	str	r6, [r3, #4]
 80116dc:	e049      	b.n	8011772 <_malloc_r+0x3ca>
 80116de:	9901      	ldr	r1, [sp, #4]
 80116e0:	f8d1 e000 	ldr.w	lr, [r1]
 80116e4:	f1be 3fff 	cmp.w	lr, #4294967295
 80116e8:	bf15      	itete	ne
 80116ea:	1afb      	subne	r3, r7, r3
 80116ec:	4b38      	ldreq	r3, [pc, #224]	; (80117d0 <_malloc_r+0x428>)
 80116ee:	181b      	addne	r3, r3, r0
 80116f0:	601f      	streq	r7, [r3, #0]
 80116f2:	bf18      	it	ne
 80116f4:	f8ca 3000 	strne.w	r3, [sl]
 80116f8:	f017 0307 	ands.w	r3, r7, #7
 80116fc:	bf1c      	itt	ne
 80116fe:	f1c3 0308 	rsbne	r3, r3, #8
 8011702:	18ff      	addne	r7, r7, r3
 8011704:	44b8      	add	r8, r7
 8011706:	441a      	add	r2, r3
 8011708:	ea08 080c 	and.w	r8, r8, ip
 801170c:	ebc8 0802 	rsb	r8, r8, r2
 8011710:	4641      	mov	r1, r8
 8011712:	4648      	mov	r0, r9
 8011714:	f000 f8c6 	bl	80118a4 <_sbrk_r>
 8011718:	1c43      	adds	r3, r0, #1
 801171a:	bf04      	itt	eq
 801171c:	4638      	moveq	r0, r7
 801171e:	f04f 0800 	moveq.w	r8, #0
 8011722:	f8da 3000 	ldr.w	r3, [sl]
 8011726:	60af      	str	r7, [r5, #8]
 8011728:	1bc2      	subs	r2, r0, r7
 801172a:	4442      	add	r2, r8
 801172c:	4443      	add	r3, r8
 801172e:	f042 0201 	orr.w	r2, r2, #1
 8011732:	45ab      	cmp	fp, r5
 8011734:	f8ca 3000 	str.w	r3, [sl]
 8011738:	607a      	str	r2, [r7, #4]
 801173a:	d01a      	beq.n	8011772 <_malloc_r+0x3ca>
 801173c:	2e0f      	cmp	r6, #15
 801173e:	d802      	bhi.n	8011746 <_malloc_r+0x39e>
 8011740:	2301      	movs	r3, #1
 8011742:	607b      	str	r3, [r7, #4]
 8011744:	e021      	b.n	801178a <_malloc_r+0x3e2>
 8011746:	f8db 3004 	ldr.w	r3, [fp, #4]
 801174a:	3e0c      	subs	r6, #12
 801174c:	f026 0607 	bic.w	r6, r6, #7
 8011750:	f003 0301 	and.w	r3, r3, #1
 8011754:	4333      	orrs	r3, r6
 8011756:	f8cb 3004 	str.w	r3, [fp, #4]
 801175a:	eb0b 0306 	add.w	r3, fp, r6
 801175e:	2205      	movs	r2, #5
 8011760:	2e0f      	cmp	r6, #15
 8011762:	605a      	str	r2, [r3, #4]
 8011764:	609a      	str	r2, [r3, #8]
 8011766:	d904      	bls.n	8011772 <_malloc_r+0x3ca>
 8011768:	f10b 0108 	add.w	r1, fp, #8
 801176c:	4648      	mov	r0, r9
 801176e:	f001 ff5d 	bl	801362c <_free_r>
 8011772:	4a19      	ldr	r2, [pc, #100]	; (80117d8 <_malloc_r+0x430>)
 8011774:	f8da 3000 	ldr.w	r3, [sl]
 8011778:	6811      	ldr	r1, [r2, #0]
 801177a:	428b      	cmp	r3, r1
 801177c:	bf88      	it	hi
 801177e:	6013      	strhi	r3, [r2, #0]
 8011780:	4a16      	ldr	r2, [pc, #88]	; (80117dc <_malloc_r+0x434>)
 8011782:	6811      	ldr	r1, [r2, #0]
 8011784:	428b      	cmp	r3, r1
 8011786:	bf88      	it	hi
 8011788:	6013      	strhi	r3, [r2, #0]
 801178a:	68ab      	ldr	r3, [r5, #8]
 801178c:	685a      	ldr	r2, [r3, #4]
 801178e:	f022 0203 	bic.w	r2, r2, #3
 8011792:	4294      	cmp	r4, r2
 8011794:	eba2 0304 	sub.w	r3, r2, r4
 8011798:	d801      	bhi.n	801179e <_malloc_r+0x3f6>
 801179a:	2b0f      	cmp	r3, #15
 801179c:	dc04      	bgt.n	80117a8 <_malloc_r+0x400>
 801179e:	4648      	mov	r0, r9
 80117a0:	f000 f845 	bl	801182e <__malloc_unlock>
 80117a4:	2600      	movs	r6, #0
 80117a6:	e00c      	b.n	80117c2 <_malloc_r+0x41a>
 80117a8:	68ae      	ldr	r6, [r5, #8]
 80117aa:	f044 0201 	orr.w	r2, r4, #1
 80117ae:	4434      	add	r4, r6
 80117b0:	f043 0301 	orr.w	r3, r3, #1
 80117b4:	6072      	str	r2, [r6, #4]
 80117b6:	60ac      	str	r4, [r5, #8]
 80117b8:	6063      	str	r3, [r4, #4]
 80117ba:	4648      	mov	r0, r9
 80117bc:	f000 f837 	bl	801182e <__malloc_unlock>
 80117c0:	3608      	adds	r6, #8
 80117c2:	4630      	mov	r0, r6
 80117c4:	b005      	add	sp, #20
 80117c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ca:	bf00      	nop
 80117cc:	20042f74 	.word	0x20042f74
 80117d0:	2001049c 	.word	0x2001049c
 80117d4:	00000080 	.word	0x00000080
 80117d8:	20042f70 	.word	0x20042f70
 80117dc:	20042f6c 	.word	0x20042f6c
 80117e0:	20042f78 	.word	0x20042f78
 80117e4:	0000007f 	.word	0x0000007f

080117e8 <memcmp>:
 80117e8:	b510      	push	{r4, lr}
 80117ea:	3901      	subs	r1, #1
 80117ec:	4402      	add	r2, r0
 80117ee:	4290      	cmp	r0, r2
 80117f0:	d007      	beq.n	8011802 <memcmp+0x1a>
 80117f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80117f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80117fa:	42a3      	cmp	r3, r4
 80117fc:	d0f7      	beq.n	80117ee <memcmp+0x6>
 80117fe:	1b18      	subs	r0, r3, r4
 8011800:	bd10      	pop	{r4, pc}
 8011802:	2000      	movs	r0, #0
 8011804:	bd10      	pop	{r4, pc}

08011806 <memcpy>:
 8011806:	b510      	push	{r4, lr}
 8011808:	1e43      	subs	r3, r0, #1
 801180a:	440a      	add	r2, r1
 801180c:	4291      	cmp	r1, r2
 801180e:	d004      	beq.n	801181a <memcpy+0x14>
 8011810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011818:	e7f8      	b.n	801180c <memcpy+0x6>
 801181a:	bd10      	pop	{r4, pc}

0801181c <memset>:
 801181c:	4402      	add	r2, r0
 801181e:	4603      	mov	r3, r0
 8011820:	4293      	cmp	r3, r2
 8011822:	d002      	beq.n	801182a <memset+0xe>
 8011824:	f803 1b01 	strb.w	r1, [r3], #1
 8011828:	e7fa      	b.n	8011820 <memset+0x4>
 801182a:	4770      	bx	lr

0801182c <__malloc_lock>:
 801182c:	4770      	bx	lr

0801182e <__malloc_unlock>:
 801182e:	4770      	bx	lr

08011830 <rand>:
 8011830:	4b19      	ldr	r3, [pc, #100]	; (8011898 <rand+0x68>)
 8011832:	b510      	push	{r4, lr}
 8011834:	681c      	ldr	r4, [r3, #0]
 8011836:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011838:	b9d3      	cbnz	r3, 8011870 <rand+0x40>
 801183a:	2018      	movs	r0, #24
 801183c:	f7ff fda4 	bl	8011388 <malloc>
 8011840:	f243 330e 	movw	r3, #13070	; 0x330e
 8011844:	63a0      	str	r0, [r4, #56]	; 0x38
 8011846:	8003      	strh	r3, [r0, #0]
 8011848:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 801184c:	8043      	strh	r3, [r0, #2]
 801184e:	f241 2334 	movw	r3, #4660	; 0x1234
 8011852:	8083      	strh	r3, [r0, #4]
 8011854:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8011858:	80c3      	strh	r3, [r0, #6]
 801185a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 801185e:	8103      	strh	r3, [r0, #8]
 8011860:	2305      	movs	r3, #5
 8011862:	8143      	strh	r3, [r0, #10]
 8011864:	230b      	movs	r3, #11
 8011866:	8183      	strh	r3, [r0, #12]
 8011868:	2201      	movs	r2, #1
 801186a:	2300      	movs	r3, #0
 801186c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011870:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011872:	4c0a      	ldr	r4, [pc, #40]	; (801189c <rand+0x6c>)
 8011874:	690b      	ldr	r3, [r1, #16]
 8011876:	6948      	ldr	r0, [r1, #20]
 8011878:	4a09      	ldr	r2, [pc, #36]	; (80118a0 <rand+0x70>)
 801187a:	435c      	muls	r4, r3
 801187c:	fb02 4000 	mla	r0, r2, r0, r4
 8011880:	fba3 2302 	umull	r2, r3, r3, r2
 8011884:	3201      	adds	r2, #1
 8011886:	4403      	add	r3, r0
 8011888:	f143 0300 	adc.w	r3, r3, #0
 801188c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8011890:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8011894:	bd10      	pop	{r4, pc}
 8011896:	bf00      	nop
 8011898:	20010590 	.word	0x20010590
 801189c:	5851f42d 	.word	0x5851f42d
 80118a0:	4c957f2d 	.word	0x4c957f2d

080118a4 <_sbrk_r>:
 80118a4:	b538      	push	{r3, r4, r5, lr}
 80118a6:	4c06      	ldr	r4, [pc, #24]	; (80118c0 <_sbrk_r+0x1c>)
 80118a8:	2300      	movs	r3, #0
 80118aa:	4605      	mov	r5, r0
 80118ac:	4608      	mov	r0, r1
 80118ae:	6023      	str	r3, [r4, #0]
 80118b0:	f003 fe4c 	bl	801554c <_sbrk>
 80118b4:	1c43      	adds	r3, r0, #1
 80118b6:	d102      	bne.n	80118be <_sbrk_r+0x1a>
 80118b8:	6823      	ldr	r3, [r4, #0]
 80118ba:	b103      	cbz	r3, 80118be <_sbrk_r+0x1a>
 80118bc:	602b      	str	r3, [r5, #0]
 80118be:	bd38      	pop	{r3, r4, r5, pc}
 80118c0:	200497f0 	.word	0x200497f0

080118c4 <sprintf>:
 80118c4:	b40e      	push	{r1, r2, r3}
 80118c6:	b500      	push	{lr}
 80118c8:	b09c      	sub	sp, #112	; 0x70
 80118ca:	f44f 7102 	mov.w	r1, #520	; 0x208
 80118ce:	ab1d      	add	r3, sp, #116	; 0x74
 80118d0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80118d4:	9002      	str	r0, [sp, #8]
 80118d6:	9006      	str	r0, [sp, #24]
 80118d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80118dc:	480a      	ldr	r0, [pc, #40]	; (8011908 <sprintf+0x44>)
 80118de:	9104      	str	r1, [sp, #16]
 80118e0:	9107      	str	r1, [sp, #28]
 80118e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80118e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ea:	f8ad 1016 	strh.w	r1, [sp, #22]
 80118ee:	6800      	ldr	r0, [r0, #0]
 80118f0:	9301      	str	r3, [sp, #4]
 80118f2:	a902      	add	r1, sp, #8
 80118f4:	f000 f850 	bl	8011998 <_svfprintf_r>
 80118f8:	9b02      	ldr	r3, [sp, #8]
 80118fa:	2200      	movs	r2, #0
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	b01c      	add	sp, #112	; 0x70
 8011900:	f85d eb04 	ldr.w	lr, [sp], #4
 8011904:	b003      	add	sp, #12
 8011906:	4770      	bx	lr
 8011908:	20010590 	.word	0x20010590

0801190c <strchr>:
 801190c:	b2c9      	uxtb	r1, r1
 801190e:	4603      	mov	r3, r0
 8011910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011914:	b11a      	cbz	r2, 801191e <strchr+0x12>
 8011916:	4291      	cmp	r1, r2
 8011918:	d1f9      	bne.n	801190e <strchr+0x2>
 801191a:	4618      	mov	r0, r3
 801191c:	4770      	bx	lr
 801191e:	2900      	cmp	r1, #0
 8011920:	bf0c      	ite	eq
 8011922:	4618      	moveq	r0, r3
 8011924:	2000      	movne	r0, #0
 8011926:	4770      	bx	lr

08011928 <strcpy>:
 8011928:	4603      	mov	r3, r0
 801192a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801192e:	f803 2b01 	strb.w	r2, [r3], #1
 8011932:	2a00      	cmp	r2, #0
 8011934:	d1f9      	bne.n	801192a <strcpy+0x2>
 8011936:	4770      	bx	lr

08011938 <strncmp>:
 8011938:	b530      	push	{r4, r5, lr}
 801193a:	b182      	cbz	r2, 801195e <strncmp+0x26>
 801193c:	1e45      	subs	r5, r0, #1
 801193e:	3901      	subs	r1, #1
 8011940:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8011944:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011948:	42a3      	cmp	r3, r4
 801194a:	d106      	bne.n	801195a <strncmp+0x22>
 801194c:	43ec      	mvns	r4, r5
 801194e:	4414      	add	r4, r2
 8011950:	42e0      	cmn	r0, r4
 8011952:	d001      	beq.n	8011958 <strncmp+0x20>
 8011954:	2b00      	cmp	r3, #0
 8011956:	d1f3      	bne.n	8011940 <strncmp+0x8>
 8011958:	461c      	mov	r4, r3
 801195a:	1b18      	subs	r0, r3, r4
 801195c:	bd30      	pop	{r4, r5, pc}
 801195e:	4610      	mov	r0, r2
 8011960:	bd30      	pop	{r4, r5, pc}

08011962 <strstr>:
 8011962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011964:	7803      	ldrb	r3, [r0, #0]
 8011966:	b963      	cbnz	r3, 8011982 <strstr+0x20>
 8011968:	780b      	ldrb	r3, [r1, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	bf18      	it	ne
 801196e:	2000      	movne	r0, #0
 8011970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011972:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8011976:	b162      	cbz	r2, 8011992 <strstr+0x30>
 8011978:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 801197c:	4297      	cmp	r7, r2
 801197e:	4630      	mov	r0, r6
 8011980:	d0f7      	beq.n	8011972 <strstr+0x10>
 8011982:	4603      	mov	r3, r0
 8011984:	1c46      	adds	r6, r0, #1
 8011986:	7800      	ldrb	r0, [r0, #0]
 8011988:	b110      	cbz	r0, 8011990 <strstr+0x2e>
 801198a:	1e4d      	subs	r5, r1, #1
 801198c:	1e5c      	subs	r4, r3, #1
 801198e:	e7f0      	b.n	8011972 <strstr+0x10>
 8011990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011992:	4618      	mov	r0, r3
 8011994:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011998 <_svfprintf_r>:
 8011998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801199c:	b0bd      	sub	sp, #244	; 0xf4
 801199e:	468b      	mov	fp, r1
 80119a0:	9205      	str	r2, [sp, #20]
 80119a2:	461f      	mov	r7, r3
 80119a4:	4682      	mov	sl, r0
 80119a6:	f001 feff 	bl	80137a8 <_localeconv_r>
 80119aa:	6803      	ldr	r3, [r0, #0]
 80119ac:	930d      	str	r3, [sp, #52]	; 0x34
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7ee fc8e 	bl	80002d0 <strlen>
 80119b4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80119b8:	9008      	str	r0, [sp, #32]
 80119ba:	0619      	lsls	r1, r3, #24
 80119bc:	d515      	bpl.n	80119ea <_svfprintf_r+0x52>
 80119be:	f8db 3010 	ldr.w	r3, [fp, #16]
 80119c2:	b993      	cbnz	r3, 80119ea <_svfprintf_r+0x52>
 80119c4:	2140      	movs	r1, #64	; 0x40
 80119c6:	4650      	mov	r0, sl
 80119c8:	f7ff fcee 	bl	80113a8 <_malloc_r>
 80119cc:	f8cb 0000 	str.w	r0, [fp]
 80119d0:	f8cb 0010 	str.w	r0, [fp, #16]
 80119d4:	b930      	cbnz	r0, 80119e4 <_svfprintf_r+0x4c>
 80119d6:	230c      	movs	r3, #12
 80119d8:	f8ca 3000 	str.w	r3, [sl]
 80119dc:	f04f 30ff 	mov.w	r0, #4294967295
 80119e0:	f000 bf95 	b.w	801290e <_svfprintf_r+0xf76>
 80119e4:	2340      	movs	r3, #64	; 0x40
 80119e6:	f8cb 3014 	str.w	r3, [fp, #20]
 80119ea:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8011c50 <_svfprintf_r+0x2b8>
 80119ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80119f2:	2300      	movs	r3, #0
 80119f4:	ac2c      	add	r4, sp, #176	; 0xb0
 80119f6:	941f      	str	r4, [sp, #124]	; 0x7c
 80119f8:	9321      	str	r3, [sp, #132]	; 0x84
 80119fa:	9320      	str	r3, [sp, #128]	; 0x80
 80119fc:	9304      	str	r3, [sp, #16]
 80119fe:	9311      	str	r3, [sp, #68]	; 0x44
 8011a00:	9310      	str	r3, [sp, #64]	; 0x40
 8011a02:	930a      	str	r3, [sp, #40]	; 0x28
 8011a04:	9d05      	ldr	r5, [sp, #20]
 8011a06:	462b      	mov	r3, r5
 8011a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a0c:	b11a      	cbz	r2, 8011a16 <_svfprintf_r+0x7e>
 8011a0e:	2a25      	cmp	r2, #37	; 0x25
 8011a10:	d001      	beq.n	8011a16 <_svfprintf_r+0x7e>
 8011a12:	461d      	mov	r5, r3
 8011a14:	e7f7      	b.n	8011a06 <_svfprintf_r+0x6e>
 8011a16:	9b05      	ldr	r3, [sp, #20]
 8011a18:	1aee      	subs	r6, r5, r3
 8011a1a:	d017      	beq.n	8011a4c <_svfprintf_r+0xb4>
 8011a1c:	e884 0048 	stmia.w	r4, {r3, r6}
 8011a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a22:	4433      	add	r3, r6
 8011a24:	9321      	str	r3, [sp, #132]	; 0x84
 8011a26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011a28:	3301      	adds	r3, #1
 8011a2a:	2b07      	cmp	r3, #7
 8011a2c:	9320      	str	r3, [sp, #128]	; 0x80
 8011a2e:	dc01      	bgt.n	8011a34 <_svfprintf_r+0x9c>
 8011a30:	3408      	adds	r4, #8
 8011a32:	e008      	b.n	8011a46 <_svfprintf_r+0xae>
 8011a34:	aa1f      	add	r2, sp, #124	; 0x7c
 8011a36:	4659      	mov	r1, fp
 8011a38:	4650      	mov	r0, sl
 8011a3a:	f002 f98f 	bl	8013d5c <__ssprint_r>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	f040 862c 	bne.w	801269c <_svfprintf_r+0xd04>
 8011a44:	ac2c      	add	r4, sp, #176	; 0xb0
 8011a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a48:	4433      	add	r3, r6
 8011a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8011a4c:	782b      	ldrb	r3, [r5, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f000 861d 	beq.w	801268e <_svfprintf_r+0xcf6>
 8011a54:	2200      	movs	r2, #0
 8011a56:	1c6b      	adds	r3, r5, #1
 8011a58:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011a5c:	4611      	mov	r1, r2
 8011a5e:	f04f 39ff 	mov.w	r9, #4294967295
 8011a62:	9209      	str	r2, [sp, #36]	; 0x24
 8011a64:	4615      	mov	r5, r2
 8011a66:	200a      	movs	r0, #10
 8011a68:	1c5e      	adds	r6, r3, #1
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	9605      	str	r6, [sp, #20]
 8011a6e:	9302      	str	r3, [sp, #8]
 8011a70:	9b02      	ldr	r3, [sp, #8]
 8011a72:	3b20      	subs	r3, #32
 8011a74:	2b58      	cmp	r3, #88	; 0x58
 8011a76:	f200 8263 	bhi.w	8011f40 <_svfprintf_r+0x5a8>
 8011a7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011a7e:	005c      	.short	0x005c
 8011a80:	02610261 	.word	0x02610261
 8011a84:	0261006b 	.word	0x0261006b
 8011a88:	02610261 	.word	0x02610261
 8011a8c:	02610261 	.word	0x02610261
 8011a90:	006e0261 	.word	0x006e0261
 8011a94:	02610059 	.word	0x02610059
 8011a98:	007c0079 	.word	0x007c0079
 8011a9c:	00a30261 	.word	0x00a30261
 8011aa0:	00a600a6 	.word	0x00a600a6
 8011aa4:	00a600a6 	.word	0x00a600a6
 8011aa8:	00a600a6 	.word	0x00a600a6
 8011aac:	00a600a6 	.word	0x00a600a6
 8011ab0:	026100a6 	.word	0x026100a6
 8011ab4:	02610261 	.word	0x02610261
 8011ab8:	02610261 	.word	0x02610261
 8011abc:	02610261 	.word	0x02610261
 8011ac0:	02610261 	.word	0x02610261
 8011ac4:	00d60261 	.word	0x00d60261
 8011ac8:	0261010b 	.word	0x0261010b
 8011acc:	0261010b 	.word	0x0261010b
 8011ad0:	02610261 	.word	0x02610261
 8011ad4:	00b90261 	.word	0x00b90261
 8011ad8:	02610261 	.word	0x02610261
 8011adc:	02610152 	.word	0x02610152
 8011ae0:	02610261 	.word	0x02610261
 8011ae4:	02610261 	.word	0x02610261
 8011ae8:	02610199 	.word	0x02610199
 8011aec:	00660261 	.word	0x00660261
 8011af0:	02610261 	.word	0x02610261
 8011af4:	02610261 	.word	0x02610261
 8011af8:	02610261 	.word	0x02610261
 8011afc:	02610261 	.word	0x02610261
 8011b00:	02610261 	.word	0x02610261
 8011b04:	006100cd 	.word	0x006100cd
 8011b08:	010b010b 	.word	0x010b010b
 8011b0c:	00bc010b 	.word	0x00bc010b
 8011b10:	02610061 	.word	0x02610061
 8011b14:	00bf0261 	.word	0x00bf0261
 8011b18:	01340261 	.word	0x01340261
 8011b1c:	016f0154 	.word	0x016f0154
 8011b20:	026100ca 	.word	0x026100ca
 8011b24:	02610180 	.word	0x02610180
 8011b28:	0261019b 	.word	0x0261019b
 8011b2c:	01b30261 	.word	0x01b30261
 8011b30:	2201      	movs	r2, #1
 8011b32:	212b      	movs	r1, #43	; 0x2b
 8011b34:	e002      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011b36:	b909      	cbnz	r1, 8011b3c <_svfprintf_r+0x1a4>
 8011b38:	2201      	movs	r2, #1
 8011b3a:	2120      	movs	r1, #32
 8011b3c:	9b05      	ldr	r3, [sp, #20]
 8011b3e:	e793      	b.n	8011a68 <_svfprintf_r+0xd0>
 8011b40:	2a00      	cmp	r2, #0
 8011b42:	d077      	beq.n	8011c34 <_svfprintf_r+0x29c>
 8011b44:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011b48:	e074      	b.n	8011c34 <_svfprintf_r+0x29c>
 8011b4a:	b10a      	cbz	r2, 8011b50 <_svfprintf_r+0x1b8>
 8011b4c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011b50:	4b41      	ldr	r3, [pc, #260]	; (8011c58 <_svfprintf_r+0x2c0>)
 8011b52:	e14b      	b.n	8011dec <_svfprintf_r+0x454>
 8011b54:	f045 0501 	orr.w	r5, r5, #1
 8011b58:	e7f0      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011b5a:	683e      	ldr	r6, [r7, #0]
 8011b5c:	9609      	str	r6, [sp, #36]	; 0x24
 8011b5e:	2e00      	cmp	r6, #0
 8011b60:	f107 0304 	add.w	r3, r7, #4
 8011b64:	db01      	blt.n	8011b6a <_svfprintf_r+0x1d2>
 8011b66:	461f      	mov	r7, r3
 8011b68:	e7e8      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011b6a:	4276      	negs	r6, r6
 8011b6c:	9609      	str	r6, [sp, #36]	; 0x24
 8011b6e:	461f      	mov	r7, r3
 8011b70:	f045 0504 	orr.w	r5, r5, #4
 8011b74:	e7e2      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011b76:	9e05      	ldr	r6, [sp, #20]
 8011b78:	9b05      	ldr	r3, [sp, #20]
 8011b7a:	7836      	ldrb	r6, [r6, #0]
 8011b7c:	9602      	str	r6, [sp, #8]
 8011b7e:	2e2a      	cmp	r6, #42	; 0x2a
 8011b80:	f103 0301 	add.w	r3, r3, #1
 8011b84:	d002      	beq.n	8011b8c <_svfprintf_r+0x1f4>
 8011b86:	f04f 0900 	mov.w	r9, #0
 8011b8a:	e00a      	b.n	8011ba2 <_svfprintf_r+0x20a>
 8011b8c:	f8d7 9000 	ldr.w	r9, [r7]
 8011b90:	9305      	str	r3, [sp, #20]
 8011b92:	1d3e      	adds	r6, r7, #4
 8011b94:	f1b9 0f00 	cmp.w	r9, #0
 8011b98:	4637      	mov	r7, r6
 8011b9a:	dacf      	bge.n	8011b3c <_svfprintf_r+0x1a4>
 8011b9c:	f04f 39ff 	mov.w	r9, #4294967295
 8011ba0:	e7cc      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011ba2:	9305      	str	r3, [sp, #20]
 8011ba4:	9b02      	ldr	r3, [sp, #8]
 8011ba6:	3b30      	subs	r3, #48	; 0x30
 8011ba8:	2b09      	cmp	r3, #9
 8011baa:	d808      	bhi.n	8011bbe <_svfprintf_r+0x226>
 8011bac:	fb00 3909 	mla	r9, r0, r9, r3
 8011bb0:	9b05      	ldr	r3, [sp, #20]
 8011bb2:	461e      	mov	r6, r3
 8011bb4:	f816 3b01 	ldrb.w	r3, [r6], #1
 8011bb8:	9302      	str	r3, [sp, #8]
 8011bba:	4633      	mov	r3, r6
 8011bbc:	e7f1      	b.n	8011ba2 <_svfprintf_r+0x20a>
 8011bbe:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8011bc2:	e755      	b.n	8011a70 <_svfprintf_r+0xd8>
 8011bc4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8011bc8:	e7b8      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011bca:	2300      	movs	r3, #0
 8011bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8011bce:	9b02      	ldr	r3, [sp, #8]
 8011bd0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8011bd2:	3b30      	subs	r3, #48	; 0x30
 8011bd4:	fb00 3306 	mla	r3, r0, r6, r3
 8011bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8011bda:	9b05      	ldr	r3, [sp, #20]
 8011bdc:	461e      	mov	r6, r3
 8011bde:	f816 3b01 	ldrb.w	r3, [r6], #1
 8011be2:	9302      	str	r3, [sp, #8]
 8011be4:	9b02      	ldr	r3, [sp, #8]
 8011be6:	9605      	str	r6, [sp, #20]
 8011be8:	3b30      	subs	r3, #48	; 0x30
 8011bea:	2b09      	cmp	r3, #9
 8011bec:	d9ef      	bls.n	8011bce <_svfprintf_r+0x236>
 8011bee:	e73f      	b.n	8011a70 <_svfprintf_r+0xd8>
 8011bf0:	f045 0508 	orr.w	r5, r5, #8
 8011bf4:	e7a2      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011bf6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8011bfa:	e79f      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011bfc:	9b05      	ldr	r3, [sp, #20]
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	2b6c      	cmp	r3, #108	; 0x6c
 8011c02:	d103      	bne.n	8011c0c <_svfprintf_r+0x274>
 8011c04:	9b05      	ldr	r3, [sp, #20]
 8011c06:	3301      	adds	r3, #1
 8011c08:	9305      	str	r3, [sp, #20]
 8011c0a:	e002      	b.n	8011c12 <_svfprintf_r+0x27a>
 8011c0c:	f045 0510 	orr.w	r5, r5, #16
 8011c10:	e794      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011c12:	f045 0520 	orr.w	r5, r5, #32
 8011c16:	e791      	b.n	8011b3c <_svfprintf_r+0x1a4>
 8011c18:	1d3b      	adds	r3, r7, #4
 8011c1a:	9303      	str	r3, [sp, #12]
 8011c1c:	2600      	movs	r6, #0
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8011c24:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8011c28:	e199      	b.n	8011f5e <_svfprintf_r+0x5c6>
 8011c2a:	b10a      	cbz	r2, 8011c30 <_svfprintf_r+0x298>
 8011c2c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011c30:	f045 0510 	orr.w	r5, r5, #16
 8011c34:	06aa      	lsls	r2, r5, #26
 8011c36:	d511      	bpl.n	8011c5c <_svfprintf_r+0x2c4>
 8011c38:	3707      	adds	r7, #7
 8011c3a:	f027 0707 	bic.w	r7, r7, #7
 8011c3e:	f107 0308 	add.w	r3, r7, #8
 8011c42:	9303      	str	r3, [sp, #12]
 8011c44:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011c48:	e017      	b.n	8011c7a <_svfprintf_r+0x2e2>
 8011c4a:	bf00      	nop
 8011c4c:	f3af 8000 	nop.w
	...
 8011c58:	0802d2a9 	.word	0x0802d2a9
 8011c5c:	f015 0f10 	tst.w	r5, #16
 8011c60:	f107 0304 	add.w	r3, r7, #4
 8011c64:	d002      	beq.n	8011c6c <_svfprintf_r+0x2d4>
 8011c66:	9303      	str	r3, [sp, #12]
 8011c68:	683e      	ldr	r6, [r7, #0]
 8011c6a:	e005      	b.n	8011c78 <_svfprintf_r+0x2e0>
 8011c6c:	683e      	ldr	r6, [r7, #0]
 8011c6e:	9303      	str	r3, [sp, #12]
 8011c70:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011c74:	bf18      	it	ne
 8011c76:	b236      	sxthne	r6, r6
 8011c78:	17f7      	asrs	r7, r6, #31
 8011c7a:	2e00      	cmp	r6, #0
 8011c7c:	f177 0300 	sbcs.w	r3, r7, #0
 8011c80:	f280 80de 	bge.w	8011e40 <_svfprintf_r+0x4a8>
 8011c84:	4276      	negs	r6, r6
 8011c86:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8011c8a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8011c8e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011c92:	e0d5      	b.n	8011e40 <_svfprintf_r+0x4a8>
 8011c94:	b10a      	cbz	r2, 8011c9a <_svfprintf_r+0x302>
 8011c96:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011c9a:	3707      	adds	r7, #7
 8011c9c:	f027 0707 	bic.w	r7, r7, #7
 8011ca0:	f107 0308 	add.w	r3, r7, #8
 8011ca4:	9303      	str	r3, [sp, #12]
 8011ca6:	ed97 7b00 	vldr	d7, [r7]
 8011caa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011cae:	9b06      	ldr	r3, [sp, #24]
 8011cb0:	9312      	str	r3, [sp, #72]	; 0x48
 8011cb2:	9b07      	ldr	r3, [sp, #28]
 8011cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011cb8:	9313      	str	r3, [sp, #76]	; 0x4c
 8011cba:	f04f 32ff 	mov.w	r2, #4294967295
 8011cbe:	4bab      	ldr	r3, [pc, #684]	; (8011f6c <_svfprintf_r+0x5d4>)
 8011cc0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011cc4:	f7ee ffae 	bl	8000c24 <__aeabi_dcmpun>
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	f040 84f1 	bne.w	80126b0 <_svfprintf_r+0xd18>
 8011cce:	f04f 32ff 	mov.w	r2, #4294967295
 8011cd2:	4ba6      	ldr	r3, [pc, #664]	; (8011f6c <_svfprintf_r+0x5d4>)
 8011cd4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011cd8:	f7ee ff86 	bl	8000be8 <__aeabi_dcmple>
 8011cdc:	2800      	cmp	r0, #0
 8011cde:	f040 84e7 	bne.w	80126b0 <_svfprintf_r+0xd18>
 8011ce2:	f000 bdfd 	b.w	80128e0 <_svfprintf_r+0xf48>
 8011ce6:	b10a      	cbz	r2, 8011cec <_svfprintf_r+0x354>
 8011ce8:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011cec:	f015 0f20 	tst.w	r5, #32
 8011cf0:	f107 0304 	add.w	r3, r7, #4
 8011cf4:	d007      	beq.n	8011d06 <_svfprintf_r+0x36e>
 8011cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011cf8:	683a      	ldr	r2, [r7, #0]
 8011cfa:	17ce      	asrs	r6, r1, #31
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	4631      	mov	r1, r6
 8011d00:	e9c2 0100 	strd	r0, r1, [r2]
 8011d04:	e00b      	b.n	8011d1e <_svfprintf_r+0x386>
 8011d06:	06e9      	lsls	r1, r5, #27
 8011d08:	d406      	bmi.n	8011d18 <_svfprintf_r+0x380>
 8011d0a:	066a      	lsls	r2, r5, #25
 8011d0c:	d504      	bpl.n	8011d18 <_svfprintf_r+0x380>
 8011d0e:	683a      	ldr	r2, [r7, #0]
 8011d10:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8011d14:	8011      	strh	r1, [r2, #0]
 8011d16:	e002      	b.n	8011d1e <_svfprintf_r+0x386>
 8011d18:	683a      	ldr	r2, [r7, #0]
 8011d1a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d1c:	6011      	str	r1, [r2, #0]
 8011d1e:	461f      	mov	r7, r3
 8011d20:	e670      	b.n	8011a04 <_svfprintf_r+0x6c>
 8011d22:	f045 0510 	orr.w	r5, r5, #16
 8011d26:	f015 0320 	ands.w	r3, r5, #32
 8011d2a:	d009      	beq.n	8011d40 <_svfprintf_r+0x3a8>
 8011d2c:	3707      	adds	r7, #7
 8011d2e:	f027 0707 	bic.w	r7, r7, #7
 8011d32:	f107 0308 	add.w	r3, r7, #8
 8011d36:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011d3a:	9303      	str	r3, [sp, #12]
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	e07b      	b.n	8011e38 <_svfprintf_r+0x4a0>
 8011d40:	1d3a      	adds	r2, r7, #4
 8011d42:	f015 0110 	ands.w	r1, r5, #16
 8011d46:	9203      	str	r2, [sp, #12]
 8011d48:	d105      	bne.n	8011d56 <_svfprintf_r+0x3be>
 8011d4a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8011d4e:	d002      	beq.n	8011d56 <_svfprintf_r+0x3be>
 8011d50:	883e      	ldrh	r6, [r7, #0]
 8011d52:	2700      	movs	r7, #0
 8011d54:	e7f2      	b.n	8011d3c <_svfprintf_r+0x3a4>
 8011d56:	683e      	ldr	r6, [r7, #0]
 8011d58:	2700      	movs	r7, #0
 8011d5a:	e06d      	b.n	8011e38 <_svfprintf_r+0x4a0>
 8011d5c:	1d3b      	adds	r3, r7, #4
 8011d5e:	9303      	str	r3, [sp, #12]
 8011d60:	2330      	movs	r3, #48	; 0x30
 8011d62:	2278      	movs	r2, #120	; 0x78
 8011d64:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8011d68:	4b81      	ldr	r3, [pc, #516]	; (8011f70 <_svfprintf_r+0x5d8>)
 8011d6a:	683e      	ldr	r6, [r7, #0]
 8011d6c:	9311      	str	r3, [sp, #68]	; 0x44
 8011d6e:	2700      	movs	r7, #0
 8011d70:	f045 0502 	orr.w	r5, r5, #2
 8011d74:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8011d78:	2302      	movs	r3, #2
 8011d7a:	9202      	str	r2, [sp, #8]
 8011d7c:	e05c      	b.n	8011e38 <_svfprintf_r+0x4a0>
 8011d7e:	2600      	movs	r6, #0
 8011d80:	1d3b      	adds	r3, r7, #4
 8011d82:	45b1      	cmp	r9, r6
 8011d84:	9303      	str	r3, [sp, #12]
 8011d86:	f8d7 8000 	ldr.w	r8, [r7]
 8011d8a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8011d8e:	db0a      	blt.n	8011da6 <_svfprintf_r+0x40e>
 8011d90:	464a      	mov	r2, r9
 8011d92:	4631      	mov	r1, r6
 8011d94:	4640      	mov	r0, r8
 8011d96:	f7ee faa3 	bl	80002e0 <memchr>
 8011d9a:	2800      	cmp	r0, #0
 8011d9c:	f000 80ea 	beq.w	8011f74 <_svfprintf_r+0x5dc>
 8011da0:	ebc8 0900 	rsb	r9, r8, r0
 8011da4:	e0e7      	b.n	8011f76 <_svfprintf_r+0x5de>
 8011da6:	4640      	mov	r0, r8
 8011da8:	f7ee fa92 	bl	80002d0 <strlen>
 8011dac:	4681      	mov	r9, r0
 8011dae:	e0e2      	b.n	8011f76 <_svfprintf_r+0x5de>
 8011db0:	f045 0510 	orr.w	r5, r5, #16
 8011db4:	06ae      	lsls	r6, r5, #26
 8011db6:	d508      	bpl.n	8011dca <_svfprintf_r+0x432>
 8011db8:	3707      	adds	r7, #7
 8011dba:	f027 0707 	bic.w	r7, r7, #7
 8011dbe:	f107 0308 	add.w	r3, r7, #8
 8011dc2:	9303      	str	r3, [sp, #12]
 8011dc4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011dc8:	e00a      	b.n	8011de0 <_svfprintf_r+0x448>
 8011dca:	1d3b      	adds	r3, r7, #4
 8011dcc:	f015 0f10 	tst.w	r5, #16
 8011dd0:	9303      	str	r3, [sp, #12]
 8011dd2:	d103      	bne.n	8011ddc <_svfprintf_r+0x444>
 8011dd4:	0668      	lsls	r0, r5, #25
 8011dd6:	d501      	bpl.n	8011ddc <_svfprintf_r+0x444>
 8011dd8:	883e      	ldrh	r6, [r7, #0]
 8011dda:	e000      	b.n	8011dde <_svfprintf_r+0x446>
 8011ddc:	683e      	ldr	r6, [r7, #0]
 8011dde:	2700      	movs	r7, #0
 8011de0:	2301      	movs	r3, #1
 8011de2:	e029      	b.n	8011e38 <_svfprintf_r+0x4a0>
 8011de4:	b10a      	cbz	r2, 8011dea <_svfprintf_r+0x452>
 8011de6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011dea:	4b61      	ldr	r3, [pc, #388]	; (8011f70 <_svfprintf_r+0x5d8>)
 8011dec:	9311      	str	r3, [sp, #68]	; 0x44
 8011dee:	06a9      	lsls	r1, r5, #26
 8011df0:	d508      	bpl.n	8011e04 <_svfprintf_r+0x46c>
 8011df2:	3707      	adds	r7, #7
 8011df4:	f027 0707 	bic.w	r7, r7, #7
 8011df8:	f107 0308 	add.w	r3, r7, #8
 8011dfc:	9303      	str	r3, [sp, #12]
 8011dfe:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011e02:	e00a      	b.n	8011e1a <_svfprintf_r+0x482>
 8011e04:	1d3b      	adds	r3, r7, #4
 8011e06:	f015 0f10 	tst.w	r5, #16
 8011e0a:	9303      	str	r3, [sp, #12]
 8011e0c:	d103      	bne.n	8011e16 <_svfprintf_r+0x47e>
 8011e0e:	066a      	lsls	r2, r5, #25
 8011e10:	d501      	bpl.n	8011e16 <_svfprintf_r+0x47e>
 8011e12:	883e      	ldrh	r6, [r7, #0]
 8011e14:	e000      	b.n	8011e18 <_svfprintf_r+0x480>
 8011e16:	683e      	ldr	r6, [r7, #0]
 8011e18:	2700      	movs	r7, #0
 8011e1a:	07eb      	lsls	r3, r5, #31
 8011e1c:	d50b      	bpl.n	8011e36 <_svfprintf_r+0x49e>
 8011e1e:	ea56 0307 	orrs.w	r3, r6, r7
 8011e22:	d008      	beq.n	8011e36 <_svfprintf_r+0x49e>
 8011e24:	2330      	movs	r3, #48	; 0x30
 8011e26:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8011e2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011e2e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8011e32:	f045 0502 	orr.w	r5, r5, #2
 8011e36:	2302      	movs	r3, #2
 8011e38:	2200      	movs	r2, #0
 8011e3a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011e3e:	e000      	b.n	8011e42 <_svfprintf_r+0x4aa>
 8011e40:	2301      	movs	r3, #1
 8011e42:	f1b9 0f00 	cmp.w	r9, #0
 8011e46:	f2c0 855c 	blt.w	8012902 <_svfprintf_r+0xf6a>
 8011e4a:	ea56 0207 	orrs.w	r2, r6, r7
 8011e4e:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8011e52:	d103      	bne.n	8011e5c <_svfprintf_r+0x4c4>
 8011e54:	f1b9 0f00 	cmp.w	r9, #0
 8011e58:	d05f      	beq.n	8011f1a <_svfprintf_r+0x582>
 8011e5a:	e006      	b.n	8011e6a <_svfprintf_r+0x4d2>
 8011e5c:	460d      	mov	r5, r1
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d025      	beq.n	8011eae <_svfprintf_r+0x516>
 8011e62:	2b02      	cmp	r3, #2
 8011e64:	d046      	beq.n	8011ef4 <_svfprintf_r+0x55c>
 8011e66:	4629      	mov	r1, r5
 8011e68:	e007      	b.n	8011e7a <_svfprintf_r+0x4e2>
 8011e6a:	460d      	mov	r5, r1
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d022      	beq.n	8011eb6 <_svfprintf_r+0x51e>
 8011e70:	2b02      	cmp	r3, #2
 8011e72:	d03d      	beq.n	8011ef0 <_svfprintf_r+0x558>
 8011e74:	4629      	mov	r1, r5
 8011e76:	2600      	movs	r6, #0
 8011e78:	2700      	movs	r7, #0
 8011e7a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8011e7e:	08f2      	lsrs	r2, r6, #3
 8011e80:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8011e84:	08f8      	lsrs	r0, r7, #3
 8011e86:	f006 0307 	and.w	r3, r6, #7
 8011e8a:	4607      	mov	r7, r0
 8011e8c:	4616      	mov	r6, r2
 8011e8e:	3330      	adds	r3, #48	; 0x30
 8011e90:	ea56 0207 	orrs.w	r2, r6, r7
 8011e94:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8011e98:	d1f1      	bne.n	8011e7e <_svfprintf_r+0x4e6>
 8011e9a:	07e8      	lsls	r0, r5, #31
 8011e9c:	d548      	bpl.n	8011f30 <_svfprintf_r+0x598>
 8011e9e:	2b30      	cmp	r3, #48	; 0x30
 8011ea0:	d046      	beq.n	8011f30 <_svfprintf_r+0x598>
 8011ea2:	2330      	movs	r3, #48	; 0x30
 8011ea4:	f808 3c01 	strb.w	r3, [r8, #-1]
 8011ea8:	f108 38ff 	add.w	r8, r8, #4294967295
 8011eac:	e040      	b.n	8011f30 <_svfprintf_r+0x598>
 8011eae:	2f00      	cmp	r7, #0
 8011eb0:	bf08      	it	eq
 8011eb2:	2e0a      	cmpeq	r6, #10
 8011eb4:	d205      	bcs.n	8011ec2 <_svfprintf_r+0x52a>
 8011eb6:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8011eba:	3630      	adds	r6, #48	; 0x30
 8011ebc:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8011ec0:	e029      	b.n	8011f16 <_svfprintf_r+0x57e>
 8011ec2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8011ec6:	4630      	mov	r0, r6
 8011ec8:	4639      	mov	r1, r7
 8011eca:	220a      	movs	r2, #10
 8011ecc:	2300      	movs	r3, #0
 8011ece:	f7ee ff37 	bl	8000d40 <__aeabi_uldivmod>
 8011ed2:	3230      	adds	r2, #48	; 0x30
 8011ed4:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8011ed8:	2300      	movs	r3, #0
 8011eda:	4630      	mov	r0, r6
 8011edc:	4639      	mov	r1, r7
 8011ede:	220a      	movs	r2, #10
 8011ee0:	f7ee ff2e 	bl	8000d40 <__aeabi_uldivmod>
 8011ee4:	4606      	mov	r6, r0
 8011ee6:	460f      	mov	r7, r1
 8011ee8:	ea56 0307 	orrs.w	r3, r6, r7
 8011eec:	d1eb      	bne.n	8011ec6 <_svfprintf_r+0x52e>
 8011eee:	e012      	b.n	8011f16 <_svfprintf_r+0x57e>
 8011ef0:	2600      	movs	r6, #0
 8011ef2:	2700      	movs	r7, #0
 8011ef4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8011ef8:	f006 030f 	and.w	r3, r6, #15
 8011efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011efe:	5cd3      	ldrb	r3, [r2, r3]
 8011f00:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8011f04:	0933      	lsrs	r3, r6, #4
 8011f06:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8011f0a:	093a      	lsrs	r2, r7, #4
 8011f0c:	461e      	mov	r6, r3
 8011f0e:	4617      	mov	r7, r2
 8011f10:	ea56 0307 	orrs.w	r3, r6, r7
 8011f14:	d1f0      	bne.n	8011ef8 <_svfprintf_r+0x560>
 8011f16:	4629      	mov	r1, r5
 8011f18:	e00a      	b.n	8011f30 <_svfprintf_r+0x598>
 8011f1a:	b93b      	cbnz	r3, 8011f2c <_svfprintf_r+0x594>
 8011f1c:	07ea      	lsls	r2, r5, #31
 8011f1e:	d505      	bpl.n	8011f2c <_svfprintf_r+0x594>
 8011f20:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8011f24:	2330      	movs	r3, #48	; 0x30
 8011f26:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8011f2a:	e001      	b.n	8011f30 <_svfprintf_r+0x598>
 8011f2c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8011f30:	464e      	mov	r6, r9
 8011f32:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8011f36:	ebc8 0909 	rsb	r9, r8, r9
 8011f3a:	460d      	mov	r5, r1
 8011f3c:	2700      	movs	r7, #0
 8011f3e:	e01b      	b.n	8011f78 <_svfprintf_r+0x5e0>
 8011f40:	b10a      	cbz	r2, 8011f46 <_svfprintf_r+0x5ae>
 8011f42:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8011f46:	9b02      	ldr	r3, [sp, #8]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	f000 83a0 	beq.w	801268e <_svfprintf_r+0xcf6>
 8011f4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011f52:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8011f56:	2600      	movs	r6, #0
 8011f58:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8011f5c:	9703      	str	r7, [sp, #12]
 8011f5e:	f04f 0901 	mov.w	r9, #1
 8011f62:	4637      	mov	r7, r6
 8011f64:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8011f68:	e006      	b.n	8011f78 <_svfprintf_r+0x5e0>
 8011f6a:	bf00      	nop
 8011f6c:	7fefffff 	.word	0x7fefffff
 8011f70:	0802d2ba 	.word	0x0802d2ba
 8011f74:	4606      	mov	r6, r0
 8011f76:	4637      	mov	r7, r6
 8011f78:	454e      	cmp	r6, r9
 8011f7a:	4633      	mov	r3, r6
 8011f7c:	bfb8      	it	lt
 8011f7e:	464b      	movlt	r3, r9
 8011f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f82:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8011f86:	b113      	cbz	r3, 8011f8e <_svfprintf_r+0x5f6>
 8011f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f8e:	f015 0302 	ands.w	r3, r5, #2
 8011f92:	9314      	str	r3, [sp, #80]	; 0x50
 8011f94:	bf1e      	ittt	ne
 8011f96:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8011f98:	3302      	addne	r3, #2
 8011f9a:	930b      	strne	r3, [sp, #44]	; 0x2c
 8011f9c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8011fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8011fa2:	d139      	bne.n	8012018 <_svfprintf_r+0x680>
 8011fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	930c      	str	r3, [sp, #48]	; 0x30
 8011fae:	dd33      	ble.n	8012018 <_svfprintf_r+0x680>
 8011fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fb2:	2b10      	cmp	r3, #16
 8011fb4:	4ba6      	ldr	r3, [pc, #664]	; (8012250 <_svfprintf_r+0x8b8>)
 8011fb6:	6023      	str	r3, [r4, #0]
 8011fb8:	dd18      	ble.n	8011fec <_svfprintf_r+0x654>
 8011fba:	2310      	movs	r3, #16
 8011fbc:	6063      	str	r3, [r4, #4]
 8011fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011fc0:	3310      	adds	r3, #16
 8011fc2:	9321      	str	r3, [sp, #132]	; 0x84
 8011fc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	2b07      	cmp	r3, #7
 8011fca:	9320      	str	r3, [sp, #128]	; 0x80
 8011fcc:	dc01      	bgt.n	8011fd2 <_svfprintf_r+0x63a>
 8011fce:	3408      	adds	r4, #8
 8011fd0:	e008      	b.n	8011fe4 <_svfprintf_r+0x64c>
 8011fd2:	aa1f      	add	r2, sp, #124	; 0x7c
 8011fd4:	4659      	mov	r1, fp
 8011fd6:	4650      	mov	r0, sl
 8011fd8:	f001 fec0 	bl	8013d5c <__ssprint_r>
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	f040 835d 	bne.w	801269c <_svfprintf_r+0xd04>
 8011fe2:	ac2c      	add	r4, sp, #176	; 0xb0
 8011fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fe6:	3b10      	subs	r3, #16
 8011fe8:	930c      	str	r3, [sp, #48]	; 0x30
 8011fea:	e7e1      	b.n	8011fb0 <_svfprintf_r+0x618>
 8011fec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fee:	6063      	str	r3, [r4, #4]
 8011ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011ff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ff4:	4413      	add	r3, r2
 8011ff6:	9321      	str	r3, [sp, #132]	; 0x84
 8011ff8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	2b07      	cmp	r3, #7
 8011ffe:	9320      	str	r3, [sp, #128]	; 0x80
 8012000:	dc01      	bgt.n	8012006 <_svfprintf_r+0x66e>
 8012002:	3408      	adds	r4, #8
 8012004:	e008      	b.n	8012018 <_svfprintf_r+0x680>
 8012006:	aa1f      	add	r2, sp, #124	; 0x7c
 8012008:	4659      	mov	r1, fp
 801200a:	4650      	mov	r0, sl
 801200c:	f001 fea6 	bl	8013d5c <__ssprint_r>
 8012010:	2800      	cmp	r0, #0
 8012012:	f040 8343 	bne.w	801269c <_svfprintf_r+0xd04>
 8012016:	ac2c      	add	r4, sp, #176	; 0xb0
 8012018:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801201c:	b1bb      	cbz	r3, 801204e <_svfprintf_r+0x6b6>
 801201e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8012022:	6023      	str	r3, [r4, #0]
 8012024:	2301      	movs	r3, #1
 8012026:	6063      	str	r3, [r4, #4]
 8012028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801202a:	3301      	adds	r3, #1
 801202c:	9321      	str	r3, [sp, #132]	; 0x84
 801202e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012030:	3301      	adds	r3, #1
 8012032:	2b07      	cmp	r3, #7
 8012034:	9320      	str	r3, [sp, #128]	; 0x80
 8012036:	dc01      	bgt.n	801203c <_svfprintf_r+0x6a4>
 8012038:	3408      	adds	r4, #8
 801203a:	e008      	b.n	801204e <_svfprintf_r+0x6b6>
 801203c:	aa1f      	add	r2, sp, #124	; 0x7c
 801203e:	4659      	mov	r1, fp
 8012040:	4650      	mov	r0, sl
 8012042:	f001 fe8b 	bl	8013d5c <__ssprint_r>
 8012046:	2800      	cmp	r0, #0
 8012048:	f040 8328 	bne.w	801269c <_svfprintf_r+0xd04>
 801204c:	ac2c      	add	r4, sp, #176	; 0xb0
 801204e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012050:	b1b3      	cbz	r3, 8012080 <_svfprintf_r+0x6e8>
 8012052:	ab18      	add	r3, sp, #96	; 0x60
 8012054:	6023      	str	r3, [r4, #0]
 8012056:	2302      	movs	r3, #2
 8012058:	6063      	str	r3, [r4, #4]
 801205a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801205c:	3302      	adds	r3, #2
 801205e:	9321      	str	r3, [sp, #132]	; 0x84
 8012060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012062:	3301      	adds	r3, #1
 8012064:	2b07      	cmp	r3, #7
 8012066:	9320      	str	r3, [sp, #128]	; 0x80
 8012068:	dc01      	bgt.n	801206e <_svfprintf_r+0x6d6>
 801206a:	3408      	adds	r4, #8
 801206c:	e008      	b.n	8012080 <_svfprintf_r+0x6e8>
 801206e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012070:	4659      	mov	r1, fp
 8012072:	4650      	mov	r0, sl
 8012074:	f001 fe72 	bl	8013d5c <__ssprint_r>
 8012078:	2800      	cmp	r0, #0
 801207a:	f040 830f 	bne.w	801269c <_svfprintf_r+0xd04>
 801207e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012080:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012082:	2b80      	cmp	r3, #128	; 0x80
 8012084:	d135      	bne.n	80120f2 <_svfprintf_r+0x75a>
 8012086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801208a:	1a9b      	subs	r3, r3, r2
 801208c:	2b00      	cmp	r3, #0
 801208e:	dd30      	ble.n	80120f2 <_svfprintf_r+0x75a>
 8012090:	4a70      	ldr	r2, [pc, #448]	; (8012254 <_svfprintf_r+0x8bc>)
 8012092:	6022      	str	r2, [r4, #0]
 8012094:	2b10      	cmp	r3, #16
 8012096:	dd18      	ble.n	80120ca <_svfprintf_r+0x732>
 8012098:	2210      	movs	r2, #16
 801209a:	6062      	str	r2, [r4, #4]
 801209c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801209e:	3210      	adds	r2, #16
 80120a0:	9221      	str	r2, [sp, #132]	; 0x84
 80120a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80120a4:	3201      	adds	r2, #1
 80120a6:	2a07      	cmp	r2, #7
 80120a8:	9220      	str	r2, [sp, #128]	; 0x80
 80120aa:	dc01      	bgt.n	80120b0 <_svfprintf_r+0x718>
 80120ac:	3408      	adds	r4, #8
 80120ae:	e00a      	b.n	80120c6 <_svfprintf_r+0x72e>
 80120b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80120b2:	4659      	mov	r1, fp
 80120b4:	4650      	mov	r0, sl
 80120b6:	930c      	str	r3, [sp, #48]	; 0x30
 80120b8:	f001 fe50 	bl	8013d5c <__ssprint_r>
 80120bc:	2800      	cmp	r0, #0
 80120be:	f040 82ed 	bne.w	801269c <_svfprintf_r+0xd04>
 80120c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120c4:	ac2c      	add	r4, sp, #176	; 0xb0
 80120c6:	3b10      	subs	r3, #16
 80120c8:	e7e2      	b.n	8012090 <_svfprintf_r+0x6f8>
 80120ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120cc:	6063      	str	r3, [r4, #4]
 80120ce:	4413      	add	r3, r2
 80120d0:	9321      	str	r3, [sp, #132]	; 0x84
 80120d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80120d4:	3301      	adds	r3, #1
 80120d6:	2b07      	cmp	r3, #7
 80120d8:	9320      	str	r3, [sp, #128]	; 0x80
 80120da:	dc01      	bgt.n	80120e0 <_svfprintf_r+0x748>
 80120dc:	3408      	adds	r4, #8
 80120de:	e008      	b.n	80120f2 <_svfprintf_r+0x75a>
 80120e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80120e2:	4659      	mov	r1, fp
 80120e4:	4650      	mov	r0, sl
 80120e6:	f001 fe39 	bl	8013d5c <__ssprint_r>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	f040 82d6 	bne.w	801269c <_svfprintf_r+0xd04>
 80120f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80120f2:	ebc9 0606 	rsb	r6, r9, r6
 80120f6:	2e00      	cmp	r6, #0
 80120f8:	dd2e      	ble.n	8012158 <_svfprintf_r+0x7c0>
 80120fa:	4b56      	ldr	r3, [pc, #344]	; (8012254 <_svfprintf_r+0x8bc>)
 80120fc:	6023      	str	r3, [r4, #0]
 80120fe:	2e10      	cmp	r6, #16
 8012100:	dd16      	ble.n	8012130 <_svfprintf_r+0x798>
 8012102:	2310      	movs	r3, #16
 8012104:	6063      	str	r3, [r4, #4]
 8012106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012108:	3310      	adds	r3, #16
 801210a:	9321      	str	r3, [sp, #132]	; 0x84
 801210c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801210e:	3301      	adds	r3, #1
 8012110:	2b07      	cmp	r3, #7
 8012112:	9320      	str	r3, [sp, #128]	; 0x80
 8012114:	dc01      	bgt.n	801211a <_svfprintf_r+0x782>
 8012116:	3408      	adds	r4, #8
 8012118:	e008      	b.n	801212c <_svfprintf_r+0x794>
 801211a:	aa1f      	add	r2, sp, #124	; 0x7c
 801211c:	4659      	mov	r1, fp
 801211e:	4650      	mov	r0, sl
 8012120:	f001 fe1c 	bl	8013d5c <__ssprint_r>
 8012124:	2800      	cmp	r0, #0
 8012126:	f040 82b9 	bne.w	801269c <_svfprintf_r+0xd04>
 801212a:	ac2c      	add	r4, sp, #176	; 0xb0
 801212c:	3e10      	subs	r6, #16
 801212e:	e7e4      	b.n	80120fa <_svfprintf_r+0x762>
 8012130:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012132:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012134:	6066      	str	r6, [r4, #4]
 8012136:	3301      	adds	r3, #1
 8012138:	4406      	add	r6, r0
 801213a:	2b07      	cmp	r3, #7
 801213c:	9621      	str	r6, [sp, #132]	; 0x84
 801213e:	9320      	str	r3, [sp, #128]	; 0x80
 8012140:	dc01      	bgt.n	8012146 <_svfprintf_r+0x7ae>
 8012142:	3408      	adds	r4, #8
 8012144:	e008      	b.n	8012158 <_svfprintf_r+0x7c0>
 8012146:	aa1f      	add	r2, sp, #124	; 0x7c
 8012148:	4659      	mov	r1, fp
 801214a:	4650      	mov	r0, sl
 801214c:	f001 fe06 	bl	8013d5c <__ssprint_r>
 8012150:	2800      	cmp	r0, #0
 8012152:	f040 82a3 	bne.w	801269c <_svfprintf_r+0xd04>
 8012156:	ac2c      	add	r4, sp, #176	; 0xb0
 8012158:	05eb      	lsls	r3, r5, #23
 801215a:	d414      	bmi.n	8012186 <_svfprintf_r+0x7ee>
 801215c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801215e:	e884 0300 	stmia.w	r4, {r8, r9}
 8012162:	444b      	add	r3, r9
 8012164:	9321      	str	r3, [sp, #132]	; 0x84
 8012166:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012168:	3301      	adds	r3, #1
 801216a:	2b07      	cmp	r3, #7
 801216c:	9320      	str	r3, [sp, #128]	; 0x80
 801216e:	f340 8244 	ble.w	80125fa <_svfprintf_r+0xc62>
 8012172:	aa1f      	add	r2, sp, #124	; 0x7c
 8012174:	4659      	mov	r1, fp
 8012176:	4650      	mov	r0, sl
 8012178:	f001 fdf0 	bl	8013d5c <__ssprint_r>
 801217c:	2800      	cmp	r0, #0
 801217e:	f040 828d 	bne.w	801269c <_svfprintf_r+0xd04>
 8012182:	ac2c      	add	r4, sp, #176	; 0xb0
 8012184:	e23a      	b.n	80125fc <_svfprintf_r+0xc64>
 8012186:	9b02      	ldr	r3, [sp, #8]
 8012188:	2b65      	cmp	r3, #101	; 0x65
 801218a:	f340 81ad 	ble.w	80124e8 <_svfprintf_r+0xb50>
 801218e:	2200      	movs	r2, #0
 8012190:	2300      	movs	r3, #0
 8012192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012196:	f7ee fd13 	bl	8000bc0 <__aeabi_dcmpeq>
 801219a:	2800      	cmp	r0, #0
 801219c:	d05e      	beq.n	801225c <_svfprintf_r+0x8c4>
 801219e:	4b2e      	ldr	r3, [pc, #184]	; (8012258 <_svfprintf_r+0x8c0>)
 80121a0:	6023      	str	r3, [r4, #0]
 80121a2:	2301      	movs	r3, #1
 80121a4:	6063      	str	r3, [r4, #4]
 80121a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121a8:	3301      	adds	r3, #1
 80121aa:	9321      	str	r3, [sp, #132]	; 0x84
 80121ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80121ae:	3301      	adds	r3, #1
 80121b0:	2b07      	cmp	r3, #7
 80121b2:	9320      	str	r3, [sp, #128]	; 0x80
 80121b4:	dc01      	bgt.n	80121ba <_svfprintf_r+0x822>
 80121b6:	3408      	adds	r4, #8
 80121b8:	e008      	b.n	80121cc <_svfprintf_r+0x834>
 80121ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80121bc:	4659      	mov	r1, fp
 80121be:	4650      	mov	r0, sl
 80121c0:	f001 fdcc 	bl	8013d5c <__ssprint_r>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	f040 8269 	bne.w	801269c <_svfprintf_r+0xd04>
 80121ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80121cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80121ce:	9a04      	ldr	r2, [sp, #16]
 80121d0:	4293      	cmp	r3, r2
 80121d2:	db02      	blt.n	80121da <_svfprintf_r+0x842>
 80121d4:	07ee      	lsls	r6, r5, #31
 80121d6:	f140 8211 	bpl.w	80125fc <_svfprintf_r+0xc64>
 80121da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121dc:	6023      	str	r3, [r4, #0]
 80121de:	9b08      	ldr	r3, [sp, #32]
 80121e0:	6063      	str	r3, [r4, #4]
 80121e2:	9a08      	ldr	r2, [sp, #32]
 80121e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80121e6:	4413      	add	r3, r2
 80121e8:	9321      	str	r3, [sp, #132]	; 0x84
 80121ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80121ec:	3301      	adds	r3, #1
 80121ee:	2b07      	cmp	r3, #7
 80121f0:	9320      	str	r3, [sp, #128]	; 0x80
 80121f2:	dc01      	bgt.n	80121f8 <_svfprintf_r+0x860>
 80121f4:	3408      	adds	r4, #8
 80121f6:	e008      	b.n	801220a <_svfprintf_r+0x872>
 80121f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80121fa:	4659      	mov	r1, fp
 80121fc:	4650      	mov	r0, sl
 80121fe:	f001 fdad 	bl	8013d5c <__ssprint_r>
 8012202:	2800      	cmp	r0, #0
 8012204:	f040 824a 	bne.w	801269c <_svfprintf_r+0xd04>
 8012208:	ac2c      	add	r4, sp, #176	; 0xb0
 801220a:	9b04      	ldr	r3, [sp, #16]
 801220c:	1e5e      	subs	r6, r3, #1
 801220e:	2e00      	cmp	r6, #0
 8012210:	f340 81f4 	ble.w	80125fc <_svfprintf_r+0xc64>
 8012214:	4f0f      	ldr	r7, [pc, #60]	; (8012254 <_svfprintf_r+0x8bc>)
 8012216:	f04f 0810 	mov.w	r8, #16
 801221a:	2e10      	cmp	r6, #16
 801221c:	f340 8159 	ble.w	80124d2 <_svfprintf_r+0xb3a>
 8012220:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012222:	3310      	adds	r3, #16
 8012224:	9321      	str	r3, [sp, #132]	; 0x84
 8012226:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012228:	3301      	adds	r3, #1
 801222a:	2b07      	cmp	r3, #7
 801222c:	e884 0180 	stmia.w	r4, {r7, r8}
 8012230:	9320      	str	r3, [sp, #128]	; 0x80
 8012232:	dc01      	bgt.n	8012238 <_svfprintf_r+0x8a0>
 8012234:	3408      	adds	r4, #8
 8012236:	e008      	b.n	801224a <_svfprintf_r+0x8b2>
 8012238:	aa1f      	add	r2, sp, #124	; 0x7c
 801223a:	4659      	mov	r1, fp
 801223c:	4650      	mov	r0, sl
 801223e:	f001 fd8d 	bl	8013d5c <__ssprint_r>
 8012242:	2800      	cmp	r0, #0
 8012244:	f040 822a 	bne.w	801269c <_svfprintf_r+0xd04>
 8012248:	ac2c      	add	r4, sp, #176	; 0xb0
 801224a:	3e10      	subs	r6, #16
 801224c:	e7e5      	b.n	801221a <_svfprintf_r+0x882>
 801224e:	bf00      	nop
 8012250:	0802d2cb 	.word	0x0802d2cb
 8012254:	0802d289 	.word	0x0802d289
 8012258:	0802d157 	.word	0x0802d157
 801225c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801225e:	2b00      	cmp	r3, #0
 8012260:	dc7c      	bgt.n	801235c <_svfprintf_r+0x9c4>
 8012262:	4b9f      	ldr	r3, [pc, #636]	; (80124e0 <_svfprintf_r+0xb48>)
 8012264:	6023      	str	r3, [r4, #0]
 8012266:	2301      	movs	r3, #1
 8012268:	6063      	str	r3, [r4, #4]
 801226a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801226c:	3301      	adds	r3, #1
 801226e:	9321      	str	r3, [sp, #132]	; 0x84
 8012270:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012272:	3301      	adds	r3, #1
 8012274:	2b07      	cmp	r3, #7
 8012276:	9320      	str	r3, [sp, #128]	; 0x80
 8012278:	dc01      	bgt.n	801227e <_svfprintf_r+0x8e6>
 801227a:	3408      	adds	r4, #8
 801227c:	e008      	b.n	8012290 <_svfprintf_r+0x8f8>
 801227e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012280:	4659      	mov	r1, fp
 8012282:	4650      	mov	r0, sl
 8012284:	f001 fd6a 	bl	8013d5c <__ssprint_r>
 8012288:	2800      	cmp	r0, #0
 801228a:	f040 8207 	bne.w	801269c <_svfprintf_r+0xd04>
 801228e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012290:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012292:	b923      	cbnz	r3, 801229e <_svfprintf_r+0x906>
 8012294:	9b04      	ldr	r3, [sp, #16]
 8012296:	b913      	cbnz	r3, 801229e <_svfprintf_r+0x906>
 8012298:	07e8      	lsls	r0, r5, #31
 801229a:	f140 81af 	bpl.w	80125fc <_svfprintf_r+0xc64>
 801229e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80122a0:	6023      	str	r3, [r4, #0]
 80122a2:	9b08      	ldr	r3, [sp, #32]
 80122a4:	6063      	str	r3, [r4, #4]
 80122a6:	9a08      	ldr	r2, [sp, #32]
 80122a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122aa:	4413      	add	r3, r2
 80122ac:	9321      	str	r3, [sp, #132]	; 0x84
 80122ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80122b0:	3301      	adds	r3, #1
 80122b2:	2b07      	cmp	r3, #7
 80122b4:	9320      	str	r3, [sp, #128]	; 0x80
 80122b6:	dc02      	bgt.n	80122be <_svfprintf_r+0x926>
 80122b8:	f104 0308 	add.w	r3, r4, #8
 80122bc:	e008      	b.n	80122d0 <_svfprintf_r+0x938>
 80122be:	aa1f      	add	r2, sp, #124	; 0x7c
 80122c0:	4659      	mov	r1, fp
 80122c2:	4650      	mov	r0, sl
 80122c4:	f001 fd4a 	bl	8013d5c <__ssprint_r>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	f040 81e7 	bne.w	801269c <_svfprintf_r+0xd04>
 80122ce:	ab2c      	add	r3, sp, #176	; 0xb0
 80122d0:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80122d2:	4276      	negs	r6, r6
 80122d4:	2e00      	cmp	r6, #0
 80122d6:	dd30      	ble.n	801233a <_svfprintf_r+0x9a2>
 80122d8:	4f82      	ldr	r7, [pc, #520]	; (80124e4 <_svfprintf_r+0xb4c>)
 80122da:	2410      	movs	r4, #16
 80122dc:	2e10      	cmp	r6, #16
 80122de:	dd16      	ble.n	801230e <_svfprintf_r+0x976>
 80122e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122e2:	601f      	str	r7, [r3, #0]
 80122e4:	3210      	adds	r2, #16
 80122e6:	9221      	str	r2, [sp, #132]	; 0x84
 80122e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80122ea:	605c      	str	r4, [r3, #4]
 80122ec:	3201      	adds	r2, #1
 80122ee:	2a07      	cmp	r2, #7
 80122f0:	9220      	str	r2, [sp, #128]	; 0x80
 80122f2:	dc01      	bgt.n	80122f8 <_svfprintf_r+0x960>
 80122f4:	3308      	adds	r3, #8
 80122f6:	e008      	b.n	801230a <_svfprintf_r+0x972>
 80122f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80122fa:	4659      	mov	r1, fp
 80122fc:	4650      	mov	r0, sl
 80122fe:	f001 fd2d 	bl	8013d5c <__ssprint_r>
 8012302:	2800      	cmp	r0, #0
 8012304:	f040 81ca 	bne.w	801269c <_svfprintf_r+0xd04>
 8012308:	ab2c      	add	r3, sp, #176	; 0xb0
 801230a:	3e10      	subs	r6, #16
 801230c:	e7e6      	b.n	80122dc <_svfprintf_r+0x944>
 801230e:	4a75      	ldr	r2, [pc, #468]	; (80124e4 <_svfprintf_r+0xb4c>)
 8012310:	e883 0044 	stmia.w	r3, {r2, r6}
 8012314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012316:	4416      	add	r6, r2
 8012318:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801231a:	9621      	str	r6, [sp, #132]	; 0x84
 801231c:	3201      	adds	r2, #1
 801231e:	2a07      	cmp	r2, #7
 8012320:	9220      	str	r2, [sp, #128]	; 0x80
 8012322:	dc01      	bgt.n	8012328 <_svfprintf_r+0x990>
 8012324:	3308      	adds	r3, #8
 8012326:	e008      	b.n	801233a <_svfprintf_r+0x9a2>
 8012328:	aa1f      	add	r2, sp, #124	; 0x7c
 801232a:	4659      	mov	r1, fp
 801232c:	4650      	mov	r0, sl
 801232e:	f001 fd15 	bl	8013d5c <__ssprint_r>
 8012332:	2800      	cmp	r0, #0
 8012334:	f040 81b2 	bne.w	801269c <_svfprintf_r+0xd04>
 8012338:	ab2c      	add	r3, sp, #176	; 0xb0
 801233a:	9a04      	ldr	r2, [sp, #16]
 801233c:	605a      	str	r2, [r3, #4]
 801233e:	9904      	ldr	r1, [sp, #16]
 8012340:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012342:	f8c3 8000 	str.w	r8, [r3]
 8012346:	440a      	add	r2, r1
 8012348:	9221      	str	r2, [sp, #132]	; 0x84
 801234a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801234c:	3201      	adds	r2, #1
 801234e:	2a07      	cmp	r2, #7
 8012350:	9220      	str	r2, [sp, #128]	; 0x80
 8012352:	f73f af0e 	bgt.w	8012172 <_svfprintf_r+0x7da>
 8012356:	f103 0408 	add.w	r4, r3, #8
 801235a:	e14f      	b.n	80125fc <_svfprintf_r+0xc64>
 801235c:	9b04      	ldr	r3, [sp, #16]
 801235e:	42bb      	cmp	r3, r7
 8012360:	bfa8      	it	ge
 8012362:	463b      	movge	r3, r7
 8012364:	2b00      	cmp	r3, #0
 8012366:	461e      	mov	r6, r3
 8012368:	dd15      	ble.n	8012396 <_svfprintf_r+0x9fe>
 801236a:	6063      	str	r3, [r4, #4]
 801236c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801236e:	f8c4 8000 	str.w	r8, [r4]
 8012372:	4433      	add	r3, r6
 8012374:	9321      	str	r3, [sp, #132]	; 0x84
 8012376:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012378:	3301      	adds	r3, #1
 801237a:	2b07      	cmp	r3, #7
 801237c:	9320      	str	r3, [sp, #128]	; 0x80
 801237e:	dc01      	bgt.n	8012384 <_svfprintf_r+0x9ec>
 8012380:	3408      	adds	r4, #8
 8012382:	e008      	b.n	8012396 <_svfprintf_r+0x9fe>
 8012384:	aa1f      	add	r2, sp, #124	; 0x7c
 8012386:	4659      	mov	r1, fp
 8012388:	4650      	mov	r0, sl
 801238a:	f001 fce7 	bl	8013d5c <__ssprint_r>
 801238e:	2800      	cmp	r0, #0
 8012390:	f040 8184 	bne.w	801269c <_svfprintf_r+0xd04>
 8012394:	ac2c      	add	r4, sp, #176	; 0xb0
 8012396:	2e00      	cmp	r6, #0
 8012398:	bfac      	ite	ge
 801239a:	1bbe      	subge	r6, r7, r6
 801239c:	463e      	movlt	r6, r7
 801239e:	2e00      	cmp	r6, #0
 80123a0:	dd30      	ble.n	8012404 <_svfprintf_r+0xa6c>
 80123a2:	f04f 0910 	mov.w	r9, #16
 80123a6:	4b4f      	ldr	r3, [pc, #316]	; (80124e4 <_svfprintf_r+0xb4c>)
 80123a8:	6023      	str	r3, [r4, #0]
 80123aa:	2e10      	cmp	r6, #16
 80123ac:	dd16      	ble.n	80123dc <_svfprintf_r+0xa44>
 80123ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123b0:	f8c4 9004 	str.w	r9, [r4, #4]
 80123b4:	3310      	adds	r3, #16
 80123b6:	9321      	str	r3, [sp, #132]	; 0x84
 80123b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80123ba:	3301      	adds	r3, #1
 80123bc:	2b07      	cmp	r3, #7
 80123be:	9320      	str	r3, [sp, #128]	; 0x80
 80123c0:	dc01      	bgt.n	80123c6 <_svfprintf_r+0xa2e>
 80123c2:	3408      	adds	r4, #8
 80123c4:	e008      	b.n	80123d8 <_svfprintf_r+0xa40>
 80123c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80123c8:	4659      	mov	r1, fp
 80123ca:	4650      	mov	r0, sl
 80123cc:	f001 fcc6 	bl	8013d5c <__ssprint_r>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	f040 8163 	bne.w	801269c <_svfprintf_r+0xd04>
 80123d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80123d8:	3e10      	subs	r6, #16
 80123da:	e7e4      	b.n	80123a6 <_svfprintf_r+0xa0e>
 80123dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123de:	6066      	str	r6, [r4, #4]
 80123e0:	441e      	add	r6, r3
 80123e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80123e4:	9621      	str	r6, [sp, #132]	; 0x84
 80123e6:	3301      	adds	r3, #1
 80123e8:	2b07      	cmp	r3, #7
 80123ea:	9320      	str	r3, [sp, #128]	; 0x80
 80123ec:	dc01      	bgt.n	80123f2 <_svfprintf_r+0xa5a>
 80123ee:	3408      	adds	r4, #8
 80123f0:	e008      	b.n	8012404 <_svfprintf_r+0xa6c>
 80123f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80123f4:	4659      	mov	r1, fp
 80123f6:	4650      	mov	r0, sl
 80123f8:	f001 fcb0 	bl	8013d5c <__ssprint_r>
 80123fc:	2800      	cmp	r0, #0
 80123fe:	f040 814d 	bne.w	801269c <_svfprintf_r+0xd04>
 8012402:	ac2c      	add	r4, sp, #176	; 0xb0
 8012404:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012406:	9a04      	ldr	r2, [sp, #16]
 8012408:	4293      	cmp	r3, r2
 801240a:	4447      	add	r7, r8
 801240c:	db01      	blt.n	8012412 <_svfprintf_r+0xa7a>
 801240e:	07e9      	lsls	r1, r5, #31
 8012410:	d517      	bpl.n	8012442 <_svfprintf_r+0xaaa>
 8012412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012414:	6023      	str	r3, [r4, #0]
 8012416:	9b08      	ldr	r3, [sp, #32]
 8012418:	6063      	str	r3, [r4, #4]
 801241a:	9a08      	ldr	r2, [sp, #32]
 801241c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801241e:	4413      	add	r3, r2
 8012420:	9321      	str	r3, [sp, #132]	; 0x84
 8012422:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012424:	3301      	adds	r3, #1
 8012426:	2b07      	cmp	r3, #7
 8012428:	9320      	str	r3, [sp, #128]	; 0x80
 801242a:	dc01      	bgt.n	8012430 <_svfprintf_r+0xa98>
 801242c:	3408      	adds	r4, #8
 801242e:	e008      	b.n	8012442 <_svfprintf_r+0xaaa>
 8012430:	aa1f      	add	r2, sp, #124	; 0x7c
 8012432:	4659      	mov	r1, fp
 8012434:	4650      	mov	r0, sl
 8012436:	f001 fc91 	bl	8013d5c <__ssprint_r>
 801243a:	2800      	cmp	r0, #0
 801243c:	f040 812e 	bne.w	801269c <_svfprintf_r+0xd04>
 8012440:	ac2c      	add	r4, sp, #176	; 0xb0
 8012442:	9b04      	ldr	r3, [sp, #16]
 8012444:	9a04      	ldr	r2, [sp, #16]
 8012446:	eb08 0603 	add.w	r6, r8, r3
 801244a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801244c:	1bf6      	subs	r6, r6, r7
 801244e:	1ad3      	subs	r3, r2, r3
 8012450:	429e      	cmp	r6, r3
 8012452:	bfa8      	it	ge
 8012454:	461e      	movge	r6, r3
 8012456:	2e00      	cmp	r6, #0
 8012458:	dd14      	ble.n	8012484 <_svfprintf_r+0xaec>
 801245a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801245c:	6027      	str	r7, [r4, #0]
 801245e:	4433      	add	r3, r6
 8012460:	9321      	str	r3, [sp, #132]	; 0x84
 8012462:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012464:	6066      	str	r6, [r4, #4]
 8012466:	3301      	adds	r3, #1
 8012468:	2b07      	cmp	r3, #7
 801246a:	9320      	str	r3, [sp, #128]	; 0x80
 801246c:	dc01      	bgt.n	8012472 <_svfprintf_r+0xada>
 801246e:	3408      	adds	r4, #8
 8012470:	e008      	b.n	8012484 <_svfprintf_r+0xaec>
 8012472:	aa1f      	add	r2, sp, #124	; 0x7c
 8012474:	4659      	mov	r1, fp
 8012476:	4650      	mov	r0, sl
 8012478:	f001 fc70 	bl	8013d5c <__ssprint_r>
 801247c:	2800      	cmp	r0, #0
 801247e:	f040 810d 	bne.w	801269c <_svfprintf_r+0xd04>
 8012482:	ac2c      	add	r4, sp, #176	; 0xb0
 8012484:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012486:	9a04      	ldr	r2, [sp, #16]
 8012488:	2e00      	cmp	r6, #0
 801248a:	eba2 0303 	sub.w	r3, r2, r3
 801248e:	bfac      	ite	ge
 8012490:	1b9e      	subge	r6, r3, r6
 8012492:	461e      	movlt	r6, r3
 8012494:	2e00      	cmp	r6, #0
 8012496:	f340 80b1 	ble.w	80125fc <_svfprintf_r+0xc64>
 801249a:	4f12      	ldr	r7, [pc, #72]	; (80124e4 <_svfprintf_r+0xb4c>)
 801249c:	f04f 0810 	mov.w	r8, #16
 80124a0:	2e10      	cmp	r6, #16
 80124a2:	dd16      	ble.n	80124d2 <_svfprintf_r+0xb3a>
 80124a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124a6:	3310      	adds	r3, #16
 80124a8:	9321      	str	r3, [sp, #132]	; 0x84
 80124aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80124ac:	3301      	adds	r3, #1
 80124ae:	2b07      	cmp	r3, #7
 80124b0:	e884 0180 	stmia.w	r4, {r7, r8}
 80124b4:	9320      	str	r3, [sp, #128]	; 0x80
 80124b6:	dc01      	bgt.n	80124bc <_svfprintf_r+0xb24>
 80124b8:	3408      	adds	r4, #8
 80124ba:	e008      	b.n	80124ce <_svfprintf_r+0xb36>
 80124bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80124be:	4659      	mov	r1, fp
 80124c0:	4650      	mov	r0, sl
 80124c2:	f001 fc4b 	bl	8013d5c <__ssprint_r>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	f040 80e8 	bne.w	801269c <_svfprintf_r+0xd04>
 80124cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80124ce:	3e10      	subs	r6, #16
 80124d0:	e7e6      	b.n	80124a0 <_svfprintf_r+0xb08>
 80124d2:	4b04      	ldr	r3, [pc, #16]	; (80124e4 <_svfprintf_r+0xb4c>)
 80124d4:	e884 0048 	stmia.w	r4, {r3, r6}
 80124d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124da:	441e      	add	r6, r3
 80124dc:	9621      	str	r6, [sp, #132]	; 0x84
 80124de:	e642      	b.n	8012166 <_svfprintf_r+0x7ce>
 80124e0:	0802d157 	.word	0x0802d157
 80124e4:	0802d289 	.word	0x0802d289
 80124e8:	9b04      	ldr	r3, [sp, #16]
 80124ea:	2b01      	cmp	r3, #1
 80124ec:	dc01      	bgt.n	80124f2 <_svfprintf_r+0xb5a>
 80124ee:	07ea      	lsls	r2, r5, #31
 80124f0:	d573      	bpl.n	80125da <_svfprintf_r+0xc42>
 80124f2:	2301      	movs	r3, #1
 80124f4:	6063      	str	r3, [r4, #4]
 80124f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124f8:	f8c4 8000 	str.w	r8, [r4]
 80124fc:	3301      	adds	r3, #1
 80124fe:	9321      	str	r3, [sp, #132]	; 0x84
 8012500:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012502:	3301      	adds	r3, #1
 8012504:	2b07      	cmp	r3, #7
 8012506:	9320      	str	r3, [sp, #128]	; 0x80
 8012508:	dc01      	bgt.n	801250e <_svfprintf_r+0xb76>
 801250a:	3408      	adds	r4, #8
 801250c:	e008      	b.n	8012520 <_svfprintf_r+0xb88>
 801250e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012510:	4659      	mov	r1, fp
 8012512:	4650      	mov	r0, sl
 8012514:	f001 fc22 	bl	8013d5c <__ssprint_r>
 8012518:	2800      	cmp	r0, #0
 801251a:	f040 80bf 	bne.w	801269c <_svfprintf_r+0xd04>
 801251e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012522:	6023      	str	r3, [r4, #0]
 8012524:	9b08      	ldr	r3, [sp, #32]
 8012526:	6063      	str	r3, [r4, #4]
 8012528:	9a08      	ldr	r2, [sp, #32]
 801252a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801252c:	4413      	add	r3, r2
 801252e:	9321      	str	r3, [sp, #132]	; 0x84
 8012530:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012532:	3301      	adds	r3, #1
 8012534:	2b07      	cmp	r3, #7
 8012536:	9320      	str	r3, [sp, #128]	; 0x80
 8012538:	dc01      	bgt.n	801253e <_svfprintf_r+0xba6>
 801253a:	3408      	adds	r4, #8
 801253c:	e008      	b.n	8012550 <_svfprintf_r+0xbb8>
 801253e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012540:	4659      	mov	r1, fp
 8012542:	4650      	mov	r0, sl
 8012544:	f001 fc0a 	bl	8013d5c <__ssprint_r>
 8012548:	2800      	cmp	r0, #0
 801254a:	f040 80a7 	bne.w	801269c <_svfprintf_r+0xd04>
 801254e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012550:	2300      	movs	r3, #0
 8012552:	2200      	movs	r2, #0
 8012554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012558:	f7ee fb32 	bl	8000bc0 <__aeabi_dcmpeq>
 801255c:	9b04      	ldr	r3, [sp, #16]
 801255e:	1e5e      	subs	r6, r3, #1
 8012560:	b9b8      	cbnz	r0, 8012592 <_svfprintf_r+0xbfa>
 8012562:	f108 0301 	add.w	r3, r8, #1
 8012566:	e884 0048 	stmia.w	r4, {r3, r6}
 801256a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801256c:	9a04      	ldr	r2, [sp, #16]
 801256e:	3b01      	subs	r3, #1
 8012570:	4413      	add	r3, r2
 8012572:	9321      	str	r3, [sp, #132]	; 0x84
 8012574:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012576:	3301      	adds	r3, #1
 8012578:	2b07      	cmp	r3, #7
 801257a:	9320      	str	r3, [sp, #128]	; 0x80
 801257c:	dd34      	ble.n	80125e8 <_svfprintf_r+0xc50>
 801257e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012580:	4659      	mov	r1, fp
 8012582:	4650      	mov	r0, sl
 8012584:	f001 fbea 	bl	8013d5c <__ssprint_r>
 8012588:	2800      	cmp	r0, #0
 801258a:	f040 8087 	bne.w	801269c <_svfprintf_r+0xd04>
 801258e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012590:	e02b      	b.n	80125ea <_svfprintf_r+0xc52>
 8012592:	2e00      	cmp	r6, #0
 8012594:	dd29      	ble.n	80125ea <_svfprintf_r+0xc52>
 8012596:	4fa7      	ldr	r7, [pc, #668]	; (8012834 <_svfprintf_r+0xe9c>)
 8012598:	f04f 0810 	mov.w	r8, #16
 801259c:	2e10      	cmp	r6, #16
 801259e:	dd15      	ble.n	80125cc <_svfprintf_r+0xc34>
 80125a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125a2:	3310      	adds	r3, #16
 80125a4:	9321      	str	r3, [sp, #132]	; 0x84
 80125a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80125a8:	3301      	adds	r3, #1
 80125aa:	2b07      	cmp	r3, #7
 80125ac:	e884 0180 	stmia.w	r4, {r7, r8}
 80125b0:	9320      	str	r3, [sp, #128]	; 0x80
 80125b2:	dc01      	bgt.n	80125b8 <_svfprintf_r+0xc20>
 80125b4:	3408      	adds	r4, #8
 80125b6:	e007      	b.n	80125c8 <_svfprintf_r+0xc30>
 80125b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80125ba:	4659      	mov	r1, fp
 80125bc:	4650      	mov	r0, sl
 80125be:	f001 fbcd 	bl	8013d5c <__ssprint_r>
 80125c2:	2800      	cmp	r0, #0
 80125c4:	d16a      	bne.n	801269c <_svfprintf_r+0xd04>
 80125c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80125c8:	3e10      	subs	r6, #16
 80125ca:	e7e7      	b.n	801259c <_svfprintf_r+0xc04>
 80125cc:	4b99      	ldr	r3, [pc, #612]	; (8012834 <_svfprintf_r+0xe9c>)
 80125ce:	e884 0048 	stmia.w	r4, {r3, r6}
 80125d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125d4:	441e      	add	r6, r3
 80125d6:	9621      	str	r6, [sp, #132]	; 0x84
 80125d8:	e7cc      	b.n	8012574 <_svfprintf_r+0xbdc>
 80125da:	2301      	movs	r3, #1
 80125dc:	6063      	str	r3, [r4, #4]
 80125de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125e0:	f8c4 8000 	str.w	r8, [r4]
 80125e4:	3301      	adds	r3, #1
 80125e6:	e7c4      	b.n	8012572 <_svfprintf_r+0xbda>
 80125e8:	3408      	adds	r4, #8
 80125ea:	ab1b      	add	r3, sp, #108	; 0x6c
 80125ec:	6023      	str	r3, [r4, #0]
 80125ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125f0:	6063      	str	r3, [r4, #4]
 80125f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80125f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125f6:	4413      	add	r3, r2
 80125f8:	e5b4      	b.n	8012164 <_svfprintf_r+0x7cc>
 80125fa:	3408      	adds	r4, #8
 80125fc:	076b      	lsls	r3, r5, #29
 80125fe:	d40b      	bmi.n	8012618 <_svfprintf_r+0xc80>
 8012600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012604:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012606:	428a      	cmp	r2, r1
 8012608:	bfac      	ite	ge
 801260a:	189b      	addge	r3, r3, r2
 801260c:	185b      	addlt	r3, r3, r1
 801260e:	930a      	str	r3, [sp, #40]	; 0x28
 8012610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012612:	2b00      	cmp	r3, #0
 8012614:	d035      	beq.n	8012682 <_svfprintf_r+0xcea>
 8012616:	e02e      	b.n	8012676 <_svfprintf_r+0xcde>
 8012618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801261a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801261c:	1a9d      	subs	r5, r3, r2
 801261e:	2d00      	cmp	r5, #0
 8012620:	ddee      	ble.n	8012600 <_svfprintf_r+0xc68>
 8012622:	2610      	movs	r6, #16
 8012624:	4b84      	ldr	r3, [pc, #528]	; (8012838 <_svfprintf_r+0xea0>)
 8012626:	6023      	str	r3, [r4, #0]
 8012628:	2d10      	cmp	r5, #16
 801262a:	dd13      	ble.n	8012654 <_svfprintf_r+0xcbc>
 801262c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801262e:	6066      	str	r6, [r4, #4]
 8012630:	3310      	adds	r3, #16
 8012632:	9321      	str	r3, [sp, #132]	; 0x84
 8012634:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012636:	3301      	adds	r3, #1
 8012638:	2b07      	cmp	r3, #7
 801263a:	9320      	str	r3, [sp, #128]	; 0x80
 801263c:	dc01      	bgt.n	8012642 <_svfprintf_r+0xcaa>
 801263e:	3408      	adds	r4, #8
 8012640:	e006      	b.n	8012650 <_svfprintf_r+0xcb8>
 8012642:	aa1f      	add	r2, sp, #124	; 0x7c
 8012644:	4659      	mov	r1, fp
 8012646:	4650      	mov	r0, sl
 8012648:	f001 fb88 	bl	8013d5c <__ssprint_r>
 801264c:	bb30      	cbnz	r0, 801269c <_svfprintf_r+0xd04>
 801264e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012650:	3d10      	subs	r5, #16
 8012652:	e7e7      	b.n	8012624 <_svfprintf_r+0xc8c>
 8012654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012656:	6065      	str	r5, [r4, #4]
 8012658:	441d      	add	r5, r3
 801265a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801265c:	9521      	str	r5, [sp, #132]	; 0x84
 801265e:	3301      	adds	r3, #1
 8012660:	2b07      	cmp	r3, #7
 8012662:	9320      	str	r3, [sp, #128]	; 0x80
 8012664:	ddcc      	ble.n	8012600 <_svfprintf_r+0xc68>
 8012666:	aa1f      	add	r2, sp, #124	; 0x7c
 8012668:	4659      	mov	r1, fp
 801266a:	4650      	mov	r0, sl
 801266c:	f001 fb76 	bl	8013d5c <__ssprint_r>
 8012670:	2800      	cmp	r0, #0
 8012672:	d0c5      	beq.n	8012600 <_svfprintf_r+0xc68>
 8012674:	e012      	b.n	801269c <_svfprintf_r+0xd04>
 8012676:	aa1f      	add	r2, sp, #124	; 0x7c
 8012678:	4659      	mov	r1, fp
 801267a:	4650      	mov	r0, sl
 801267c:	f001 fb6e 	bl	8013d5c <__ssprint_r>
 8012680:	b960      	cbnz	r0, 801269c <_svfprintf_r+0xd04>
 8012682:	2300      	movs	r3, #0
 8012684:	9320      	str	r3, [sp, #128]	; 0x80
 8012686:	9f03      	ldr	r7, [sp, #12]
 8012688:	ac2c      	add	r4, sp, #176	; 0xb0
 801268a:	f7ff b9bb 	b.w	8011a04 <_svfprintf_r+0x6c>
 801268e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012690:	b123      	cbz	r3, 801269c <_svfprintf_r+0xd04>
 8012692:	aa1f      	add	r2, sp, #124	; 0x7c
 8012694:	4659      	mov	r1, fp
 8012696:	4650      	mov	r0, sl
 8012698:	f001 fb60 	bl	8013d5c <__ssprint_r>
 801269c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80126a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80126a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126a6:	bf18      	it	ne
 80126a8:	f04f 33ff 	movne.w	r3, #4294967295
 80126ac:	4618      	mov	r0, r3
 80126ae:	e12e      	b.n	801290e <_svfprintf_r+0xf76>
 80126b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126b4:	4610      	mov	r0, r2
 80126b6:	4619      	mov	r1, r3
 80126b8:	f7ee fab4 	bl	8000c24 <__aeabi_dcmpun>
 80126bc:	b160      	cbz	r0, 80126d8 <_svfprintf_r+0xd40>
 80126be:	4b5f      	ldr	r3, [pc, #380]	; (801283c <_svfprintf_r+0xea4>)
 80126c0:	4a5f      	ldr	r2, [pc, #380]	; (8012840 <_svfprintf_r+0xea8>)
 80126c2:	9902      	ldr	r1, [sp, #8]
 80126c4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80126c8:	2947      	cmp	r1, #71	; 0x47
 80126ca:	bfcc      	ite	gt
 80126cc:	4690      	movgt	r8, r2
 80126ce:	4698      	movle	r8, r3
 80126d0:	f04f 0903 	mov.w	r9, #3
 80126d4:	2600      	movs	r6, #0
 80126d6:	e44e      	b.n	8011f76 <_svfprintf_r+0x5de>
 80126d8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80126dc:	d00a      	beq.n	80126f4 <_svfprintf_r+0xd5c>
 80126de:	9b02      	ldr	r3, [sp, #8]
 80126e0:	f023 0320 	bic.w	r3, r3, #32
 80126e4:	2b47      	cmp	r3, #71	; 0x47
 80126e6:	d107      	bne.n	80126f8 <_svfprintf_r+0xd60>
 80126e8:	f1b9 0f00 	cmp.w	r9, #0
 80126ec:	bf08      	it	eq
 80126ee:	f04f 0901 	moveq.w	r9, #1
 80126f2:	e001      	b.n	80126f8 <_svfprintf_r+0xd60>
 80126f4:	f04f 0906 	mov.w	r9, #6
 80126f8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80126fc:	930c      	str	r3, [sp, #48]	; 0x30
 80126fe:	9b07      	ldr	r3, [sp, #28]
 8012700:	2b00      	cmp	r3, #0
 8012702:	da07      	bge.n	8012714 <_svfprintf_r+0xd7c>
 8012704:	9b06      	ldr	r3, [sp, #24]
 8012706:	930e      	str	r3, [sp, #56]	; 0x38
 8012708:	9b07      	ldr	r3, [sp, #28]
 801270a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801270e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012710:	232d      	movs	r3, #45	; 0x2d
 8012712:	e004      	b.n	801271e <_svfprintf_r+0xd86>
 8012714:	ed9d 7b06 	vldr	d7, [sp, #24]
 8012718:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801271c:	2300      	movs	r3, #0
 801271e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012720:	9b02      	ldr	r3, [sp, #8]
 8012722:	f023 0720 	bic.w	r7, r3, #32
 8012726:	2f46      	cmp	r7, #70	; 0x46
 8012728:	d004      	beq.n	8012734 <_svfprintf_r+0xd9c>
 801272a:	2f45      	cmp	r7, #69	; 0x45
 801272c:	d105      	bne.n	801273a <_svfprintf_r+0xda2>
 801272e:	f109 0601 	add.w	r6, r9, #1
 8012732:	e003      	b.n	801273c <_svfprintf_r+0xda4>
 8012734:	464e      	mov	r6, r9
 8012736:	2103      	movs	r1, #3
 8012738:	e001      	b.n	801273e <_svfprintf_r+0xda6>
 801273a:	464e      	mov	r6, r9
 801273c:	2102      	movs	r1, #2
 801273e:	ab1d      	add	r3, sp, #116	; 0x74
 8012740:	9301      	str	r3, [sp, #4]
 8012742:	ab1a      	add	r3, sp, #104	; 0x68
 8012744:	9300      	str	r3, [sp, #0]
 8012746:	4632      	mov	r2, r6
 8012748:	ab19      	add	r3, sp, #100	; 0x64
 801274a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 801274e:	4650      	mov	r0, sl
 8012750:	f000 f976 	bl	8012a40 <_dtoa_r>
 8012754:	2f47      	cmp	r7, #71	; 0x47
 8012756:	4680      	mov	r8, r0
 8012758:	d102      	bne.n	8012760 <_svfprintf_r+0xdc8>
 801275a:	07eb      	lsls	r3, r5, #31
 801275c:	f140 80cd 	bpl.w	80128fa <_svfprintf_r+0xf62>
 8012760:	eb08 0306 	add.w	r3, r8, r6
 8012764:	2f46      	cmp	r7, #70	; 0x46
 8012766:	9304      	str	r3, [sp, #16]
 8012768:	d111      	bne.n	801278e <_svfprintf_r+0xdf6>
 801276a:	f898 3000 	ldrb.w	r3, [r8]
 801276e:	2b30      	cmp	r3, #48	; 0x30
 8012770:	d109      	bne.n	8012786 <_svfprintf_r+0xdee>
 8012772:	2200      	movs	r2, #0
 8012774:	2300      	movs	r3, #0
 8012776:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801277a:	f7ee fa21 	bl	8000bc0 <__aeabi_dcmpeq>
 801277e:	b910      	cbnz	r0, 8012786 <_svfprintf_r+0xdee>
 8012780:	f1c6 0601 	rsb	r6, r6, #1
 8012784:	9619      	str	r6, [sp, #100]	; 0x64
 8012786:	9a04      	ldr	r2, [sp, #16]
 8012788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801278a:	441a      	add	r2, r3
 801278c:	9204      	str	r2, [sp, #16]
 801278e:	2200      	movs	r2, #0
 8012790:	2300      	movs	r3, #0
 8012792:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012796:	f7ee fa13 	bl	8000bc0 <__aeabi_dcmpeq>
 801279a:	b908      	cbnz	r0, 80127a0 <_svfprintf_r+0xe08>
 801279c:	2230      	movs	r2, #48	; 0x30
 801279e:	e002      	b.n	80127a6 <_svfprintf_r+0xe0e>
 80127a0:	9b04      	ldr	r3, [sp, #16]
 80127a2:	931d      	str	r3, [sp, #116]	; 0x74
 80127a4:	e007      	b.n	80127b6 <_svfprintf_r+0xe1e>
 80127a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80127a8:	9904      	ldr	r1, [sp, #16]
 80127aa:	4299      	cmp	r1, r3
 80127ac:	d903      	bls.n	80127b6 <_svfprintf_r+0xe1e>
 80127ae:	1c59      	adds	r1, r3, #1
 80127b0:	911d      	str	r1, [sp, #116]	; 0x74
 80127b2:	701a      	strb	r2, [r3, #0]
 80127b4:	e7f7      	b.n	80127a6 <_svfprintf_r+0xe0e>
 80127b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80127b8:	2f47      	cmp	r7, #71	; 0x47
 80127ba:	ebc8 0303 	rsb	r3, r8, r3
 80127be:	9304      	str	r3, [sp, #16]
 80127c0:	d108      	bne.n	80127d4 <_svfprintf_r+0xe3c>
 80127c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80127c4:	1cdf      	adds	r7, r3, #3
 80127c6:	db01      	blt.n	80127cc <_svfprintf_r+0xe34>
 80127c8:	4599      	cmp	r9, r3
 80127ca:	da68      	bge.n	801289e <_svfprintf_r+0xf06>
 80127cc:	9b02      	ldr	r3, [sp, #8]
 80127ce:	3b02      	subs	r3, #2
 80127d0:	9302      	str	r3, [sp, #8]
 80127d2:	e002      	b.n	80127da <_svfprintf_r+0xe42>
 80127d4:	9b02      	ldr	r3, [sp, #8]
 80127d6:	2b65      	cmp	r3, #101	; 0x65
 80127d8:	dc4a      	bgt.n	8012870 <_svfprintf_r+0xed8>
 80127da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80127dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80127e0:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 80127e4:	3b01      	subs	r3, #1
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	9319      	str	r3, [sp, #100]	; 0x64
 80127ea:	bfba      	itte	lt
 80127ec:	425b      	neglt	r3, r3
 80127ee:	222d      	movlt	r2, #45	; 0x2d
 80127f0:	222b      	movge	r2, #43	; 0x2b
 80127f2:	2b09      	cmp	r3, #9
 80127f4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80127f8:	dd24      	ble.n	8012844 <_svfprintf_r+0xeac>
 80127fa:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80127fe:	200a      	movs	r0, #10
 8012800:	fb93 f1f0 	sdiv	r1, r3, r0
 8012804:	fb00 3311 	mls	r3, r0, r1, r3
 8012808:	3330      	adds	r3, #48	; 0x30
 801280a:	2909      	cmp	r1, #9
 801280c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8012810:	460b      	mov	r3, r1
 8012812:	dcf5      	bgt.n	8012800 <_svfprintf_r+0xe68>
 8012814:	3330      	adds	r3, #48	; 0x30
 8012816:	f802 3c01 	strb.w	r3, [r2, #-1]
 801281a:	1e51      	subs	r1, r2, #1
 801281c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8012820:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8012824:	4281      	cmp	r1, r0
 8012826:	461a      	mov	r2, r3
 8012828:	d213      	bcs.n	8012852 <_svfprintf_r+0xeba>
 801282a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801282e:	f803 2b01 	strb.w	r2, [r3], #1
 8012832:	e7f7      	b.n	8012824 <_svfprintf_r+0xe8c>
 8012834:	0802d289 	.word	0x0802d289
 8012838:	0802d2cb 	.word	0x0802d2cb
 801283c:	0802d2a1 	.word	0x0802d2a1
 8012840:	0802d2a5 	.word	0x0802d2a5
 8012844:	2230      	movs	r2, #48	; 0x30
 8012846:	4413      	add	r3, r2
 8012848:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 801284c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8012850:	aa1c      	add	r2, sp, #112	; 0x70
 8012852:	ab1b      	add	r3, sp, #108	; 0x6c
 8012854:	1ad3      	subs	r3, r2, r3
 8012856:	9a04      	ldr	r2, [sp, #16]
 8012858:	9310      	str	r3, [sp, #64]	; 0x40
 801285a:	2a01      	cmp	r2, #1
 801285c:	eb03 0902 	add.w	r9, r3, r2
 8012860:	dc02      	bgt.n	8012868 <_svfprintf_r+0xed0>
 8012862:	f015 0701 	ands.w	r7, r5, #1
 8012866:	d032      	beq.n	80128ce <_svfprintf_r+0xf36>
 8012868:	9b08      	ldr	r3, [sp, #32]
 801286a:	2700      	movs	r7, #0
 801286c:	4499      	add	r9, r3
 801286e:	e02e      	b.n	80128ce <_svfprintf_r+0xf36>
 8012870:	9b02      	ldr	r3, [sp, #8]
 8012872:	2b66      	cmp	r3, #102	; 0x66
 8012874:	d113      	bne.n	801289e <_svfprintf_r+0xf06>
 8012876:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012878:	2b00      	cmp	r3, #0
 801287a:	dd07      	ble.n	801288c <_svfprintf_r+0xef4>
 801287c:	f1b9 0f00 	cmp.w	r9, #0
 8012880:	d101      	bne.n	8012886 <_svfprintf_r+0xeee>
 8012882:	07ee      	lsls	r6, r5, #31
 8012884:	d521      	bpl.n	80128ca <_svfprintf_r+0xf32>
 8012886:	9a08      	ldr	r2, [sp, #32]
 8012888:	4413      	add	r3, r2
 801288a:	e006      	b.n	801289a <_svfprintf_r+0xf02>
 801288c:	f1b9 0f00 	cmp.w	r9, #0
 8012890:	d101      	bne.n	8012896 <_svfprintf_r+0xefe>
 8012892:	07ed      	lsls	r5, r5, #31
 8012894:	d514      	bpl.n	80128c0 <_svfprintf_r+0xf28>
 8012896:	9b08      	ldr	r3, [sp, #32]
 8012898:	3301      	adds	r3, #1
 801289a:	444b      	add	r3, r9
 801289c:	e015      	b.n	80128ca <_svfprintf_r+0xf32>
 801289e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80128a0:	9a04      	ldr	r2, [sp, #16]
 80128a2:	4293      	cmp	r3, r2
 80128a4:	db03      	blt.n	80128ae <_svfprintf_r+0xf16>
 80128a6:	07e8      	lsls	r0, r5, #31
 80128a8:	d50d      	bpl.n	80128c6 <_svfprintf_r+0xf2e>
 80128aa:	9a08      	ldr	r2, [sp, #32]
 80128ac:	e006      	b.n	80128bc <_svfprintf_r+0xf24>
 80128ae:	9a04      	ldr	r2, [sp, #16]
 80128b0:	9908      	ldr	r1, [sp, #32]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	440a      	add	r2, r1
 80128b6:	dc05      	bgt.n	80128c4 <_svfprintf_r+0xf2c>
 80128b8:	f1c3 0301 	rsb	r3, r3, #1
 80128bc:	4413      	add	r3, r2
 80128be:	e002      	b.n	80128c6 <_svfprintf_r+0xf2e>
 80128c0:	2301      	movs	r3, #1
 80128c2:	e002      	b.n	80128ca <_svfprintf_r+0xf32>
 80128c4:	4613      	mov	r3, r2
 80128c6:	2267      	movs	r2, #103	; 0x67
 80128c8:	9202      	str	r2, [sp, #8]
 80128ca:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80128cc:	4699      	mov	r9, r3
 80128ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128d0:	b113      	cbz	r3, 80128d8 <_svfprintf_r+0xf40>
 80128d2:	232d      	movs	r3, #45	; 0x2d
 80128d4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80128d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80128da:	2600      	movs	r6, #0
 80128dc:	f7ff bb4c 	b.w	8011f78 <_svfprintf_r+0x5e0>
 80128e0:	2200      	movs	r2, #0
 80128e2:	2300      	movs	r3, #0
 80128e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128e8:	f7ee f974 	bl	8000bd4 <__aeabi_dcmplt>
 80128ec:	b110      	cbz	r0, 80128f4 <_svfprintf_r+0xf5c>
 80128ee:	232d      	movs	r3, #45	; 0x2d
 80128f0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80128f4:	4b07      	ldr	r3, [pc, #28]	; (8012914 <_svfprintf_r+0xf7c>)
 80128f6:	4a08      	ldr	r2, [pc, #32]	; (8012918 <_svfprintf_r+0xf80>)
 80128f8:	e6e3      	b.n	80126c2 <_svfprintf_r+0xd2a>
 80128fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128fc:	1a1b      	subs	r3, r3, r0
 80128fe:	9304      	str	r3, [sp, #16]
 8012900:	e75f      	b.n	80127c2 <_svfprintf_r+0xe2a>
 8012902:	ea56 0207 	orrs.w	r2, r6, r7
 8012906:	f47f aaaa 	bne.w	8011e5e <_svfprintf_r+0x4c6>
 801290a:	f7ff baaf 	b.w	8011e6c <_svfprintf_r+0x4d4>
 801290e:	b03d      	add	sp, #244	; 0xf4
 8012910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012914:	0802d299 	.word	0x0802d299
 8012918:	0802d29d 	.word	0x0802d29d

0801291c <quorem>:
 801291c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012920:	6903      	ldr	r3, [r0, #16]
 8012922:	690c      	ldr	r4, [r1, #16]
 8012924:	429c      	cmp	r4, r3
 8012926:	4680      	mov	r8, r0
 8012928:	f300 8083 	bgt.w	8012a32 <quorem+0x116>
 801292c:	3c01      	subs	r4, #1
 801292e:	f101 0714 	add.w	r7, r1, #20
 8012932:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8012936:	f100 0614 	add.w	r6, r0, #20
 801293a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801293e:	eb06 030e 	add.w	r3, r6, lr
 8012942:	9301      	str	r3, [sp, #4]
 8012944:	3501      	adds	r5, #1
 8012946:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 801294a:	fbb3 f5f5 	udiv	r5, r3, r5
 801294e:	eb07 090e 	add.w	r9, r7, lr
 8012952:	2d00      	cmp	r5, #0
 8012954:	d039      	beq.n	80129ca <quorem+0xae>
 8012956:	f04f 0a00 	mov.w	sl, #0
 801295a:	4638      	mov	r0, r7
 801295c:	46b4      	mov	ip, r6
 801295e:	46d3      	mov	fp, sl
 8012960:	f850 2b04 	ldr.w	r2, [r0], #4
 8012964:	b293      	uxth	r3, r2
 8012966:	fb05 a303 	mla	r3, r5, r3, sl
 801296a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801296e:	b29b      	uxth	r3, r3
 8012970:	ebc3 030b 	rsb	r3, r3, fp
 8012974:	0c12      	lsrs	r2, r2, #16
 8012976:	f8bc b000 	ldrh.w	fp, [ip]
 801297a:	fb05 a202 	mla	r2, r5, r2, sl
 801297e:	fa13 f38b 	uxtah	r3, r3, fp
 8012982:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012986:	fa1f fb82 	uxth.w	fp, r2
 801298a:	f8dc 2000 	ldr.w	r2, [ip]
 801298e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012992:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012996:	b29b      	uxth	r3, r3
 8012998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801299c:	4581      	cmp	r9, r0
 801299e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80129a2:	f84c 3b04 	str.w	r3, [ip], #4
 80129a6:	d2db      	bcs.n	8012960 <quorem+0x44>
 80129a8:	f856 300e 	ldr.w	r3, [r6, lr]
 80129ac:	b96b      	cbnz	r3, 80129ca <quorem+0xae>
 80129ae:	9b01      	ldr	r3, [sp, #4]
 80129b0:	3b04      	subs	r3, #4
 80129b2:	429e      	cmp	r6, r3
 80129b4:	461a      	mov	r2, r3
 80129b6:	d302      	bcc.n	80129be <quorem+0xa2>
 80129b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80129bc:	e005      	b.n	80129ca <quorem+0xae>
 80129be:	6812      	ldr	r2, [r2, #0]
 80129c0:	3b04      	subs	r3, #4
 80129c2:	2a00      	cmp	r2, #0
 80129c4:	d1f8      	bne.n	80129b8 <quorem+0x9c>
 80129c6:	3c01      	subs	r4, #1
 80129c8:	e7f3      	b.n	80129b2 <quorem+0x96>
 80129ca:	4640      	mov	r0, r8
 80129cc:	f001 f8fd 	bl	8013bca <__mcmp>
 80129d0:	2800      	cmp	r0, #0
 80129d2:	db2c      	blt.n	8012a2e <quorem+0x112>
 80129d4:	3501      	adds	r5, #1
 80129d6:	4630      	mov	r0, r6
 80129d8:	f04f 0e00 	mov.w	lr, #0
 80129dc:	f857 1b04 	ldr.w	r1, [r7], #4
 80129e0:	f8d0 c000 	ldr.w	ip, [r0]
 80129e4:	b28a      	uxth	r2, r1
 80129e6:	ebc2 030e 	rsb	r3, r2, lr
 80129ea:	0c09      	lsrs	r1, r1, #16
 80129ec:	fa13 f38c 	uxtah	r3, r3, ip
 80129f0:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 80129f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80129f8:	b29b      	uxth	r3, r3
 80129fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129fe:	45b9      	cmp	r9, r7
 8012a00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012a04:	f840 3b04 	str.w	r3, [r0], #4
 8012a08:	d2e8      	bcs.n	80129dc <quorem+0xc0>
 8012a0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012a0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012a12:	b962      	cbnz	r2, 8012a2e <quorem+0x112>
 8012a14:	3b04      	subs	r3, #4
 8012a16:	429e      	cmp	r6, r3
 8012a18:	461a      	mov	r2, r3
 8012a1a:	d302      	bcc.n	8012a22 <quorem+0x106>
 8012a1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012a20:	e005      	b.n	8012a2e <quorem+0x112>
 8012a22:	6812      	ldr	r2, [r2, #0]
 8012a24:	3b04      	subs	r3, #4
 8012a26:	2a00      	cmp	r2, #0
 8012a28:	d1f8      	bne.n	8012a1c <quorem+0x100>
 8012a2a:	3c01      	subs	r4, #1
 8012a2c:	e7f3      	b.n	8012a16 <quorem+0xfa>
 8012a2e:	4628      	mov	r0, r5
 8012a30:	e000      	b.n	8012a34 <quorem+0x118>
 8012a32:	2000      	movs	r0, #0
 8012a34:	b003      	add	sp, #12
 8012a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a3a:	0000      	movs	r0, r0
 8012a3c:	0000      	movs	r0, r0
	...

08012a40 <_dtoa_r>:
 8012a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a44:	ec59 8b10 	vmov	r8, r9, d0
 8012a48:	b097      	sub	sp, #92	; 0x5c
 8012a4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012a4c:	9106      	str	r1, [sp, #24]
 8012a4e:	4682      	mov	sl, r0
 8012a50:	9209      	str	r2, [sp, #36]	; 0x24
 8012a52:	9310      	str	r3, [sp, #64]	; 0x40
 8012a54:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8012a56:	e9cd 8900 	strd	r8, r9, [sp]
 8012a5a:	b945      	cbnz	r5, 8012a6e <_dtoa_r+0x2e>
 8012a5c:	2010      	movs	r0, #16
 8012a5e:	f7fe fc93 	bl	8011388 <malloc>
 8012a62:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8012a66:	6045      	str	r5, [r0, #4]
 8012a68:	6085      	str	r5, [r0, #8]
 8012a6a:	6005      	str	r5, [r0, #0]
 8012a6c:	60c5      	str	r5, [r0, #12]
 8012a6e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8012a72:	6819      	ldr	r1, [r3, #0]
 8012a74:	b159      	cbz	r1, 8012a8e <_dtoa_r+0x4e>
 8012a76:	685a      	ldr	r2, [r3, #4]
 8012a78:	604a      	str	r2, [r1, #4]
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	4093      	lsls	r3, r2
 8012a7e:	608b      	str	r3, [r1, #8]
 8012a80:	4650      	mov	r0, sl
 8012a82:	f000 feca 	bl	801381a <_Bfree>
 8012a86:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	601a      	str	r2, [r3, #0]
 8012a8e:	9b01      	ldr	r3, [sp, #4]
 8012a90:	4a9f      	ldr	r2, [pc, #636]	; (8012d10 <_dtoa_r+0x2d0>)
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	bfbf      	itttt	lt
 8012a96:	2301      	movlt	r3, #1
 8012a98:	6023      	strlt	r3, [r4, #0]
 8012a9a:	9b01      	ldrlt	r3, [sp, #4]
 8012a9c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012aa0:	bfb8      	it	lt
 8012aa2:	9301      	strlt	r3, [sp, #4]
 8012aa4:	9f01      	ldr	r7, [sp, #4]
 8012aa6:	bfa4      	itt	ge
 8012aa8:	2300      	movge	r3, #0
 8012aaa:	6023      	strge	r3, [r4, #0]
 8012aac:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8012ab0:	0d1b      	lsrs	r3, r3, #20
 8012ab2:	051b      	lsls	r3, r3, #20
 8012ab4:	4293      	cmp	r3, r2
 8012ab6:	d11d      	bne.n	8012af4 <_dtoa_r+0xb4>
 8012ab8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012aba:	f242 730f 	movw	r3, #9999	; 0x270f
 8012abe:	6013      	str	r3, [r2, #0]
 8012ac0:	9b00      	ldr	r3, [sp, #0]
 8012ac2:	b943      	cbnz	r3, 8012ad6 <_dtoa_r+0x96>
 8012ac4:	4a93      	ldr	r2, [pc, #588]	; (8012d14 <_dtoa_r+0x2d4>)
 8012ac6:	4b94      	ldr	r3, [pc, #592]	; (8012d18 <_dtoa_r+0x2d8>)
 8012ac8:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8012acc:	2800      	cmp	r0, #0
 8012ace:	bf14      	ite	ne
 8012ad0:	4618      	movne	r0, r3
 8012ad2:	4610      	moveq	r0, r2
 8012ad4:	e000      	b.n	8012ad8 <_dtoa_r+0x98>
 8012ad6:	4890      	ldr	r0, [pc, #576]	; (8012d18 <_dtoa_r+0x2d8>)
 8012ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	f000 854a 	beq.w	8013574 <_dtoa_r+0xb34>
 8012ae0:	78c3      	ldrb	r3, [r0, #3]
 8012ae2:	b113      	cbz	r3, 8012aea <_dtoa_r+0xaa>
 8012ae4:	f100 0308 	add.w	r3, r0, #8
 8012ae8:	e000      	b.n	8012aec <_dtoa_r+0xac>
 8012aea:	1cc3      	adds	r3, r0, #3
 8012aec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012aee:	6013      	str	r3, [r2, #0]
 8012af0:	f000 bd40 	b.w	8013574 <_dtoa_r+0xb34>
 8012af4:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012af8:	2200      	movs	r2, #0
 8012afa:	2300      	movs	r3, #0
 8012afc:	4620      	mov	r0, r4
 8012afe:	4629      	mov	r1, r5
 8012b00:	f7ee f85e 	bl	8000bc0 <__aeabi_dcmpeq>
 8012b04:	4680      	mov	r8, r0
 8012b06:	b158      	cbz	r0, 8012b20 <_dtoa_r+0xe0>
 8012b08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	6013      	str	r3, [r2, #0]
 8012b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	f000 8522 	beq.w	801355a <_dtoa_r+0xb1a>
 8012b16:	4881      	ldr	r0, [pc, #516]	; (8012d1c <_dtoa_r+0x2dc>)
 8012b18:	6018      	str	r0, [r3, #0]
 8012b1a:	3801      	subs	r0, #1
 8012b1c:	f000 bd2a 	b.w	8013574 <_dtoa_r+0xb34>
 8012b20:	aa14      	add	r2, sp, #80	; 0x50
 8012b22:	a915      	add	r1, sp, #84	; 0x54
 8012b24:	ec45 4b10 	vmov	d0, r4, r5
 8012b28:	4650      	mov	r0, sl
 8012b2a:	f001 f8c9 	bl	8013cc0 <__d2b>
 8012b2e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012b32:	9002      	str	r0, [sp, #8]
 8012b34:	b15e      	cbz	r6, 8012b4e <_dtoa_r+0x10e>
 8012b36:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8012b3a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012b3e:	4620      	mov	r0, r4
 8012b40:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012b44:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8012b48:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8012b4c:	e01d      	b.n	8012b8a <_dtoa_r+0x14a>
 8012b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b50:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012b52:	441e      	add	r6, r3
 8012b54:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8012b58:	2b20      	cmp	r3, #32
 8012b5a:	dd0a      	ble.n	8012b72 <_dtoa_r+0x132>
 8012b5c:	9a00      	ldr	r2, [sp, #0]
 8012b5e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8012b62:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012b66:	fa22 f000 	lsr.w	r0, r2, r0
 8012b6a:	fa07 f303 	lsl.w	r3, r7, r3
 8012b6e:	4318      	orrs	r0, r3
 8012b70:	e004      	b.n	8012b7c <_dtoa_r+0x13c>
 8012b72:	f1c3 0020 	rsb	r0, r3, #32
 8012b76:	9b00      	ldr	r3, [sp, #0]
 8012b78:	fa03 f000 	lsl.w	r0, r3, r0
 8012b7c:	f7ed fd42 	bl	8000604 <__aeabi_ui2d>
 8012b80:	2301      	movs	r3, #1
 8012b82:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8012b86:	3e01      	subs	r6, #1
 8012b88:	9311      	str	r3, [sp, #68]	; 0x44
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	4b64      	ldr	r3, [pc, #400]	; (8012d20 <_dtoa_r+0x2e0>)
 8012b8e:	f7ed fbfb 	bl	8000388 <__aeabi_dsub>
 8012b92:	a359      	add	r3, pc, #356	; (adr r3, 8012cf8 <_dtoa_r+0x2b8>)
 8012b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b98:	f7ed fdaa 	bl	80006f0 <__aeabi_dmul>
 8012b9c:	a358      	add	r3, pc, #352	; (adr r3, 8012d00 <_dtoa_r+0x2c0>)
 8012b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba2:	f7ed fbf3 	bl	800038c <__adddf3>
 8012ba6:	4604      	mov	r4, r0
 8012ba8:	4630      	mov	r0, r6
 8012baa:	460d      	mov	r5, r1
 8012bac:	f7ed fd3a 	bl	8000624 <__aeabi_i2d>
 8012bb0:	a355      	add	r3, pc, #340	; (adr r3, 8012d08 <_dtoa_r+0x2c8>)
 8012bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb6:	f7ed fd9b 	bl	80006f0 <__aeabi_dmul>
 8012bba:	4602      	mov	r2, r0
 8012bbc:	460b      	mov	r3, r1
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	4629      	mov	r1, r5
 8012bc2:	f7ed fbe3 	bl	800038c <__adddf3>
 8012bc6:	4604      	mov	r4, r0
 8012bc8:	460d      	mov	r5, r1
 8012bca:	f7ee f841 	bl	8000c50 <__aeabi_d2iz>
 8012bce:	2200      	movs	r2, #0
 8012bd0:	4683      	mov	fp, r0
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	4620      	mov	r0, r4
 8012bd6:	4629      	mov	r1, r5
 8012bd8:	f7ed fffc 	bl	8000bd4 <__aeabi_dcmplt>
 8012bdc:	b158      	cbz	r0, 8012bf6 <_dtoa_r+0x1b6>
 8012bde:	4658      	mov	r0, fp
 8012be0:	f7ed fd20 	bl	8000624 <__aeabi_i2d>
 8012be4:	4602      	mov	r2, r0
 8012be6:	460b      	mov	r3, r1
 8012be8:	4620      	mov	r0, r4
 8012bea:	4629      	mov	r1, r5
 8012bec:	f7ed ffe8 	bl	8000bc0 <__aeabi_dcmpeq>
 8012bf0:	b908      	cbnz	r0, 8012bf6 <_dtoa_r+0x1b6>
 8012bf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012bf6:	f1bb 0f16 	cmp.w	fp, #22
 8012bfa:	d80d      	bhi.n	8012c18 <_dtoa_r+0x1d8>
 8012bfc:	4949      	ldr	r1, [pc, #292]	; (8012d24 <_dtoa_r+0x2e4>)
 8012bfe:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8012c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c0a:	f7ee f801 	bl	8000c10 <__aeabi_dcmpgt>
 8012c0e:	b130      	cbz	r0, 8012c1e <_dtoa_r+0x1de>
 8012c10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c14:	2300      	movs	r3, #0
 8012c16:	e000      	b.n	8012c1a <_dtoa_r+0x1da>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8012c1c:	e000      	b.n	8012c20 <_dtoa_r+0x1e0>
 8012c1e:	900d      	str	r0, [sp, #52]	; 0x34
 8012c20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c22:	1b9e      	subs	r6, r3, r6
 8012c24:	1e73      	subs	r3, r6, #1
 8012c26:	9305      	str	r3, [sp, #20]
 8012c28:	bf43      	ittte	mi
 8012c2a:	f1c3 0900 	rsbmi	r9, r3, #0
 8012c2e:	2300      	movmi	r3, #0
 8012c30:	9305      	strmi	r3, [sp, #20]
 8012c32:	f04f 0900 	movpl.w	r9, #0
 8012c36:	f1bb 0f00 	cmp.w	fp, #0
 8012c3a:	db07      	blt.n	8012c4c <_dtoa_r+0x20c>
 8012c3c:	9b05      	ldr	r3, [sp, #20]
 8012c3e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8012c42:	445b      	add	r3, fp
 8012c44:	9305      	str	r3, [sp, #20]
 8012c46:	2300      	movs	r3, #0
 8012c48:	9307      	str	r3, [sp, #28]
 8012c4a:	e006      	b.n	8012c5a <_dtoa_r+0x21a>
 8012c4c:	f1cb 0300 	rsb	r3, fp, #0
 8012c50:	9307      	str	r3, [sp, #28]
 8012c52:	2300      	movs	r3, #0
 8012c54:	ebcb 0909 	rsb	r9, fp, r9
 8012c58:	930c      	str	r3, [sp, #48]	; 0x30
 8012c5a:	9b06      	ldr	r3, [sp, #24]
 8012c5c:	2b09      	cmp	r3, #9
 8012c5e:	d827      	bhi.n	8012cb0 <_dtoa_r+0x270>
 8012c60:	2b05      	cmp	r3, #5
 8012c62:	bfc4      	itt	gt
 8012c64:	3b04      	subgt	r3, #4
 8012c66:	9306      	strgt	r3, [sp, #24]
 8012c68:	9b06      	ldr	r3, [sp, #24]
 8012c6a:	f1a3 0302 	sub.w	r3, r3, #2
 8012c6e:	bfcc      	ite	gt
 8012c70:	2500      	movgt	r5, #0
 8012c72:	2501      	movle	r5, #1
 8012c74:	2b03      	cmp	r3, #3
 8012c76:	d820      	bhi.n	8012cba <_dtoa_r+0x27a>
 8012c78:	e8df f003 	tbb	[pc, r3]
 8012c7c:	04020e06 	.word	0x04020e06
 8012c80:	2301      	movs	r3, #1
 8012c82:	e002      	b.n	8012c8a <_dtoa_r+0x24a>
 8012c84:	2301      	movs	r3, #1
 8012c86:	e008      	b.n	8012c9a <_dtoa_r+0x25a>
 8012c88:	2300      	movs	r3, #0
 8012c8a:	9308      	str	r3, [sp, #32]
 8012c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	dd1c      	ble.n	8012ccc <_dtoa_r+0x28c>
 8012c92:	9303      	str	r3, [sp, #12]
 8012c94:	4698      	mov	r8, r3
 8012c96:	e01e      	b.n	8012cd6 <_dtoa_r+0x296>
 8012c98:	2300      	movs	r3, #0
 8012c9a:	9308      	str	r3, [sp, #32]
 8012c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c9e:	445b      	add	r3, fp
 8012ca0:	f103 0801 	add.w	r8, r3, #1
 8012ca4:	9303      	str	r3, [sp, #12]
 8012ca6:	4643      	mov	r3, r8
 8012ca8:	2b01      	cmp	r3, #1
 8012caa:	bfb8      	it	lt
 8012cac:	2301      	movlt	r3, #1
 8012cae:	e012      	b.n	8012cd6 <_dtoa_r+0x296>
 8012cb0:	2501      	movs	r5, #1
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	9306      	str	r3, [sp, #24]
 8012cb6:	9508      	str	r5, [sp, #32]
 8012cb8:	e001      	b.n	8012cbe <_dtoa_r+0x27e>
 8012cba:	2301      	movs	r3, #1
 8012cbc:	9308      	str	r3, [sp, #32]
 8012cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8012cc2:	9303      	str	r3, [sp, #12]
 8012cc4:	4698      	mov	r8, r3
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	2312      	movs	r3, #18
 8012cca:	e003      	b.n	8012cd4 <_dtoa_r+0x294>
 8012ccc:	2301      	movs	r3, #1
 8012cce:	9303      	str	r3, [sp, #12]
 8012cd0:	4698      	mov	r8, r3
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8012cd6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8012cda:	2200      	movs	r2, #0
 8012cdc:	6062      	str	r2, [r4, #4]
 8012cde:	2104      	movs	r1, #4
 8012ce0:	f101 0214 	add.w	r2, r1, #20
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d81f      	bhi.n	8012d28 <_dtoa_r+0x2e8>
 8012ce8:	6862      	ldr	r2, [r4, #4]
 8012cea:	3201      	adds	r2, #1
 8012cec:	6062      	str	r2, [r4, #4]
 8012cee:	0049      	lsls	r1, r1, #1
 8012cf0:	e7f6      	b.n	8012ce0 <_dtoa_r+0x2a0>
 8012cf2:	bf00      	nop
 8012cf4:	f3af 8000 	nop.w
 8012cf8:	636f4361 	.word	0x636f4361
 8012cfc:	3fd287a7 	.word	0x3fd287a7
 8012d00:	8b60c8b3 	.word	0x8b60c8b3
 8012d04:	3fc68a28 	.word	0x3fc68a28
 8012d08:	509f79fb 	.word	0x509f79fb
 8012d0c:	3fd34413 	.word	0x3fd34413
 8012d10:	7ff00000 	.word	0x7ff00000
 8012d14:	0802d2db 	.word	0x0802d2db
 8012d18:	0802d2e4 	.word	0x0802d2e4
 8012d1c:	0802d158 	.word	0x0802d158
 8012d20:	3ff80000 	.word	0x3ff80000
 8012d24:	0802d2f0 	.word	0x0802d2f0
 8012d28:	6861      	ldr	r1, [r4, #4]
 8012d2a:	4650      	mov	r0, sl
 8012d2c:	f000 fd40 	bl	80137b0 <_Balloc>
 8012d30:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8012d34:	6020      	str	r0, [r4, #0]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	9304      	str	r3, [sp, #16]
 8012d3a:	f1b8 0f0e 	cmp.w	r8, #14
 8012d3e:	f200 815d 	bhi.w	8012ffc <_dtoa_r+0x5bc>
 8012d42:	2d00      	cmp	r5, #0
 8012d44:	f000 815a 	beq.w	8012ffc <_dtoa_r+0x5bc>
 8012d48:	ed9d 7b00 	vldr	d7, [sp]
 8012d4c:	f1bb 0f00 	cmp.w	fp, #0
 8012d50:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012d54:	dd31      	ble.n	8012dba <_dtoa_r+0x37a>
 8012d56:	4aa0      	ldr	r2, [pc, #640]	; (8012fd8 <_dtoa_r+0x598>)
 8012d58:	f00b 030f 	and.w	r3, fp, #15
 8012d5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012d60:	ed93 7b00 	vldr	d7, [r3]
 8012d64:	ea4f 142b 	mov.w	r4, fp, asr #4
 8012d68:	06e2      	lsls	r2, r4, #27
 8012d6a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012d6e:	d50c      	bpl.n	8012d8a <_dtoa_r+0x34a>
 8012d70:	4b9a      	ldr	r3, [pc, #616]	; (8012fdc <_dtoa_r+0x59c>)
 8012d72:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012d76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012d7a:	f7ed fde3 	bl	8000944 <__aeabi_ddiv>
 8012d7e:	f004 040f 	and.w	r4, r4, #15
 8012d82:	e9cd 0100 	strd	r0, r1, [sp]
 8012d86:	2603      	movs	r6, #3
 8012d88:	e000      	b.n	8012d8c <_dtoa_r+0x34c>
 8012d8a:	2602      	movs	r6, #2
 8012d8c:	4d93      	ldr	r5, [pc, #588]	; (8012fdc <_dtoa_r+0x59c>)
 8012d8e:	b16c      	cbz	r4, 8012dac <_dtoa_r+0x36c>
 8012d90:	07e3      	lsls	r3, r4, #31
 8012d92:	d508      	bpl.n	8012da6 <_dtoa_r+0x366>
 8012d94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012d98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012d9c:	f7ed fca8 	bl	80006f0 <__aeabi_dmul>
 8012da0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012da4:	3601      	adds	r6, #1
 8012da6:	1064      	asrs	r4, r4, #1
 8012da8:	3508      	adds	r5, #8
 8012daa:	e7f0      	b.n	8012d8e <_dtoa_r+0x34e>
 8012dac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012db4:	f7ed fdc6 	bl	8000944 <__aeabi_ddiv>
 8012db8:	e020      	b.n	8012dfc <_dtoa_r+0x3bc>
 8012dba:	f1cb 0400 	rsb	r4, fp, #0
 8012dbe:	b304      	cbz	r4, 8012e02 <_dtoa_r+0x3c2>
 8012dc0:	4b85      	ldr	r3, [pc, #532]	; (8012fd8 <_dtoa_r+0x598>)
 8012dc2:	4d86      	ldr	r5, [pc, #536]	; (8012fdc <_dtoa_r+0x59c>)
 8012dc4:	f004 020f 	and.w	r2, r4, #15
 8012dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012dd4:	f7ed fc8c 	bl	80006f0 <__aeabi_dmul>
 8012dd8:	e9cd 0100 	strd	r0, r1, [sp]
 8012ddc:	1124      	asrs	r4, r4, #4
 8012dde:	2300      	movs	r3, #0
 8012de0:	2602      	movs	r6, #2
 8012de2:	b154      	cbz	r4, 8012dfa <_dtoa_r+0x3ba>
 8012de4:	07e7      	lsls	r7, r4, #31
 8012de6:	d505      	bpl.n	8012df4 <_dtoa_r+0x3b4>
 8012de8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012dec:	f7ed fc80 	bl	80006f0 <__aeabi_dmul>
 8012df0:	3601      	adds	r6, #1
 8012df2:	2301      	movs	r3, #1
 8012df4:	1064      	asrs	r4, r4, #1
 8012df6:	3508      	adds	r5, #8
 8012df8:	e7f3      	b.n	8012de2 <_dtoa_r+0x3a2>
 8012dfa:	b11b      	cbz	r3, 8012e04 <_dtoa_r+0x3c4>
 8012dfc:	e9cd 0100 	strd	r0, r1, [sp]
 8012e00:	e000      	b.n	8012e04 <_dtoa_r+0x3c4>
 8012e02:	2602      	movs	r6, #2
 8012e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e06:	b1eb      	cbz	r3, 8012e44 <_dtoa_r+0x404>
 8012e08:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	4b74      	ldr	r3, [pc, #464]	; (8012fe0 <_dtoa_r+0x5a0>)
 8012e10:	4620      	mov	r0, r4
 8012e12:	4629      	mov	r1, r5
 8012e14:	f7ed fede 	bl	8000bd4 <__aeabi_dcmplt>
 8012e18:	b1a0      	cbz	r0, 8012e44 <_dtoa_r+0x404>
 8012e1a:	f1b8 0f00 	cmp.w	r8, #0
 8012e1e:	d011      	beq.n	8012e44 <_dtoa_r+0x404>
 8012e20:	9b03      	ldr	r3, [sp, #12]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	f340 80e6 	ble.w	8012ff4 <_dtoa_r+0x5b4>
 8012e28:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8012e2e:	2200      	movs	r2, #0
 8012e30:	4b6c      	ldr	r3, [pc, #432]	; (8012fe4 <_dtoa_r+0x5a4>)
 8012e32:	4620      	mov	r0, r4
 8012e34:	4629      	mov	r1, r5
 8012e36:	f7ed fc5b 	bl	80006f0 <__aeabi_dmul>
 8012e3a:	3601      	adds	r6, #1
 8012e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8012e40:	9f03      	ldr	r7, [sp, #12]
 8012e42:	e002      	b.n	8012e4a <_dtoa_r+0x40a>
 8012e44:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012e48:	4647      	mov	r7, r8
 8012e4a:	4630      	mov	r0, r6
 8012e4c:	f7ed fbea 	bl	8000624 <__aeabi_i2d>
 8012e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e54:	f7ed fc4c 	bl	80006f0 <__aeabi_dmul>
 8012e58:	2200      	movs	r2, #0
 8012e5a:	4b63      	ldr	r3, [pc, #396]	; (8012fe8 <_dtoa_r+0x5a8>)
 8012e5c:	f7ed fa96 	bl	800038c <__adddf3>
 8012e60:	4604      	mov	r4, r0
 8012e62:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8012e66:	b9cf      	cbnz	r7, 8012e9c <_dtoa_r+0x45c>
 8012e68:	2200      	movs	r2, #0
 8012e6a:	4b60      	ldr	r3, [pc, #384]	; (8012fec <_dtoa_r+0x5ac>)
 8012e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e70:	f7ed fa8a 	bl	8000388 <__aeabi_dsub>
 8012e74:	4622      	mov	r2, r4
 8012e76:	462b      	mov	r3, r5
 8012e78:	e9cd 0100 	strd	r0, r1, [sp]
 8012e7c:	f7ed fec8 	bl	8000c10 <__aeabi_dcmpgt>
 8012e80:	2800      	cmp	r0, #0
 8012e82:	f040 8241 	bne.w	8013308 <_dtoa_r+0x8c8>
 8012e86:	4622      	mov	r2, r4
 8012e88:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8012e8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e90:	f7ed fea0 	bl	8000bd4 <__aeabi_dcmplt>
 8012e94:	2800      	cmp	r0, #0
 8012e96:	f040 822e 	bne.w	80132f6 <_dtoa_r+0x8b6>
 8012e9a:	e0ab      	b.n	8012ff4 <_dtoa_r+0x5b4>
 8012e9c:	9a08      	ldr	r2, [sp, #32]
 8012e9e:	4b4e      	ldr	r3, [pc, #312]	; (8012fd8 <_dtoa_r+0x598>)
 8012ea0:	1e79      	subs	r1, r7, #1
 8012ea2:	2a00      	cmp	r2, #0
 8012ea4:	d04a      	beq.n	8012f3c <_dtoa_r+0x4fc>
 8012ea6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	2000      	movs	r0, #0
 8012eb0:	494f      	ldr	r1, [pc, #316]	; (8012ff0 <_dtoa_r+0x5b0>)
 8012eb2:	f7ed fd47 	bl	8000944 <__aeabi_ddiv>
 8012eb6:	4622      	mov	r2, r4
 8012eb8:	462b      	mov	r3, r5
 8012eba:	f7ed fa65 	bl	8000388 <__aeabi_dsub>
 8012ebe:	9c04      	ldr	r4, [sp, #16]
 8012ec0:	4605      	mov	r5, r0
 8012ec2:	460e      	mov	r6, r1
 8012ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ec8:	f7ed fec2 	bl	8000c50 <__aeabi_d2iz>
 8012ecc:	9012      	str	r0, [sp, #72]	; 0x48
 8012ece:	f7ed fba9 	bl	8000624 <__aeabi_i2d>
 8012ed2:	4602      	mov	r2, r0
 8012ed4:	460b      	mov	r3, r1
 8012ed6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012eda:	f7ed fa55 	bl	8000388 <__aeabi_dsub>
 8012ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012ee0:	3330      	adds	r3, #48	; 0x30
 8012ee2:	f804 3b01 	strb.w	r3, [r4], #1
 8012ee6:	462a      	mov	r2, r5
 8012ee8:	4633      	mov	r3, r6
 8012eea:	e9cd 0100 	strd	r0, r1, [sp]
 8012eee:	f7ed fe71 	bl	8000bd4 <__aeabi_dcmplt>
 8012ef2:	2800      	cmp	r0, #0
 8012ef4:	f040 8321 	bne.w	801353a <_dtoa_r+0xafa>
 8012ef8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012efc:	2000      	movs	r0, #0
 8012efe:	4938      	ldr	r1, [pc, #224]	; (8012fe0 <_dtoa_r+0x5a0>)
 8012f00:	f7ed fa42 	bl	8000388 <__aeabi_dsub>
 8012f04:	462a      	mov	r2, r5
 8012f06:	4633      	mov	r3, r6
 8012f08:	f7ed fe64 	bl	8000bd4 <__aeabi_dcmplt>
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	f040 80d2 	bne.w	80130b6 <_dtoa_r+0x676>
 8012f12:	9b04      	ldr	r3, [sp, #16]
 8012f14:	1ae3      	subs	r3, r4, r3
 8012f16:	42bb      	cmp	r3, r7
 8012f18:	da6c      	bge.n	8012ff4 <_dtoa_r+0x5b4>
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	4b31      	ldr	r3, [pc, #196]	; (8012fe4 <_dtoa_r+0x5a4>)
 8012f1e:	4628      	mov	r0, r5
 8012f20:	4631      	mov	r1, r6
 8012f22:	f7ed fbe5 	bl	80006f0 <__aeabi_dmul>
 8012f26:	2200      	movs	r2, #0
 8012f28:	4605      	mov	r5, r0
 8012f2a:	460e      	mov	r6, r1
 8012f2c:	4b2d      	ldr	r3, [pc, #180]	; (8012fe4 <_dtoa_r+0x5a4>)
 8012f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f32:	f7ed fbdd 	bl	80006f0 <__aeabi_dmul>
 8012f36:	e9cd 0100 	strd	r0, r1, [sp]
 8012f3a:	e7c3      	b.n	8012ec4 <_dtoa_r+0x484>
 8012f3c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8012f40:	4622      	mov	r2, r4
 8012f42:	462b      	mov	r3, r5
 8012f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f48:	f7ed fbd2 	bl	80006f0 <__aeabi_dmul>
 8012f4c:	9b04      	ldr	r3, [sp, #16]
 8012f4e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012f52:	19dc      	adds	r4, r3, r7
 8012f54:	461d      	mov	r5, r3
 8012f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f5a:	f7ed fe79 	bl	8000c50 <__aeabi_d2iz>
 8012f5e:	4606      	mov	r6, r0
 8012f60:	f7ed fb60 	bl	8000624 <__aeabi_i2d>
 8012f64:	3630      	adds	r6, #48	; 0x30
 8012f66:	4602      	mov	r2, r0
 8012f68:	460b      	mov	r3, r1
 8012f6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f6e:	f7ed fa0b 	bl	8000388 <__aeabi_dsub>
 8012f72:	f805 6b01 	strb.w	r6, [r5], #1
 8012f76:	42ac      	cmp	r4, r5
 8012f78:	e9cd 0100 	strd	r0, r1, [sp]
 8012f7c:	f04f 0200 	mov.w	r2, #0
 8012f80:	d123      	bne.n	8012fca <_dtoa_r+0x58a>
 8012f82:	4b1b      	ldr	r3, [pc, #108]	; (8012ff0 <_dtoa_r+0x5b0>)
 8012f84:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8012f88:	f7ed fa00 	bl	800038c <__adddf3>
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	460b      	mov	r3, r1
 8012f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f94:	f7ed fe3c 	bl	8000c10 <__aeabi_dcmpgt>
 8012f98:	2800      	cmp	r0, #0
 8012f9a:	f040 808c 	bne.w	80130b6 <_dtoa_r+0x676>
 8012f9e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8012fa2:	2000      	movs	r0, #0
 8012fa4:	4912      	ldr	r1, [pc, #72]	; (8012ff0 <_dtoa_r+0x5b0>)
 8012fa6:	f7ed f9ef 	bl	8000388 <__aeabi_dsub>
 8012faa:	4602      	mov	r2, r0
 8012fac:	460b      	mov	r3, r1
 8012fae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fb2:	f7ed fe0f 	bl	8000bd4 <__aeabi_dcmplt>
 8012fb6:	b1e8      	cbz	r0, 8012ff4 <_dtoa_r+0x5b4>
 8012fb8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8012fbc:	2b30      	cmp	r3, #48	; 0x30
 8012fbe:	f104 32ff 	add.w	r2, r4, #4294967295
 8012fc2:	f040 82ba 	bne.w	801353a <_dtoa_r+0xafa>
 8012fc6:	4614      	mov	r4, r2
 8012fc8:	e7f6      	b.n	8012fb8 <_dtoa_r+0x578>
 8012fca:	4b06      	ldr	r3, [pc, #24]	; (8012fe4 <_dtoa_r+0x5a4>)
 8012fcc:	f7ed fb90 	bl	80006f0 <__aeabi_dmul>
 8012fd0:	e9cd 0100 	strd	r0, r1, [sp]
 8012fd4:	e7bf      	b.n	8012f56 <_dtoa_r+0x516>
 8012fd6:	bf00      	nop
 8012fd8:	0802d2f0 	.word	0x0802d2f0
 8012fdc:	0802d3b8 	.word	0x0802d3b8
 8012fe0:	3ff00000 	.word	0x3ff00000
 8012fe4:	40240000 	.word	0x40240000
 8012fe8:	401c0000 	.word	0x401c0000
 8012fec:	40140000 	.word	0x40140000
 8012ff0:	3fe00000 	.word	0x3fe00000
 8012ff4:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8012ff8:	e88d 0018 	stmia.w	sp, {r3, r4}
 8012ffc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	db7c      	blt.n	80130fc <_dtoa_r+0x6bc>
 8013002:	f1bb 0f0e 	cmp.w	fp, #14
 8013006:	dc79      	bgt.n	80130fc <_dtoa_r+0x6bc>
 8013008:	4b8f      	ldr	r3, [pc, #572]	; (8013248 <_dtoa_r+0x808>)
 801300a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801300e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013014:	2b00      	cmp	r3, #0
 8013016:	da14      	bge.n	8013042 <_dtoa_r+0x602>
 8013018:	f1b8 0f00 	cmp.w	r8, #0
 801301c:	dc11      	bgt.n	8013042 <_dtoa_r+0x602>
 801301e:	f040 816c 	bne.w	80132fa <_dtoa_r+0x8ba>
 8013022:	2200      	movs	r2, #0
 8013024:	4b89      	ldr	r3, [pc, #548]	; (801324c <_dtoa_r+0x80c>)
 8013026:	4630      	mov	r0, r6
 8013028:	4639      	mov	r1, r7
 801302a:	f7ed fb61 	bl	80006f0 <__aeabi_dmul>
 801302e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013032:	f7ed fde3 	bl	8000bfc <__aeabi_dcmpge>
 8013036:	4645      	mov	r5, r8
 8013038:	4646      	mov	r6, r8
 801303a:	2800      	cmp	r0, #0
 801303c:	f040 815f 	bne.w	80132fe <_dtoa_r+0x8be>
 8013040:	e166      	b.n	8013310 <_dtoa_r+0x8d0>
 8013042:	9c04      	ldr	r4, [sp, #16]
 8013044:	4632      	mov	r2, r6
 8013046:	463b      	mov	r3, r7
 8013048:	e9dd 0100 	ldrd	r0, r1, [sp]
 801304c:	f7ed fc7a 	bl	8000944 <__aeabi_ddiv>
 8013050:	f7ed fdfe 	bl	8000c50 <__aeabi_d2iz>
 8013054:	4605      	mov	r5, r0
 8013056:	f7ed fae5 	bl	8000624 <__aeabi_i2d>
 801305a:	4632      	mov	r2, r6
 801305c:	463b      	mov	r3, r7
 801305e:	f7ed fb47 	bl	80006f0 <__aeabi_dmul>
 8013062:	460b      	mov	r3, r1
 8013064:	4602      	mov	r2, r0
 8013066:	e9dd 0100 	ldrd	r0, r1, [sp]
 801306a:	f7ed f98d 	bl	8000388 <__aeabi_dsub>
 801306e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8013072:	f804 eb01 	strb.w	lr, [r4], #1
 8013076:	9b04      	ldr	r3, [sp, #16]
 8013078:	ebc3 0e04 	rsb	lr, r3, r4
 801307c:	45f0      	cmp	r8, lr
 801307e:	e9cd 0100 	strd	r0, r1, [sp]
 8013082:	d12e      	bne.n	80130e2 <_dtoa_r+0x6a2>
 8013084:	4602      	mov	r2, r0
 8013086:	460b      	mov	r3, r1
 8013088:	f7ed f980 	bl	800038c <__adddf3>
 801308c:	4680      	mov	r8, r0
 801308e:	4689      	mov	r9, r1
 8013090:	4602      	mov	r2, r0
 8013092:	460b      	mov	r3, r1
 8013094:	4630      	mov	r0, r6
 8013096:	4639      	mov	r1, r7
 8013098:	f7ed fd9c 	bl	8000bd4 <__aeabi_dcmplt>
 801309c:	b978      	cbnz	r0, 80130be <_dtoa_r+0x67e>
 801309e:	4642      	mov	r2, r8
 80130a0:	464b      	mov	r3, r9
 80130a2:	4630      	mov	r0, r6
 80130a4:	4639      	mov	r1, r7
 80130a6:	f7ed fd8b 	bl	8000bc0 <__aeabi_dcmpeq>
 80130aa:	2800      	cmp	r0, #0
 80130ac:	f000 8247 	beq.w	801353e <_dtoa_r+0xafe>
 80130b0:	07e9      	lsls	r1, r5, #31
 80130b2:	d404      	bmi.n	80130be <_dtoa_r+0x67e>
 80130b4:	e243      	b.n	801353e <_dtoa_r+0xafe>
 80130b6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80130ba:	e000      	b.n	80130be <_dtoa_r+0x67e>
 80130bc:	461c      	mov	r4, r3
 80130be:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80130c2:	2a39      	cmp	r2, #57	; 0x39
 80130c4:	f104 33ff 	add.w	r3, r4, #4294967295
 80130c8:	d107      	bne.n	80130da <_dtoa_r+0x69a>
 80130ca:	9a04      	ldr	r2, [sp, #16]
 80130cc:	429a      	cmp	r2, r3
 80130ce:	d1f5      	bne.n	80130bc <_dtoa_r+0x67c>
 80130d0:	9904      	ldr	r1, [sp, #16]
 80130d2:	2230      	movs	r2, #48	; 0x30
 80130d4:	f10b 0b01 	add.w	fp, fp, #1
 80130d8:	700a      	strb	r2, [r1, #0]
 80130da:	781a      	ldrb	r2, [r3, #0]
 80130dc:	3201      	adds	r2, #1
 80130de:	701a      	strb	r2, [r3, #0]
 80130e0:	e22d      	b.n	801353e <_dtoa_r+0xafe>
 80130e2:	2200      	movs	r2, #0
 80130e4:	4b5a      	ldr	r3, [pc, #360]	; (8013250 <_dtoa_r+0x810>)
 80130e6:	f7ed fb03 	bl	80006f0 <__aeabi_dmul>
 80130ea:	2200      	movs	r2, #0
 80130ec:	2300      	movs	r3, #0
 80130ee:	e9cd 0100 	strd	r0, r1, [sp]
 80130f2:	f7ed fd65 	bl	8000bc0 <__aeabi_dcmpeq>
 80130f6:	2800      	cmp	r0, #0
 80130f8:	d0a4      	beq.n	8013044 <_dtoa_r+0x604>
 80130fa:	e220      	b.n	801353e <_dtoa_r+0xafe>
 80130fc:	9a08      	ldr	r2, [sp, #32]
 80130fe:	2a00      	cmp	r2, #0
 8013100:	d02d      	beq.n	801315e <_dtoa_r+0x71e>
 8013102:	9a06      	ldr	r2, [sp, #24]
 8013104:	2a01      	cmp	r2, #1
 8013106:	dc0a      	bgt.n	801311e <_dtoa_r+0x6de>
 8013108:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801310a:	b112      	cbz	r2, 8013112 <_dtoa_r+0x6d2>
 801310c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013110:	e002      	b.n	8013118 <_dtoa_r+0x6d8>
 8013112:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013114:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013118:	9d07      	ldr	r5, [sp, #28]
 801311a:	464c      	mov	r4, r9
 801311c:	e015      	b.n	801314a <_dtoa_r+0x70a>
 801311e:	9b07      	ldr	r3, [sp, #28]
 8013120:	f108 35ff 	add.w	r5, r8, #4294967295
 8013124:	42ab      	cmp	r3, r5
 8013126:	bfbf      	itttt	lt
 8013128:	9b07      	ldrlt	r3, [sp, #28]
 801312a:	9507      	strlt	r5, [sp, #28]
 801312c:	1aea      	sublt	r2, r5, r3
 801312e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8013130:	bfb7      	itett	lt
 8013132:	189b      	addlt	r3, r3, r2
 8013134:	1b5d      	subge	r5, r3, r5
 8013136:	930c      	strlt	r3, [sp, #48]	; 0x30
 8013138:	2500      	movlt	r5, #0
 801313a:	f1b8 0f00 	cmp.w	r8, #0
 801313e:	bfb9      	ittee	lt
 8013140:	ebc8 0409 	rsblt	r4, r8, r9
 8013144:	2300      	movlt	r3, #0
 8013146:	464c      	movge	r4, r9
 8013148:	4643      	movge	r3, r8
 801314a:	9a05      	ldr	r2, [sp, #20]
 801314c:	2101      	movs	r1, #1
 801314e:	441a      	add	r2, r3
 8013150:	4650      	mov	r0, sl
 8013152:	4499      	add	r9, r3
 8013154:	9205      	str	r2, [sp, #20]
 8013156:	f000 fbff 	bl	8013958 <__i2b>
 801315a:	4606      	mov	r6, r0
 801315c:	e002      	b.n	8013164 <_dtoa_r+0x724>
 801315e:	9d07      	ldr	r5, [sp, #28]
 8013160:	9e08      	ldr	r6, [sp, #32]
 8013162:	464c      	mov	r4, r9
 8013164:	b15c      	cbz	r4, 801317e <_dtoa_r+0x73e>
 8013166:	9b05      	ldr	r3, [sp, #20]
 8013168:	2b00      	cmp	r3, #0
 801316a:	dd08      	ble.n	801317e <_dtoa_r+0x73e>
 801316c:	42a3      	cmp	r3, r4
 801316e:	9a05      	ldr	r2, [sp, #20]
 8013170:	bfa8      	it	ge
 8013172:	4623      	movge	r3, r4
 8013174:	ebc3 0909 	rsb	r9, r3, r9
 8013178:	1ae4      	subs	r4, r4, r3
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	9305      	str	r3, [sp, #20]
 801317e:	9b07      	ldr	r3, [sp, #28]
 8013180:	2b00      	cmp	r3, #0
 8013182:	dd1d      	ble.n	80131c0 <_dtoa_r+0x780>
 8013184:	9b08      	ldr	r3, [sp, #32]
 8013186:	b1ab      	cbz	r3, 80131b4 <_dtoa_r+0x774>
 8013188:	b185      	cbz	r5, 80131ac <_dtoa_r+0x76c>
 801318a:	4631      	mov	r1, r6
 801318c:	462a      	mov	r2, r5
 801318e:	4650      	mov	r0, sl
 8013190:	f000 fc7c 	bl	8013a8c <__pow5mult>
 8013194:	9a02      	ldr	r2, [sp, #8]
 8013196:	4601      	mov	r1, r0
 8013198:	4606      	mov	r6, r0
 801319a:	4650      	mov	r0, sl
 801319c:	f000 fbe5 	bl	801396a <__multiply>
 80131a0:	9902      	ldr	r1, [sp, #8]
 80131a2:	4607      	mov	r7, r0
 80131a4:	4650      	mov	r0, sl
 80131a6:	f000 fb38 	bl	801381a <_Bfree>
 80131aa:	9702      	str	r7, [sp, #8]
 80131ac:	9b07      	ldr	r3, [sp, #28]
 80131ae:	1b5a      	subs	r2, r3, r5
 80131b0:	d006      	beq.n	80131c0 <_dtoa_r+0x780>
 80131b2:	e000      	b.n	80131b6 <_dtoa_r+0x776>
 80131b4:	9a07      	ldr	r2, [sp, #28]
 80131b6:	9902      	ldr	r1, [sp, #8]
 80131b8:	4650      	mov	r0, sl
 80131ba:	f000 fc67 	bl	8013a8c <__pow5mult>
 80131be:	9002      	str	r0, [sp, #8]
 80131c0:	2101      	movs	r1, #1
 80131c2:	4650      	mov	r0, sl
 80131c4:	f000 fbc8 	bl	8013958 <__i2b>
 80131c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131ca:	4605      	mov	r5, r0
 80131cc:	b35b      	cbz	r3, 8013226 <_dtoa_r+0x7e6>
 80131ce:	461a      	mov	r2, r3
 80131d0:	4601      	mov	r1, r0
 80131d2:	4650      	mov	r0, sl
 80131d4:	f000 fc5a 	bl	8013a8c <__pow5mult>
 80131d8:	9b06      	ldr	r3, [sp, #24]
 80131da:	2b01      	cmp	r3, #1
 80131dc:	4605      	mov	r5, r0
 80131de:	dc18      	bgt.n	8013212 <_dtoa_r+0x7d2>
 80131e0:	9b00      	ldr	r3, [sp, #0]
 80131e2:	b983      	cbnz	r3, 8013206 <_dtoa_r+0x7c6>
 80131e4:	9b01      	ldr	r3, [sp, #4]
 80131e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131ea:	b973      	cbnz	r3, 801320a <_dtoa_r+0x7ca>
 80131ec:	9b01      	ldr	r3, [sp, #4]
 80131ee:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 80131f2:	0d3f      	lsrs	r7, r7, #20
 80131f4:	053f      	lsls	r7, r7, #20
 80131f6:	b14f      	cbz	r7, 801320c <_dtoa_r+0x7cc>
 80131f8:	9b05      	ldr	r3, [sp, #20]
 80131fa:	3301      	adds	r3, #1
 80131fc:	f109 0901 	add.w	r9, r9, #1
 8013200:	9305      	str	r3, [sp, #20]
 8013202:	2701      	movs	r7, #1
 8013204:	e002      	b.n	801320c <_dtoa_r+0x7cc>
 8013206:	2700      	movs	r7, #0
 8013208:	e000      	b.n	801320c <_dtoa_r+0x7cc>
 801320a:	9f00      	ldr	r7, [sp, #0]
 801320c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801320e:	b173      	cbz	r3, 801322e <_dtoa_r+0x7ee>
 8013210:	e000      	b.n	8013214 <_dtoa_r+0x7d4>
 8013212:	2700      	movs	r7, #0
 8013214:	692b      	ldr	r3, [r5, #16]
 8013216:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801321a:	6918      	ldr	r0, [r3, #16]
 801321c:	f000 fb4f 	bl	80138be <__hi0bits>
 8013220:	f1c0 0020 	rsb	r0, r0, #32
 8013224:	e004      	b.n	8013230 <_dtoa_r+0x7f0>
 8013226:	9b06      	ldr	r3, [sp, #24]
 8013228:	2b01      	cmp	r3, #1
 801322a:	ddd9      	ble.n	80131e0 <_dtoa_r+0x7a0>
 801322c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801322e:	2001      	movs	r0, #1
 8013230:	9b05      	ldr	r3, [sp, #20]
 8013232:	4418      	add	r0, r3
 8013234:	f010 001f 	ands.w	r0, r0, #31
 8013238:	d00e      	beq.n	8013258 <_dtoa_r+0x818>
 801323a:	f1c0 0320 	rsb	r3, r0, #32
 801323e:	2b04      	cmp	r3, #4
 8013240:	dd08      	ble.n	8013254 <_dtoa_r+0x814>
 8013242:	f1c0 001c 	rsb	r0, r0, #28
 8013246:	e008      	b.n	801325a <_dtoa_r+0x81a>
 8013248:	0802d2f0 	.word	0x0802d2f0
 801324c:	40140000 	.word	0x40140000
 8013250:	40240000 	.word	0x40240000
 8013254:	d006      	beq.n	8013264 <_dtoa_r+0x824>
 8013256:	4618      	mov	r0, r3
 8013258:	301c      	adds	r0, #28
 801325a:	9b05      	ldr	r3, [sp, #20]
 801325c:	4403      	add	r3, r0
 801325e:	4481      	add	r9, r0
 8013260:	4404      	add	r4, r0
 8013262:	9305      	str	r3, [sp, #20]
 8013264:	f1b9 0f00 	cmp.w	r9, #0
 8013268:	dd05      	ble.n	8013276 <_dtoa_r+0x836>
 801326a:	464a      	mov	r2, r9
 801326c:	9902      	ldr	r1, [sp, #8]
 801326e:	4650      	mov	r0, sl
 8013270:	f000 fc5a 	bl	8013b28 <__lshift>
 8013274:	9002      	str	r0, [sp, #8]
 8013276:	9b05      	ldr	r3, [sp, #20]
 8013278:	2b00      	cmp	r3, #0
 801327a:	dd05      	ble.n	8013288 <_dtoa_r+0x848>
 801327c:	4629      	mov	r1, r5
 801327e:	461a      	mov	r2, r3
 8013280:	4650      	mov	r0, sl
 8013282:	f000 fc51 	bl	8013b28 <__lshift>
 8013286:	4605      	mov	r5, r0
 8013288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801328a:	b1eb      	cbz	r3, 80132c8 <_dtoa_r+0x888>
 801328c:	4629      	mov	r1, r5
 801328e:	9802      	ldr	r0, [sp, #8]
 8013290:	f000 fc9b 	bl	8013bca <__mcmp>
 8013294:	2800      	cmp	r0, #0
 8013296:	da17      	bge.n	80132c8 <_dtoa_r+0x888>
 8013298:	2300      	movs	r3, #0
 801329a:	220a      	movs	r2, #10
 801329c:	9902      	ldr	r1, [sp, #8]
 801329e:	4650      	mov	r0, sl
 80132a0:	f000 fad2 	bl	8013848 <__multadd>
 80132a4:	9b08      	ldr	r3, [sp, #32]
 80132a6:	9002      	str	r0, [sp, #8]
 80132a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f000 8158 	beq.w	8013562 <_dtoa_r+0xb22>
 80132b2:	2300      	movs	r3, #0
 80132b4:	4631      	mov	r1, r6
 80132b6:	220a      	movs	r2, #10
 80132b8:	4650      	mov	r0, sl
 80132ba:	f000 fac5 	bl	8013848 <__multadd>
 80132be:	9b03      	ldr	r3, [sp, #12]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	4606      	mov	r6, r0
 80132c4:	dc37      	bgt.n	8013336 <_dtoa_r+0x8f6>
 80132c6:	e033      	b.n	8013330 <_dtoa_r+0x8f0>
 80132c8:	f1b8 0f00 	cmp.w	r8, #0
 80132cc:	dc2a      	bgt.n	8013324 <_dtoa_r+0x8e4>
 80132ce:	9b06      	ldr	r3, [sp, #24]
 80132d0:	2b02      	cmp	r3, #2
 80132d2:	dd27      	ble.n	8013324 <_dtoa_r+0x8e4>
 80132d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80132d8:	9b03      	ldr	r3, [sp, #12]
 80132da:	b983      	cbnz	r3, 80132fe <_dtoa_r+0x8be>
 80132dc:	4629      	mov	r1, r5
 80132de:	2205      	movs	r2, #5
 80132e0:	4650      	mov	r0, sl
 80132e2:	f000 fab1 	bl	8013848 <__multadd>
 80132e6:	4601      	mov	r1, r0
 80132e8:	4605      	mov	r5, r0
 80132ea:	9802      	ldr	r0, [sp, #8]
 80132ec:	f000 fc6d 	bl	8013bca <__mcmp>
 80132f0:	2800      	cmp	r0, #0
 80132f2:	dc0d      	bgt.n	8013310 <_dtoa_r+0x8d0>
 80132f4:	e003      	b.n	80132fe <_dtoa_r+0x8be>
 80132f6:	463d      	mov	r5, r7
 80132f8:	e000      	b.n	80132fc <_dtoa_r+0x8bc>
 80132fa:	2500      	movs	r5, #0
 80132fc:	462e      	mov	r6, r5
 80132fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013300:	9c04      	ldr	r4, [sp, #16]
 8013302:	ea6f 0b03 	mvn.w	fp, r3
 8013306:	e00a      	b.n	801331e <_dtoa_r+0x8de>
 8013308:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801330c:	463d      	mov	r5, r7
 801330e:	463e      	mov	r6, r7
 8013310:	9b04      	ldr	r3, [sp, #16]
 8013312:	9a04      	ldr	r2, [sp, #16]
 8013314:	1c5c      	adds	r4, r3, #1
 8013316:	2331      	movs	r3, #49	; 0x31
 8013318:	7013      	strb	r3, [r2, #0]
 801331a:	f10b 0b01 	add.w	fp, fp, #1
 801331e:	46b0      	mov	r8, r6
 8013320:	2600      	movs	r6, #0
 8013322:	e0f7      	b.n	8013514 <_dtoa_r+0xad4>
 8013324:	9b08      	ldr	r3, [sp, #32]
 8013326:	f8cd 800c 	str.w	r8, [sp, #12]
 801332a:	b923      	cbnz	r3, 8013336 <_dtoa_r+0x8f6>
 801332c:	9c04      	ldr	r4, [sp, #16]
 801332e:	e0b1      	b.n	8013494 <_dtoa_r+0xa54>
 8013330:	9b06      	ldr	r3, [sp, #24]
 8013332:	2b02      	cmp	r3, #2
 8013334:	dcd0      	bgt.n	80132d8 <_dtoa_r+0x898>
 8013336:	2c00      	cmp	r4, #0
 8013338:	dd05      	ble.n	8013346 <_dtoa_r+0x906>
 801333a:	4631      	mov	r1, r6
 801333c:	4622      	mov	r2, r4
 801333e:	4650      	mov	r0, sl
 8013340:	f000 fbf2 	bl	8013b28 <__lshift>
 8013344:	4606      	mov	r6, r0
 8013346:	b19f      	cbz	r7, 8013370 <_dtoa_r+0x930>
 8013348:	6871      	ldr	r1, [r6, #4]
 801334a:	4650      	mov	r0, sl
 801334c:	f000 fa30 	bl	80137b0 <_Balloc>
 8013350:	6932      	ldr	r2, [r6, #16]
 8013352:	3202      	adds	r2, #2
 8013354:	4604      	mov	r4, r0
 8013356:	0092      	lsls	r2, r2, #2
 8013358:	f106 010c 	add.w	r1, r6, #12
 801335c:	300c      	adds	r0, #12
 801335e:	f7fe fa52 	bl	8011806 <memcpy>
 8013362:	2201      	movs	r2, #1
 8013364:	4621      	mov	r1, r4
 8013366:	4650      	mov	r0, sl
 8013368:	f000 fbde 	bl	8013b28 <__lshift>
 801336c:	4680      	mov	r8, r0
 801336e:	e000      	b.n	8013372 <_dtoa_r+0x932>
 8013370:	46b0      	mov	r8, r6
 8013372:	9b00      	ldr	r3, [sp, #0]
 8013374:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8013378:	f003 0301 	and.w	r3, r3, #1
 801337c:	9305      	str	r3, [sp, #20]
 801337e:	4629      	mov	r1, r5
 8013380:	9802      	ldr	r0, [sp, #8]
 8013382:	f7ff facb 	bl	801291c <quorem>
 8013386:	4631      	mov	r1, r6
 8013388:	4604      	mov	r4, r0
 801338a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 801338e:	9802      	ldr	r0, [sp, #8]
 8013390:	f000 fc1b 	bl	8013bca <__mcmp>
 8013394:	4642      	mov	r2, r8
 8013396:	9000      	str	r0, [sp, #0]
 8013398:	4629      	mov	r1, r5
 801339a:	4650      	mov	r0, sl
 801339c:	f000 fc31 	bl	8013c02 <__mdiff>
 80133a0:	68c3      	ldr	r3, [r0, #12]
 80133a2:	4602      	mov	r2, r0
 80133a4:	b93b      	cbnz	r3, 80133b6 <_dtoa_r+0x976>
 80133a6:	4601      	mov	r1, r0
 80133a8:	9007      	str	r0, [sp, #28]
 80133aa:	9802      	ldr	r0, [sp, #8]
 80133ac:	f000 fc0d 	bl	8013bca <__mcmp>
 80133b0:	9a07      	ldr	r2, [sp, #28]
 80133b2:	4603      	mov	r3, r0
 80133b4:	e000      	b.n	80133b8 <_dtoa_r+0x978>
 80133b6:	2301      	movs	r3, #1
 80133b8:	4611      	mov	r1, r2
 80133ba:	4650      	mov	r0, sl
 80133bc:	9307      	str	r3, [sp, #28]
 80133be:	f000 fa2c 	bl	801381a <_Bfree>
 80133c2:	9b07      	ldr	r3, [sp, #28]
 80133c4:	b94b      	cbnz	r3, 80133da <_dtoa_r+0x99a>
 80133c6:	9a06      	ldr	r2, [sp, #24]
 80133c8:	b93a      	cbnz	r2, 80133da <_dtoa_r+0x99a>
 80133ca:	9a05      	ldr	r2, [sp, #20]
 80133cc:	b92a      	cbnz	r2, 80133da <_dtoa_r+0x99a>
 80133ce:	2f39      	cmp	r7, #57	; 0x39
 80133d0:	d028      	beq.n	8013424 <_dtoa_r+0x9e4>
 80133d2:	9b00      	ldr	r3, [sp, #0]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	dc1a      	bgt.n	801340e <_dtoa_r+0x9ce>
 80133d8:	e01b      	b.n	8013412 <_dtoa_r+0x9d2>
 80133da:	9a00      	ldr	r2, [sp, #0]
 80133dc:	2a00      	cmp	r2, #0
 80133de:	db04      	blt.n	80133ea <_dtoa_r+0x9aa>
 80133e0:	d11a      	bne.n	8013418 <_dtoa_r+0x9d8>
 80133e2:	9a06      	ldr	r2, [sp, #24]
 80133e4:	b9c2      	cbnz	r2, 8013418 <_dtoa_r+0x9d8>
 80133e6:	9a05      	ldr	r2, [sp, #20]
 80133e8:	b9b2      	cbnz	r2, 8013418 <_dtoa_r+0x9d8>
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	dd11      	ble.n	8013412 <_dtoa_r+0x9d2>
 80133ee:	2201      	movs	r2, #1
 80133f0:	9902      	ldr	r1, [sp, #8]
 80133f2:	4650      	mov	r0, sl
 80133f4:	f000 fb98 	bl	8013b28 <__lshift>
 80133f8:	4629      	mov	r1, r5
 80133fa:	9002      	str	r0, [sp, #8]
 80133fc:	f000 fbe5 	bl	8013bca <__mcmp>
 8013400:	2800      	cmp	r0, #0
 8013402:	dc02      	bgt.n	801340a <_dtoa_r+0x9ca>
 8013404:	d105      	bne.n	8013412 <_dtoa_r+0x9d2>
 8013406:	07fa      	lsls	r2, r7, #31
 8013408:	d503      	bpl.n	8013412 <_dtoa_r+0x9d2>
 801340a:	2f39      	cmp	r7, #57	; 0x39
 801340c:	d00a      	beq.n	8013424 <_dtoa_r+0x9e4>
 801340e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8013412:	f109 0401 	add.w	r4, r9, #1
 8013416:	e00c      	b.n	8013432 <_dtoa_r+0x9f2>
 8013418:	2b00      	cmp	r3, #0
 801341a:	f109 0401 	add.w	r4, r9, #1
 801341e:	dd0b      	ble.n	8013438 <_dtoa_r+0x9f8>
 8013420:	2f39      	cmp	r7, #57	; 0x39
 8013422:	d105      	bne.n	8013430 <_dtoa_r+0x9f0>
 8013424:	2339      	movs	r3, #57	; 0x39
 8013426:	f889 3000 	strb.w	r3, [r9]
 801342a:	f109 0901 	add.w	r9, r9, #1
 801342e:	e054      	b.n	80134da <_dtoa_r+0xa9a>
 8013430:	3701      	adds	r7, #1
 8013432:	f889 7000 	strb.w	r7, [r9]
 8013436:	e06d      	b.n	8013514 <_dtoa_r+0xad4>
 8013438:	9b04      	ldr	r3, [sp, #16]
 801343a:	9a03      	ldr	r2, [sp, #12]
 801343c:	f804 7c01 	strb.w	r7, [r4, #-1]
 8013440:	1ae3      	subs	r3, r4, r3
 8013442:	4293      	cmp	r3, r2
 8013444:	46a1      	mov	r9, r4
 8013446:	d03a      	beq.n	80134be <_dtoa_r+0xa7e>
 8013448:	2300      	movs	r3, #0
 801344a:	220a      	movs	r2, #10
 801344c:	9902      	ldr	r1, [sp, #8]
 801344e:	4650      	mov	r0, sl
 8013450:	f000 f9fa 	bl	8013848 <__multadd>
 8013454:	4546      	cmp	r6, r8
 8013456:	9002      	str	r0, [sp, #8]
 8013458:	f04f 0300 	mov.w	r3, #0
 801345c:	f04f 020a 	mov.w	r2, #10
 8013460:	4631      	mov	r1, r6
 8013462:	4650      	mov	r0, sl
 8013464:	d104      	bne.n	8013470 <_dtoa_r+0xa30>
 8013466:	f000 f9ef 	bl	8013848 <__multadd>
 801346a:	4606      	mov	r6, r0
 801346c:	4680      	mov	r8, r0
 801346e:	e786      	b.n	801337e <_dtoa_r+0x93e>
 8013470:	f000 f9ea 	bl	8013848 <__multadd>
 8013474:	4641      	mov	r1, r8
 8013476:	4606      	mov	r6, r0
 8013478:	2300      	movs	r3, #0
 801347a:	220a      	movs	r2, #10
 801347c:	4650      	mov	r0, sl
 801347e:	f000 f9e3 	bl	8013848 <__multadd>
 8013482:	4680      	mov	r8, r0
 8013484:	e77b      	b.n	801337e <_dtoa_r+0x93e>
 8013486:	2300      	movs	r3, #0
 8013488:	220a      	movs	r2, #10
 801348a:	9902      	ldr	r1, [sp, #8]
 801348c:	4650      	mov	r0, sl
 801348e:	f000 f9db 	bl	8013848 <__multadd>
 8013492:	9002      	str	r0, [sp, #8]
 8013494:	4629      	mov	r1, r5
 8013496:	9802      	ldr	r0, [sp, #8]
 8013498:	f7ff fa40 	bl	801291c <quorem>
 801349c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80134a0:	f804 7b01 	strb.w	r7, [r4], #1
 80134a4:	9b04      	ldr	r3, [sp, #16]
 80134a6:	9a03      	ldr	r2, [sp, #12]
 80134a8:	1ae3      	subs	r3, r4, r3
 80134aa:	4293      	cmp	r3, r2
 80134ac:	dbeb      	blt.n	8013486 <_dtoa_r+0xa46>
 80134ae:	9b04      	ldr	r3, [sp, #16]
 80134b0:	2a01      	cmp	r2, #1
 80134b2:	bfac      	ite	ge
 80134b4:	189b      	addge	r3, r3, r2
 80134b6:	3301      	addlt	r3, #1
 80134b8:	46b0      	mov	r8, r6
 80134ba:	4699      	mov	r9, r3
 80134bc:	2600      	movs	r6, #0
 80134be:	2201      	movs	r2, #1
 80134c0:	9902      	ldr	r1, [sp, #8]
 80134c2:	4650      	mov	r0, sl
 80134c4:	f000 fb30 	bl	8013b28 <__lshift>
 80134c8:	4629      	mov	r1, r5
 80134ca:	9002      	str	r0, [sp, #8]
 80134cc:	f000 fb7d 	bl	8013bca <__mcmp>
 80134d0:	2800      	cmp	r0, #0
 80134d2:	dc02      	bgt.n	80134da <_dtoa_r+0xa9a>
 80134d4:	d115      	bne.n	8013502 <_dtoa_r+0xac2>
 80134d6:	07fb      	lsls	r3, r7, #31
 80134d8:	d513      	bpl.n	8013502 <_dtoa_r+0xac2>
 80134da:	464c      	mov	r4, r9
 80134dc:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80134e0:	2b39      	cmp	r3, #57	; 0x39
 80134e2:	f104 32ff 	add.w	r2, r4, #4294967295
 80134e6:	d109      	bne.n	80134fc <_dtoa_r+0xabc>
 80134e8:	9b04      	ldr	r3, [sp, #16]
 80134ea:	4293      	cmp	r3, r2
 80134ec:	d104      	bne.n	80134f8 <_dtoa_r+0xab8>
 80134ee:	f10b 0b01 	add.w	fp, fp, #1
 80134f2:	2331      	movs	r3, #49	; 0x31
 80134f4:	9a04      	ldr	r2, [sp, #16]
 80134f6:	e002      	b.n	80134fe <_dtoa_r+0xabe>
 80134f8:	4614      	mov	r4, r2
 80134fa:	e7ef      	b.n	80134dc <_dtoa_r+0xa9c>
 80134fc:	3301      	adds	r3, #1
 80134fe:	7013      	strb	r3, [r2, #0]
 8013500:	e008      	b.n	8013514 <_dtoa_r+0xad4>
 8013502:	464c      	mov	r4, r9
 8013504:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8013508:	2b30      	cmp	r3, #48	; 0x30
 801350a:	f104 32ff 	add.w	r2, r4, #4294967295
 801350e:	d101      	bne.n	8013514 <_dtoa_r+0xad4>
 8013510:	4614      	mov	r4, r2
 8013512:	e7f7      	b.n	8013504 <_dtoa_r+0xac4>
 8013514:	4629      	mov	r1, r5
 8013516:	4650      	mov	r0, sl
 8013518:	f000 f97f 	bl	801381a <_Bfree>
 801351c:	f1b8 0f00 	cmp.w	r8, #0
 8013520:	d00d      	beq.n	801353e <_dtoa_r+0xafe>
 8013522:	b12e      	cbz	r6, 8013530 <_dtoa_r+0xaf0>
 8013524:	4546      	cmp	r6, r8
 8013526:	d003      	beq.n	8013530 <_dtoa_r+0xaf0>
 8013528:	4631      	mov	r1, r6
 801352a:	4650      	mov	r0, sl
 801352c:	f000 f975 	bl	801381a <_Bfree>
 8013530:	4641      	mov	r1, r8
 8013532:	4650      	mov	r0, sl
 8013534:	f000 f971 	bl	801381a <_Bfree>
 8013538:	e001      	b.n	801353e <_dtoa_r+0xafe>
 801353a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801353e:	9902      	ldr	r1, [sp, #8]
 8013540:	4650      	mov	r0, sl
 8013542:	f000 f96a 	bl	801381a <_Bfree>
 8013546:	2300      	movs	r3, #0
 8013548:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801354a:	7023      	strb	r3, [r4, #0]
 801354c:	f10b 0301 	add.w	r3, fp, #1
 8013550:	6013      	str	r3, [r2, #0]
 8013552:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013554:	b11b      	cbz	r3, 801355e <_dtoa_r+0xb1e>
 8013556:	601c      	str	r4, [r3, #0]
 8013558:	e001      	b.n	801355e <_dtoa_r+0xb1e>
 801355a:	4808      	ldr	r0, [pc, #32]	; (801357c <_dtoa_r+0xb3c>)
 801355c:	e00a      	b.n	8013574 <_dtoa_r+0xb34>
 801355e:	9804      	ldr	r0, [sp, #16]
 8013560:	e008      	b.n	8013574 <_dtoa_r+0xb34>
 8013562:	9b03      	ldr	r3, [sp, #12]
 8013564:	2b00      	cmp	r3, #0
 8013566:	f73f aee1 	bgt.w	801332c <_dtoa_r+0x8ec>
 801356a:	9b06      	ldr	r3, [sp, #24]
 801356c:	2b02      	cmp	r3, #2
 801356e:	f77f aedd 	ble.w	801332c <_dtoa_r+0x8ec>
 8013572:	e6b1      	b.n	80132d8 <_dtoa_r+0x898>
 8013574:	b017      	add	sp, #92	; 0x5c
 8013576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801357a:	bf00      	nop
 801357c:	0802d157 	.word	0x0802d157

08013580 <_malloc_trim_r>:
 8013580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013584:	4f25      	ldr	r7, [pc, #148]	; (801361c <_malloc_trim_r+0x9c>)
 8013586:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8013628 <_malloc_trim_r+0xa8>
 801358a:	4689      	mov	r9, r1
 801358c:	4606      	mov	r6, r0
 801358e:	f7fe f94d 	bl	801182c <__malloc_lock>
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	685d      	ldr	r5, [r3, #4]
 8013596:	f1a8 0411 	sub.w	r4, r8, #17
 801359a:	f025 0503 	bic.w	r5, r5, #3
 801359e:	442c      	add	r4, r5
 80135a0:	ebc9 0404 	rsb	r4, r9, r4
 80135a4:	fbb4 f4f8 	udiv	r4, r4, r8
 80135a8:	3c01      	subs	r4, #1
 80135aa:	fb08 f404 	mul.w	r4, r8, r4
 80135ae:	4544      	cmp	r4, r8
 80135b0:	da05      	bge.n	80135be <_malloc_trim_r+0x3e>
 80135b2:	4630      	mov	r0, r6
 80135b4:	f7fe f93b 	bl	801182e <__malloc_unlock>
 80135b8:	2000      	movs	r0, #0
 80135ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135be:	2100      	movs	r1, #0
 80135c0:	4630      	mov	r0, r6
 80135c2:	f7fe f96f 	bl	80118a4 <_sbrk_r>
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	442b      	add	r3, r5
 80135ca:	4298      	cmp	r0, r3
 80135cc:	d1f1      	bne.n	80135b2 <_malloc_trim_r+0x32>
 80135ce:	4261      	negs	r1, r4
 80135d0:	4630      	mov	r0, r6
 80135d2:	f7fe f967 	bl	80118a4 <_sbrk_r>
 80135d6:	3001      	adds	r0, #1
 80135d8:	d110      	bne.n	80135fc <_malloc_trim_r+0x7c>
 80135da:	2100      	movs	r1, #0
 80135dc:	4630      	mov	r0, r6
 80135de:	f7fe f961 	bl	80118a4 <_sbrk_r>
 80135e2:	68ba      	ldr	r2, [r7, #8]
 80135e4:	1a83      	subs	r3, r0, r2
 80135e6:	2b0f      	cmp	r3, #15
 80135e8:	dde3      	ble.n	80135b2 <_malloc_trim_r+0x32>
 80135ea:	490d      	ldr	r1, [pc, #52]	; (8013620 <_malloc_trim_r+0xa0>)
 80135ec:	6809      	ldr	r1, [r1, #0]
 80135ee:	1a40      	subs	r0, r0, r1
 80135f0:	490c      	ldr	r1, [pc, #48]	; (8013624 <_malloc_trim_r+0xa4>)
 80135f2:	f043 0301 	orr.w	r3, r3, #1
 80135f6:	6008      	str	r0, [r1, #0]
 80135f8:	6053      	str	r3, [r2, #4]
 80135fa:	e7da      	b.n	80135b2 <_malloc_trim_r+0x32>
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	4a09      	ldr	r2, [pc, #36]	; (8013624 <_malloc_trim_r+0xa4>)
 8013600:	1b2d      	subs	r5, r5, r4
 8013602:	f045 0501 	orr.w	r5, r5, #1
 8013606:	605d      	str	r5, [r3, #4]
 8013608:	6813      	ldr	r3, [r2, #0]
 801360a:	4630      	mov	r0, r6
 801360c:	1b1c      	subs	r4, r3, r4
 801360e:	6014      	str	r4, [r2, #0]
 8013610:	f7fe f90d 	bl	801182e <__malloc_unlock>
 8013614:	2001      	movs	r0, #1
 8013616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801361a:	bf00      	nop
 801361c:	20010090 	.word	0x20010090
 8013620:	2001049c 	.word	0x2001049c
 8013624:	20042f78 	.word	0x20042f78
 8013628:	00000080 	.word	0x00000080

0801362c <_free_r>:
 801362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013630:	4604      	mov	r4, r0
 8013632:	4688      	mov	r8, r1
 8013634:	2900      	cmp	r1, #0
 8013636:	f000 80ad 	beq.w	8013794 <_free_r+0x168>
 801363a:	f7fe f8f7 	bl	801182c <__malloc_lock>
 801363e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8013642:	4d55      	ldr	r5, [pc, #340]	; (8013798 <_free_r+0x16c>)
 8013644:	f022 0001 	bic.w	r0, r2, #1
 8013648:	f1a8 0308 	sub.w	r3, r8, #8
 801364c:	181f      	adds	r7, r3, r0
 801364e:	68a9      	ldr	r1, [r5, #8]
 8013650:	687e      	ldr	r6, [r7, #4]
 8013652:	428f      	cmp	r7, r1
 8013654:	f026 0603 	bic.w	r6, r6, #3
 8013658:	f002 0201 	and.w	r2, r2, #1
 801365c:	d11b      	bne.n	8013696 <_free_r+0x6a>
 801365e:	4430      	add	r0, r6
 8013660:	b93a      	cbnz	r2, 8013672 <_free_r+0x46>
 8013662:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8013666:	1a9b      	subs	r3, r3, r2
 8013668:	4410      	add	r0, r2
 801366a:	6899      	ldr	r1, [r3, #8]
 801366c:	68da      	ldr	r2, [r3, #12]
 801366e:	60ca      	str	r2, [r1, #12]
 8013670:	6091      	str	r1, [r2, #8]
 8013672:	f040 0201 	orr.w	r2, r0, #1
 8013676:	605a      	str	r2, [r3, #4]
 8013678:	60ab      	str	r3, [r5, #8]
 801367a:	4b48      	ldr	r3, [pc, #288]	; (801379c <_free_r+0x170>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	4298      	cmp	r0, r3
 8013680:	d304      	bcc.n	801368c <_free_r+0x60>
 8013682:	4b47      	ldr	r3, [pc, #284]	; (80137a0 <_free_r+0x174>)
 8013684:	4620      	mov	r0, r4
 8013686:	6819      	ldr	r1, [r3, #0]
 8013688:	f7ff ff7a 	bl	8013580 <_malloc_trim_r>
 801368c:	4620      	mov	r0, r4
 801368e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013692:	f7fe b8cc 	b.w	801182e <__malloc_unlock>
 8013696:	607e      	str	r6, [r7, #4]
 8013698:	b97a      	cbnz	r2, 80136ba <_free_r+0x8e>
 801369a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 801369e:	1a5b      	subs	r3, r3, r1
 80136a0:	4408      	add	r0, r1
 80136a2:	6899      	ldr	r1, [r3, #8]
 80136a4:	f105 0e08 	add.w	lr, r5, #8
 80136a8:	4571      	cmp	r1, lr
 80136aa:	d008      	beq.n	80136be <_free_r+0x92>
 80136ac:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80136b0:	f8c1 e00c 	str.w	lr, [r1, #12]
 80136b4:	f8ce 1008 	str.w	r1, [lr, #8]
 80136b8:	e002      	b.n	80136c0 <_free_r+0x94>
 80136ba:	2200      	movs	r2, #0
 80136bc:	e000      	b.n	80136c0 <_free_r+0x94>
 80136be:	2201      	movs	r2, #1
 80136c0:	19b9      	adds	r1, r7, r6
 80136c2:	6849      	ldr	r1, [r1, #4]
 80136c4:	07c9      	lsls	r1, r1, #31
 80136c6:	d40e      	bmi.n	80136e6 <_free_r+0xba>
 80136c8:	4430      	add	r0, r6
 80136ca:	68b9      	ldr	r1, [r7, #8]
 80136cc:	b942      	cbnz	r2, 80136e0 <_free_r+0xb4>
 80136ce:	4e35      	ldr	r6, [pc, #212]	; (80137a4 <_free_r+0x178>)
 80136d0:	42b1      	cmp	r1, r6
 80136d2:	d105      	bne.n	80136e0 <_free_r+0xb4>
 80136d4:	616b      	str	r3, [r5, #20]
 80136d6:	612b      	str	r3, [r5, #16]
 80136d8:	2201      	movs	r2, #1
 80136da:	60d9      	str	r1, [r3, #12]
 80136dc:	6099      	str	r1, [r3, #8]
 80136de:	e002      	b.n	80136e6 <_free_r+0xba>
 80136e0:	68fe      	ldr	r6, [r7, #12]
 80136e2:	60ce      	str	r6, [r1, #12]
 80136e4:	60b1      	str	r1, [r6, #8]
 80136e6:	f040 0101 	orr.w	r1, r0, #1
 80136ea:	6059      	str	r1, [r3, #4]
 80136ec:	5018      	str	r0, [r3, r0]
 80136ee:	2a00      	cmp	r2, #0
 80136f0:	d1cc      	bne.n	801368c <_free_r+0x60>
 80136f2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80136f6:	d212      	bcs.n	801371e <_free_r+0xf2>
 80136f8:	08c0      	lsrs	r0, r0, #3
 80136fa:	1081      	asrs	r1, r0, #2
 80136fc:	2201      	movs	r2, #1
 80136fe:	fa02 f101 	lsl.w	r1, r2, r1
 8013702:	686a      	ldr	r2, [r5, #4]
 8013704:	3001      	adds	r0, #1
 8013706:	430a      	orrs	r2, r1
 8013708:	606a      	str	r2, [r5, #4]
 801370a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 801370e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8013712:	6099      	str	r1, [r3, #8]
 8013714:	3a08      	subs	r2, #8
 8013716:	60da      	str	r2, [r3, #12]
 8013718:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 801371c:	e038      	b.n	8013790 <_free_r+0x164>
 801371e:	0a42      	lsrs	r2, r0, #9
 8013720:	2a04      	cmp	r2, #4
 8013722:	d802      	bhi.n	801372a <_free_r+0xfe>
 8013724:	0982      	lsrs	r2, r0, #6
 8013726:	3238      	adds	r2, #56	; 0x38
 8013728:	e015      	b.n	8013756 <_free_r+0x12a>
 801372a:	2a14      	cmp	r2, #20
 801372c:	d801      	bhi.n	8013732 <_free_r+0x106>
 801372e:	325b      	adds	r2, #91	; 0x5b
 8013730:	e011      	b.n	8013756 <_free_r+0x12a>
 8013732:	2a54      	cmp	r2, #84	; 0x54
 8013734:	d802      	bhi.n	801373c <_free_r+0x110>
 8013736:	0b02      	lsrs	r2, r0, #12
 8013738:	326e      	adds	r2, #110	; 0x6e
 801373a:	e00c      	b.n	8013756 <_free_r+0x12a>
 801373c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8013740:	d802      	bhi.n	8013748 <_free_r+0x11c>
 8013742:	0bc2      	lsrs	r2, r0, #15
 8013744:	3277      	adds	r2, #119	; 0x77
 8013746:	e006      	b.n	8013756 <_free_r+0x12a>
 8013748:	f240 5154 	movw	r1, #1364	; 0x554
 801374c:	428a      	cmp	r2, r1
 801374e:	bf9a      	itte	ls
 8013750:	0c82      	lsrls	r2, r0, #18
 8013752:	327c      	addls	r2, #124	; 0x7c
 8013754:	227e      	movhi	r2, #126	; 0x7e
 8013756:	1c51      	adds	r1, r2, #1
 8013758:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 801375c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8013760:	4f0d      	ldr	r7, [pc, #52]	; (8013798 <_free_r+0x16c>)
 8013762:	428e      	cmp	r6, r1
 8013764:	d10b      	bne.n	801377e <_free_r+0x152>
 8013766:	2101      	movs	r1, #1
 8013768:	1092      	asrs	r2, r2, #2
 801376a:	fa01 f202 	lsl.w	r2, r1, r2
 801376e:	6879      	ldr	r1, [r7, #4]
 8013770:	4311      	orrs	r1, r2
 8013772:	6079      	str	r1, [r7, #4]
 8013774:	4631      	mov	r1, r6
 8013776:	e008      	b.n	801378a <_free_r+0x15e>
 8013778:	6889      	ldr	r1, [r1, #8]
 801377a:	428e      	cmp	r6, r1
 801377c:	d004      	beq.n	8013788 <_free_r+0x15c>
 801377e:	684a      	ldr	r2, [r1, #4]
 8013780:	f022 0203 	bic.w	r2, r2, #3
 8013784:	4290      	cmp	r0, r2
 8013786:	d3f7      	bcc.n	8013778 <_free_r+0x14c>
 8013788:	68ce      	ldr	r6, [r1, #12]
 801378a:	60de      	str	r6, [r3, #12]
 801378c:	6099      	str	r1, [r3, #8]
 801378e:	60b3      	str	r3, [r6, #8]
 8013790:	60cb      	str	r3, [r1, #12]
 8013792:	e77b      	b.n	801368c <_free_r+0x60>
 8013794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013798:	20010090 	.word	0x20010090
 801379c:	20010498 	.word	0x20010498
 80137a0:	20042f74 	.word	0x20042f74
 80137a4:	20010098 	.word	0x20010098

080137a8 <_localeconv_r>:
 80137a8:	4800      	ldr	r0, [pc, #0]	; (80137ac <_localeconv_r+0x4>)
 80137aa:	4770      	bx	lr
 80137ac:	20010594 	.word	0x20010594

080137b0 <_Balloc>:
 80137b0:	b570      	push	{r4, r5, r6, lr}
 80137b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80137b4:	4604      	mov	r4, r0
 80137b6:	460e      	mov	r6, r1
 80137b8:	b93d      	cbnz	r5, 80137ca <_Balloc+0x1a>
 80137ba:	2010      	movs	r0, #16
 80137bc:	f7fd fde4 	bl	8011388 <malloc>
 80137c0:	6260      	str	r0, [r4, #36]	; 0x24
 80137c2:	6045      	str	r5, [r0, #4]
 80137c4:	6085      	str	r5, [r0, #8]
 80137c6:	6005      	str	r5, [r0, #0]
 80137c8:	60c5      	str	r5, [r0, #12]
 80137ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80137cc:	68eb      	ldr	r3, [r5, #12]
 80137ce:	b143      	cbz	r3, 80137e2 <_Balloc+0x32>
 80137d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80137d8:	b178      	cbz	r0, 80137fa <_Balloc+0x4a>
 80137da:	6802      	ldr	r2, [r0, #0]
 80137dc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80137e0:	e017      	b.n	8013812 <_Balloc+0x62>
 80137e2:	2221      	movs	r2, #33	; 0x21
 80137e4:	2104      	movs	r1, #4
 80137e6:	4620      	mov	r0, r4
 80137e8:	f000 fb37 	bl	8013e5a <_calloc_r>
 80137ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80137ee:	60e8      	str	r0, [r5, #12]
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d1ec      	bne.n	80137d0 <_Balloc+0x20>
 80137f6:	2000      	movs	r0, #0
 80137f8:	bd70      	pop	{r4, r5, r6, pc}
 80137fa:	2101      	movs	r1, #1
 80137fc:	fa01 f506 	lsl.w	r5, r1, r6
 8013800:	1d6a      	adds	r2, r5, #5
 8013802:	0092      	lsls	r2, r2, #2
 8013804:	4620      	mov	r0, r4
 8013806:	f000 fb28 	bl	8013e5a <_calloc_r>
 801380a:	2800      	cmp	r0, #0
 801380c:	d0f3      	beq.n	80137f6 <_Balloc+0x46>
 801380e:	6046      	str	r6, [r0, #4]
 8013810:	6085      	str	r5, [r0, #8]
 8013812:	2300      	movs	r3, #0
 8013814:	6103      	str	r3, [r0, #16]
 8013816:	60c3      	str	r3, [r0, #12]
 8013818:	bd70      	pop	{r4, r5, r6, pc}

0801381a <_Bfree>:
 801381a:	b570      	push	{r4, r5, r6, lr}
 801381c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801381e:	4606      	mov	r6, r0
 8013820:	460d      	mov	r5, r1
 8013822:	b93c      	cbnz	r4, 8013834 <_Bfree+0x1a>
 8013824:	2010      	movs	r0, #16
 8013826:	f7fd fdaf 	bl	8011388 <malloc>
 801382a:	6270      	str	r0, [r6, #36]	; 0x24
 801382c:	6044      	str	r4, [r0, #4]
 801382e:	6084      	str	r4, [r0, #8]
 8013830:	6004      	str	r4, [r0, #0]
 8013832:	60c4      	str	r4, [r0, #12]
 8013834:	b13d      	cbz	r5, 8013846 <_Bfree+0x2c>
 8013836:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013838:	686a      	ldr	r2, [r5, #4]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013840:	6029      	str	r1, [r5, #0]
 8013842:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013846:	bd70      	pop	{r4, r5, r6, pc}

08013848 <__multadd>:
 8013848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801384c:	690d      	ldr	r5, [r1, #16]
 801384e:	461f      	mov	r7, r3
 8013850:	4606      	mov	r6, r0
 8013852:	460c      	mov	r4, r1
 8013854:	f101 0e14 	add.w	lr, r1, #20
 8013858:	2300      	movs	r3, #0
 801385a:	f8de 0000 	ldr.w	r0, [lr]
 801385e:	b281      	uxth	r1, r0
 8013860:	fb02 7101 	mla	r1, r2, r1, r7
 8013864:	0c0f      	lsrs	r7, r1, #16
 8013866:	0c00      	lsrs	r0, r0, #16
 8013868:	fb02 7000 	mla	r0, r2, r0, r7
 801386c:	b289      	uxth	r1, r1
 801386e:	3301      	adds	r3, #1
 8013870:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013874:	429d      	cmp	r5, r3
 8013876:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801387a:	f84e 1b04 	str.w	r1, [lr], #4
 801387e:	dcec      	bgt.n	801385a <__multadd+0x12>
 8013880:	b1d7      	cbz	r7, 80138b8 <__multadd+0x70>
 8013882:	68a3      	ldr	r3, [r4, #8]
 8013884:	429d      	cmp	r5, r3
 8013886:	db12      	blt.n	80138ae <__multadd+0x66>
 8013888:	6861      	ldr	r1, [r4, #4]
 801388a:	4630      	mov	r0, r6
 801388c:	3101      	adds	r1, #1
 801388e:	f7ff ff8f 	bl	80137b0 <_Balloc>
 8013892:	6922      	ldr	r2, [r4, #16]
 8013894:	3202      	adds	r2, #2
 8013896:	f104 010c 	add.w	r1, r4, #12
 801389a:	4680      	mov	r8, r0
 801389c:	0092      	lsls	r2, r2, #2
 801389e:	300c      	adds	r0, #12
 80138a0:	f7fd ffb1 	bl	8011806 <memcpy>
 80138a4:	4621      	mov	r1, r4
 80138a6:	4630      	mov	r0, r6
 80138a8:	f7ff ffb7 	bl	801381a <_Bfree>
 80138ac:	4644      	mov	r4, r8
 80138ae:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80138b2:	3501      	adds	r5, #1
 80138b4:	615f      	str	r7, [r3, #20]
 80138b6:	6125      	str	r5, [r4, #16]
 80138b8:	4620      	mov	r0, r4
 80138ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080138be <__hi0bits>:
 80138be:	0c03      	lsrs	r3, r0, #16
 80138c0:	041b      	lsls	r3, r3, #16
 80138c2:	b913      	cbnz	r3, 80138ca <__hi0bits+0xc>
 80138c4:	0400      	lsls	r0, r0, #16
 80138c6:	2310      	movs	r3, #16
 80138c8:	e000      	b.n	80138cc <__hi0bits+0xe>
 80138ca:	2300      	movs	r3, #0
 80138cc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80138d0:	bf04      	itt	eq
 80138d2:	0200      	lsleq	r0, r0, #8
 80138d4:	3308      	addeq	r3, #8
 80138d6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80138da:	bf04      	itt	eq
 80138dc:	0100      	lsleq	r0, r0, #4
 80138de:	3304      	addeq	r3, #4
 80138e0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80138e4:	bf04      	itt	eq
 80138e6:	0080      	lsleq	r0, r0, #2
 80138e8:	3302      	addeq	r3, #2
 80138ea:	2800      	cmp	r0, #0
 80138ec:	db03      	blt.n	80138f6 <__hi0bits+0x38>
 80138ee:	0042      	lsls	r2, r0, #1
 80138f0:	d503      	bpl.n	80138fa <__hi0bits+0x3c>
 80138f2:	1c58      	adds	r0, r3, #1
 80138f4:	4770      	bx	lr
 80138f6:	4618      	mov	r0, r3
 80138f8:	4770      	bx	lr
 80138fa:	2020      	movs	r0, #32
 80138fc:	4770      	bx	lr

080138fe <__lo0bits>:
 80138fe:	6803      	ldr	r3, [r0, #0]
 8013900:	f013 0207 	ands.w	r2, r3, #7
 8013904:	d00b      	beq.n	801391e <__lo0bits+0x20>
 8013906:	07d9      	lsls	r1, r3, #31
 8013908:	d422      	bmi.n	8013950 <__lo0bits+0x52>
 801390a:	079a      	lsls	r2, r3, #30
 801390c:	bf4b      	itete	mi
 801390e:	085b      	lsrmi	r3, r3, #1
 8013910:	089b      	lsrpl	r3, r3, #2
 8013912:	6003      	strmi	r3, [r0, #0]
 8013914:	6003      	strpl	r3, [r0, #0]
 8013916:	bf4c      	ite	mi
 8013918:	2001      	movmi	r0, #1
 801391a:	2002      	movpl	r0, #2
 801391c:	4770      	bx	lr
 801391e:	b299      	uxth	r1, r3
 8013920:	b909      	cbnz	r1, 8013926 <__lo0bits+0x28>
 8013922:	0c1b      	lsrs	r3, r3, #16
 8013924:	2210      	movs	r2, #16
 8013926:	f013 0fff 	tst.w	r3, #255	; 0xff
 801392a:	bf04      	itt	eq
 801392c:	0a1b      	lsreq	r3, r3, #8
 801392e:	3208      	addeq	r2, #8
 8013930:	0719      	lsls	r1, r3, #28
 8013932:	bf04      	itt	eq
 8013934:	091b      	lsreq	r3, r3, #4
 8013936:	3204      	addeq	r2, #4
 8013938:	0799      	lsls	r1, r3, #30
 801393a:	bf04      	itt	eq
 801393c:	089b      	lsreq	r3, r3, #2
 801393e:	3202      	addeq	r2, #2
 8013940:	07d9      	lsls	r1, r3, #31
 8013942:	d402      	bmi.n	801394a <__lo0bits+0x4c>
 8013944:	085b      	lsrs	r3, r3, #1
 8013946:	d005      	beq.n	8013954 <__lo0bits+0x56>
 8013948:	3201      	adds	r2, #1
 801394a:	6003      	str	r3, [r0, #0]
 801394c:	4610      	mov	r0, r2
 801394e:	4770      	bx	lr
 8013950:	2000      	movs	r0, #0
 8013952:	4770      	bx	lr
 8013954:	2020      	movs	r0, #32
 8013956:	4770      	bx	lr

08013958 <__i2b>:
 8013958:	b510      	push	{r4, lr}
 801395a:	460c      	mov	r4, r1
 801395c:	2101      	movs	r1, #1
 801395e:	f7ff ff27 	bl	80137b0 <_Balloc>
 8013962:	2201      	movs	r2, #1
 8013964:	6144      	str	r4, [r0, #20]
 8013966:	6102      	str	r2, [r0, #16]
 8013968:	bd10      	pop	{r4, pc}

0801396a <__multiply>:
 801396a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801396e:	4614      	mov	r4, r2
 8013970:	690a      	ldr	r2, [r1, #16]
 8013972:	6923      	ldr	r3, [r4, #16]
 8013974:	429a      	cmp	r2, r3
 8013976:	bfb8      	it	lt
 8013978:	460b      	movlt	r3, r1
 801397a:	4688      	mov	r8, r1
 801397c:	bfbc      	itt	lt
 801397e:	46a0      	movlt	r8, r4
 8013980:	461c      	movlt	r4, r3
 8013982:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013986:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801398a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801398e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013992:	eb07 0609 	add.w	r6, r7, r9
 8013996:	429e      	cmp	r6, r3
 8013998:	bfc8      	it	gt
 801399a:	3101      	addgt	r1, #1
 801399c:	f7ff ff08 	bl	80137b0 <_Balloc>
 80139a0:	f100 0514 	add.w	r5, r0, #20
 80139a4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80139a8:	462b      	mov	r3, r5
 80139aa:	2200      	movs	r2, #0
 80139ac:	4563      	cmp	r3, ip
 80139ae:	d202      	bcs.n	80139b6 <__multiply+0x4c>
 80139b0:	f843 2b04 	str.w	r2, [r3], #4
 80139b4:	e7fa      	b.n	80139ac <__multiply+0x42>
 80139b6:	f104 0214 	add.w	r2, r4, #20
 80139ba:	f108 0114 	add.w	r1, r8, #20
 80139be:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80139c2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80139c6:	9300      	str	r3, [sp, #0]
 80139c8:	9b00      	ldr	r3, [sp, #0]
 80139ca:	9201      	str	r2, [sp, #4]
 80139cc:	4293      	cmp	r3, r2
 80139ce:	d957      	bls.n	8013a80 <__multiply+0x116>
 80139d0:	f8b2 b000 	ldrh.w	fp, [r2]
 80139d4:	f1bb 0f00 	cmp.w	fp, #0
 80139d8:	d023      	beq.n	8013a22 <__multiply+0xb8>
 80139da:	4689      	mov	r9, r1
 80139dc:	46ae      	mov	lr, r5
 80139de:	f04f 0800 	mov.w	r8, #0
 80139e2:	f859 4b04 	ldr.w	r4, [r9], #4
 80139e6:	f8be a000 	ldrh.w	sl, [lr]
 80139ea:	b2a3      	uxth	r3, r4
 80139ec:	fb0b a303 	mla	r3, fp, r3, sl
 80139f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80139f4:	f8de 4000 	ldr.w	r4, [lr]
 80139f8:	4443      	add	r3, r8
 80139fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80139fe:	fb0b 840a 	mla	r4, fp, sl, r8
 8013a02:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013a06:	46f2      	mov	sl, lr
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013a0e:	454f      	cmp	r7, r9
 8013a10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013a14:	f84a 3b04 	str.w	r3, [sl], #4
 8013a18:	d901      	bls.n	8013a1e <__multiply+0xb4>
 8013a1a:	46d6      	mov	lr, sl
 8013a1c:	e7e1      	b.n	80139e2 <__multiply+0x78>
 8013a1e:	f8ce 8004 	str.w	r8, [lr, #4]
 8013a22:	9b01      	ldr	r3, [sp, #4]
 8013a24:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013a28:	3204      	adds	r2, #4
 8013a2a:	f1ba 0f00 	cmp.w	sl, #0
 8013a2e:	d021      	beq.n	8013a74 <__multiply+0x10a>
 8013a30:	682b      	ldr	r3, [r5, #0]
 8013a32:	462c      	mov	r4, r5
 8013a34:	4689      	mov	r9, r1
 8013a36:	f04f 0800 	mov.w	r8, #0
 8013a3a:	f8b9 e000 	ldrh.w	lr, [r9]
 8013a3e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8013a42:	fb0a be0e 	mla	lr, sl, lr, fp
 8013a46:	44f0      	add	r8, lr
 8013a48:	46a3      	mov	fp, r4
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8013a50:	f84b 3b04 	str.w	r3, [fp], #4
 8013a54:	f859 3b04 	ldr.w	r3, [r9], #4
 8013a58:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8013a5c:	0c1b      	lsrs	r3, r3, #16
 8013a5e:	fb0a e303 	mla	r3, sl, r3, lr
 8013a62:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8013a66:	454f      	cmp	r7, r9
 8013a68:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8013a6c:	d901      	bls.n	8013a72 <__multiply+0x108>
 8013a6e:	465c      	mov	r4, fp
 8013a70:	e7e3      	b.n	8013a3a <__multiply+0xd0>
 8013a72:	6063      	str	r3, [r4, #4]
 8013a74:	3504      	adds	r5, #4
 8013a76:	e7a7      	b.n	80139c8 <__multiply+0x5e>
 8013a78:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8013a7c:	b913      	cbnz	r3, 8013a84 <__multiply+0x11a>
 8013a7e:	3e01      	subs	r6, #1
 8013a80:	2e00      	cmp	r6, #0
 8013a82:	dcf9      	bgt.n	8013a78 <__multiply+0x10e>
 8013a84:	6106      	str	r6, [r0, #16]
 8013a86:	b003      	add	sp, #12
 8013a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a8c <__pow5mult>:
 8013a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a90:	4615      	mov	r5, r2
 8013a92:	f012 0203 	ands.w	r2, r2, #3
 8013a96:	4606      	mov	r6, r0
 8013a98:	460f      	mov	r7, r1
 8013a9a:	d007      	beq.n	8013aac <__pow5mult+0x20>
 8013a9c:	3a01      	subs	r2, #1
 8013a9e:	4c21      	ldr	r4, [pc, #132]	; (8013b24 <__pow5mult+0x98>)
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013aa6:	f7ff fecf 	bl	8013848 <__multadd>
 8013aaa:	4607      	mov	r7, r0
 8013aac:	10ad      	asrs	r5, r5, #2
 8013aae:	d036      	beq.n	8013b1e <__pow5mult+0x92>
 8013ab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013ab2:	b93c      	cbnz	r4, 8013ac4 <__pow5mult+0x38>
 8013ab4:	2010      	movs	r0, #16
 8013ab6:	f7fd fc67 	bl	8011388 <malloc>
 8013aba:	6270      	str	r0, [r6, #36]	; 0x24
 8013abc:	6044      	str	r4, [r0, #4]
 8013abe:	6084      	str	r4, [r0, #8]
 8013ac0:	6004      	str	r4, [r0, #0]
 8013ac2:	60c4      	str	r4, [r0, #12]
 8013ac4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013acc:	b94c      	cbnz	r4, 8013ae2 <__pow5mult+0x56>
 8013ace:	f240 2171 	movw	r1, #625	; 0x271
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	f7ff ff40 	bl	8013958 <__i2b>
 8013ad8:	2300      	movs	r3, #0
 8013ada:	f8c8 0008 	str.w	r0, [r8, #8]
 8013ade:	4604      	mov	r4, r0
 8013ae0:	6003      	str	r3, [r0, #0]
 8013ae2:	f04f 0800 	mov.w	r8, #0
 8013ae6:	07eb      	lsls	r3, r5, #31
 8013ae8:	d50a      	bpl.n	8013b00 <__pow5mult+0x74>
 8013aea:	4639      	mov	r1, r7
 8013aec:	4622      	mov	r2, r4
 8013aee:	4630      	mov	r0, r6
 8013af0:	f7ff ff3b 	bl	801396a <__multiply>
 8013af4:	4639      	mov	r1, r7
 8013af6:	4681      	mov	r9, r0
 8013af8:	4630      	mov	r0, r6
 8013afa:	f7ff fe8e 	bl	801381a <_Bfree>
 8013afe:	464f      	mov	r7, r9
 8013b00:	106d      	asrs	r5, r5, #1
 8013b02:	d00c      	beq.n	8013b1e <__pow5mult+0x92>
 8013b04:	6820      	ldr	r0, [r4, #0]
 8013b06:	b108      	cbz	r0, 8013b0c <__pow5mult+0x80>
 8013b08:	4604      	mov	r4, r0
 8013b0a:	e7ec      	b.n	8013ae6 <__pow5mult+0x5a>
 8013b0c:	4622      	mov	r2, r4
 8013b0e:	4621      	mov	r1, r4
 8013b10:	4630      	mov	r0, r6
 8013b12:	f7ff ff2a 	bl	801396a <__multiply>
 8013b16:	6020      	str	r0, [r4, #0]
 8013b18:	f8c0 8000 	str.w	r8, [r0]
 8013b1c:	e7f4      	b.n	8013b08 <__pow5mult+0x7c>
 8013b1e:	4638      	mov	r0, r7
 8013b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b24:	0802d3e0 	.word	0x0802d3e0

08013b28 <__lshift>:
 8013b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b2c:	460c      	mov	r4, r1
 8013b2e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013b32:	6926      	ldr	r6, [r4, #16]
 8013b34:	6849      	ldr	r1, [r1, #4]
 8013b36:	68a3      	ldr	r3, [r4, #8]
 8013b38:	4456      	add	r6, sl
 8013b3a:	4607      	mov	r7, r0
 8013b3c:	4691      	mov	r9, r2
 8013b3e:	1c75      	adds	r5, r6, #1
 8013b40:	42ab      	cmp	r3, r5
 8013b42:	da02      	bge.n	8013b4a <__lshift+0x22>
 8013b44:	3101      	adds	r1, #1
 8013b46:	005b      	lsls	r3, r3, #1
 8013b48:	e7fa      	b.n	8013b40 <__lshift+0x18>
 8013b4a:	4638      	mov	r0, r7
 8013b4c:	f7ff fe30 	bl	80137b0 <_Balloc>
 8013b50:	2300      	movs	r3, #0
 8013b52:	4680      	mov	r8, r0
 8013b54:	f100 0114 	add.w	r1, r0, #20
 8013b58:	461a      	mov	r2, r3
 8013b5a:	4553      	cmp	r3, sl
 8013b5c:	da03      	bge.n	8013b66 <__lshift+0x3e>
 8013b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013b62:	3301      	adds	r3, #1
 8013b64:	e7f9      	b.n	8013b5a <__lshift+0x32>
 8013b66:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8013b6a:	6920      	ldr	r0, [r4, #16]
 8013b6c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013b70:	f019 091f 	ands.w	r9, r9, #31
 8013b74:	f104 0114 	add.w	r1, r4, #20
 8013b78:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8013b7c:	d014      	beq.n	8013ba8 <__lshift+0x80>
 8013b7e:	f1c9 0c20 	rsb	ip, r9, #32
 8013b82:	2200      	movs	r2, #0
 8013b84:	6808      	ldr	r0, [r1, #0]
 8013b86:	fa00 f009 	lsl.w	r0, r0, r9
 8013b8a:	4302      	orrs	r2, r0
 8013b8c:	469a      	mov	sl, r3
 8013b8e:	f843 2b04 	str.w	r2, [r3], #4
 8013b92:	f851 2b04 	ldr.w	r2, [r1], #4
 8013b96:	458e      	cmp	lr, r1
 8013b98:	fa22 f20c 	lsr.w	r2, r2, ip
 8013b9c:	d8f2      	bhi.n	8013b84 <__lshift+0x5c>
 8013b9e:	f8ca 2004 	str.w	r2, [sl, #4]
 8013ba2:	b142      	cbz	r2, 8013bb6 <__lshift+0x8e>
 8013ba4:	1cb5      	adds	r5, r6, #2
 8013ba6:	e006      	b.n	8013bb6 <__lshift+0x8e>
 8013ba8:	3b04      	subs	r3, #4
 8013baa:	f851 2b04 	ldr.w	r2, [r1], #4
 8013bae:	f843 2f04 	str.w	r2, [r3, #4]!
 8013bb2:	458e      	cmp	lr, r1
 8013bb4:	d8f9      	bhi.n	8013baa <__lshift+0x82>
 8013bb6:	3d01      	subs	r5, #1
 8013bb8:	4638      	mov	r0, r7
 8013bba:	f8c8 5010 	str.w	r5, [r8, #16]
 8013bbe:	4621      	mov	r1, r4
 8013bc0:	f7ff fe2b 	bl	801381a <_Bfree>
 8013bc4:	4640      	mov	r0, r8
 8013bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013bca <__mcmp>:
 8013bca:	6903      	ldr	r3, [r0, #16]
 8013bcc:	690a      	ldr	r2, [r1, #16]
 8013bce:	1a9b      	subs	r3, r3, r2
 8013bd0:	b510      	push	{r4, lr}
 8013bd2:	d111      	bne.n	8013bf8 <__mcmp+0x2e>
 8013bd4:	0092      	lsls	r2, r2, #2
 8013bd6:	3014      	adds	r0, #20
 8013bd8:	3114      	adds	r1, #20
 8013bda:	1883      	adds	r3, r0, r2
 8013bdc:	440a      	add	r2, r1
 8013bde:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8013be2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013be6:	428c      	cmp	r4, r1
 8013be8:	d002      	beq.n	8013bf0 <__mcmp+0x26>
 8013bea:	d307      	bcc.n	8013bfc <__mcmp+0x32>
 8013bec:	2001      	movs	r0, #1
 8013bee:	bd10      	pop	{r4, pc}
 8013bf0:	4298      	cmp	r0, r3
 8013bf2:	d3f4      	bcc.n	8013bde <__mcmp+0x14>
 8013bf4:	2000      	movs	r0, #0
 8013bf6:	bd10      	pop	{r4, pc}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	bd10      	pop	{r4, pc}
 8013bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8013c00:	bd10      	pop	{r4, pc}

08013c02 <__mdiff>:
 8013c02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c06:	460c      	mov	r4, r1
 8013c08:	4607      	mov	r7, r0
 8013c0a:	4611      	mov	r1, r2
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	4615      	mov	r5, r2
 8013c10:	f7ff ffdb 	bl	8013bca <__mcmp>
 8013c14:	1e06      	subs	r6, r0, #0
 8013c16:	d108      	bne.n	8013c2a <__mdiff+0x28>
 8013c18:	4631      	mov	r1, r6
 8013c1a:	4638      	mov	r0, r7
 8013c1c:	f7ff fdc8 	bl	80137b0 <_Balloc>
 8013c20:	2301      	movs	r3, #1
 8013c22:	6103      	str	r3, [r0, #16]
 8013c24:	6146      	str	r6, [r0, #20]
 8013c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c2a:	bfbc      	itt	lt
 8013c2c:	4623      	movlt	r3, r4
 8013c2e:	462c      	movlt	r4, r5
 8013c30:	4638      	mov	r0, r7
 8013c32:	6861      	ldr	r1, [r4, #4]
 8013c34:	bfba      	itte	lt
 8013c36:	461d      	movlt	r5, r3
 8013c38:	2601      	movlt	r6, #1
 8013c3a:	2600      	movge	r6, #0
 8013c3c:	f7ff fdb8 	bl	80137b0 <_Balloc>
 8013c40:	692b      	ldr	r3, [r5, #16]
 8013c42:	60c6      	str	r6, [r0, #12]
 8013c44:	6926      	ldr	r6, [r4, #16]
 8013c46:	f105 0914 	add.w	r9, r5, #20
 8013c4a:	3414      	adds	r4, #20
 8013c4c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8013c50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013c54:	f100 0514 	add.w	r5, r0, #20
 8013c58:	f04f 0c00 	mov.w	ip, #0
 8013c5c:	f854 3b04 	ldr.w	r3, [r4], #4
 8013c60:	f859 2b04 	ldr.w	r2, [r9], #4
 8013c64:	fa1c f183 	uxtah	r1, ip, r3
 8013c68:	fa1f fe82 	uxth.w	lr, r2
 8013c6c:	0c12      	lsrs	r2, r2, #16
 8013c6e:	ebce 0101 	rsb	r1, lr, r1
 8013c72:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8013c76:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013c7a:	b289      	uxth	r1, r1
 8013c7c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8013c80:	45c8      	cmp	r8, r9
 8013c82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013c86:	46a6      	mov	lr, r4
 8013c88:	f845 3b04 	str.w	r3, [r5], #4
 8013c8c:	d8e6      	bhi.n	8013c5c <__mdiff+0x5a>
 8013c8e:	45be      	cmp	lr, r7
 8013c90:	d20e      	bcs.n	8013cb0 <__mdiff+0xae>
 8013c92:	f85e 1b04 	ldr.w	r1, [lr], #4
 8013c96:	fa1c f281 	uxtah	r2, ip, r1
 8013c9a:	1413      	asrs	r3, r2, #16
 8013c9c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8013ca0:	b292      	uxth	r2, r2
 8013ca2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013ca6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8013caa:	f845 2b04 	str.w	r2, [r5], #4
 8013cae:	e7ee      	b.n	8013c8e <__mdiff+0x8c>
 8013cb0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013cb4:	b90b      	cbnz	r3, 8013cba <__mdiff+0xb8>
 8013cb6:	3e01      	subs	r6, #1
 8013cb8:	e7fa      	b.n	8013cb0 <__mdiff+0xae>
 8013cba:	6106      	str	r6, [r0, #16]
 8013cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013cc0 <__d2b>:
 8013cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cc4:	460e      	mov	r6, r1
 8013cc6:	2101      	movs	r1, #1
 8013cc8:	ec59 8b10 	vmov	r8, r9, d0
 8013ccc:	4615      	mov	r5, r2
 8013cce:	f7ff fd6f 	bl	80137b0 <_Balloc>
 8013cd2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013cd6:	4607      	mov	r7, r0
 8013cd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013cdc:	b10c      	cbz	r4, 8013ce2 <__d2b+0x22>
 8013cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013ce2:	9301      	str	r3, [sp, #4]
 8013ce4:	f1b8 0f00 	cmp.w	r8, #0
 8013ce8:	d019      	beq.n	8013d1e <__d2b+0x5e>
 8013cea:	a802      	add	r0, sp, #8
 8013cec:	f840 8d08 	str.w	r8, [r0, #-8]!
 8013cf0:	f7ff fe05 	bl	80138fe <__lo0bits>
 8013cf4:	9b00      	ldr	r3, [sp, #0]
 8013cf6:	b148      	cbz	r0, 8013d0c <__d2b+0x4c>
 8013cf8:	9a01      	ldr	r2, [sp, #4]
 8013cfa:	f1c0 0120 	rsb	r1, r0, #32
 8013cfe:	fa02 f101 	lsl.w	r1, r2, r1
 8013d02:	430b      	orrs	r3, r1
 8013d04:	40c2      	lsrs	r2, r0
 8013d06:	617b      	str	r3, [r7, #20]
 8013d08:	9201      	str	r2, [sp, #4]
 8013d0a:	e000      	b.n	8013d0e <__d2b+0x4e>
 8013d0c:	617b      	str	r3, [r7, #20]
 8013d0e:	9b01      	ldr	r3, [sp, #4]
 8013d10:	61bb      	str	r3, [r7, #24]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	bf14      	ite	ne
 8013d16:	2102      	movne	r1, #2
 8013d18:	2101      	moveq	r1, #1
 8013d1a:	6139      	str	r1, [r7, #16]
 8013d1c:	e007      	b.n	8013d2e <__d2b+0x6e>
 8013d1e:	a801      	add	r0, sp, #4
 8013d20:	f7ff fded 	bl	80138fe <__lo0bits>
 8013d24:	9b01      	ldr	r3, [sp, #4]
 8013d26:	617b      	str	r3, [r7, #20]
 8013d28:	2101      	movs	r1, #1
 8013d2a:	6139      	str	r1, [r7, #16]
 8013d2c:	3020      	adds	r0, #32
 8013d2e:	b134      	cbz	r4, 8013d3e <__d2b+0x7e>
 8013d30:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013d34:	4404      	add	r4, r0
 8013d36:	6034      	str	r4, [r6, #0]
 8013d38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013d3c:	e009      	b.n	8013d52 <__d2b+0x92>
 8013d3e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013d42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013d46:	6030      	str	r0, [r6, #0]
 8013d48:	6918      	ldr	r0, [r3, #16]
 8013d4a:	f7ff fdb8 	bl	80138be <__hi0bits>
 8013d4e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013d52:	6028      	str	r0, [r5, #0]
 8013d54:	4638      	mov	r0, r7
 8013d56:	b003      	add	sp, #12
 8013d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013d5c <__ssprint_r>:
 8013d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d60:	4693      	mov	fp, r2
 8013d62:	6892      	ldr	r2, [r2, #8]
 8013d64:	4681      	mov	r9, r0
 8013d66:	460c      	mov	r4, r1
 8013d68:	b34a      	cbz	r2, 8013dbe <__ssprint_r+0x62>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	f8db a000 	ldr.w	sl, [fp]
 8013d70:	9301      	str	r3, [sp, #4]
 8013d72:	461f      	mov	r7, r3
 8013d74:	e006      	b.n	8013d84 <__ssprint_r+0x28>
 8013d76:	f8da 3000 	ldr.w	r3, [sl]
 8013d7a:	f8da 7004 	ldr.w	r7, [sl, #4]
 8013d7e:	9301      	str	r3, [sp, #4]
 8013d80:	f10a 0a08 	add.w	sl, sl, #8
 8013d84:	2f00      	cmp	r7, #0
 8013d86:	d0f6      	beq.n	8013d76 <__ssprint_r+0x1a>
 8013d88:	68a6      	ldr	r6, [r4, #8]
 8013d8a:	42b7      	cmp	r7, r6
 8013d8c:	d360      	bcc.n	8013e50 <__ssprint_r+0xf4>
 8013d8e:	89a0      	ldrh	r0, [r4, #12]
 8013d90:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8013d94:	d117      	bne.n	8013dc6 <__ssprint_r+0x6a>
 8013d96:	42b7      	cmp	r7, r6
 8013d98:	d35a      	bcc.n	8013e50 <__ssprint_r+0xf4>
 8013d9a:	4632      	mov	r2, r6
 8013d9c:	9901      	ldr	r1, [sp, #4]
 8013d9e:	6820      	ldr	r0, [r4, #0]
 8013da0:	f000 f888 	bl	8013eb4 <memmove>
 8013da4:	68a2      	ldr	r2, [r4, #8]
 8013da6:	1b92      	subs	r2, r2, r6
 8013da8:	60a2      	str	r2, [r4, #8]
 8013daa:	6822      	ldr	r2, [r4, #0]
 8013dac:	4416      	add	r6, r2
 8013dae:	f8db 2008 	ldr.w	r2, [fp, #8]
 8013db2:	6026      	str	r6, [r4, #0]
 8013db4:	1bd7      	subs	r7, r2, r7
 8013db6:	f8cb 7008 	str.w	r7, [fp, #8]
 8013dba:	2f00      	cmp	r7, #0
 8013dbc:	d1db      	bne.n	8013d76 <__ssprint_r+0x1a>
 8013dbe:	2000      	movs	r0, #0
 8013dc0:	f8cb 0004 	str.w	r0, [fp, #4]
 8013dc4:	e046      	b.n	8013e54 <__ssprint_r+0xf8>
 8013dc6:	6825      	ldr	r5, [r4, #0]
 8013dc8:	6921      	ldr	r1, [r4, #16]
 8013dca:	ebc1 0805 	rsb	r8, r1, r5
 8013dce:	f108 0201 	add.w	r2, r8, #1
 8013dd2:	6965      	ldr	r5, [r4, #20]
 8013dd4:	443a      	add	r2, r7
 8013dd6:	2302      	movs	r3, #2
 8013dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ddc:	fb95 f5f3 	sdiv	r5, r5, r3
 8013de0:	4295      	cmp	r5, r2
 8013de2:	bf38      	it	cc
 8013de4:	4615      	movcc	r5, r2
 8013de6:	0543      	lsls	r3, r0, #21
 8013de8:	d510      	bpl.n	8013e0c <__ssprint_r+0xb0>
 8013dea:	4629      	mov	r1, r5
 8013dec:	4648      	mov	r0, r9
 8013dee:	f7fd fadb 	bl	80113a8 <_malloc_r>
 8013df2:	4606      	mov	r6, r0
 8013df4:	b1a0      	cbz	r0, 8013e20 <__ssprint_r+0xc4>
 8013df6:	4642      	mov	r2, r8
 8013df8:	6921      	ldr	r1, [r4, #16]
 8013dfa:	f7fd fd04 	bl	8011806 <memcpy>
 8013dfe:	89a2      	ldrh	r2, [r4, #12]
 8013e00:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8013e04:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013e08:	81a2      	strh	r2, [r4, #12]
 8013e0a:	e018      	b.n	8013e3e <__ssprint_r+0xe2>
 8013e0c:	462a      	mov	r2, r5
 8013e0e:	4648      	mov	r0, r9
 8013e10:	f000 f86c 	bl	8013eec <_realloc_r>
 8013e14:	4606      	mov	r6, r0
 8013e16:	b990      	cbnz	r0, 8013e3e <__ssprint_r+0xe2>
 8013e18:	6921      	ldr	r1, [r4, #16]
 8013e1a:	4648      	mov	r0, r9
 8013e1c:	f7ff fc06 	bl	801362c <_free_r>
 8013e20:	220c      	movs	r2, #12
 8013e22:	f8c9 2000 	str.w	r2, [r9]
 8013e26:	89a2      	ldrh	r2, [r4, #12]
 8013e28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e2c:	81a2      	strh	r2, [r4, #12]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	f8cb 2008 	str.w	r2, [fp, #8]
 8013e34:	f8cb 2004 	str.w	r2, [fp, #4]
 8013e38:	f04f 30ff 	mov.w	r0, #4294967295
 8013e3c:	e00a      	b.n	8013e54 <__ssprint_r+0xf8>
 8013e3e:	6126      	str	r6, [r4, #16]
 8013e40:	6165      	str	r5, [r4, #20]
 8013e42:	4446      	add	r6, r8
 8013e44:	ebc8 0505 	rsb	r5, r8, r5
 8013e48:	6026      	str	r6, [r4, #0]
 8013e4a:	60a5      	str	r5, [r4, #8]
 8013e4c:	463e      	mov	r6, r7
 8013e4e:	e7a2      	b.n	8013d96 <__ssprint_r+0x3a>
 8013e50:	463e      	mov	r6, r7
 8013e52:	e7a2      	b.n	8013d9a <__ssprint_r+0x3e>
 8013e54:	b003      	add	sp, #12
 8013e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e5a <_calloc_r>:
 8013e5a:	b510      	push	{r4, lr}
 8013e5c:	4351      	muls	r1, r2
 8013e5e:	f7fd faa3 	bl	80113a8 <_malloc_r>
 8013e62:	4604      	mov	r4, r0
 8013e64:	b320      	cbz	r0, 8013eb0 <_calloc_r+0x56>
 8013e66:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8013e6a:	f022 0203 	bic.w	r2, r2, #3
 8013e6e:	3a04      	subs	r2, #4
 8013e70:	2a24      	cmp	r2, #36	; 0x24
 8013e72:	d81a      	bhi.n	8013eaa <_calloc_r+0x50>
 8013e74:	2a13      	cmp	r2, #19
 8013e76:	d912      	bls.n	8013e9e <_calloc_r+0x44>
 8013e78:	2100      	movs	r1, #0
 8013e7a:	2a1b      	cmp	r2, #27
 8013e7c:	6001      	str	r1, [r0, #0]
 8013e7e:	6041      	str	r1, [r0, #4]
 8013e80:	d802      	bhi.n	8013e88 <_calloc_r+0x2e>
 8013e82:	f100 0308 	add.w	r3, r0, #8
 8013e86:	e00b      	b.n	8013ea0 <_calloc_r+0x46>
 8013e88:	2a24      	cmp	r2, #36	; 0x24
 8013e8a:	6081      	str	r1, [r0, #8]
 8013e8c:	60c1      	str	r1, [r0, #12]
 8013e8e:	bf11      	iteee	ne
 8013e90:	f100 0310 	addne.w	r3, r0, #16
 8013e94:	6101      	streq	r1, [r0, #16]
 8013e96:	f100 0318 	addeq.w	r3, r0, #24
 8013e9a:	6141      	streq	r1, [r0, #20]
 8013e9c:	e000      	b.n	8013ea0 <_calloc_r+0x46>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	601a      	str	r2, [r3, #0]
 8013ea4:	605a      	str	r2, [r3, #4]
 8013ea6:	609a      	str	r2, [r3, #8]
 8013ea8:	e002      	b.n	8013eb0 <_calloc_r+0x56>
 8013eaa:	2100      	movs	r1, #0
 8013eac:	f7fd fcb6 	bl	801181c <memset>
 8013eb0:	4620      	mov	r0, r4
 8013eb2:	bd10      	pop	{r4, pc}

08013eb4 <memmove>:
 8013eb4:	4288      	cmp	r0, r1
 8013eb6:	b510      	push	{r4, lr}
 8013eb8:	eb01 0302 	add.w	r3, r1, r2
 8013ebc:	d801      	bhi.n	8013ec2 <memmove+0xe>
 8013ebe:	1e42      	subs	r2, r0, #1
 8013ec0:	e00b      	b.n	8013eda <memmove+0x26>
 8013ec2:	4298      	cmp	r0, r3
 8013ec4:	d2fb      	bcs.n	8013ebe <memmove+0xa>
 8013ec6:	1881      	adds	r1, r0, r2
 8013ec8:	1ad2      	subs	r2, r2, r3
 8013eca:	42d3      	cmn	r3, r2
 8013ecc:	d004      	beq.n	8013ed8 <memmove+0x24>
 8013ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ed2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013ed6:	e7f8      	b.n	8013eca <memmove+0x16>
 8013ed8:	bd10      	pop	{r4, pc}
 8013eda:	4299      	cmp	r1, r3
 8013edc:	d004      	beq.n	8013ee8 <memmove+0x34>
 8013ede:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ee2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013ee6:	e7f8      	b.n	8013eda <memmove+0x26>
 8013ee8:	bd10      	pop	{r4, pc}
	...

08013eec <_realloc_r>:
 8013eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef0:	4681      	mov	r9, r0
 8013ef2:	460c      	mov	r4, r1
 8013ef4:	b929      	cbnz	r1, 8013f02 <_realloc_r+0x16>
 8013ef6:	4611      	mov	r1, r2
 8013ef8:	b003      	add	sp, #12
 8013efa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013efe:	f7fd ba53 	b.w	80113a8 <_malloc_r>
 8013f02:	9201      	str	r2, [sp, #4]
 8013f04:	f7fd fc92 	bl	801182c <__malloc_lock>
 8013f08:	9a01      	ldr	r2, [sp, #4]
 8013f0a:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8013f0e:	f102 080b 	add.w	r8, r2, #11
 8013f12:	f1b8 0f16 	cmp.w	r8, #22
 8013f16:	f1a4 0b08 	sub.w	fp, r4, #8
 8013f1a:	f02e 0503 	bic.w	r5, lr, #3
 8013f1e:	d903      	bls.n	8013f28 <_realloc_r+0x3c>
 8013f20:	f038 0807 	bics.w	r8, r8, #7
 8013f24:	d502      	bpl.n	8013f2c <_realloc_r+0x40>
 8013f26:	e003      	b.n	8013f30 <_realloc_r+0x44>
 8013f28:	f04f 0810 	mov.w	r8, #16
 8013f2c:	4590      	cmp	r8, r2
 8013f2e:	d204      	bcs.n	8013f3a <_realloc_r+0x4e>
 8013f30:	230c      	movs	r3, #12
 8013f32:	f8c9 3000 	str.w	r3, [r9]
 8013f36:	2000      	movs	r0, #0
 8013f38:	e17d      	b.n	8014236 <_realloc_r+0x34a>
 8013f3a:	45a8      	cmp	r8, r5
 8013f3c:	f340 8150 	ble.w	80141e0 <_realloc_r+0x2f4>
 8013f40:	4ba6      	ldr	r3, [pc, #664]	; (80141dc <_realloc_r+0x2f0>)
 8013f42:	6898      	ldr	r0, [r3, #8]
 8013f44:	eb0b 0105 	add.w	r1, fp, r5
 8013f48:	4281      	cmp	r1, r0
 8013f4a:	684f      	ldr	r7, [r1, #4]
 8013f4c:	d005      	beq.n	8013f5a <_realloc_r+0x6e>
 8013f4e:	f027 0601 	bic.w	r6, r7, #1
 8013f52:	440e      	add	r6, r1
 8013f54:	6876      	ldr	r6, [r6, #4]
 8013f56:	07f6      	lsls	r6, r6, #31
 8013f58:	d426      	bmi.n	8013fa8 <_realloc_r+0xbc>
 8013f5a:	f027 0a03 	bic.w	sl, r7, #3
 8013f5e:	4281      	cmp	r1, r0
 8013f60:	eb05 070a 	add.w	r7, r5, sl
 8013f64:	d118      	bne.n	8013f98 <_realloc_r+0xac>
 8013f66:	f108 0610 	add.w	r6, r8, #16
 8013f6a:	42b7      	cmp	r7, r6
 8013f6c:	db1f      	blt.n	8013fae <_realloc_r+0xc2>
 8013f6e:	eb0b 0008 	add.w	r0, fp, r8
 8013f72:	ebc8 0707 	rsb	r7, r8, r7
 8013f76:	f047 0701 	orr.w	r7, r7, #1
 8013f7a:	6098      	str	r0, [r3, #8]
 8013f7c:	6047      	str	r7, [r0, #4]
 8013f7e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013f82:	f003 0301 	and.w	r3, r3, #1
 8013f86:	ea43 0308 	orr.w	r3, r3, r8
 8013f8a:	4648      	mov	r0, r9
 8013f8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013f90:	f7fd fc4d 	bl	801182e <__malloc_unlock>
 8013f94:	4620      	mov	r0, r4
 8013f96:	e14e      	b.n	8014236 <_realloc_r+0x34a>
 8013f98:	45b8      	cmp	r8, r7
 8013f9a:	dc08      	bgt.n	8013fae <_realloc_r+0xc2>
 8013f9c:	68cb      	ldr	r3, [r1, #12]
 8013f9e:	688a      	ldr	r2, [r1, #8]
 8013fa0:	463d      	mov	r5, r7
 8013fa2:	60d3      	str	r3, [r2, #12]
 8013fa4:	609a      	str	r2, [r3, #8]
 8013fa6:	e11b      	b.n	80141e0 <_realloc_r+0x2f4>
 8013fa8:	f04f 0a00 	mov.w	sl, #0
 8013fac:	4651      	mov	r1, sl
 8013fae:	f01e 0f01 	tst.w	lr, #1
 8013fb2:	f040 80c3 	bne.w	801413c <_realloc_r+0x250>
 8013fb6:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8013fba:	ebc7 070b 	rsb	r7, r7, fp
 8013fbe:	687e      	ldr	r6, [r7, #4]
 8013fc0:	f026 0603 	bic.w	r6, r6, #3
 8013fc4:	442e      	add	r6, r5
 8013fc6:	2900      	cmp	r1, #0
 8013fc8:	f000 8083 	beq.w	80140d2 <_realloc_r+0x1e6>
 8013fcc:	4281      	cmp	r1, r0
 8013fce:	44b2      	add	sl, r6
 8013fd0:	d147      	bne.n	8014062 <_realloc_r+0x176>
 8013fd2:	f108 0110 	add.w	r1, r8, #16
 8013fd6:	458a      	cmp	sl, r1
 8013fd8:	db7b      	blt.n	80140d2 <_realloc_r+0x1e6>
 8013fda:	463e      	mov	r6, r7
 8013fdc:	68fa      	ldr	r2, [r7, #12]
 8013fde:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8013fe2:	60ca      	str	r2, [r1, #12]
 8013fe4:	6091      	str	r1, [r2, #8]
 8013fe6:	1f2a      	subs	r2, r5, #4
 8013fe8:	2a24      	cmp	r2, #36	; 0x24
 8013fea:	d825      	bhi.n	8014038 <_realloc_r+0x14c>
 8013fec:	2a13      	cmp	r2, #19
 8013fee:	d91b      	bls.n	8014028 <_realloc_r+0x13c>
 8013ff0:	6821      	ldr	r1, [r4, #0]
 8013ff2:	60b9      	str	r1, [r7, #8]
 8013ff4:	6861      	ldr	r1, [r4, #4]
 8013ff6:	60f9      	str	r1, [r7, #12]
 8013ff8:	2a1b      	cmp	r2, #27
 8013ffa:	d803      	bhi.n	8014004 <_realloc_r+0x118>
 8013ffc:	f107 0210 	add.w	r2, r7, #16
 8014000:	3408      	adds	r4, #8
 8014002:	e012      	b.n	801402a <_realloc_r+0x13e>
 8014004:	68a1      	ldr	r1, [r4, #8]
 8014006:	6139      	str	r1, [r7, #16]
 8014008:	68e1      	ldr	r1, [r4, #12]
 801400a:	6179      	str	r1, [r7, #20]
 801400c:	2a24      	cmp	r2, #36	; 0x24
 801400e:	bf01      	itttt	eq
 8014010:	6922      	ldreq	r2, [r4, #16]
 8014012:	61ba      	streq	r2, [r7, #24]
 8014014:	6961      	ldreq	r1, [r4, #20]
 8014016:	61f9      	streq	r1, [r7, #28]
 8014018:	bf19      	ittee	ne
 801401a:	f107 0218 	addne.w	r2, r7, #24
 801401e:	3410      	addne	r4, #16
 8014020:	f107 0220 	addeq.w	r2, r7, #32
 8014024:	3418      	addeq	r4, #24
 8014026:	e000      	b.n	801402a <_realloc_r+0x13e>
 8014028:	4632      	mov	r2, r6
 801402a:	6821      	ldr	r1, [r4, #0]
 801402c:	6011      	str	r1, [r2, #0]
 801402e:	6861      	ldr	r1, [r4, #4]
 8014030:	6051      	str	r1, [r2, #4]
 8014032:	68a1      	ldr	r1, [r4, #8]
 8014034:	6091      	str	r1, [r2, #8]
 8014036:	e005      	b.n	8014044 <_realloc_r+0x158>
 8014038:	4621      	mov	r1, r4
 801403a:	4630      	mov	r0, r6
 801403c:	9301      	str	r3, [sp, #4]
 801403e:	f7ff ff39 	bl	8013eb4 <memmove>
 8014042:	9b01      	ldr	r3, [sp, #4]
 8014044:	eb07 0208 	add.w	r2, r7, r8
 8014048:	ebc8 0a0a 	rsb	sl, r8, sl
 801404c:	609a      	str	r2, [r3, #8]
 801404e:	f04a 0301 	orr.w	r3, sl, #1
 8014052:	6053      	str	r3, [r2, #4]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f003 0301 	and.w	r3, r3, #1
 801405a:	ea43 0308 	orr.w	r3, r3, r8
 801405e:	607b      	str	r3, [r7, #4]
 8014060:	e0b6      	b.n	80141d0 <_realloc_r+0x2e4>
 8014062:	45d0      	cmp	r8, sl
 8014064:	dc35      	bgt.n	80140d2 <_realloc_r+0x1e6>
 8014066:	68cb      	ldr	r3, [r1, #12]
 8014068:	688a      	ldr	r2, [r1, #8]
 801406a:	4638      	mov	r0, r7
 801406c:	60d3      	str	r3, [r2, #12]
 801406e:	609a      	str	r2, [r3, #8]
 8014070:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	60d3      	str	r3, [r2, #12]
 8014078:	609a      	str	r2, [r3, #8]
 801407a:	1f2a      	subs	r2, r5, #4
 801407c:	2a24      	cmp	r2, #36	; 0x24
 801407e:	d823      	bhi.n	80140c8 <_realloc_r+0x1dc>
 8014080:	2a13      	cmp	r2, #19
 8014082:	d91a      	bls.n	80140ba <_realloc_r+0x1ce>
 8014084:	6823      	ldr	r3, [r4, #0]
 8014086:	60bb      	str	r3, [r7, #8]
 8014088:	6863      	ldr	r3, [r4, #4]
 801408a:	60fb      	str	r3, [r7, #12]
 801408c:	2a1b      	cmp	r2, #27
 801408e:	d803      	bhi.n	8014098 <_realloc_r+0x1ac>
 8014090:	f107 0010 	add.w	r0, r7, #16
 8014094:	3408      	adds	r4, #8
 8014096:	e010      	b.n	80140ba <_realloc_r+0x1ce>
 8014098:	68a3      	ldr	r3, [r4, #8]
 801409a:	613b      	str	r3, [r7, #16]
 801409c:	68e3      	ldr	r3, [r4, #12]
 801409e:	617b      	str	r3, [r7, #20]
 80140a0:	2a24      	cmp	r2, #36	; 0x24
 80140a2:	bf01      	itttt	eq
 80140a4:	6923      	ldreq	r3, [r4, #16]
 80140a6:	61bb      	streq	r3, [r7, #24]
 80140a8:	6963      	ldreq	r3, [r4, #20]
 80140aa:	61fb      	streq	r3, [r7, #28]
 80140ac:	bf19      	ittee	ne
 80140ae:	f107 0018 	addne.w	r0, r7, #24
 80140b2:	3410      	addne	r4, #16
 80140b4:	f107 0020 	addeq.w	r0, r7, #32
 80140b8:	3418      	addeq	r4, #24
 80140ba:	6823      	ldr	r3, [r4, #0]
 80140bc:	6003      	str	r3, [r0, #0]
 80140be:	6863      	ldr	r3, [r4, #4]
 80140c0:	6043      	str	r3, [r0, #4]
 80140c2:	68a3      	ldr	r3, [r4, #8]
 80140c4:	6083      	str	r3, [r0, #8]
 80140c6:	e002      	b.n	80140ce <_realloc_r+0x1e2>
 80140c8:	4621      	mov	r1, r4
 80140ca:	f7ff fef3 	bl	8013eb4 <memmove>
 80140ce:	4655      	mov	r5, sl
 80140d0:	e02e      	b.n	8014130 <_realloc_r+0x244>
 80140d2:	45b0      	cmp	r8, r6
 80140d4:	dc32      	bgt.n	801413c <_realloc_r+0x250>
 80140d6:	4638      	mov	r0, r7
 80140d8:	68fb      	ldr	r3, [r7, #12]
 80140da:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80140de:	60d3      	str	r3, [r2, #12]
 80140e0:	609a      	str	r2, [r3, #8]
 80140e2:	1f2a      	subs	r2, r5, #4
 80140e4:	2a24      	cmp	r2, #36	; 0x24
 80140e6:	d825      	bhi.n	8014134 <_realloc_r+0x248>
 80140e8:	2a13      	cmp	r2, #19
 80140ea:	d91a      	bls.n	8014122 <_realloc_r+0x236>
 80140ec:	6823      	ldr	r3, [r4, #0]
 80140ee:	60bb      	str	r3, [r7, #8]
 80140f0:	6863      	ldr	r3, [r4, #4]
 80140f2:	60fb      	str	r3, [r7, #12]
 80140f4:	2a1b      	cmp	r2, #27
 80140f6:	d803      	bhi.n	8014100 <_realloc_r+0x214>
 80140f8:	f107 0010 	add.w	r0, r7, #16
 80140fc:	3408      	adds	r4, #8
 80140fe:	e010      	b.n	8014122 <_realloc_r+0x236>
 8014100:	68a3      	ldr	r3, [r4, #8]
 8014102:	613b      	str	r3, [r7, #16]
 8014104:	68e3      	ldr	r3, [r4, #12]
 8014106:	617b      	str	r3, [r7, #20]
 8014108:	2a24      	cmp	r2, #36	; 0x24
 801410a:	bf01      	itttt	eq
 801410c:	6923      	ldreq	r3, [r4, #16]
 801410e:	61bb      	streq	r3, [r7, #24]
 8014110:	6963      	ldreq	r3, [r4, #20]
 8014112:	61fb      	streq	r3, [r7, #28]
 8014114:	bf19      	ittee	ne
 8014116:	f107 0018 	addne.w	r0, r7, #24
 801411a:	3410      	addne	r4, #16
 801411c:	f107 0020 	addeq.w	r0, r7, #32
 8014120:	3418      	addeq	r4, #24
 8014122:	6823      	ldr	r3, [r4, #0]
 8014124:	6003      	str	r3, [r0, #0]
 8014126:	6863      	ldr	r3, [r4, #4]
 8014128:	6043      	str	r3, [r0, #4]
 801412a:	68a3      	ldr	r3, [r4, #8]
 801412c:	6083      	str	r3, [r0, #8]
 801412e:	4635      	mov	r5, r6
 8014130:	46bb      	mov	fp, r7
 8014132:	e055      	b.n	80141e0 <_realloc_r+0x2f4>
 8014134:	4621      	mov	r1, r4
 8014136:	f7ff febd 	bl	8013eb4 <memmove>
 801413a:	e7f8      	b.n	801412e <_realloc_r+0x242>
 801413c:	4611      	mov	r1, r2
 801413e:	4648      	mov	r0, r9
 8014140:	f7fd f932 	bl	80113a8 <_malloc_r>
 8014144:	4606      	mov	r6, r0
 8014146:	2800      	cmp	r0, #0
 8014148:	d042      	beq.n	80141d0 <_realloc_r+0x2e4>
 801414a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801414e:	f023 0301 	bic.w	r3, r3, #1
 8014152:	f1a0 0208 	sub.w	r2, r0, #8
 8014156:	445b      	add	r3, fp
 8014158:	429a      	cmp	r2, r3
 801415a:	d105      	bne.n	8014168 <_realloc_r+0x27c>
 801415c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014160:	f023 0303 	bic.w	r3, r3, #3
 8014164:	441d      	add	r5, r3
 8014166:	e03b      	b.n	80141e0 <_realloc_r+0x2f4>
 8014168:	1f2a      	subs	r2, r5, #4
 801416a:	2a24      	cmp	r2, #36	; 0x24
 801416c:	d829      	bhi.n	80141c2 <_realloc_r+0x2d6>
 801416e:	2a13      	cmp	r2, #19
 8014170:	d91e      	bls.n	80141b0 <_realloc_r+0x2c4>
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	6003      	str	r3, [r0, #0]
 8014176:	6863      	ldr	r3, [r4, #4]
 8014178:	6043      	str	r3, [r0, #4]
 801417a:	2a1b      	cmp	r2, #27
 801417c:	d804      	bhi.n	8014188 <_realloc_r+0x29c>
 801417e:	f100 0308 	add.w	r3, r0, #8
 8014182:	f104 0208 	add.w	r2, r4, #8
 8014186:	e015      	b.n	80141b4 <_realloc_r+0x2c8>
 8014188:	68a3      	ldr	r3, [r4, #8]
 801418a:	6083      	str	r3, [r0, #8]
 801418c:	68e3      	ldr	r3, [r4, #12]
 801418e:	60c3      	str	r3, [r0, #12]
 8014190:	2a24      	cmp	r2, #36	; 0x24
 8014192:	bf01      	itttt	eq
 8014194:	6923      	ldreq	r3, [r4, #16]
 8014196:	6103      	streq	r3, [r0, #16]
 8014198:	6961      	ldreq	r1, [r4, #20]
 801419a:	6141      	streq	r1, [r0, #20]
 801419c:	bf19      	ittee	ne
 801419e:	f100 0310 	addne.w	r3, r0, #16
 80141a2:	f104 0210 	addne.w	r2, r4, #16
 80141a6:	f100 0318 	addeq.w	r3, r0, #24
 80141aa:	f104 0218 	addeq.w	r2, r4, #24
 80141ae:	e001      	b.n	80141b4 <_realloc_r+0x2c8>
 80141b0:	4603      	mov	r3, r0
 80141b2:	4622      	mov	r2, r4
 80141b4:	6811      	ldr	r1, [r2, #0]
 80141b6:	6019      	str	r1, [r3, #0]
 80141b8:	6851      	ldr	r1, [r2, #4]
 80141ba:	6059      	str	r1, [r3, #4]
 80141bc:	6892      	ldr	r2, [r2, #8]
 80141be:	609a      	str	r2, [r3, #8]
 80141c0:	e002      	b.n	80141c8 <_realloc_r+0x2dc>
 80141c2:	4621      	mov	r1, r4
 80141c4:	f7ff fe76 	bl	8013eb4 <memmove>
 80141c8:	4621      	mov	r1, r4
 80141ca:	4648      	mov	r0, r9
 80141cc:	f7ff fa2e 	bl	801362c <_free_r>
 80141d0:	4648      	mov	r0, r9
 80141d2:	f7fd fb2c 	bl	801182e <__malloc_unlock>
 80141d6:	4630      	mov	r0, r6
 80141d8:	e02d      	b.n	8014236 <_realloc_r+0x34a>
 80141da:	bf00      	nop
 80141dc:	20010090 	.word	0x20010090
 80141e0:	ebc8 0205 	rsb	r2, r8, r5
 80141e4:	2a0f      	cmp	r2, #15
 80141e6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80141ea:	d914      	bls.n	8014216 <_realloc_r+0x32a>
 80141ec:	f003 0301 	and.w	r3, r3, #1
 80141f0:	eb0b 0108 	add.w	r1, fp, r8
 80141f4:	ea43 0308 	orr.w	r3, r3, r8
 80141f8:	f8cb 3004 	str.w	r3, [fp, #4]
 80141fc:	f042 0301 	orr.w	r3, r2, #1
 8014200:	440a      	add	r2, r1
 8014202:	604b      	str	r3, [r1, #4]
 8014204:	6853      	ldr	r3, [r2, #4]
 8014206:	f043 0301 	orr.w	r3, r3, #1
 801420a:	6053      	str	r3, [r2, #4]
 801420c:	3108      	adds	r1, #8
 801420e:	4648      	mov	r0, r9
 8014210:	f7ff fa0c 	bl	801362c <_free_r>
 8014214:	e00a      	b.n	801422c <_realloc_r+0x340>
 8014216:	f003 0301 	and.w	r3, r3, #1
 801421a:	432b      	orrs	r3, r5
 801421c:	eb0b 0205 	add.w	r2, fp, r5
 8014220:	f8cb 3004 	str.w	r3, [fp, #4]
 8014224:	6853      	ldr	r3, [r2, #4]
 8014226:	f043 0301 	orr.w	r3, r3, #1
 801422a:	6053      	str	r3, [r2, #4]
 801422c:	4648      	mov	r0, r9
 801422e:	f7fd fafe 	bl	801182e <__malloc_unlock>
 8014232:	f10b 0008 	add.w	r0, fp, #8
 8014236:	b003      	add	sp, #12
 8014238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423c:	0000      	movs	r0, r0
	...

08014240 <floor>:
 8014240:	ec51 0b10 	vmov	r0, r1, d0
 8014244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014248:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801424c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014250:	2e13      	cmp	r6, #19
 8014252:	ee10 8a10 	vmov	r8, s0
 8014256:	460c      	mov	r4, r1
 8014258:	ee10 5a10 	vmov	r5, s0
 801425c:	dc33      	bgt.n	80142c6 <floor+0x86>
 801425e:	2e00      	cmp	r6, #0
 8014260:	da16      	bge.n	8014290 <floor+0x50>
 8014262:	a335      	add	r3, pc, #212	; (adr r3, 8014338 <floor+0xf8>)
 8014264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014268:	f7ec f890 	bl	800038c <__adddf3>
 801426c:	2200      	movs	r2, #0
 801426e:	2300      	movs	r3, #0
 8014270:	f7ec fcce 	bl	8000c10 <__aeabi_dcmpgt>
 8014274:	2800      	cmp	r0, #0
 8014276:	d057      	beq.n	8014328 <floor+0xe8>
 8014278:	2c00      	cmp	r4, #0
 801427a:	da53      	bge.n	8014324 <floor+0xe4>
 801427c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014280:	ea53 0308 	orrs.w	r3, r3, r8
 8014284:	4b2e      	ldr	r3, [pc, #184]	; (8014340 <floor+0x100>)
 8014286:	f04f 0500 	mov.w	r5, #0
 801428a:	bf18      	it	ne
 801428c:	461c      	movne	r4, r3
 801428e:	e04b      	b.n	8014328 <floor+0xe8>
 8014290:	4f2c      	ldr	r7, [pc, #176]	; (8014344 <floor+0x104>)
 8014292:	4137      	asrs	r7, r6
 8014294:	ea01 0307 	and.w	r3, r1, r7
 8014298:	4303      	orrs	r3, r0
 801429a:	d047      	beq.n	801432c <floor+0xec>
 801429c:	a326      	add	r3, pc, #152	; (adr r3, 8014338 <floor+0xf8>)
 801429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142a2:	f7ec f873 	bl	800038c <__adddf3>
 80142a6:	2200      	movs	r2, #0
 80142a8:	2300      	movs	r3, #0
 80142aa:	f7ec fcb1 	bl	8000c10 <__aeabi_dcmpgt>
 80142ae:	b3d8      	cbz	r0, 8014328 <floor+0xe8>
 80142b0:	2c00      	cmp	r4, #0
 80142b2:	bfbe      	ittt	lt
 80142b4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80142b8:	fa43 f606 	asrlt.w	r6, r3, r6
 80142bc:	19a4      	addlt	r4, r4, r6
 80142be:	ea24 0407 	bic.w	r4, r4, r7
 80142c2:	2500      	movs	r5, #0
 80142c4:	e030      	b.n	8014328 <floor+0xe8>
 80142c6:	2e33      	cmp	r6, #51	; 0x33
 80142c8:	dd08      	ble.n	80142dc <floor+0x9c>
 80142ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80142ce:	d12d      	bne.n	801432c <floor+0xec>
 80142d0:	ee10 2a10 	vmov	r2, s0
 80142d4:	460b      	mov	r3, r1
 80142d6:	f7ec f859 	bl	800038c <__adddf3>
 80142da:	e027      	b.n	801432c <floor+0xec>
 80142dc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80142e0:	f04f 33ff 	mov.w	r3, #4294967295
 80142e4:	fa23 f707 	lsr.w	r7, r3, r7
 80142e8:	4238      	tst	r0, r7
 80142ea:	d01f      	beq.n	801432c <floor+0xec>
 80142ec:	a312      	add	r3, pc, #72	; (adr r3, 8014338 <floor+0xf8>)
 80142ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f2:	f7ec f84b 	bl	800038c <__adddf3>
 80142f6:	2200      	movs	r2, #0
 80142f8:	2300      	movs	r3, #0
 80142fa:	f7ec fc89 	bl	8000c10 <__aeabi_dcmpgt>
 80142fe:	b198      	cbz	r0, 8014328 <floor+0xe8>
 8014300:	2c00      	cmp	r4, #0
 8014302:	da0c      	bge.n	801431e <floor+0xde>
 8014304:	2e14      	cmp	r6, #20
 8014306:	d101      	bne.n	801430c <floor+0xcc>
 8014308:	3401      	adds	r4, #1
 801430a:	e008      	b.n	801431e <floor+0xde>
 801430c:	2301      	movs	r3, #1
 801430e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014312:	fa03 f606 	lsl.w	r6, r3, r6
 8014316:	4435      	add	r5, r6
 8014318:	45a8      	cmp	r8, r5
 801431a:	bf88      	it	hi
 801431c:	18e4      	addhi	r4, r4, r3
 801431e:	ea25 0507 	bic.w	r5, r5, r7
 8014322:	e001      	b.n	8014328 <floor+0xe8>
 8014324:	2500      	movs	r5, #0
 8014326:	462c      	mov	r4, r5
 8014328:	4621      	mov	r1, r4
 801432a:	4628      	mov	r0, r5
 801432c:	ec41 0b10 	vmov	d0, r0, r1
 8014330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014334:	f3af 8000 	nop.w
 8014338:	8800759c 	.word	0x8800759c
 801433c:	7e37e43c 	.word	0x7e37e43c
 8014340:	bff00000 	.word	0xbff00000
 8014344:	000fffff 	.word	0x000fffff

08014348 <pow>:
 8014348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801434c:	ed2d 8b02 	vpush	{d8}
 8014350:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8014630 <pow+0x2e8>
 8014354:	b08d      	sub	sp, #52	; 0x34
 8014356:	ec57 6b10 	vmov	r6, r7, d0
 801435a:	ec55 4b11 	vmov	r4, r5, d1
 801435e:	f000 f9c3 	bl	80146e8 <__ieee754_pow>
 8014362:	f998 9000 	ldrsb.w	r9, [r8]
 8014366:	eeb0 8a40 	vmov.f32	s16, s0
 801436a:	eef0 8a60 	vmov.f32	s17, s1
 801436e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8014372:	f000 814d 	beq.w	8014610 <pow+0x2c8>
 8014376:	4622      	mov	r2, r4
 8014378:	462b      	mov	r3, r5
 801437a:	4620      	mov	r0, r4
 801437c:	4629      	mov	r1, r5
 801437e:	f7ec fc51 	bl	8000c24 <__aeabi_dcmpun>
 8014382:	4683      	mov	fp, r0
 8014384:	2800      	cmp	r0, #0
 8014386:	f040 8143 	bne.w	8014610 <pow+0x2c8>
 801438a:	4632      	mov	r2, r6
 801438c:	463b      	mov	r3, r7
 801438e:	4630      	mov	r0, r6
 8014390:	4639      	mov	r1, r7
 8014392:	f7ec fc47 	bl	8000c24 <__aeabi_dcmpun>
 8014396:	9000      	str	r0, [sp, #0]
 8014398:	b1d8      	cbz	r0, 80143d2 <pow+0x8a>
 801439a:	2200      	movs	r2, #0
 801439c:	2300      	movs	r3, #0
 801439e:	4620      	mov	r0, r4
 80143a0:	4629      	mov	r1, r5
 80143a2:	f7ec fc0d 	bl	8000bc0 <__aeabi_dcmpeq>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	f000 8132 	beq.w	8014610 <pow+0x2c8>
 80143ac:	2301      	movs	r3, #1
 80143ae:	9302      	str	r3, [sp, #8]
 80143b0:	4b9c      	ldr	r3, [pc, #624]	; (8014624 <pow+0x2dc>)
 80143b2:	9303      	str	r3, [sp, #12]
 80143b4:	4b9c      	ldr	r3, [pc, #624]	; (8014628 <pow+0x2e0>)
 80143b6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80143ba:	2200      	movs	r2, #0
 80143bc:	f1b9 0f02 	cmp.w	r9, #2
 80143c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80143c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80143c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80143cc:	f040 808b 	bne.w	80144e6 <pow+0x19e>
 80143d0:	e11b      	b.n	801460a <pow+0x2c2>
 80143d2:	f04f 0a00 	mov.w	sl, #0
 80143d6:	f04f 0b00 	mov.w	fp, #0
 80143da:	4652      	mov	r2, sl
 80143dc:	465b      	mov	r3, fp
 80143de:	4630      	mov	r0, r6
 80143e0:	4639      	mov	r1, r7
 80143e2:	f7ec fbed 	bl	8000bc0 <__aeabi_dcmpeq>
 80143e6:	2800      	cmp	r0, #0
 80143e8:	d03f      	beq.n	801446a <pow+0x122>
 80143ea:	4652      	mov	r2, sl
 80143ec:	465b      	mov	r3, fp
 80143ee:	4620      	mov	r0, r4
 80143f0:	4629      	mov	r1, r5
 80143f2:	f7ec fbe5 	bl	8000bc0 <__aeabi_dcmpeq>
 80143f6:	9001      	str	r0, [sp, #4]
 80143f8:	b198      	cbz	r0, 8014422 <pow+0xda>
 80143fa:	2301      	movs	r3, #1
 80143fc:	9302      	str	r3, [sp, #8]
 80143fe:	4b89      	ldr	r3, [pc, #548]	; (8014624 <pow+0x2dc>)
 8014400:	9303      	str	r3, [sp, #12]
 8014402:	9b00      	ldr	r3, [sp, #0]
 8014404:	930a      	str	r3, [sp, #40]	; 0x28
 8014406:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801440a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801440e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014412:	f1b9 0f00 	cmp.w	r9, #0
 8014416:	d066      	beq.n	80144e6 <pow+0x19e>
 8014418:	4b83      	ldr	r3, [pc, #524]	; (8014628 <pow+0x2e0>)
 801441a:	2200      	movs	r2, #0
 801441c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014420:	e0ed      	b.n	80145fe <pow+0x2b6>
 8014422:	ec45 4b10 	vmov	d0, r4, r5
 8014426:	f000 ff62 	bl	80152ee <finite>
 801442a:	2800      	cmp	r0, #0
 801442c:	f000 80f0 	beq.w	8014610 <pow+0x2c8>
 8014430:	4652      	mov	r2, sl
 8014432:	465b      	mov	r3, fp
 8014434:	4620      	mov	r0, r4
 8014436:	4629      	mov	r1, r5
 8014438:	f7ec fbcc 	bl	8000bd4 <__aeabi_dcmplt>
 801443c:	2800      	cmp	r0, #0
 801443e:	f000 80e7 	beq.w	8014610 <pow+0x2c8>
 8014442:	2301      	movs	r3, #1
 8014444:	9302      	str	r3, [sp, #8]
 8014446:	4b77      	ldr	r3, [pc, #476]	; (8014624 <pow+0x2dc>)
 8014448:	9303      	str	r3, [sp, #12]
 801444a:	9b01      	ldr	r3, [sp, #4]
 801444c:	930a      	str	r3, [sp, #40]	; 0x28
 801444e:	f998 3000 	ldrsb.w	r3, [r8]
 8014452:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014456:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d035      	beq.n	80144ca <pow+0x182>
 801445e:	4973      	ldr	r1, [pc, #460]	; (801462c <pow+0x2e4>)
 8014460:	2000      	movs	r0, #0
 8014462:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014466:	2b02      	cmp	r3, #2
 8014468:	e03c      	b.n	80144e4 <pow+0x19c>
 801446a:	eeb0 0a48 	vmov.f32	s0, s16
 801446e:	eef0 0a68 	vmov.f32	s1, s17
 8014472:	f000 ff3c 	bl	80152ee <finite>
 8014476:	4681      	mov	r9, r0
 8014478:	2800      	cmp	r0, #0
 801447a:	f040 8092 	bne.w	80145a2 <pow+0x25a>
 801447e:	ec47 6b10 	vmov	d0, r6, r7
 8014482:	f000 ff34 	bl	80152ee <finite>
 8014486:	2800      	cmp	r0, #0
 8014488:	f000 808b 	beq.w	80145a2 <pow+0x25a>
 801448c:	ec45 4b10 	vmov	d0, r4, r5
 8014490:	f000 ff2d 	bl	80152ee <finite>
 8014494:	2800      	cmp	r0, #0
 8014496:	f000 8084 	beq.w	80145a2 <pow+0x25a>
 801449a:	ec53 2b18 	vmov	r2, r3, d8
 801449e:	ee18 0a10 	vmov	r0, s16
 80144a2:	4619      	mov	r1, r3
 80144a4:	f7ec fbbe 	bl	8000c24 <__aeabi_dcmpun>
 80144a8:	4b61      	ldr	r3, [pc, #388]	; (8014630 <pow+0x2e8>)
 80144aa:	f993 8000 	ldrsb.w	r8, [r3]
 80144ae:	4b5d      	ldr	r3, [pc, #372]	; (8014624 <pow+0x2dc>)
 80144b0:	b318      	cbz	r0, 80144fa <pow+0x1b2>
 80144b2:	2201      	movs	r2, #1
 80144b4:	9202      	str	r2, [sp, #8]
 80144b6:	9303      	str	r3, [sp, #12]
 80144b8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80144bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80144c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80144c4:	f1b8 0f00 	cmp.w	r8, #0
 80144c8:	d102      	bne.n	80144d0 <pow+0x188>
 80144ca:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80144ce:	e00a      	b.n	80144e6 <pow+0x19e>
 80144d0:	4652      	mov	r2, sl
 80144d2:	465b      	mov	r3, fp
 80144d4:	4650      	mov	r0, sl
 80144d6:	4659      	mov	r1, fp
 80144d8:	f7ec fa34 	bl	8000944 <__aeabi_ddiv>
 80144dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80144e0:	f1b8 0f02 	cmp.w	r8, #2
 80144e4:	d005      	beq.n	80144f2 <pow+0x1aa>
 80144e6:	a802      	add	r0, sp, #8
 80144e8:	f000 ff09 	bl	80152fe <matherr>
 80144ec:	2800      	cmp	r0, #0
 80144ee:	f040 8086 	bne.w	80145fe <pow+0x2b6>
 80144f2:	f001 f825 	bl	8015540 <__errno>
 80144f6:	2321      	movs	r3, #33	; 0x21
 80144f8:	e080      	b.n	80145fc <pow+0x2b4>
 80144fa:	2203      	movs	r2, #3
 80144fc:	9202      	str	r2, [sp, #8]
 80144fe:	9303      	str	r3, [sp, #12]
 8014500:	900a      	str	r0, [sp, #40]	; 0x28
 8014502:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014506:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801450a:	f1b8 0f00 	cmp.w	r8, #0
 801450e:	d124      	bne.n	801455a <pow+0x212>
 8014510:	4b48      	ldr	r3, [pc, #288]	; (8014634 <pow+0x2ec>)
 8014512:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014516:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801451a:	4630      	mov	r0, r6
 801451c:	4652      	mov	r2, sl
 801451e:	465b      	mov	r3, fp
 8014520:	4639      	mov	r1, r7
 8014522:	f7ec fb57 	bl	8000bd4 <__aeabi_dcmplt>
 8014526:	2800      	cmp	r0, #0
 8014528:	d061      	beq.n	80145ee <pow+0x2a6>
 801452a:	2200      	movs	r2, #0
 801452c:	4b42      	ldr	r3, [pc, #264]	; (8014638 <pow+0x2f0>)
 801452e:	4620      	mov	r0, r4
 8014530:	4629      	mov	r1, r5
 8014532:	f7ec f8dd 	bl	80006f0 <__aeabi_dmul>
 8014536:	4604      	mov	r4, r0
 8014538:	460d      	mov	r5, r1
 801453a:	ec45 4b10 	vmov	d0, r4, r5
 801453e:	f000 feeb 	bl	8015318 <rint>
 8014542:	4620      	mov	r0, r4
 8014544:	ec53 2b10 	vmov	r2, r3, d0
 8014548:	4629      	mov	r1, r5
 801454a:	f7ec fb39 	bl	8000bc0 <__aeabi_dcmpeq>
 801454e:	2800      	cmp	r0, #0
 8014550:	d148      	bne.n	80145e4 <pow+0x29c>
 8014552:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014556:	4b39      	ldr	r3, [pc, #228]	; (801463c <pow+0x2f4>)
 8014558:	e020      	b.n	801459c <pow+0x254>
 801455a:	4b39      	ldr	r3, [pc, #228]	; (8014640 <pow+0x2f8>)
 801455c:	2200      	movs	r2, #0
 801455e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014562:	4630      	mov	r0, r6
 8014564:	4652      	mov	r2, sl
 8014566:	465b      	mov	r3, fp
 8014568:	4639      	mov	r1, r7
 801456a:	f7ec fb33 	bl	8000bd4 <__aeabi_dcmplt>
 801456e:	2800      	cmp	r0, #0
 8014570:	d038      	beq.n	80145e4 <pow+0x29c>
 8014572:	2200      	movs	r2, #0
 8014574:	4b30      	ldr	r3, [pc, #192]	; (8014638 <pow+0x2f0>)
 8014576:	4620      	mov	r0, r4
 8014578:	4629      	mov	r1, r5
 801457a:	f7ec f8b9 	bl	80006f0 <__aeabi_dmul>
 801457e:	4604      	mov	r4, r0
 8014580:	460d      	mov	r5, r1
 8014582:	ec45 4b10 	vmov	d0, r4, r5
 8014586:	f000 fec7 	bl	8015318 <rint>
 801458a:	4620      	mov	r0, r4
 801458c:	ec53 2b10 	vmov	r2, r3, d0
 8014590:	4629      	mov	r1, r5
 8014592:	f7ec fb15 	bl	8000bc0 <__aeabi_dcmpeq>
 8014596:	bb28      	cbnz	r0, 80145e4 <pow+0x29c>
 8014598:	4b24      	ldr	r3, [pc, #144]	; (801462c <pow+0x2e4>)
 801459a:	2200      	movs	r2, #0
 801459c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80145a0:	e020      	b.n	80145e4 <pow+0x29c>
 80145a2:	f04f 0800 	mov.w	r8, #0
 80145a6:	f04f 0900 	mov.w	r9, #0
 80145aa:	4642      	mov	r2, r8
 80145ac:	464b      	mov	r3, r9
 80145ae:	ec51 0b18 	vmov	r0, r1, d8
 80145b2:	f7ec fb05 	bl	8000bc0 <__aeabi_dcmpeq>
 80145b6:	b358      	cbz	r0, 8014610 <pow+0x2c8>
 80145b8:	ec47 6b10 	vmov	d0, r6, r7
 80145bc:	f000 fe97 	bl	80152ee <finite>
 80145c0:	b330      	cbz	r0, 8014610 <pow+0x2c8>
 80145c2:	ec45 4b10 	vmov	d0, r4, r5
 80145c6:	f000 fe92 	bl	80152ee <finite>
 80145ca:	b308      	cbz	r0, 8014610 <pow+0x2c8>
 80145cc:	2304      	movs	r3, #4
 80145ce:	9302      	str	r3, [sp, #8]
 80145d0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80145d4:	4b13      	ldr	r3, [pc, #76]	; (8014624 <pow+0x2dc>)
 80145d6:	9303      	str	r3, [sp, #12]
 80145d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80145dc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80145e0:	2300      	movs	r3, #0
 80145e2:	930a      	str	r3, [sp, #40]	; 0x28
 80145e4:	4b12      	ldr	r3, [pc, #72]	; (8014630 <pow+0x2e8>)
 80145e6:	f993 3000 	ldrsb.w	r3, [r3]
 80145ea:	2b02      	cmp	r3, #2
 80145ec:	d003      	beq.n	80145f6 <pow+0x2ae>
 80145ee:	a802      	add	r0, sp, #8
 80145f0:	f000 fe85 	bl	80152fe <matherr>
 80145f4:	b918      	cbnz	r0, 80145fe <pow+0x2b6>
 80145f6:	f000 ffa3 	bl	8015540 <__errno>
 80145fa:	2322      	movs	r3, #34	; 0x22
 80145fc:	6003      	str	r3, [r0, #0]
 80145fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014600:	b11b      	cbz	r3, 801460a <pow+0x2c2>
 8014602:	f000 ff9d 	bl	8015540 <__errno>
 8014606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014608:	6003      	str	r3, [r0, #0]
 801460a:	ed9d 0b08 	vldr	d0, [sp, #32]
 801460e:	e003      	b.n	8014618 <pow+0x2d0>
 8014610:	eeb0 0a48 	vmov.f32	s0, s16
 8014614:	eef0 0a68 	vmov.f32	s1, s17
 8014618:	b00d      	add	sp, #52	; 0x34
 801461a:	ecbd 8b02 	vpop	{d8}
 801461e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014622:	bf00      	nop
 8014624:	0802d3ec 	.word	0x0802d3ec
 8014628:	3ff00000 	.word	0x3ff00000
 801462c:	fff00000 	.word	0xfff00000
 8014630:	200105cc 	.word	0x200105cc
 8014634:	47efffff 	.word	0x47efffff
 8014638:	3fe00000 	.word	0x3fe00000
 801463c:	c7efffff 	.word	0xc7efffff
 8014640:	7ff00000 	.word	0x7ff00000

08014644 <sqrtf>:
 8014644:	b510      	push	{r4, lr}
 8014646:	ed2d 8b02 	vpush	{d8}
 801464a:	b08a      	sub	sp, #40	; 0x28
 801464c:	eeb0 8a40 	vmov.f32	s16, s0
 8014650:	f000 fdfe 	bl	8015250 <__ieee754_sqrtf>
 8014654:	4b21      	ldr	r3, [pc, #132]	; (80146dc <sqrtf+0x98>)
 8014656:	f993 4000 	ldrsb.w	r4, [r3]
 801465a:	1c63      	adds	r3, r4, #1
 801465c:	d039      	beq.n	80146d2 <sqrtf+0x8e>
 801465e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014666:	d634      	bvs.n	80146d2 <sqrtf+0x8e>
 8014668:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014670:	d52f      	bpl.n	80146d2 <sqrtf+0x8e>
 8014672:	2301      	movs	r3, #1
 8014674:	9300      	str	r3, [sp, #0]
 8014676:	4b1a      	ldr	r3, [pc, #104]	; (80146e0 <sqrtf+0x9c>)
 8014678:	9301      	str	r3, [sp, #4]
 801467a:	ee18 0a10 	vmov	r0, s16
 801467e:	2300      	movs	r3, #0
 8014680:	9308      	str	r3, [sp, #32]
 8014682:	f7eb ffe1 	bl	8000648 <__aeabi_f2d>
 8014686:	2200      	movs	r2, #0
 8014688:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801468c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014690:	2300      	movs	r3, #0
 8014692:	b914      	cbnz	r4, 801469a <sqrtf+0x56>
 8014694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014698:	e007      	b.n	80146aa <sqrtf+0x66>
 801469a:	4610      	mov	r0, r2
 801469c:	4619      	mov	r1, r3
 801469e:	f7ec f951 	bl	8000944 <__aeabi_ddiv>
 80146a2:	2c02      	cmp	r4, #2
 80146a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80146a8:	d003      	beq.n	80146b2 <sqrtf+0x6e>
 80146aa:	4668      	mov	r0, sp
 80146ac:	f000 fe27 	bl	80152fe <matherr>
 80146b0:	b918      	cbnz	r0, 80146ba <sqrtf+0x76>
 80146b2:	f000 ff45 	bl	8015540 <__errno>
 80146b6:	2321      	movs	r3, #33	; 0x21
 80146b8:	6003      	str	r3, [r0, #0]
 80146ba:	9b08      	ldr	r3, [sp, #32]
 80146bc:	b11b      	cbz	r3, 80146c6 <sqrtf+0x82>
 80146be:	f000 ff3f 	bl	8015540 <__errno>
 80146c2:	9b08      	ldr	r3, [sp, #32]
 80146c4:	6003      	str	r3, [r0, #0]
 80146c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80146ca:	f7ec fae9 	bl	8000ca0 <__aeabi_d2f>
 80146ce:	ee00 0a10 	vmov	s0, r0
 80146d2:	b00a      	add	sp, #40	; 0x28
 80146d4:	ecbd 8b02 	vpop	{d8}
 80146d8:	bd10      	pop	{r4, pc}
 80146da:	bf00      	nop
 80146dc:	200105cc 	.word	0x200105cc
 80146e0:	0802d3f0 	.word	0x0802d3f0
 80146e4:	00000000 	.word	0x00000000

080146e8 <__ieee754_pow>:
 80146e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146ec:	b091      	sub	sp, #68	; 0x44
 80146ee:	ed8d 1b00 	vstr	d1, [sp]
 80146f2:	e89d 0204 	ldmia.w	sp, {r2, r9}
 80146f6:	ec57 6b10 	vmov	r6, r7, d0
 80146fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80146fe:	ea58 0302 	orrs.w	r3, r8, r2
 8014702:	ee10 aa10 	vmov	sl, s0
 8014706:	463d      	mov	r5, r7
 8014708:	f000 849e 	beq.w	8015048 <__ieee754_pow+0x960>
 801470c:	4bbc      	ldr	r3, [pc, #752]	; (8014a00 <__ieee754_pow+0x318>)
 801470e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014712:	429c      	cmp	r4, r3
 8014714:	dc08      	bgt.n	8014728 <__ieee754_pow+0x40>
 8014716:	d102      	bne.n	801471e <__ieee754_pow+0x36>
 8014718:	b936      	cbnz	r6, 8014728 <__ieee754_pow+0x40>
 801471a:	f000 bc9e 	b.w	801505a <__ieee754_pow+0x972>
 801471e:	4598      	cmp	r8, r3
 8014720:	dc02      	bgt.n	8014728 <__ieee754_pow+0x40>
 8014722:	4598      	cmp	r8, r3
 8014724:	d10e      	bne.n	8014744 <__ieee754_pow+0x5c>
 8014726:	b16a      	cbz	r2, 8014744 <__ieee754_pow+0x5c>
 8014728:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801472c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014730:	ea54 030a 	orrs.w	r3, r4, sl
 8014734:	f000 8488 	beq.w	8015048 <__ieee754_pow+0x960>
 8014738:	48b2      	ldr	r0, [pc, #712]	; (8014a04 <__ieee754_pow+0x31c>)
 801473a:	b011      	add	sp, #68	; 0x44
 801473c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014740:	f000 bde2 	b.w	8015308 <nan>
 8014744:	2d00      	cmp	r5, #0
 8014746:	da2b      	bge.n	80147a0 <__ieee754_pow+0xb8>
 8014748:	4baf      	ldr	r3, [pc, #700]	; (8014a08 <__ieee754_pow+0x320>)
 801474a:	4598      	cmp	r8, r3
 801474c:	dc25      	bgt.n	801479a <__ieee754_pow+0xb2>
 801474e:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014752:	4598      	cmp	r8, r3
 8014754:	dd24      	ble.n	80147a0 <__ieee754_pow+0xb8>
 8014756:	ea4f 5328 	mov.w	r3, r8, asr #20
 801475a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801475e:	2b14      	cmp	r3, #20
 8014760:	dd0c      	ble.n	801477c <__ieee754_pow+0x94>
 8014762:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014766:	fa22 f103 	lsr.w	r1, r2, r3
 801476a:	fa01 f303 	lsl.w	r3, r1, r3
 801476e:	429a      	cmp	r2, r3
 8014770:	d116      	bne.n	80147a0 <__ieee754_pow+0xb8>
 8014772:	f001 0101 	and.w	r1, r1, #1
 8014776:	f1c1 0b02 	rsb	fp, r1, #2
 801477a:	e013      	b.n	80147a4 <__ieee754_pow+0xbc>
 801477c:	2a00      	cmp	r2, #0
 801477e:	d151      	bne.n	8014824 <__ieee754_pow+0x13c>
 8014780:	f1c3 0314 	rsb	r3, r3, #20
 8014784:	fa48 f103 	asr.w	r1, r8, r3
 8014788:	fa01 f303 	lsl.w	r3, r1, r3
 801478c:	4598      	cmp	r8, r3
 801478e:	d12a      	bne.n	80147e6 <__ieee754_pow+0xfe>
 8014790:	f001 0101 	and.w	r1, r1, #1
 8014794:	f1c1 0b02 	rsb	fp, r1, #2
 8014798:	e026      	b.n	80147e8 <__ieee754_pow+0x100>
 801479a:	f04f 0b02 	mov.w	fp, #2
 801479e:	e001      	b.n	80147a4 <__ieee754_pow+0xbc>
 80147a0:	f04f 0b00 	mov.w	fp, #0
 80147a4:	2a00      	cmp	r2, #0
 80147a6:	d13f      	bne.n	8014828 <__ieee754_pow+0x140>
 80147a8:	4b95      	ldr	r3, [pc, #596]	; (8014a00 <__ieee754_pow+0x318>)
 80147aa:	4598      	cmp	r8, r3
 80147ac:	d11c      	bne.n	80147e8 <__ieee754_pow+0x100>
 80147ae:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80147b2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80147b6:	ea53 030a 	orrs.w	r3, r3, sl
 80147ba:	f000 8445 	beq.w	8015048 <__ieee754_pow+0x960>
 80147be:	4b93      	ldr	r3, [pc, #588]	; (8014a0c <__ieee754_pow+0x324>)
 80147c0:	429c      	cmp	r4, r3
 80147c2:	dd07      	ble.n	80147d4 <__ieee754_pow+0xec>
 80147c4:	f1b9 0f00 	cmp.w	r9, #0
 80147c8:	f280 8441 	bge.w	801504e <__ieee754_pow+0x966>
 80147cc:	2000      	movs	r0, #0
 80147ce:	2100      	movs	r1, #0
 80147d0:	f000 bc48 	b.w	8015064 <__ieee754_pow+0x97c>
 80147d4:	f1b9 0f00 	cmp.w	r9, #0
 80147d8:	daf8      	bge.n	80147cc <__ieee754_pow+0xe4>
 80147da:	e89d 0009 	ldmia.w	sp, {r0, r3}
 80147de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147e2:	f000 bc3f 	b.w	8015064 <__ieee754_pow+0x97c>
 80147e6:	4693      	mov	fp, r2
 80147e8:	4b89      	ldr	r3, [pc, #548]	; (8014a10 <__ieee754_pow+0x328>)
 80147ea:	4598      	cmp	r8, r3
 80147ec:	d108      	bne.n	8014800 <__ieee754_pow+0x118>
 80147ee:	f1b9 0f00 	cmp.w	r9, #0
 80147f2:	f280 842f 	bge.w	8015054 <__ieee754_pow+0x96c>
 80147f6:	4632      	mov	r2, r6
 80147f8:	463b      	mov	r3, r7
 80147fa:	2000      	movs	r0, #0
 80147fc:	4984      	ldr	r1, [pc, #528]	; (8014a10 <__ieee754_pow+0x328>)
 80147fe:	e03d      	b.n	801487c <__ieee754_pow+0x194>
 8014800:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014804:	d102      	bne.n	801480c <__ieee754_pow+0x124>
 8014806:	4632      	mov	r2, r6
 8014808:	463b      	mov	r3, r7
 801480a:	e05b      	b.n	80148c4 <__ieee754_pow+0x1dc>
 801480c:	4b81      	ldr	r3, [pc, #516]	; (8014a14 <__ieee754_pow+0x32c>)
 801480e:	4599      	cmp	r9, r3
 8014810:	d10a      	bne.n	8014828 <__ieee754_pow+0x140>
 8014812:	2d00      	cmp	r5, #0
 8014814:	db08      	blt.n	8014828 <__ieee754_pow+0x140>
 8014816:	ec47 6b10 	vmov	d0, r6, r7
 801481a:	b011      	add	sp, #68	; 0x44
 801481c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014820:	f000 bc62 	b.w	80150e8 <__ieee754_sqrt>
 8014824:	f04f 0b00 	mov.w	fp, #0
 8014828:	ec47 6b10 	vmov	d0, r6, r7
 801482c:	f000 fd58 	bl	80152e0 <fabs>
 8014830:	ec51 0b10 	vmov	r0, r1, d0
 8014834:	f1ba 0f00 	cmp.w	sl, #0
 8014838:	d12b      	bne.n	8014892 <__ieee754_pow+0x1aa>
 801483a:	b124      	cbz	r4, 8014846 <__ieee754_pow+0x15e>
 801483c:	4b74      	ldr	r3, [pc, #464]	; (8014a10 <__ieee754_pow+0x328>)
 801483e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014842:	429a      	cmp	r2, r3
 8014844:	d125      	bne.n	8014892 <__ieee754_pow+0x1aa>
 8014846:	f1b9 0f00 	cmp.w	r9, #0
 801484a:	da05      	bge.n	8014858 <__ieee754_pow+0x170>
 801484c:	4602      	mov	r2, r0
 801484e:	460b      	mov	r3, r1
 8014850:	2000      	movs	r0, #0
 8014852:	496f      	ldr	r1, [pc, #444]	; (8014a10 <__ieee754_pow+0x328>)
 8014854:	f7ec f876 	bl	8000944 <__aeabi_ddiv>
 8014858:	2d00      	cmp	r5, #0
 801485a:	f280 8403 	bge.w	8015064 <__ieee754_pow+0x97c>
 801485e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014862:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014866:	ea54 030b 	orrs.w	r3, r4, fp
 801486a:	d10a      	bne.n	8014882 <__ieee754_pow+0x19a>
 801486c:	4602      	mov	r2, r0
 801486e:	460b      	mov	r3, r1
 8014870:	4610      	mov	r0, r2
 8014872:	4619      	mov	r1, r3
 8014874:	f7eb fd88 	bl	8000388 <__aeabi_dsub>
 8014878:	4602      	mov	r2, r0
 801487a:	460b      	mov	r3, r1
 801487c:	f7ec f862 	bl	8000944 <__aeabi_ddiv>
 8014880:	e3f0      	b.n	8015064 <__ieee754_pow+0x97c>
 8014882:	f1bb 0f01 	cmp.w	fp, #1
 8014886:	f040 83ed 	bne.w	8015064 <__ieee754_pow+0x97c>
 801488a:	4606      	mov	r6, r0
 801488c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
 8014890:	e3e0      	b.n	8015054 <__ieee754_pow+0x96c>
 8014892:	0fed      	lsrs	r5, r5, #31
 8014894:	1e6b      	subs	r3, r5, #1
 8014896:	930d      	str	r3, [sp, #52]	; 0x34
 8014898:	ea5b 0303 	orrs.w	r3, fp, r3
 801489c:	d102      	bne.n	80148a4 <__ieee754_pow+0x1bc>
 801489e:	4632      	mov	r2, r6
 80148a0:	463b      	mov	r3, r7
 80148a2:	e7e5      	b.n	8014870 <__ieee754_pow+0x188>
 80148a4:	4b5c      	ldr	r3, [pc, #368]	; (8014a18 <__ieee754_pow+0x330>)
 80148a6:	4598      	cmp	r8, r3
 80148a8:	dd6f      	ble.n	801498a <__ieee754_pow+0x2a2>
 80148aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80148ae:	4598      	cmp	r8, r3
 80148b0:	dd0d      	ble.n	80148ce <__ieee754_pow+0x1e6>
 80148b2:	4b56      	ldr	r3, [pc, #344]	; (8014a0c <__ieee754_pow+0x324>)
 80148b4:	429c      	cmp	r4, r3
 80148b6:	dc10      	bgt.n	80148da <__ieee754_pow+0x1f2>
 80148b8:	f1b9 0f00 	cmp.w	r9, #0
 80148bc:	da86      	bge.n	80147cc <__ieee754_pow+0xe4>
 80148be:	a346      	add	r3, pc, #280	; (adr r3, 80149d8 <__ieee754_pow+0x2f0>)
 80148c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c4:	4610      	mov	r0, r2
 80148c6:	4619      	mov	r1, r3
 80148c8:	f7eb ff12 	bl	80006f0 <__aeabi_dmul>
 80148cc:	e3ca      	b.n	8015064 <__ieee754_pow+0x97c>
 80148ce:	4b53      	ldr	r3, [pc, #332]	; (8014a1c <__ieee754_pow+0x334>)
 80148d0:	429c      	cmp	r4, r3
 80148d2:	ddf1      	ble.n	80148b8 <__ieee754_pow+0x1d0>
 80148d4:	4b4e      	ldr	r3, [pc, #312]	; (8014a10 <__ieee754_pow+0x328>)
 80148d6:	429c      	cmp	r4, r3
 80148d8:	dd03      	ble.n	80148e2 <__ieee754_pow+0x1fa>
 80148da:	f1b9 0f00 	cmp.w	r9, #0
 80148de:	dcee      	bgt.n	80148be <__ieee754_pow+0x1d6>
 80148e0:	e774      	b.n	80147cc <__ieee754_pow+0xe4>
 80148e2:	2200      	movs	r2, #0
 80148e4:	4b4a      	ldr	r3, [pc, #296]	; (8014a10 <__ieee754_pow+0x328>)
 80148e6:	f7eb fd4f 	bl	8000388 <__aeabi_dsub>
 80148ea:	a33d      	add	r3, pc, #244	; (adr r3, 80149e0 <__ieee754_pow+0x2f8>)
 80148ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f0:	4604      	mov	r4, r0
 80148f2:	460d      	mov	r5, r1
 80148f4:	f7eb fefc 	bl	80006f0 <__aeabi_dmul>
 80148f8:	a33b      	add	r3, pc, #236	; (adr r3, 80149e8 <__ieee754_pow+0x300>)
 80148fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fe:	4606      	mov	r6, r0
 8014900:	460f      	mov	r7, r1
 8014902:	4620      	mov	r0, r4
 8014904:	4629      	mov	r1, r5
 8014906:	f7eb fef3 	bl	80006f0 <__aeabi_dmul>
 801490a:	2200      	movs	r2, #0
 801490c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014910:	4b43      	ldr	r3, [pc, #268]	; (8014a20 <__ieee754_pow+0x338>)
 8014912:	4620      	mov	r0, r4
 8014914:	4629      	mov	r1, r5
 8014916:	f7eb feeb 	bl	80006f0 <__aeabi_dmul>
 801491a:	4602      	mov	r2, r0
 801491c:	460b      	mov	r3, r1
 801491e:	a134      	add	r1, pc, #208	; (adr r1, 80149f0 <__ieee754_pow+0x308>)
 8014920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014924:	f7eb fd30 	bl	8000388 <__aeabi_dsub>
 8014928:	4622      	mov	r2, r4
 801492a:	462b      	mov	r3, r5
 801492c:	f7eb fee0 	bl	80006f0 <__aeabi_dmul>
 8014930:	4602      	mov	r2, r0
 8014932:	460b      	mov	r3, r1
 8014934:	2000      	movs	r0, #0
 8014936:	4937      	ldr	r1, [pc, #220]	; (8014a14 <__ieee754_pow+0x32c>)
 8014938:	f7eb fd26 	bl	8000388 <__aeabi_dsub>
 801493c:	4622      	mov	r2, r4
 801493e:	462b      	mov	r3, r5
 8014940:	4680      	mov	r8, r0
 8014942:	4689      	mov	r9, r1
 8014944:	4620      	mov	r0, r4
 8014946:	4629      	mov	r1, r5
 8014948:	f7eb fed2 	bl	80006f0 <__aeabi_dmul>
 801494c:	4602      	mov	r2, r0
 801494e:	460b      	mov	r3, r1
 8014950:	4640      	mov	r0, r8
 8014952:	4649      	mov	r1, r9
 8014954:	f7eb fecc 	bl	80006f0 <__aeabi_dmul>
 8014958:	a327      	add	r3, pc, #156	; (adr r3, 80149f8 <__ieee754_pow+0x310>)
 801495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495e:	f7eb fec7 	bl	80006f0 <__aeabi_dmul>
 8014962:	4602      	mov	r2, r0
 8014964:	460b      	mov	r3, r1
 8014966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801496a:	f7eb fd0d 	bl	8000388 <__aeabi_dsub>
 801496e:	4602      	mov	r2, r0
 8014970:	460b      	mov	r3, r1
 8014972:	4604      	mov	r4, r0
 8014974:	460d      	mov	r5, r1
 8014976:	4630      	mov	r0, r6
 8014978:	4639      	mov	r1, r7
 801497a:	f7eb fd07 	bl	800038c <__adddf3>
 801497e:	2000      	movs	r0, #0
 8014980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014984:	4632      	mov	r2, r6
 8014986:	463b      	mov	r3, r7
 8014988:	e1aa      	b.n	8014ce0 <__ieee754_pow+0x5f8>
 801498a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801498e:	f04f 0200 	mov.w	r2, #0
 8014992:	da05      	bge.n	80149a0 <__ieee754_pow+0x2b8>
 8014994:	4b23      	ldr	r3, [pc, #140]	; (8014a24 <__ieee754_pow+0x33c>)
 8014996:	f7eb feab 	bl	80006f0 <__aeabi_dmul>
 801499a:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801499e:	460c      	mov	r4, r1
 80149a0:	1523      	asrs	r3, r4, #20
 80149a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80149a6:	4413      	add	r3, r2
 80149a8:	9307      	str	r3, [sp, #28]
 80149aa:	4b1f      	ldr	r3, [pc, #124]	; (8014a28 <__ieee754_pow+0x340>)
 80149ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80149b0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80149b4:	429c      	cmp	r4, r3
 80149b6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80149ba:	dd07      	ble.n	80149cc <__ieee754_pow+0x2e4>
 80149bc:	4b1b      	ldr	r3, [pc, #108]	; (8014a2c <__ieee754_pow+0x344>)
 80149be:	429c      	cmp	r4, r3
 80149c0:	dd36      	ble.n	8014a30 <__ieee754_pow+0x348>
 80149c2:	9b07      	ldr	r3, [sp, #28]
 80149c4:	3301      	adds	r3, #1
 80149c6:	9307      	str	r3, [sp, #28]
 80149c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80149cc:	f04f 0a00 	mov.w	sl, #0
 80149d0:	e030      	b.n	8014a34 <__ieee754_pow+0x34c>
 80149d2:	bf00      	nop
 80149d4:	f3af 8000 	nop.w
 80149d8:	8800759c 	.word	0x8800759c
 80149dc:	7e37e43c 	.word	0x7e37e43c
 80149e0:	60000000 	.word	0x60000000
 80149e4:	3ff71547 	.word	0x3ff71547
 80149e8:	f85ddf44 	.word	0xf85ddf44
 80149ec:	3e54ae0b 	.word	0x3e54ae0b
 80149f0:	55555555 	.word	0x55555555
 80149f4:	3fd55555 	.word	0x3fd55555
 80149f8:	652b82fe 	.word	0x652b82fe
 80149fc:	3ff71547 	.word	0x3ff71547
 8014a00:	7ff00000 	.word	0x7ff00000
 8014a04:	0802d173 	.word	0x0802d173
 8014a08:	433fffff 	.word	0x433fffff
 8014a0c:	3fefffff 	.word	0x3fefffff
 8014a10:	3ff00000 	.word	0x3ff00000
 8014a14:	3fe00000 	.word	0x3fe00000
 8014a18:	41e00000 	.word	0x41e00000
 8014a1c:	3feffffe 	.word	0x3feffffe
 8014a20:	3fd00000 	.word	0x3fd00000
 8014a24:	43400000 	.word	0x43400000
 8014a28:	0003988e 	.word	0x0003988e
 8014a2c:	000bb679 	.word	0x000bb679
 8014a30:	f04f 0a01 	mov.w	sl, #1
 8014a34:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014a38:	930c      	str	r3, [sp, #48]	; 0x30
 8014a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a3c:	4bc6      	ldr	r3, [pc, #792]	; (8014d58 <__ieee754_pow+0x670>)
 8014a3e:	4413      	add	r3, r2
 8014a40:	ed93 7b00 	vldr	d7, [r3]
 8014a44:	4629      	mov	r1, r5
 8014a46:	ec53 2b17 	vmov	r2, r3, d7
 8014a4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014a4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014a52:	f7eb fc99 	bl	8000388 <__aeabi_dsub>
 8014a56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014a5a:	4606      	mov	r6, r0
 8014a5c:	460f      	mov	r7, r1
 8014a5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014a62:	f7eb fc93 	bl	800038c <__adddf3>
 8014a66:	4602      	mov	r2, r0
 8014a68:	460b      	mov	r3, r1
 8014a6a:	2000      	movs	r0, #0
 8014a6c:	49bb      	ldr	r1, [pc, #748]	; (8014d5c <__ieee754_pow+0x674>)
 8014a6e:	f7eb ff69 	bl	8000944 <__aeabi_ddiv>
 8014a72:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014a76:	4602      	mov	r2, r0
 8014a78:	460b      	mov	r3, r1
 8014a7a:	4630      	mov	r0, r6
 8014a7c:	4639      	mov	r1, r7
 8014a7e:	f7eb fe37 	bl	80006f0 <__aeabi_dmul>
 8014a82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014a86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014a8a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014a8e:	2300      	movs	r3, #0
 8014a90:	9302      	str	r3, [sp, #8]
 8014a92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014a96:	106d      	asrs	r5, r5, #1
 8014a98:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014a9c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014aa6:	4640      	mov	r0, r8
 8014aa8:	4649      	mov	r1, r9
 8014aaa:	4614      	mov	r4, r2
 8014aac:	461d      	mov	r5, r3
 8014aae:	f7eb fe1f 	bl	80006f0 <__aeabi_dmul>
 8014ab2:	4602      	mov	r2, r0
 8014ab4:	460b      	mov	r3, r1
 8014ab6:	4630      	mov	r0, r6
 8014ab8:	4639      	mov	r1, r7
 8014aba:	f7eb fc65 	bl	8000388 <__aeabi_dsub>
 8014abe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ac2:	4606      	mov	r6, r0
 8014ac4:	460f      	mov	r7, r1
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	4629      	mov	r1, r5
 8014aca:	f7eb fc5d 	bl	8000388 <__aeabi_dsub>
 8014ace:	4602      	mov	r2, r0
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ad6:	f7eb fc57 	bl	8000388 <__aeabi_dsub>
 8014ada:	4642      	mov	r2, r8
 8014adc:	464b      	mov	r3, r9
 8014ade:	f7eb fe07 	bl	80006f0 <__aeabi_dmul>
 8014ae2:	4602      	mov	r2, r0
 8014ae4:	460b      	mov	r3, r1
 8014ae6:	4630      	mov	r0, r6
 8014ae8:	4639      	mov	r1, r7
 8014aea:	f7eb fc4d 	bl	8000388 <__aeabi_dsub>
 8014aee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014af2:	f7eb fdfd 	bl	80006f0 <__aeabi_dmul>
 8014af6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014afa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014afe:	4610      	mov	r0, r2
 8014b00:	4619      	mov	r1, r3
 8014b02:	f7eb fdf5 	bl	80006f0 <__aeabi_dmul>
 8014b06:	a380      	add	r3, pc, #512	; (adr r3, 8014d08 <__ieee754_pow+0x620>)
 8014b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	460d      	mov	r5, r1
 8014b10:	f7eb fdee 	bl	80006f0 <__aeabi_dmul>
 8014b14:	a37e      	add	r3, pc, #504	; (adr r3, 8014d10 <__ieee754_pow+0x628>)
 8014b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1a:	f7eb fc37 	bl	800038c <__adddf3>
 8014b1e:	4622      	mov	r2, r4
 8014b20:	462b      	mov	r3, r5
 8014b22:	f7eb fde5 	bl	80006f0 <__aeabi_dmul>
 8014b26:	a37c      	add	r3, pc, #496	; (adr r3, 8014d18 <__ieee754_pow+0x630>)
 8014b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2c:	f7eb fc2e 	bl	800038c <__adddf3>
 8014b30:	4622      	mov	r2, r4
 8014b32:	462b      	mov	r3, r5
 8014b34:	f7eb fddc 	bl	80006f0 <__aeabi_dmul>
 8014b38:	a379      	add	r3, pc, #484	; (adr r3, 8014d20 <__ieee754_pow+0x638>)
 8014b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b3e:	f7eb fc25 	bl	800038c <__adddf3>
 8014b42:	4622      	mov	r2, r4
 8014b44:	462b      	mov	r3, r5
 8014b46:	f7eb fdd3 	bl	80006f0 <__aeabi_dmul>
 8014b4a:	a377      	add	r3, pc, #476	; (adr r3, 8014d28 <__ieee754_pow+0x640>)
 8014b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b50:	f7eb fc1c 	bl	800038c <__adddf3>
 8014b54:	4622      	mov	r2, r4
 8014b56:	462b      	mov	r3, r5
 8014b58:	f7eb fdca 	bl	80006f0 <__aeabi_dmul>
 8014b5c:	a374      	add	r3, pc, #464	; (adr r3, 8014d30 <__ieee754_pow+0x648>)
 8014b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b62:	f7eb fc13 	bl	800038c <__adddf3>
 8014b66:	4622      	mov	r2, r4
 8014b68:	4606      	mov	r6, r0
 8014b6a:	460f      	mov	r7, r1
 8014b6c:	462b      	mov	r3, r5
 8014b6e:	4620      	mov	r0, r4
 8014b70:	4629      	mov	r1, r5
 8014b72:	f7eb fdbd 	bl	80006f0 <__aeabi_dmul>
 8014b76:	4602      	mov	r2, r0
 8014b78:	460b      	mov	r3, r1
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	4639      	mov	r1, r7
 8014b7e:	f7eb fdb7 	bl	80006f0 <__aeabi_dmul>
 8014b82:	4642      	mov	r2, r8
 8014b84:	4604      	mov	r4, r0
 8014b86:	460d      	mov	r5, r1
 8014b88:	464b      	mov	r3, r9
 8014b8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014b8e:	f7eb fbfd 	bl	800038c <__adddf3>
 8014b92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014b96:	f7eb fdab 	bl	80006f0 <__aeabi_dmul>
 8014b9a:	4622      	mov	r2, r4
 8014b9c:	462b      	mov	r3, r5
 8014b9e:	f7eb fbf5 	bl	800038c <__adddf3>
 8014ba2:	4642      	mov	r2, r8
 8014ba4:	4606      	mov	r6, r0
 8014ba6:	460f      	mov	r7, r1
 8014ba8:	464b      	mov	r3, r9
 8014baa:	4640      	mov	r0, r8
 8014bac:	4649      	mov	r1, r9
 8014bae:	f7eb fd9f 	bl	80006f0 <__aeabi_dmul>
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	4b6a      	ldr	r3, [pc, #424]	; (8014d60 <__ieee754_pow+0x678>)
 8014bb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014bba:	f7eb fbe7 	bl	800038c <__adddf3>
 8014bbe:	4632      	mov	r2, r6
 8014bc0:	463b      	mov	r3, r7
 8014bc2:	f7eb fbe3 	bl	800038c <__adddf3>
 8014bc6:	9802      	ldr	r0, [sp, #8]
 8014bc8:	460d      	mov	r5, r1
 8014bca:	4604      	mov	r4, r0
 8014bcc:	4602      	mov	r2, r0
 8014bce:	460b      	mov	r3, r1
 8014bd0:	4640      	mov	r0, r8
 8014bd2:	4649      	mov	r1, r9
 8014bd4:	f7eb fd8c 	bl	80006f0 <__aeabi_dmul>
 8014bd8:	2200      	movs	r2, #0
 8014bda:	4680      	mov	r8, r0
 8014bdc:	4689      	mov	r9, r1
 8014bde:	4b60      	ldr	r3, [pc, #384]	; (8014d60 <__ieee754_pow+0x678>)
 8014be0:	4620      	mov	r0, r4
 8014be2:	4629      	mov	r1, r5
 8014be4:	f7eb fbd0 	bl	8000388 <__aeabi_dsub>
 8014be8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014bec:	f7eb fbcc 	bl	8000388 <__aeabi_dsub>
 8014bf0:	4602      	mov	r2, r0
 8014bf2:	460b      	mov	r3, r1
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	4639      	mov	r1, r7
 8014bf8:	f7eb fbc6 	bl	8000388 <__aeabi_dsub>
 8014bfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c00:	f7eb fd76 	bl	80006f0 <__aeabi_dmul>
 8014c04:	4622      	mov	r2, r4
 8014c06:	4606      	mov	r6, r0
 8014c08:	460f      	mov	r7, r1
 8014c0a:	462b      	mov	r3, r5
 8014c0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014c10:	f7eb fd6e 	bl	80006f0 <__aeabi_dmul>
 8014c14:	4602      	mov	r2, r0
 8014c16:	460b      	mov	r3, r1
 8014c18:	4630      	mov	r0, r6
 8014c1a:	4639      	mov	r1, r7
 8014c1c:	f7eb fbb6 	bl	800038c <__adddf3>
 8014c20:	4606      	mov	r6, r0
 8014c22:	460f      	mov	r7, r1
 8014c24:	4602      	mov	r2, r0
 8014c26:	460b      	mov	r3, r1
 8014c28:	4640      	mov	r0, r8
 8014c2a:	4649      	mov	r1, r9
 8014c2c:	f7eb fbae 	bl	800038c <__adddf3>
 8014c30:	9802      	ldr	r0, [sp, #8]
 8014c32:	a341      	add	r3, pc, #260	; (adr r3, 8014d38 <__ieee754_pow+0x650>)
 8014c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c38:	4604      	mov	r4, r0
 8014c3a:	460d      	mov	r5, r1
 8014c3c:	f7eb fd58 	bl	80006f0 <__aeabi_dmul>
 8014c40:	4642      	mov	r2, r8
 8014c42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014c46:	464b      	mov	r3, r9
 8014c48:	4620      	mov	r0, r4
 8014c4a:	4629      	mov	r1, r5
 8014c4c:	f7eb fb9c 	bl	8000388 <__aeabi_dsub>
 8014c50:	4602      	mov	r2, r0
 8014c52:	460b      	mov	r3, r1
 8014c54:	4630      	mov	r0, r6
 8014c56:	4639      	mov	r1, r7
 8014c58:	f7eb fb96 	bl	8000388 <__aeabi_dsub>
 8014c5c:	a338      	add	r3, pc, #224	; (adr r3, 8014d40 <__ieee754_pow+0x658>)
 8014c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c62:	f7eb fd45 	bl	80006f0 <__aeabi_dmul>
 8014c66:	a338      	add	r3, pc, #224	; (adr r3, 8014d48 <__ieee754_pow+0x660>)
 8014c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c6c:	4606      	mov	r6, r0
 8014c6e:	460f      	mov	r7, r1
 8014c70:	4620      	mov	r0, r4
 8014c72:	4629      	mov	r1, r5
 8014c74:	f7eb fd3c 	bl	80006f0 <__aeabi_dmul>
 8014c78:	4602      	mov	r2, r0
 8014c7a:	460b      	mov	r3, r1
 8014c7c:	4630      	mov	r0, r6
 8014c7e:	4639      	mov	r1, r7
 8014c80:	f7eb fb84 	bl	800038c <__adddf3>
 8014c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c86:	4b37      	ldr	r3, [pc, #220]	; (8014d64 <__ieee754_pow+0x67c>)
 8014c88:	4413      	add	r3, r2
 8014c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8e:	f7eb fb7d 	bl	800038c <__adddf3>
 8014c92:	4604      	mov	r4, r0
 8014c94:	9807      	ldr	r0, [sp, #28]
 8014c96:	460d      	mov	r5, r1
 8014c98:	f7eb fcc4 	bl	8000624 <__aeabi_i2d>
 8014c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c9e:	4b32      	ldr	r3, [pc, #200]	; (8014d68 <__ieee754_pow+0x680>)
 8014ca0:	4413      	add	r3, r2
 8014ca2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	460f      	mov	r7, r1
 8014caa:	4622      	mov	r2, r4
 8014cac:	462b      	mov	r3, r5
 8014cae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014cb2:	f7eb fb6b 	bl	800038c <__adddf3>
 8014cb6:	4642      	mov	r2, r8
 8014cb8:	464b      	mov	r3, r9
 8014cba:	f7eb fb67 	bl	800038c <__adddf3>
 8014cbe:	4632      	mov	r2, r6
 8014cc0:	463b      	mov	r3, r7
 8014cc2:	f7eb fb63 	bl	800038c <__adddf3>
 8014cc6:	9802      	ldr	r0, [sp, #8]
 8014cc8:	4632      	mov	r2, r6
 8014cca:	463b      	mov	r3, r7
 8014ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014cd0:	f7eb fb5a 	bl	8000388 <__aeabi_dsub>
 8014cd4:	4642      	mov	r2, r8
 8014cd6:	464b      	mov	r3, r9
 8014cd8:	f7eb fb56 	bl	8000388 <__aeabi_dsub>
 8014cdc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014ce0:	f7eb fb52 	bl	8000388 <__aeabi_dsub>
 8014ce4:	4602      	mov	r2, r0
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	4620      	mov	r0, r4
 8014cea:	4629      	mov	r1, r5
 8014cec:	f7eb fb4c 	bl	8000388 <__aeabi_dsub>
 8014cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014cf2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8014cf6:	4313      	orrs	r3, r2
 8014cf8:	4606      	mov	r6, r0
 8014cfa:	460f      	mov	r7, r1
 8014cfc:	d136      	bne.n	8014d6c <__ieee754_pow+0x684>
 8014cfe:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014d50 <__ieee754_pow+0x668>
 8014d02:	e035      	b.n	8014d70 <__ieee754_pow+0x688>
 8014d04:	f3af 8000 	nop.w
 8014d08:	4a454eef 	.word	0x4a454eef
 8014d0c:	3fca7e28 	.word	0x3fca7e28
 8014d10:	93c9db65 	.word	0x93c9db65
 8014d14:	3fcd864a 	.word	0x3fcd864a
 8014d18:	a91d4101 	.word	0xa91d4101
 8014d1c:	3fd17460 	.word	0x3fd17460
 8014d20:	518f264d 	.word	0x518f264d
 8014d24:	3fd55555 	.word	0x3fd55555
 8014d28:	db6fabff 	.word	0xdb6fabff
 8014d2c:	3fdb6db6 	.word	0x3fdb6db6
 8014d30:	33333303 	.word	0x33333303
 8014d34:	3fe33333 	.word	0x3fe33333
 8014d38:	e0000000 	.word	0xe0000000
 8014d3c:	3feec709 	.word	0x3feec709
 8014d40:	dc3a03fd 	.word	0xdc3a03fd
 8014d44:	3feec709 	.word	0x3feec709
 8014d48:	145b01f5 	.word	0x145b01f5
 8014d4c:	be3e2fe0 	.word	0xbe3e2fe0
 8014d50:	00000000 	.word	0x00000000
 8014d54:	bff00000 	.word	0xbff00000
 8014d58:	0802d418 	.word	0x0802d418
 8014d5c:	3ff00000 	.word	0x3ff00000
 8014d60:	40080000 	.word	0x40080000
 8014d64:	0802d408 	.word	0x0802d408
 8014d68:	0802d3f8 	.word	0x0802d3f8
 8014d6c:	ed9f 7bc0 	vldr	d7, [pc, #768]	; 8015070 <__ieee754_pow+0x988>
 8014d70:	e9dd 4500 	ldrd	r4, r5, [sp]
 8014d74:	2400      	movs	r4, #0
 8014d76:	4622      	mov	r2, r4
 8014d78:	462b      	mov	r3, r5
 8014d7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014d82:	f7eb fb01 	bl	8000388 <__aeabi_dsub>
 8014d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d8a:	f7eb fcb1 	bl	80006f0 <__aeabi_dmul>
 8014d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d92:	4680      	mov	r8, r0
 8014d94:	4689      	mov	r9, r1
 8014d96:	4630      	mov	r0, r6
 8014d98:	4639      	mov	r1, r7
 8014d9a:	f7eb fca9 	bl	80006f0 <__aeabi_dmul>
 8014d9e:	4602      	mov	r2, r0
 8014da0:	460b      	mov	r3, r1
 8014da2:	4640      	mov	r0, r8
 8014da4:	4649      	mov	r1, r9
 8014da6:	f7eb faf1 	bl	800038c <__adddf3>
 8014daa:	4622      	mov	r2, r4
 8014dac:	462b      	mov	r3, r5
 8014dae:	4680      	mov	r8, r0
 8014db0:	4689      	mov	r9, r1
 8014db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014db6:	f7eb fc9b 	bl	80006f0 <__aeabi_dmul>
 8014dba:	460b      	mov	r3, r1
 8014dbc:	4604      	mov	r4, r0
 8014dbe:	460d      	mov	r5, r1
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	4649      	mov	r1, r9
 8014dc4:	4640      	mov	r0, r8
 8014dc6:	e9cd 4500 	strd	r4, r5, [sp]
 8014dca:	f7eb fadf 	bl	800038c <__adddf3>
 8014dce:	4bc0      	ldr	r3, [pc, #768]	; (80150d0 <__ieee754_pow+0x9e8>)
 8014dd0:	4299      	cmp	r1, r3
 8014dd2:	4606      	mov	r6, r0
 8014dd4:	460f      	mov	r7, r1
 8014dd6:	468b      	mov	fp, r1
 8014dd8:	dd26      	ble.n	8014e28 <__ieee754_pow+0x740>
 8014dda:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014dde:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014de2:	4303      	orrs	r3, r0
 8014de4:	d115      	bne.n	8014e12 <__ieee754_pow+0x72a>
 8014de6:	a3a4      	add	r3, pc, #656	; (adr r3, 8015078 <__ieee754_pow+0x990>)
 8014de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dec:	4640      	mov	r0, r8
 8014dee:	4649      	mov	r1, r9
 8014df0:	f7eb facc 	bl	800038c <__adddf3>
 8014df4:	4622      	mov	r2, r4
 8014df6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014dfa:	462b      	mov	r3, r5
 8014dfc:	4630      	mov	r0, r6
 8014dfe:	4639      	mov	r1, r7
 8014e00:	f7eb fac2 	bl	8000388 <__aeabi_dsub>
 8014e04:	4602      	mov	r2, r0
 8014e06:	460b      	mov	r3, r1
 8014e08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e0c:	f7eb ff00 	bl	8000c10 <__aeabi_dcmpgt>
 8014e10:	b348      	cbz	r0, 8014e66 <__ieee754_pow+0x77e>
 8014e12:	a39b      	add	r3, pc, #620	; (adr r3, 8015080 <__ieee754_pow+0x998>)
 8014e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e1c:	f7eb fc68 	bl	80006f0 <__aeabi_dmul>
 8014e20:	a397      	add	r3, pc, #604	; (adr r3, 8015080 <__ieee754_pow+0x998>)
 8014e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e26:	e54f      	b.n	80148c8 <__ieee754_pow+0x1e0>
 8014e28:	4baa      	ldr	r3, [pc, #680]	; (80150d4 <__ieee754_pow+0x9ec>)
 8014e2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014e2e:	429e      	cmp	r6, r3
 8014e30:	dd19      	ble.n	8014e66 <__ieee754_pow+0x77e>
 8014e32:	4ba9      	ldr	r3, [pc, #676]	; (80150d8 <__ieee754_pow+0x9f0>)
 8014e34:	440b      	add	r3, r1
 8014e36:	4303      	orrs	r3, r0
 8014e38:	d10a      	bne.n	8014e50 <__ieee754_pow+0x768>
 8014e3a:	4622      	mov	r2, r4
 8014e3c:	462b      	mov	r3, r5
 8014e3e:	f7eb faa3 	bl	8000388 <__aeabi_dsub>
 8014e42:	4602      	mov	r2, r0
 8014e44:	460b      	mov	r3, r1
 8014e46:	4640      	mov	r0, r8
 8014e48:	4649      	mov	r1, r9
 8014e4a:	f7eb fecd 	bl	8000be8 <__aeabi_dcmple>
 8014e4e:	b150      	cbz	r0, 8014e66 <__ieee754_pow+0x77e>
 8014e50:	a38d      	add	r3, pc, #564	; (adr r3, 8015088 <__ieee754_pow+0x9a0>)
 8014e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e5a:	f7eb fc49 	bl	80006f0 <__aeabi_dmul>
 8014e5e:	a38a      	add	r3, pc, #552	; (adr r3, 8015088 <__ieee754_pow+0x9a0>)
 8014e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e64:	e530      	b.n	80148c8 <__ieee754_pow+0x1e0>
 8014e66:	4a9d      	ldr	r2, [pc, #628]	; (80150dc <__ieee754_pow+0x9f4>)
 8014e68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e6c:	4293      	cmp	r3, r2
 8014e6e:	dd26      	ble.n	8014ebe <__ieee754_pow+0x7d6>
 8014e70:	151b      	asrs	r3, r3, #20
 8014e72:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014e76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014e7a:	fa4a f303 	asr.w	r3, sl, r3
 8014e7e:	445b      	add	r3, fp
 8014e80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014e84:	4e96      	ldr	r6, [pc, #600]	; (80150e0 <__ieee754_pow+0x9f8>)
 8014e86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014e8a:	4116      	asrs	r6, r2
 8014e8c:	ea23 0106 	bic.w	r1, r3, r6
 8014e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e94:	ea43 030a 	orr.w	r3, r3, sl
 8014e98:	2000      	movs	r0, #0
 8014e9a:	f1c2 0a14 	rsb	sl, r2, #20
 8014e9e:	fa43 fa0a 	asr.w	sl, r3, sl
 8014ea2:	f1bb 0f00 	cmp.w	fp, #0
 8014ea6:	4602      	mov	r2, r0
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	4620      	mov	r0, r4
 8014eac:	4629      	mov	r1, r5
 8014eae:	bfb8      	it	lt
 8014eb0:	f1ca 0a00 	rsblt	sl, sl, #0
 8014eb4:	f7eb fa68 	bl	8000388 <__aeabi_dsub>
 8014eb8:	e9cd 0100 	strd	r0, r1, [sp]
 8014ebc:	e001      	b.n	8014ec2 <__ieee754_pow+0x7da>
 8014ebe:	f04f 0a00 	mov.w	sl, #0
 8014ec2:	4642      	mov	r2, r8
 8014ec4:	464b      	mov	r3, r9
 8014ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014eca:	f7eb fa5f 	bl	800038c <__adddf3>
 8014ece:	2000      	movs	r0, #0
 8014ed0:	a36f      	add	r3, pc, #444	; (adr r3, 8015090 <__ieee754_pow+0x9a8>)
 8014ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed6:	4604      	mov	r4, r0
 8014ed8:	460d      	mov	r5, r1
 8014eda:	f7eb fc09 	bl	80006f0 <__aeabi_dmul>
 8014ede:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ee2:	4606      	mov	r6, r0
 8014ee4:	460f      	mov	r7, r1
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	4629      	mov	r1, r5
 8014eea:	f7eb fa4d 	bl	8000388 <__aeabi_dsub>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	4640      	mov	r0, r8
 8014ef4:	4649      	mov	r1, r9
 8014ef6:	f7eb fa47 	bl	8000388 <__aeabi_dsub>
 8014efa:	a367      	add	r3, pc, #412	; (adr r3, 8015098 <__ieee754_pow+0x9b0>)
 8014efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f00:	f7eb fbf6 	bl	80006f0 <__aeabi_dmul>
 8014f04:	a366      	add	r3, pc, #408	; (adr r3, 80150a0 <__ieee754_pow+0x9b8>)
 8014f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0a:	4680      	mov	r8, r0
 8014f0c:	4689      	mov	r9, r1
 8014f0e:	4620      	mov	r0, r4
 8014f10:	4629      	mov	r1, r5
 8014f12:	f7eb fbed 	bl	80006f0 <__aeabi_dmul>
 8014f16:	4602      	mov	r2, r0
 8014f18:	460b      	mov	r3, r1
 8014f1a:	4640      	mov	r0, r8
 8014f1c:	4649      	mov	r1, r9
 8014f1e:	f7eb fa35 	bl	800038c <__adddf3>
 8014f22:	4604      	mov	r4, r0
 8014f24:	460d      	mov	r5, r1
 8014f26:	4602      	mov	r2, r0
 8014f28:	460b      	mov	r3, r1
 8014f2a:	4630      	mov	r0, r6
 8014f2c:	4639      	mov	r1, r7
 8014f2e:	f7eb fa2d 	bl	800038c <__adddf3>
 8014f32:	4632      	mov	r2, r6
 8014f34:	463b      	mov	r3, r7
 8014f36:	4680      	mov	r8, r0
 8014f38:	4689      	mov	r9, r1
 8014f3a:	f7eb fa25 	bl	8000388 <__aeabi_dsub>
 8014f3e:	4602      	mov	r2, r0
 8014f40:	460b      	mov	r3, r1
 8014f42:	4620      	mov	r0, r4
 8014f44:	4629      	mov	r1, r5
 8014f46:	f7eb fa1f 	bl	8000388 <__aeabi_dsub>
 8014f4a:	4642      	mov	r2, r8
 8014f4c:	4606      	mov	r6, r0
 8014f4e:	460f      	mov	r7, r1
 8014f50:	464b      	mov	r3, r9
 8014f52:	4640      	mov	r0, r8
 8014f54:	4649      	mov	r1, r9
 8014f56:	f7eb fbcb 	bl	80006f0 <__aeabi_dmul>
 8014f5a:	a353      	add	r3, pc, #332	; (adr r3, 80150a8 <__ieee754_pow+0x9c0>)
 8014f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f60:	4604      	mov	r4, r0
 8014f62:	460d      	mov	r5, r1
 8014f64:	f7eb fbc4 	bl	80006f0 <__aeabi_dmul>
 8014f68:	a351      	add	r3, pc, #324	; (adr r3, 80150b0 <__ieee754_pow+0x9c8>)
 8014f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6e:	f7eb fa0b 	bl	8000388 <__aeabi_dsub>
 8014f72:	4622      	mov	r2, r4
 8014f74:	462b      	mov	r3, r5
 8014f76:	f7eb fbbb 	bl	80006f0 <__aeabi_dmul>
 8014f7a:	a34f      	add	r3, pc, #316	; (adr r3, 80150b8 <__ieee754_pow+0x9d0>)
 8014f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f80:	f7eb fa04 	bl	800038c <__adddf3>
 8014f84:	4622      	mov	r2, r4
 8014f86:	462b      	mov	r3, r5
 8014f88:	f7eb fbb2 	bl	80006f0 <__aeabi_dmul>
 8014f8c:	a34c      	add	r3, pc, #304	; (adr r3, 80150c0 <__ieee754_pow+0x9d8>)
 8014f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f92:	f7eb f9f9 	bl	8000388 <__aeabi_dsub>
 8014f96:	4622      	mov	r2, r4
 8014f98:	462b      	mov	r3, r5
 8014f9a:	f7eb fba9 	bl	80006f0 <__aeabi_dmul>
 8014f9e:	a34a      	add	r3, pc, #296	; (adr r3, 80150c8 <__ieee754_pow+0x9e0>)
 8014fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fa4:	f7eb f9f2 	bl	800038c <__adddf3>
 8014fa8:	4622      	mov	r2, r4
 8014faa:	462b      	mov	r3, r5
 8014fac:	f7eb fba0 	bl	80006f0 <__aeabi_dmul>
 8014fb0:	4602      	mov	r2, r0
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	4640      	mov	r0, r8
 8014fb6:	4649      	mov	r1, r9
 8014fb8:	f7eb f9e6 	bl	8000388 <__aeabi_dsub>
 8014fbc:	4604      	mov	r4, r0
 8014fbe:	460d      	mov	r5, r1
 8014fc0:	4602      	mov	r2, r0
 8014fc2:	460b      	mov	r3, r1
 8014fc4:	4640      	mov	r0, r8
 8014fc6:	4649      	mov	r1, r9
 8014fc8:	f7eb fb92 	bl	80006f0 <__aeabi_dmul>
 8014fcc:	2200      	movs	r2, #0
 8014fce:	e9cd 0100 	strd	r0, r1, [sp]
 8014fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	4629      	mov	r1, r5
 8014fda:	f7eb f9d5 	bl	8000388 <__aeabi_dsub>
 8014fde:	4602      	mov	r2, r0
 8014fe0:	460b      	mov	r3, r1
 8014fe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fe6:	f7eb fcad 	bl	8000944 <__aeabi_ddiv>
 8014fea:	4632      	mov	r2, r6
 8014fec:	4604      	mov	r4, r0
 8014fee:	460d      	mov	r5, r1
 8014ff0:	463b      	mov	r3, r7
 8014ff2:	4640      	mov	r0, r8
 8014ff4:	4649      	mov	r1, r9
 8014ff6:	f7eb fb7b 	bl	80006f0 <__aeabi_dmul>
 8014ffa:	4632      	mov	r2, r6
 8014ffc:	463b      	mov	r3, r7
 8014ffe:	f7eb f9c5 	bl	800038c <__adddf3>
 8015002:	4602      	mov	r2, r0
 8015004:	460b      	mov	r3, r1
 8015006:	4620      	mov	r0, r4
 8015008:	4629      	mov	r1, r5
 801500a:	f7eb f9bd 	bl	8000388 <__aeabi_dsub>
 801500e:	4642      	mov	r2, r8
 8015010:	464b      	mov	r3, r9
 8015012:	f7eb f9b9 	bl	8000388 <__aeabi_dsub>
 8015016:	4602      	mov	r2, r0
 8015018:	460b      	mov	r3, r1
 801501a:	2000      	movs	r0, #0
 801501c:	4931      	ldr	r1, [pc, #196]	; (80150e4 <__ieee754_pow+0x9fc>)
 801501e:	f7eb f9b3 	bl	8000388 <__aeabi_dsub>
 8015022:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015026:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801502a:	4602      	mov	r2, r0
 801502c:	460b      	mov	r3, r1
 801502e:	da07      	bge.n	8015040 <__ieee754_pow+0x958>
 8015030:	4650      	mov	r0, sl
 8015032:	ec43 2b10 	vmov	d0, r2, r3
 8015036:	f000 f9fb 	bl	8015430 <scalbn>
 801503a:	ec51 0b10 	vmov	r0, r1, d0
 801503e:	e000      	b.n	8015042 <__ieee754_pow+0x95a>
 8015040:	4621      	mov	r1, r4
 8015042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015046:	e43f      	b.n	80148c8 <__ieee754_pow+0x1e0>
 8015048:	2000      	movs	r0, #0
 801504a:	4926      	ldr	r1, [pc, #152]	; (80150e4 <__ieee754_pow+0x9fc>)
 801504c:	e00a      	b.n	8015064 <__ieee754_pow+0x97c>
 801504e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015052:	e007      	b.n	8015064 <__ieee754_pow+0x97c>
 8015054:	4630      	mov	r0, r6
 8015056:	4639      	mov	r1, r7
 8015058:	e004      	b.n	8015064 <__ieee754_pow+0x97c>
 801505a:	45a0      	cmp	r8, r4
 801505c:	f73f ab6c 	bgt.w	8014738 <__ieee754_pow+0x50>
 8015060:	f7ff bb5f 	b.w	8014722 <__ieee754_pow+0x3a>
 8015064:	ec41 0b10 	vmov	d0, r0, r1
 8015068:	b011      	add	sp, #68	; 0x44
 801506a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801506e:	bf00      	nop
 8015070:	00000000 	.word	0x00000000
 8015074:	3ff00000 	.word	0x3ff00000
 8015078:	652b82fe 	.word	0x652b82fe
 801507c:	3c971547 	.word	0x3c971547
 8015080:	8800759c 	.word	0x8800759c
 8015084:	7e37e43c 	.word	0x7e37e43c
 8015088:	c2f8f359 	.word	0xc2f8f359
 801508c:	01a56e1f 	.word	0x01a56e1f
 8015090:	00000000 	.word	0x00000000
 8015094:	3fe62e43 	.word	0x3fe62e43
 8015098:	fefa39ef 	.word	0xfefa39ef
 801509c:	3fe62e42 	.word	0x3fe62e42
 80150a0:	0ca86c39 	.word	0x0ca86c39
 80150a4:	be205c61 	.word	0xbe205c61
 80150a8:	72bea4d0 	.word	0x72bea4d0
 80150ac:	3e663769 	.word	0x3e663769
 80150b0:	c5d26bf1 	.word	0xc5d26bf1
 80150b4:	3ebbbd41 	.word	0x3ebbbd41
 80150b8:	af25de2c 	.word	0xaf25de2c
 80150bc:	3f11566a 	.word	0x3f11566a
 80150c0:	16bebd93 	.word	0x16bebd93
 80150c4:	3f66c16c 	.word	0x3f66c16c
 80150c8:	5555553e 	.word	0x5555553e
 80150cc:	3fc55555 	.word	0x3fc55555
 80150d0:	408fffff 	.word	0x408fffff
 80150d4:	4090cbff 	.word	0x4090cbff
 80150d8:	3f6f3400 	.word	0x3f6f3400
 80150dc:	3fe00000 	.word	0x3fe00000
 80150e0:	000fffff 	.word	0x000fffff
 80150e4:	3ff00000 	.word	0x3ff00000

080150e8 <__ieee754_sqrt>:
 80150e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150ec:	4957      	ldr	r1, [pc, #348]	; (801524c <__ieee754_sqrt+0x164>)
 80150ee:	4f57      	ldr	r7, [pc, #348]	; (801524c <__ieee754_sqrt+0x164>)
 80150f0:	ec55 4b10 	vmov	r4, r5, d0
 80150f4:	4029      	ands	r1, r5
 80150f6:	42b9      	cmp	r1, r7
 80150f8:	462a      	mov	r2, r5
 80150fa:	462b      	mov	r3, r5
 80150fc:	4626      	mov	r6, r4
 80150fe:	d10c      	bne.n	801511a <__ieee754_sqrt+0x32>
 8015100:	ee10 2a10 	vmov	r2, s0
 8015104:	462b      	mov	r3, r5
 8015106:	ee10 0a10 	vmov	r0, s0
 801510a:	4629      	mov	r1, r5
 801510c:	f7eb faf0 	bl	80006f0 <__aeabi_dmul>
 8015110:	4622      	mov	r2, r4
 8015112:	462b      	mov	r3, r5
 8015114:	f7eb f93a 	bl	800038c <__adddf3>
 8015118:	e094      	b.n	8015244 <__ieee754_sqrt+0x15c>
 801511a:	2d00      	cmp	r5, #0
 801511c:	dc11      	bgt.n	8015142 <__ieee754_sqrt+0x5a>
 801511e:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8015122:	4321      	orrs	r1, r4
 8015124:	f000 808b 	beq.w	801523e <__ieee754_sqrt+0x156>
 8015128:	b15d      	cbz	r5, 8015142 <__ieee754_sqrt+0x5a>
 801512a:	ee10 2a10 	vmov	r2, s0
 801512e:	462b      	mov	r3, r5
 8015130:	4620      	mov	r0, r4
 8015132:	4629      	mov	r1, r5
 8015134:	f7eb f928 	bl	8000388 <__aeabi_dsub>
 8015138:	4602      	mov	r2, r0
 801513a:	460b      	mov	r3, r1
 801513c:	f7eb fc02 	bl	8000944 <__aeabi_ddiv>
 8015140:	e080      	b.n	8015244 <__ieee754_sqrt+0x15c>
 8015142:	1512      	asrs	r2, r2, #20
 8015144:	d112      	bne.n	801516c <__ieee754_sqrt+0x84>
 8015146:	b91b      	cbnz	r3, 8015150 <__ieee754_sqrt+0x68>
 8015148:	0af3      	lsrs	r3, r6, #11
 801514a:	3a15      	subs	r2, #21
 801514c:	0576      	lsls	r6, r6, #21
 801514e:	e7fa      	b.n	8015146 <__ieee754_sqrt+0x5e>
 8015150:	2100      	movs	r1, #0
 8015152:	02d8      	lsls	r0, r3, #11
 8015154:	d402      	bmi.n	801515c <__ieee754_sqrt+0x74>
 8015156:	005b      	lsls	r3, r3, #1
 8015158:	3101      	adds	r1, #1
 801515a:	e7fa      	b.n	8015152 <__ieee754_sqrt+0x6a>
 801515c:	1e48      	subs	r0, r1, #1
 801515e:	1a12      	subs	r2, r2, r0
 8015160:	f1c1 0020 	rsb	r0, r1, #32
 8015164:	fa26 f000 	lsr.w	r0, r6, r0
 8015168:	4303      	orrs	r3, r0
 801516a:	408e      	lsls	r6, r1
 801516c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015174:	07d1      	lsls	r1, r2, #31
 8015176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801517a:	bf42      	ittt	mi
 801517c:	005b      	lslmi	r3, r3, #1
 801517e:	eb03 73d6 	addmi.w	r3, r3, r6, lsr #31
 8015182:	0076      	lslmi	r6, r6, #1
 8015184:	1055      	asrs	r5, r2, #1
 8015186:	f04f 0e00 	mov.w	lr, #0
 801518a:	eb03 72d6 	add.w	r2, r3, r6, lsr #31
 801518e:	4413      	add	r3, r2
 8015190:	0076      	lsls	r6, r6, #1
 8015192:	2216      	movs	r2, #22
 8015194:	4677      	mov	r7, lr
 8015196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801519a:	1878      	adds	r0, r7, r1
 801519c:	4298      	cmp	r0, r3
 801519e:	bfde      	ittt	le
 80151a0:	1a1b      	suble	r3, r3, r0
 80151a2:	1847      	addle	r7, r0, r1
 80151a4:	448e      	addle	lr, r1
 80151a6:	005b      	lsls	r3, r3, #1
 80151a8:	3a01      	subs	r2, #1
 80151aa:	eb03 73d6 	add.w	r3, r3, r6, lsr #31
 80151ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80151b2:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80151b6:	d1f0      	bne.n	801519a <__ieee754_sqrt+0xb2>
 80151b8:	2420      	movs	r4, #32
 80151ba:	4694      	mov	ip, r2
 80151bc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80151c0:	429f      	cmp	r7, r3
 80151c2:	eb01 000c 	add.w	r0, r1, ip
 80151c6:	db02      	blt.n	80151ce <__ieee754_sqrt+0xe6>
 80151c8:	d116      	bne.n	80151f8 <__ieee754_sqrt+0x110>
 80151ca:	42b0      	cmp	r0, r6
 80151cc:	d813      	bhi.n	80151f6 <__ieee754_sqrt+0x10e>
 80151ce:	2800      	cmp	r0, #0
 80151d0:	eb00 0c01 	add.w	ip, r0, r1
 80151d4:	da05      	bge.n	80151e2 <__ieee754_sqrt+0xfa>
 80151d6:	f1bc 0f00 	cmp.w	ip, #0
 80151da:	db02      	blt.n	80151e2 <__ieee754_sqrt+0xfa>
 80151dc:	f107 0801 	add.w	r8, r7, #1
 80151e0:	e000      	b.n	80151e4 <__ieee754_sqrt+0xfc>
 80151e2:	46b8      	mov	r8, r7
 80151e4:	1bdb      	subs	r3, r3, r7
 80151e6:	42b0      	cmp	r0, r6
 80151e8:	bf88      	it	hi
 80151ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80151ee:	1a36      	subs	r6, r6, r0
 80151f0:	440a      	add	r2, r1
 80151f2:	4647      	mov	r7, r8
 80151f4:	e000      	b.n	80151f8 <__ieee754_sqrt+0x110>
 80151f6:	463b      	mov	r3, r7
 80151f8:	eb03 70d6 	add.w	r0, r3, r6, lsr #31
 80151fc:	3c01      	subs	r4, #1
 80151fe:	4403      	add	r3, r0
 8015200:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8015204:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015208:	d1da      	bne.n	80151c0 <__ieee754_sqrt+0xd8>
 801520a:	4333      	orrs	r3, r6
 801520c:	d007      	beq.n	801521e <__ieee754_sqrt+0x136>
 801520e:	1c53      	adds	r3, r2, #1
 8015210:	bf13      	iteet	ne
 8015212:	f002 0301 	andne.w	r3, r2, #1
 8015216:	f10e 0e01 	addeq.w	lr, lr, #1
 801521a:	4622      	moveq	r2, r4
 801521c:	18d2      	addne	r2, r2, r3
 801521e:	ea4f 046e 	mov.w	r4, lr, asr #1
 8015222:	0853      	lsrs	r3, r2, #1
 8015224:	f104 547f 	add.w	r4, r4, #1069547520	; 0x3fc00000
 8015228:	f01e 0f01 	tst.w	lr, #1
 801522c:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
 8015230:	bf18      	it	ne
 8015232:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
 8015236:	eb04 5105 	add.w	r1, r4, r5, lsl #20
 801523a:	4618      	mov	r0, r3
 801523c:	e002      	b.n	8015244 <__ieee754_sqrt+0x15c>
 801523e:	ee10 0a10 	vmov	r0, s0
 8015242:	4629      	mov	r1, r5
 8015244:	ec41 0b10 	vmov	d0, r0, r1
 8015248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801524c:	7ff00000 	.word	0x7ff00000

08015250 <__ieee754_sqrtf>:
 8015250:	ee10 2a10 	vmov	r2, s0
 8015254:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015258:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801525c:	b570      	push	{r4, r5, r6, lr}
 801525e:	d302      	bcc.n	8015266 <__ieee754_sqrtf+0x16>
 8015260:	eea0 0a00 	vfma.f32	s0, s0, s0
 8015264:	bd70      	pop	{r4, r5, r6, pc}
 8015266:	2900      	cmp	r1, #0
 8015268:	d039      	beq.n	80152de <__ieee754_sqrtf+0x8e>
 801526a:	2a00      	cmp	r2, #0
 801526c:	da04      	bge.n	8015278 <__ieee754_sqrtf+0x28>
 801526e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015272:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015276:	bd70      	pop	{r4, r5, r6, pc}
 8015278:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801527c:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8015280:	d207      	bcs.n	8015292 <__ieee754_sqrtf+0x42>
 8015282:	2100      	movs	r1, #0
 8015284:	0210      	lsls	r0, r2, #8
 8015286:	d402      	bmi.n	801528e <__ieee754_sqrtf+0x3e>
 8015288:	0052      	lsls	r2, r2, #1
 801528a:	3101      	adds	r1, #1
 801528c:	e7fa      	b.n	8015284 <__ieee754_sqrtf+0x34>
 801528e:	3901      	subs	r1, #1
 8015290:	1a5b      	subs	r3, r3, r1
 8015292:	3b7f      	subs	r3, #127	; 0x7f
 8015294:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015298:	07d9      	lsls	r1, r3, #31
 801529a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 801529e:	bf48      	it	mi
 80152a0:	0052      	lslmi	r2, r2, #1
 80152a2:	1059      	asrs	r1, r3, #1
 80152a4:	2300      	movs	r3, #0
 80152a6:	0052      	lsls	r2, r2, #1
 80152a8:	2419      	movs	r4, #25
 80152aa:	461e      	mov	r6, r3
 80152ac:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80152b0:	1835      	adds	r5, r6, r0
 80152b2:	4295      	cmp	r5, r2
 80152b4:	bfde      	ittt	le
 80152b6:	182e      	addle	r6, r5, r0
 80152b8:	1b52      	suble	r2, r2, r5
 80152ba:	181b      	addle	r3, r3, r0
 80152bc:	3c01      	subs	r4, #1
 80152be:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80152c2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80152c6:	d1f3      	bne.n	80152b0 <__ieee754_sqrtf+0x60>
 80152c8:	b112      	cbz	r2, 80152d0 <__ieee754_sqrtf+0x80>
 80152ca:	f003 0201 	and.w	r2, r3, #1
 80152ce:	4413      	add	r3, r2
 80152d0:	105b      	asrs	r3, r3, #1
 80152d2:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80152d6:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80152da:	ee00 3a10 	vmov	s0, r3
 80152de:	bd70      	pop	{r4, r5, r6, pc}

080152e0 <fabs>:
 80152e0:	ec53 2b10 	vmov	r2, r3, d0
 80152e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80152e8:	ec43 2b10 	vmov	d0, r2, r3
 80152ec:	4770      	bx	lr

080152ee <finite>:
 80152ee:	ee10 3a90 	vmov	r3, s1
 80152f2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80152f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80152fa:	0fc0      	lsrs	r0, r0, #31
 80152fc:	4770      	bx	lr

080152fe <matherr>:
 80152fe:	2000      	movs	r0, #0
 8015300:	4770      	bx	lr
 8015302:	0000      	movs	r0, r0
 8015304:	0000      	movs	r0, r0
	...

08015308 <nan>:
 8015308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015310 <nan+0x8>
 801530c:	4770      	bx	lr
 801530e:	bf00      	nop
 8015310:	00000000 	.word	0x00000000
 8015314:	7ff80000 	.word	0x7ff80000

08015318 <rint>:
 8015318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801531a:	ec53 2b10 	vmov	r2, r3, d0
 801531e:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8015322:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015326:	2e13      	cmp	r6, #19
 8015328:	461d      	mov	r5, r3
 801532a:	4611      	mov	r1, r2
 801532c:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8015330:	dc42      	bgt.n	80153b8 <rint+0xa0>
 8015332:	2e00      	cmp	r6, #0
 8015334:	da28      	bge.n	8015388 <rint+0x70>
 8015336:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801533a:	4311      	orrs	r1, r2
 801533c:	d06b      	beq.n	8015416 <rint+0xfe>
 801533e:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8015342:	4316      	orrs	r6, r2
 8015344:	4273      	negs	r3, r6
 8015346:	431e      	orrs	r6, r3
 8015348:	4b36      	ldr	r3, [pc, #216]	; (8015424 <rint+0x10c>)
 801534a:	0b36      	lsrs	r6, r6, #12
 801534c:	0c6d      	lsrs	r5, r5, #17
 801534e:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8015352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015356:	046d      	lsls	r5, r5, #17
 8015358:	ea46 0105 	orr.w	r1, r6, r5
 801535c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8015360:	ee10 0a10 	vmov	r0, s0
 8015364:	4632      	mov	r2, r6
 8015366:	463b      	mov	r3, r7
 8015368:	f7eb f810 	bl	800038c <__adddf3>
 801536c:	e9cd 0100 	strd	r0, r1, [sp]
 8015370:	4632      	mov	r2, r6
 8015372:	463b      	mov	r3, r7
 8015374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015378:	f7eb f806 	bl	8000388 <__aeabi_dsub>
 801537c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015380:	4602      	mov	r2, r0
 8015382:	ea41 73c4 	orr.w	r3, r1, r4, lsl #31
 8015386:	e046      	b.n	8015416 <rint+0xfe>
 8015388:	4827      	ldr	r0, [pc, #156]	; (8015428 <rint+0x110>)
 801538a:	4130      	asrs	r0, r6
 801538c:	ea03 0700 	and.w	r7, r3, r0
 8015390:	4317      	orrs	r7, r2
 8015392:	d040      	beq.n	8015416 <rint+0xfe>
 8015394:	0843      	lsrs	r3, r0, #1
 8015396:	ea05 0203 	and.w	r2, r5, r3
 801539a:	4311      	orrs	r1, r2
 801539c:	d027      	beq.n	80153ee <rint+0xd6>
 801539e:	ea25 0303 	bic.w	r3, r5, r3
 80153a2:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80153a6:	2e13      	cmp	r6, #19
 80153a8:	fa45 f506 	asr.w	r5, r5, r6
 80153ac:	bf0c      	ite	eq
 80153ae:	f04f 4100 	moveq.w	r1, #2147483648	; 0x80000000
 80153b2:	2100      	movne	r1, #0
 80153b4:	431d      	orrs	r5, r3
 80153b6:	e01a      	b.n	80153ee <rint+0xd6>
 80153b8:	2e33      	cmp	r6, #51	; 0x33
 80153ba:	dd08      	ble.n	80153ce <rint+0xb6>
 80153bc:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80153c0:	ee10 0a10 	vmov	r0, s0
 80153c4:	4619      	mov	r1, r3
 80153c6:	d128      	bne.n	801541a <rint+0x102>
 80153c8:	f7ea ffe0 	bl	800038c <__adddf3>
 80153cc:	e025      	b.n	801541a <rint+0x102>
 80153ce:	f2a7 4613 	subw	r6, r7, #1043	; 0x413
 80153d2:	f04f 30ff 	mov.w	r0, #4294967295
 80153d6:	40f0      	lsrs	r0, r6
 80153d8:	4202      	tst	r2, r0
 80153da:	d01c      	beq.n	8015416 <rint+0xfe>
 80153dc:	0843      	lsrs	r3, r0, #1
 80153de:	4219      	tst	r1, r3
 80153e0:	bf1f      	itttt	ne
 80153e2:	ea21 0303 	bicne.w	r3, r1, r3
 80153e6:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
 80153ea:	4131      	asrne	r1, r6
 80153ec:	4319      	orrne	r1, r3
 80153ee:	4b0d      	ldr	r3, [pc, #52]	; (8015424 <rint+0x10c>)
 80153f0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80153f4:	4608      	mov	r0, r1
 80153f6:	4629      	mov	r1, r5
 80153f8:	e9d4 4500 	ldrd	r4, r5, [r4]
 80153fc:	4622      	mov	r2, r4
 80153fe:	462b      	mov	r3, r5
 8015400:	f7ea ffc4 	bl	800038c <__adddf3>
 8015404:	e9cd 0100 	strd	r0, r1, [sp]
 8015408:	4622      	mov	r2, r4
 801540a:	462b      	mov	r3, r5
 801540c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015410:	f7ea ffba 	bl	8000388 <__aeabi_dsub>
 8015414:	e001      	b.n	801541a <rint+0x102>
 8015416:	4610      	mov	r0, r2
 8015418:	4619      	mov	r1, r3
 801541a:	ec41 0b10 	vmov	d0, r0, r1
 801541e:	b003      	add	sp, #12
 8015420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015422:	bf00      	nop
 8015424:	0802d428 	.word	0x0802d428
 8015428:	000fffff 	.word	0x000fffff
 801542c:	00000000 	.word	0x00000000

08015430 <scalbn>:
 8015430:	b570      	push	{r4, r5, r6, lr}
 8015432:	ec55 4b10 	vmov	r4, r5, d0
 8015436:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801543a:	4606      	mov	r6, r0
 801543c:	462b      	mov	r3, r5
 801543e:	b9a2      	cbnz	r2, 801546a <scalbn+0x3a>
 8015440:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015444:	4323      	orrs	r3, r4
 8015446:	d059      	beq.n	80154fc <scalbn+0xcc>
 8015448:	2200      	movs	r2, #0
 801544a:	4b33      	ldr	r3, [pc, #204]	; (8015518 <scalbn+0xe8>)
 801544c:	4629      	mov	r1, r5
 801544e:	ee10 0a10 	vmov	r0, s0
 8015452:	f7eb f94d 	bl	80006f0 <__aeabi_dmul>
 8015456:	4a31      	ldr	r2, [pc, #196]	; (801551c <scalbn+0xec>)
 8015458:	4296      	cmp	r6, r2
 801545a:	4604      	mov	r4, r0
 801545c:	460d      	mov	r5, r1
 801545e:	460b      	mov	r3, r1
 8015460:	da0f      	bge.n	8015482 <scalbn+0x52>
 8015462:	a329      	add	r3, pc, #164	; (adr r3, 8015508 <scalbn+0xd8>)
 8015464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015468:	e045      	b.n	80154f6 <scalbn+0xc6>
 801546a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801546e:	428a      	cmp	r2, r1
 8015470:	d10a      	bne.n	8015488 <scalbn+0x58>
 8015472:	ee10 2a10 	vmov	r2, s0
 8015476:	462b      	mov	r3, r5
 8015478:	4620      	mov	r0, r4
 801547a:	4629      	mov	r1, r5
 801547c:	f7ea ff86 	bl	800038c <__adddf3>
 8015480:	e03e      	b.n	8015500 <scalbn+0xd0>
 8015482:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015486:	3a36      	subs	r2, #54	; 0x36
 8015488:	4432      	add	r2, r6
 801548a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801548e:	428a      	cmp	r2, r1
 8015490:	dd02      	ble.n	8015498 <scalbn+0x68>
 8015492:	ec45 4b11 	vmov	d1, r4, r5
 8015496:	e011      	b.n	80154bc <scalbn+0x8c>
 8015498:	2a00      	cmp	r2, #0
 801549a:	dd06      	ble.n	80154aa <scalbn+0x7a>
 801549c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80154a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80154a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154a8:	e028      	b.n	80154fc <scalbn+0xcc>
 80154aa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80154ae:	da17      	bge.n	80154e0 <scalbn+0xb0>
 80154b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80154b4:	429e      	cmp	r6, r3
 80154b6:	ec45 4b11 	vmov	d1, r4, r5
 80154ba:	dd07      	ble.n	80154cc <scalbn+0x9c>
 80154bc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8015510 <scalbn+0xe0>
 80154c0:	f000 f830 	bl	8015524 <copysign>
 80154c4:	a312      	add	r3, pc, #72	; (adr r3, 8015510 <scalbn+0xe0>)
 80154c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ca:	e006      	b.n	80154da <scalbn+0xaa>
 80154cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015508 <scalbn+0xd8>
 80154d0:	f000 f828 	bl	8015524 <copysign>
 80154d4:	a30c      	add	r3, pc, #48	; (adr r3, 8015508 <scalbn+0xd8>)
 80154d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154da:	ec51 0b10 	vmov	r0, r1, d0
 80154de:	e00a      	b.n	80154f6 <scalbn+0xc6>
 80154e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80154e4:	3236      	adds	r2, #54	; 0x36
 80154e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80154ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154ee:	4b0c      	ldr	r3, [pc, #48]	; (8015520 <scalbn+0xf0>)
 80154f0:	4620      	mov	r0, r4
 80154f2:	4629      	mov	r1, r5
 80154f4:	2200      	movs	r2, #0
 80154f6:	f7eb f8fb 	bl	80006f0 <__aeabi_dmul>
 80154fa:	e001      	b.n	8015500 <scalbn+0xd0>
 80154fc:	4620      	mov	r0, r4
 80154fe:	4629      	mov	r1, r5
 8015500:	ec41 0b10 	vmov	d0, r0, r1
 8015504:	bd70      	pop	{r4, r5, r6, pc}
 8015506:	bf00      	nop
 8015508:	c2f8f359 	.word	0xc2f8f359
 801550c:	01a56e1f 	.word	0x01a56e1f
 8015510:	8800759c 	.word	0x8800759c
 8015514:	7e37e43c 	.word	0x7e37e43c
 8015518:	43500000 	.word	0x43500000
 801551c:	ffff3cb0 	.word	0xffff3cb0
 8015520:	3c900000 	.word	0x3c900000

08015524 <copysign>:
 8015524:	ec53 2b10 	vmov	r2, r3, d0
 8015528:	ee11 0a90 	vmov	r0, s3
 801552c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8015530:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015534:	ea41 0300 	orr.w	r3, r1, r0
 8015538:	ec43 2b10 	vmov	d0, r2, r3
 801553c:	4770      	bx	lr
	...

08015540 <__errno>:
 8015540:	4b01      	ldr	r3, [pc, #4]	; (8015548 <__errno+0x8>)
 8015542:	6818      	ldr	r0, [r3, #0]
 8015544:	4770      	bx	lr
 8015546:	bf00      	nop
 8015548:	20010590 	.word	0x20010590

0801554c <_sbrk>:
 801554c:	4b04      	ldr	r3, [pc, #16]	; (8015560 <_sbrk+0x14>)
 801554e:	6819      	ldr	r1, [r3, #0]
 8015550:	4602      	mov	r2, r0
 8015552:	b909      	cbnz	r1, 8015558 <_sbrk+0xc>
 8015554:	4903      	ldr	r1, [pc, #12]	; (8015564 <_sbrk+0x18>)
 8015556:	6019      	str	r1, [r3, #0]
 8015558:	6818      	ldr	r0, [r3, #0]
 801555a:	4402      	add	r2, r0
 801555c:	601a      	str	r2, [r3, #0]
 801555e:	4770      	bx	lr
 8015560:	20042fa0 	.word	0x20042fa0
 8015564:	200497f4 	.word	0x200497f4

08015568 <_init>:
 8015568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801556a:	bf00      	nop
 801556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801556e:	bc08      	pop	{r3}
 8015570:	469e      	mov	lr, r3
 8015572:	4770      	bx	lr

08015574 <_fini>:
 8015574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015576:	bf00      	nop
 8015578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801557a:	bc08      	pop	{r3}
 801557c:	469e      	mov	lr, r3
 801557e:	4770      	bx	lr
